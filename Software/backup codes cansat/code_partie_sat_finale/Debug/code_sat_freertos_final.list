
code_sat_freertos_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fa4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08011184  08011184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011468  08011468  00013080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011468  08011468  00012468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011470  08011470  00013080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011470  08011470  00012470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011474  08011474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08011478  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041e0  20000080  080114f8  00013080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004260  080114f8  00013260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d708  00000000  00000000  000130b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006635  00000000  00000000  000407b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f8  00000000  00000000  00046df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ca2  00000000  00000000  000492e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d45  00000000  00000000  0004af8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032b5f  00000000  00000000  00072ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec6b2  00000000  00000000  000a582e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00191ee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2d8  00000000  00000000  00191f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0019c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801116c 	.word	0x0801116c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	0801116c 	.word	0x0801116c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b988 	b.w	8000e24 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	468e      	mov	lr, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	4688      	mov	r8, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d962      	bls.n	8000c08 <__udivmoddi4+0xdc>
 8000b42:	fab2 f682 	clz	r6, r2
 8000b46:	b14e      	cbz	r6, 8000b5c <__udivmoddi4+0x30>
 8000b48:	f1c6 0320 	rsb	r3, r6, #32
 8000b4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	40b7      	lsls	r7, r6
 8000b56:	ea43 0808 	orr.w	r8, r3, r8
 8000b5a:	40b4      	lsls	r4, r6
 8000b5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b68:	0c23      	lsrs	r3, r4, #16
 8000b6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b72:	fb01 f20c 	mul.w	r2, r1, ip
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b80:	f080 80ea 	bcs.w	8000d58 <__udivmoddi4+0x22c>
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f240 80e7 	bls.w	8000d58 <__udivmoddi4+0x22c>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	443b      	add	r3, r7
 8000b8e:	1a9a      	subs	r2, r3, r2
 8000b90:	b2a3      	uxth	r3, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba2:	459c      	cmp	ip, r3
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x8e>
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bac:	f080 80d6 	bcs.w	8000d5c <__udivmoddi4+0x230>
 8000bb0:	459c      	cmp	ip, r3
 8000bb2:	f240 80d3 	bls.w	8000d5c <__udivmoddi4+0x230>
 8000bb6:	443b      	add	r3, r7
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bbe:	eba3 030c 	sub.w	r3, r3, ip
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11d      	cbz	r5, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40f3      	lsrs	r3, r6
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e9c5 3200 	strd	r3, r2, [r5]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d905      	bls.n	8000be2 <__udivmoddi4+0xb6>
 8000bd6:	b10d      	cbz	r5, 8000bdc <__udivmoddi4+0xb0>
 8000bd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4608      	mov	r0, r1
 8000be0:	e7f5      	b.n	8000bce <__udivmoddi4+0xa2>
 8000be2:	fab3 f183 	clz	r1, r3
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d146      	bne.n	8000c78 <__udivmoddi4+0x14c>
 8000bea:	4573      	cmp	r3, lr
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xc8>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 8105 	bhi.w	8000dfe <__udivmoddi4+0x2d2>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	4690      	mov	r8, r2
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e5      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c02:	e9c5 4800 	strd	r4, r8, [r5]
 8000c06:	e7e2      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f000 8090 	beq.w	8000d2e <__udivmoddi4+0x202>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	f040 80a4 	bne.w	8000d60 <__udivmoddi4+0x234>
 8000c18:	1a8a      	subs	r2, r1, r2
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	b2bc      	uxth	r4, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c32:	fb04 f20c 	mul.w	r2, r4, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x11e>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x11c>
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f200 80e0 	bhi.w	8000e08 <__udivmoddi4+0x2dc>
 8000c48:	46c4      	mov	ip, r8
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c58:	fb02 f404 	mul.w	r4, r2, r4
 8000c5c:	429c      	cmp	r4, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x144>
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x142>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f200 80ca 	bhi.w	8000e02 <__udivmoddi4+0x2d6>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	1b1b      	subs	r3, r3, r4
 8000c72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c76:	e7a5      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c78:	f1c1 0620 	rsb	r6, r1, #32
 8000c7c:	408b      	lsls	r3, r1
 8000c7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c82:	431f      	orrs	r7, r3
 8000c84:	fa0e f401 	lsl.w	r4, lr, r1
 8000c88:	fa20 f306 	lsr.w	r3, r0, r6
 8000c8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c94:	4323      	orrs	r3, r4
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	fa1f fc87 	uxth.w	ip, r7
 8000c9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ca8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cb6:	d909      	bls.n	8000ccc <__udivmoddi4+0x1a0>
 8000cb8:	193c      	adds	r4, r7, r4
 8000cba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cbe:	f080 809c 	bcs.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8099 	bls.w	8000dfa <__udivmoddi4+0x2ce>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	443c      	add	r4, r7
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	fa1f fe83 	uxth.w	lr, r3
 8000cd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000cdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ce4:	45a4      	cmp	ip, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1ce>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000cee:	f080 8082 	bcs.w	8000df6 <__udivmoddi4+0x2ca>
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d97f      	bls.n	8000df6 <__udivmoddi4+0x2ca>
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cfe:	eba4 040c 	sub.w	r4, r4, ip
 8000d02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d06:	4564      	cmp	r4, ip
 8000d08:	4673      	mov	r3, lr
 8000d0a:	46e1      	mov	r9, ip
 8000d0c:	d362      	bcc.n	8000dd4 <__udivmoddi4+0x2a8>
 8000d0e:	d05f      	beq.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x1fe>
 8000d12:	ebb8 0203 	subs.w	r2, r8, r3
 8000d16:	eb64 0409 	sbc.w	r4, r4, r9
 8000d1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d22:	431e      	orrs	r6, r3
 8000d24:	40cc      	lsrs	r4, r1
 8000d26:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e74f      	b.n	8000bce <__udivmoddi4+0xa2>
 8000d2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d32:	0c01      	lsrs	r1, r0, #16
 8000d34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d38:	b280      	uxth	r0, r0
 8000d3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4638      	mov	r0, r7
 8000d42:	463c      	mov	r4, r7
 8000d44:	46b8      	mov	r8, r7
 8000d46:	46be      	mov	lr, r7
 8000d48:	2620      	movs	r6, #32
 8000d4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d4e:	eba2 0208 	sub.w	r2, r2, r8
 8000d52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d56:	e766      	b.n	8000c26 <__udivmoddi4+0xfa>
 8000d58:	4601      	mov	r1, r0
 8000d5a:	e718      	b.n	8000b8e <__udivmoddi4+0x62>
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	e72c      	b.n	8000bba <__udivmoddi4+0x8e>
 8000d60:	f1c6 0220 	rsb	r2, r6, #32
 8000d64:	fa2e f302 	lsr.w	r3, lr, r2
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b1      	lsls	r1, r6
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d74:	430a      	orrs	r2, r1
 8000d76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb08 f904 	mul.w	r9, r8, r4
 8000d8a:	40b0      	lsls	r0, r6
 8000d8c:	4589      	cmp	r9, r1
 8000d8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d92:	b280      	uxth	r0, r0
 8000d94:	d93e      	bls.n	8000e14 <__udivmoddi4+0x2e8>
 8000d96:	1879      	adds	r1, r7, r1
 8000d98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d9c:	d201      	bcs.n	8000da2 <__udivmoddi4+0x276>
 8000d9e:	4589      	cmp	r9, r1
 8000da0:	d81f      	bhi.n	8000de2 <__udivmoddi4+0x2b6>
 8000da2:	eba1 0109 	sub.w	r1, r1, r9
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fb09 f804 	mul.w	r8, r9, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	b292      	uxth	r2, r2
 8000db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db8:	4542      	cmp	r2, r8
 8000dba:	d229      	bcs.n	8000e10 <__udivmoddi4+0x2e4>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dc2:	d2c4      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc4:	4542      	cmp	r2, r8
 8000dc6:	d2c2      	bcs.n	8000d4e <__udivmoddi4+0x222>
 8000dc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dcc:	443a      	add	r2, r7
 8000dce:	e7be      	b.n	8000d4e <__udivmoddi4+0x222>
 8000dd0:	45f0      	cmp	r8, lr
 8000dd2:	d29d      	bcs.n	8000d10 <__udivmoddi4+0x1e4>
 8000dd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000dd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ddc:	3801      	subs	r0, #1
 8000dde:	46e1      	mov	r9, ip
 8000de0:	e796      	b.n	8000d10 <__udivmoddi4+0x1e4>
 8000de2:	eba7 0909 	sub.w	r9, r7, r9
 8000de6:	4449      	add	r1, r9
 8000de8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000dec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df0:	fb09 f804 	mul.w	r8, r9, r4
 8000df4:	e7db      	b.n	8000dae <__udivmoddi4+0x282>
 8000df6:	4673      	mov	r3, lr
 8000df8:	e77f      	b.n	8000cfa <__udivmoddi4+0x1ce>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	e766      	b.n	8000ccc <__udivmoddi4+0x1a0>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e6fd      	b.n	8000bfe <__udivmoddi4+0xd2>
 8000e02:	443b      	add	r3, r7
 8000e04:	3a02      	subs	r2, #2
 8000e06:	e733      	b.n	8000c70 <__udivmoddi4+0x144>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	443b      	add	r3, r7
 8000e0e:	e71c      	b.n	8000c4a <__udivmoddi4+0x11e>
 8000e10:	4649      	mov	r1, r9
 8000e12:	e79c      	b.n	8000d4e <__udivmoddi4+0x222>
 8000e14:	eba1 0109 	sub.w	r1, r1, r9
 8000e18:	46c4      	mov	ip, r8
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fb09 f804 	mul.w	r8, r9, r4
 8000e22:	e7c4      	b.n	8000dae <__udivmoddi4+0x282>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00f f8ef 	bl	8010024 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e46:	4b40      	ldr	r3, [pc, #256]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e48:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e50:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e56:	4b3c      	ldr	r3, [pc, #240]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e62:	4b39      	ldr	r3, [pc, #228]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e68:	4b37      	ldr	r3, [pc, #220]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e6e:	4b36      	ldr	r3, [pc, #216]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e70:	2208      	movs	r2, #8
 8000e72:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e74:	4b34      	ldr	r3, [pc, #208]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e7a:	4b33      	ldr	r3, [pc, #204]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000e80:	4b31      	ldr	r3, [pc, #196]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e86:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e94:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ea2:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ea8:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb0:	4825      	ldr	r0, [pc, #148]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000eb2:	f002 fc39 	bl	8003728 <HAL_ADC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ebc:	f001 f8f4 	bl	80020a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481f      	ldr	r0, [pc, #124]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000ecc:	f003 fdfe 	bl	8004acc <HAL_ADCEx_MultiModeConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ed6:	f001 f8e7 	bl	80020a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_ADC1_Init+0x124>)
 8000edc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ede:	2306      	movs	r3, #6
 8000ee0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee6:	237f      	movs	r3, #127	@ 0x7f
 8000ee8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eea:	2304      	movs	r3, #4
 8000eec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4814      	ldr	r0, [pc, #80]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000ef8:	f003 f886 	bl	8004008 <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f02:	f001 f8d1 	bl	80020a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000f06:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <MX_ADC1_Init+0x128>)
 8000f08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000f14:	f003 f878 	bl	8004008 <HAL_ADC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000f1e:	f001 f8c3 	bl	80020a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <MX_ADC1_Init+0x12c>)
 8000f24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f26:	2312      	movs	r3, #18
 8000f28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <MX_ADC1_Init+0x120>)
 8000f30:	f003 f86a 	bl	8004008 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000f3a:	f001 f8b5 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3730      	adds	r7, #48	@ 0x30
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000009c 	.word	0x2000009c
 8000f4c:	cb840000 	.word	0xcb840000
 8000f50:	c3210000 	.word	0xc3210000
 8000f54:	0c900008 	.word	0x0c900008

08000f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09a      	sub	sp, #104	@ 0x68
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	2244      	movs	r2, #68	@ 0x44
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00f f853 	bl	8010024 <memset>
  if(adcHandle->Instance==ADC1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f86:	d167      	bne.n	8001058 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 fe8b 	bl	8006cb4 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fa4:	f001 f880 	bl	80020a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <HAL_ADC_MspInit+0x108>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fac:	4a2c      	ldr	r2, [pc, #176]	@ (8001060 <HAL_ADC_MspInit+0x108>)
 8000fae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <HAL_ADC_MspInit+0x108>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <HAL_ADC_MspInit+0x108>)
 8000fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc4:	4a26      	ldr	r2, [pc, #152]	@ (8001060 <HAL_ADC_MspInit+0x108>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fcc:	4b24      	ldr	r3, [pc, #144]	@ (8001060 <HAL_ADC_MspInit+0x108>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fee:	f004 fa2f 	bl	8005450 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 8000ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <HAL_ADC_MspInit+0x110>)
 8000ff6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 8000ffa:	2205      	movs	r2, #5
 8000ffc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 800100c:	2280      	movs	r2, #128	@ 0x80
 800100e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 8001012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001016:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 800101a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800101e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001020:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 8001022:	2220      	movs	r2, #32
 8001024:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 800102e:	f003 fed1 	bl	8004dd4 <HAL_DMA_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001038:	f001 f836 	bl	80020a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a09      	ldr	r2, [pc, #36]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 8001040:	655a      	str	r2, [r3, #84]	@ 0x54
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_ADC_MspInit+0x10c>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2105      	movs	r1, #5
 800104c:	2012      	movs	r0, #18
 800104e:	f003 fe99 	bl	8004d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001052:	2012      	movs	r0, #18
 8001054:	f003 feb0 	bl	8004db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001058:	bf00      	nop
 800105a:	3768      	adds	r7, #104	@ 0x68
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	20000108 	.word	0x20000108
 8001068:	4002001c 	.word	0x4002001c
 800106c:	00000000 	.word	0x00000000

08001070 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001082:	f040 8097 	bne.w	80011b4 <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 8001086:	4b52      	ldr	r3, [pc, #328]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa6a 	bl	8000564 <__aeabi_i2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	a14a      	add	r1, pc, #296	@ (adr r1, 80011c0 <HAL_ADC_ConvCpltCallback+0x150>)
 8001096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800109a:	f7ff fbf7 	bl	800088c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fcd9 	bl	8000a5c <__aeabi_d2f>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a49      	ldr	r2, [pc, #292]	@ (80011d4 <HAL_ADC_ConvCpltCallback+0x164>)
 80010ae:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80010b0:	4b49      	ldr	r3, [pc, #292]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x168>)
 80010b2:	ed93 7a00 	vldr	s14, [r3]
 80010b6:	4b49      	ldr	r3, [pc, #292]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x16c>)
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	ee17 0a90 	vmov	r0, s15
 80010c4:	f7ff fa60 	bl	8000588 <__aeabi_f2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	f04f 0000 	mov.w	r0, #0
 80010d0:	4943      	ldr	r1, [pc, #268]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x170>)
 80010d2:	f7ff fbdb 	bl	800088c <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4690      	mov	r8, r2
 80010dc:	4699      	mov	r9, r3
 80010de:	4b3c      	ldr	r3, [pc, #240]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x160>)
 80010e0:	885b      	ldrh	r3, [r3, #2]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa3e 	bl	8000564 <__aeabi_i2d>
 80010e8:	4604      	mov	r4, r0
 80010ea:	460d      	mov	r5, r1
 80010ec:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <HAL_ADC_ConvCpltCallback+0x164>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa49 	bl	8000588 <__aeabi_f2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b3a      	ldr	r3, [pc, #232]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x174>)
 80010fc:	f7ff fbc6 	bl	800088c <__aeabi_ddiv>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4620      	mov	r0, r4
 8001106:	4629      	mov	r1, r5
 8001108:	f7ff fa96 	bl	8000638 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4614      	mov	r4, r2
 8001112:	461d      	mov	r5, r3
 8001114:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x16c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa35 	bl	8000588 <__aeabi_f2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff f8cf 	bl	80002c8 <__aeabi_dsub>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4640      	mov	r0, r8
 8001130:	4649      	mov	r1, r9
 8001132:	f7ff fa81 	bl	8000638 <__aeabi_dmul>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fc8d 	bl	8000a5c <__aeabi_d2f>
 8001142:	ee07 0a10 	vmov	s14, r0
 8001146:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 800114a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114e:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <HAL_ADC_ConvCpltCallback+0x178>)
 8001150:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x160>)
 8001156:	889b      	ldrh	r3, [r3, #4]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fa03 	bl	8000564 <__aeabi_i2d>
 800115e:	a31a      	add	r3, pc, #104	@ (adr r3, 80011c8 <HAL_ADC_ConvCpltCallback+0x158>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fb92 	bl	800088c <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001176:	f7ff fa5f 	bl	8000638 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4614      	mov	r4, r2
 8001180:	461d      	mov	r5, r3
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_ADC_ConvCpltCallback+0x164>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9fe 	bl	8000588 <__aeabi_f2d>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff fa50 	bl	8000638 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc5c 	bl	8000a5c <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a11      	ldr	r2, [pc, #68]	@ (80011ec <HAL_ADC_ConvCpltCallback+0x17c>)
 80011a8:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 80011aa:	2203      	movs	r2, #3
 80011ac:	4908      	ldr	r1, [pc, #32]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x160>)
 80011ae:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <HAL_ADC_ConvCpltCallback+0x180>)
 80011b0:	f002 fc3e 	bl	8003a30 <HAL_ADC_Start_DMA>

	}

}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011be:	bf00      	nop
 80011c0:	d70a3d70 	.word	0xd70a3d70
 80011c4:	40b36323 	.word	0x40b36323
 80011c8:	00000000 	.word	0x00000000
 80011cc:	40affe00 	.word	0x40affe00
 80011d0:	200008dc 	.word	0x200008dc
 80011d4:	200008e8 	.word	0x200008e8
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004
 80011e0:	40590000 	.word	0x40590000
 80011e4:	40080000 	.word	0x40080000
 80011e8:	200008e4 	.word	0x200008e4
 80011ec:	200008ec 	.word	0x200008ec
 80011f0:	2000009c 	.word	0x2000009c

080011f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b094      	sub	sp, #80	@ 0x50
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 80011fa:	2300      	movs	r3, #0
 80011fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 80011fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001202:	4618      	mov	r0, r3
 8001204:	f00c fa49 	bl	800d69a <osMutexCreate>
 8001208:	4603      	mov	r3, r0
 800120a:	4a35      	ldr	r2, [pc, #212]	@ (80012e0 <MX_FREERTOS_Init+0xec>)
 800120c:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2Cmutex */
  osMutexDef(I2Cmutex);
 800120e:	2300      	movs	r3, #0
 8001210:	64bb      	str	r3, [r7, #72]	@ 0x48
  I2CmutexHandle = osMutexCreate(osMutex(I2Cmutex));
 8001212:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001216:	4618      	mov	r0, r3
 8001218:	f00c fa3f 	bl	800d69a <osMutexCreate>
 800121c:	4603      	mov	r3, r0
 800121e:	4a31      	ldr	r2, [pc, #196]	@ (80012e4 <MX_FREERTOS_Init+0xf0>)
 8001220:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartmutex */
  osMutexDef(uartmutex);
 8001222:	2300      	movs	r3, #0
 8001224:	647b      	str	r3, [r7, #68]	@ 0x44
  uartmutexHandle = osMutexCreate(osMutex(uartmutex));
 8001226:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800122a:	4618      	mov	r0, r3
 800122c:	f00c fa35 	bl	800d69a <osMutexCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a2d      	ldr	r2, [pc, #180]	@ (80012e8 <MX_FREERTOS_Init+0xf4>)
 8001234:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of uartTxDone */
  osSemaphoreDef(uartTxDone);
 8001236:	2300      	movs	r3, #0
 8001238:	643b      	str	r3, [r7, #64]	@ 0x40
  uartTxDoneHandle = osSemaphoreCreate(osSemaphore(uartTxDone), 1);
 800123a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800123e:	2101      	movs	r1, #1
 8001240:	4618      	mov	r0, r3
 8001242:	f00c fabb 	bl	800d7bc <osSemaphoreCreate>
 8001246:	4603      	mov	r3, r0
 8001248:	4a28      	ldr	r2, [pc, #160]	@ (80012ec <MX_FREERTOS_Init+0xf8>)
 800124a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  osSemaphoreWait(uartTxDoneHandle, 0);
 800124c:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <MX_FREERTOS_Init+0xf8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f00c fad0 	bl	800d7f8 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityAboveNormal, 0, 300);
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <MX_FREERTOS_Init+0xfc>)
 800125a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800125e:	461d      	mov	r5, r3
 8001260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 8001268:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f00c f9d8 	bl	800d624 <osThreadCreate>
 8001274:	4603      	mov	r3, r0
 8001276:	4a1f      	ldr	r2, [pc, #124]	@ (80012f4 <MX_FREERTOS_Init+0x100>)
 8001278:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 512);
 800127a:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <MX_FREERTOS_Init+0x104>)
 800127c:	f107 0418 	add.w	r4, r7, #24
 8001280:	461d      	mov	r5, r3
 8001282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f00c f9c7 	bl	800d624 <osThreadCreate>
 8001296:	4603      	mov	r3, r0
 8001298:	4a18      	ldr	r2, [pc, #96]	@ (80012fc <MX_FREERTOS_Init+0x108>)
 800129a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityRealtime, 0, 256);
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <MX_FREERTOS_Init+0x10c>)
 800129e:	1d3c      	adds	r4, r7, #4
 80012a0:	461d      	mov	r5, r3
 80012a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	682b      	ldr	r3, [r5, #0]
 80012a8:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f00c f9b8 	bl	800d624 <osThreadCreate>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a13      	ldr	r2, [pc, #76]	@ (8001304 <MX_FREERTOS_Init+0x110>)
 80012b8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */


  CoreDebug->DEMCR |=CoreDebug_DEMCR_TRCENA_Msk;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_FREERTOS_Init+0x114>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <MX_FREERTOS_Init+0x114>)
 80012c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012c4:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT =0;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_FREERTOS_Init+0x118>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_FREERTOS_Init+0x118>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <MX_FREERTOS_Init+0x118>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80012d8:	bf00      	nop
 80012da:	3750      	adds	r7, #80	@ 0x50
 80012dc:	46bd      	mov	sp, r7
 80012de:	bdb0      	pop	{r4, r5, r7, pc}
 80012e0:	200001d0 	.word	0x200001d0
 80012e4:	200001d4 	.word	0x200001d4
 80012e8:	200001d8 	.word	0x200001d8
 80012ec:	200001dc 	.word	0x200001dc
 80012f0:	08011194 	.word	0x08011194
 80012f4:	200001c4 	.word	0x200001c4
 80012f8:	080111b4 	.word	0x080111b4
 80012fc:	200001c8 	.word	0x200001c8
 8001300:	080111d8 	.word	0x080111d8
 8001304:	200001cc 	.word	0x200001cc
 8001308:	e000edf0 	.word	0xe000edf0
 800130c:	e0001000 	.word	0xe0001000

08001310 <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af02      	add	r7, sp, #8
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001318:	f00d fcea 	bl	800ecf0 <xTaskGetTickCount>
 800131c:	4603      	mov	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  lcd_clear();
 8001320:	f000 fc84 	bl	8001c2c <lcd_clear>
	  if(led_flag==0){
 8001324:	4b39      	ldr	r3, [pc, #228]	@ (800140c <Startstatemachine+0xfc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10c      	bne.n	8001346 <Startstatemachine+0x36>
		  LED_Setcolour(255, 0, 0,0, 0, 255);
 800132c:	23ff      	movs	r3, #255	@ 0xff
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2300      	movs	r3, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	20ff      	movs	r0, #255	@ 0xff
 800133c:	f000 fcda 	bl	8001cf4 <LED_Setcolour>
		  LED_Update();
 8001340:	f000 fd68 	bl	8001e14 <LED_Update>
 8001344:	e00b      	b.n	800135e <Startstatemachine+0x4e>

	  }
	  else{
		  LED_Setcolour(0, 0, 255,255, 0, 0);
 8001346:	2300      	movs	r3, #0
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	23ff      	movs	r3, #255	@ 0xff
 8001350:	22ff      	movs	r2, #255	@ 0xff
 8001352:	2100      	movs	r1, #0
 8001354:	2000      	movs	r0, #0
 8001356:	f000 fccd 	bl	8001cf4 <LED_Setcolour>
		  LED_Update();
 800135a:	f000 fd5b 	bl	8001e14 <LED_Update>
	  }
	  led_flag=1-led_flag;
 800135e:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <Startstatemachine+0xfc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f1c3 0301 	rsb	r3, r3, #1
 8001366:	4a29      	ldr	r2, [pc, #164]	@ (800140c <Startstatemachine+0xfc>)
 8001368:	6013      	str	r3, [r2, #0]
	  if(flag_fin==0){
 800136a:	4b29      	ldr	r3, [pc, #164]	@ (8001410 <Startstatemachine+0x100>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d12d      	bne.n	80013ce <Startstatemachine+0xbe>
	  setCursor(0,0);
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f000 fc7a 	bl	8001c6e <setCursor>
	  snprintf((char *)lcdbuffer,30,"hauteur=%0.2f",OTHERData.altitude_baro);
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <Startstatemachine+0x104>)
 800137c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f902 	bl	8000588 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	e9cd 2300 	strd	r2, r3, [sp]
 800138c:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <Startstatemachine+0x108>)
 800138e:	211e      	movs	r1, #30
 8001390:	4822      	ldr	r0, [pc, #136]	@ (800141c <Startstatemachine+0x10c>)
 8001392:	f00e fe11 	bl	800ffb8 <sniprintf>
	  lcd_send_string((char *)lcdbuffer);
 8001396:	4821      	ldr	r0, [pc, #132]	@ (800141c <Startstatemachine+0x10c>)
 8001398:	f000 fc52 	bl	8001c40 <lcd_send_string>
	  osDelay(2);
 800139c:	2002      	movs	r0, #2
 800139e:	f00c f968 	bl	800d672 <osDelay>
	  setCursor(1,0);
 80013a2:	2100      	movs	r1, #0
 80013a4:	2001      	movs	r0, #1
 80013a6:	f000 fc62 	bl	8001c6e <setCursor>
	  snprintf((char *)lcdbuffer,30,"dist=%0.1fm",distance_RSSI);
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <Startstatemachine+0x110>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	e9cd 2300 	strd	r2, r3, [sp]
 80013bc:	4a19      	ldr	r2, [pc, #100]	@ (8001424 <Startstatemachine+0x114>)
 80013be:	211e      	movs	r1, #30
 80013c0:	4816      	ldr	r0, [pc, #88]	@ (800141c <Startstatemachine+0x10c>)
 80013c2:	f00e fdf9 	bl	800ffb8 <sniprintf>
	  lcd_send_string((char *)lcdbuffer);
 80013c6:	4815      	ldr	r0, [pc, #84]	@ (800141c <Startstatemachine+0x10c>)
 80013c8:	f000 fc3a 	bl	8001c40 <lcd_send_string>
 80013cc:	e017      	b.n	80013fe <Startstatemachine+0xee>
	  }
	  else{
		  setCursor(0,0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 fc4c 	bl	8001c6e <setCursor>
		  	  snprintf((char *)lcdbuffer,30,"FIN");
 80013d6:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <Startstatemachine+0x118>)
 80013d8:	211e      	movs	r1, #30
 80013da:	4810      	ldr	r0, [pc, #64]	@ (800141c <Startstatemachine+0x10c>)
 80013dc:	f00e fdec 	bl	800ffb8 <sniprintf>
		  	  lcd_send_string((char *)lcdbuffer);
 80013e0:	480e      	ldr	r0, [pc, #56]	@ (800141c <Startstatemachine+0x10c>)
 80013e2:	f000 fc2d 	bl	8001c40 <lcd_send_string>
		  	  setCursor(1,0);
 80013e6:	2100      	movs	r1, #0
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 fc40 	bl	8001c6e <setCursor>
		  	  snprintf((char *)lcdbuffer,30,"FIN");
 80013ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001428 <Startstatemachine+0x118>)
 80013f0:	211e      	movs	r1, #30
 80013f2:	480a      	ldr	r0, [pc, #40]	@ (800141c <Startstatemachine+0x10c>)
 80013f4:	f00e fde0 	bl	800ffb8 <sniprintf>
		  	  lcd_send_string((char *)lcdbuffer);
 80013f8:	4808      	ldr	r0, [pc, #32]	@ (800141c <Startstatemachine+0x10c>)
 80013fa:	f000 fc21 	bl	8001c40 <lcd_send_string>

	  }


	  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	21c8      	movs	r1, #200	@ 0xc8
 8001404:	4618      	mov	r0, r3
 8001406:	f00d fa2b 	bl	800e860 <vTaskDelayUntil>
  {
 800140a:	e789      	b.n	8001320 <Startstatemachine+0x10>
 800140c:	20000180 	.word	0x20000180
 8001410:	20000ab4 	.word	0x20000ab4
 8001414:	200008f0 	.word	0x200008f0
 8001418:	080111ec 	.word	0x080111ec
 800141c:	20000184 	.word	0x20000184
 8001420:	20000170 	.word	0x20000170
 8001424:	080111fc 	.word	0x080111fc
 8001428:	08011208 	.word	0x08011208

0800142c <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	@ 0x28
 8001430:	af02      	add	r7, sp, #8
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */

	FRESULT fres=FR_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	77fb      	strb	r3, [r7, #31]
	fres = f_mount(&FatFs, "", 1);
 8001438:	2201      	movs	r2, #1
 800143a:	4941      	ldr	r1, [pc, #260]	@ (8001540 <StartSdcard+0x114>)
 800143c:	4841      	ldr	r0, [pc, #260]	@ (8001544 <StartSdcard+0x118>)
 800143e:	f00b f839 	bl	800c4b4 <f_mount>
 8001442:	4603      	mov	r3, r0
 8001444:	77fb      	strb	r3, [r7, #31]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001446:	f00d fc53 	bl	800ecf0 <xTaskGetTickCount>
 800144a:	4603      	mov	r3, r0
 800144c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 800144e:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <StartSdcard+0x11c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 8001454:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <StartSdcard+0x120>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	4618      	mov	r0, r3
 800145e:	f00c f929 	bl	800d6b4 <osMutexWait>

		  blinker_sd_flag=1-blinker_sd_flag;
 8001462:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <StartSdcard+0x124>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f1c3 0301 	rsb	r3, r3, #1
 800146a:	4a39      	ldr	r2, [pc, #228]	@ (8001550 <StartSdcard+0x124>)
 800146c:	6013      	str	r3, [r2, #0]
		  if(blinker_sd_flag==1){
 800146e:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <StartSdcard+0x124>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d10a      	bne.n	800148c <StartSdcard+0x60>
			  LED_Setcolour(0,0,0,255,255,255);
 8001476:	23ff      	movs	r3, #255	@ 0xff
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	23ff      	movs	r3, #255	@ 0xff
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	23ff      	movs	r3, #255	@ 0xff
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2000      	movs	r0, #0
 8001486:	f000 fc35 	bl	8001cf4 <LED_Setcolour>
 800148a:	e009      	b.n	80014a0 <StartSdcard+0x74>
		  }
		  else{
			  LED_Setcolour(0,0,0,0,0,0);
 800148c:	2300      	movs	r3, #0
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	2300      	movs	r3, #0
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2300      	movs	r3, #0
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2000      	movs	r0, #0
 800149c:	f000 fc2a 	bl	8001cf4 <LED_Setcolour>
		  }

		  if(flag_drop==0){
 80014a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001554 <StartSdcard+0x128>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d112      	bne.n	80014ce <StartSdcard+0xa2>

			  if(sd_counter==5){
 80014a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001558 <StartSdcard+0x12c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d108      	bne.n	80014c2 <StartSdcard+0x96>
				  fres=store_in_sd(fres);
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fdfe 	bl	80020b4 <store_in_sd>
 80014b8:	4603      	mov	r3, r0
 80014ba:	77fb      	strb	r3, [r7, #31]

			  sd_counter=0;
 80014bc:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <StartSdcard+0x12c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			  }
			  sd_counter++;
 80014c2:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <StartSdcard+0x12c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a23      	ldr	r2, [pc, #140]	@ (8001558 <StartSdcard+0x12c>)
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	e005      	b.n	80014da <StartSdcard+0xae>

		  }
		  else{
			  fres=store_in_sd(fres);
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fdef 	bl	80020b4 <store_in_sd>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]

		  }



		  osMutexRelease(SDCard_mutexeHandle);
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <StartSdcard+0x120>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f00c f936 	bl	800d750 <osMutexRelease>

			if(flag_fin==1){
 80014e4:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <StartSdcard+0x130>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d107      	bne.n	80014fc <StartSdcard+0xd0>

				f_mount(NULL, "", 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	4914      	ldr	r1, [pc, #80]	@ (8001540 <StartSdcard+0x114>)
 80014f0:	2000      	movs	r0, #0
 80014f2:	f00a ffdf 	bl	800c4b4 <f_mount>
				osThreadSuspend(NULL);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f00c fa15 	bl	800d926 <osThreadSuspend>
			}

			  uint32_t end1= DWT->CYCCNT;
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <StartSdcard+0x11c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	617b      	str	r3, [r7, #20]
			  uint32_t cycles= end1-start1;
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	613b      	str	r3, [r7, #16]
			  timesdcard=(float) cycles/(SystemCoreClock/1000000.0f);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <StartSdcard+0x134>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001520:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8001564 <StartSdcard+0x138>
 8001524:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <StartSdcard+0x13c>)
 800152e:	edc3 7a00 	vstr	s15, [r3]


			  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	21c8      	movs	r1, #200	@ 0xc8
 8001538:	4618      	mov	r0, r3
 800153a:	f00d f991 	bl	800e860 <vTaskDelayUntil>
  {
 800153e:	e786      	b.n	800144e <StartSdcard+0x22>
 8001540:	0801120c 	.word	0x0801120c
 8001544:	20000474 	.word	0x20000474
 8001548:	e0001000 	.word	0xe0001000
 800154c:	200001d0 	.word	0x200001d0
 8001550:	20000174 	.word	0x20000174
 8001554:	20000aa8 	.word	0x20000aa8
 8001558:	20000168 	.word	0x20000168
 800155c:	20000ab4 	.word	0x20000ab4
 8001560:	20000008 	.word	0x20000008
 8001564:	49742400 	.word	0x49742400
 8001568:	20000178 	.word	0x20000178

0800156c <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	b09d      	sub	sp, #116	@ 0x74
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTarvosDecode */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001574:	f00d fbbc 	bl	800ecf0 <xTaskGetTickCount>
 8001578:	6638      	str	r0, [r7, #96]	@ 0x60
	 uint8_t temp_trame[TRAME_SIZE];
		      uint8_t temp5[5];
		      uint8_t data_index = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 8001580:	4b9d      	ldr	r3, [pc, #628]	@ (80017f8 <startTarvosDecode+0x28c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	65fb      	str	r3, [r7, #92]	@ 0x5c



	          while (read_index != write_index) {
 8001586:	e107      	b.n	8001798 <startTarvosDecode+0x22c>
	              // Recherche de l'entête principale
	              if (circular_buffer[read_index] == 0x02 &&
 8001588:	4b9c      	ldr	r3, [pc, #624]	@ (80017fc <startTarvosDecode+0x290>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	4b9b      	ldr	r3, [pc, #620]	@ (8001800 <startTarvosDecode+0x294>)
 8001592:	5c9b      	ldrb	r3, [r3, r2]
 8001594:	2b02      	cmp	r3, #2
 8001596:	f040 80f1 	bne.w	800177c <startTarvosDecode+0x210>
	                  circular_buffer[(read_index + 1) % CIRC_BUF_SIZE] == 0x81)
 800159a:	4b98      	ldr	r3, [pc, #608]	@ (80017fc <startTarvosDecode+0x290>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3301      	adds	r3, #1
 80015a2:	425a      	negs	r2, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	bf58      	it	pl
 80015aa:	4253      	negpl	r3, r2
 80015ac:	4a94      	ldr	r2, [pc, #592]	@ (8001800 <startTarvosDecode+0x294>)
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
	              if (circular_buffer[read_index] == 0x02 &&
 80015b0:	2b81      	cmp	r3, #129	@ 0x81
 80015b2:	f040 80e3 	bne.w	800177c <startTarvosDecode+0x210>
	              {
	                  data_index = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	                  while (data_index < TRAME_SIZE) {
 80015bc:	e07c      	b.n	80016b8 <startTarvosDecode+0x14c>
	                      // Vérifie s’il reste au moins 5 octets
	                      uint16_t available = (write_index >= read_index)
 80015be:	4b91      	ldr	r3, [pc, #580]	@ (8001804 <startTarvosDecode+0x298>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b8d      	ldr	r3, [pc, #564]	@ (80017fc <startTarvosDecode+0x290>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d308      	bcc.n	80015e0 <startTarvosDecode+0x74>
	                          ? (write_index - read_index)
 80015ce:	4b8d      	ldr	r3, [pc, #564]	@ (8001804 <startTarvosDecode+0x298>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	4b89      	ldr	r3, [pc, #548]	@ (80017fc <startTarvosDecode+0x290>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	b29b      	uxth	r3, r3
 80015de:	e00a      	b.n	80015f6 <startTarvosDecode+0x8a>
	                          : (CIRC_BUF_SIZE - read_index + write_index);
 80015e0:	4b88      	ldr	r3, [pc, #544]	@ (8001804 <startTarvosDecode+0x298>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b85      	ldr	r3, [pc, #532]	@ (80017fc <startTarvosDecode+0x290>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 80015f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	                      if (available < 5) {
 80015fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d960      	bls.n	80016c4 <startTarvosDecode+0x158>
	                          break; // attendre plus de données
	                      }

	                      // Copie 5 octets
	                      for (int i = 0; i < 5; i++) {
 8001602:	2300      	movs	r3, #0
 8001604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001606:	e015      	b.n	8001634 <startTarvosDecode+0xc8>
	                          temp5[i] = circular_buffer[(read_index + i) % CIRC_BUF_SIZE];
 8001608:	4b7c      	ldr	r3, [pc, #496]	@ (80017fc <startTarvosDecode+0x290>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001612:	4413      	add	r3, r2
 8001614:	425a      	negs	r2, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	bf58      	it	pl
 800161c:	4253      	negpl	r3, r2
 800161e:	4a78      	ldr	r2, [pc, #480]	@ (8001800 <startTarvosDecode+0x294>)
 8001620:	5cd1      	ldrb	r1, [r2, r3]
 8001622:	f107 0208 	add.w	r2, r7, #8
 8001626:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001628:	4413      	add	r3, r2
 800162a:	460a      	mov	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
	                      for (int i = 0; i < 5; i++) {
 800162e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001630:	3301      	adds	r3, #1
 8001632:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001636:	2b04      	cmp	r3, #4
 8001638:	dde6      	ble.n	8001608 <startTarvosDecode+0x9c>
	                      }

	                      // Confirmation TX ? (trame parasite)
	                      if (temp5[0] == 0x02 && temp5[1] == 0x40 && temp5[2] == 0x01) {
 800163a:	7a3b      	ldrb	r3, [r7, #8]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d112      	bne.n	8001666 <startTarvosDecode+0xfa>
 8001640:	7a7b      	ldrb	r3, [r7, #9]
 8001642:	2b40      	cmp	r3, #64	@ 0x40
 8001644:	d10f      	bne.n	8001666 <startTarvosDecode+0xfa>
 8001646:	7abb      	ldrb	r3, [r7, #10]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d10c      	bne.n	8001666 <startTarvosDecode+0xfa>
	                          // Skip trame de confirmation
	                          read_index = (read_index + 5) % CIRC_BUF_SIZE;
 800164c:	4b6b      	ldr	r3, [pc, #428]	@ (80017fc <startTarvosDecode+0x290>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	3305      	adds	r3, #5
 8001654:	425a      	negs	r2, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	bf58      	it	pl
 800165c:	4253      	negpl	r3, r2
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <startTarvosDecode+0x290>)
 8001662:	801a      	strh	r2, [r3, #0]
	                          continue;
 8001664:	e028      	b.n	80016b8 <startTarvosDecode+0x14c>
	                      }

	                      // Sinon : partie utile, on ajoute à la trame
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 8001666:	2300      	movs	r3, #0
 8001668:	667b      	str	r3, [r7, #100]	@ 0x64
 800166a:	e012      	b.n	8001692 <startTarvosDecode+0x126>
	                          temp_trame[data_index++] = temp5[i];
 800166c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 8001676:	4619      	mov	r1, r3
 8001678:	f107 0208 	add.w	r2, r7, #8
 800167c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800167e:	4413      	add	r3, r2
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 8001686:	443b      	add	r3, r7
 8001688:	f803 2c60 	strb.w	r2, [r3, #-96]
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 800168c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800168e:	3301      	adds	r3, #1
 8001690:	667b      	str	r3, [r7, #100]	@ 0x64
 8001692:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001694:	2b04      	cmp	r3, #4
 8001696:	dc03      	bgt.n	80016a0 <startTarvosDecode+0x134>
 8001698:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800169c:	2b3b      	cmp	r3, #59	@ 0x3b
 800169e:	d9e5      	bls.n	800166c <startTarvosDecode+0x100>
	                      }

	                      read_index = (read_index + 5) % CIRC_BUF_SIZE;
 80016a0:	4b56      	ldr	r3, [pc, #344]	@ (80017fc <startTarvosDecode+0x290>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3305      	adds	r3, #5
 80016a8:	425a      	negs	r2, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	bf58      	it	pl
 80016b0:	4253      	negpl	r3, r2
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b51      	ldr	r3, [pc, #324]	@ (80017fc <startTarvosDecode+0x290>)
 80016b6:	801a      	strh	r2, [r3, #0]
	                  while (data_index < TRAME_SIZE) {
 80016b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80016be:	f67f af7e 	bls.w	80015be <startTarvosDecode+0x52>
 80016c2:	e000      	b.n	80016c6 <startTarvosDecode+0x15a>
	                          break; // attendre plus de données
 80016c4:	bf00      	nop
	                  }

	                  if (data_index == TRAME_SIZE) {
 80016c6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80016ca:	2b3c      	cmp	r3, #60	@ 0x3c
 80016cc:	d163      	bne.n	8001796 <startTarvosDecode+0x22a>

	                	  if (tarvos_checksum(temp_trame, TRAME_SIZE) == temp_trame[TRAME_SIZE - 1]) {
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	213c      	movs	r1, #60	@ 0x3c
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 f983 	bl	80029e0 <tarvos_checksum>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d157      	bne.n	8001796 <startTarvosDecode+0x22a>

	                      memcpy(tarvos_DATA, temp_trame, TRAME_SIZE);
 80016e6:	4b48      	ldr	r3, [pc, #288]	@ (8001808 <startTarvosDecode+0x29c>)
 80016e8:	f107 0410 	add.w	r4, r7, #16
 80016ec:	469c      	mov	ip, r3
 80016ee:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80016f2:	4665      	mov	r5, ip
 80016f4:	4626      	mov	r6, r4
 80016f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016f8:	6028      	str	r0, [r5, #0]
 80016fa:	6069      	str	r1, [r5, #4]
 80016fc:	60aa      	str	r2, [r5, #8]
 80016fe:	60eb      	str	r3, [r5, #12]
 8001700:	3410      	adds	r4, #16
 8001702:	f10c 0c10 	add.w	ip, ip, #16
 8001706:	4574      	cmp	r4, lr
 8001708:	d1f3      	bne.n	80016f2 <startTarvosDecode+0x186>
 800170a:	4665      	mov	r5, ip
 800170c:	4623      	mov	r3, r4
 800170e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001710:	6028      	str	r0, [r5, #0]
 8001712:	6069      	str	r1, [r5, #4]
 8001714:	60aa      	str	r2, [r5, #8]
	                      decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 8001716:	493c      	ldr	r1, [pc, #240]	@ (8001808 <startTarvosDecode+0x29c>)
 8001718:	483c      	ldr	r0, [pc, #240]	@ (800180c <startTarvosDecode+0x2a0>)
 800171a:	f001 f887 	bl	800282c <decode_payload>

	    if ((vraiRSSI >= 0) || (vraiRSSI < -120) || (NVALUE <= 0.0f)) {
 800171e:	4b3c      	ldr	r3, [pc, #240]	@ (8001810 <startTarvosDecode+0x2a4>)
 8001720:	f993 3000 	ldrsb.w	r3, [r3]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da05      	bge.n	8001734 <startTarvosDecode+0x1c8>
 8001728:	4b39      	ldr	r3, [pc, #228]	@ (8001810 <startTarvosDecode+0x2a4>)
 800172a:	f993 3000 	ldrsb.w	r3, [r3]
 800172e:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 8001732:	da03      	bge.n	800173c <startTarvosDecode+0x1d0>
	        distance_RSSI= -1.0f; // Valeur invalide
 8001734:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <startTarvosDecode+0x2a8>)
 8001736:	4a38      	ldr	r2, [pc, #224]	@ (8001818 <startTarvosDecode+0x2ac>)
 8001738:	601a      	str	r2, [r3, #0]
	                  if (data_index == TRAME_SIZE) {
 800173a:	e02c      	b.n	8001796 <startTarvosDecode+0x22a>
	    }
	    else{
	    	float exponent= 0.0f;
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    exponent = ((float)RSSI0 - (float)vraiRSSI) / (10.0f * NVALUE);
 8001742:	4b33      	ldr	r3, [pc, #204]	@ (8001810 <startTarvosDecode+0x2a4>)
 8001744:	f993 3000 	ldrsb.w	r3, [r3]
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001750:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800181c <startTarvosDecode+0x2b0>
 8001754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001758:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800175c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001760:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		    distance_RSSI= powf(10.0f, exponent);
 8001764:	edd7 0a13 	vldr	s1, [r7, #76]	@ 0x4c
 8001768:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800176c:	f00f f936 	bl	80109dc <powf>
 8001770:	eef0 7a40 	vmov.f32	s15, s0
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <startTarvosDecode+0x2a8>)
 8001776:	edc3 7a00 	vstr	s15, [r3]
	                  if (data_index == TRAME_SIZE) {
 800177a:	e00c      	b.n	8001796 <startTarvosDecode+0x22a>
	                	  }

	                  }
	              } else {
	                  // Entête invalide : skip 1 octet
	                  read_index = (read_index + 1) % CIRC_BUF_SIZE;
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <startTarvosDecode+0x290>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	3301      	adds	r3, #1
 8001784:	425a      	negs	r2, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	bf58      	it	pl
 800178c:	4253      	negpl	r3, r2
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <startTarvosDecode+0x290>)
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	e000      	b.n	8001798 <startTarvosDecode+0x22c>
	                  if (data_index == TRAME_SIZE) {
 8001796:	bf00      	nop
	          while (read_index != write_index) {
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <startTarvosDecode+0x290>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <startTarvosDecode+0x298>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f47f aeef 	bne.w	8001588 <startTarvosDecode+0x1c>
	          }




		if(flag_fin==1){
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <startTarvosDecode+0x2b4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d102      	bne.n	80017b8 <startTarvosDecode+0x24c>

			osThreadSuspend(NULL);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f00c f8b7 	bl	800d926 <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <startTarvosDecode+0x28c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	65bb      	str	r3, [r7, #88]	@ 0x58
		  uint32_t cycles= end1-start1;
 80017be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	657b      	str	r3, [r7, #84]	@ 0x54

		  timedecode=(float) cycles/(SystemCoreClock/1000000.0f);
 80017c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <startTarvosDecode+0x2b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017dc:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8001828 <startTarvosDecode+0x2bc>
 80017e0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80017e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e8:	4b10      	ldr	r3, [pc, #64]	@ (800182c <startTarvosDecode+0x2c0>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]

vTaskDelay(pdMS_TO_TICKS(50));
 80017ee:	2032      	movs	r0, #50	@ 0x32
 80017f0:	f00d f8b6 	bl	800e960 <vTaskDelay>
  {
 80017f4:	e6c4      	b.n	8001580 <startTarvosDecode+0x14>
 80017f6:	bf00      	nop
 80017f8:	e0001000 	.word	0xe0001000
 80017fc:	20000f0e 	.word	0x20000f0e
 8001800:	20000e0c 	.word	0x20000e0c
 8001804:	20000f0c 	.word	0x20000f0c
 8001808:	20000234 	.word	0x20000234
 800180c:	200008f0 	.word	0x200008f0
 8001810:	2000016c 	.word	0x2000016c
 8001814:	20000170 	.word	0x20000170
 8001818:	bf800000 	.word	0xbf800000
 800181c:	c2600000 	.word	0xc2600000
 8001820:	20000ab4 	.word	0x20000ab4
 8001824:	20000008 	.word	0x20000008
 8001828:	49742400 	.word	0x49742400
 800182c:	2000017c 	.word	0x2000017c

08001830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001836:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <MX_DMA_Init+0x80>)
 8001838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183a:	4a1d      	ldr	r2, [pc, #116]	@ (80018b0 <MX_DMA_Init+0x80>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6493      	str	r3, [r2, #72]	@ 0x48
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <MX_DMA_Init+0x80>)
 8001844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <MX_DMA_Init+0x80>)
 8001850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001852:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <MX_DMA_Init+0x80>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6493      	str	r3, [r2, #72]	@ 0x48
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <MX_DMA_Init+0x80>)
 800185c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	200b      	movs	r0, #11
 800186c:	f003 fa8a 	bl	8004d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001870:	200b      	movs	r0, #11
 8001872:	f003 faa1 	bl	8004db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2105      	movs	r1, #5
 800187a:	200c      	movs	r0, #12
 800187c:	f003 fa82 	bl	8004d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001880:	200c      	movs	r0, #12
 8001882:	f003 fa99 	bl	8004db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	200d      	movs	r0, #13
 800188c:	f003 fa7a 	bl	8004d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001890:	200d      	movs	r0, #13
 8001892:	f003 fa91 	bl	8004db8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2105      	movs	r1, #5
 800189a:	200e      	movs	r0, #14
 800189c:	f003 fa72 	bl	8004d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018a0:	200e      	movs	r0, #14
 80018a2:	f003 fa89 	bl	8004db8 <HAL_NVIC_EnableIRQ>

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ca:	4b49      	ldr	r3, [pc, #292]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	4a48      	ldr	r2, [pc, #288]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 80018d0:	f043 0320 	orr.w	r3, r3, #32
 80018d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d6:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b43      	ldr	r3, [pc, #268]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	4a42      	ldr	r2, [pc, #264]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ee:	4b40      	ldr	r3, [pc, #256]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	4a3c      	ldr	r2, [pc, #240]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001906:	4b3a      	ldr	r3, [pc, #232]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	4b37      	ldr	r3, [pc, #220]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	4a36      	ldr	r2, [pc, #216]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191e:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <MX_GPIO_Init+0x13c>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2110      	movs	r1, #16
 800192e:	4831      	ldr	r0, [pc, #196]	@ (80019f4 <MX_GPIO_Init+0x140>)
 8001930:	f003 ff10 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800193a:	482f      	ldr	r0, [pc, #188]	@ (80019f8 <MX_GPIO_Init+0x144>)
 800193c:	f003 ff0a 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001940:	2310      	movs	r3, #16
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001944:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001958:	f003 fd7a 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800195c:	2310      	movs	r3, #16
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4820      	ldr	r0, [pc, #128]	@ (80019f4 <MX_GPIO_Init+0x140>)
 8001974:	f003 fd6c 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001978:	2302      	movs	r3, #2
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800197c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	481a      	ldr	r0, [pc, #104]	@ (80019f8 <MX_GPIO_Init+0x144>)
 800198e:	f003 fd5f 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001992:	2304      	movs	r3, #4
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4814      	ldr	r0, [pc, #80]	@ (80019f8 <MX_GPIO_Init+0x144>)
 80019a6:	f003 fd53 	bl	8005450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 80019aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <MX_GPIO_Init+0x144>)
 80019c4:	f003 fd44 	bl	8005450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2105      	movs	r1, #5
 80019cc:	2007      	movs	r0, #7
 80019ce:	f003 f9d9 	bl	8004d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019d2:	2007      	movs	r0, #7
 80019d4:	f003 f9f0 	bl	8004db8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2105      	movs	r1, #5
 80019dc:	200a      	movs	r0, #10
 80019de:	f003 f9d1 	bl	8004d84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019e2:	200a      	movs	r0, #10
 80019e4:	f003 f9e8 	bl	8004db8 <HAL_NVIC_EnableIRQ>

}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	@ 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48000800 	.word	0x48000800
 80019f8:	48000400 	.word	0x48000400

080019fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a02:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <MX_I2C1_Init+0x78>)
 8001a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a08:	4a1b      	ldr	r2, [pc, #108]	@ (8001a78 <MX_I2C1_Init+0x7c>)
 8001a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a18:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a36:	480e      	ldr	r0, [pc, #56]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a38:	f003 fec7 	bl	80057ca <HAL_I2C_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a42:	f000 fb31 	bl	80020a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a46:	2100      	movs	r1, #0
 8001a48:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a4a:	f004 fa8b 	bl	8005f64 <HAL_I2CEx_ConfigAnalogFilter>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a54:	f000 fb28 	bl	80020a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <MX_I2C1_Init+0x74>)
 8001a5c:	f004 facd 	bl	8005ffa <HAL_I2CEx_ConfigDigitalFilter>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a66:	f000 fb1f 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200001e0 	.word	0x200001e0
 8001a74:	40005400 	.word	0x40005400
 8001a78:	40b285c2 	.word	0x40b285c2

08001a7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b09c      	sub	sp, #112	@ 0x70
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	2244      	movs	r2, #68	@ 0x44
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00e fac1 	bl	8010024 <memset>
  if(i2cHandle->Instance==I2C1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8001b60 <HAL_I2C_MspInit+0xe4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d154      	bne.n	8001b56 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001aac:	2340      	movs	r3, #64	@ 0x40
 8001aae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f005 f8fb 	bl	8006cb4 <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ac4:	f000 faf0 	bl	80020a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <HAL_I2C_MspInit+0xe8>)
 8001aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001acc:	4a25      	ldr	r2, [pc, #148]	@ (8001b64 <HAL_I2C_MspInit+0xe8>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_I2C_MspInit+0xe8>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae0:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_I2C_MspInit+0xe8>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b64 <HAL_I2C_MspInit+0xe8>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <HAL_I2C_MspInit+0xe8>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001af8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afe:	2312      	movs	r3, #18
 8001b00:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b12:	4619      	mov	r1, r3
 8001b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b18:	f003 fc9a 	bl	8005450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b22:	2312      	movs	r3, #18
 8001b24:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b36:	4619      	mov	r1, r3
 8001b38:	480b      	ldr	r0, [pc, #44]	@ (8001b68 <HAL_I2C_MspInit+0xec>)
 8001b3a:	f003 fc89 	bl	8005450 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_I2C_MspInit+0xe8>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	4a08      	ldr	r2, [pc, #32]	@ (8001b64 <HAL_I2C_MspInit+0xe8>)
 8001b44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_I2C_MspInit+0xe8>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b56:	bf00      	nop
 8001b58:	3770      	adds	r7, #112	@ 0x70
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40005400 	.word	0x40005400
 8001b64:	40021000 	.word	0x40021000
 8001b68:	48000400 	.word	0x48000400

08001b6c <lcd_send_data>:

char str[40];

extern I2C_HandleTypeDef hi2c1;

void lcd_send_data( char data){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u=(data&0xf0);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f023 030f 	bic.w	r3, r3, #15
 8001b7c:	73fb      	strb	r3, [r7, #15]
	data_l=((data<<4)&0xf0);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	73bb      	strb	r3, [r7, #14]
	data_t[0]=data_u|0x0D;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	f043 030d 	orr.w	r3, r3, #13
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	723b      	strb	r3, [r7, #8]
	data_t[1]=data_u|0x09;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	f043 0309 	orr.w	r3, r3, #9
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	727b      	strb	r3, [r7, #9]
	data_t[2]=data_l|0x0D;
 8001b98:	7bbb      	ldrb	r3, [r7, #14]
 8001b9a:	f043 030d 	orr.w	r3, r3, #13
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	72bb      	strb	r3, [r7, #10]
	data_t[3]=data_l|0x09;
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	f043 0309 	orr.w	r3, r3, #9
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t,4, 100);
 8001bac:	f107 0208 	add.w	r2, r7, #8
 8001bb0:	2364      	movs	r3, #100	@ 0x64
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	214e      	movs	r1, #78	@ 0x4e
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <lcd_send_data+0x5c>)
 8001bba:	f003 fea1 	bl	8005900 <HAL_I2C_Master_Transmit>





}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200001e0 	.word	0x200001e0

08001bcc <lcd_send_cmd>:


void lcd_send_cmd( char data){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u=(data&0xf0);
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f023 030f 	bic.w	r3, r3, #15
 8001bdc:	73fb      	strb	r3, [r7, #15]
	data_l=((data<<4)&0xf0);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	73bb      	strb	r3, [r7, #14]
	data_t[0]=data_u|0x0C;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	f043 030c 	orr.w	r3, r3, #12
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	723b      	strb	r3, [r7, #8]
	data_t[1]=data_u|0x08;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	727b      	strb	r3, [r7, #9]
	data_t[2]=data_l|0x0C;
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	f043 030c 	orr.w	r3, r3, #12
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	72bb      	strb	r3, [r7, #10]
	data_t[3]=data_l|0x08;
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t,4, 100);
 8001c0c:	f107 0208 	add.w	r2, r7, #8
 8001c10:	2364      	movs	r3, #100	@ 0x64
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2304      	movs	r3, #4
 8001c16:	214e      	movs	r1, #78	@ 0x4e
 8001c18:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <lcd_send_cmd+0x5c>)
 8001c1a:	f003 fe71 	bl	8005900 <HAL_I2C_Master_Transmit>





}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200001e0 	.word	0x200001e0

08001c2c <lcd_clear>:


void lcd_clear(void){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

	lcd_send_cmd(0x01);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff ffcb 	bl	8001bcc <lcd_send_cmd>
	osDelay(2);
 8001c36:	2002      	movs	r0, #2
 8001c38:	f00b fd1b 	bl	800d672 <osDelay>

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <lcd_send_string>:
	lcd_send_cmd(0x0C);


}

void lcd_send_string (char *str){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]


	while (*str)lcd_send_data(*str++);
 8001c48:	e006      	b.n	8001c58 <lcd_send_string+0x18>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff8a 	bl	8001b6c <lcd_send_data>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f4      	bne.n	8001c4a <lcd_send_string+0xa>
	osDelay(2);
 8001c60:	2002      	movs	r0, #2
 8001c62:	f00b fd06 	bl	800d672 <osDelay>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <setCursor>:

void setCursor(int row, int col){
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]


	switch(row){
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <setCursor+0x18>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d005      	beq.n	8001c90 <setCursor+0x22>
		break;
	case 1:
		col|=0xC0;
		break;
	default:
		return;
 8001c84:	e00e      	b.n	8001ca4 <setCursor+0x36>
		col|=0x80;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8c:	603b      	str	r3, [r7, #0]
		break;
 8001c8e:	e004      	b.n	8001c9a <setCursor+0x2c>
		col|=0xC0;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c96:	603b      	str	r3, [r7, #0]
		break;
 8001c98:	bf00      	nop

	}
	lcd_send_cmd(col);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff94 	bl	8001bcc <lcd_send_cmd>

}
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8001cb2:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <LED_Init+0x3c>)
 8001cb4:	f005 fb5a 	bl	800736c <HAL_TIM_PWM_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	80fb      	strh	r3, [r7, #6]
 8001cc0:	e006      	b.n	8001cd0 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <LED_Init+0x40>)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	80fb      	strh	r3, [r7, #6]
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001cd6:	d9f4      	bls.n	8001cc2 <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <LED_Init+0x44>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8001cde:	797b      	ldrb	r3, [r7, #5]




}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000c48 	.word	0x20000c48
 8001cec:	2000096c 	.word	0x2000096c
 8001cf0:	20000aa5 	.word	0x20000aa5

08001cf4 <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b08b      	sub	sp, #44	@ 0x2c
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	71fb      	strb	r3, [r7, #7]
 8001d06:	4603      	mov	r3, r0
 8001d08:	71bb      	strb	r3, [r7, #6]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	717b      	strb	r3, [r7, #5]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8001d16:	79bb      	ldrb	r3, [r7, #6]
 8001d18:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8001d1e:	797b      	ldrb	r3, [r7, #5]
 8001d20:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8001d22:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001d26:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8001d28:	793b      	ldrb	r3, [r7, #4]
 8001d2a:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8001d2c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001d30:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	e007      	b.n	8001d48 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8001d38:	4a35      	ldr	r2, [pc, #212]	@ (8001e10 <LED_Setcolour+0x11c>)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	3301      	adds	r3, #1
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001d4e:	ddf3      	ble.n	8001d38 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8001d50:	2300      	movs	r3, #0
 8001d52:	77fb      	strb	r3, [r7, #31]
 8001d54:	e032      	b.n	8001dbc <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8001d56:	2300      	movs	r3, #0
 8001d58:	77bb      	strb	r3, [r7, #30]
 8001d5a:	e029      	b.n	8001db0 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	e020      	b.n	8001da4 <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8001d62:	7ffa      	ldrb	r2, [r7, #31]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	441a      	add	r2, r3
 8001d6a:	7fbb      	ldrb	r3, [r7, #30]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3328      	adds	r3, #40	@ 0x28
 8001d70:	443b      	add	r3, r7
 8001d72:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001d76:	461a      	mov	r2, r3
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa42 f303 	asr.w	r3, r2, r3
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8001d86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d88:	4a21      	ldr	r2, [pc, #132]	@ (8001e10 <LED_Setcolour+0x11c>)
 8001d8a:	2199      	movs	r1, #153	@ 0x99
 8001d8c:	54d1      	strb	r1, [r2, r3]
 8001d8e:	e003      	b.n	8001d98 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8001d90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d92:	4a1f      	ldr	r2, [pc, #124]	@ (8001e10 <LED_Setcolour+0x11c>)
 8001d94:	2133      	movs	r1, #51	@ 0x33
 8001d96:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8001d98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	dddb      	ble.n	8001d62 <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 8001daa:	7fbb      	ldrb	r3, [r7, #30]
 8001dac:	3301      	adds	r3, #1
 8001dae:	77bb      	strb	r3, [r7, #30]
 8001db0:	7fbb      	ldrb	r3, [r7, #30]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d9d2      	bls.n	8001d5c <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
 8001db8:	3301      	adds	r3, #1
 8001dba:	77fb      	strb	r3, [r7, #31]
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d9c9      	bls.n	8001d56 <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e009      	b.n	8001ddc <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8001dc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001dca:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <LED_Setcolour+0x11c>)
 8001dcc:	2100      	movs	r1, #0
 8001dce:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8001dd0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001de2:	dbf1      	blt.n	8001dc8 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e009      	b.n	8001dfe <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8001dea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001dec:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <LED_Setcolour+0x11c>)
 8001dee:	2100      	movs	r1, #0
 8001df0:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8001df2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001df4:	3301      	adds	r3, #1
 8001df6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	ddf2      	ble.n	8001dea <LED_Setcolour+0xf6>
		}

	LED_Update();
 8001e04:	f000 f806 	bl	8001e14 <LED_Update>

}
 8001e08:	bf00      	nop
 8001e0a:	372c      	adds	r7, #44	@ 0x2c
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd90      	pop	{r4, r7, pc}
 8001e10:	2000096c 	.word	0x2000096c

08001e14 <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8001e1a:	f240 1339 	movw	r3, #313	@ 0x139
 8001e1e:	4a09      	ldr	r2, [pc, #36]	@ (8001e44 <LED_Update+0x30>)
 8001e20:	2104      	movs	r1, #4
 8001e22:	4809      	ldr	r0, [pc, #36]	@ (8001e48 <LED_Update+0x34>)
 8001e24:	f005 fb04 	bl	8007430 <HAL_TIM_PWM_Start_DMA>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]

	if(halStatus==HAL_OK){
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <LED_Update+0x24>
		DMA_COMPLETE_FLAG=0;
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <LED_Update+0x38>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
	}


	return halStatus;
 8001e38:	79fb      	ldrb	r3, [r7, #7]

}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000096c 	.word	0x2000096c
 8001e48:	20000c48 	.word	0x20000c48
 8001e4c:	20000aa5 	.word	0x20000aa5

08001e50 <LED_Callback>:



void LED_Callback(){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8001e54:	2104      	movs	r1, #4
 8001e56:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <LED_Callback+0x18>)
 8001e58:	f005 fd02 	bl	8007860 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <LED_Callback+0x1c>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]


}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000c48 	.word	0x20000c48
 8001e6c:	20000aa5 	.word	0x20000aa5

08001e70 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8001e78:	f7ff ffea 	bl	8001e50 <LED_Callback>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8a:	f001 f9b4 	bl	80031f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e8e:	f000 f8af 	bl	8001ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e92:	f7ff fd0f 	bl	80018b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e96:	f7ff fccb 	bl	8001830 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e9a:	f7fe ffc5 	bl	8000e28 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e9e:	f7ff fdad 	bl	80019fc <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001ea2:	f000 ffd9 	bl	8002e58 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8001ea6:	f000 fe33 	bl	8002b10 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001eaa:	f000 fdbb 	bl	8002a24 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001eae:	f000 f97d 	bl	80021ac <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8001eb2:	f008 fd01 	bl	800a8b8 <MX_FATFS_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <main+0x3c>
    Error_Handler();
 8001ebc:	f000 f8f4 	bl	80020a8 <Error_Handler>
  }
  MX_TIM4_Init();
 8001ec0:	f000 fe9e 	bl	8002c00 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eca:	483b      	ldr	r0, [pc, #236]	@ (8001fb8 <main+0x134>)
 8001ecc:	f003 fc42 	bl	8005754 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ed6:	4838      	ldr	r0, [pc, #224]	@ (8001fb8 <main+0x134>)
 8001ed8:	f003 fc3c 	bl	8005754 <HAL_GPIO_WritePin>




  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8001edc:	2203      	movs	r2, #3
 8001ede:	4937      	ldr	r1, [pc, #220]	@ (8001fbc <main+0x138>)
 8001ee0:	4837      	ldr	r0, [pc, #220]	@ (8001fc0 <main+0x13c>)
 8001ee2:	f001 fda5 	bl	8003a30 <HAL_ADC_Start_DMA>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <main+0x6e>
 	 pbmseeker=1;
 8001eec:	4b35      	ldr	r3, [pc, #212]	@ (8001fc4 <main+0x140>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
   }



  if(  LED_Init()!=HAL_OK){
 8001ef2:	f7ff fedb 	bl	8001cac <LED_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <main+0x7e>
 	 pbmseeker=1;
 8001efc:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <main+0x140>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]


   }

  if( INIT_PERM_TARVOS(SAT_ADDR, GROUND_ADDR)!=HAL_OK){
 8001f02:	2101      	movs	r1, #1
 8001f04:	2010      	movs	r0, #16
 8001f06:	f000 fb77 	bl	80025f8 <INIT_PERM_TARVOS>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <main+0x92>
 	 pbmseeker=1;
 8001f10:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc4 <main+0x140>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]


   }


  HAL_Delay(100);
 8001f16:	2064      	movs	r0, #100	@ 0x64
 8001f18:	f001 f9a4 	bl	8003264 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8001f1c:	482a      	ldr	r0, [pc, #168]	@ (8001fc8 <main+0x144>)
 8001f1e:	f007 f83f 	bl	8008fa0 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, dma_rx_buffer, DMA_CHUNK_SIZE)!=HAL_OK){
 8001f22:	2280      	movs	r2, #128	@ 0x80
 8001f24:	4929      	ldr	r1, [pc, #164]	@ (8001fcc <main+0x148>)
 8001f26:	4828      	ldr	r0, [pc, #160]	@ (8001fc8 <main+0x144>)
 8001f28:	f006 ffee 	bl	8008f08 <HAL_UART_Receive_DMA>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <main+0xb4>
 	pbmseeker=1;
 8001f32:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <main+0x140>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 8001f38:	4825      	ldr	r0, [pc, #148]	@ (8001fd0 <main+0x14c>)
 8001f3a:	f005 f9ad 	bl	8007298 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 8001f3e:	200a      	movs	r0, #10
 8001f40:	f001 f990 	bl	8003264 <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 8001f44:	2201      	movs	r2, #1
 8001f46:	4923      	ldr	r1, [pc, #140]	@ (8001fd4 <main+0x150>)
 8001f48:	4823      	ldr	r0, [pc, #140]	@ (8001fd8 <main+0x154>)
 8001f4a:	f00a fab3 	bl	800c4b4 <f_mount>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <main+0x158>)
 8001f54:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 8001f56:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <main+0x158>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d125      	bne.n	8001faa <main+0x126>
  			  fres = f_mkdir("DEMO");
 8001f5e:	4820      	ldr	r0, [pc, #128]	@ (8001fe0 <main+0x15c>)
 8001f60:	f00b f97c 	bl	800d25c <f_mkdir>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <main+0x158>)
 8001f6a:	701a      	strb	r2, [r3, #0]
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 8001f6c:	2212      	movs	r2, #18
 8001f6e:	491d      	ldr	r1, [pc, #116]	@ (8001fe4 <main+0x160>)
 8001f70:	481d      	ldr	r0, [pc, #116]	@ (8001fe8 <main+0x164>)
 8001f72:	f00a fb03 	bl	800c57c <f_open>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <main+0x158>)
 8001f7c:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <main+0x158>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <main+0x11c>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	220b      	movs	r2, #11
 8001f8a:	4918      	ldr	r1, [pc, #96]	@ (8001fec <main+0x168>)
 8001f8c:	4816      	ldr	r0, [pc, #88]	@ (8001fe8 <main+0x164>)
 8001f8e:	f00a fcb6 	bl	800c8fe <f_write>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <main+0x158>)
 8001f98:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 8001f9a:	4813      	ldr	r0, [pc, #76]	@ (8001fe8 <main+0x164>)
 8001f9c:	f00a fedc 	bl	800cd58 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	490c      	ldr	r1, [pc, #48]	@ (8001fd4 <main+0x150>)
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f00a fa85 	bl	800c4b4 <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001faa:	f7ff f923 	bl	80011f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001fae:	f00b fb32 	bl	800d616 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fb2:	bf00      	nop
 8001fb4:	e7fd      	b.n	8001fb2 <main+0x12e>
 8001fb6:	bf00      	nop
 8001fb8:	48000400 	.word	0x48000400
 8001fbc:	200008dc 	.word	0x200008dc
 8001fc0:	2000009c 	.word	0x2000009c
 8001fc4:	20000ab8 	.word	0x20000ab8
 8001fc8:	20000f10 	.word	0x20000f10
 8001fcc:	20000d8c 	.word	0x20000d8c
 8001fd0:	20000ce0 	.word	0x20000ce0
 8001fd4:	08011210 	.word	0x08011210
 8001fd8:	20000474 	.word	0x20000474
 8001fdc:	200006a8 	.word	0x200006a8
 8001fe0:	08011214 	.word	0x08011214
 8001fe4:	0801121c 	.word	0x0801121c
 8001fe8:	200006ac 	.word	0x200006ac
 8001fec:	0801122c 	.word	0x0801122c

08001ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b094      	sub	sp, #80	@ 0x50
 8001ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff6:	f107 0318 	add.w	r3, r7, #24
 8001ffa:	2238      	movs	r2, #56	@ 0x38
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f00e f810 	bl	8010024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002012:	2000      	movs	r0, #0
 8002014:	f004 f83e 	bl	8006094 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002018:	2301      	movs	r3, #1
 800201a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800201c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002020:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002022:	2302      	movs	r3, #2
 8002024:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002026:	2303      	movs	r3, #3
 8002028:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800202a:	2304      	movs	r3, #4
 800202c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800202e:	2355      	movs	r3, #85	@ 0x55
 8002030:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002032:	2302      	movs	r3, #2
 8002034:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002036:	2302      	movs	r3, #2
 8002038:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800203a:	2302      	movs	r3, #2
 800203c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203e:	f107 0318 	add.w	r3, r7, #24
 8002042:	4618      	mov	r0, r3
 8002044:	f004 f8da 	bl	80061fc <HAL_RCC_OscConfig>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800204e:	f000 f82b 	bl	80020a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002052:	230f      	movs	r3, #15
 8002054:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002056:	2303      	movs	r3, #3
 8002058:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2104      	movs	r1, #4
 800206a:	4618      	mov	r0, r3
 800206c:	f004 fbd8 	bl	8006820 <HAL_RCC_ClockConfig>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002076:	f000 f817 	bl	80020a8 <Error_Handler>
  }
}
 800207a:	bf00      	nop
 800207c:	3750      	adds	r7, #80	@ 0x50
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002096:	f001 f8c7 	bl	8003228 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40012c00 	.word	0x40012c00

080020a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ac:	b672      	cpsid	i
}
 80020ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <Error_Handler+0x8>

080020b4 <store_in_sd>:
extern DWORD free_sectors;	  // Free Sectors
extern DWORD total_sectors;



FRESULT store_in_sd(FRESULT fres){
 80020b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020b8:	b08f      	sub	sp, #60	@ 0x3c
 80020ba:	af0a      	add	r7, sp, #40	@ 0x28
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]

	uint16_t sizeligne=0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	81fb      	strh	r3, [r7, #14]

	sizeligne=snprintf((char *)sdcardbuffer,256,"%0.1f,%0.1f,%d,%0.2f,%lu\n\r",temp,vbat,vraiRSSI,distance_RSSI,timeindex);
 80020c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002180 <store_in_sd+0xcc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa5d 	bl	8000588 <__aeabi_f2d>
 80020ce:	4604      	mov	r4, r0
 80020d0:	460d      	mov	r5, r1
 80020d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002184 <store_in_sd+0xd0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa56 	bl	8000588 <__aeabi_f2d>
 80020dc:	4680      	mov	r8, r0
 80020de:	4689      	mov	r9, r1
 80020e0:	4b29      	ldr	r3, [pc, #164]	@ (8002188 <store_in_sd+0xd4>)
 80020e2:	f993 3000 	ldrsb.w	r3, [r3]
 80020e6:	461e      	mov	r6, r3
 80020e8:	4b28      	ldr	r3, [pc, #160]	@ (800218c <store_in_sd+0xd8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa4b 	bl	8000588 <__aeabi_f2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4926      	ldr	r1, [pc, #152]	@ (8002190 <store_in_sd+0xdc>)
 80020f8:	6809      	ldr	r1, [r1, #0]
 80020fa:	9108      	str	r1, [sp, #32]
 80020fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002100:	9604      	str	r6, [sp, #16]
 8002102:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002106:	e9cd 4500 	strd	r4, r5, [sp]
 800210a:	4a22      	ldr	r2, [pc, #136]	@ (8002194 <store_in_sd+0xe0>)
 800210c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002110:	4821      	ldr	r0, [pc, #132]	@ (8002198 <store_in_sd+0xe4>)
 8002112:	f00d ff51 	bl	800ffb8 <sniprintf>
 8002116:	4603      	mov	r3, r0
 8002118:	81fb      	strh	r3, [r7, #14]




			  if (fres == FR_OK) {
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d129      	bne.n	8002174 <store_in_sd+0xc0>
				  if(flag_drop==0){
 8002120:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <store_in_sd+0xe8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <store_in_sd+0x84>
			  fres = f_open(&fil, (uint8_t *) "SAT_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
 8002128:	2212      	movs	r2, #18
 800212a:	491d      	ldr	r1, [pc, #116]	@ (80021a0 <store_in_sd+0xec>)
 800212c:	481d      	ldr	r0, [pc, #116]	@ (80021a4 <store_in_sd+0xf0>)
 800212e:	f00a fa25 	bl	800c57c <f_open>
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	e006      	b.n	8002146 <store_in_sd+0x92>

				  }
				  else{
					  fres = f_open(&fil, (uint8_t *) "SAT_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
 8002138:	2212      	movs	r2, #18
 800213a:	491b      	ldr	r1, [pc, #108]	@ (80021a8 <store_in_sd+0xf4>)
 800213c:	4819      	ldr	r0, [pc, #100]	@ (80021a4 <store_in_sd+0xf0>)
 800213e:	f00a fa1d 	bl	800c57c <f_open>
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]

				  }
				  if (fres == FR_OK) {
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d113      	bne.n	8002174 <store_in_sd+0xc0>
					  fres=f_lseek(&fil, f_size(&fil));
 800214c:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <store_in_sd+0xf0>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4619      	mov	r1, r3
 8002152:	4814      	ldr	r0, [pc, #80]	@ (80021a4 <store_in_sd+0xf0>)
 8002154:	f00a fe2f 	bl	800cdb6 <f_lseek>
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
					  UINT bytesWrote;
					  fres = f_write(&fil,(char*)sdcardbuffer, sizeligne, &bytesWrote);
 800215c:	89fa      	ldrh	r2, [r7, #14]
 800215e:	f107 0308 	add.w	r3, r7, #8
 8002162:	490d      	ldr	r1, [pc, #52]	@ (8002198 <store_in_sd+0xe4>)
 8002164:	480f      	ldr	r0, [pc, #60]	@ (80021a4 <store_in_sd+0xf0>)
 8002166:	f00a fbca 	bl	800c8fe <f_write>
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
					  f_close(&fil);
 800216e:	480d      	ldr	r0, [pc, #52]	@ (80021a4 <store_in_sd+0xf0>)
 8002170:	f00a fdf2 	bl	800cd58 <f_close>
				  }

			  }


	return fres;
 8002174:	79fb      	ldrb	r3, [r7, #7]

}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002180:	200008e4 	.word	0x200008e4
 8002184:	200008ec 	.word	0x200008ec
 8002188:	2000016c 	.word	0x2000016c
 800218c:	20000170 	.word	0x20000170
 8002190:	20000abc 	.word	0x20000abc
 8002194:	08011238 	.word	0x08011238
 8002198:	20000274 	.word	0x20000274
 800219c:	20000aa8 	.word	0x20000aa8
 80021a0:	08011254 	.word	0x08011254
 80021a4:	200006ac 	.word	0x200006ac
 80021a8:	08011260 	.word	0x08011260

080021ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002224 <MX_SPI1_Init+0x78>)
 80021b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80021ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021cc:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021e2:	2220      	movs	r2, #32
 80021e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021f8:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <MX_SPI1_Init+0x74>)
 80021fa:	2207      	movs	r2, #7
 80021fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <MX_SPI1_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <MX_SPI1_Init+0x74>)
 8002206:	2208      	movs	r2, #8
 8002208:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	@ (8002220 <MX_SPI1_Init+0x74>)
 800220c:	f004 ff42 	bl	8007094 <HAL_SPI_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002216:	f7ff ff47 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000ac0 	.word	0x20000ac0
 8002224:	40013000 	.word	0x40013000

08002228 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a17      	ldr	r2, [pc, #92]	@ (80022a4 <HAL_SPI_MspInit+0x7c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d128      	bne.n	800229c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800224a:	4b17      	ldr	r3, [pc, #92]	@ (80022a8 <HAL_SPI_MspInit+0x80>)
 800224c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800224e:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <HAL_SPI_MspInit+0x80>)
 8002250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002254:	6613      	str	r3, [r2, #96]	@ 0x60
 8002256:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <HAL_SPI_MspInit+0x80>)
 8002258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_SPI_MspInit+0x80>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_SPI_MspInit+0x80>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_SPI_MspInit+0x80>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800227a:	23e0      	movs	r3, #224	@ 0xe0
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800228a:	2305      	movs	r3, #5
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002298:	f003 f8da 	bl	8005450 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800229c:	bf00      	nop
 800229e:	3728      	adds	r7, #40	@ 0x28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40013000 	.word	0x40013000
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_MspInit+0x50>)
 80022b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b6:	4a11      	ldr	r2, [pc, #68]	@ (80022fc <HAL_MspInit+0x50>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <HAL_MspInit+0x50>)
 80022c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <HAL_MspInit+0x50>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	4a0b      	ldr	r2, [pc, #44]	@ (80022fc <HAL_MspInit+0x50>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <HAL_MspInit+0x50>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	210f      	movs	r1, #15
 80022e6:	f06f 0001 	mvn.w	r0, #1
 80022ea:	f002 fd4b 	bl	8004d84 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022ee:	f003 ff75 	bl	80061dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	@ 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002310:	4b2c      	ldr	r3, [pc, #176]	@ (80023c4 <HAL_InitTick+0xc4>)
 8002312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002314:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <HAL_InitTick+0xc4>)
 8002316:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800231a:	6613      	str	r3, [r2, #96]	@ 0x60
 800231c:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_InitTick+0xc4>)
 800231e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002328:	f107 020c 	add.w	r2, r7, #12
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f004 fc48 	bl	8006bc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002338:	f004 fc30 	bl	8006b9c <HAL_RCC_GetPCLK2Freq>
 800233c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002340:	4a21      	ldr	r2, [pc, #132]	@ (80023c8 <HAL_InitTick+0xc8>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0c9b      	lsrs	r3, r3, #18
 8002348:	3b01      	subs	r3, #1
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <HAL_InitTick+0xcc>)
 800234e:	4a20      	ldr	r2, [pc, #128]	@ (80023d0 <HAL_InitTick+0xd0>)
 8002350:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002352:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <HAL_InitTick+0xcc>)
 8002354:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002358:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800235a:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <HAL_InitTick+0xcc>)
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002360:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_InitTick+0xcc>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002366:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_InitTick+0xcc>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800236c:	4817      	ldr	r0, [pc, #92]	@ (80023cc <HAL_InitTick+0xcc>)
 800236e:	f004 ff3c 	bl	80071ea <HAL_TIM_Base_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002378:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800237c:	2b00      	cmp	r3, #0
 800237e:	d11b      	bne.n	80023b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002380:	4812      	ldr	r0, [pc, #72]	@ (80023cc <HAL_InitTick+0xcc>)
 8002382:	f004 ff89 	bl	8007298 <HAL_TIM_Base_Start_IT>
 8002386:	4603      	mov	r3, r0
 8002388:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800238c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002390:	2b00      	cmp	r3, #0
 8002392:	d111      	bne.n	80023b8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002394:	2019      	movs	r0, #25
 8002396:	f002 fd0f 	bl	8004db8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b0f      	cmp	r3, #15
 800239e:	d808      	bhi.n	80023b2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80023a0:	2200      	movs	r2, #0
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	2019      	movs	r0, #25
 80023a6:	f002 fced 	bl	8004d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023aa:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <HAL_InitTick+0xd4>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e002      	b.n	80023b8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80023b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3730      	adds	r7, #48	@ 0x30
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	431bde83 	.word	0x431bde83
 80023cc:	20000b24 	.word	0x20000b24
 80023d0:	40012c00 	.word	0x40012c00
 80023d4:	2000000c 	.word	0x2000000c

080023d8 <hard_fault_handler_c>:

uint8_t hardfaultbuf[200];


void hard_fault_handler_c(uint32_t *stacked_regs)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b092      	sub	sp, #72	@ 0x48
 80023dc:	af08      	add	r7, sp, #32
 80023de:	6078      	str	r0, [r7, #4]
    // Récupère les registres sauvegardés par le CPU
    uint32_t r0  = stacked_regs[0];
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stacked_regs[1];
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stacked_regs[2];
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stacked_regs[3];
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stacked_regs[4];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stacked_regs[5];
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stacked_regs[6]; // <-- Instruction fautive !
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stacked_regs[7];
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	60bb      	str	r3, [r7, #8]

    // Mettez un breakpoint ici
    snprintf((char *)hardfaultbuf,200,"\n[HardFault] R0=0x%08lX R1=0x%08lX R2=0x%08lX R3=0x%08lX R12=0x%08lX LR=0x%08lX PC=0x%08lX PSR=0x%08lX\n", r0, r1, r2, r3, r12, lr, pc, psr);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	9306      	str	r3, [sp, #24]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	9305      	str	r3, [sp, #20]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	9304      	str	r3, [sp, #16]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	4a03      	ldr	r2, [pc, #12]	@ (800243c <hard_fault_handler_c+0x64>)
 8002430:	21c8      	movs	r1, #200	@ 0xc8
 8002432:	4803      	ldr	r0, [pc, #12]	@ (8002440 <hard_fault_handler_c+0x68>)
 8002434:	f00d fdc0 	bl	800ffb8 <sniprintf>
    // Pause ici pour analyse
    while(1);
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <hard_fault_handler_c+0x60>
 800243c:	0801126c 	.word	0x0801126c
 8002440:	20000b70 	.word	0x20000b70

08002444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <NMI_Handler+0x4>

0800244c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    __asm volatile
 8002450:	f01e 0f04 	tst.w	lr, #4
 8002454:	bf0c      	ite	eq
 8002456:	f3ef 8008 	mrseq	r0, MSP
 800245a:	f3ef 8009 	mrsne	r0, PSP
 800245e:	f7ff bfbb 	b.w	80023d8 <hard_fault_handler_c>
        "MRSEQ r0, MSP\n"
        "MRSNE r0, PSP\n"
        "B hard_fault_handler_c\n"
    );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	bf00      	nop
 8002464:	e7fd      	b.n	8002462 <HardFault_Handler+0x16>

08002466 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246a:	bf00      	nop
 800246c:	e7fd      	b.n	800246a <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	bf00      	nop
 8002474:	e7fd      	b.n	8002472 <BusFault_Handler+0x4>

08002476 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247a:	bf00      	nop
 800247c:	e7fd      	b.n	800247a <UsageFault_Handler+0x4>

0800247e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002490:	2002      	movs	r0, #2
 8002492:	f003 f977 	bl	8005784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}

0800249a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800249e:	2010      	movs	r0, #16
 80024a0:	f003 f970 	bl	8005784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 80024ac:	4802      	ldr	r0, [pc, #8]	@ (80024b8 <DMA1_Channel1_IRQHandler+0x10>)
 80024ae:	f002 fe74 	bl	800519a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000d2c 	.word	0x20000d2c

080024bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <DMA1_Channel2_IRQHandler+0x10>)
 80024c2:	f002 fe6a 	bl	800519a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000108 	.word	0x20000108

080024d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80024d4:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <DMA1_Channel3_IRQHandler+0x10>)
 80024d6:	f002 fe60 	bl	800519a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000fa4 	.word	0x20000fa4

080024e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <DMA1_Channel4_IRQHandler+0x10>)
 80024ea:	f002 fe56 	bl	800519a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20001004 	.word	0x20001004

080024f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024fc:	4802      	ldr	r0, [pc, #8]	@ (8002508 <ADC1_2_IRQHandler+0x10>)
 80024fe:	f001 fb4b 	bl	8003b98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000009c 	.word	0x2000009c

0800250c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002512:	f005 fa9d 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000b24 	.word	0x20000b24

08002520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002524:	4802      	ldr	r0, [pc, #8]	@ (8002530 <TIM2_IRQHandler+0x10>)
 8002526:	f005 fa93 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000c48 	.word	0x20000c48

08002534 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	timeindex++;
 8002538:	4b04      	ldr	r3, [pc, #16]	@ (800254c <TIM4_IRQHandler+0x18>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	4a03      	ldr	r2, [pc, #12]	@ (800254c <TIM4_IRQHandler+0x18>)
 8002540:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002542:	4803      	ldr	r0, [pc, #12]	@ (8002550 <TIM4_IRQHandler+0x1c>)
 8002544:	f005 fa84 	bl	8007a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000abc 	.word	0x20000abc
 8002550:	20000ce0 	.word	0x20000ce0

08002554 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <LPUART1_IRQHandler+0x10>)
 800255a:	f006 fe2f 	bl	80091bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000f10 	.word	0x20000f10

08002568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002570:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <_sbrk+0x5c>)
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <_sbrk+0x60>)
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <_sbrk+0x64>)
 8002586:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <_sbrk+0x68>)
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	429a      	cmp	r2, r3
 8002596:	d207      	bcs.n	80025a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002598:	f00d fdaa 	bl	80100f0 <__errno>
 800259c:	4603      	mov	r3, r0
 800259e:	220c      	movs	r2, #12
 80025a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	e009      	b.n	80025bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a8:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ae:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <_sbrk+0x64>)
 80025b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20008000 	.word	0x20008000
 80025c8:	00000400 	.word	0x00000400
 80025cc:	20000c38 	.word	0x20000c38
 80025d0:	20004260 	.word	0x20004260

080025d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <SystemInit+0x20>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	4a05      	ldr	r2, [pc, #20]	@ (80025f4 <SystemInit+0x20>)
 80025e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08e      	sub	sp, #56	@ 0x38
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	460a      	mov	r2, r1
 8002602:	71fb      	strb	r3, [r7, #7]
 8002604:	4613      	mov	r3, r2
 8002606:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 8002608:	2306      	movs	r3, #6
 800260a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 800260e:	2304      	movs	r3, #4
 8002610:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 800261a:	4a6f      	ldr	r2, [pc, #444]	@ (80027d8 <INIT_PERM_TARVOS+0x1e0>)
 800261c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002624:	6018      	str	r0, [r3, #0]
 8002626:	3304      	adds	r3, #4
 8002628:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 800262a:	4a6c      	ldr	r2, [pc, #432]	@ (80027dc <INIT_PERM_TARVOS+0x1e4>)
 800262c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002634:	6018      	str	r0, [r3, #0]
 8002636:	3304      	adds	r3, #4
 8002638:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 800263a:	4a69      	ldr	r2, [pc, #420]	@ (80027e0 <INIT_PERM_TARVOS+0x1e8>)
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002644:	6018      	str	r0, [r3, #0]
 8002646:	3304      	adds	r3, #4
 8002648:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 800264a:	2302      	movs	r3, #2
 800264c:	753b      	strb	r3, [r7, #20]
 800264e:	2309      	movs	r3, #9
 8002650:	757b      	strb	r3, [r7, #21]
 8002652:	2302      	movs	r3, #2
 8002654:	75bb      	strb	r3, [r7, #22]
 8002656:	230b      	movs	r3, #11
 8002658:	75fb      	strb	r3, [r7, #23]
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	763b      	strb	r3, [r7, #24]
 800265e:	2300      	movs	r3, #0
 8002660:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8002662:	2302      	movs	r3, #2
 8002664:	733b      	strb	r3, [r7, #12]
 8002666:	2309      	movs	r3, #9
 8002668:	737b      	strb	r3, [r7, #13]
 800266a:	2302      	movs	r3, #2
 800266c:	73bb      	strb	r3, [r7, #14]
 800266e:	2308      	movs	r3, #8
 8002670:	73fb      	strb	r3, [r7, #15]
 8002672:	79bb      	ldrb	r3, [r7, #6]
 8002674:	743b      	strb	r3, [r7, #16]
 8002676:	2300      	movs	r3, #0
 8002678:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 800267a:	4b5a      	ldr	r3, [pc, #360]	@ (80027e4 <INIT_PERM_TARVOS+0x1ec>)
 800267c:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 800267e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f8ac 	bl	80027ec <Get_CRC8>
 8002694:	4603      	mov	r3, r0
 8002696:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 800269a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800269e:	b29a      	uxth	r2, r3
 80026a0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80026a4:	2364      	movs	r3, #100	@ 0x64
 80026a6:	4850      	ldr	r0, [pc, #320]	@ (80027e8 <INIT_PERM_TARVOS+0x1f0>)
 80026a8:	f006 fba0 	bl	8008dec <HAL_UART_Transmit>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 80026b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f88f 	bl	80027ec <Get_CRC8>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 80026d4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80026d8:	b29a      	uxth	r2, r3
 80026da:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80026de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026e2:	4841      	ldr	r0, [pc, #260]	@ (80027e8 <INIT_PERM_TARVOS+0x1f0>)
 80026e4:	f006 fb82 	bl	8008dec <HAL_UART_Transmit>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 80026f4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f107 031c 	add.w	r3, r7, #28
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f871 	bl	80027ec <Get_CRC8>
 800270a:	4603      	mov	r3, r0
 800270c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 8002710:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002714:	b29a      	uxth	r2, r3
 8002716:	f107 011c 	add.w	r1, r7, #28
 800271a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800271e:	4832      	ldr	r0, [pc, #200]	@ (80027e8 <INIT_PERM_TARVOS+0x1f0>)
 8002720:	f006 fb64 	bl	8008dec <HAL_UART_Transmit>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 8002730:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f853 	bl	80027ec <Get_CRC8>
 8002746:	4603      	mov	r3, r0
 8002748:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 800274a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800274e:	b29a      	uxth	r2, r3
 8002750:	f107 0114 	add.w	r1, r7, #20
 8002754:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002758:	4823      	ldr	r0, [pc, #140]	@ (80027e8 <INIT_PERM_TARVOS+0x1f0>)
 800275a:	f006 fb47 	bl	8008dec <HAL_UART_Transmit>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 800276a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f836 	bl	80027ec <Get_CRC8>
 8002780:	4603      	mov	r3, r0
 8002782:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8002784:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002788:	b29a      	uxth	r2, r3
 800278a:	f107 010c 	add.w	r1, r7, #12
 800278e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002792:	4815      	ldr	r0, [pc, #84]	@ (80027e8 <INIT_PERM_TARVOS+0x1f0>)
 8002794:	f006 fb2a 	bl	8008dec <HAL_UART_Transmit>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 80027a4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	f107 0108 	add.w	r1, r7, #8
 80027ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80027b2:	480d      	ldr	r0, [pc, #52]	@ (80027e8 <INIT_PERM_TARVOS+0x1f0>)
 80027b4:	f006 fb1a 	bl	8008dec <HAL_UART_Transmit>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 80027c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027c8:	f000 fd4c 	bl	8003264 <HAL_Delay>
    return status;
 80027cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3738      	adds	r7, #56	@ 0x38
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	080112f8 	.word	0x080112f8
 80027dc:	08011300 	.word	0x08011300
 80027e0:	08011308 	.word	0x08011308
 80027e4:	07000502 	.word	0x07000502
 80027e8:	20000f10 	.word	0x20000f10

080027ec <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80027fc:	2300      	movs	r3, #0
 80027fe:	81bb      	strh	r3, [r7, #12]
 8002800:	e009      	b.n	8002816 <Get_CRC8+0x2a>
		crc ^= bufP[i];
 8002802:	89bb      	ldrh	r3, [r7, #12]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	4053      	eors	r3, r2
 800280e:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8002810:	89bb      	ldrh	r3, [r7, #12]
 8002812:	3301      	adds	r3, #1
 8002814:	81bb      	strh	r3, [r7, #12]
 8002816:	89ba      	ldrh	r2, [r7, #12]
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	429a      	cmp	r2, r3
 800281c:	d3f1      	bcc.n	8002802 <Get_CRC8+0x16>
	}
	return crc;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <decode_payload>:

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);

}

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b02      	cmp	r3, #2
 800283c:	f040 80bc 	bne.w	80029b8 <decode_payload+0x18c>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b81      	cmp	r3, #129	@ 0x81
 8002848:	f040 80b6 	bne.w	80029b8 <decode_payload+0x18c>
		return;
	}
	if(receivingbuffer[2]!=56){
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	3302      	adds	r3, #2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b38      	cmp	r3, #56	@ 0x38
 8002854:	f040 80b2 	bne.w	80029bc <decode_payload+0x190>
		return;
	}

	out->senderadress=receivingbuffer[3];
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	78da      	ldrb	r2, [r3, #3]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	3304      	adds	r3, #4
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b21b      	sxth	r3, r3
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	b21a      	sxth	r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	3305      	adds	r3, #5
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b21b      	sxth	r3, r3
 8002876:	4313      	orrs	r3, r2
 8002878:	b21b      	sxth	r3, r3
 800287a:	b29a      	uxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	799a      	ldrb	r2, [r3, #6]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	79da      	ldrb	r2, [r3, #7]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	7a1a      	ldrb	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_fin = receivingbuffer[9];
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	7a5a      	ldrb	r2, [r3, #9]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45



    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3348      	adds	r3, #72	@ 0x48
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	320a      	adds	r2, #10
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	334c      	adds	r3, #76	@ 0x4c
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	320e      	adds	r2, #14
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3350      	adds	r3, #80	@ 0x50
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	3212      	adds	r2, #18
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3354      	adds	r3, #84	@ 0x54
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	3216      	adds	r2, #22
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3358      	adds	r3, #88	@ 0x58
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	321a      	adds	r2, #26
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	335c      	adds	r3, #92	@ 0x5c
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	321e      	adds	r2, #30
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3360      	adds	r3, #96	@ 0x60
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	3222      	adds	r2, #34	@ 0x22
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3370      	adds	r3, #112	@ 0x70
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	3226      	adds	r2, #38	@ 0x26
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3364      	adds	r3, #100	@ 0x64
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	322a      	adds	r2, #42	@ 0x2a
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3368      	adds	r3, #104	@ 0x68
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	322e      	adds	r2, #46	@ 0x2e
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	336c      	adds	r3, #108	@ 0x6c
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	3232      	adds	r2, #50	@ 0x32
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3374      	adds	r3, #116	@ 0x74
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	3236      	adds	r2, #54	@ 0x36
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3378      	adds	r3, #120	@ 0x78
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	323a      	adds	r2, #58	@ 0x3a
 8002942:	7812      	ldrb	r2, [r2, #0]
 8002944:	701a      	strb	r2, [r3, #0]


    vraiRSSI=(int8_t)out->RSSI;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800294c:	b25a      	sxtb	r2, r3
 800294e:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <decode_payload+0x198>)
 8002950:	701a      	strb	r2, [r3, #0]

    if(noreturn_flag3==0){
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <decode_payload+0x19c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <decode_payload+0x144>
    if(receivingbuffer[6]==1){
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	3306      	adds	r3, #6
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <decode_payload+0x144>
    	flag_calib=1;
 8002964:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <decode_payload+0x1a0>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]
    	noreturn_flag3=1;
 800296a:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <decode_payload+0x19c>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
    }
    }

    if(noreturn_flag1==0){
 8002970:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <decode_payload+0x1a4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <decode_payload+0x162>
    if(receivingbuffer[7]==1){
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	3307      	adds	r3, #7
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <decode_payload+0x162>
    	flag_drop=1;
 8002982:	4b14      	ldr	r3, [pc, #80]	@ (80029d4 <decode_payload+0x1a8>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
    	noreturn_flag1=1;
 8002988:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <decode_payload+0x1a4>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]
    }

    }
    if(noreturn_flag2==0){
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <decode_payload+0x1ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <decode_payload+0x180>
    if(receivingbuffer[8]==1){
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	3308      	adds	r3, #8
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <decode_payload+0x180>
    	flag_separation=1;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <decode_payload+0x1b0>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
    	noreturn_flag2=1;
 80029a6:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <decode_payload+0x1ac>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

    }



    memset((uint8_t *)receivingbuffer,0,64);
 80029ac:	2240      	movs	r2, #64	@ 0x40
 80029ae:	2100      	movs	r1, #0
 80029b0:	6838      	ldr	r0, [r7, #0]
 80029b2:	f00d fb37 	bl	8010024 <memset>
 80029b6:	e002      	b.n	80029be <decode_payload+0x192>
		return;
 80029b8:	bf00      	nop
 80029ba:	e000      	b.n	80029be <decode_payload+0x192>
		return;
 80029bc:	bf00      	nop
}
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000016c 	.word	0x2000016c
 80029c8:	20000c44 	.word	0x20000c44
 80029cc:	20000ab0 	.word	0x20000ab0
 80029d0:	20000c3c 	.word	0x20000c3c
 80029d4:	20000aa8 	.word	0x20000aa8
 80029d8:	20000c40 	.word	0x20000c40
 80029dc:	20000aac 	.word	0x20000aac

080029e0 <tarvos_checksum>:

uint8_t tarvos_checksum(uint8_t *data, uint16_t len)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
    uint8_t checksum = 0x00;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 80029f0:	2300      	movs	r3, #0
 80029f2:	81bb      	strh	r3, [r7, #12]
 80029f4:	e009      	b.n	8002a0a <tarvos_checksum+0x2a>
        checksum ^= data[i];
 80029f6:	89bb      	ldrh	r3, [r7, #12]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	4053      	eors	r3, r2
 8002a02:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 8002a04:	89bb      	ldrh	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	81bb      	strh	r3, [r7, #12]
 8002a0a:	89ba      	ldrh	r2, [r7, #12]
 8002a0c:	887b      	ldrh	r3, [r7, #2]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	429a      	cmp	r2, r3
 8002a12:	dbf0      	blt.n	80029f6 <tarvos_checksum+0x16>
    }
    return checksum;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	@ 0x38
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a44:	463b      	mov	r3, r7
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	611a      	str	r2, [r3, #16]
 8002a52:	615a      	str	r2, [r3, #20]
 8002a54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a56:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002a58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b29      	ldr	r3, [pc, #164]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 203;
 8002a6a:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002a6c:	22cb      	movs	r2, #203	@ 0xcb
 8002a6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a70:	4b26      	ldr	r3, [pc, #152]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a76:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a7c:	4823      	ldr	r0, [pc, #140]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002a7e:	f004 fbb4 	bl	80071ea <HAL_TIM_Base_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a88:	f7ff fb0e 	bl	80020a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a96:	4619      	mov	r1, r3
 8002a98:	481c      	ldr	r0, [pc, #112]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002a9a:	f005 fa3d 	bl	8007f18 <HAL_TIM_ConfigClockSource>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002aa4:	f7ff fb00 	bl	80020a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002aa8:	4818      	ldr	r0, [pc, #96]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002aaa:	f004 fc5f 	bl	800736c <HAL_TIM_PWM_Init>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ab4:	f7ff faf8 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4811      	ldr	r0, [pc, #68]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002ac8:	f006 f878 	bl	8008bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002ad2:	f7ff fae9 	bl	80020a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ad6:	2360      	movs	r3, #96	@ 0x60
 8002ad8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ae6:	463b      	mov	r3, r7
 8002ae8:	2204      	movs	r2, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4807      	ldr	r0, [pc, #28]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002aee:	f005 f8ff 	bl	8007cf0 <HAL_TIM_PWM_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002af8:	f7ff fad6 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002afc:	4803      	ldr	r0, [pc, #12]	@ (8002b0c <MX_TIM2_Init+0xe8>)
 8002afe:	f000 f951 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 8002b02:	bf00      	nop
 8002b04:	3738      	adds	r7, #56	@ 0x38
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000c48 	.word	0x20000c48

08002b10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08e      	sub	sp, #56	@ 0x38
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b30:	463b      	mov	r3, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	611a      	str	r2, [r3, #16]
 8002b3e:	615a      	str	r2, [r3, #20]
 8002b40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b42:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002b44:	4a2d      	ldr	r2, [pc, #180]	@ (8002bfc <MX_TIM3_Init+0xec>)
 8002b46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8002b48:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002b4a:	22a9      	movs	r2, #169	@ 0xa9
 8002b4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002b54:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002b56:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002b5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5c:	4b26      	ldr	r3, [pc, #152]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b62:	4b25      	ldr	r3, [pc, #148]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002b64:	2280      	movs	r2, #128	@ 0x80
 8002b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b68:	4823      	ldr	r0, [pc, #140]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002b6a:	f004 fb3e 	bl	80071ea <HAL_TIM_Base_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002b74:	f7ff fa98 	bl	80020a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b82:	4619      	mov	r1, r3
 8002b84:	481c      	ldr	r0, [pc, #112]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002b86:	f005 f9c7 	bl	8007f18 <HAL_TIM_ConfigClockSource>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002b90:	f7ff fa8a 	bl	80020a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b94:	4818      	ldr	r0, [pc, #96]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002b96:	f004 fbe9 	bl	800736c <HAL_TIM_PWM_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002ba0:	f7ff fa82 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4811      	ldr	r0, [pc, #68]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002bb4:	f006 f802 	bl	8008bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002bbe:	f7ff fa73 	bl	80020a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc2:	2360      	movs	r3, #96	@ 0x60
 8002bc4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bd2:	463b      	mov	r3, r7
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4807      	ldr	r0, [pc, #28]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002bda:	f005 f889 	bl	8007cf0 <HAL_TIM_PWM_ConfigChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002be4:	f7ff fa60 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002be8:	4803      	ldr	r0, [pc, #12]	@ (8002bf8 <MX_TIM3_Init+0xe8>)
 8002bea:	f000 f8db 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 8002bee:	bf00      	nop
 8002bf0:	3738      	adds	r7, #56	@ 0x38
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000c94 	.word	0x20000c94
 8002bfc:	40000400 	.word	0x40000400

08002c00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c06:	f107 0310 	add.w	r3, r7, #16
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c98 <MX_TIM4_Init+0x98>)
 8002c20:	4a1e      	ldr	r2, [pc, #120]	@ (8002c9c <MX_TIM4_Init+0x9c>)
 8002c22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8002c24:	4b1c      	ldr	r3, [pc, #112]	@ (8002c98 <MX_TIM4_Init+0x98>)
 8002c26:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002c2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <MX_TIM4_Init+0x98>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8002c32:	4b19      	ldr	r3, [pc, #100]	@ (8002c98 <MX_TIM4_Init+0x98>)
 8002c34:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002c38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3a:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <MX_TIM4_Init+0x98>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c40:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <MX_TIM4_Init+0x98>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c46:	4814      	ldr	r0, [pc, #80]	@ (8002c98 <MX_TIM4_Init+0x98>)
 8002c48:	f004 facf 	bl	80071ea <HAL_TIM_Base_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002c52:	f7ff fa29 	bl	80020a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4619      	mov	r1, r3
 8002c62:	480d      	ldr	r0, [pc, #52]	@ (8002c98 <MX_TIM4_Init+0x98>)
 8002c64:	f005 f958 	bl	8007f18 <HAL_TIM_ConfigClockSource>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002c6e:	f7ff fa1b 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4806      	ldr	r0, [pc, #24]	@ (8002c98 <MX_TIM4_Init+0x98>)
 8002c80:	f005 ff9c 	bl	8008bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002c8a:	f7ff fa0d 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c8e:	bf00      	nop
 8002c90:	3720      	adds	r7, #32
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000ce0 	.word	0x20000ce0
 8002c9c:	40000800 	.word	0x40000800

08002ca0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb0:	d13e      	bne.n	8002d30 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cb2:	4b37      	ldr	r3, [pc, #220]	@ (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb6:	4a36      	ldr	r2, [pc, #216]	@ (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cbe:	4b34      	ldr	r3, [pc, #208]	@ (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8002cca:	4b32      	ldr	r3, [pc, #200]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002ccc:	4a32      	ldr	r2, [pc, #200]	@ (8002d98 <HAL_TIM_Base_MspInit+0xf8>)
 8002cce:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8002cd0:	4b30      	ldr	r3, [pc, #192]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002cd2:	2239      	movs	r2, #57	@ 0x39
 8002cd4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002cd8:	2210      	movs	r2, #16
 8002cda:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002ce4:	2280      	movs	r2, #128	@ 0x80
 8002ce6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cee:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf0:	4b28      	ldr	r3, [pc, #160]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 8002cf6:	4b27      	ldr	r3, [pc, #156]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002cfc:	4b25      	ldr	r3, [pc, #148]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8002d02:	4824      	ldr	r0, [pc, #144]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002d04:	f002 f866 	bl	8004dd4 <HAL_DMA_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8002d0e:	f7ff f9cb 	bl	80020a8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1f      	ldr	r2, [pc, #124]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d18:	4a1e      	ldr	r2, [pc, #120]	@ (8002d94 <HAL_TIM_Base_MspInit+0xf4>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2105      	movs	r1, #5
 8002d22:	201c      	movs	r0, #28
 8002d24:	f002 f82e 	bl	8004d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d28:	201c      	movs	r0, #28
 8002d2a:	f002 f845 	bl	8004db8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d2e:	e02a      	b.n	8002d86 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a19      	ldr	r2, [pc, #100]	@ (8002d9c <HAL_TIM_Base_MspInit+0xfc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10c      	bne.n	8002d54 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3a:	4b15      	ldr	r3, [pc, #84]	@ (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	4a14      	ldr	r2, [pc, #80]	@ (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d46:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
}
 8002d52:	e018      	b.n	8002d86 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a11      	ldr	r2, [pc, #68]	@ (8002da0 <HAL_TIM_Base_MspInit+0x100>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d113      	bne.n	8002d86 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d62:	4a0b      	ldr	r2, [pc, #44]	@ (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d6a:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <HAL_TIM_Base_MspInit+0xf0>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2106      	movs	r1, #6
 8002d7a:	201e      	movs	r0, #30
 8002d7c:	f002 f802 	bl	8004d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d80:	201e      	movs	r0, #30
 8002d82:	f002 f819 	bl	8004db8 <HAL_NVIC_EnableIRQ>
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	20000d2c 	.word	0x20000d2c
 8002d98:	40020008 	.word	0x40020008
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800

08002da4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	@ 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc4:	d11d      	bne.n	8002e02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	4b21      	ldr	r3, [pc, #132]	@ (8002e4c <HAL_TIM_MspPostInit+0xa8>)
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dca:	4a20      	ldr	r2, [pc, #128]	@ (8002e4c <HAL_TIM_MspPostInit+0xa8>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <HAL_TIM_MspPostInit+0xa8>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002dde:	2302      	movs	r3, #2
 8002de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002dea:	2301      	movs	r3, #1
 8002dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dee:	2301      	movs	r3, #1
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4619      	mov	r1, r3
 8002df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dfc:	f002 fb28 	bl	8005450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e00:	e020      	b.n	8002e44 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <HAL_TIM_MspPostInit+0xac>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d11b      	bne.n	8002e44 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <HAL_TIM_MspPostInit+0xa8>)
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e10:	4a0e      	ldr	r2, [pc, #56]	@ (8002e4c <HAL_TIM_MspPostInit+0xa8>)
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <HAL_TIM_MspPostInit+0xa8>)
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e24:	2340      	movs	r3, #64	@ 0x40
 8002e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e34:	2302      	movs	r3, #2
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4805      	ldr	r0, [pc, #20]	@ (8002e54 <HAL_TIM_MspPostInit+0xb0>)
 8002e40:	f002 fb06 	bl	8005450 <HAL_GPIO_Init>
}
 8002e44:	bf00      	nop
 8002e46:	3728      	adds	r7, #40	@ 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40000400 	.word	0x40000400
 8002e54:	48000800 	.word	0x48000800

08002e58 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002e5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e5e:	4a22      	ldr	r2, [pc, #136]	@ (8002ee8 <MX_LPUART1_UART_Init+0x90>)
 8002e60:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002e62:	4b20      	ldr	r3, [pc, #128]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e68:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e7e:	220c      	movs	r2, #12
 8002e80:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e82:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e88:	4b16      	ldr	r3, [pc, #88]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e94:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e9a:	4812      	ldr	r0, [pc, #72]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002e9c:	f005 ff56 	bl	8008d4c <HAL_UART_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ea6:	f7ff f8ff 	bl	80020a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eaa:	2100      	movs	r1, #0
 8002eac:	480d      	ldr	r0, [pc, #52]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002eae:	f007 fc39 	bl	800a724 <HAL_UARTEx_SetTxFifoThreshold>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002eb8:	f7ff f8f6 	bl	80020a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4809      	ldr	r0, [pc, #36]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002ec0:	f007 fc6e 	bl	800a7a0 <HAL_UARTEx_SetRxFifoThreshold>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002eca:	f7ff f8ed 	bl	80020a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002ece:	4805      	ldr	r0, [pc, #20]	@ (8002ee4 <MX_LPUART1_UART_Init+0x8c>)
 8002ed0:	f007 fbef 	bl	800a6b2 <HAL_UARTEx_DisableFifoMode>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002eda:	f7ff f8e5 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000f10 	.word	0x20000f10
 8002ee8:	40008000 	.word	0x40008000

08002eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b09c      	sub	sp, #112	@ 0x70
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f04:	f107 0318 	add.w	r3, r7, #24
 8002f08:	2244      	movs	r2, #68	@ 0x44
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f00d f889 	bl	8010024 <memset>
  if(uartHandle->Instance==LPUART1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a5b      	ldr	r2, [pc, #364]	@ (8003084 <HAL_UART_MspInit+0x198>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	f040 80af 	bne.w	800307c <HAL_UART_MspInit+0x190>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f26:	f107 0318 	add.w	r3, r7, #24
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fec2 	bl	8006cb4 <HAL_RCCEx_PeriphCLKConfig>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f36:	f7ff f8b7 	bl	80020a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002f3a:	4b53      	ldr	r3, [pc, #332]	@ (8003088 <HAL_UART_MspInit+0x19c>)
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	4a52      	ldr	r2, [pc, #328]	@ (8003088 <HAL_UART_MspInit+0x19c>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002f46:	4b50      	ldr	r3, [pc, #320]	@ (8003088 <HAL_UART_MspInit+0x19c>)
 8002f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	4b4d      	ldr	r3, [pc, #308]	@ (8003088 <HAL_UART_MspInit+0x19c>)
 8002f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f56:	4a4c      	ldr	r2, [pc, #304]	@ (8003088 <HAL_UART_MspInit+0x19c>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003088 <HAL_UART_MspInit+0x19c>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6a:	4b47      	ldr	r3, [pc, #284]	@ (8003088 <HAL_UART_MspInit+0x19c>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	4a46      	ldr	r2, [pc, #280]	@ (8003088 <HAL_UART_MspInit+0x19c>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f76:	4b44      	ldr	r3, [pc, #272]	@ (8003088 <HAL_UART_MspInit+0x19c>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f82:	2308      	movs	r3, #8
 8002f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002f92:	230c      	movs	r3, #12
 8002f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f96:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa0:	f002 fa56 	bl	8005450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002fa4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4832      	ldr	r0, [pc, #200]	@ (800308c <HAL_UART_MspInit+0x1a0>)
 8002fc2:	f002 fa45 	bl	8005450 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8002fc6:	4b32      	ldr	r3, [pc, #200]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002fc8:	4a32      	ldr	r2, [pc, #200]	@ (8003094 <HAL_UART_MspInit+0x1a8>)
 8002fca:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002fcc:	4b30      	ldr	r3, [pc, #192]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002fce:	2222      	movs	r2, #34	@ 0x22
 8002fd0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fde:	4b2c      	ldr	r3, [pc, #176]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002fe0:	2280      	movs	r2, #128	@ 0x80
 8002fe2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fea:	4b29      	ldr	r3, [pc, #164]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002ff0:	4b27      	ldr	r3, [pc, #156]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff6:	4b26      	ldr	r3, [pc, #152]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002ffc:	4824      	ldr	r0, [pc, #144]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8002ffe:	f001 fee9 	bl	8004dd4 <HAL_DMA_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8003008:	f7ff f84e 	bl	80020a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a20      	ldr	r2, [pc, #128]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8003010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003014:	4a1e      	ldr	r2, [pc, #120]	@ (8003090 <HAL_UART_MspInit+0x1a4>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800301a:	4b1f      	ldr	r3, [pc, #124]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 800301c:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <HAL_UART_MspInit+0x1b0>)
 800301e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003020:	4b1d      	ldr	r3, [pc, #116]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 8003022:	2223      	movs	r2, #35	@ 0x23
 8003024:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003026:	4b1c      	ldr	r3, [pc, #112]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 8003028:	2210      	movs	r2, #16
 800302a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302c:	4b1a      	ldr	r3, [pc, #104]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003032:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 8003034:	2280      	movs	r2, #128	@ 0x80
 8003036:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003038:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 800303a:	2200      	movs	r2, #0
 800303c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303e:	4b16      	ldr	r3, [pc, #88]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003044:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800304a:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003050:	4811      	ldr	r0, [pc, #68]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 8003052:	f001 febf 	bl	8004dd4 <HAL_DMA_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 800305c:	f7ff f824 	bl	80020a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a0d      	ldr	r2, [pc, #52]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 8003064:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003066:	4a0c      	ldr	r2, [pc, #48]	@ (8003098 <HAL_UART_MspInit+0x1ac>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800306c:	2200      	movs	r2, #0
 800306e:	2105      	movs	r1, #5
 8003070:	205b      	movs	r0, #91	@ 0x5b
 8003072:	f001 fe87 	bl	8004d84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003076:	205b      	movs	r0, #91	@ 0x5b
 8003078:	f001 fe9e 	bl	8004db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800307c:	bf00      	nop
 800307e:	3770      	adds	r7, #112	@ 0x70
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40008000 	.word	0x40008000
 8003088:	40021000 	.word	0x40021000
 800308c:	48000400 	.word	0x48000400
 8003090:	20000fa4 	.word	0x20000fa4
 8003094:	40020030 	.word	0x40020030
 8003098:	20001004 	.word	0x20001004
 800309c:	40020044 	.word	0x40020044

080030a0 <HAL_UART_RxCpltCallback>:
  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance==LPUART1){
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a13      	ldr	r2, [pc, #76]	@ (80030fc <HAL_UART_RxCpltCallback+0x5c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d11e      	bne.n	80030f0 <HAL_UART_RxCpltCallback+0x50>
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 80030b2:	2340      	movs	r3, #64	@ 0x40
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e018      	b.n	80030ea <HAL_UART_RxCpltCallback+0x4a>
            circular_buffer[write_index] = dma_rx_buffer[i];
 80030b8:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <HAL_UART_RxCpltCallback+0x60>)
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4619      	mov	r1, r3
 80030c0:	4a10      	ldr	r2, [pc, #64]	@ (8003104 <HAL_UART_RxCpltCallback+0x64>)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <HAL_UART_RxCpltCallback+0x68>)
 80030ca:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <HAL_UART_RxCpltCallback+0x60>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	425a      	negs	r2, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	bf58      	it	pl
 80030dc:	4253      	negpl	r3, r2
 80030de:	b29a      	uxth	r2, r3
 80030e0:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <HAL_UART_RxCpltCallback+0x60>)
 80030e2:	801a      	strh	r2, [r3, #0]
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3301      	adds	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80030ee:	dde3      	ble.n	80030b8 <HAL_UART_RxCpltCallback+0x18>
        }
	}


}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	40008000 	.word	0x40008000
 8003100:	20000f0c 	.word	0x20000f0c
 8003104:	20000d8c 	.word	0x20000d8c
 8003108:	20000e0c 	.word	0x20000e0c

0800310c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a13      	ldr	r2, [pc, #76]	@ (8003168 <HAL_UART_RxHalfCpltCallback+0x5c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d11e      	bne.n	800315c <HAL_UART_RxHalfCpltCallback+0x50>
    {
        // Copier les 1ers 64 octets
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e018      	b.n	8003156 <HAL_UART_RxHalfCpltCallback+0x4a>
            circular_buffer[write_index] = dma_rx_buffer[i];
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_UART_RxHalfCpltCallback+0x60>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	4619      	mov	r1, r3
 800312c:	4a10      	ldr	r2, [pc, #64]	@ (8003170 <HAL_UART_RxHalfCpltCallback+0x64>)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <HAL_UART_RxHalfCpltCallback+0x68>)
 8003136:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <HAL_UART_RxHalfCpltCallback+0x60>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	3301      	adds	r3, #1
 8003140:	425a      	negs	r2, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	bf58      	it	pl
 8003148:	4253      	negpl	r3, r2
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b07      	ldr	r3, [pc, #28]	@ (800316c <HAL_UART_RxHalfCpltCallback+0x60>)
 800314e:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3301      	adds	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b3f      	cmp	r3, #63	@ 0x3f
 800315a:	dde3      	ble.n	8003124 <HAL_UART_RxHalfCpltCallback+0x18>
        }
    }
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40008000 	.word	0x40008000
 800316c:	20000f0c 	.word	0x20000f0c
 8003170:	20000d8c 	.word	0x20000d8c
 8003174:	20000e0c 	.word	0x20000e0c

08003178 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a05      	ldr	r2, [pc, #20]	@ (800319c <HAL_UART_TxCpltCallback+0x24>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d104      	bne.n	8003194 <HAL_UART_TxCpltCallback+0x1c>
    {
        osSemaphoreRelease(uartTxDoneHandle);
 800318a:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <HAL_UART_TxCpltCallback+0x28>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f00a fb80 	bl	800d894 <osSemaphoreRelease>
    }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40008000 	.word	0x40008000
 80031a0:	200001dc 	.word	0x200001dc

080031a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031a4:	480d      	ldr	r0, [pc, #52]	@ (80031dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80031a8:	f7ff fa14 	bl	80025d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031ac:	480c      	ldr	r0, [pc, #48]	@ (80031e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80031ae:	490d      	ldr	r1, [pc, #52]	@ (80031e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <LoopForever+0xe>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80031b4:	e002      	b.n	80031bc <LoopCopyDataInit>

080031b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ba:	3304      	adds	r3, #4

080031bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c0:	d3f9      	bcc.n	80031b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c2:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80031c4:	4c0a      	ldr	r4, [pc, #40]	@ (80031f0 <LoopForever+0x16>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c8:	e001      	b.n	80031ce <LoopFillZerobss>

080031ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031cc:	3204      	adds	r2, #4

080031ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d0:	d3fb      	bcc.n	80031ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f00c ff93 	bl	80100fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031d6:	f7fe fe55 	bl	8001e84 <main>

080031da <LoopForever>:

LoopForever:
    b LoopForever
 80031da:	e7fe      	b.n	80031da <LoopForever>
  ldr   r0, =_estack
 80031dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80031e8:	08011478 	.word	0x08011478
  ldr r2, =_sbss
 80031ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80031f0:	20004260 	.word	0x20004260

080031f4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <COMP1_2_3_IRQHandler>

080031f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f001 fdb4 	bl	8004d6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003206:	200f      	movs	r0, #15
 8003208:	f7ff f87a 	bl	8002300 <HAL_InitTick>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	71fb      	strb	r3, [r7, #7]
 8003216:	e001      	b.n	800321c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003218:	f7ff f848 	bl	80022ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800321c:	79fb      	ldrb	r3, [r7, #7]

}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <HAL_IncTick+0x1c>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <HAL_IncTick+0x20>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4413      	add	r3, r2
 8003236:	4a03      	ldr	r2, [pc, #12]	@ (8003244 <HAL_IncTick+0x1c>)
 8003238:	6013      	str	r3, [r2, #0]
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	20001064 	.word	0x20001064
 8003248:	20000010 	.word	0x20000010

0800324c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return uwTick;
 8003250:	4b03      	ldr	r3, [pc, #12]	@ (8003260 <HAL_GetTick+0x14>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20001064 	.word	0x20001064

08003264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800326c:	f7ff ffee 	bl	800324c <HAL_GetTick>
 8003270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d004      	beq.n	8003288 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800327e:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <HAL_Delay+0x40>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003288:	bf00      	nop
 800328a:	f7ff ffdf 	bl	800324c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	429a      	cmp	r2, r3
 8003298:	d8f7      	bhi.n	800328a <HAL_Delay+0x26>
  {
  }
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000010 	.word	0x20000010

080032a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	609a      	str	r2, [r3, #8]
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3360      	adds	r3, #96	@ 0x60
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <LL_ADC_SetOffset+0x44>)
 8003332:	4013      	ands	r3, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	4313      	orrs	r3, r2
 8003340:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	03fff000 	.word	0x03fff000

08003358 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3360      	adds	r3, #96	@ 0x60
 8003366:	461a      	mov	r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	3360      	adds	r3, #96	@ 0x60
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b087      	sub	sp, #28
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3360      	adds	r3, #96	@ 0x60
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	431a      	orrs	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3360      	adds	r3, #96	@ 0x60
 8003400:	461a      	mov	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	431a      	orrs	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	615a      	str	r2, [r3, #20]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003472:	b480      	push	{r7}
 8003474:	b087      	sub	sp, #28
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3330      	adds	r3, #48	@ 0x30
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	4413      	add	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	211f      	movs	r1, #31
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	401a      	ands	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	f003 011f 	and.w	r1, r3, #31
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	431a      	orrs	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3314      	adds	r3, #20
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	0e5b      	lsrs	r3, r3, #25
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	4413      	add	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	0d1b      	lsrs	r3, r3, #20
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2107      	movs	r1, #7
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	401a      	ands	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	0d1b      	lsrs	r3, r3, #20
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	fa01 f303 	lsl.w	r3, r1, r3
 8003534:	431a      	orrs	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003560:	43db      	mvns	r3, r3
 8003562:	401a      	ands	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0318 	and.w	r3, r3, #24
 800356a:	4908      	ldr	r1, [pc, #32]	@ (800358c <LL_ADC_SetChannelSingleDiff+0x44>)
 800356c:	40d9      	lsrs	r1, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	400b      	ands	r3, r1
 8003572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003576:	431a      	orrs	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	0007ffff 	.word	0x0007ffff

08003590 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 031f 	and.w	r3, r3, #31
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80035d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6093      	str	r3, [r2, #8]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80035fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003600:	d101      	bne.n	8003606 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003628:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003650:	d101      	bne.n	8003656 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <LL_ADC_IsEnabled+0x18>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <LL_ADC_IsEnabled+0x1a>
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036c6:	f043 0204 	orr.w	r2, r3, #4
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d101      	bne.n	80036f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b08      	cmp	r3, #8
 8003712:	d101      	bne.n	8003718 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b089      	sub	sp, #36	@ 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e167      	b.n	8003a12 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fd fc01 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff3f 	bl	80035ec <LL_ADC_IsDeepPowerDownEnabled>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff25 	bl	80035c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff5a 	bl	800363c <LL_ADC_IsInternalRegulatorEnabled>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d115      	bne.n	80037ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ff3e 	bl	8003614 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003798:	4ba0      	ldr	r3, [pc, #640]	@ (8003a1c <HAL_ADC_Init+0x2f4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	4aa0      	ldr	r2, [pc, #640]	@ (8003a20 <HAL_ADC_Init+0x2f8>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	3301      	adds	r3, #1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037ac:	e002      	b.n	80037b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f9      	bne.n	80037ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff ff3c 	bl	800363c <LL_ADC_IsInternalRegulatorEnabled>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10d      	bne.n	80037e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	f043 0210 	orr.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff ff75 	bl	80036da <LL_ADC_REG_IsConversionOngoing>
 80037f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 8100 	bne.w	8003a00 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f040 80fc 	bne.w	8003a00 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003810:	f043 0202 	orr.w	r2, r3, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff35 	bl	800368c <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d111      	bne.n	800384c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003828:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800382c:	f7ff ff2e 	bl	800368c <LL_ADC_IsEnabled>
 8003830:	4604      	mov	r4, r0
 8003832:	487c      	ldr	r0, [pc, #496]	@ (8003a24 <HAL_ADC_Init+0x2fc>)
 8003834:	f7ff ff2a 	bl	800368c <LL_ADC_IsEnabled>
 8003838:	4603      	mov	r3, r0
 800383a:	4323      	orrs	r3, r4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d105      	bne.n	800384c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4619      	mov	r1, r3
 8003846:	4878      	ldr	r0, [pc, #480]	@ (8003a28 <HAL_ADC_Init+0x300>)
 8003848:	f7ff fd2e 	bl	80032a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	7f5b      	ldrb	r3, [r3, #29]
 8003850:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003856:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800385c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003862:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800386a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003876:	2b01      	cmp	r3, #1
 8003878:	d106      	bne.n	8003888 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387e:	3b01      	subs	r3, #1
 8003880:	045b      	lsls	r3, r3, #17
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	4b60      	ldr	r3, [pc, #384]	@ (8003a2c <HAL_ADC_Init+0x304>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	69b9      	ldr	r1, [r7, #24]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff14 	bl	8003700 <LL_ADC_INJ_IsConversionOngoing>
 80038d8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d16d      	bne.n	80039bc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d16a      	bne.n	80039bc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038ea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038f2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003902:	f023 0302 	bic.w	r3, r3, #2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	430b      	orrs	r3, r1
 800390e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003926:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003930:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6911      	ldr	r1, [r2, #16]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	430b      	orrs	r3, r1
 8003942:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003946:	e013      	b.n	8003970 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003956:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003968:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800396c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003976:	2b01      	cmp	r3, #1
 8003978:	d118      	bne.n	80039ac <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003990:	4311      	orrs	r1, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800399c:	430a      	orrs	r2, r1
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	611a      	str	r2, [r3, #16]
 80039aa:	e007      	b.n	80039bc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d10c      	bne.n	80039de <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f023 010f 	bic.w	r1, r3, #15
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	1e5a      	subs	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	631a      	str	r2, [r3, #48]	@ 0x30
 80039dc:	e007      	b.n	80039ee <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 020f 	bic.w	r2, r2, #15
 80039ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039fe:	e007      	b.n	8003a10 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	f043 0210 	orr.w	r2, r3, #16
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3724      	adds	r7, #36	@ 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd90      	pop	{r4, r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000008 	.word	0x20000008
 8003a20:	053e2d63 	.word	0x053e2d63
 8003a24:	50000100 	.word	0x50000100
 8003a28:	50000300 	.word	0x50000300
 8003a2c:	fff04007 	.word	0xfff04007

08003a30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a3c:	4851      	ldr	r0, [pc, #324]	@ (8003b84 <HAL_ADC_Start_DMA+0x154>)
 8003a3e:	f7ff fda7 	bl	8003590 <LL_ADC_GetMultimode>
 8003a42:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff fe46 	bl	80036da <LL_ADC_REG_IsConversionOngoing>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 808f 	bne.w	8003b74 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADC_Start_DMA+0x34>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e08a      	b.n	8003b7a <HAL_ADC_Start_DMA+0x14a>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d002      	beq.n	8003a7e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	d173      	bne.n	8003b66 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 feb2 	bl	80047e8 <ADC_Enable>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d166      	bne.n	8003b5c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <HAL_ADC_Start_DMA+0x158>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d002      	beq.n	8003ab2 <HAL_ADC_Start_DMA+0x82>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	e001      	b.n	8003ab6 <HAL_ADC_Start_DMA+0x86>
 8003ab2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d002      	beq.n	8003ac4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae0:	f023 0206 	bic.w	r2, r3, #6
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ae8:	e002      	b.n	8003af0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af4:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <HAL_ADC_Start_DMA+0x15c>)
 8003af6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afc:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <HAL_ADC_Start_DMA+0x160>)
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b04:	4a23      	ldr	r2, [pc, #140]	@ (8003b94 <HAL_ADC_Start_DMA+0x164>)
 8003b06:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	221c      	movs	r2, #28
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0210 	orr.w	r2, r2, #16
 8003b26:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3340      	adds	r3, #64	@ 0x40
 8003b42:	4619      	mov	r1, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f001 f9ec 	bl	8004f24 <HAL_DMA_Start_IT>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fdac 	bl	80036b2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b5a:	e00d      	b.n	8003b78 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003b64:	e008      	b.n	8003b78 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003b72:	e001      	b.n	8003b78 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	50000300 	.word	0x50000300
 8003b88:	50000100 	.word	0x50000100
 8003b8c:	080048f5 	.word	0x080048f5
 8003b90:	080049cd 	.word	0x080049cd
 8003b94:	080049e9 	.word	0x080049e9

08003b98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	@ 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb4:	4883      	ldr	r0, [pc, #524]	@ (8003dc4 <HAL_ADC_IRQHandler+0x22c>)
 8003bb6:	f7ff fceb 	bl	8003590 <LL_ADC_GetMultimode>
 8003bba:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d017      	beq.n	8003bf6 <HAL_ADC_IRQHandler+0x5e>
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d012      	beq.n	8003bf6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 ff65 	bl	8004ab8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <HAL_ADC_IRQHandler+0x72>
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8085 	beq.w	8003d20 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d07f      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fc05 	bl	800344c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d064      	beq.n	8003d12 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc8 <HAL_ADC_IRQHandler+0x230>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d002      	beq.n	8003c58 <HAL_ADC_IRQHandler+0xc0>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	e001      	b.n	8003c5c <HAL_ADC_IRQHandler+0xc4>
 8003c58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d008      	beq.n	8003c76 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	d002      	beq.n	8003c76 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b09      	cmp	r3, #9
 8003c74:	d104      	bne.n	8003c80 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	623b      	str	r3, [r7, #32]
 8003c7e:	e00d      	b.n	8003c9c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a50      	ldr	r2, [pc, #320]	@ (8003dc8 <HAL_ADC_IRQHandler+0x230>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d002      	beq.n	8003c90 <HAL_ADC_IRQHandler+0xf8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	e001      	b.n	8003c94 <HAL_ADC_IRQHandler+0xfc>
 8003c90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c94:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d135      	bne.n	8003d12 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d12e      	bne.n	8003d12 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fd0e 	bl	80036da <LL_ADC_REG_IsConversionOngoing>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d11a      	bne.n	8003cfa <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 020c 	bic.w	r2, r2, #12
 8003cd2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d112      	bne.n	8003d12 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cf8:	e00b      	b.n	8003d12 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd f9ac 	bl	8001070 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	220c      	movs	r2, #12
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <HAL_ADC_IRQHandler+0x19c>
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10b      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 809e 	beq.w	8003e7c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8098 	beq.w	8003e7c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fbae 	bl	80034ca <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003d6e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fb69 	bl	800344c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d7a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a11      	ldr	r2, [pc, #68]	@ (8003dc8 <HAL_ADC_IRQHandler+0x230>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d002      	beq.n	8003d8c <HAL_ADC_IRQHandler+0x1f4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e001      	b.n	8003d90 <HAL_ADC_IRQHandler+0x1f8>
 8003d8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d008      	beq.n	8003daa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b06      	cmp	r3, #6
 8003da2:	d002      	beq.n	8003daa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b07      	cmp	r3, #7
 8003da8:	d104      	bne.n	8003db4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	e011      	b.n	8003dd8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a03      	ldr	r2, [pc, #12]	@ (8003dc8 <HAL_ADC_IRQHandler+0x230>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d006      	beq.n	8003dcc <HAL_ADC_IRQHandler+0x234>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	e005      	b.n	8003dd0 <HAL_ADC_IRQHandler+0x238>
 8003dc4:	50000300 	.word	0x50000300
 8003dc8:	50000100 	.word	0x50000100
 8003dcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003dd0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d047      	beq.n	8003e6e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <HAL_ADC_IRQHandler+0x260>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03f      	beq.n	8003e6e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d13a      	bne.n	8003e6e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e02:	2b40      	cmp	r3, #64	@ 0x40
 8003e04:	d133      	bne.n	8003e6e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d12e      	bne.n	8003e6e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fc73 	bl	8003700 <LL_ADC_INJ_IsConversionOngoing>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11a      	bne.n	8003e56 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e2e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d112      	bne.n	8003e6e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e54:	e00b      	b.n	8003e6e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5a:	f043 0210 	orr.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fdfa 	bl	8004a68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2260      	movs	r2, #96	@ 0x60
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d011      	beq.n	8003eaa <HAL_ADC_IRQHandler+0x312>
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00c      	beq.n	8003eaa <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f89f 	bl	8003fe0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2280      	movs	r2, #128	@ 0x80
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d012      	beq.n	8003eda <HAL_ADC_IRQHandler+0x342>
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fde0 	bl	8004a90 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d012      	beq.n	8003f0a <HAL_ADC_IRQHandler+0x372>
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fdd2 	bl	8004aa4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d036      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x3ea>
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d031      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003f26:	2301      	movs	r3, #1
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f2a:	e014      	b.n	8003f56 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f32:	4825      	ldr	r0, [pc, #148]	@ (8003fc8 <HAL_ADC_IRQHandler+0x430>)
 8003f34:	f7ff fb3a 	bl	80035ac <LL_ADC_GetMultiDMATransfer>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f42:	e008      	b.n	8003f56 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003f52:	2301      	movs	r3, #1
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d10e      	bne.n	8003f7a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f60:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6c:	f043 0202 	orr.w	r2, r3, #2
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f83d 	bl	8003ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2210      	movs	r2, #16
 8003f80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d018      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x426>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d013      	beq.n	8003fbe <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa6:	f043 0208 	orr.w	r2, r3, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fd5f 	bl	8004a7c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003fbe:	bf00      	nop
 8003fc0:	3728      	adds	r7, #40	@ 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	50000300 	.word	0x50000300

08003fcc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b0b6      	sub	sp, #216	@ 0xd8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_ADC_ConfigChannel+0x22>
 8004026:	2302      	movs	r3, #2
 8004028:	e3c8      	b.n	80047bc <HAL_ADC_ConfigChannel+0x7b4>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fb4f 	bl	80036da <LL_ADC_REG_IsConversionOngoing>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	f040 83ad 	bne.w	800479e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	f7ff fa0e 	bl	8003472 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff fb3d 	bl	80036da <LL_ADC_REG_IsConversionOngoing>
 8004060:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fb49 	bl	8003700 <LL_ADC_INJ_IsConversionOngoing>
 800406e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004072:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 81d9 	bne.w	800442e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800407c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 81d4 	bne.w	800442e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800408e:	d10f      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2200      	movs	r2, #0
 800409a:	4619      	mov	r1, r3
 800409c:	f7ff fa28 	bl	80034f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff f9bc 	bl	8003426 <LL_ADC_SetSamplingTimeCommonConfig>
 80040ae:	e00e      	b.n	80040ce <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6819      	ldr	r1, [r3, #0]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	461a      	mov	r2, r3
 80040be:	f7ff fa17 	bl	80034f0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff f9ac 	bl	8003426 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	08db      	lsrs	r3, r3, #3
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d022      	beq.n	8004136 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6919      	ldr	r1, [r3, #16]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004100:	f7ff f906 	bl	8003310 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6919      	ldr	r1, [r3, #16]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	461a      	mov	r2, r3
 8004112:	f7ff f952 	bl	80033ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004122:	2b01      	cmp	r3, #1
 8004124:	d102      	bne.n	800412c <HAL_ADC_ConfigChannel+0x124>
 8004126:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800412a:	e000      	b.n	800412e <HAL_ADC_ConfigChannel+0x126>
 800412c:	2300      	movs	r3, #0
 800412e:	461a      	mov	r2, r3
 8004130:	f7ff f95e 	bl	80033f0 <LL_ADC_SetOffsetSaturation>
 8004134:	e17b      	b.n	800442e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff f90b 	bl	8003358 <LL_ADC_GetOffsetChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x15a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f900 	bl	8003358 <LL_ADC_GetOffsetChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	0e9b      	lsrs	r3, r3, #26
 800415c:	f003 021f 	and.w	r2, r3, #31
 8004160:	e01e      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x198>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff f8f5 	bl	8003358 <LL_ADC_GetOffsetChannel>
 800416e:	4603      	mov	r3, r0
 8004170:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004188:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e004      	b.n	800419e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004194:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x1b0>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0e9b      	lsrs	r3, r3, #26
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	e018      	b.n	80041ea <HAL_ADC_ConfigChannel+0x1e2>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80041cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80041d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80041dc:	2320      	movs	r3, #32
 80041de:	e004      	b.n	80041ea <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80041e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d106      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff f8c4 	bl	8003384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2101      	movs	r1, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff f8a8 	bl	8003358 <LL_ADC_GetOffsetChannel>
 8004208:	4603      	mov	r3, r0
 800420a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x220>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff f89d 	bl	8003358 <LL_ADC_GetOffsetChannel>
 800421e:	4603      	mov	r3, r0
 8004220:	0e9b      	lsrs	r3, r3, #26
 8004222:	f003 021f 	and.w	r2, r3, #31
 8004226:	e01e      	b.n	8004266 <HAL_ADC_ConfigChannel+0x25e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2101      	movs	r1, #1
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f892 	bl	8003358 <LL_ADC_GetOffsetChannel>
 8004234:	4603      	mov	r3, r0
 8004236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800424a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800424e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004256:	2320      	movs	r3, #32
 8004258:	e004      	b.n	8004264 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800425a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426e:	2b00      	cmp	r3, #0
 8004270:	d105      	bne.n	800427e <HAL_ADC_ConfigChannel+0x276>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	0e9b      	lsrs	r3, r3, #26
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	e018      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x2a8>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004292:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004296:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800429a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80042a2:	2320      	movs	r3, #32
 80042a4:	e004      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80042a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d106      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2101      	movs	r1, #1
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f861 	bl	8003384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff f845 	bl	8003358 <LL_ADC_GetOffsetChannel>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x2e6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2102      	movs	r1, #2
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff f83a 	bl	8003358 <LL_ADC_GetOffsetChannel>
 80042e4:	4603      	mov	r3, r0
 80042e6:	0e9b      	lsrs	r3, r3, #26
 80042e8:	f003 021f 	and.w	r2, r3, #31
 80042ec:	e01e      	b.n	800432c <HAL_ADC_ConfigChannel+0x324>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff f82f 	bl	8003358 <LL_ADC_GetOffsetChannel>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800430c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004310:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004314:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800431c:	2320      	movs	r3, #32
 800431e:	e004      	b.n	800432a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004320:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004324:	fab3 f383 	clz	r3, r3
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x33c>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	e016      	b.n	8004372 <HAL_ADC_ConfigChannel+0x36a>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004350:	fa93 f3a3 	rbit	r3, r3
 8004354:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004356:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004358:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800435c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004364:	2320      	movs	r3, #32
 8004366:	e004      	b.n	8004372 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004372:	429a      	cmp	r2, r3
 8004374:	d106      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	2102      	movs	r1, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff f800 	bl	8003384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2103      	movs	r1, #3
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe ffe4 	bl	8003358 <LL_ADC_GetOffsetChannel>
 8004390:	4603      	mov	r3, r0
 8004392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x3a8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2103      	movs	r1, #3
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe ffd9 	bl	8003358 <LL_ADC_GetOffsetChannel>
 80043a6:	4603      	mov	r3, r0
 80043a8:	0e9b      	lsrs	r3, r3, #26
 80043aa:	f003 021f 	and.w	r2, r3, #31
 80043ae:	e017      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x3d8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2103      	movs	r1, #3
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe ffce 	bl	8003358 <LL_ADC_GetOffsetChannel>
 80043bc:	4603      	mov	r3, r0
 80043be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80043c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043ca:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80043cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80043d2:	2320      	movs	r3, #32
 80043d4:	e003      	b.n	80043de <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80043d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043d8:	fab3 f383 	clz	r3, r3
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d105      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x3f0>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	0e9b      	lsrs	r3, r3, #26
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	e011      	b.n	800441c <HAL_ADC_ConfigChannel+0x414>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004406:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004408:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800440a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e003      	b.n	800441c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800441c:	429a      	cmp	r2, r3
 800441e:	d106      	bne.n	800442e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2200      	movs	r2, #0
 8004426:	2103      	movs	r1, #3
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe ffab 	bl	8003384 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff f92a 	bl	800368c <LL_ADC_IsEnabled>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 8140 	bne.w	80046c0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	461a      	mov	r2, r3
 800444e:	f7ff f87b 	bl	8003548 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	4a8f      	ldr	r2, [pc, #572]	@ (8004694 <HAL_ADC_ConfigChannel+0x68c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	f040 8131 	bne.w	80046c0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x47e>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	0e9b      	lsrs	r3, r3, #26
 8004474:	3301      	adds	r3, #1
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2b09      	cmp	r3, #9
 800447c:	bf94      	ite	ls
 800447e:	2301      	movls	r3, #1
 8004480:	2300      	movhi	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e019      	b.n	80044ba <HAL_ADC_ConfigChannel+0x4b2>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800448e:	fa93 f3a3 	rbit	r3, r3
 8004492:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004496:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004498:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800449e:	2320      	movs	r3, #32
 80044a0:	e003      	b.n	80044aa <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80044a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	3301      	adds	r3, #1
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	2b09      	cmp	r3, #9
 80044b2:	bf94      	ite	ls
 80044b4:	2301      	movls	r3, #1
 80044b6:	2300      	movhi	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d079      	beq.n	80045b2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d107      	bne.n	80044da <HAL_ADC_ConfigChannel+0x4d2>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	0e9b      	lsrs	r3, r3, #26
 80044d0:	3301      	adds	r3, #1
 80044d2:	069b      	lsls	r3, r3, #26
 80044d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044d8:	e015      	b.n	8004506 <HAL_ADC_ConfigChannel+0x4fe>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80044e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80044ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80044f2:	2320      	movs	r3, #32
 80044f4:	e003      	b.n	80044fe <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80044f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	3301      	adds	r3, #1
 8004500:	069b      	lsls	r3, r3, #26
 8004502:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x51e>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0e9b      	lsrs	r3, r3, #26
 8004518:	3301      	adds	r3, #1
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2101      	movs	r1, #1
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	e017      	b.n	8004556 <HAL_ADC_ConfigChannel+0x54e>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004536:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800453e:	2320      	movs	r3, #32
 8004540:	e003      	b.n	800454a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004544:	fab3 f383 	clz	r3, r3
 8004548:	b2db      	uxtb	r3, r3
 800454a:	3301      	adds	r3, #1
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	2101      	movs	r1, #1
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	ea42 0103 	orr.w	r1, r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_ADC_ConfigChannel+0x574>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	0e9b      	lsrs	r3, r3, #26
 800456c:	3301      	adds	r3, #1
 800456e:	f003 021f 	and.w	r2, r3, #31
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	051b      	lsls	r3, r3, #20
 800457a:	e018      	b.n	80045ae <HAL_ADC_ConfigChannel+0x5a6>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800458a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800458e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004594:	2320      	movs	r3, #32
 8004596:	e003      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	3301      	adds	r3, #1
 80045a2:	f003 021f 	and.w	r2, r3, #31
 80045a6:	4613      	mov	r3, r2
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045ae:	430b      	orrs	r3, r1
 80045b0:	e081      	b.n	80046b6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d107      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x5c6>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0e9b      	lsrs	r3, r3, #26
 80045c4:	3301      	adds	r3, #1
 80045c6:	069b      	lsls	r3, r3, #26
 80045c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045cc:	e015      	b.n	80045fa <HAL_ADC_ConfigChannel+0x5f2>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80045dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045de:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80045e6:	2320      	movs	r3, #32
 80045e8:	e003      	b.n	80045f2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	fab3 f383 	clz	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	3301      	adds	r3, #1
 80045f4:	069b      	lsls	r3, r3, #26
 80045f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_ADC_ConfigChannel+0x612>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0e9b      	lsrs	r3, r3, #26
 800460c:	3301      	adds	r3, #1
 800460e:	f003 031f 	and.w	r3, r3, #31
 8004612:	2101      	movs	r1, #1
 8004614:	fa01 f303 	lsl.w	r3, r1, r3
 8004618:	e017      	b.n	800464a <HAL_ADC_ConfigChannel+0x642>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	61fb      	str	r3, [r7, #28]
  return result;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004632:	2320      	movs	r3, #32
 8004634:	e003      	b.n	800463e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	fab3 f383 	clz	r3, r3
 800463c:	b2db      	uxtb	r3, r3
 800463e:	3301      	adds	r3, #1
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2101      	movs	r1, #1
 8004646:	fa01 f303 	lsl.w	r3, r1, r3
 800464a:	ea42 0103 	orr.w	r1, r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10d      	bne.n	8004676 <HAL_ADC_ConfigChannel+0x66e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	0e9b      	lsrs	r3, r3, #26
 8004660:	3301      	adds	r3, #1
 8004662:	f003 021f 	and.w	r2, r3, #31
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	3b1e      	subs	r3, #30
 800466e:	051b      	lsls	r3, r3, #20
 8004670:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004674:	e01e      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x6ac>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa93 f3a3 	rbit	r3, r3
 8004682:	613b      	str	r3, [r7, #16]
  return result;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800468e:	2320      	movs	r3, #32
 8004690:	e006      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x698>
 8004692:	bf00      	nop
 8004694:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3301      	adds	r3, #1
 80046a2:	f003 021f 	and.w	r2, r3, #31
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	3b1e      	subs	r3, #30
 80046ae:	051b      	lsls	r3, r3, #20
 80046b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046ba:	4619      	mov	r1, r3
 80046bc:	f7fe ff18 	bl	80034f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b3f      	ldr	r3, [pc, #252]	@ (80047c4 <HAL_ADC_ConfigChannel+0x7bc>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d071      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046cc:	483e      	ldr	r0, [pc, #248]	@ (80047c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80046ce:	f7fe fe11 	bl	80032f4 <LL_ADC_GetCommonPathInternalCh>
 80046d2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3c      	ldr	r2, [pc, #240]	@ (80047cc <HAL_ADC_ConfigChannel+0x7c4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_ADC_ConfigChannel+0x6e2>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a3a      	ldr	r2, [pc, #232]	@ (80047d0 <HAL_ADC_ConfigChannel+0x7c8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d127      	bne.n	800473a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d121      	bne.n	800473a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046fe:	d157      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004704:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004708:	4619      	mov	r1, r3
 800470a:	482f      	ldr	r0, [pc, #188]	@ (80047c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800470c:	f7fe fddf 	bl	80032ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004710:	4b30      	ldr	r3, [pc, #192]	@ (80047d4 <HAL_ADC_ConfigChannel+0x7cc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	4a30      	ldr	r2, [pc, #192]	@ (80047d8 <HAL_ADC_ConfigChannel+0x7d0>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	099b      	lsrs	r3, r3, #6
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	4613      	mov	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800472a:	e002      	b.n	8004732 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3b01      	subs	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f9      	bne.n	800472c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004738:	e03a      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a27      	ldr	r2, [pc, #156]	@ (80047dc <HAL_ADC_ConfigChannel+0x7d4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d113      	bne.n	800476c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10d      	bne.n	800476c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d02a      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800475a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800475e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004762:	4619      	mov	r1, r3
 8004764:	4818      	ldr	r0, [pc, #96]	@ (80047c8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004766:	f7fe fdb2 	bl	80032ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800476a:	e021      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1c      	ldr	r2, [pc, #112]	@ (80047e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d11c      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800477a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d116      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a16      	ldr	r2, [pc, #88]	@ (80047e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d011      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800478c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004790:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004794:	4619      	mov	r1, r3
 8004796:	480c      	ldr	r0, [pc, #48]	@ (80047c8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004798:	f7fe fd99 	bl	80032ce <LL_ADC_SetCommonPathInternalCh>
 800479c:	e008      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047bc:	4618      	mov	r0, r3
 80047be:	37d8      	adds	r7, #216	@ 0xd8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	80080000 	.word	0x80080000
 80047c8:	50000300 	.word	0x50000300
 80047cc:	c3210000 	.word	0xc3210000
 80047d0:	90c00010 	.word	0x90c00010
 80047d4:	20000008 	.word	0x20000008
 80047d8:	053e2d63 	.word	0x053e2d63
 80047dc:	c7520000 	.word	0xc7520000
 80047e0:	50000100 	.word	0x50000100
 80047e4:	cb840000 	.word	0xcb840000

080047e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe ff47 	bl	800368c <LL_ADC_IsEnabled>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d169      	bne.n	80048d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	4b36      	ldr	r3, [pc, #216]	@ (80048e4 <ADC_Enable+0xfc>)
 800480c:	4013      	ands	r3, r2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00d      	beq.n	800482e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004816:	f043 0210 	orr.w	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004822:	f043 0201 	orr.w	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e055      	b.n	80048da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe ff16 	bl	8003664 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004838:	482b      	ldr	r0, [pc, #172]	@ (80048e8 <ADC_Enable+0x100>)
 800483a:	f7fe fd5b 	bl	80032f4 <LL_ADC_GetCommonPathInternalCh>
 800483e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004840:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004848:	4b28      	ldr	r3, [pc, #160]	@ (80048ec <ADC_Enable+0x104>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	4a28      	ldr	r2, [pc, #160]	@ (80048f0 <ADC_Enable+0x108>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	4613      	mov	r3, r2
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004862:	e002      	b.n	800486a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	3b01      	subs	r3, #1
 8004868:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f9      	bne.n	8004864 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004870:	f7fe fcec 	bl	800324c <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004876:	e028      	b.n	80048ca <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe ff05 	bl	800368c <LL_ADC_IsEnabled>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d104      	bne.n	8004892 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe fee9 	bl	8003664 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004892:	f7fe fcdb 	bl	800324c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d914      	bls.n	80048ca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d00d      	beq.n	80048ca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e007      	b.n	80048da <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d1cf      	bne.n	8004878 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	8000003f 	.word	0x8000003f
 80048e8:	50000300 	.word	0x50000300
 80048ec:	20000008 	.word	0x20000008
 80048f0:	053e2d63 	.word	0x053e2d63

080048f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004906:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800490a:	2b00      	cmp	r3, #0
 800490c:	d14b      	bne.n	80049a6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004912:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d021      	beq.n	800496c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe fd8d 	bl	800344c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d032      	beq.n	800499e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d12b      	bne.n	800499e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d11f      	bne.n	800499e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	65da      	str	r2, [r3, #92]	@ 0x5c
 800496a:	e018      	b.n	800499e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d111      	bne.n	800499e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004996:	f043 0201 	orr.w	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7fc fb66 	bl	8001070 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80049a4:	e00e      	b.n	80049c4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7ff fb1e 	bl	8003ff4 <HAL_ADC_ErrorCallback>
}
 80049b8:	e004      	b.n	80049c4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff faf6 	bl	8003fcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a06:	f043 0204 	orr.w	r2, r3, #4
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7ff faf0 	bl	8003ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <LL_ADC_IsEnabled>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <LL_ADC_IsEnabled+0x18>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <LL_ADC_IsEnabled+0x1a>
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_ADC_REG_IsConversionOngoing>:
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d101      	bne.n	8004a5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b0a1      	sub	sp, #132	@ 0x84
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e08b      	b.n	8004c02 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004af2:	2300      	movs	r3, #0
 8004af4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004af6:	2300      	movs	r3, #0
 8004af8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b02:	d102      	bne.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b04:	4b41      	ldr	r3, [pc, #260]	@ (8004c0c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	e001      	b.n	8004b0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e06a      	b.n	8004c02 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff87 	bl	8004a42 <LL_ADC_REG_IsConversionOngoing>
 8004b34:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff ff81 	bl	8004a42 <LL_ADC_REG_IsConversionOngoing>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d14c      	bne.n	8004be0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d149      	bne.n	8004be0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b4c:	4b30      	ldr	r3, [pc, #192]	@ (8004c10 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004b4e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d028      	beq.n	8004baa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b6a:	035b      	lsls	r3, r3, #13
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b78:	f7ff ff50 	bl	8004a1c <LL_ADC_IsEnabled>
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	4823      	ldr	r0, [pc, #140]	@ (8004c0c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004b80:	f7ff ff4c 	bl	8004a1c <LL_ADC_IsEnabled>
 8004b84:	4603      	mov	r3, r0
 8004b86:	4323      	orrs	r3, r4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d133      	bne.n	8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b94:	f023 030f 	bic.w	r3, r3, #15
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	6811      	ldr	r1, [r2, #0]
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	6892      	ldr	r2, [r2, #8]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ba6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ba8:	e024      	b.n	8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bb6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004bba:	f7ff ff2f 	bl	8004a1c <LL_ADC_IsEnabled>
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4812      	ldr	r0, [pc, #72]	@ (8004c0c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004bc2:	f7ff ff2b 	bl	8004a1c <LL_ADC_IsEnabled>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4323      	orrs	r3, r4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d112      	bne.n	8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004bd6:	f023 030f 	bic.w	r3, r3, #15
 8004bda:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004bdc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bde:	e009      	b.n	8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be4:	f043 0220 	orr.w	r2, r3, #32
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004bf2:	e000      	b.n	8004bf6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004bfe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3784      	adds	r7, #132	@ 0x84
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd90      	pop	{r4, r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	50000100 	.word	0x50000100
 8004c10:	50000300 	.word	0x50000300

08004c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c24:	4b0c      	ldr	r3, [pc, #48]	@ (8004c58 <__NVIC_SetPriorityGrouping+0x44>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c30:	4013      	ands	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c46:	4a04      	ldr	r2, [pc, #16]	@ (8004c58 <__NVIC_SetPriorityGrouping+0x44>)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	60d3      	str	r3, [r2, #12]
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c60:	4b04      	ldr	r3, [pc, #16]	@ (8004c74 <__NVIC_GetPriorityGrouping+0x18>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	f003 0307 	and.w	r3, r3, #7
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	db0b      	blt.n	8004ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	f003 021f 	and.w	r2, r3, #31
 8004c90:	4907      	ldr	r1, [pc, #28]	@ (8004cb0 <__NVIC_EnableIRQ+0x38>)
 8004c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	2001      	movs	r0, #1
 8004c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000e100 	.word	0xe000e100

08004cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	6039      	str	r1, [r7, #0]
 8004cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	db0a      	blt.n	8004cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	490c      	ldr	r1, [pc, #48]	@ (8004d00 <__NVIC_SetPriority+0x4c>)
 8004cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd2:	0112      	lsls	r2, r2, #4
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cdc:	e00a      	b.n	8004cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	4908      	ldr	r1, [pc, #32]	@ (8004d04 <__NVIC_SetPriority+0x50>)
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	3b04      	subs	r3, #4
 8004cec:	0112      	lsls	r2, r2, #4
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	761a      	strb	r2, [r3, #24]
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	e000e100 	.word	0xe000e100
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b089      	sub	sp, #36	@ 0x24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f1c3 0307 	rsb	r3, r3, #7
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	bf28      	it	cs
 8004d26:	2304      	movcs	r3, #4
 8004d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2b06      	cmp	r3, #6
 8004d30:	d902      	bls.n	8004d38 <NVIC_EncodePriority+0x30>
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3b03      	subs	r3, #3
 8004d36:	e000      	b.n	8004d3a <NVIC_EncodePriority+0x32>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43da      	mvns	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d50:	f04f 31ff 	mov.w	r1, #4294967295
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	43d9      	mvns	r1, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d60:	4313      	orrs	r3, r2
         );
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3724      	adds	r7, #36	@ 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ff4c 	bl	8004c14 <__NVIC_SetPriorityGrouping>
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d92:	f7ff ff63 	bl	8004c5c <__NVIC_GetPriorityGrouping>
 8004d96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	6978      	ldr	r0, [r7, #20]
 8004d9e:	f7ff ffb3 	bl	8004d08 <NVIC_EncodePriority>
 8004da2:	4602      	mov	r2, r0
 8004da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff82 	bl	8004cb4 <__NVIC_SetPriority>
}
 8004db0:	bf00      	nop
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff ff56 	bl	8004c78 <__NVIC_EnableIRQ>
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e08d      	b.n	8004f02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	4b47      	ldr	r3, [pc, #284]	@ (8004f0c <HAL_DMA_Init+0x138>)
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d80f      	bhi.n	8004e12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	4b45      	ldr	r3, [pc, #276]	@ (8004f10 <HAL_DMA_Init+0x13c>)
 8004dfa:	4413      	add	r3, r2
 8004dfc:	4a45      	ldr	r2, [pc, #276]	@ (8004f14 <HAL_DMA_Init+0x140>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	009a      	lsls	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a42      	ldr	r2, [pc, #264]	@ (8004f18 <HAL_DMA_Init+0x144>)
 8004e0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e10:	e00e      	b.n	8004e30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b40      	ldr	r3, [pc, #256]	@ (8004f1c <HAL_DMA_Init+0x148>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f14 <HAL_DMA_Init+0x140>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	009a      	lsls	r2, r3, #2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f20 <HAL_DMA_Init+0x14c>)
 8004e2e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa82 	bl	800538c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e90:	d102      	bne.n	8004e98 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004eac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d010      	beq.n	8004ed8 <HAL_DMA_Init+0x104>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d80c      	bhi.n	8004ed8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 faa2 	bl	8005408 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e008      	b.n	8004eea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40020407 	.word	0x40020407
 8004f10:	bffdfff8 	.word	0xbffdfff8
 8004f14:	cccccccd 	.word	0xcccccccd
 8004f18:	40020000 	.word	0x40020000
 8004f1c:	bffdfbf8 	.word	0xbffdfbf8
 8004f20:	40020400 	.word	0x40020400

08004f24 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_DMA_Start_IT+0x20>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e066      	b.n	8005012 <HAL_DMA_Start_IT+0xee>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d155      	bne.n	8005004 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0201 	bic.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f9c7 	bl	8005310 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d008      	beq.n	8004f9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 020e 	orr.w	r2, r2, #14
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e00f      	b.n	8004fbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0204 	bic.w	r2, r2, #4
 8004faa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 020a 	orr.w	r2, r2, #10
 8004fba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fd8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ff0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0201 	orr.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e005      	b.n	8005010 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800500c:	2302      	movs	r3, #2
 800500e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005010:	7dfb      	ldrb	r3, [r7, #23]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d005      	beq.n	800503e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2204      	movs	r2, #4
 8005036:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
 800503c:	e037      	b.n	80050ae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 020e 	bic.w	r2, r2, #14
 800504c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800505c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005072:	f003 021f 	and.w	r2, r3, #31
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	2101      	movs	r1, #1
 800507c:	fa01 f202 	lsl.w	r2, r1, r2
 8005080:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800508a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00c      	beq.n	80050ae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050a2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80050ac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d00d      	beq.n	8005100 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2204      	movs	r2, #4
 80050e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
 80050fe:	e047      	b.n	8005190 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 020e 	bic.w	r2, r2, #14
 800510e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800512a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800512e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005134:	f003 021f 	and.w	r2, r3, #31
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513c:	2101      	movs	r1, #1
 800513e:	fa01 f202 	lsl.w	r2, r1, r2
 8005142:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800514c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00c      	beq.n	8005170 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005164:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800516e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
    }
  }
  return status;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	2204      	movs	r2, #4
 80051bc:	409a      	lsls	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d026      	beq.n	8005214 <HAL_DMA_IRQHandler+0x7a>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d021      	beq.n	8005214 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d107      	bne.n	80051ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0204 	bic.w	r2, r2, #4
 80051ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	f003 021f 	and.w	r2, r3, #31
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	2104      	movs	r1, #4
 80051fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005200:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	2b00      	cmp	r3, #0
 8005208:	d071      	beq.n	80052ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005212:	e06c      	b.n	80052ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	2202      	movs	r2, #2
 800521e:	409a      	lsls	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d02e      	beq.n	8005286 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d029      	beq.n	8005286 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 020a 	bic.w	r2, r2, #10
 800524e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525c:	f003 021f 	and.w	r2, r3, #31
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	2102      	movs	r1, #2
 8005266:	fa01 f202 	lsl.w	r2, r1, r2
 800526a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d038      	beq.n	80052ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005284:	e033      	b.n	80052ee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	2208      	movs	r2, #8
 8005290:	409a      	lsls	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4013      	ands	r3, r2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d02a      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d025      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 020e 	bic.w	r2, r2, #14
 80052b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b8:	f003 021f 	and.w	r2, r3, #31
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	2101      	movs	r1, #1
 80052c2:	fa01 f202 	lsl.w	r2, r1, r2
 80052c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
}
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005326:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005338:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533e:	f003 021f 	and.w	r2, r3, #31
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	2101      	movs	r1, #1
 8005348:	fa01 f202 	lsl.w	r2, r1, r2
 800534c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b10      	cmp	r3, #16
 800535c:	d108      	bne.n	8005370 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800536e:	e007      	b.n	8005380 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	60da      	str	r2, [r3, #12]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	4b16      	ldr	r3, [pc, #88]	@ (80053f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800539c:	429a      	cmp	r2, r3
 800539e:	d802      	bhi.n	80053a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80053a0:	4b15      	ldr	r3, [pc, #84]	@ (80053f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e001      	b.n	80053aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80053a6:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80053a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	3b08      	subs	r3, #8
 80053b6:	4a12      	ldr	r2, [pc, #72]	@ (8005400 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c4:	089b      	lsrs	r3, r3, #2
 80053c6:	009a      	lsls	r2, r3, #2
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4413      	add	r3, r2
 80053cc:	461a      	mov	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005404 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80053d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	2201      	movs	r2, #1
 80053e0:	409a      	lsls	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80053e6:	bf00      	nop
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40020407 	.word	0x40020407
 80053f8:	40020800 	.word	0x40020800
 80053fc:	40020820 	.word	0x40020820
 8005400:	cccccccd 	.word	0xcccccccd
 8005404:	40020880 	.word	0x40020880

08005408 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4b0b      	ldr	r3, [pc, #44]	@ (8005448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800541c:	4413      	add	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	461a      	mov	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a08      	ldr	r2, [pc, #32]	@ (800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800542a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3b01      	subs	r3, #1
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	2201      	movs	r2, #1
 8005436:	409a      	lsls	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	1000823f 	.word	0x1000823f
 800544c:	40020940 	.word	0x40020940

08005450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800545e:	e15a      	b.n	8005716 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	2101      	movs	r1, #1
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	fa01 f303 	lsl.w	r3, r1, r3
 800546c:	4013      	ands	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 814c 	beq.w	8005710 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	2b01      	cmp	r3, #1
 8005482:	d005      	beq.n	8005490 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800548c:	2b02      	cmp	r3, #2
 800548e:	d130      	bne.n	80054f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	2203      	movs	r2, #3
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4013      	ands	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054c6:	2201      	movs	r2, #1
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43db      	mvns	r3, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4013      	ands	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	f003 0201 	and.w	r2, r3, #1
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d017      	beq.n	800552e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	2203      	movs	r2, #3
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4013      	ands	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d123      	bne.n	8005582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	08da      	lsrs	r2, r3, #3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3208      	adds	r2, #8
 8005542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	220f      	movs	r2, #15
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	08da      	lsrs	r2, r3, #3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3208      	adds	r2, #8
 800557c:	6939      	ldr	r1, [r7, #16]
 800557e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	2203      	movs	r2, #3
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4013      	ands	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 0203 	and.w	r2, r3, #3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80a6 	beq.w	8005710 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005734 <HAL_GPIO_Init+0x2e4>)
 80055c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005734 <HAL_GPIO_Init+0x2e4>)
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80055d0:	4b58      	ldr	r3, [pc, #352]	@ (8005734 <HAL_GPIO_Init+0x2e4>)
 80055d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055dc:	4a56      	ldr	r2, [pc, #344]	@ (8005738 <HAL_GPIO_Init+0x2e8>)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	089b      	lsrs	r3, r3, #2
 80055e2:	3302      	adds	r3, #2
 80055e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	220f      	movs	r2, #15
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	43db      	mvns	r3, r3
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4013      	ands	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005606:	d01f      	beq.n	8005648 <HAL_GPIO_Init+0x1f8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a4c      	ldr	r2, [pc, #304]	@ (800573c <HAL_GPIO_Init+0x2ec>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d019      	beq.n	8005644 <HAL_GPIO_Init+0x1f4>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a4b      	ldr	r2, [pc, #300]	@ (8005740 <HAL_GPIO_Init+0x2f0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <HAL_GPIO_Init+0x1f0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a4a      	ldr	r2, [pc, #296]	@ (8005744 <HAL_GPIO_Init+0x2f4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00d      	beq.n	800563c <HAL_GPIO_Init+0x1ec>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a49      	ldr	r2, [pc, #292]	@ (8005748 <HAL_GPIO_Init+0x2f8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d007      	beq.n	8005638 <HAL_GPIO_Init+0x1e8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a48      	ldr	r2, [pc, #288]	@ (800574c <HAL_GPIO_Init+0x2fc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d101      	bne.n	8005634 <HAL_GPIO_Init+0x1e4>
 8005630:	2305      	movs	r3, #5
 8005632:	e00a      	b.n	800564a <HAL_GPIO_Init+0x1fa>
 8005634:	2306      	movs	r3, #6
 8005636:	e008      	b.n	800564a <HAL_GPIO_Init+0x1fa>
 8005638:	2304      	movs	r3, #4
 800563a:	e006      	b.n	800564a <HAL_GPIO_Init+0x1fa>
 800563c:	2303      	movs	r3, #3
 800563e:	e004      	b.n	800564a <HAL_GPIO_Init+0x1fa>
 8005640:	2302      	movs	r3, #2
 8005642:	e002      	b.n	800564a <HAL_GPIO_Init+0x1fa>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <HAL_GPIO_Init+0x1fa>
 8005648:	2300      	movs	r3, #0
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	f002 0203 	and.w	r2, r2, #3
 8005650:	0092      	lsls	r2, r2, #2
 8005652:	4093      	lsls	r3, r2
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800565a:	4937      	ldr	r1, [pc, #220]	@ (8005738 <HAL_GPIO_Init+0x2e8>)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	089b      	lsrs	r3, r3, #2
 8005660:	3302      	adds	r3, #2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005668:	4b39      	ldr	r3, [pc, #228]	@ (8005750 <HAL_GPIO_Init+0x300>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	43db      	mvns	r3, r3
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4013      	ands	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800568c:	4a30      	ldr	r2, [pc, #192]	@ (8005750 <HAL_GPIO_Init+0x300>)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005692:	4b2f      	ldr	r3, [pc, #188]	@ (8005750 <HAL_GPIO_Init+0x300>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	43db      	mvns	r3, r3
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4013      	ands	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056b6:	4a26      	ldr	r2, [pc, #152]	@ (8005750 <HAL_GPIO_Init+0x300>)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80056bc:	4b24      	ldr	r3, [pc, #144]	@ (8005750 <HAL_GPIO_Init+0x300>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005750 <HAL_GPIO_Init+0x300>)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005750 <HAL_GPIO_Init+0x300>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	43db      	mvns	r3, r3
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4013      	ands	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800570a:	4a11      	ldr	r2, [pc, #68]	@ (8005750 <HAL_GPIO_Init+0x300>)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	3301      	adds	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	f47f ae9d 	bne.w	8005460 <HAL_GPIO_Init+0x10>
  }
}
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40021000 	.word	0x40021000
 8005738:	40010000 	.word	0x40010000
 800573c:	48000400 	.word	0x48000400
 8005740:	48000800 	.word	0x48000800
 8005744:	48000c00 	.word	0x48000c00
 8005748:	48001000 	.word	0x48001000
 800574c:	48001400 	.word	0x48001400
 8005750:	40010400 	.word	0x40010400

08005754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
 8005760:	4613      	mov	r3, r2
 8005762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005764:	787b      	ldrb	r3, [r7, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005770:	e002      	b.n	8005778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005772:	887a      	ldrh	r2, [r7, #2]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800578e:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	4013      	ands	r3, r2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d006      	beq.n	80057a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800579a:	4a05      	ldr	r2, [pc, #20]	@ (80057b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f806 	bl	80057b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80057a8:	bf00      	nop
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40010400 	.word	0x40010400

080057b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e08d      	b.n	80058f8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d106      	bne.n	80057f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7fc f943 	bl	8001a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2224      	movs	r2, #36	@ 0x24
 80057fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800581a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800582a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d107      	bne.n	8005844 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	e006      	b.n	8005852 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005850:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d108      	bne.n	800586c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	e007      	b.n	800587c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800587a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800588a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800588e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800589e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69d9      	ldr	r1, [r3, #28]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1a      	ldr	r2, [r3, #32]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	461a      	mov	r2, r3
 800590c:	460b      	mov	r3, r1
 800590e:	817b      	strh	r3, [r7, #10]
 8005910:	4613      	mov	r3, r2
 8005912:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b20      	cmp	r3, #32
 800591e:	f040 80fd 	bne.w	8005b1c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_I2C_Master_Transmit+0x30>
 800592c:	2302      	movs	r3, #2
 800592e:	e0f6      	b.n	8005b1e <HAL_I2C_Master_Transmit+0x21e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005938:	f7fd fc88 	bl	800324c <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	2319      	movs	r3, #25
 8005944:	2201      	movs	r2, #1
 8005946:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f914 	bl	8005b78 <I2C_WaitOnFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e0e1      	b.n	8005b1e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2221      	movs	r2, #33	@ 0x21
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2210      	movs	r2, #16
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	893a      	ldrh	r2, [r7, #8]
 800597a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	2bff      	cmp	r3, #255	@ 0xff
 800598a:	d906      	bls.n	800599a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	22ff      	movs	r2, #255	@ 0xff
 8005990:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005992:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	e007      	b.n	80059aa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80059a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d024      	beq.n	80059fc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	3301      	adds	r3, #1
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	8979      	ldrh	r1, [r7, #10]
 80059ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005b28 <HAL_I2C_Master_Transmit+0x228>)
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fa83 	bl	8005f00 <I2C_TransferConfig>
 80059fa:	e066      	b.n	8005aca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	8979      	ldrh	r1, [r7, #10]
 8005a04:	4b48      	ldr	r3, [pc, #288]	@ (8005b28 <HAL_I2C_Master_Transmit+0x228>)
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fa78 	bl	8005f00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005a10:	e05b      	b.n	8005aca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	6a39      	ldr	r1, [r7, #32]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f907 	bl	8005c2a <I2C_WaitOnTXISFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e07b      	b.n	8005b1e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	781a      	ldrb	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d034      	beq.n	8005aca <HAL_I2C_Master_Transmit+0x1ca>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d130      	bne.n	8005aca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2180      	movs	r1, #128	@ 0x80
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f880 	bl	8005b78 <I2C_WaitOnFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e04d      	b.n	8005b1e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2bff      	cmp	r3, #255	@ 0xff
 8005a8a:	d90e      	bls.n	8005aaa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	22ff      	movs	r2, #255	@ 0xff
 8005a90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	8979      	ldrh	r1, [r7, #10]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fa2c 	bl	8005f00 <I2C_TransferConfig>
 8005aa8:	e00f      	b.n	8005aca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	8979      	ldrh	r1, [r7, #10]
 8005abc:	2300      	movs	r3, #0
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fa1b 	bl	8005f00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d19e      	bne.n	8005a12 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	6a39      	ldr	r1, [r7, #32]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f8ed 	bl	8005cb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e01a      	b.n	8005b1e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2220      	movs	r2, #32
 8005aee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6859      	ldr	r1, [r3, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b0c      	ldr	r3, [pc, #48]	@ (8005b2c <HAL_I2C_Master_Transmit+0x22c>)
 8005afc:	400b      	ands	r3, r1
 8005afe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e000      	b.n	8005b1e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005b1c:	2302      	movs	r3, #2
  }
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	80002000 	.word	0x80002000
 8005b2c:	fe00e800 	.word	0xfe00e800

08005b30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d103      	bne.n	8005b4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d007      	beq.n	8005b6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	619a      	str	r2, [r3, #24]
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b88:	e03b      	b.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f8d6 	bl	8005d40 <I2C_IsErrorOccurred>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e041      	b.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d02d      	beq.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba6:	f7fd fb51 	bl	800324c <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d302      	bcc.n	8005bbc <I2C_WaitOnFlagUntilTimeout+0x44>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d122      	bne.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	bf0c      	ite	eq
 8005bcc:	2301      	moveq	r3, #1
 8005bce:	2300      	movne	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	79fb      	ldrb	r3, [r7, #7]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d113      	bne.n	8005c02 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e00f      	b.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d0b4      	beq.n	8005b8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c36:	e033      	b.n	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f87f 	bl	8005d40 <I2C_IsErrorOccurred>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e031      	b.n	8005cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d025      	beq.n	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c54:	f7fd fafa 	bl	800324c <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d302      	bcc.n	8005c6a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d11a      	bne.n	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d013      	beq.n	8005ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7c:	f043 0220 	orr.w	r2, r3, #32
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e007      	b.n	8005cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d1c4      	bne.n	8005c38 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cc4:	e02f      	b.n	8005d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f838 	bl	8005d40 <I2C_IsErrorOccurred>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e02d      	b.n	8005d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cda:	f7fd fab7 	bl	800324c <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11a      	bne.n	8005d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d013      	beq.n	8005d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d02:	f043 0220 	orr.w	r2, r3, #32
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e007      	b.n	8005d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d1c8      	bne.n	8005cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	@ 0x28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d068      	beq.n	8005e3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2210      	movs	r2, #16
 8005d72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d74:	e049      	b.n	8005e0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d045      	beq.n	8005e0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d7e:	f7fd fa65 	bl	800324c <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <I2C_IsErrorOccurred+0x54>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d13a      	bne.n	8005e0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005da6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db6:	d121      	bne.n	8005dfc <I2C_IsErrorOccurred+0xbc>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dbe:	d01d      	beq.n	8005dfc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005dc0:	7cfb      	ldrb	r3, [r7, #19]
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d01a      	beq.n	8005dfc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005dd6:	f7fd fa39 	bl	800324c <HAL_GetTick>
 8005dda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ddc:	e00e      	b.n	8005dfc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005dde:	f7fd fa35 	bl	800324c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b19      	cmp	r3, #25
 8005dea:	d907      	bls.n	8005dfc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	f043 0320 	orr.w	r3, r3, #32
 8005df2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005dfa:	e006      	b.n	8005e0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d1e9      	bne.n	8005dde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d003      	beq.n	8005e20 <I2C_IsErrorOccurred+0xe0>
 8005e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0aa      	beq.n	8005d76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	f043 0304 	orr.w	r3, r3, #4
 8005e36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00b      	beq.n	8005e68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	f043 0308 	orr.w	r3, r3, #8
 8005e78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	f043 0302 	orr.w	r3, r3, #2
 8005e9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ea4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01c      	beq.n	8005eee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff fe3b 	bl	8005b30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6859      	ldr	r1, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <I2C_IsErrorOccurred+0x1bc>)
 8005ec6:	400b      	ands	r3, r1
 8005ec8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3728      	adds	r7, #40	@ 0x28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	fe00e800 	.word	0xfe00e800

08005f00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	817b      	strh	r3, [r7, #10]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f12:	897b      	ldrh	r3, [r7, #10]
 8005f14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f18:	7a7b      	ldrb	r3, [r7, #9]
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	0d5b      	lsrs	r3, r3, #21
 8005f3a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005f3e:	4b08      	ldr	r3, [pc, #32]	@ (8005f60 <I2C_TransferConfig+0x60>)
 8005f40:	430b      	orrs	r3, r1
 8005f42:	43db      	mvns	r3, r3
 8005f44:	ea02 0103 	and.w	r1, r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	03ff63ff 	.word	0x03ff63ff

08005f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d138      	bne.n	8005fec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e032      	b.n	8005fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2224      	movs	r2, #36	@ 0x24
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005fb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b20      	cmp	r3, #32
 800600e:	d139      	bne.n	8006084 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800601a:	2302      	movs	r3, #2
 800601c:	e033      	b.n	8006086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2224      	movs	r2, #36	@ 0x24
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0201 	bic.w	r2, r2, #1
 800603c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800604c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	e000      	b.n	8006086 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006084:	2302      	movs	r3, #2
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d141      	bne.n	8006126 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80060a2:	4b4b      	ldr	r3, [pc, #300]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ae:	d131      	bne.n	8006114 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060b0:	4b47      	ldr	r3, [pc, #284]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b6:	4a46      	ldr	r2, [pc, #280]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060c0:	4b43      	ldr	r3, [pc, #268]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060c8:	4a41      	ldr	r2, [pc, #260]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060d0:	4b40      	ldr	r3, [pc, #256]	@ (80061d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2232      	movs	r2, #50	@ 0x32
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	4a3f      	ldr	r2, [pc, #252]	@ (80061d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	0c9b      	lsrs	r3, r3, #18
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060e6:	e002      	b.n	80060ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80060ee:	4b38      	ldr	r3, [pc, #224]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060fa:	d102      	bne.n	8006102 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f2      	bne.n	80060e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006102:	4b33      	ldr	r3, [pc, #204]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800610a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800610e:	d158      	bne.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e057      	b.n	80061c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006114:	4b2e      	ldr	r3, [pc, #184]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800611a:	4a2d      	ldr	r2, [pc, #180]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800611c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006120:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006124:	e04d      	b.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800612c:	d141      	bne.n	80061b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800612e:	4b28      	ldr	r3, [pc, #160]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800613a:	d131      	bne.n	80061a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800613c:	4b24      	ldr	r3, [pc, #144]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800613e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006142:	4a23      	ldr	r2, [pc, #140]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006148:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800614c:	4b20      	ldr	r3, [pc, #128]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006154:	4a1e      	ldr	r2, [pc, #120]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800615a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800615c:	4b1d      	ldr	r3, [pc, #116]	@ (80061d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2232      	movs	r2, #50	@ 0x32
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	4a1c      	ldr	r2, [pc, #112]	@ (80061d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006168:	fba2 2303 	umull	r2, r3, r2, r3
 800616c:	0c9b      	lsrs	r3, r3, #18
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006172:	e002      	b.n	800617a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3b01      	subs	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800617a:	4b15      	ldr	r3, [pc, #84]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006186:	d102      	bne.n	800618e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f2      	bne.n	8006174 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800618e:	4b10      	ldr	r3, [pc, #64]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800619a:	d112      	bne.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e011      	b.n	80061c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061a0:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061a6:	4a0a      	ldr	r2, [pc, #40]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061b0:	e007      	b.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061b2:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061ba:	4a05      	ldr	r2, [pc, #20]	@ (80061d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40007000 	.word	0x40007000
 80061d4:	20000008 	.word	0x20000008
 80061d8:	431bde83 	.word	0x431bde83

080061dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80061e0:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	4a04      	ldr	r2, [pc, #16]	@ (80061f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80061e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061ea:	6093      	str	r3, [r2, #8]
}
 80061ec:	bf00      	nop
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40007000 	.word	0x40007000

080061fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e2fe      	b.n	800680c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d075      	beq.n	8006306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800621a:	4b97      	ldr	r3, [pc, #604]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 030c 	and.w	r3, r3, #12
 8006222:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006224:	4b94      	ldr	r3, [pc, #592]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	2b0c      	cmp	r3, #12
 8006232:	d102      	bne.n	800623a <HAL_RCC_OscConfig+0x3e>
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d002      	beq.n	8006240 <HAL_RCC_OscConfig+0x44>
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b08      	cmp	r3, #8
 800623e:	d10b      	bne.n	8006258 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006240:	4b8d      	ldr	r3, [pc, #564]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d05b      	beq.n	8006304 <HAL_RCC_OscConfig+0x108>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d157      	bne.n	8006304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e2d9      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006260:	d106      	bne.n	8006270 <HAL_RCC_OscConfig+0x74>
 8006262:	4b85      	ldr	r3, [pc, #532]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a84      	ldr	r2, [pc, #528]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e01d      	b.n	80062ac <HAL_RCC_OscConfig+0xb0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006278:	d10c      	bne.n	8006294 <HAL_RCC_OscConfig+0x98>
 800627a:	4b7f      	ldr	r3, [pc, #508]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a7e      	ldr	r2, [pc, #504]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	4b7c      	ldr	r3, [pc, #496]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a7b      	ldr	r2, [pc, #492]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 800628c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	e00b      	b.n	80062ac <HAL_RCC_OscConfig+0xb0>
 8006294:	4b78      	ldr	r3, [pc, #480]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a77      	ldr	r2, [pc, #476]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 800629a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	4b75      	ldr	r3, [pc, #468]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a74      	ldr	r2, [pc, #464]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80062a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d013      	beq.n	80062dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b4:	f7fc ffca 	bl	800324c <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062bc:	f7fc ffc6 	bl	800324c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b64      	cmp	r3, #100	@ 0x64
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e29e      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCC_OscConfig+0xc0>
 80062da:	e014      	b.n	8006306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062dc:	f7fc ffb6 	bl	800324c <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062e4:	f7fc ffb2 	bl	800324c <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b64      	cmp	r3, #100	@ 0x64
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e28a      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062f6:	4b60      	ldr	r3, [pc, #384]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCC_OscConfig+0xe8>
 8006302:	e000      	b.n	8006306 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d075      	beq.n	80063fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006312:	4b59      	ldr	r3, [pc, #356]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800631c:	4b56      	ldr	r3, [pc, #344]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b0c      	cmp	r3, #12
 800632a:	d102      	bne.n	8006332 <HAL_RCC_OscConfig+0x136>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d002      	beq.n	8006338 <HAL_RCC_OscConfig+0x13c>
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d11f      	bne.n	8006378 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006338:	4b4f      	ldr	r3, [pc, #316]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_RCC_OscConfig+0x154>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e25d      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006350:	4b49      	ldr	r3, [pc, #292]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	061b      	lsls	r3, r3, #24
 800635e:	4946      	ldr	r1, [pc, #280]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006360:	4313      	orrs	r3, r2
 8006362:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006364:	4b45      	ldr	r3, [pc, #276]	@ (800647c <HAL_RCC_OscConfig+0x280>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fb ffc9 	bl	8002300 <HAL_InitTick>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d043      	beq.n	80063fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e249      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d023      	beq.n	80063c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006380:	4b3d      	ldr	r3, [pc, #244]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a3c      	ldr	r2, [pc, #240]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800638a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fc ff5e 	bl	800324c <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006394:	f7fc ff5a 	bl	800324c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e232      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063a6:	4b34      	ldr	r3, [pc, #208]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b2:	4b31      	ldr	r3, [pc, #196]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	061b      	lsls	r3, r3, #24
 80063c0:	492d      	ldr	r1, [pc, #180]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	604b      	str	r3, [r1, #4]
 80063c6:	e01a      	b.n	80063fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fc ff3a 	bl	800324c <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063dc:	f7fc ff36 	bl	800324c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e20e      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063ee:	4b22      	ldr	r3, [pc, #136]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x1e0>
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b00      	cmp	r3, #0
 8006408:	d041      	beq.n	800648e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01c      	beq.n	800644c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006412:	4b19      	ldr	r3, [pc, #100]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006418:	4a17      	ldr	r2, [pc, #92]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006422:	f7fc ff13 	bl	800324c <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800642a:	f7fc ff0f 	bl	800324c <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e1e7      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800643c:	4b0e      	ldr	r3, [pc, #56]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 800643e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0ef      	beq.n	800642a <HAL_RCC_OscConfig+0x22e>
 800644a:	e020      	b.n	800648e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800644c:	4b0a      	ldr	r3, [pc, #40]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 800644e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006452:	4a09      	ldr	r2, [pc, #36]	@ (8006478 <HAL_RCC_OscConfig+0x27c>)
 8006454:	f023 0301 	bic.w	r3, r3, #1
 8006458:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645c:	f7fc fef6 	bl	800324c <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006462:	e00d      	b.n	8006480 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006464:	f7fc fef2 	bl	800324c <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d906      	bls.n	8006480 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e1ca      	b.n	800680c <HAL_RCC_OscConfig+0x610>
 8006476:	bf00      	nop
 8006478:	40021000 	.word	0x40021000
 800647c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006480:	4b8c      	ldr	r3, [pc, #560]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1ea      	bne.n	8006464 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 80a6 	beq.w	80065e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800649c:	2300      	movs	r3, #0
 800649e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064a0:	4b84      	ldr	r3, [pc, #528]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80064a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_OscConfig+0x2b4>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <HAL_RCC_OscConfig+0x2b6>
 80064b0:	2300      	movs	r3, #0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00d      	beq.n	80064d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064b6:	4b7f      	ldr	r3, [pc, #508]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80064b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ba:	4a7e      	ldr	r2, [pc, #504]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80064bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80064c2:	4b7c      	ldr	r3, [pc, #496]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064ce:	2301      	movs	r3, #1
 80064d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064d2:	4b79      	ldr	r3, [pc, #484]	@ (80066b8 <HAL_RCC_OscConfig+0x4bc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d118      	bne.n	8006510 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064de:	4b76      	ldr	r3, [pc, #472]	@ (80066b8 <HAL_RCC_OscConfig+0x4bc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a75      	ldr	r2, [pc, #468]	@ (80066b8 <HAL_RCC_OscConfig+0x4bc>)
 80064e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ea:	f7fc feaf 	bl	800324c <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f2:	f7fc feab 	bl	800324c <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e183      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006504:	4b6c      	ldr	r3, [pc, #432]	@ (80066b8 <HAL_RCC_OscConfig+0x4bc>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d108      	bne.n	800652a <HAL_RCC_OscConfig+0x32e>
 8006518:	4b66      	ldr	r3, [pc, #408]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651e:	4a65      	ldr	r2, [pc, #404]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006528:	e024      	b.n	8006574 <HAL_RCC_OscConfig+0x378>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b05      	cmp	r3, #5
 8006530:	d110      	bne.n	8006554 <HAL_RCC_OscConfig+0x358>
 8006532:	4b60      	ldr	r3, [pc, #384]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006538:	4a5e      	ldr	r2, [pc, #376]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800653a:	f043 0304 	orr.w	r3, r3, #4
 800653e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006542:	4b5c      	ldr	r3, [pc, #368]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006548:	4a5a      	ldr	r2, [pc, #360]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006552:	e00f      	b.n	8006574 <HAL_RCC_OscConfig+0x378>
 8006554:	4b57      	ldr	r3, [pc, #348]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655a:	4a56      	ldr	r2, [pc, #344]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006564:	4b53      	ldr	r3, [pc, #332]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656a:	4a52      	ldr	r2, [pc, #328]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800656c:	f023 0304 	bic.w	r3, r3, #4
 8006570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d016      	beq.n	80065aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657c:	f7fc fe66 	bl	800324c <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006582:	e00a      	b.n	800659a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006584:	f7fc fe62 	bl	800324c <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e138      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800659a:	4b46      	ldr	r3, [pc, #280]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800659c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0ed      	beq.n	8006584 <HAL_RCC_OscConfig+0x388>
 80065a8:	e015      	b.n	80065d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065aa:	f7fc fe4f 	bl	800324c <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065b0:	e00a      	b.n	80065c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b2:	f7fc fe4b 	bl	800324c <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e121      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065c8:	4b3a      	ldr	r3, [pc, #232]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1ed      	bne.n	80065b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065d6:	7ffb      	ldrb	r3, [r7, #31]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d105      	bne.n	80065e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065dc:	4b35      	ldr	r3, [pc, #212]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80065de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e0:	4a34      	ldr	r2, [pc, #208]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80065e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d03c      	beq.n	800666e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d01c      	beq.n	8006636 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065fc:	4b2d      	ldr	r3, [pc, #180]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 80065fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006602:	4a2c      	ldr	r2, [pc, #176]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660c:	f7fc fe1e 	bl	800324c <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006614:	f7fc fe1a 	bl	800324c <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e0f2      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006626:	4b23      	ldr	r3, [pc, #140]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006628:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0ef      	beq.n	8006614 <HAL_RCC_OscConfig+0x418>
 8006634:	e01b      	b.n	800666e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006636:	4b1f      	ldr	r3, [pc, #124]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006638:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800663c:	4a1d      	ldr	r2, [pc, #116]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006646:	f7fc fe01 	bl	800324c <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800664e:	f7fc fdfd 	bl	800324c <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e0d5      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006660:	4b14      	ldr	r3, [pc, #80]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006662:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1ef      	bne.n	800664e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80c9 	beq.w	800680a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006678:	4b0e      	ldr	r3, [pc, #56]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 030c 	and.w	r3, r3, #12
 8006680:	2b0c      	cmp	r3, #12
 8006682:	f000 8083 	beq.w	800678c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d15e      	bne.n	800674c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800668e:	4b09      	ldr	r3, [pc, #36]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a08      	ldr	r2, [pc, #32]	@ (80066b4 <HAL_RCC_OscConfig+0x4b8>)
 8006694:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669a:	f7fc fdd7 	bl	800324c <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066a0:	e00c      	b.n	80066bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a2:	f7fc fdd3 	bl	800324c <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d905      	bls.n	80066bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e0ab      	b.n	800680c <HAL_RCC_OscConfig+0x610>
 80066b4:	40021000 	.word	0x40021000
 80066b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066bc:	4b55      	ldr	r3, [pc, #340]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1ec      	bne.n	80066a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c8:	4b52      	ldr	r3, [pc, #328]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	4b52      	ldr	r3, [pc, #328]	@ (8006818 <HAL_RCC_OscConfig+0x61c>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6a11      	ldr	r1, [r2, #32]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066d8:	3a01      	subs	r2, #1
 80066da:	0112      	lsls	r2, r2, #4
 80066dc:	4311      	orrs	r1, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80066e2:	0212      	lsls	r2, r2, #8
 80066e4:	4311      	orrs	r1, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80066ea:	0852      	lsrs	r2, r2, #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	0552      	lsls	r2, r2, #21
 80066f0:	4311      	orrs	r1, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066f6:	0852      	lsrs	r2, r2, #1
 80066f8:	3a01      	subs	r2, #1
 80066fa:	0652      	lsls	r2, r2, #25
 80066fc:	4311      	orrs	r1, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006702:	06d2      	lsls	r2, r2, #27
 8006704:	430a      	orrs	r2, r1
 8006706:	4943      	ldr	r1, [pc, #268]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 8006708:	4313      	orrs	r3, r2
 800670a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800670c:	4b41      	ldr	r3, [pc, #260]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a40      	ldr	r2, [pc, #256]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 8006712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006716:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006718:	4b3e      	ldr	r3, [pc, #248]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a3d      	ldr	r2, [pc, #244]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 800671e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006722:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fc fd92 	bl	800324c <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672c:	f7fc fd8e 	bl	800324c <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e066      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800673e:	4b35      	ldr	r3, [pc, #212]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0x530>
 800674a:	e05e      	b.n	800680a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674c:	4b31      	ldr	r3, [pc, #196]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a30      	ldr	r2, [pc, #192]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 8006752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fc fd78 	bl	800324c <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006760:	f7fc fd74 	bl	800324c <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e04c      	b.n	800680c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006772:	4b28      	ldr	r3, [pc, #160]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800677e:	4b25      	ldr	r3, [pc, #148]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	4924      	ldr	r1, [pc, #144]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 8006784:	4b25      	ldr	r3, [pc, #148]	@ (800681c <HAL_RCC_OscConfig+0x620>)
 8006786:	4013      	ands	r3, r2
 8006788:	60cb      	str	r3, [r1, #12]
 800678a:	e03e      	b.n	800680a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e039      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006798:	4b1e      	ldr	r3, [pc, #120]	@ (8006814 <HAL_RCC_OscConfig+0x618>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f003 0203 	and.w	r2, r3, #3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d12c      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	3b01      	subs	r3, #1
 80067b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d123      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d11b      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067da:	429a      	cmp	r2, r3
 80067dc:	d113      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	3b01      	subs	r3, #1
 80067ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d109      	bne.n	8006806 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	3b01      	subs	r3, #1
 8006800:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006802:	429a      	cmp	r2, r3
 8006804:	d001      	beq.n	800680a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40021000 	.word	0x40021000
 8006818:	019f800c 	.word	0x019f800c
 800681c:	feeefffc 	.word	0xfeeefffc

08006820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e11e      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006838:	4b91      	ldr	r3, [pc, #580]	@ (8006a80 <HAL_RCC_ClockConfig+0x260>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d910      	bls.n	8006868 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006846:	4b8e      	ldr	r3, [pc, #568]	@ (8006a80 <HAL_RCC_ClockConfig+0x260>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f023 020f 	bic.w	r2, r3, #15
 800684e:	498c      	ldr	r1, [pc, #560]	@ (8006a80 <HAL_RCC_ClockConfig+0x260>)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	4313      	orrs	r3, r2
 8006854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006856:	4b8a      	ldr	r3, [pc, #552]	@ (8006a80 <HAL_RCC_ClockConfig+0x260>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d001      	beq.n	8006868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e106      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d073      	beq.n	800695c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d129      	bne.n	80068d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800687c:	4b81      	ldr	r3, [pc, #516]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0f4      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800688c:	f000 f9ce 	bl	8006c2c <RCC_GetSysClockFreqFromPLLSource>
 8006890:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	4a7c      	ldr	r2, [pc, #496]	@ (8006a88 <HAL_RCC_ClockConfig+0x268>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d93f      	bls.n	800691a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800689a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d033      	beq.n	800691a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d12f      	bne.n	800691a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068ba:	4b72      	ldr	r3, [pc, #456]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068c2:	4a70      	ldr	r2, [pc, #448]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80068c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80068ca:	2380      	movs	r3, #128	@ 0x80
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	e024      	b.n	800691a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d107      	bne.n	80068e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068d8:	4b6a      	ldr	r3, [pc, #424]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0c6      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068e8:	4b66      	ldr	r3, [pc, #408]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0be      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80068f8:	f000 f8ce 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 80068fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	4a61      	ldr	r2, [pc, #388]	@ (8006a88 <HAL_RCC_ClockConfig+0x268>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d909      	bls.n	800691a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006906:	4b5f      	ldr	r3, [pc, #380]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800690e:	4a5d      	ldr	r2, [pc, #372]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006914:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006916:	2380      	movs	r3, #128	@ 0x80
 8006918:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800691a:	4b5a      	ldr	r3, [pc, #360]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f023 0203 	bic.w	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4957      	ldr	r1, [pc, #348]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006928:	4313      	orrs	r3, r2
 800692a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800692c:	f7fc fc8e 	bl	800324c <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006932:	e00a      	b.n	800694a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006934:	f7fc fc8a 	bl	800324c <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e095      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	4b4e      	ldr	r3, [pc, #312]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 020c 	and.w	r2, r3, #12
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	429a      	cmp	r2, r3
 800695a:	d1eb      	bne.n	8006934 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d023      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006974:	4b43      	ldr	r3, [pc, #268]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	4a42      	ldr	r2, [pc, #264]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800697a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800697e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800698c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006994:	4a3b      	ldr	r2, [pc, #236]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006996:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800699a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800699c:	4b39      	ldr	r3, [pc, #228]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4936      	ldr	r1, [pc, #216]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b80      	cmp	r3, #128	@ 0x80
 80069b4:	d105      	bne.n	80069c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80069b6:	4b33      	ldr	r3, [pc, #204]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	4a32      	ldr	r2, [pc, #200]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 80069bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006a80 <HAL_RCC_ClockConfig+0x260>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d21d      	bcs.n	8006a0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a80 <HAL_RCC_ClockConfig+0x260>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 020f 	bic.w	r2, r3, #15
 80069d8:	4929      	ldr	r1, [pc, #164]	@ (8006a80 <HAL_RCC_ClockConfig+0x260>)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	4313      	orrs	r3, r2
 80069de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069e0:	f7fc fc34 	bl	800324c <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e6:	e00a      	b.n	80069fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e8:	f7fc fc30 	bl	800324c <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e03b      	b.n	8006a76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fe:	4b20      	ldr	r3, [pc, #128]	@ (8006a80 <HAL_RCC_ClockConfig+0x260>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d1ed      	bne.n	80069e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a18:	4b1a      	ldr	r3, [pc, #104]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4917      	ldr	r1, [pc, #92]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a36:	4b13      	ldr	r3, [pc, #76]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	490f      	ldr	r1, [pc, #60]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a4a:	f000 f825 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	4b0c      	ldr	r3, [pc, #48]	@ (8006a84 <HAL_RCC_ClockConfig+0x264>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	490c      	ldr	r1, [pc, #48]	@ (8006a8c <HAL_RCC_ClockConfig+0x26c>)
 8006a5c:	5ccb      	ldrb	r3, [r1, r3]
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	fa22 f303 	lsr.w	r3, r2, r3
 8006a66:	4a0a      	ldr	r2, [pc, #40]	@ (8006a90 <HAL_RCC_ClockConfig+0x270>)
 8006a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <HAL_RCC_ClockConfig+0x274>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fb fc46 	bl	8002300 <HAL_InitTick>
 8006a74:	4603      	mov	r3, r0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40022000 	.word	0x40022000
 8006a84:	40021000 	.word	0x40021000
 8006a88:	04c4b400 	.word	0x04c4b400
 8006a8c:	0801135c 	.word	0x0801135c
 8006a90:	20000008 	.word	0x20000008
 8006a94:	2000000c 	.word	0x2000000c

08006a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d102      	bne.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	e047      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ab0:	4b27      	ldr	r3, [pc, #156]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 030c 	and.w	r3, r3, #12
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d102      	bne.n	8006ac2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006abc:	4b25      	ldr	r3, [pc, #148]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	e03e      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ac2:	4b23      	ldr	r3, [pc, #140]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 030c 	and.w	r3, r3, #12
 8006aca:	2b0c      	cmp	r3, #12
 8006acc:	d136      	bne.n	8006b3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ace:	4b20      	ldr	r3, [pc, #128]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d10c      	bne.n	8006b06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006aec:	4a19      	ldr	r2, [pc, #100]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	4a16      	ldr	r2, [pc, #88]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006af6:	68d2      	ldr	r2, [r2, #12]
 8006af8:	0a12      	lsrs	r2, r2, #8
 8006afa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	617b      	str	r3, [r7, #20]
      break;
 8006b04:	e00c      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b06:	4a13      	ldr	r2, [pc, #76]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	4a10      	ldr	r2, [pc, #64]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b10:	68d2      	ldr	r2, [r2, #12]
 8006b12:	0a12      	lsrs	r2, r2, #8
 8006b14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	617b      	str	r3, [r7, #20]
      break;
 8006b1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	0e5b      	lsrs	r3, r3, #25
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	e001      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b40:	693b      	ldr	r3, [r7, #16]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40021000 	.word	0x40021000
 8006b54:	00f42400 	.word	0x00f42400

08006b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b5c:	4b03      	ldr	r3, [pc, #12]	@ (8006b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	20000008 	.word	0x20000008

08006b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b74:	f7ff fff0 	bl	8006b58 <HAL_RCC_GetHCLKFreq>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	0a1b      	lsrs	r3, r3, #8
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	4904      	ldr	r1, [pc, #16]	@ (8006b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b86:	5ccb      	ldrb	r3, [r1, r3]
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40021000 	.word	0x40021000
 8006b98:	0801136c 	.word	0x0801136c

08006b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ba0:	f7ff ffda 	bl	8006b58 <HAL_RCC_GetHCLKFreq>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	4b06      	ldr	r3, [pc, #24]	@ (8006bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	0adb      	lsrs	r3, r3, #11
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	4904      	ldr	r1, [pc, #16]	@ (8006bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bb2:	5ccb      	ldrb	r3, [r1, r3]
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	0801136c 	.word	0x0801136c

08006bc8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	220f      	movs	r2, #15
 8006bd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006bd8:	4b12      	ldr	r3, [pc, #72]	@ (8006c24 <HAL_RCC_GetClockConfig+0x5c>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 0203 	and.w	r2, r3, #3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006be4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c24 <HAL_RCC_GetClockConfig+0x5c>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <HAL_RCC_GetClockConfig+0x5c>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006bfc:	4b09      	ldr	r3, [pc, #36]	@ (8006c24 <HAL_RCC_GetClockConfig+0x5c>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	08db      	lsrs	r3, r3, #3
 8006c02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006c0a:	4b07      	ldr	r3, [pc, #28]	@ (8006c28 <HAL_RCC_GetClockConfig+0x60>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 020f 	and.w	r2, r3, #15
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	601a      	str	r2, [r3, #0]
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40022000 	.word	0x40022000

08006c2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c32:	4b1e      	ldr	r3, [pc, #120]	@ (8006cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	091b      	lsrs	r3, r3, #4
 8006c42:	f003 030f 	and.w	r3, r3, #15
 8006c46:	3301      	adds	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d10c      	bne.n	8006c6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c50:	4a17      	ldr	r2, [pc, #92]	@ (8006cb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	4a14      	ldr	r2, [pc, #80]	@ (8006cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c5a:	68d2      	ldr	r2, [r2, #12]
 8006c5c:	0a12      	lsrs	r2, r2, #8
 8006c5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c62:	fb02 f303 	mul.w	r3, r2, r3
 8006c66:	617b      	str	r3, [r7, #20]
    break;
 8006c68:	e00c      	b.n	8006c84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c6a:	4a11      	ldr	r2, [pc, #68]	@ (8006cb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	4a0e      	ldr	r2, [pc, #56]	@ (8006cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c74:	68d2      	ldr	r2, [r2, #12]
 8006c76:	0a12      	lsrs	r2, r2, #8
 8006c78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c7c:	fb02 f303 	mul.w	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]
    break;
 8006c82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c84:	4b09      	ldr	r3, [pc, #36]	@ (8006cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	0e5b      	lsrs	r3, r3, #25
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	3301      	adds	r3, #1
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c9e:	687b      	ldr	r3, [r7, #4]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	00f42400 	.word	0x00f42400

08006cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 8098 	beq.w	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cd6:	4b43      	ldr	r3, [pc, #268]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10d      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ce2:	4b40      	ldr	r3, [pc, #256]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce6:	4a3f      	ldr	r2, [pc, #252]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cee:	4b3d      	ldr	r3, [pc, #244]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a39      	ldr	r2, [pc, #228]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d0a:	f7fc fa9f 	bl	800324c <HAL_GetTick>
 8006d0e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d10:	e009      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d12:	f7fc fa9b 	bl	800324c <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d902      	bls.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	74fb      	strb	r3, [r7, #19]
        break;
 8006d24:	e005      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d26:	4b30      	ldr	r3, [pc, #192]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0ef      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d32:	7cfb      	ldrb	r3, [r7, #19]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d159      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d38:	4b2a      	ldr	r3, [pc, #168]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d42:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01e      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d019      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d54:	4b23      	ldr	r3, [pc, #140]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d60:	4b20      	ldr	r3, [pc, #128]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d66:	4a1f      	ldr	r2, [pc, #124]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d70:	4b1c      	ldr	r3, [pc, #112]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d76:	4a1b      	ldr	r2, [pc, #108]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d80:	4a18      	ldr	r2, [pc, #96]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d92:	f7fc fa5b 	bl	800324c <HAL_GetTick>
 8006d96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d98:	e00b      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d9a:	f7fc fa57 	bl	800324c <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d902      	bls.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	74fb      	strb	r3, [r7, #19]
            break;
 8006db0:	e006      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006db2:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0ec      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006dc0:	7cfb      	ldrb	r3, [r7, #19]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10b      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dc6:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd4:	4903      	ldr	r1, [pc, #12]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ddc:	e008      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dde:	7cfb      	ldrb	r3, [r7, #19]
 8006de0:	74bb      	strb	r3, [r7, #18]
 8006de2:	e005      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006de4:	40021000 	.word	0x40021000
 8006de8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dec:	7cfb      	ldrb	r3, [r7, #19]
 8006dee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006df0:	7c7b      	ldrb	r3, [r7, #17]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d105      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006df6:	4ba6      	ldr	r3, [pc, #664]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfa:	4aa5      	ldr	r2, [pc, #660]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e0e:	4ba0      	ldr	r3, [pc, #640]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e14:	f023 0203 	bic.w	r2, r3, #3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	499c      	ldr	r1, [pc, #624]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e30:	4b97      	ldr	r3, [pc, #604]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e36:	f023 020c 	bic.w	r2, r3, #12
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4994      	ldr	r1, [pc, #592]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0304 	and.w	r3, r3, #4
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e52:	4b8f      	ldr	r3, [pc, #572]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	498b      	ldr	r1, [pc, #556]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e74:	4b86      	ldr	r3, [pc, #536]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	4983      	ldr	r1, [pc, #524]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e96:	4b7e      	ldr	r3, [pc, #504]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e9c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	497a      	ldr	r1, [pc, #488]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006eb8:	4b75      	ldr	r3, [pc, #468]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	4972      	ldr	r1, [pc, #456]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006eda:	4b6d      	ldr	r3, [pc, #436]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	4969      	ldr	r1, [pc, #420]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006efc:	4b64      	ldr	r3, [pc, #400]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	4961      	ldr	r1, [pc, #388]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	4958      	ldr	r1, [pc, #352]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d015      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f40:	4b53      	ldr	r3, [pc, #332]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4e:	4950      	ldr	r1, [pc, #320]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f5e:	d105      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f60:	4b4b      	ldr	r3, [pc, #300]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	4a4a      	ldr	r2, [pc, #296]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f6a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d015      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f78:	4b45      	ldr	r3, [pc, #276]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	4942      	ldr	r1, [pc, #264]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f96:	d105      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f98:	4b3d      	ldr	r3, [pc, #244]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	4a3c      	ldr	r2, [pc, #240]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fa2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d015      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fb0:	4b37      	ldr	r3, [pc, #220]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbe:	4934      	ldr	r1, [pc, #208]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fce:	d105      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d015      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fe8:	4b29      	ldr	r3, [pc, #164]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff6:	4926      	ldr	r1, [pc, #152]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007006:	d105      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007008:	4b21      	ldr	r3, [pc, #132]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4a20      	ldr	r2, [pc, #128]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800700e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007012:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d015      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007020:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007026:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702e:	4918      	ldr	r1, [pc, #96]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800703e:	d105      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007040:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a12      	ldr	r2, [pc, #72]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800704a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d015      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007058:	4b0d      	ldr	r3, [pc, #52]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007066:	490a      	ldr	r1, [pc, #40]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007072:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007076:	d105      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007078:	4b05      	ldr	r3, [pc, #20]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4a04      	ldr	r2, [pc, #16]	@ (8007090 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800707e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007082:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007084:	7cbb      	ldrb	r3, [r7, #18]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000

08007094 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e09d      	b.n	80071e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d108      	bne.n	80070c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070b6:	d009      	beq.n	80070cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	61da      	str	r2, [r3, #28]
 80070be:	e005      	b.n	80070cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fb f89e 	bl	8002228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007102:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800710c:	d902      	bls.n	8007114 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	e002      	b.n	800711a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007118:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007122:	d007      	beq.n	8007134 <HAL_SPI_Init+0xa0>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800712c:	d002      	beq.n	8007134 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800716c:	431a      	orrs	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007176:	ea42 0103 	orr.w	r1, r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	0c1b      	lsrs	r3, r3, #16
 8007190:	f003 0204 	and.w	r2, r3, #4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80071b0:	ea42 0103 	orr.w	r1, r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e049      	b.n	8007290 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7fb fd45 	bl	8002ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f001 f873 	bl	8008314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d001      	beq.n	80072b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e04a      	b.n	8007346 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a21      	ldr	r2, [pc, #132]	@ (8007354 <HAL_TIM_Base_Start_IT+0xbc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d018      	beq.n	8007304 <HAL_TIM_Base_Start_IT+0x6c>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072da:	d013      	beq.n	8007304 <HAL_TIM_Base_Start_IT+0x6c>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007358 <HAL_TIM_Base_Start_IT+0xc0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00e      	beq.n	8007304 <HAL_TIM_Base_Start_IT+0x6c>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a1c      	ldr	r2, [pc, #112]	@ (800735c <HAL_TIM_Base_Start_IT+0xc4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d009      	beq.n	8007304 <HAL_TIM_Base_Start_IT+0x6c>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007360 <HAL_TIM_Base_Start_IT+0xc8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d004      	beq.n	8007304 <HAL_TIM_Base_Start_IT+0x6c>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a19      	ldr	r2, [pc, #100]	@ (8007364 <HAL_TIM_Base_Start_IT+0xcc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d115      	bne.n	8007330 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	4b17      	ldr	r3, [pc, #92]	@ (8007368 <HAL_TIM_Base_Start_IT+0xd0>)
 800730c:	4013      	ands	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b06      	cmp	r3, #6
 8007314:	d015      	beq.n	8007342 <HAL_TIM_Base_Start_IT+0xaa>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800731c:	d011      	beq.n	8007342 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0201 	orr.w	r2, r2, #1
 800732c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800732e:	e008      	b.n	8007342 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	e000      	b.n	8007344 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007342:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40012c00 	.word	0x40012c00
 8007358:	40000400 	.word	0x40000400
 800735c:	40000800 	.word	0x40000800
 8007360:	40013400 	.word	0x40013400
 8007364:	40014000 	.word	0x40014000
 8007368:	00010007 	.word	0x00010007

0800736c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e049      	b.n	8007412 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f841 	bl	800741a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3304      	adds	r3, #4
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f000 ffb2 	bl	8008314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d109      	bne.n	800745c <HAL_TIM_PWM_Start_DMA+0x2c>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	bf0c      	ite	eq
 8007454:	2301      	moveq	r3, #1
 8007456:	2300      	movne	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	e03c      	b.n	80074d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b04      	cmp	r3, #4
 8007460:	d109      	bne.n	8007476 <HAL_TIM_PWM_Start_DMA+0x46>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	e02f      	b.n	80074d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2b08      	cmp	r3, #8
 800747a:	d109      	bne.n	8007490 <HAL_TIM_PWM_Start_DMA+0x60>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	e022      	b.n	80074d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b0c      	cmp	r3, #12
 8007494:	d109      	bne.n	80074aa <HAL_TIM_PWM_Start_DMA+0x7a>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	bf0c      	ite	eq
 80074a2:	2301      	moveq	r3, #1
 80074a4:	2300      	movne	r3, #0
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	e015      	b.n	80074d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b10      	cmp	r3, #16
 80074ae:	d109      	bne.n	80074c4 <HAL_TIM_PWM_Start_DMA+0x94>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	bf0c      	ite	eq
 80074bc:	2301      	moveq	r3, #1
 80074be:	2300      	movne	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	e008      	b.n	80074d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	bf0c      	ite	eq
 80074d0:	2301      	moveq	r3, #1
 80074d2:	2300      	movne	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80074da:	2302      	movs	r3, #2
 80074dc:	e1a6      	b.n	800782c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	bf0c      	ite	eq
 80074f0:	2301      	moveq	r3, #1
 80074f2:	2300      	movne	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	e03c      	b.n	8007572 <HAL_TIM_PWM_Start_DMA+0x142>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d109      	bne.n	8007512 <HAL_TIM_PWM_Start_DMA+0xe2>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b01      	cmp	r3, #1
 8007508:	bf0c      	ite	eq
 800750a:	2301      	moveq	r3, #1
 800750c:	2300      	movne	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	e02f      	b.n	8007572 <HAL_TIM_PWM_Start_DMA+0x142>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b08      	cmp	r3, #8
 8007516:	d109      	bne.n	800752c <HAL_TIM_PWM_Start_DMA+0xfc>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	bf0c      	ite	eq
 8007524:	2301      	moveq	r3, #1
 8007526:	2300      	movne	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	e022      	b.n	8007572 <HAL_TIM_PWM_Start_DMA+0x142>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b0c      	cmp	r3, #12
 8007530:	d109      	bne.n	8007546 <HAL_TIM_PWM_Start_DMA+0x116>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b01      	cmp	r3, #1
 800753c:	bf0c      	ite	eq
 800753e:	2301      	moveq	r3, #1
 8007540:	2300      	movne	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	e015      	b.n	8007572 <HAL_TIM_PWM_Start_DMA+0x142>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2b10      	cmp	r3, #16
 800754a:	d109      	bne.n	8007560 <HAL_TIM_PWM_Start_DMA+0x130>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	e008      	b.n	8007572 <HAL_TIM_PWM_Start_DMA+0x142>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	bf0c      	ite	eq
 800756c:	2301      	moveq	r3, #1
 800756e:	2300      	movne	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d034      	beq.n	80075e0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <HAL_TIM_PWM_Start_DMA+0x152>
 800757c:	887b      	ldrh	r3, [r7, #2]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e152      	b.n	800782c <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <HAL_TIM_PWM_Start_DMA+0x166>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007594:	e026      	b.n	80075e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b04      	cmp	r3, #4
 800759a:	d104      	bne.n	80075a6 <HAL_TIM_PWM_Start_DMA+0x176>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075a4:	e01e      	b.n	80075e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d104      	bne.n	80075b6 <HAL_TIM_PWM_Start_DMA+0x186>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075b4:	e016      	b.n	80075e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2b0c      	cmp	r3, #12
 80075ba:	d104      	bne.n	80075c6 <HAL_TIM_PWM_Start_DMA+0x196>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075c4:	e00e      	b.n	80075e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d104      	bne.n	80075d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075d4:	e006      	b.n	80075e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075de:	e001      	b.n	80075e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e123      	b.n	800782c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b0c      	cmp	r3, #12
 80075e8:	f200 80ae 	bhi.w	8007748 <HAL_TIM_PWM_Start_DMA+0x318>
 80075ec:	a201      	add	r2, pc, #4	@ (adr r2, 80075f4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	08007629 	.word	0x08007629
 80075f8:	08007749 	.word	0x08007749
 80075fc:	08007749 	.word	0x08007749
 8007600:	08007749 	.word	0x08007749
 8007604:	08007671 	.word	0x08007671
 8007608:	08007749 	.word	0x08007749
 800760c:	08007749 	.word	0x08007749
 8007610:	08007749 	.word	0x08007749
 8007614:	080076b9 	.word	0x080076b9
 8007618:	08007749 	.word	0x08007749
 800761c:	08007749 	.word	0x08007749
 8007620:	08007749 	.word	0x08007749
 8007624:	08007701 	.word	0x08007701
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762c:	4a81      	ldr	r2, [pc, #516]	@ (8007834 <HAL_TIM_PWM_Start_DMA+0x404>)
 800762e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007634:	4a80      	ldr	r2, [pc, #512]	@ (8007838 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007636:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763c:	4a7f      	ldr	r2, [pc, #508]	@ (800783c <HAL_TIM_PWM_Start_DMA+0x40c>)
 800763e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007644:	6879      	ldr	r1, [r7, #4]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3334      	adds	r3, #52	@ 0x34
 800764c:	461a      	mov	r2, r3
 800764e:	887b      	ldrh	r3, [r7, #2]
 8007650:	f7fd fc68 	bl	8004f24 <HAL_DMA_Start_IT>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e0e6      	b.n	800782c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800766c:	60da      	str	r2, [r3, #12]
      break;
 800766e:	e06e      	b.n	800774e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007674:	4a6f      	ldr	r2, [pc, #444]	@ (8007834 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007676:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767c:	4a6e      	ldr	r2, [pc, #440]	@ (8007838 <HAL_TIM_PWM_Start_DMA+0x408>)
 800767e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007684:	4a6d      	ldr	r2, [pc, #436]	@ (800783c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007686:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3338      	adds	r3, #56	@ 0x38
 8007694:	461a      	mov	r2, r3
 8007696:	887b      	ldrh	r3, [r7, #2]
 8007698:	f7fd fc44 	bl	8004f24 <HAL_DMA_Start_IT>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e0c2      	b.n	800782c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076b4:	60da      	str	r2, [r3, #12]
      break;
 80076b6:	e04a      	b.n	800774e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	4a5d      	ldr	r2, [pc, #372]	@ (8007834 <HAL_TIM_PWM_Start_DMA+0x404>)
 80076be:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c4:	4a5c      	ldr	r2, [pc, #368]	@ (8007838 <HAL_TIM_PWM_Start_DMA+0x408>)
 80076c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	4a5b      	ldr	r2, [pc, #364]	@ (800783c <HAL_TIM_PWM_Start_DMA+0x40c>)
 80076ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	333c      	adds	r3, #60	@ 0x3c
 80076dc:	461a      	mov	r2, r3
 80076de:	887b      	ldrh	r3, [r7, #2]
 80076e0:	f7fd fc20 	bl	8004f24 <HAL_DMA_Start_IT>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e09e      	b.n	800782c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076fc:	60da      	str	r2, [r3, #12]
      break;
 80076fe:	e026      	b.n	800774e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007704:	4a4b      	ldr	r2, [pc, #300]	@ (8007834 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007706:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770c:	4a4a      	ldr	r2, [pc, #296]	@ (8007838 <HAL_TIM_PWM_Start_DMA+0x408>)
 800770e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007714:	4a49      	ldr	r2, [pc, #292]	@ (800783c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007716:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3340      	adds	r3, #64	@ 0x40
 8007724:	461a      	mov	r2, r3
 8007726:	887b      	ldrh	r3, [r7, #2]
 8007728:	f7fd fbfc 	bl	8004f24 <HAL_DMA_Start_IT>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e07a      	b.n	800782c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007744:	60da      	str	r2, [r3, #12]
      break;
 8007746:	e002      	b.n	800774e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	75fb      	strb	r3, [r7, #23]
      break;
 800774c:	bf00      	nop
  }

  if (status == HAL_OK)
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d16a      	bne.n	800782a <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2201      	movs	r2, #1
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	4618      	mov	r0, r3
 800775e:	f001 fa07 	bl	8008b70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a36      	ldr	r2, [pc, #216]	@ (8007840 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d013      	beq.n	8007794 <HAL_TIM_PWM_Start_DMA+0x364>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a34      	ldr	r2, [pc, #208]	@ (8007844 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00e      	beq.n	8007794 <HAL_TIM_PWM_Start_DMA+0x364>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a33      	ldr	r2, [pc, #204]	@ (8007848 <HAL_TIM_PWM_Start_DMA+0x418>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d009      	beq.n	8007794 <HAL_TIM_PWM_Start_DMA+0x364>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a31      	ldr	r2, [pc, #196]	@ (800784c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d004      	beq.n	8007794 <HAL_TIM_PWM_Start_DMA+0x364>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a30      	ldr	r2, [pc, #192]	@ (8007850 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d101      	bne.n	8007798 <HAL_TIM_PWM_Start_DMA+0x368>
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <HAL_TIM_PWM_Start_DMA+0x36a>
 8007798:	2300      	movs	r3, #0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a23      	ldr	r2, [pc, #140]	@ (8007840 <HAL_TIM_PWM_Start_DMA+0x410>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d018      	beq.n	80077ea <HAL_TIM_PWM_Start_DMA+0x3ba>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077c0:	d013      	beq.n	80077ea <HAL_TIM_PWM_Start_DMA+0x3ba>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a23      	ldr	r2, [pc, #140]	@ (8007854 <HAL_TIM_PWM_Start_DMA+0x424>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00e      	beq.n	80077ea <HAL_TIM_PWM_Start_DMA+0x3ba>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a21      	ldr	r2, [pc, #132]	@ (8007858 <HAL_TIM_PWM_Start_DMA+0x428>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d009      	beq.n	80077ea <HAL_TIM_PWM_Start_DMA+0x3ba>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a1a      	ldr	r2, [pc, #104]	@ (8007844 <HAL_TIM_PWM_Start_DMA+0x414>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d004      	beq.n	80077ea <HAL_TIM_PWM_Start_DMA+0x3ba>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a18      	ldr	r2, [pc, #96]	@ (8007848 <HAL_TIM_PWM_Start_DMA+0x418>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d115      	bne.n	8007816 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	4b1a      	ldr	r3, [pc, #104]	@ (800785c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b06      	cmp	r3, #6
 80077fa:	d015      	beq.n	8007828 <HAL_TIM_PWM_Start_DMA+0x3f8>
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007802:	d011      	beq.n	8007828 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007814:	e008      	b.n	8007828 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0201 	orr.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e000      	b.n	800782a <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007828:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	08008203 	.word	0x08008203
 8007838:	080082ab 	.word	0x080082ab
 800783c:	08008171 	.word	0x08008171
 8007840:	40012c00 	.word	0x40012c00
 8007844:	40013400 	.word	0x40013400
 8007848:	40014000 	.word	0x40014000
 800784c:	40014400 	.word	0x40014400
 8007850:	40014800 	.word	0x40014800
 8007854:	40000400 	.word	0x40000400
 8007858:	40000800 	.word	0x40000800
 800785c:	00010007 	.word	0x00010007

08007860 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b0c      	cmp	r3, #12
 8007872:	d855      	bhi.n	8007920 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007874:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	080078b1 	.word	0x080078b1
 8007880:	08007921 	.word	0x08007921
 8007884:	08007921 	.word	0x08007921
 8007888:	08007921 	.word	0x08007921
 800788c:	080078cd 	.word	0x080078cd
 8007890:	08007921 	.word	0x08007921
 8007894:	08007921 	.word	0x08007921
 8007898:	08007921 	.word	0x08007921
 800789c:	080078e9 	.word	0x080078e9
 80078a0:	08007921 	.word	0x08007921
 80078a4:	08007921 	.word	0x08007921
 80078a8:	08007921 	.word	0x08007921
 80078ac:	08007905 	.word	0x08007905
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80078be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fd fc01 	bl	80050cc <HAL_DMA_Abort_IT>
      break;
 80078ca:	e02c      	b.n	8007926 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fd fbf3 	bl	80050cc <HAL_DMA_Abort_IT>
      break;
 80078e6:	e01e      	b.n	8007926 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fd fbe5 	bl	80050cc <HAL_DMA_Abort_IT>
      break;
 8007902:	e010      	b.n	8007926 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007912:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007918:	4618      	mov	r0, r3
 800791a:	f7fd fbd7 	bl	80050cc <HAL_DMA_Abort_IT>
      break;
 800791e:	e002      	b.n	8007926 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	73fb      	strb	r3, [r7, #15]
      break;
 8007924:	bf00      	nop
  }

  if (status == HAL_OK)
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b00      	cmp	r3, #0
 800792a:	f040 8081 	bne.w	8007a30 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f001 f91a 	bl	8008b70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a3e      	ldr	r2, [pc, #248]	@ (8007a3c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d013      	beq.n	800796e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a3d      	ldr	r2, [pc, #244]	@ (8007a40 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00e      	beq.n	800796e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a3b      	ldr	r2, [pc, #236]	@ (8007a44 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d009      	beq.n	800796e <HAL_TIM_PWM_Stop_DMA+0x10e>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a3a      	ldr	r2, [pc, #232]	@ (8007a48 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d004      	beq.n	800796e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a38      	ldr	r2, [pc, #224]	@ (8007a4c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d101      	bne.n	8007972 <HAL_TIM_PWM_Stop_DMA+0x112>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <HAL_TIM_PWM_Stop_DMA+0x114>
 8007972:	2300      	movs	r3, #0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d017      	beq.n	80079a8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6a1a      	ldr	r2, [r3, #32]
 800797e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10f      	bne.n	80079a8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6a1a      	ldr	r2, [r3, #32]
 800798e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007992:	4013      	ands	r3, r2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6a1a      	ldr	r2, [r3, #32]
 80079ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80079b2:	4013      	ands	r3, r2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10f      	bne.n	80079d8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	f244 4344 	movw	r3, #17476	@ 0x4444
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d107      	bne.n	80079d8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0201 	bic.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <HAL_TIM_PWM_Stop_DMA+0x188>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079e6:	e023      	b.n	8007a30 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d104      	bne.n	80079f8 <HAL_TIM_PWM_Stop_DMA+0x198>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079f6:	e01b      	b.n	8007a30 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d104      	bne.n	8007a08 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a06:	e013      	b.n	8007a30 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b0c      	cmp	r3, #12
 8007a0c:	d104      	bne.n	8007a18 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a16:	e00b      	b.n	8007a30 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b10      	cmp	r3, #16
 8007a1c:	d104      	bne.n	8007a28 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a26:	e003      	b.n	8007a30 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40014400 	.word	0x40014400
 8007a4c:	40014800 	.word	0x40014800

08007a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d020      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01b      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0202 	mvn.w	r2, #2
 8007a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	f003 0303 	and.w	r3, r3, #3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fb40 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 8007aa0:	e005      	b.n	8007aae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fb32 	bl	800810c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7fa f9e1 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d020      	beq.n	8007b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d01b      	beq.n	8007b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0204 	mvn.w	r2, #4
 8007ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fb1a 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 8007aec:	e005      	b.n	8007afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fb0c 	bl	800810c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7fa f9bb 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f003 0308 	and.w	r3, r3, #8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d020      	beq.n	8007b4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01b      	beq.n	8007b4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f06f 0208 	mvn.w	r2, #8
 8007b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2204      	movs	r2, #4
 8007b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 faf4 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 8007b38:	e005      	b.n	8007b46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fae6 	bl	800810c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7fa f995 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d020      	beq.n	8007b98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f003 0310 	and.w	r3, r3, #16
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01b      	beq.n	8007b98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f06f 0210 	mvn.w	r2, #16
 8007b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 face 	bl	8008120 <HAL_TIM_IC_CaptureCallback>
 8007b84:	e005      	b.n	8007b92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fac0 	bl	800810c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fa f96f 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00c      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d007      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0201 	mvn.w	r2, #1
 8007bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7fa fa64 	bl	8002084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00c      	beq.n	8007bea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 f875 	bl	8008cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00c      	beq.n	8007c0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d007      	beq.n	8007c0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f86d 	bl	8008ce8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00c      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d007      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fa8b 	bl	8008148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00c      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d007      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f06f 0220 	mvn.w	r2, #32
 8007c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 f835 	bl	8008cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00c      	beq.n	8007c7a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d007      	beq.n	8007c7a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 f841 	bl	8008cfc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00c      	beq.n	8007c9e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 f839 	bl	8008d10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00c      	beq.n	8007cc2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 f831 	bl	8008d24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00c      	beq.n	8007ce6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 f829 	bl	8008d38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d101      	bne.n	8007d0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	e0ff      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b14      	cmp	r3, #20
 8007d1a:	f200 80f0 	bhi.w	8007efe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007d79 	.word	0x08007d79
 8007d28:	08007eff 	.word	0x08007eff
 8007d2c:	08007eff 	.word	0x08007eff
 8007d30:	08007eff 	.word	0x08007eff
 8007d34:	08007db9 	.word	0x08007db9
 8007d38:	08007eff 	.word	0x08007eff
 8007d3c:	08007eff 	.word	0x08007eff
 8007d40:	08007eff 	.word	0x08007eff
 8007d44:	08007dfb 	.word	0x08007dfb
 8007d48:	08007eff 	.word	0x08007eff
 8007d4c:	08007eff 	.word	0x08007eff
 8007d50:	08007eff 	.word	0x08007eff
 8007d54:	08007e3b 	.word	0x08007e3b
 8007d58:	08007eff 	.word	0x08007eff
 8007d5c:	08007eff 	.word	0x08007eff
 8007d60:	08007eff 	.word	0x08007eff
 8007d64:	08007e7d 	.word	0x08007e7d
 8007d68:	08007eff 	.word	0x08007eff
 8007d6c:	08007eff 	.word	0x08007eff
 8007d70:	08007eff 	.word	0x08007eff
 8007d74:	08007ebd 	.word	0x08007ebd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fb64 	bl	800844c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699a      	ldr	r2, [r3, #24]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0208 	orr.w	r2, r2, #8
 8007d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699a      	ldr	r2, [r3, #24]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0204 	bic.w	r2, r2, #4
 8007da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6999      	ldr	r1, [r3, #24]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	619a      	str	r2, [r3, #24]
      break;
 8007db6:	e0a5      	b.n	8007f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fbd4 	bl	800856c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699a      	ldr	r2, [r3, #24]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699a      	ldr	r2, [r3, #24]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6999      	ldr	r1, [r3, #24]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	021a      	lsls	r2, r3, #8
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	430a      	orrs	r2, r1
 8007df6:	619a      	str	r2, [r3, #24]
      break;
 8007df8:	e084      	b.n	8007f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68b9      	ldr	r1, [r7, #8]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fc3d 	bl	8008680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69da      	ldr	r2, [r3, #28]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0208 	orr.w	r2, r2, #8
 8007e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69da      	ldr	r2, [r3, #28]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0204 	bic.w	r2, r2, #4
 8007e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69d9      	ldr	r1, [r3, #28]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	61da      	str	r2, [r3, #28]
      break;
 8007e38:	e064      	b.n	8007f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fca5 	bl	8008790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69da      	ldr	r2, [r3, #28]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69da      	ldr	r2, [r3, #28]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69d9      	ldr	r1, [r3, #28]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	021a      	lsls	r2, r3, #8
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	61da      	str	r2, [r3, #28]
      break;
 8007e7a:	e043      	b.n	8007f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fd0e 	bl	80088a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0208 	orr.w	r2, r2, #8
 8007e96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0204 	bic.w	r2, r2, #4
 8007ea6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007eba:	e023      	b.n	8007f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fd52 	bl	800896c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ed6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ee6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	021a      	lsls	r2, r3, #8
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007efc:	e002      	b.n	8007f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	75fb      	strb	r3, [r7, #23]
      break;
 8007f02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop

08007f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d101      	bne.n	8007f34 <HAL_TIM_ConfigClockSource+0x1c>
 8007f30:	2302      	movs	r3, #2
 8007f32:	e0de      	b.n	80080f2 <HAL_TIM_ConfigClockSource+0x1da>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007f52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a63      	ldr	r2, [pc, #396]	@ (80080fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	f000 80a9 	beq.w	80080c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007f74:	4a61      	ldr	r2, [pc, #388]	@ (80080fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	f200 80ae 	bhi.w	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f7c:	4a60      	ldr	r2, [pc, #384]	@ (8008100 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	f000 80a1 	beq.w	80080c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007f84:	4a5e      	ldr	r2, [pc, #376]	@ (8008100 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	f200 80a6 	bhi.w	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f8c:	4a5d      	ldr	r2, [pc, #372]	@ (8008104 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	f000 8099 	beq.w	80080c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007f94:	4a5b      	ldr	r2, [pc, #364]	@ (8008104 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	f200 809e 	bhi.w	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8008108 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	f000 8091 	beq.w	80080c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007fa4:	4a58      	ldr	r2, [pc, #352]	@ (8008108 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	f200 8096 	bhi.w	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007fb0:	f000 8089 	beq.w	80080c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007fb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007fb8:	f200 808e 	bhi.w	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fc0:	d03e      	beq.n	8008040 <HAL_TIM_ConfigClockSource+0x128>
 8007fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fc6:	f200 8087 	bhi.w	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fce:	f000 8086 	beq.w	80080de <HAL_TIM_ConfigClockSource+0x1c6>
 8007fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fd6:	d87f      	bhi.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fd8:	2b70      	cmp	r3, #112	@ 0x70
 8007fda:	d01a      	beq.n	8008012 <HAL_TIM_ConfigClockSource+0xfa>
 8007fdc:	2b70      	cmp	r3, #112	@ 0x70
 8007fde:	d87b      	bhi.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fe0:	2b60      	cmp	r3, #96	@ 0x60
 8007fe2:	d050      	beq.n	8008086 <HAL_TIM_ConfigClockSource+0x16e>
 8007fe4:	2b60      	cmp	r3, #96	@ 0x60
 8007fe6:	d877      	bhi.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007fe8:	2b50      	cmp	r3, #80	@ 0x50
 8007fea:	d03c      	beq.n	8008066 <HAL_TIM_ConfigClockSource+0x14e>
 8007fec:	2b50      	cmp	r3, #80	@ 0x50
 8007fee:	d873      	bhi.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ff0:	2b40      	cmp	r3, #64	@ 0x40
 8007ff2:	d058      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0x18e>
 8007ff4:	2b40      	cmp	r3, #64	@ 0x40
 8007ff6:	d86f      	bhi.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ff8:	2b30      	cmp	r3, #48	@ 0x30
 8007ffa:	d064      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8007ffc:	2b30      	cmp	r3, #48	@ 0x30
 8007ffe:	d86b      	bhi.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008000:	2b20      	cmp	r3, #32
 8008002:	d060      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008004:	2b20      	cmp	r3, #32
 8008006:	d867      	bhi.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d05c      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800800c:	2b10      	cmp	r3, #16
 800800e:	d05a      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008010:	e062      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008022:	f000 fd85 	bl	8008b30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	609a      	str	r2, [r3, #8]
      break;
 800803e:	e04f      	b.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008050:	f000 fd6e 	bl	8008b30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008062:	609a      	str	r2, [r3, #8]
      break;
 8008064:	e03c      	b.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008072:	461a      	mov	r2, r3
 8008074:	f000 fce0 	bl	8008a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2150      	movs	r1, #80	@ 0x50
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fd39 	bl	8008af6 <TIM_ITRx_SetConfig>
      break;
 8008084:	e02c      	b.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008092:	461a      	mov	r2, r3
 8008094:	f000 fcff 	bl	8008a96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2160      	movs	r1, #96	@ 0x60
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fd29 	bl	8008af6 <TIM_ITRx_SetConfig>
      break;
 80080a4:	e01c      	b.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080b2:	461a      	mov	r2, r3
 80080b4:	f000 fcc0 	bl	8008a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2140      	movs	r1, #64	@ 0x40
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fd19 	bl	8008af6 <TIM_ITRx_SetConfig>
      break;
 80080c4:	e00c      	b.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4619      	mov	r1, r3
 80080d0:	4610      	mov	r0, r2
 80080d2:	f000 fd10 	bl	8008af6 <TIM_ITRx_SetConfig>
      break;
 80080d6:	e003      	b.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	73fb      	strb	r3, [r7, #15]
      break;
 80080dc:	e000      	b.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80080de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	00100070 	.word	0x00100070
 8008100:	00100040 	.word	0x00100040
 8008104:	00100030 	.word	0x00100030
 8008108:	00100020 	.word	0x00100020

0800810c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d107      	bne.n	8008198 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008196:	e02a      	b.n	80081ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d107      	bne.n	80081b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2202      	movs	r2, #2
 80081a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081b0:	e01d      	b.n	80081ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d107      	bne.n	80081cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2204      	movs	r2, #4
 80081c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081ca:	e010      	b.n	80081ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d107      	bne.n	80081e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2208      	movs	r2, #8
 80081da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081e4:	e003      	b.n	80081ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7ff ffb4 	bl	800815c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	771a      	strb	r2, [r3, #28]
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d10b      	bne.n	8008232 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d136      	bne.n	8008296 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008230:	e031      	b.n	8008296 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	429a      	cmp	r2, r3
 800823a:	d10b      	bne.n	8008254 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2202      	movs	r2, #2
 8008240:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d125      	bne.n	8008296 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008252:	e020      	b.n	8008296 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	429a      	cmp	r2, r3
 800825c:	d10b      	bne.n	8008276 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2204      	movs	r2, #4
 8008262:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d114      	bne.n	8008296 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008274:	e00f      	b.n	8008296 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	429a      	cmp	r2, r3
 800827e:	d10a      	bne.n	8008296 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2208      	movs	r2, #8
 8008284:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7f9 fdea 	bl	8001e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	771a      	strb	r2, [r3, #28]
}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d103      	bne.n	80082ca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	771a      	strb	r2, [r3, #28]
 80082c8:	e019      	b.n	80082fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d103      	bne.n	80082dc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2202      	movs	r2, #2
 80082d8:	771a      	strb	r2, [r3, #28]
 80082da:	e010      	b.n	80082fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d103      	bne.n	80082ee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2204      	movs	r2, #4
 80082ea:	771a      	strb	r2, [r3, #28]
 80082ec:	e007      	b.n	80082fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d102      	bne.n	80082fe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2208      	movs	r2, #8
 80082fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f7ff ff18 	bl	8008134 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	771a      	strb	r2, [r3, #28]
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a42      	ldr	r2, [pc, #264]	@ (8008430 <TIM_Base_SetConfig+0x11c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00f      	beq.n	800834c <TIM_Base_SetConfig+0x38>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008332:	d00b      	beq.n	800834c <TIM_Base_SetConfig+0x38>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a3f      	ldr	r2, [pc, #252]	@ (8008434 <TIM_Base_SetConfig+0x120>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d007      	beq.n	800834c <TIM_Base_SetConfig+0x38>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a3e      	ldr	r2, [pc, #248]	@ (8008438 <TIM_Base_SetConfig+0x124>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_Base_SetConfig+0x38>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a3d      	ldr	r2, [pc, #244]	@ (800843c <TIM_Base_SetConfig+0x128>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d108      	bne.n	800835e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a33      	ldr	r2, [pc, #204]	@ (8008430 <TIM_Base_SetConfig+0x11c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d01b      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800836c:	d017      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a30      	ldr	r2, [pc, #192]	@ (8008434 <TIM_Base_SetConfig+0x120>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d013      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a2f      	ldr	r2, [pc, #188]	@ (8008438 <TIM_Base_SetConfig+0x124>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00f      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a2e      	ldr	r2, [pc, #184]	@ (800843c <TIM_Base_SetConfig+0x128>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00b      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a2d      	ldr	r2, [pc, #180]	@ (8008440 <TIM_Base_SetConfig+0x12c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d007      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a2c      	ldr	r2, [pc, #176]	@ (8008444 <TIM_Base_SetConfig+0x130>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d003      	beq.n	800839e <TIM_Base_SetConfig+0x8a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a2b      	ldr	r2, [pc, #172]	@ (8008448 <TIM_Base_SetConfig+0x134>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d108      	bne.n	80083b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a16      	ldr	r2, [pc, #88]	@ (8008430 <TIM_Base_SetConfig+0x11c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00f      	beq.n	80083fc <TIM_Base_SetConfig+0xe8>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a17      	ldr	r2, [pc, #92]	@ (800843c <TIM_Base_SetConfig+0x128>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00b      	beq.n	80083fc <TIM_Base_SetConfig+0xe8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a16      	ldr	r2, [pc, #88]	@ (8008440 <TIM_Base_SetConfig+0x12c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d007      	beq.n	80083fc <TIM_Base_SetConfig+0xe8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a15      	ldr	r2, [pc, #84]	@ (8008444 <TIM_Base_SetConfig+0x130>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_Base_SetConfig+0xe8>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a14      	ldr	r2, [pc, #80]	@ (8008448 <TIM_Base_SetConfig+0x134>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d103      	bne.n	8008404 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b01      	cmp	r3, #1
 8008414:	d105      	bne.n	8008422 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f023 0201 	bic.w	r2, r3, #1
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	611a      	str	r2, [r3, #16]
  }
}
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40012c00 	.word	0x40012c00
 8008434:	40000400 	.word	0x40000400
 8008438:	40000800 	.word	0x40000800
 800843c:	40013400 	.word	0x40013400
 8008440:	40014000 	.word	0x40014000
 8008444:	40014400 	.word	0x40014400
 8008448:	40014800 	.word	0x40014800

0800844c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	f023 0201 	bic.w	r2, r3, #1
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800847a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800847e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0303 	bic.w	r3, r3, #3
 8008486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f023 0302 	bic.w	r3, r3, #2
 8008498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00f      	beq.n	80084cc <TIM_OC1_SetConfig+0x80>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a2b      	ldr	r2, [pc, #172]	@ (800855c <TIM_OC1_SetConfig+0x110>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d00b      	beq.n	80084cc <TIM_OC1_SetConfig+0x80>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008560 <TIM_OC1_SetConfig+0x114>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d007      	beq.n	80084cc <TIM_OC1_SetConfig+0x80>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a29      	ldr	r2, [pc, #164]	@ (8008564 <TIM_OC1_SetConfig+0x118>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d003      	beq.n	80084cc <TIM_OC1_SetConfig+0x80>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a28      	ldr	r2, [pc, #160]	@ (8008568 <TIM_OC1_SetConfig+0x11c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d10c      	bne.n	80084e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f023 0308 	bic.w	r3, r3, #8
 80084d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	4313      	orrs	r3, r2
 80084dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f023 0304 	bic.w	r3, r3, #4
 80084e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00f      	beq.n	800850e <TIM_OC1_SetConfig+0xc2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a1a      	ldr	r2, [pc, #104]	@ (800855c <TIM_OC1_SetConfig+0x110>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00b      	beq.n	800850e <TIM_OC1_SetConfig+0xc2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a19      	ldr	r2, [pc, #100]	@ (8008560 <TIM_OC1_SetConfig+0x114>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d007      	beq.n	800850e <TIM_OC1_SetConfig+0xc2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a18      	ldr	r2, [pc, #96]	@ (8008564 <TIM_OC1_SetConfig+0x118>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_OC1_SetConfig+0xc2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a17      	ldr	r2, [pc, #92]	@ (8008568 <TIM_OC1_SetConfig+0x11c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d111      	bne.n	8008532 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800851c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4313      	orrs	r3, r2
 8008526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	621a      	str	r2, [r3, #32]
}
 800854c:	bf00      	nop
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	40012c00 	.word	0x40012c00
 800855c:	40013400 	.word	0x40013400
 8008560:	40014000 	.word	0x40014000
 8008564:	40014400 	.word	0x40014400
 8008568:	40014800 	.word	0x40014800

0800856c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	f023 0210 	bic.w	r2, r3, #16
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800859a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800859e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f023 0320 	bic.w	r3, r3, #32
 80085ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a28      	ldr	r2, [pc, #160]	@ (800866c <TIM_OC2_SetConfig+0x100>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_OC2_SetConfig+0x6c>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a27      	ldr	r2, [pc, #156]	@ (8008670 <TIM_OC2_SetConfig+0x104>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d10d      	bne.n	80085f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a1d      	ldr	r2, [pc, #116]	@ (800866c <TIM_OC2_SetConfig+0x100>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00f      	beq.n	800861c <TIM_OC2_SetConfig+0xb0>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008670 <TIM_OC2_SetConfig+0x104>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00b      	beq.n	800861c <TIM_OC2_SetConfig+0xb0>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a1b      	ldr	r2, [pc, #108]	@ (8008674 <TIM_OC2_SetConfig+0x108>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d007      	beq.n	800861c <TIM_OC2_SetConfig+0xb0>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a1a      	ldr	r2, [pc, #104]	@ (8008678 <TIM_OC2_SetConfig+0x10c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d003      	beq.n	800861c <TIM_OC2_SetConfig+0xb0>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a19      	ldr	r2, [pc, #100]	@ (800867c <TIM_OC2_SetConfig+0x110>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d113      	bne.n	8008644 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800862a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	4313      	orrs	r3, r2
 8008642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	40012c00 	.word	0x40012c00
 8008670:	40013400 	.word	0x40013400
 8008674:	40014000 	.word	0x40014000
 8008678:	40014400 	.word	0x40014400
 800867c:	40014800 	.word	0x40014800

08008680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0303 	bic.w	r3, r3, #3
 80086ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a27      	ldr	r2, [pc, #156]	@ (800877c <TIM_OC3_SetConfig+0xfc>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d003      	beq.n	80086ea <TIM_OC3_SetConfig+0x6a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a26      	ldr	r2, [pc, #152]	@ (8008780 <TIM_OC3_SetConfig+0x100>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d10d      	bne.n	8008706 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a1c      	ldr	r2, [pc, #112]	@ (800877c <TIM_OC3_SetConfig+0xfc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00f      	beq.n	800872e <TIM_OC3_SetConfig+0xae>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a1b      	ldr	r2, [pc, #108]	@ (8008780 <TIM_OC3_SetConfig+0x100>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00b      	beq.n	800872e <TIM_OC3_SetConfig+0xae>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1a      	ldr	r2, [pc, #104]	@ (8008784 <TIM_OC3_SetConfig+0x104>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d007      	beq.n	800872e <TIM_OC3_SetConfig+0xae>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a19      	ldr	r2, [pc, #100]	@ (8008788 <TIM_OC3_SetConfig+0x108>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d003      	beq.n	800872e <TIM_OC3_SetConfig+0xae>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a18      	ldr	r2, [pc, #96]	@ (800878c <TIM_OC3_SetConfig+0x10c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d113      	bne.n	8008756 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800873c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	621a      	str	r2, [r3, #32]
}
 8008770:	bf00      	nop
 8008772:	371c      	adds	r7, #28
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	40012c00 	.word	0x40012c00
 8008780:	40013400 	.word	0x40013400
 8008784:	40014000 	.word	0x40014000
 8008788:	40014400 	.word	0x40014400
 800878c:	40014800 	.word	0x40014800

08008790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a1b      	ldr	r3, [r3, #32]
 80087a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	031b      	lsls	r3, r3, #12
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a28      	ldr	r2, [pc, #160]	@ (8008890 <TIM_OC4_SetConfig+0x100>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_OC4_SetConfig+0x6c>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a27      	ldr	r2, [pc, #156]	@ (8008894 <TIM_OC4_SetConfig+0x104>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d10d      	bne.n	8008818 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	031b      	lsls	r3, r3, #12
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a1d      	ldr	r2, [pc, #116]	@ (8008890 <TIM_OC4_SetConfig+0x100>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00f      	beq.n	8008840 <TIM_OC4_SetConfig+0xb0>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a1c      	ldr	r2, [pc, #112]	@ (8008894 <TIM_OC4_SetConfig+0x104>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00b      	beq.n	8008840 <TIM_OC4_SetConfig+0xb0>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a1b      	ldr	r2, [pc, #108]	@ (8008898 <TIM_OC4_SetConfig+0x108>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d007      	beq.n	8008840 <TIM_OC4_SetConfig+0xb0>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a1a      	ldr	r2, [pc, #104]	@ (800889c <TIM_OC4_SetConfig+0x10c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <TIM_OC4_SetConfig+0xb0>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a19      	ldr	r2, [pc, #100]	@ (80088a0 <TIM_OC4_SetConfig+0x110>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d113      	bne.n	8008868 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008846:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800884e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	019b      	lsls	r3, r3, #6
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	019b      	lsls	r3, r3, #6
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	4313      	orrs	r3, r2
 8008866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	621a      	str	r2, [r3, #32]
}
 8008882:	bf00      	nop
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40013400 	.word	0x40013400
 8008898:	40014000 	.word	0x40014000
 800889c:	40014400 	.word	0x40014400
 80088a0:	40014800 	.word	0x40014800

080088a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80088e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	041b      	lsls	r3, r3, #16
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a17      	ldr	r2, [pc, #92]	@ (8008958 <TIM_OC5_SetConfig+0xb4>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00f      	beq.n	800891e <TIM_OC5_SetConfig+0x7a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a16      	ldr	r2, [pc, #88]	@ (800895c <TIM_OC5_SetConfig+0xb8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d00b      	beq.n	800891e <TIM_OC5_SetConfig+0x7a>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a15      	ldr	r2, [pc, #84]	@ (8008960 <TIM_OC5_SetConfig+0xbc>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d007      	beq.n	800891e <TIM_OC5_SetConfig+0x7a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a14      	ldr	r2, [pc, #80]	@ (8008964 <TIM_OC5_SetConfig+0xc0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d003      	beq.n	800891e <TIM_OC5_SetConfig+0x7a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a13      	ldr	r2, [pc, #76]	@ (8008968 <TIM_OC5_SetConfig+0xc4>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d109      	bne.n	8008932 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008924:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	021b      	lsls	r3, r3, #8
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	621a      	str	r2, [r3, #32]
}
 800894c:	bf00      	nop
 800894e:	371c      	adds	r7, #28
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40013400 	.word	0x40013400
 8008960:	40014000 	.word	0x40014000
 8008964:	40014400 	.word	0x40014400
 8008968:	40014800 	.word	0x40014800

0800896c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	051b      	lsls	r3, r3, #20
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a18      	ldr	r2, [pc, #96]	@ (8008a24 <TIM_OC6_SetConfig+0xb8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00f      	beq.n	80089e8 <TIM_OC6_SetConfig+0x7c>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a17      	ldr	r2, [pc, #92]	@ (8008a28 <TIM_OC6_SetConfig+0xbc>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00b      	beq.n	80089e8 <TIM_OC6_SetConfig+0x7c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a16      	ldr	r2, [pc, #88]	@ (8008a2c <TIM_OC6_SetConfig+0xc0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d007      	beq.n	80089e8 <TIM_OC6_SetConfig+0x7c>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a15      	ldr	r2, [pc, #84]	@ (8008a30 <TIM_OC6_SetConfig+0xc4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d003      	beq.n	80089e8 <TIM_OC6_SetConfig+0x7c>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a14      	ldr	r2, [pc, #80]	@ (8008a34 <TIM_OC6_SetConfig+0xc8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d109      	bne.n	80089fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	029b      	lsls	r3, r3, #10
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	621a      	str	r2, [r3, #32]
}
 8008a16:	bf00      	nop
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	40012c00 	.word	0x40012c00
 8008a28:	40013400 	.word	0x40013400
 8008a2c:	40014000 	.word	0x40014000
 8008a30:	40014400 	.word	0x40014400
 8008a34:	40014800 	.word	0x40014800

08008a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	f023 0201 	bic.w	r2, r3, #1
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	011b      	lsls	r3, r3, #4
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f023 030a 	bic.w	r3, r3, #10
 8008a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	621a      	str	r2, [r3, #32]
}
 8008a8a:	bf00      	nop
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b087      	sub	sp, #28
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	60f8      	str	r0, [r7, #12]
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	f023 0210 	bic.w	r2, r3, #16
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	031b      	lsls	r3, r3, #12
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ad2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	621a      	str	r2, [r3, #32]
}
 8008aea:	bf00      	nop
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	f043 0307 	orr.w	r3, r3, #7
 8008b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	609a      	str	r2, [r3, #8]
}
 8008b24:	bf00      	nop
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	021a      	lsls	r2, r3, #8
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	609a      	str	r2, [r3, #8]
}
 8008b64:	bf00      	nop
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f003 031f 	and.w	r3, r3, #31
 8008b82:	2201      	movs	r2, #1
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	43db      	mvns	r3, r3
 8008b92:	401a      	ands	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a1a      	ldr	r2, [r3, #32]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f003 031f 	and.w	r3, r3, #31
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	621a      	str	r2, [r3, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
	...

08008bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e065      	b.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8008cac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d004      	beq.n	8008c08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a2b      	ldr	r2, [pc, #172]	@ (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d108      	bne.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008cac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d018      	beq.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c4a:	d013      	beq.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a18      	ldr	r2, [pc, #96]	@ (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d00e      	beq.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a17      	ldr	r2, [pc, #92]	@ (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d009      	beq.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a12      	ldr	r2, [pc, #72]	@ (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d004      	beq.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a13      	ldr	r2, [pc, #76]	@ (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d10c      	bne.n	8008c8e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	40012c00 	.word	0x40012c00
 8008cb0:	40013400 	.word	0x40013400
 8008cb4:	40000400 	.word	0x40000400
 8008cb8:	40000800 	.word	0x40000800
 8008cbc:	40014000 	.word	0x40014000

08008cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e042      	b.n	8008de4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d106      	bne.n	8008d76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7fa f8bb 	bl	8002eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2224      	movs	r2, #36	@ 0x24
 8008d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 0201 	bic.w	r2, r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 f834 	bl	8009e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fd65 	bl	800986c <UART_SetConfig>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e01b      	b.n	8008de4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f042 0201 	orr.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 f8b3 	bl	8009f48 <UART_CheckIdleState>
 8008de2:	4603      	mov	r3, r0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	@ 0x28
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	603b      	str	r3, [r7, #0]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d17b      	bne.n	8008efe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <HAL_UART_Transmit+0x26>
 8008e0c:	88fb      	ldrh	r3, [r7, #6]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e074      	b.n	8008f00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2221      	movs	r2, #33	@ 0x21
 8008e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e26:	f7fa fa11 	bl	800324c <HAL_GetTick>
 8008e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	88fa      	ldrh	r2, [r7, #6]
 8008e30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	88fa      	ldrh	r2, [r7, #6]
 8008e38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e44:	d108      	bne.n	8008e58 <HAL_UART_Transmit+0x6c>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d104      	bne.n	8008e58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	61bb      	str	r3, [r7, #24]
 8008e56:	e003      	b.n	8008e60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e60:	e030      	b.n	8008ec4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2180      	movs	r1, #128	@ 0x80
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f001 f915 	bl	800a09c <UART_WaitOnFlagUntilTimeout>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e03d      	b.n	8008f00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10b      	bne.n	8008ea2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	3302      	adds	r3, #2
 8008e9e:	61bb      	str	r3, [r7, #24]
 8008ea0:	e007      	b.n	8008eb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	781a      	ldrb	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1c8      	bne.n	8008e62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2140      	movs	r1, #64	@ 0x40
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f001 f8de 	bl	800a09c <UART_WaitOnFlagUntilTimeout>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e006      	b.n	8008f00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e000      	b.n	8008f00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008efe:	2302      	movs	r3, #2
  }
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3720      	adds	r7, #32
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08a      	sub	sp, #40	@ 0x28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d137      	bne.n	8008f90 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <HAL_UART_Receive_DMA+0x24>
 8008f26:	88fb      	ldrh	r3, [r7, #6]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e030      	b.n	8008f92 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a18      	ldr	r2, [pc, #96]	@ (8008f9c <HAL_UART_Receive_DMA+0x94>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d01f      	beq.n	8008f80 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d018      	beq.n	8008f80 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6c:	623b      	str	r3, [r7, #32]
 8008f6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f70:	69f9      	ldr	r1, [r7, #28]
 8008f72:	6a3a      	ldr	r2, [r7, #32]
 8008f74:	e841 2300 	strex	r3, r2, [r1]
 8008f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e6      	bne.n	8008f4e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f80:	88fb      	ldrh	r3, [r7, #6]
 8008f82:	461a      	mov	r2, r3
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f001 f8f6 	bl	800a178 <UART_Start_Receive_DMA>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	e000      	b.n	8008f92 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f90:	2302      	movs	r3, #2
  }
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3728      	adds	r7, #40	@ 0x28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	40008000 	.word	0x40008000

08008fa0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b0a0      	sub	sp, #128	@ 0x80
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fb0:	e853 3f00 	ldrex	r3, [r3]
 8008fb4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008fb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fb8:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8008fbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fc8:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008fcc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008fce:	e841 2300 	strex	r3, r2, [r1]
 8008fd2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008fd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1e6      	bne.n	8008fa8 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3308      	adds	r3, #8
 8008fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fe4:	e853 3f00 	ldrex	r3, [r3]
 8008fe8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fec:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 8008ff0:	f023 0301 	bic.w	r3, r3, #1
 8008ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008ffe:	657a      	str	r2, [r7, #84]	@ 0x54
 8009000:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009004:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800900c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1e3      	bne.n	8008fda <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009016:	2b01      	cmp	r3, #1
 8009018:	d118      	bne.n	800904c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902a:	f023 0310 	bic.w	r3, r3, #16
 800902e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009038:	643b      	str	r3, [r7, #64]	@ 0x40
 800903a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800903e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e6      	bne.n	800901a <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009056:	2b80      	cmp	r3, #128	@ 0x80
 8009058:	d137      	bne.n	80090ca <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	61fb      	str	r3, [r7, #28]
   return(result);
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009070:	673b      	str	r3, [r7, #112]	@ 0x70
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800907a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800907c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e5      	bne.n	800905a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d019      	beq.n	80090ca <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800909a:	2200      	movs	r2, #0
 800909c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fb ffb9 	bl	800501a <HAL_DMA_Abort>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00d      	beq.n	80090ca <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fc f920 	bl	80052f8 <HAL_DMA_GetError>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	d105      	bne.n	80090ca <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2210      	movs	r2, #16
 80090c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e073      	b.n	80091b2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d4:	2b40      	cmp	r3, #64	@ 0x40
 80090d6:	d13b      	bne.n	8009150 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3308      	adds	r3, #8
 80090de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	e853 3f00 	ldrex	r3, [r3]
 80090e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3308      	adds	r3, #8
 80090f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090f8:	61ba      	str	r2, [r7, #24]
 80090fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	6979      	ldr	r1, [r7, #20]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	e841 2300 	strex	r3, r2, [r1]
 8009104:	613b      	str	r3, [r7, #16]
   return(result);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e5      	bne.n	80090d8 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01c      	beq.n	8009150 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800911c:	2200      	movs	r2, #0
 800911e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009126:	4618      	mov	r0, r3
 8009128:	f7fb ff77 	bl	800501a <HAL_DMA_Abort>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00e      	beq.n	8009150 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009138:	4618      	mov	r0, r3
 800913a:	f7fc f8dd 	bl	80052f8 <HAL_DMA_GetError>
 800913e:	4603      	mov	r3, r0
 8009140:	2b20      	cmp	r3, #32
 8009142:	d105      	bne.n	8009150 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2210      	movs	r2, #16
 8009148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e030      	b.n	80091b2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	220f      	movs	r2, #15
 8009166:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800916c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009170:	d107      	bne.n	8009182 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	699a      	ldr	r2, [r3, #24]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f042 0210 	orr.w	r2, r2, #16
 8009180:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	699a      	ldr	r2, [r3, #24]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 0208 	orr.w	r2, r2, #8
 8009190:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3780      	adds	r7, #128	@ 0x80
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b0ba      	sub	sp, #232	@ 0xe8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80091e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80091ea:	4013      	ands	r3, r2
 80091ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80091f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d11b      	bne.n	8009230 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	d015      	beq.n	8009230 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d105      	bne.n	800921c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d009      	beq.n	8009230 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 8300 	beq.w	8009826 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	4798      	blx	r3
      }
      return;
 800922e:	e2fa      	b.n	8009826 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 8123 	beq.w	8009480 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800923a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800923e:	4b8d      	ldr	r3, [pc, #564]	@ (8009474 <HAL_UART_IRQHandler+0x2b8>)
 8009240:	4013      	ands	r3, r2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d106      	bne.n	8009254 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009246:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800924a:	4b8b      	ldr	r3, [pc, #556]	@ (8009478 <HAL_UART_IRQHandler+0x2bc>)
 800924c:	4013      	ands	r3, r2
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 8116 	beq.w	8009480 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d011      	beq.n	8009284 <HAL_UART_IRQHandler+0xc8>
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2201      	movs	r2, #1
 8009272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800927a:	f043 0201 	orr.w	r2, r3, #1
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d011      	beq.n	80092b4 <HAL_UART_IRQHandler+0xf8>
 8009290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00b      	beq.n	80092b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2202      	movs	r2, #2
 80092a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092aa:	f043 0204 	orr.w	r2, r3, #4
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d011      	beq.n	80092e4 <HAL_UART_IRQHandler+0x128>
 80092c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2204      	movs	r2, #4
 80092d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092da:	f043 0202 	orr.w	r2, r3, #2
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e8:	f003 0308 	and.w	r3, r3, #8
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d017      	beq.n	8009320 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80092fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009300:	4b5c      	ldr	r3, [pc, #368]	@ (8009474 <HAL_UART_IRQHandler+0x2b8>)
 8009302:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2208      	movs	r2, #8
 800930e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009316:	f043 0208 	orr.w	r2, r3, #8
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009328:	2b00      	cmp	r3, #0
 800932a:	d012      	beq.n	8009352 <HAL_UART_IRQHandler+0x196>
 800932c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009330:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00c      	beq.n	8009352 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009348:	f043 0220 	orr.w	r2, r3, #32
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 8266 	beq.w	800982a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800935e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009362:	f003 0320 	and.w	r3, r3, #32
 8009366:	2b00      	cmp	r3, #0
 8009368:	d013      	beq.n	8009392 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800936a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800936e:	f003 0320 	and.w	r3, r3, #32
 8009372:	2b00      	cmp	r3, #0
 8009374:	d105      	bne.n	8009382 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800937a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d007      	beq.n	8009392 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009398:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a6:	2b40      	cmp	r3, #64	@ 0x40
 80093a8:	d005      	beq.n	80093b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d054      	beq.n	8009460 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 ffc5 	bl	800a346 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c6:	2b40      	cmp	r3, #64	@ 0x40
 80093c8:	d146      	bne.n	8009458 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3308      	adds	r3, #8
 80093d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3308      	adds	r3, #8
 80093f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80093f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80093fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009406:	e841 2300 	strex	r3, r2, [r1]
 800940a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800940e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1d9      	bne.n	80093ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800941c:	2b00      	cmp	r3, #0
 800941e:	d017      	beq.n	8009450 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009426:	4a15      	ldr	r2, [pc, #84]	@ (800947c <HAL_UART_IRQHandler+0x2c0>)
 8009428:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009430:	4618      	mov	r0, r3
 8009432:	f7fb fe4b 	bl	80050cc <HAL_DMA_Abort_IT>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d019      	beq.n	8009470 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800944a:	4610      	mov	r0, r2
 800944c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944e:	e00f      	b.n	8009470 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f9f5 	bl	8009840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009456:	e00b      	b.n	8009470 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f9f1 	bl	8009840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945e:	e007      	b.n	8009470 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f9ed 	bl	8009840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800946e:	e1dc      	b.n	800982a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009470:	bf00      	nop
    return;
 8009472:	e1da      	b.n	800982a <HAL_UART_IRQHandler+0x66e>
 8009474:	10000001 	.word	0x10000001
 8009478:	04000120 	.word	0x04000120
 800947c:	0800a5fd 	.word	0x0800a5fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009484:	2b01      	cmp	r3, #1
 8009486:	f040 8170 	bne.w	800976a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800948a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800948e:	f003 0310 	and.w	r3, r3, #16
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 8169 	beq.w	800976a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800949c:	f003 0310 	and.w	r3, r3, #16
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 8162 	beq.w	800976a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2210      	movs	r2, #16
 80094ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b8:	2b40      	cmp	r3, #64	@ 0x40
 80094ba:	f040 80d8 	bne.w	800966e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80094cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 80af 	beq.w	8009634 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094e0:	429a      	cmp	r2, r3
 80094e2:	f080 80a7 	bcs.w	8009634 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f040 8087 	bne.w	8009612 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009518:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800951c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
 800952a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800952e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009532:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800953a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1da      	bne.n	8009504 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3308      	adds	r3, #8
 8009554:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800955e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009560:	f023 0301 	bic.w	r3, r3, #1
 8009564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3308      	adds	r3, #8
 800956e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009572:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009576:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800957a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e1      	bne.n	800954e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3308      	adds	r3, #8
 8009590:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009594:	e853 3f00 	ldrex	r3, [r3]
 8009598:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800959a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800959c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80095bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e3      	bne.n	800958a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80095de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095e0:	f023 0310 	bic.w	r3, r3, #16
 80095e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e4      	bne.n	80095d0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800960c:	4618      	mov	r0, r3
 800960e:	f7fb fd04 	bl	800501a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2202      	movs	r2, #2
 8009616:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009624:	b29b      	uxth	r3, r3
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	b29b      	uxth	r3, r3
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f911 	bl	8009854 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009632:	e0fc      	b.n	800982e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800963a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800963e:	429a      	cmp	r2, r3
 8009640:	f040 80f5 	bne.w	800982e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b20      	cmp	r3, #32
 8009654:	f040 80eb 	bne.w	800982e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f8f4 	bl	8009854 <HAL_UARTEx_RxEventCallback>
      return;
 800966c:	e0df      	b.n	800982e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800967a:	b29b      	uxth	r3, r3
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009688:	b29b      	uxth	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 80d1 	beq.w	8009832 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 80cc 	beq.w	8009832 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80096be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096c4:	e841 2300 	strex	r3, r2, [r1]
 80096c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1e4      	bne.n	800969a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3308      	adds	r3, #8
 80096d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	623b      	str	r3, [r7, #32]
   return(result);
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096e6:	f023 0301 	bic.w	r3, r3, #1
 80096ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3308      	adds	r3, #8
 80096f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80096f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80096fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e1      	bne.n	80096d0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2220      	movs	r2, #32
 8009710:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	e853 3f00 	ldrex	r3, [r3]
 800972c:	60fb      	str	r3, [r7, #12]
   return(result);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f023 0310 	bic.w	r3, r3, #16
 8009734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009742:	61fb      	str	r3, [r7, #28]
 8009744:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	69b9      	ldr	r1, [r7, #24]
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	617b      	str	r3, [r7, #20]
   return(result);
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e4      	bne.n	8009720 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2202      	movs	r2, #2
 800975a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800975c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f876 	bl	8009854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009768:	e063      	b.n	8009832 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800976a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800976e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00e      	beq.n	8009794 <HAL_UART_IRQHandler+0x5d8>
 8009776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800977a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d008      	beq.n	8009794 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800978a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 ff72 	bl	800a676 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009792:	e051      	b.n	8009838 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800979c:	2b00      	cmp	r3, #0
 800979e:	d014      	beq.n	80097ca <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d105      	bne.n	80097b8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d008      	beq.n	80097ca <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d03a      	beq.n	8009836 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	4798      	blx	r3
    }
    return;
 80097c8:	e035      	b.n	8009836 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <HAL_UART_IRQHandler+0x62e>
 80097d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 ff1c 	bl	800a620 <UART_EndTransmit_IT>
    return;
 80097e8:	e026      	b.n	8009838 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d009      	beq.n	800980a <HAL_UART_IRQHandler+0x64e>
 80097f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 ff4b 	bl	800a69e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009808:	e016      	b.n	8009838 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800980a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800980e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d010      	beq.n	8009838 <HAL_UART_IRQHandler+0x67c>
 8009816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800981a:	2b00      	cmp	r3, #0
 800981c:	da0c      	bge.n	8009838 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 ff33 	bl	800a68a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009824:	e008      	b.n	8009838 <HAL_UART_IRQHandler+0x67c>
      return;
 8009826:	bf00      	nop
 8009828:	e006      	b.n	8009838 <HAL_UART_IRQHandler+0x67c>
    return;
 800982a:	bf00      	nop
 800982c:	e004      	b.n	8009838 <HAL_UART_IRQHandler+0x67c>
      return;
 800982e:	bf00      	nop
 8009830:	e002      	b.n	8009838 <HAL_UART_IRQHandler+0x67c>
      return;
 8009832:	bf00      	nop
 8009834:	e000      	b.n	8009838 <HAL_UART_IRQHandler+0x67c>
    return;
 8009836:	bf00      	nop
  }
}
 8009838:	37e8      	adds	r7, #232	@ 0xe8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop

08009840 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800986c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009870:	b08c      	sub	sp, #48	@ 0x30
 8009872:	af00      	add	r7, sp, #0
 8009874:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	689a      	ldr	r2, [r3, #8]
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	431a      	orrs	r2, r3
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	431a      	orrs	r2, r3
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	4313      	orrs	r3, r2
 8009892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	4bab      	ldr	r3, [pc, #684]	@ (8009b48 <UART_SetConfig+0x2dc>)
 800989c:	4013      	ands	r3, r2
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098a4:	430b      	orrs	r3, r1
 80098a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	68da      	ldr	r2, [r3, #12]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4aa0      	ldr	r2, [pc, #640]	@ (8009b4c <UART_SetConfig+0x2e0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d004      	beq.n	80098d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d4:	4313      	orrs	r3, r2
 80098d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80098e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	6812      	ldr	r2, [r2, #0]
 80098ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098ec:	430b      	orrs	r3, r1
 80098ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f6:	f023 010f 	bic.w	r1, r3, #15
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	430a      	orrs	r2, r1
 8009904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a91      	ldr	r2, [pc, #580]	@ (8009b50 <UART_SetConfig+0x2e4>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d125      	bne.n	800995c <UART_SetConfig+0xf0>
 8009910:	4b90      	ldr	r3, [pc, #576]	@ (8009b54 <UART_SetConfig+0x2e8>)
 8009912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	2b03      	cmp	r3, #3
 800991c:	d81a      	bhi.n	8009954 <UART_SetConfig+0xe8>
 800991e:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <UART_SetConfig+0xb8>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	08009935 	.word	0x08009935
 8009928:	08009945 	.word	0x08009945
 800992c:	0800993d 	.word	0x0800993d
 8009930:	0800994d 	.word	0x0800994d
 8009934:	2301      	movs	r3, #1
 8009936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993a:	e0d6      	b.n	8009aea <UART_SetConfig+0x27e>
 800993c:	2302      	movs	r3, #2
 800993e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009942:	e0d2      	b.n	8009aea <UART_SetConfig+0x27e>
 8009944:	2304      	movs	r3, #4
 8009946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800994a:	e0ce      	b.n	8009aea <UART_SetConfig+0x27e>
 800994c:	2308      	movs	r3, #8
 800994e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009952:	e0ca      	b.n	8009aea <UART_SetConfig+0x27e>
 8009954:	2310      	movs	r3, #16
 8009956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800995a:	e0c6      	b.n	8009aea <UART_SetConfig+0x27e>
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a7d      	ldr	r2, [pc, #500]	@ (8009b58 <UART_SetConfig+0x2ec>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d138      	bne.n	80099d8 <UART_SetConfig+0x16c>
 8009966:	4b7b      	ldr	r3, [pc, #492]	@ (8009b54 <UART_SetConfig+0x2e8>)
 8009968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800996c:	f003 030c 	and.w	r3, r3, #12
 8009970:	2b0c      	cmp	r3, #12
 8009972:	d82d      	bhi.n	80099d0 <UART_SetConfig+0x164>
 8009974:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <UART_SetConfig+0x110>)
 8009976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997a:	bf00      	nop
 800997c:	080099b1 	.word	0x080099b1
 8009980:	080099d1 	.word	0x080099d1
 8009984:	080099d1 	.word	0x080099d1
 8009988:	080099d1 	.word	0x080099d1
 800998c:	080099c1 	.word	0x080099c1
 8009990:	080099d1 	.word	0x080099d1
 8009994:	080099d1 	.word	0x080099d1
 8009998:	080099d1 	.word	0x080099d1
 800999c:	080099b9 	.word	0x080099b9
 80099a0:	080099d1 	.word	0x080099d1
 80099a4:	080099d1 	.word	0x080099d1
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099c9 	.word	0x080099c9
 80099b0:	2300      	movs	r3, #0
 80099b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099b6:	e098      	b.n	8009aea <UART_SetConfig+0x27e>
 80099b8:	2302      	movs	r3, #2
 80099ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099be:	e094      	b.n	8009aea <UART_SetConfig+0x27e>
 80099c0:	2304      	movs	r3, #4
 80099c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099c6:	e090      	b.n	8009aea <UART_SetConfig+0x27e>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ce:	e08c      	b.n	8009aea <UART_SetConfig+0x27e>
 80099d0:	2310      	movs	r3, #16
 80099d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d6:	e088      	b.n	8009aea <UART_SetConfig+0x27e>
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a5f      	ldr	r2, [pc, #380]	@ (8009b5c <UART_SetConfig+0x2f0>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d125      	bne.n	8009a2e <UART_SetConfig+0x1c2>
 80099e2:	4b5c      	ldr	r3, [pc, #368]	@ (8009b54 <UART_SetConfig+0x2e8>)
 80099e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80099ec:	2b30      	cmp	r3, #48	@ 0x30
 80099ee:	d016      	beq.n	8009a1e <UART_SetConfig+0x1b2>
 80099f0:	2b30      	cmp	r3, #48	@ 0x30
 80099f2:	d818      	bhi.n	8009a26 <UART_SetConfig+0x1ba>
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d00a      	beq.n	8009a0e <UART_SetConfig+0x1a2>
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	d814      	bhi.n	8009a26 <UART_SetConfig+0x1ba>
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <UART_SetConfig+0x19a>
 8009a00:	2b10      	cmp	r3, #16
 8009a02:	d008      	beq.n	8009a16 <UART_SetConfig+0x1aa>
 8009a04:	e00f      	b.n	8009a26 <UART_SetConfig+0x1ba>
 8009a06:	2300      	movs	r3, #0
 8009a08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a0c:	e06d      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a0e:	2302      	movs	r3, #2
 8009a10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a14:	e069      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a16:	2304      	movs	r3, #4
 8009a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a1c:	e065      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a1e:	2308      	movs	r3, #8
 8009a20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a24:	e061      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a26:	2310      	movs	r3, #16
 8009a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a2c:	e05d      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a4b      	ldr	r2, [pc, #300]	@ (8009b60 <UART_SetConfig+0x2f4>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d125      	bne.n	8009a84 <UART_SetConfig+0x218>
 8009a38:	4b46      	ldr	r3, [pc, #280]	@ (8009b54 <UART_SetConfig+0x2e8>)
 8009a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009a42:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a44:	d016      	beq.n	8009a74 <UART_SetConfig+0x208>
 8009a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a48:	d818      	bhi.n	8009a7c <UART_SetConfig+0x210>
 8009a4a:	2b80      	cmp	r3, #128	@ 0x80
 8009a4c:	d00a      	beq.n	8009a64 <UART_SetConfig+0x1f8>
 8009a4e:	2b80      	cmp	r3, #128	@ 0x80
 8009a50:	d814      	bhi.n	8009a7c <UART_SetConfig+0x210>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <UART_SetConfig+0x1f0>
 8009a56:	2b40      	cmp	r3, #64	@ 0x40
 8009a58:	d008      	beq.n	8009a6c <UART_SetConfig+0x200>
 8009a5a:	e00f      	b.n	8009a7c <UART_SetConfig+0x210>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a62:	e042      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a64:	2302      	movs	r3, #2
 8009a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a6a:	e03e      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a6c:	2304      	movs	r3, #4
 8009a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a72:	e03a      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a74:	2308      	movs	r3, #8
 8009a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a7a:	e036      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a7c:	2310      	movs	r3, #16
 8009a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a82:	e032      	b.n	8009aea <UART_SetConfig+0x27e>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a30      	ldr	r2, [pc, #192]	@ (8009b4c <UART_SetConfig+0x2e0>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d12a      	bne.n	8009ae4 <UART_SetConfig+0x278>
 8009a8e:	4b31      	ldr	r3, [pc, #196]	@ (8009b54 <UART_SetConfig+0x2e8>)
 8009a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a9c:	d01a      	beq.n	8009ad4 <UART_SetConfig+0x268>
 8009a9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aa2:	d81b      	bhi.n	8009adc <UART_SetConfig+0x270>
 8009aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aa8:	d00c      	beq.n	8009ac4 <UART_SetConfig+0x258>
 8009aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aae:	d815      	bhi.n	8009adc <UART_SetConfig+0x270>
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d003      	beq.n	8009abc <UART_SetConfig+0x250>
 8009ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ab8:	d008      	beq.n	8009acc <UART_SetConfig+0x260>
 8009aba:	e00f      	b.n	8009adc <UART_SetConfig+0x270>
 8009abc:	2300      	movs	r3, #0
 8009abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ac2:	e012      	b.n	8009aea <UART_SetConfig+0x27e>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aca:	e00e      	b.n	8009aea <UART_SetConfig+0x27e>
 8009acc:	2304      	movs	r3, #4
 8009ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ad2:	e00a      	b.n	8009aea <UART_SetConfig+0x27e>
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ada:	e006      	b.n	8009aea <UART_SetConfig+0x27e>
 8009adc:	2310      	movs	r3, #16
 8009ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae2:	e002      	b.n	8009aea <UART_SetConfig+0x27e>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a17      	ldr	r2, [pc, #92]	@ (8009b4c <UART_SetConfig+0x2e0>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	f040 80a8 	bne.w	8009c46 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009af6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009afa:	2b08      	cmp	r3, #8
 8009afc:	d834      	bhi.n	8009b68 <UART_SetConfig+0x2fc>
 8009afe:	a201      	add	r2, pc, #4	@ (adr r2, 8009b04 <UART_SetConfig+0x298>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b29 	.word	0x08009b29
 8009b08:	08009b69 	.word	0x08009b69
 8009b0c:	08009b31 	.word	0x08009b31
 8009b10:	08009b69 	.word	0x08009b69
 8009b14:	08009b37 	.word	0x08009b37
 8009b18:	08009b69 	.word	0x08009b69
 8009b1c:	08009b69 	.word	0x08009b69
 8009b20:	08009b69 	.word	0x08009b69
 8009b24:	08009b3f 	.word	0x08009b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b28:	f7fd f822 	bl	8006b70 <HAL_RCC_GetPCLK1Freq>
 8009b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b2e:	e021      	b.n	8009b74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b30:	4b0c      	ldr	r3, [pc, #48]	@ (8009b64 <UART_SetConfig+0x2f8>)
 8009b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b34:	e01e      	b.n	8009b74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b36:	f7fc ffaf 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8009b3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b3c:	e01a      	b.n	8009b74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b44:	e016      	b.n	8009b74 <UART_SetConfig+0x308>
 8009b46:	bf00      	nop
 8009b48:	cfff69f3 	.word	0xcfff69f3
 8009b4c:	40008000 	.word	0x40008000
 8009b50:	40013800 	.word	0x40013800
 8009b54:	40021000 	.word	0x40021000
 8009b58:	40004400 	.word	0x40004400
 8009b5c:	40004800 	.word	0x40004800
 8009b60:	40004c00 	.word	0x40004c00
 8009b64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 812a 	beq.w	8009dd0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b80:	4a9e      	ldr	r2, [pc, #632]	@ (8009dfc <UART_SetConfig+0x590>)
 8009b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b86:	461a      	mov	r2, r3
 8009b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b8e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	4613      	mov	r3, r2
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	4413      	add	r3, r2
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d305      	bcc.n	8009bac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d903      	bls.n	8009bb4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bb2:	e10d      	b.n	8009dd0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	60bb      	str	r3, [r7, #8]
 8009bba:	60fa      	str	r2, [r7, #12]
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc0:	4a8e      	ldr	r2, [pc, #568]	@ (8009dfc <UART_SetConfig+0x590>)
 8009bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	2200      	movs	r2, #0
 8009bca:	603b      	str	r3, [r7, #0]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bd6:	f7f6 ff91 	bl	8000afc <__aeabi_uldivmod>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	4610      	mov	r0, r2
 8009be0:	4619      	mov	r1, r3
 8009be2:	f04f 0200 	mov.w	r2, #0
 8009be6:	f04f 0300 	mov.w	r3, #0
 8009bea:	020b      	lsls	r3, r1, #8
 8009bec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bf0:	0202      	lsls	r2, r0, #8
 8009bf2:	6979      	ldr	r1, [r7, #20]
 8009bf4:	6849      	ldr	r1, [r1, #4]
 8009bf6:	0849      	lsrs	r1, r1, #1
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	eb12 0804 	adds.w	r8, r2, r4
 8009c02:	eb43 0905 	adc.w	r9, r3, r5
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	469a      	mov	sl, r3
 8009c0e:	4693      	mov	fp, r2
 8009c10:	4652      	mov	r2, sl
 8009c12:	465b      	mov	r3, fp
 8009c14:	4640      	mov	r0, r8
 8009c16:	4649      	mov	r1, r9
 8009c18:	f7f6 ff70 	bl	8000afc <__aeabi_uldivmod>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4613      	mov	r3, r2
 8009c22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c2a:	d308      	bcc.n	8009c3e <UART_SetConfig+0x3d2>
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c32:	d204      	bcs.n	8009c3e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6a3a      	ldr	r2, [r7, #32]
 8009c3a:	60da      	str	r2, [r3, #12]
 8009c3c:	e0c8      	b.n	8009dd0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c44:	e0c4      	b.n	8009dd0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c4e:	d167      	bne.n	8009d20 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009c50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c54:	2b08      	cmp	r3, #8
 8009c56:	d828      	bhi.n	8009caa <UART_SetConfig+0x43e>
 8009c58:	a201      	add	r2, pc, #4	@ (adr r2, 8009c60 <UART_SetConfig+0x3f4>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009c85 	.word	0x08009c85
 8009c64:	08009c8d 	.word	0x08009c8d
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	08009cab 	.word	0x08009cab
 8009c70:	08009c9b 	.word	0x08009c9b
 8009c74:	08009cab 	.word	0x08009cab
 8009c78:	08009cab 	.word	0x08009cab
 8009c7c:	08009cab 	.word	0x08009cab
 8009c80:	08009ca3 	.word	0x08009ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c84:	f7fc ff74 	bl	8006b70 <HAL_RCC_GetPCLK1Freq>
 8009c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c8a:	e014      	b.n	8009cb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c8c:	f7fc ff86 	bl	8006b9c <HAL_RCC_GetPCLK2Freq>
 8009c90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c92:	e010      	b.n	8009cb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c94:	4b5a      	ldr	r3, [pc, #360]	@ (8009e00 <UART_SetConfig+0x594>)
 8009c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c98:	e00d      	b.n	8009cb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c9a:	f7fc fefd 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8009c9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ca0:	e009      	b.n	8009cb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ca8:	e005      	b.n	8009cb6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 8089 	beq.w	8009dd0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc2:	4a4e      	ldr	r2, [pc, #312]	@ (8009dfc <UART_SetConfig+0x590>)
 8009cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cd0:	005a      	lsls	r2, r3, #1
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	085b      	lsrs	r3, r3, #1
 8009cd8:	441a      	add	r2, r3
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	2b0f      	cmp	r3, #15
 8009ce8:	d916      	bls.n	8009d18 <UART_SetConfig+0x4ac>
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cf0:	d212      	bcs.n	8009d18 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	f023 030f 	bic.w	r3, r3, #15
 8009cfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	085b      	lsrs	r3, r3, #1
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	f003 0307 	and.w	r3, r3, #7
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	8bfb      	ldrh	r3, [r7, #30]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	8bfa      	ldrh	r2, [r7, #30]
 8009d14:	60da      	str	r2, [r3, #12]
 8009d16:	e05b      	b.n	8009dd0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d1e:	e057      	b.n	8009dd0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d828      	bhi.n	8009d7a <UART_SetConfig+0x50e>
 8009d28:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <UART_SetConfig+0x4c4>)
 8009d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2e:	bf00      	nop
 8009d30:	08009d55 	.word	0x08009d55
 8009d34:	08009d5d 	.word	0x08009d5d
 8009d38:	08009d65 	.word	0x08009d65
 8009d3c:	08009d7b 	.word	0x08009d7b
 8009d40:	08009d6b 	.word	0x08009d6b
 8009d44:	08009d7b 	.word	0x08009d7b
 8009d48:	08009d7b 	.word	0x08009d7b
 8009d4c:	08009d7b 	.word	0x08009d7b
 8009d50:	08009d73 	.word	0x08009d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d54:	f7fc ff0c 	bl	8006b70 <HAL_RCC_GetPCLK1Freq>
 8009d58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d5a:	e014      	b.n	8009d86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d5c:	f7fc ff1e 	bl	8006b9c <HAL_RCC_GetPCLK2Freq>
 8009d60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d62:	e010      	b.n	8009d86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d64:	4b26      	ldr	r3, [pc, #152]	@ (8009e00 <UART_SetConfig+0x594>)
 8009d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d68:	e00d      	b.n	8009d86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d6a:	f7fc fe95 	bl	8006a98 <HAL_RCC_GetSysClockFreq>
 8009d6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d70:	e009      	b.n	8009d86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d78:	e005      	b.n	8009d86 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d84:	bf00      	nop
    }

    if (pclk != 0U)
 8009d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d021      	beq.n	8009dd0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d90:	4a1a      	ldr	r2, [pc, #104]	@ (8009dfc <UART_SetConfig+0x590>)
 8009d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d96:	461a      	mov	r2, r3
 8009d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	085b      	lsrs	r3, r3, #1
 8009da4:	441a      	add	r2, r3
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009db0:	6a3b      	ldr	r3, [r7, #32]
 8009db2:	2b0f      	cmp	r3, #15
 8009db4:	d909      	bls.n	8009dca <UART_SetConfig+0x55e>
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dbc:	d205      	bcs.n	8009dca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	60da      	str	r2, [r3, #12]
 8009dc8:	e002      	b.n	8009dd0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	2200      	movs	r2, #0
 8009de4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2200      	movs	r2, #0
 8009dea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009dec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3730      	adds	r7, #48	@ 0x30
 8009df4:	46bd      	mov	sp, r7
 8009df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dfa:	bf00      	nop
 8009dfc:	08011374 	.word	0x08011374
 8009e00:	00f42400 	.word	0x00f42400

08009e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e10:	f003 0308 	and.w	r3, r3, #8
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00a      	beq.n	8009e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00a      	beq.n	8009e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	430a      	orrs	r2, r1
 8009e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e54:	f003 0302 	and.w	r3, r3, #2
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00a      	beq.n	8009e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00a      	beq.n	8009e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	430a      	orrs	r2, r1
 8009e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e98:	f003 0310 	and.w	r3, r3, #16
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00a      	beq.n	8009eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eba:	f003 0320 	and.w	r3, r3, #32
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00a      	beq.n	8009ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d01a      	beq.n	8009f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f02:	d10a      	bne.n	8009f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00a      	beq.n	8009f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	605a      	str	r2, [r3, #4]
  }
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b098      	sub	sp, #96	@ 0x60
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f58:	f7f9 f978 	bl	800324c <HAL_GetTick>
 8009f5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0308 	and.w	r3, r3, #8
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d12f      	bne.n	8009fcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f74:	2200      	movs	r2, #0
 8009f76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f88e 	bl	800a09c <UART_WaitOnFlagUntilTimeout>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d022      	beq.n	8009fcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fac:	e841 2300 	strex	r3, r2, [r1]
 8009fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e6      	bne.n	8009f86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e063      	b.n	800a094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0304 	and.w	r3, r3, #4
 8009fd6:	2b04      	cmp	r3, #4
 8009fd8:	d149      	bne.n	800a06e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f857 	bl	800a09c <UART_WaitOnFlagUntilTimeout>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d03c      	beq.n	800a06e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffc:	e853 3f00 	ldrex	r3, [r3]
 800a000:	623b      	str	r3, [r7, #32]
   return(result);
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a012:	633b      	str	r3, [r7, #48]	@ 0x30
 800a014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e6      	bne.n	8009ff4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	3308      	adds	r3, #8
 800a02c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	60fb      	str	r3, [r7, #12]
   return(result);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f023 0301 	bic.w	r3, r3, #1
 800a03c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3308      	adds	r3, #8
 800a044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a046:	61fa      	str	r2, [r7, #28]
 800a048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04a:	69b9      	ldr	r1, [r7, #24]
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	e841 2300 	strex	r3, r2, [r1]
 800a052:	617b      	str	r3, [r7, #20]
   return(result);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1e5      	bne.n	800a026 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e012      	b.n	800a094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2220      	movs	r2, #32
 800a072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2220      	movs	r2, #32
 800a07a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3758      	adds	r7, #88	@ 0x58
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0ac:	e04f      	b.n	800a14e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b4:	d04b      	beq.n	800a14e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0b6:	f7f9 f8c9 	bl	800324c <HAL_GetTick>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d302      	bcc.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x30>
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e04e      	b.n	800a16e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 0304 	and.w	r3, r3, #4
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d037      	beq.n	800a14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b80      	cmp	r3, #128	@ 0x80
 800a0e2:	d034      	beq.n	800a14e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b40      	cmp	r3, #64	@ 0x40
 800a0e8:	d031      	beq.n	800a14e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	f003 0308 	and.w	r3, r3, #8
 800a0f4:	2b08      	cmp	r3, #8
 800a0f6:	d110      	bne.n	800a11a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2208      	movs	r2, #8
 800a0fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 f920 	bl	800a346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2208      	movs	r2, #8
 800a10a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e029      	b.n	800a16e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a128:	d111      	bne.n	800a14e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 f906 	bl	800a346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2220      	movs	r2, #32
 800a13e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e00f      	b.n	800a16e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	69da      	ldr	r2, [r3, #28]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4013      	ands	r3, r2
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	bf0c      	ite	eq
 800a15e:	2301      	moveq	r3, #1
 800a160:	2300      	movne	r3, #0
 800a162:	b2db      	uxtb	r3, r3
 800a164:	461a      	mov	r2, r3
 800a166:	79fb      	ldrb	r3, [r7, #7]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d0a0      	beq.n	800a0ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b096      	sub	sp, #88	@ 0x58
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4613      	mov	r3, r2
 800a184:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	88fa      	ldrh	r2, [r7, #6]
 800a190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2222      	movs	r2, #34	@ 0x22
 800a1a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d02d      	beq.n	800a20a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1b4:	4a40      	ldr	r2, [pc, #256]	@ (800a2b8 <UART_Start_Receive_DMA+0x140>)
 800a1b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1be:	4a3f      	ldr	r2, [pc, #252]	@ (800a2bc <UART_Start_Receive_DMA+0x144>)
 800a1c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1c8:	4a3d      	ldr	r2, [pc, #244]	@ (800a2c0 <UART_Start_Receive_DMA+0x148>)
 800a1ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3324      	adds	r3, #36	@ 0x24
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	88fb      	ldrh	r3, [r7, #6]
 800a1ec:	f7fa fe9a 	bl	8004f24 <HAL_DMA_Start_IT>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d009      	beq.n	800a20a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2210      	movs	r2, #16
 800a1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2220      	movs	r2, #32
 800a202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e051      	b.n	800a2ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d018      	beq.n	800a244 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a21a:	e853 3f00 	ldrex	r3, [r3]
 800a21e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a226:	657b      	str	r3, [r7, #84]	@ 0x54
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a230:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a232:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a234:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a238:	e841 2300 	strex	r3, r2, [r1]
 800a23c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a23e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e6      	bne.n	800a212 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3308      	adds	r3, #8
 800a24a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	f043 0301 	orr.w	r3, r3, #1
 800a25a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3308      	adds	r3, #8
 800a262:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a264:	637a      	str	r2, [r7, #52]	@ 0x34
 800a266:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a26a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e5      	bne.n	800a244 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3308      	adds	r3, #8
 800a27e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	613b      	str	r3, [r7, #16]
   return(result);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a28e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3308      	adds	r3, #8
 800a296:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a298:	623a      	str	r2, [r7, #32]
 800a29a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	69f9      	ldr	r1, [r7, #28]
 800a29e:	6a3a      	ldr	r2, [r7, #32]
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e5      	bne.n	800a278 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3758      	adds	r7, #88	@ 0x58
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800a413 	.word	0x0800a413
 800a2bc:	0800a53f 	.word	0x0800a53f
 800a2c0:	0800a57d 	.word	0x0800a57d

0800a2c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b08f      	sub	sp, #60	@ 0x3c
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	e853 3f00 	ldrex	r3, [r3]
 800a2d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2f2:	e841 2300 	strex	r3, r2, [r1]
 800a2f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e6      	bne.n	800a2cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3308      	adds	r3, #8
 800a304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a314:	633b      	str	r3, [r7, #48]	@ 0x30
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3308      	adds	r3, #8
 800a31c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a31e:	61ba      	str	r2, [r7, #24]
 800a320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	6979      	ldr	r1, [r7, #20]
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	613b      	str	r3, [r7, #16]
   return(result);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e5      	bne.n	800a2fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2220      	movs	r2, #32
 800a336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a33a:	bf00      	nop
 800a33c:	373c      	adds	r7, #60	@ 0x3c
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a346:	b480      	push	{r7}
 800a348:	b095      	sub	sp, #84	@ 0x54
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a356:	e853 3f00 	ldrex	r3, [r3]
 800a35a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	461a      	mov	r2, r3
 800a36a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a36c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a36e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a370:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a372:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a374:	e841 2300 	strex	r3, r2, [r1]
 800a378:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1e6      	bne.n	800a34e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3308      	adds	r3, #8
 800a386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	e853 3f00 	ldrex	r3, [r3]
 800a38e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a396:	f023 0301 	bic.w	r3, r3, #1
 800a39a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	3308      	adds	r3, #8
 800a3a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3ac:	e841 2300 	strex	r3, r2, [r1]
 800a3b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e3      	bne.n	800a380 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d118      	bne.n	800a3f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	e853 3f00 	ldrex	r3, [r3]
 800a3cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f023 0310 	bic.w	r3, r3, #16
 800a3d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3de:	61bb      	str	r3, [r7, #24]
 800a3e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e2:	6979      	ldr	r1, [r7, #20]
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e6      	bne.n	800a3c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a406:	bf00      	nop
 800a408:	3754      	adds	r7, #84	@ 0x54
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b09c      	sub	sp, #112	@ 0x70
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0320 	and.w	r3, r3, #32
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d171      	bne.n	800a512 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a42e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a430:	2200      	movs	r2, #0
 800a432:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a43e:	e853 3f00 	ldrex	r3, [r3]
 800a442:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a446:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a44a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a44c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	461a      	mov	r2, r3
 800a452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a454:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a456:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a458:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a45a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a45c:	e841 2300 	strex	r3, r2, [r1]
 800a460:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e6      	bne.n	800a436 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3308      	adds	r3, #8
 800a46e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a47a:	f023 0301 	bic.w	r3, r3, #1
 800a47e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a488:	647a      	str	r2, [r7, #68]	@ 0x44
 800a48a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a48e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e5      	bne.n	800a468 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a49c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	623b      	str	r3, [r7, #32]
   return(result);
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4b2:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a4bc:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e5      	bne.n	800a49c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d118      	bne.n	800a512 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	e853 3f00 	ldrex	r3, [r3]
 800a4ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f023 0310 	bic.w	r3, r3, #16
 800a4f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4fe:	61fb      	str	r3, [r7, #28]
 800a500:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a502:	69b9      	ldr	r1, [r7, #24]
 800a504:	69fa      	ldr	r2, [r7, #28]
 800a506:	e841 2300 	strex	r3, r2, [r1]
 800a50a:	617b      	str	r3, [r7, #20]
   return(result);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1e6      	bne.n	800a4e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a514:	2200      	movs	r2, #0
 800a516:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a51a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d107      	bne.n	800a530 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a522:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a526:	4619      	mov	r1, r3
 800a528:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a52a:	f7ff f993 	bl	8009854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a52e:	e002      	b.n	800a536 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a530:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a532:	f7f8 fdb5 	bl	80030a0 <HAL_UART_RxCpltCallback>
}
 800a536:	bf00      	nop
 800a538:	3770      	adds	r7, #112	@ 0x70
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2201      	movs	r2, #1
 800a550:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a556:	2b01      	cmp	r3, #1
 800a558:	d109      	bne.n	800a56e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a560:	085b      	lsrs	r3, r3, #1
 800a562:	b29b      	uxth	r3, r3
 800a564:	4619      	mov	r1, r3
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f7ff f974 	bl	8009854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a56c:	e002      	b.n	800a574 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7f8 fdcc 	bl	800310c <HAL_UART_RxHalfCpltCallback>
}
 800a574:	bf00      	nop
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a588:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a590:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a598:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a4:	2b80      	cmp	r3, #128	@ 0x80
 800a5a6:	d109      	bne.n	800a5bc <UART_DMAError+0x40>
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	2b21      	cmp	r3, #33	@ 0x21
 800a5ac:	d106      	bne.n	800a5bc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a5b6:	6978      	ldr	r0, [r7, #20]
 800a5b8:	f7ff fe84 	bl	800a2c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5c6:	2b40      	cmp	r3, #64	@ 0x40
 800a5c8:	d109      	bne.n	800a5de <UART_DMAError+0x62>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b22      	cmp	r3, #34	@ 0x22
 800a5ce:	d106      	bne.n	800a5de <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a5d8:	6978      	ldr	r0, [r7, #20]
 800a5da:	f7ff feb4 	bl	800a346 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5e4:	f043 0210 	orr.w	r2, r3, #16
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5ee:	6978      	ldr	r0, [r7, #20]
 800a5f0:	f7ff f926 	bl	8009840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5f4:	bf00      	nop
 800a5f6:	3718      	adds	r7, #24
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff f914 	bl	8009840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a618:	bf00      	nop
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	60bb      	str	r3, [r7, #8]
   return(result);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a63c:	61fb      	str	r3, [r7, #28]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	461a      	mov	r2, r3
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	61bb      	str	r3, [r7, #24]
 800a648:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64a:	6979      	ldr	r1, [r7, #20]
 800a64c:	69ba      	ldr	r2, [r7, #24]
 800a64e:	e841 2300 	strex	r3, r2, [r1]
 800a652:	613b      	str	r3, [r7, #16]
   return(result);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e6      	bne.n	800a628 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2220      	movs	r2, #32
 800a65e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f7f8 fd85 	bl	8003178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a66e:	bf00      	nop
 800a670:	3720      	adds	r7, #32
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a67e:	bf00      	nop
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6a6:	bf00      	nop
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b085      	sub	sp, #20
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d101      	bne.n	800a6c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	e027      	b.n	800a718 <HAL_UARTEx_DisableFifoMode+0x66>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2224      	movs	r2, #36	@ 0x24
 800a6d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f022 0201 	bic.w	r2, r2, #1
 800a6ee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a6f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2220      	movs	r2, #32
 800a70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a734:	2b01      	cmp	r3, #1
 800a736:	d101      	bne.n	800a73c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a738:	2302      	movs	r3, #2
 800a73a:	e02d      	b.n	800a798 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2224      	movs	r2, #36	@ 0x24
 800a748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f022 0201 	bic.w	r2, r2, #1
 800a762:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f84f 	bl	800a81c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d101      	bne.n	800a7b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e02d      	b.n	800a814 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2224      	movs	r2, #36	@ 0x24
 800a7c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f022 0201 	bic.w	r2, r2, #1
 800a7de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f811 	bl	800a81c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2220      	movs	r2, #32
 800a806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d108      	bne.n	800a83e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a83c:	e031      	b.n	800a8a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a83e:	2308      	movs	r3, #8
 800a840:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a842:	2308      	movs	r3, #8
 800a844:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	0e5b      	lsrs	r3, r3, #25
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 0307 	and.w	r3, r3, #7
 800a854:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	0f5b      	lsrs	r3, r3, #29
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f003 0307 	and.w	r3, r3, #7
 800a864:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	7b3a      	ldrb	r2, [r7, #12]
 800a86a:	4911      	ldr	r1, [pc, #68]	@ (800a8b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a86c:	5c8a      	ldrb	r2, [r1, r2]
 800a86e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a872:	7b3a      	ldrb	r2, [r7, #12]
 800a874:	490f      	ldr	r1, [pc, #60]	@ (800a8b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a876:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a878:	fb93 f3f2 	sdiv	r3, r3, r2
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	7b7a      	ldrb	r2, [r7, #13]
 800a888:	4909      	ldr	r1, [pc, #36]	@ (800a8b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a88a:	5c8a      	ldrb	r2, [r1, r2]
 800a88c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a890:	7b7a      	ldrb	r2, [r7, #13]
 800a892:	4908      	ldr	r1, [pc, #32]	@ (800a8b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a894:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a896:	fb93 f3f2 	sdiv	r3, r3, r2
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a8a2:	bf00      	nop
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	0801138c 	.word	0x0801138c
 800a8b4:	08011394 	.word	0x08011394

0800a8b8 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800a8bc:	4907      	ldr	r1, [pc, #28]	@ (800a8dc <MX_FATFS_Init+0x24>)
 800a8be:	4808      	ldr	r0, [pc, #32]	@ (800a8e0 <MX_FATFS_Init+0x28>)
 800a8c0:	f002 fe26 	bl	800d510 <FATFS_LinkDriver>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d002      	beq.n	800a8d0 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800a8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ce:	e003      	b.n	800a8d8 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800a8d0:	4b04      	ldr	r3, [pc, #16]	@ (800a8e4 <MX_FATFS_Init+0x2c>)
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800a8d6:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	20001068 	.word	0x20001068
 800a8e0:	20000018 	.word	0x20000018
 800a8e4:	2000106c 	.word	0x2000106c

0800a8e8 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a8ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	4603      	mov	r3, r0
 800a900:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800a902:	4b06      	ldr	r3, [pc, #24]	@ (800a91c <USER_initialize+0x24>)
 800a904:	2201      	movs	r2, #1
 800a906:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a908:	4b04      	ldr	r3, [pc, #16]	@ (800a91c <USER_initialize+0x24>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	20000014 	.word	0x20000014

0800a920 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	4603      	mov	r3, r0
 800a928:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800a92a:	4b06      	ldr	r3, [pc, #24]	@ (800a944 <USER_status+0x24>)
 800a92c:	2201      	movs	r2, #1
 800a92e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a930:	4b04      	ldr	r3, [pc, #16]	@ (800a944 <USER_status+0x24>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a936:	4618      	mov	r0, r3
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	20000014 	.word	0x20000014

0800a948 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	607a      	str	r2, [r7, #4]
 800a952:	603b      	str	r3, [r7, #0]
 800a954:	4603      	mov	r3, r0
 800a956:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800a958:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a966:	b480      	push	{r7}
 800a968:	b085      	sub	sp, #20
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	603b      	str	r3, [r7, #0]
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800a976:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	603a      	str	r2, [r7, #0]
 800a98e:	71fb      	strb	r3, [r7, #7]
 800a990:	460b      	mov	r3, r1
 800a992:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	73fb      	strb	r3, [r7, #15]
    return res;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
	...

0800a9a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	4a08      	ldr	r2, [pc, #32]	@ (800a9d8 <disk_status+0x30>)
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	79fa      	ldrb	r2, [r7, #7]
 800a9c0:	4905      	ldr	r1, [pc, #20]	@ (800a9d8 <disk_status+0x30>)
 800a9c2:	440a      	add	r2, r1
 800a9c4:	7a12      	ldrb	r2, [r2, #8]
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	4798      	blx	r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	20001098 	.word	0x20001098

0800a9dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	4a0d      	ldr	r2, [pc, #52]	@ (800aa24 <disk_initialize+0x48>)
 800a9ee:	5cd3      	ldrb	r3, [r2, r3]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d111      	bne.n	800aa18 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a9f4:	79fb      	ldrb	r3, [r7, #7]
 800a9f6:	4a0b      	ldr	r2, [pc, #44]	@ (800aa24 <disk_initialize+0x48>)
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a9fc:	79fb      	ldrb	r3, [r7, #7]
 800a9fe:	4a09      	ldr	r2, [pc, #36]	@ (800aa24 <disk_initialize+0x48>)
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	79fa      	ldrb	r2, [r7, #7]
 800aa0a:	4906      	ldr	r1, [pc, #24]	@ (800aa24 <disk_initialize+0x48>)
 800aa0c:	440a      	add	r2, r1
 800aa0e:	7a12      	ldrb	r2, [r2, #8]
 800aa10:	4610      	mov	r0, r2
 800aa12:	4798      	blx	r3
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	20001098 	.word	0x20001098

0800aa28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aa28:	b590      	push	{r4, r7, lr}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60b9      	str	r1, [r7, #8]
 800aa30:	607a      	str	r2, [r7, #4]
 800aa32:	603b      	str	r3, [r7, #0]
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	4a0a      	ldr	r2, [pc, #40]	@ (800aa64 <disk_read+0x3c>)
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	689c      	ldr	r4, [r3, #8]
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	4a07      	ldr	r2, [pc, #28]	@ (800aa64 <disk_read+0x3c>)
 800aa48:	4413      	add	r3, r2
 800aa4a:	7a18      	ldrb	r0, [r3, #8]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	68b9      	ldr	r1, [r7, #8]
 800aa52:	47a0      	blx	r4
 800aa54:	4603      	mov	r3, r0
 800aa56:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	371c      	adds	r7, #28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd90      	pop	{r4, r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20001098 	.word	0x20001098

0800aa68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aa68:	b590      	push	{r4, r7, lr}
 800aa6a:	b087      	sub	sp, #28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607a      	str	r2, [r7, #4]
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	4603      	mov	r3, r0
 800aa76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
 800aa7a:	4a0a      	ldr	r2, [pc, #40]	@ (800aaa4 <disk_write+0x3c>)
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	68dc      	ldr	r4, [r3, #12]
 800aa84:	7bfb      	ldrb	r3, [r7, #15]
 800aa86:	4a07      	ldr	r2, [pc, #28]	@ (800aaa4 <disk_write+0x3c>)
 800aa88:	4413      	add	r3, r2
 800aa8a:	7a18      	ldrb	r0, [r3, #8]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	68b9      	ldr	r1, [r7, #8]
 800aa92:	47a0      	blx	r4
 800aa94:	4603      	mov	r3, r0
 800aa96:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa98:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	371c      	adds	r7, #28
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd90      	pop	{r4, r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	20001098 	.word	0x20001098

0800aaa8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	603a      	str	r2, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
 800aab4:	460b      	mov	r3, r1
 800aab6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aab8:	79fb      	ldrb	r3, [r7, #7]
 800aaba:	4a09      	ldr	r2, [pc, #36]	@ (800aae0 <disk_ioctl+0x38>)
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	4413      	add	r3, r2
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	79fa      	ldrb	r2, [r7, #7]
 800aac6:	4906      	ldr	r1, [pc, #24]	@ (800aae0 <disk_ioctl+0x38>)
 800aac8:	440a      	add	r2, r1
 800aaca:	7a10      	ldrb	r0, [r2, #8]
 800aacc:	79b9      	ldrb	r1, [r7, #6]
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	4798      	blx	r3
 800aad2:	4603      	mov	r3, r0
 800aad4:	73fb      	strb	r3, [r7, #15]
  return res;
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20001098 	.word	0x20001098

0800aae4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aaf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800aaf8:	021b      	lsls	r3, r3, #8
 800aafa:	b21a      	sxth	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	b21b      	sxth	r3, r3
 800ab02:	4313      	orrs	r3, r2
 800ab04:	b21b      	sxth	r3, r3
 800ab06:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ab08:	89fb      	ldrh	r3, [r7, #14]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ab16:	b480      	push	{r7}
 800ab18:	b085      	sub	sp, #20
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3303      	adds	r3, #3
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	3202      	adds	r2, #2
 800ab2e:	7812      	ldrb	r2, [r2, #0]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	021b      	lsls	r3, r3, #8
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	3201      	adds	r2, #1
 800ab3c:	7812      	ldrb	r2, [r2, #0]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	021b      	lsls	r3, r3, #8
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	7812      	ldrb	r2, [r2, #0]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	60fb      	str	r3, [r7, #12]
	return rv;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	887a      	ldrh	r2, [r7, #2]
 800ab70:	b2d2      	uxtb	r2, r2
 800ab72:	701a      	strb	r2, [r3, #0]
 800ab74:	887b      	ldrh	r3, [r7, #2]
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	887a      	ldrh	r2, [r7, #2]
 800ab82:	b2d2      	uxtb	r2, r2
 800ab84:	701a      	strb	r2, [r3, #0]
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	607a      	str	r2, [r7, #4]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	0a1b      	lsrs	r3, r3, #8
 800abac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	683a      	ldr	r2, [r7, #0]
 800abb6:	b2d2      	uxtb	r2, r2
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	0a1b      	lsrs	r3, r3, #8
 800abbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	607a      	str	r2, [r7, #4]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	b2d2      	uxtb	r2, r2
 800abca:	701a      	strb	r2, [r3, #0]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	0a1b      	lsrs	r3, r3, #8
 800abd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	701a      	strb	r2, [r3, #0]
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800abea:	b480      	push	{r7}
 800abec:	b087      	sub	sp, #28
 800abee:	af00      	add	r7, sp, #0
 800abf0:	60f8      	str	r0, [r7, #12]
 800abf2:	60b9      	str	r1, [r7, #8]
 800abf4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00d      	beq.n	800ac20 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	1c53      	adds	r3, r2, #1
 800ac08:	613b      	str	r3, [r7, #16]
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	1c59      	adds	r1, r3, #1
 800ac0e:	6179      	str	r1, [r7, #20]
 800ac10:	7812      	ldrb	r2, [r2, #0]
 800ac12:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	607b      	str	r3, [r7, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d1f1      	bne.n	800ac04 <mem_cpy+0x1a>
	}
}
 800ac20:	bf00      	nop
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	617a      	str	r2, [r7, #20]
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	b2d2      	uxtb	r2, r2
 800ac46:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	607b      	str	r3, [r7, #4]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1f3      	bne.n	800ac3c <mem_set+0x10>
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ac62:	b480      	push	{r7}
 800ac64:	b089      	sub	sp, #36	@ 0x24
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	60f8      	str	r0, [r7, #12]
 800ac6a:	60b9      	str	r1, [r7, #8]
 800ac6c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	61fb      	str	r3, [r7, #28]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	1c5a      	adds	r2, r3, #1
 800ac7e:	61fa      	str	r2, [r7, #28]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	4619      	mov	r1, r3
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	61ba      	str	r2, [r7, #24]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	1acb      	subs	r3, r1, r3
 800ac8e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	3b01      	subs	r3, #1
 800ac94:	607b      	str	r3, [r7, #4]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <mem_cmp+0x40>
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0eb      	beq.n	800ac7a <mem_cmp+0x18>

	return r;
 800aca2:	697b      	ldr	r3, [r7, #20]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3724      	adds	r7, #36	@ 0x24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800acba:	e002      	b.n	800acc2 <chk_chr+0x12>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	3301      	adds	r3, #1
 800acc0:	607b      	str	r3, [r7, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d005      	beq.n	800acd6 <chk_chr+0x26>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d1f2      	bne.n	800acbc <chk_chr+0xc>
	return *str;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	781b      	ldrb	r3, [r3, #0]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d009      	beq.n	800ad08 <lock_fs+0x22>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f002 fc42 	bl	800d582 <ff_req_grant>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <lock_fs+0x22>
 800ad04:	2301      	movs	r3, #1
 800ad06:	e000      	b.n	800ad0a <lock_fs+0x24>
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00d      	beq.n	800ad40 <unlock_fs+0x2e>
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	2b0c      	cmp	r3, #12
 800ad28:	d00a      	beq.n	800ad40 <unlock_fs+0x2e>
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	2b0b      	cmp	r3, #11
 800ad2e:	d007      	beq.n	800ad40 <unlock_fs+0x2e>
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	2b0f      	cmp	r3, #15
 800ad34:	d004      	beq.n	800ad40 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f002 fc36 	bl	800d5ac <ff_rel_grant>
	}
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad52:	2300      	movs	r3, #0
 800ad54:	60bb      	str	r3, [r7, #8]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	e029      	b.n	800adb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ad5c:	4a27      	ldr	r2, [pc, #156]	@ (800adfc <chk_lock+0xb4>)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	011b      	lsls	r3, r3, #4
 800ad62:	4413      	add	r3, r2
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d01d      	beq.n	800ada6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad6a:	4a24      	ldr	r2, [pc, #144]	@ (800adfc <chk_lock+0xb4>)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	4413      	add	r3, r2
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d116      	bne.n	800adaa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ad7c:	4a1f      	ldr	r2, [pc, #124]	@ (800adfc <chk_lock+0xb4>)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	011b      	lsls	r3, r3, #4
 800ad82:	4413      	add	r3, r2
 800ad84:	3304      	adds	r3, #4
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d10c      	bne.n	800adaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ad90:	4a1a      	ldr	r2, [pc, #104]	@ (800adfc <chk_lock+0xb4>)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	011b      	lsls	r3, r3, #4
 800ad96:	4413      	add	r3, r2
 800ad98:	3308      	adds	r3, #8
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d102      	bne.n	800adaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ada4:	e007      	b.n	800adb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ada6:	2301      	movs	r3, #1
 800ada8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	3301      	adds	r3, #1
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d9d2      	bls.n	800ad5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d109      	bne.n	800add0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d102      	bne.n	800adc8 <chk_lock+0x80>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d101      	bne.n	800adcc <chk_lock+0x84>
 800adc8:	2300      	movs	r3, #0
 800adca:	e010      	b.n	800adee <chk_lock+0xa6>
 800adcc:	2312      	movs	r3, #18
 800adce:	e00e      	b.n	800adee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d108      	bne.n	800ade8 <chk_lock+0xa0>
 800add6:	4a09      	ldr	r2, [pc, #36]	@ (800adfc <chk_lock+0xb4>)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	011b      	lsls	r3, r3, #4
 800addc:	4413      	add	r3, r2
 800adde:	330c      	adds	r3, #12
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ade6:	d101      	bne.n	800adec <chk_lock+0xa4>
 800ade8:	2310      	movs	r3, #16
 800adea:	e000      	b.n	800adee <chk_lock+0xa6>
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	20001078 	.word	0x20001078

0800ae00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae06:	2300      	movs	r3, #0
 800ae08:	607b      	str	r3, [r7, #4]
 800ae0a:	e002      	b.n	800ae12 <enq_lock+0x12>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	607b      	str	r3, [r7, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d806      	bhi.n	800ae26 <enq_lock+0x26>
 800ae18:	4a09      	ldr	r2, [pc, #36]	@ (800ae40 <enq_lock+0x40>)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	4413      	add	r3, r2
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1f2      	bne.n	800ae0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	bf14      	ite	ne
 800ae2c:	2301      	movne	r3, #1
 800ae2e:	2300      	moveq	r3, #0
 800ae30:	b2db      	uxtb	r3, r3
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	20001078 	.word	0x20001078

0800ae44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
 800ae52:	e01f      	b.n	800ae94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ae54:	4a41      	ldr	r2, [pc, #260]	@ (800af5c <inc_lock+0x118>)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	4413      	add	r3, r2
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d113      	bne.n	800ae8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ae66:	4a3d      	ldr	r2, [pc, #244]	@ (800af5c <inc_lock+0x118>)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	011b      	lsls	r3, r3, #4
 800ae6c:	4413      	add	r3, r2
 800ae6e:	3304      	adds	r3, #4
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d109      	bne.n	800ae8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ae7a:	4a38      	ldr	r2, [pc, #224]	@ (800af5c <inc_lock+0x118>)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	011b      	lsls	r3, r3, #4
 800ae80:	4413      	add	r3, r2
 800ae82:	3308      	adds	r3, #8
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d006      	beq.n	800ae9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3301      	adds	r3, #1
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d9dc      	bls.n	800ae54 <inc_lock+0x10>
 800ae9a:	e000      	b.n	800ae9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ae9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d132      	bne.n	800af0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]
 800aea8:	e002      	b.n	800aeb0 <inc_lock+0x6c>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3301      	adds	r3, #1
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d806      	bhi.n	800aec4 <inc_lock+0x80>
 800aeb6:	4a29      	ldr	r2, [pc, #164]	@ (800af5c <inc_lock+0x118>)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	4413      	add	r3, r2
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1f2      	bne.n	800aeaa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d101      	bne.n	800aece <inc_lock+0x8a>
 800aeca:	2300      	movs	r3, #0
 800aecc:	e040      	b.n	800af50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	4922      	ldr	r1, [pc, #136]	@ (800af5c <inc_lock+0x118>)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	011b      	lsls	r3, r3, #4
 800aed8:	440b      	add	r3, r1
 800aeda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	689a      	ldr	r2, [r3, #8]
 800aee0:	491e      	ldr	r1, [pc, #120]	@ (800af5c <inc_lock+0x118>)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	440b      	add	r3, r1
 800aee8:	3304      	adds	r3, #4
 800aeea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	695a      	ldr	r2, [r3, #20]
 800aef0:	491a      	ldr	r1, [pc, #104]	@ (800af5c <inc_lock+0x118>)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	011b      	lsls	r3, r3, #4
 800aef6:	440b      	add	r3, r1
 800aef8:	3308      	adds	r3, #8
 800aefa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aefc:	4a17      	ldr	r2, [pc, #92]	@ (800af5c <inc_lock+0x118>)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	011b      	lsls	r3, r3, #4
 800af02:	4413      	add	r3, r2
 800af04:	330c      	adds	r3, #12
 800af06:	2200      	movs	r2, #0
 800af08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d009      	beq.n	800af24 <inc_lock+0xe0>
 800af10:	4a12      	ldr	r2, [pc, #72]	@ (800af5c <inc_lock+0x118>)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	011b      	lsls	r3, r3, #4
 800af16:	4413      	add	r3, r2
 800af18:	330c      	adds	r3, #12
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <inc_lock+0xe0>
 800af20:	2300      	movs	r3, #0
 800af22:	e015      	b.n	800af50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d108      	bne.n	800af3c <inc_lock+0xf8>
 800af2a:	4a0c      	ldr	r2, [pc, #48]	@ (800af5c <inc_lock+0x118>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	4413      	add	r3, r2
 800af32:	330c      	adds	r3, #12
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	3301      	adds	r3, #1
 800af38:	b29a      	uxth	r2, r3
 800af3a:	e001      	b.n	800af40 <inc_lock+0xfc>
 800af3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af40:	4906      	ldr	r1, [pc, #24]	@ (800af5c <inc_lock+0x118>)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	011b      	lsls	r3, r3, #4
 800af46:	440b      	add	r3, r1
 800af48:	330c      	adds	r3, #12
 800af4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3301      	adds	r3, #1
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20001078 	.word	0x20001078

0800af60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	607b      	str	r3, [r7, #4]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d825      	bhi.n	800afc0 <dec_lock+0x60>
		n = Files[i].ctr;
 800af74:	4a17      	ldr	r2, [pc, #92]	@ (800afd4 <dec_lock+0x74>)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	011b      	lsls	r3, r3, #4
 800af7a:	4413      	add	r3, r2
 800af7c:	330c      	adds	r3, #12
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800af82:	89fb      	ldrh	r3, [r7, #14]
 800af84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af88:	d101      	bne.n	800af8e <dec_lock+0x2e>
 800af8a:	2300      	movs	r3, #0
 800af8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800af8e:	89fb      	ldrh	r3, [r7, #14]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <dec_lock+0x3a>
 800af94:	89fb      	ldrh	r3, [r7, #14]
 800af96:	3b01      	subs	r3, #1
 800af98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800af9a:	4a0e      	ldr	r2, [pc, #56]	@ (800afd4 <dec_lock+0x74>)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	4413      	add	r3, r2
 800afa2:	330c      	adds	r3, #12
 800afa4:	89fa      	ldrh	r2, [r7, #14]
 800afa6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800afa8:	89fb      	ldrh	r3, [r7, #14]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d105      	bne.n	800afba <dec_lock+0x5a>
 800afae:	4a09      	ldr	r2, [pc, #36]	@ (800afd4 <dec_lock+0x74>)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	4413      	add	r3, r2
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	737b      	strb	r3, [r7, #13]
 800afbe:	e001      	b.n	800afc4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800afc0:	2302      	movs	r3, #2
 800afc2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800afc4:	7b7b      	ldrb	r3, [r7, #13]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20001078 	.word	0x20001078

0800afd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800afe0:	2300      	movs	r3, #0
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	e010      	b.n	800b008 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800afe6:	4a0d      	ldr	r2, [pc, #52]	@ (800b01c <clear_lock+0x44>)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	011b      	lsls	r3, r3, #4
 800afec:	4413      	add	r3, r2
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d105      	bne.n	800b002 <clear_lock+0x2a>
 800aff6:	4a09      	ldr	r2, [pc, #36]	@ (800b01c <clear_lock+0x44>)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	011b      	lsls	r3, r3, #4
 800affc:	4413      	add	r3, r2
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3301      	adds	r3, #1
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d9eb      	bls.n	800afe6 <clear_lock+0xe>
	}
}
 800b00e:	bf00      	nop
 800b010:	bf00      	nop
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	20001078 	.word	0x20001078

0800b020 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	78db      	ldrb	r3, [r3, #3]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d034      	beq.n	800b09e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b038:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	7858      	ldrb	r0, [r3, #1]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b044:	2301      	movs	r3, #1
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	f7ff fd0e 	bl	800aa68 <disk_write>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d002      	beq.n	800b058 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b052:	2301      	movs	r3, #1
 800b054:	73fb      	strb	r3, [r7, #15]
 800b056:	e022      	b.n	800b09e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	1ad2      	subs	r2, r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d217      	bcs.n	800b09e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	789b      	ldrb	r3, [r3, #2]
 800b072:	613b      	str	r3, [r7, #16]
 800b074:	e010      	b.n	800b098 <sync_window+0x78>
					wsect += fs->fsize;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4413      	add	r3, r2
 800b07e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	7858      	ldrb	r0, [r3, #1]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b08a:	2301      	movs	r3, #1
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	f7ff fceb 	bl	800aa68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	3b01      	subs	r3, #1
 800b096:	613b      	str	r3, [r7, #16]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d8eb      	bhi.n	800b076 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d01b      	beq.n	800b0f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff ffad 	bl	800b020 <sync_window>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d113      	bne.n	800b0f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	7858      	ldrb	r0, [r3, #1]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b0da:	2301      	movs	r3, #1
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	f7ff fca3 	bl	800aa28 <disk_read>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d004      	beq.n	800b0f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff ff87 	bl	800b020 <sync_window>
 800b112:	4603      	mov	r3, r0
 800b114:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d158      	bne.n	800b1ce <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b03      	cmp	r3, #3
 800b122:	d148      	bne.n	800b1b6 <sync_fs+0xb2>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	791b      	ldrb	r3, [r3, #4]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d144      	bne.n	800b1b6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3334      	adds	r3, #52	@ 0x34
 800b130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b134:	2100      	movs	r1, #0
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff fd78 	bl	800ac2c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3334      	adds	r3, #52	@ 0x34
 800b140:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b144:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff fd07 	bl	800ab5c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3334      	adds	r3, #52	@ 0x34
 800b152:	4921      	ldr	r1, [pc, #132]	@ (800b1d8 <sync_fs+0xd4>)
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff fd1c 	bl	800ab92 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	3334      	adds	r3, #52	@ 0x34
 800b15e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b162:	491e      	ldr	r1, [pc, #120]	@ (800b1dc <sync_fs+0xd8>)
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff fd14 	bl	800ab92 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3334      	adds	r3, #52	@ 0x34
 800b16e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	4619      	mov	r1, r3
 800b178:	4610      	mov	r0, r2
 800b17a:	f7ff fd0a 	bl	800ab92 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3334      	adds	r3, #52	@ 0x34
 800b182:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	4619      	mov	r1, r3
 800b18c:	4610      	mov	r0, r2
 800b18e:	f7ff fd00 	bl	800ab92 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a1b      	ldr	r3, [r3, #32]
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	7858      	ldrb	r0, [r3, #1]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	f7ff fc5c 	bl	800aa68 <disk_write>
			fs->fsi_flag = 0;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	785b      	ldrb	r3, [r3, #1]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2100      	movs	r1, #0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7ff fc72 	bl	800aaa8 <disk_ioctl>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d001      	beq.n	800b1ce <sync_fs+0xca>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	41615252 	.word	0x41615252
 800b1dc:	61417272 	.word	0x61417272

0800b1e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	3b02      	subs	r3, #2
 800b1ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	3b02      	subs	r3, #2
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d301      	bcc.n	800b200 <clust2sect+0x20>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	e008      	b.n	800b212 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	895b      	ldrh	r3, [r3, #10]
 800b204:	461a      	mov	r2, r3
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	fb03 f202 	mul.w	r2, r3, r2
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b210:	4413      	add	r3, r2
}
 800b212:	4618      	mov	r0, r3
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b086      	sub	sp, #24
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d904      	bls.n	800b23e <get_fat+0x20>
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d302      	bcc.n	800b244 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b23e:	2301      	movs	r3, #1
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	e08e      	b.n	800b362 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b244:	f04f 33ff 	mov.w	r3, #4294967295
 800b248:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d061      	beq.n	800b316 <get_fat+0xf8>
 800b252:	2b03      	cmp	r3, #3
 800b254:	dc7b      	bgt.n	800b34e <get_fat+0x130>
 800b256:	2b01      	cmp	r3, #1
 800b258:	d002      	beq.n	800b260 <get_fat+0x42>
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d041      	beq.n	800b2e2 <get_fat+0xc4>
 800b25e:	e076      	b.n	800b34e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	085b      	lsrs	r3, r3, #1
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	4413      	add	r3, r2
 800b26c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	0a5b      	lsrs	r3, r3, #9
 800b276:	4413      	add	r3, r2
 800b278:	4619      	mov	r1, r3
 800b27a:	6938      	ldr	r0, [r7, #16]
 800b27c:	f7ff ff14 	bl	800b0a8 <move_window>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d166      	bne.n	800b354 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	60fa      	str	r2, [r7, #12]
 800b28c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	4413      	add	r3, r2
 800b294:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b298:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	0a5b      	lsrs	r3, r3, #9
 800b2a2:	4413      	add	r3, r2
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6938      	ldr	r0, [r7, #16]
 800b2a8:	f7ff fefe 	bl	800b0a8 <move_window>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d152      	bne.n	800b358 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b2c0:	021b      	lsls	r3, r3, #8
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	f003 0301 	and.w	r3, r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <get_fat+0xba>
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	091b      	lsrs	r3, r3, #4
 800b2d6:	e002      	b.n	800b2de <get_fat+0xc0>
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2de:	617b      	str	r3, [r7, #20]
			break;
 800b2e0:	e03f      	b.n	800b362 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	0a1b      	lsrs	r3, r3, #8
 800b2ea:	4413      	add	r3, r2
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6938      	ldr	r0, [r7, #16]
 800b2f0:	f7ff feda 	bl	800b0a8 <move_window>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d130      	bne.n	800b35c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b308:	4413      	add	r3, r2
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff fbea 	bl	800aae4 <ld_word>
 800b310:	4603      	mov	r3, r0
 800b312:	617b      	str	r3, [r7, #20]
			break;
 800b314:	e025      	b.n	800b362 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	09db      	lsrs	r3, r3, #7
 800b31e:	4413      	add	r3, r2
 800b320:	4619      	mov	r1, r3
 800b322:	6938      	ldr	r0, [r7, #16]
 800b324:	f7ff fec0 	bl	800b0a8 <move_window>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d118      	bne.n	800b360 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b33c:	4413      	add	r3, r2
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff fbe9 	bl	800ab16 <ld_dword>
 800b344:	4603      	mov	r3, r0
 800b346:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b34a:	617b      	str	r3, [r7, #20]
			break;
 800b34c:	e009      	b.n	800b362 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b34e:	2301      	movs	r3, #1
 800b350:	617b      	str	r3, [r7, #20]
 800b352:	e006      	b.n	800b362 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b354:	bf00      	nop
 800b356:	e004      	b.n	800b362 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b358:	bf00      	nop
 800b35a:	e002      	b.n	800b362 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b35c:	bf00      	nop
 800b35e:	e000      	b.n	800b362 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b360:	bf00      	nop
		}
	}

	return val;
 800b362:	697b      	ldr	r3, [r7, #20]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3718      	adds	r7, #24
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b36c:	b590      	push	{r4, r7, lr}
 800b36e:	b089      	sub	sp, #36	@ 0x24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b378:	2302      	movs	r3, #2
 800b37a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	f240 80d9 	bls.w	800b536 <put_fat+0x1ca>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	f080 80d3 	bcs.w	800b536 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b03      	cmp	r3, #3
 800b396:	f000 8096 	beq.w	800b4c6 <put_fat+0x15a>
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	f300 80cb 	bgt.w	800b536 <put_fat+0x1ca>
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d002      	beq.n	800b3aa <put_fat+0x3e>
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d06e      	beq.n	800b486 <put_fat+0x11a>
 800b3a8:	e0c5      	b.n	800b536 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	61bb      	str	r3, [r7, #24]
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	085b      	lsrs	r3, r3, #1
 800b3b2:	69ba      	ldr	r2, [r7, #24]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	0a5b      	lsrs	r3, r3, #9
 800b3c0:	4413      	add	r3, r2
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7ff fe6f 	bl	800b0a8 <move_window>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3ce:	7ffb      	ldrb	r3, [r7, #31]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f040 80a9 	bne.w	800b528 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	1c59      	adds	r1, r3, #1
 800b3e0:	61b9      	str	r1, [r7, #24]
 800b3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e6:	4413      	add	r3, r2
 800b3e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	f003 0301 	and.w	r3, r3, #1
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00d      	beq.n	800b410 <put_fat+0xa4>
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	b25b      	sxtb	r3, r3
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	b25a      	sxtb	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	b25b      	sxtb	r3, r3
 800b404:	011b      	lsls	r3, r3, #4
 800b406:	b25b      	sxtb	r3, r3
 800b408:	4313      	orrs	r3, r2
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	e001      	b.n	800b414 <put_fat+0xa8>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	697a      	ldr	r2, [r7, #20]
 800b416:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	0a5b      	lsrs	r3, r3, #9
 800b426:	4413      	add	r3, r2
 800b428:	4619      	mov	r1, r3
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f7ff fe3c 	bl	800b0a8 <move_window>
 800b430:	4603      	mov	r3, r0
 800b432:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b434:	7ffb      	ldrb	r3, [r7, #31]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d178      	bne.n	800b52c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b446:	4413      	add	r3, r2
 800b448:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f003 0301 	and.w	r3, r3, #1
 800b450:	2b00      	cmp	r3, #0
 800b452:	d003      	beq.n	800b45c <put_fat+0xf0>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	091b      	lsrs	r3, r3, #4
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	e00e      	b.n	800b47a <put_fat+0x10e>
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	b25b      	sxtb	r3, r3
 800b462:	f023 030f 	bic.w	r3, r3, #15
 800b466:	b25a      	sxtb	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	0a1b      	lsrs	r3, r3, #8
 800b46c:	b25b      	sxtb	r3, r3
 800b46e:	f003 030f 	and.w	r3, r3, #15
 800b472:	b25b      	sxtb	r3, r3
 800b474:	4313      	orrs	r3, r2
 800b476:	b25b      	sxtb	r3, r3
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2201      	movs	r2, #1
 800b482:	70da      	strb	r2, [r3, #3]
			break;
 800b484:	e057      	b.n	800b536 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	0a1b      	lsrs	r3, r3, #8
 800b48e:	4413      	add	r3, r2
 800b490:	4619      	mov	r1, r3
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f7ff fe08 	bl	800b0a8 <move_window>
 800b498:	4603      	mov	r3, r0
 800b49a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b49c:	7ffb      	ldrb	r3, [r7, #31]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d146      	bne.n	800b530 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	005b      	lsls	r3, r3, #1
 800b4ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b4b0:	4413      	add	r3, r2
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	b292      	uxth	r2, r2
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff fb4f 	bl	800ab5c <st_word>
			fs->wflag = 1;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	70da      	strb	r2, [r3, #3]
			break;
 800b4c4:	e037      	b.n	800b536 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	09db      	lsrs	r3, r3, #7
 800b4ce:	4413      	add	r3, r2
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff fde8 	bl	800b0a8 <move_window>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4dc:	7ffb      	ldrb	r3, [r7, #31]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d128      	bne.n	800b534 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b4f6:	4413      	add	r3, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff fb0c 	bl	800ab16 <ld_dword>
 800b4fe:	4603      	mov	r3, r0
 800b500:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b504:	4323      	orrs	r3, r4
 800b506:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b516:	4413      	add	r3, r2
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff fb39 	bl	800ab92 <st_dword>
			fs->wflag = 1;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2201      	movs	r2, #1
 800b524:	70da      	strb	r2, [r3, #3]
			break;
 800b526:	e006      	b.n	800b536 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b528:	bf00      	nop
 800b52a:	e004      	b.n	800b536 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b52c:	bf00      	nop
 800b52e:	e002      	b.n	800b536 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b530:	bf00      	nop
 800b532:	e000      	b.n	800b536 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b534:	bf00      	nop
		}
	}
	return res;
 800b536:	7ffb      	ldrb	r3, [r7, #31]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3724      	adds	r7, #36	@ 0x24
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd90      	pop	{r4, r7, pc}

0800b540 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b088      	sub	sp, #32
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d904      	bls.n	800b566 <remove_chain+0x26>
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	429a      	cmp	r2, r3
 800b564:	d301      	bcc.n	800b56a <remove_chain+0x2a>
 800b566:	2302      	movs	r3, #2
 800b568:	e04b      	b.n	800b602 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00c      	beq.n	800b58a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b570:	f04f 32ff 	mov.w	r2, #4294967295
 800b574:	6879      	ldr	r1, [r7, #4]
 800b576:	69b8      	ldr	r0, [r7, #24]
 800b578:	f7ff fef8 	bl	800b36c <put_fat>
 800b57c:	4603      	mov	r3, r0
 800b57e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b580:	7ffb      	ldrb	r3, [r7, #31]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d001      	beq.n	800b58a <remove_chain+0x4a>
 800b586:	7ffb      	ldrb	r3, [r7, #31]
 800b588:	e03b      	b.n	800b602 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b58a:	68b9      	ldr	r1, [r7, #8]
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f7ff fe46 	bl	800b21e <get_fat>
 800b592:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d031      	beq.n	800b5fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d101      	bne.n	800b5a4 <remove_chain+0x64>
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	e02e      	b.n	800b602 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5aa:	d101      	bne.n	800b5b0 <remove_chain+0x70>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e028      	b.n	800b602 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	68b9      	ldr	r1, [r7, #8]
 800b5b4:	69b8      	ldr	r0, [r7, #24]
 800b5b6:	f7ff fed9 	bl	800b36c <put_fat>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b5be:	7ffb      	ldrb	r3, [r7, #31]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <remove_chain+0x88>
 800b5c4:	7ffb      	ldrb	r3, [r7, #31]
 800b5c6:	e01c      	b.n	800b602 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	695a      	ldr	r2, [r3, #20]
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	3b02      	subs	r3, #2
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d20b      	bcs.n	800b5ee <remove_chain+0xae>
			fs->free_clst++;
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	695b      	ldr	r3, [r3, #20]
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	791b      	ldrb	r3, [r3, #4]
 800b5e4:	f043 0301 	orr.w	r3, r3, #1
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d3c6      	bcc.n	800b58a <remove_chain+0x4a>
 800b5fc:	e000      	b.n	800b600 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b5fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3720      	adds	r7, #32
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b088      	sub	sp, #32
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10d      	bne.n	800b63c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d004      	beq.n	800b636 <create_chain+0x2c>
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	69ba      	ldr	r2, [r7, #24]
 800b632:	429a      	cmp	r2, r3
 800b634:	d31b      	bcc.n	800b66e <create_chain+0x64>
 800b636:	2301      	movs	r3, #1
 800b638:	61bb      	str	r3, [r7, #24]
 800b63a:	e018      	b.n	800b66e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b63c:	6839      	ldr	r1, [r7, #0]
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fded 	bl	800b21e <get_fat>
 800b644:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d801      	bhi.n	800b650 <create_chain+0x46>
 800b64c:	2301      	movs	r3, #1
 800b64e:	e070      	b.n	800b732 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b656:	d101      	bne.n	800b65c <create_chain+0x52>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	e06a      	b.n	800b732 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	429a      	cmp	r2, r3
 800b664:	d201      	bcs.n	800b66a <create_chain+0x60>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	e063      	b.n	800b732 <create_chain+0x128>
		scl = clst;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	3301      	adds	r3, #1
 800b676:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	699b      	ldr	r3, [r3, #24]
 800b67c:	69fa      	ldr	r2, [r7, #28]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d307      	bcc.n	800b692 <create_chain+0x88>
				ncl = 2;
 800b682:	2302      	movs	r3, #2
 800b684:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b686:	69fa      	ldr	r2, [r7, #28]
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d901      	bls.n	800b692 <create_chain+0x88>
 800b68e:	2300      	movs	r3, #0
 800b690:	e04f      	b.n	800b732 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b692:	69f9      	ldr	r1, [r7, #28]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff fdc2 	bl	800b21e <get_fat>
 800b69a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00e      	beq.n	800b6c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d003      	beq.n	800b6b0 <create_chain+0xa6>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ae:	d101      	bne.n	800b6b4 <create_chain+0xaa>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	e03e      	b.n	800b732 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b6b4:	69fa      	ldr	r2, [r7, #28]
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d1da      	bne.n	800b672 <create_chain+0x68>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	e038      	b.n	800b732 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b6c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c6:	69f9      	ldr	r1, [r7, #28]
 800b6c8:	6938      	ldr	r0, [r7, #16]
 800b6ca:	f7ff fe4f 	bl	800b36c <put_fat>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b6d2:	7dfb      	ldrb	r3, [r7, #23]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d109      	bne.n	800b6ec <create_chain+0xe2>
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d006      	beq.n	800b6ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b6de:	69fa      	ldr	r2, [r7, #28]
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6938      	ldr	r0, [r7, #16]
 800b6e4:	f7ff fe42 	bl	800b36c <put_fat>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d116      	bne.n	800b720 <create_chain+0x116>
		fs->last_clst = ncl;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	69fa      	ldr	r2, [r7, #28]
 800b6f6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	695a      	ldr	r2, [r3, #20]
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	3b02      	subs	r3, #2
 800b702:	429a      	cmp	r2, r3
 800b704:	d804      	bhi.n	800b710 <create_chain+0x106>
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	1e5a      	subs	r2, r3, #1
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	791b      	ldrb	r3, [r3, #4]
 800b714:	f043 0301 	orr.w	r3, r3, #1
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	711a      	strb	r2, [r3, #4]
 800b71e:	e007      	b.n	800b730 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b720:	7dfb      	ldrb	r3, [r7, #23]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d102      	bne.n	800b72c <create_chain+0x122>
 800b726:	f04f 33ff 	mov.w	r3, #4294967295
 800b72a:	e000      	b.n	800b72e <create_chain+0x124>
 800b72c:	2301      	movs	r3, #1
 800b72e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b730:	69fb      	ldr	r3, [r7, #28]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3720      	adds	r7, #32
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b087      	sub	sp, #28
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74e:	3304      	adds	r3, #4
 800b750:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	0a5b      	lsrs	r3, r3, #9
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	8952      	ldrh	r2, [r2, #10]
 800b75a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b75e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	1d1a      	adds	r2, r3, #4
 800b764:	613a      	str	r2, [r7, #16]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <clmt_clust+0x3a>
 800b770:	2300      	movs	r3, #0
 800b772:	e010      	b.n	800b796 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d307      	bcc.n	800b78c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	617b      	str	r3, [r7, #20]
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	3304      	adds	r3, #4
 800b788:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b78a:	e7e9      	b.n	800b760 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b78c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	4413      	add	r3, r2
}
 800b796:	4618      	mov	r0, r3
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b086      	sub	sp, #24
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7b8:	d204      	bcs.n	800b7c4 <dir_sdi+0x22>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	f003 031f 	and.w	r3, r3, #31
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d001      	beq.n	800b7c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e063      	b.n	800b890 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <dir_sdi+0x46>
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d902      	bls.n	800b7e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10c      	bne.n	800b808 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	095b      	lsrs	r3, r3, #5
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	8912      	ldrh	r2, [r2, #8]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d301      	bcc.n	800b7fe <dir_sdi+0x5c>
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	e048      	b.n	800b890 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	61da      	str	r2, [r3, #28]
 800b806:	e029      	b.n	800b85c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	895b      	ldrh	r3, [r3, #10]
 800b80c:	025b      	lsls	r3, r3, #9
 800b80e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b810:	e019      	b.n	800b846 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6979      	ldr	r1, [r7, #20]
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff fd01 	bl	800b21e <get_fat>
 800b81c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b824:	d101      	bne.n	800b82a <dir_sdi+0x88>
 800b826:	2301      	movs	r3, #1
 800b828:	e032      	b.n	800b890 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d904      	bls.n	800b83a <dir_sdi+0x98>
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	697a      	ldr	r2, [r7, #20]
 800b836:	429a      	cmp	r2, r3
 800b838:	d301      	bcc.n	800b83e <dir_sdi+0x9c>
 800b83a:	2302      	movs	r3, #2
 800b83c:	e028      	b.n	800b890 <dir_sdi+0xee>
			ofs -= csz;
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d2e1      	bcs.n	800b812 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b84e:	6979      	ldr	r1, [r7, #20]
 800b850:	6938      	ldr	r0, [r7, #16]
 800b852:	f7ff fcc5 	bl	800b1e0 <clust2sect>
 800b856:	4602      	mov	r2, r0
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	69db      	ldr	r3, [r3, #28]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <dir_sdi+0xcc>
 800b86a:	2302      	movs	r3, #2
 800b86c:	e010      	b.n	800b890 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	69da      	ldr	r2, [r3, #28]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	0a5b      	lsrs	r3, r3, #9
 800b876:	441a      	add	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b888:	441a      	add	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	3320      	adds	r3, #32
 800b8ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	69db      	ldr	r3, [r3, #28]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d003      	beq.n	800b8c0 <dir_next+0x28>
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b8be:	d301      	bcc.n	800b8c4 <dir_next+0x2c>
 800b8c0:	2304      	movs	r3, #4
 800b8c2:	e0aa      	b.n	800ba1a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f040 8098 	bne.w	800ba00 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	1c5a      	adds	r2, r3, #1
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10b      	bne.n	800b8fa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	095b      	lsrs	r3, r3, #5
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	8912      	ldrh	r2, [r2, #8]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	f0c0 8088 	bcc.w	800ba00 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	61da      	str	r2, [r3, #28]
 800b8f6:	2304      	movs	r3, #4
 800b8f8:	e08f      	b.n	800ba1a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	0a5b      	lsrs	r3, r3, #9
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	8952      	ldrh	r2, [r2, #10]
 800b902:	3a01      	subs	r2, #1
 800b904:	4013      	ands	r3, r2
 800b906:	2b00      	cmp	r3, #0
 800b908:	d17a      	bne.n	800ba00 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	4619      	mov	r1, r3
 800b912:	4610      	mov	r0, r2
 800b914:	f7ff fc83 	bl	800b21e <get_fat>
 800b918:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d801      	bhi.n	800b924 <dir_next+0x8c>
 800b920:	2302      	movs	r3, #2
 800b922:	e07a      	b.n	800ba1a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92a:	d101      	bne.n	800b930 <dir_next+0x98>
 800b92c:	2301      	movs	r3, #1
 800b92e:	e074      	b.n	800ba1a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	429a      	cmp	r2, r3
 800b938:	d358      	bcc.n	800b9ec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d104      	bne.n	800b94a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	61da      	str	r2, [r3, #28]
 800b946:	2304      	movs	r3, #4
 800b948:	e067      	b.n	800ba1a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	4619      	mov	r1, r3
 800b952:	4610      	mov	r0, r2
 800b954:	f7ff fe59 	bl	800b60a <create_chain>
 800b958:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <dir_next+0xcc>
 800b960:	2307      	movs	r3, #7
 800b962:	e05a      	b.n	800ba1a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d101      	bne.n	800b96e <dir_next+0xd6>
 800b96a:	2302      	movs	r3, #2
 800b96c:	e055      	b.n	800ba1a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b974:	d101      	bne.n	800b97a <dir_next+0xe2>
 800b976:	2301      	movs	r3, #1
 800b978:	e04f      	b.n	800ba1a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f7ff fb50 	bl	800b020 <sync_window>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <dir_next+0xf2>
 800b986:	2301      	movs	r3, #1
 800b988:	e047      	b.n	800ba1a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3334      	adds	r3, #52	@ 0x34
 800b98e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b992:	2100      	movs	r1, #0
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff f949 	bl	800ac2c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b99a:	2300      	movs	r3, #0
 800b99c:	613b      	str	r3, [r7, #16]
 800b99e:	6979      	ldr	r1, [r7, #20]
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f7ff fc1d 	bl	800b1e0 <clust2sect>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9ac:	e012      	b.n	800b9d4 <dir_next+0x13c>
						fs->wflag = 1;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f7ff fb33 	bl	800b020 <sync_window>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <dir_next+0x12c>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e02a      	b.n	800ba1a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	613b      	str	r3, [r7, #16]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	895b      	ldrh	r3, [r3, #10]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d3e6      	bcc.n	800b9ae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	1ad2      	subs	r2, r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b9f2:	6979      	ldr	r1, [r7, #20]
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f7ff fbf3 	bl	800b1e0 <clust2sect>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba12:	441a      	add	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b086      	sub	sp, #24
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ba32:	2100      	movs	r1, #0
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7ff feb4 	bl	800b7a2 <dir_sdi>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d12b      	bne.n	800ba9c <dir_alloc+0x7a>
		n = 0;
 800ba44:	2300      	movs	r3, #0
 800ba46:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7ff fb2a 	bl	800b0a8 <move_window>
 800ba54:	4603      	mov	r3, r0
 800ba56:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba58:	7dfb      	ldrb	r3, [r7, #23]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d11d      	bne.n	800ba9a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	2be5      	cmp	r3, #229	@ 0xe5
 800ba66:	d004      	beq.n	800ba72 <dir_alloc+0x50>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a1b      	ldr	r3, [r3, #32]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d107      	bne.n	800ba82 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	3301      	adds	r3, #1
 800ba76:	613b      	str	r3, [r7, #16]
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d102      	bne.n	800ba86 <dir_alloc+0x64>
 800ba80:	e00c      	b.n	800ba9c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ba82:	2300      	movs	r3, #0
 800ba84:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ba86:	2101      	movs	r1, #1
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff ff05 	bl	800b898 <dir_next>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ba92:	7dfb      	ldrb	r3, [r7, #23]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d0d7      	beq.n	800ba48 <dir_alloc+0x26>
 800ba98:	e000      	b.n	800ba9c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ba9a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ba9c:	7dfb      	ldrb	r3, [r7, #23]
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d101      	bne.n	800baa6 <dir_alloc+0x84>
 800baa2:	2307      	movs	r3, #7
 800baa4:	75fb      	strb	r3, [r7, #23]
	return res;
 800baa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	331a      	adds	r3, #26
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff f810 	bl	800aae4 <ld_word>
 800bac4:	4603      	mov	r3, r0
 800bac6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b03      	cmp	r3, #3
 800bace:	d109      	bne.n	800bae4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	3314      	adds	r3, #20
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7ff f805 	bl	800aae4 <ld_word>
 800bada:	4603      	mov	r3, r0
 800badc:	041b      	lsls	r3, r3, #16
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bae4:	68fb      	ldr	r3, [r7, #12]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	331a      	adds	r3, #26
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	b292      	uxth	r2, r2
 800bb02:	4611      	mov	r1, r2
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff f829 	bl	800ab5c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d109      	bne.n	800bb26 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	f103 0214 	add.w	r2, r3, #20
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	0c1b      	lsrs	r3, r3, #16
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	4619      	mov	r1, r3
 800bb20:	4610      	mov	r0, r2
 800bb22:	f7ff f81b 	bl	800ab5c <st_word>
	}
}
 800bb26:	bf00      	nop
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b086      	sub	sp, #24
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7ff fe2f 	bl	800b7a2 <dir_sdi>
 800bb44:	4603      	mov	r3, r0
 800bb46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bb48:	7dfb      	ldrb	r3, [r7, #23]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <dir_find+0x24>
 800bb4e:	7dfb      	ldrb	r3, [r7, #23]
 800bb50:	e03e      	b.n	800bbd0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	4619      	mov	r1, r3
 800bb58:	6938      	ldr	r0, [r7, #16]
 800bb5a:	f7ff faa5 	bl	800b0a8 <move_window>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d12f      	bne.n	800bbc8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a1b      	ldr	r3, [r3, #32]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bb70:	7bfb      	ldrb	r3, [r7, #15]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d102      	bne.n	800bb7c <dir_find+0x4e>
 800bb76:	2304      	movs	r3, #4
 800bb78:	75fb      	strb	r3, [r7, #23]
 800bb7a:	e028      	b.n	800bbce <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	330b      	adds	r3, #11
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	330b      	adds	r3, #11
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	f003 0308 	and.w	r3, r3, #8
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10a      	bne.n	800bbb4 <dir_find+0x86>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a18      	ldr	r0, [r3, #32]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3324      	adds	r3, #36	@ 0x24
 800bba6:	220b      	movs	r2, #11
 800bba8:	4619      	mov	r1, r3
 800bbaa:	f7ff f85a 	bl	800ac62 <mem_cmp>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00b      	beq.n	800bbcc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff fe6e 	bl	800b898 <dir_next>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bbc0:	7dfb      	ldrb	r3, [r7, #23]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d0c5      	beq.n	800bb52 <dir_find+0x24>
 800bbc6:	e002      	b.n	800bbce <dir_find+0xa0>
		if (res != FR_OK) break;
 800bbc8:	bf00      	nop
 800bbca:	e000      	b.n	800bbce <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bbcc:	bf00      	nop

	return res;
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f7ff ff1a 	bl	800ba22 <dir_alloc>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d11c      	bne.n	800bc32 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	69db      	ldr	r3, [r3, #28]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	68b8      	ldr	r0, [r7, #8]
 800bc00:	f7ff fa52 	bl	800b0a8 <move_window>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d111      	bne.n	800bc32 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a1b      	ldr	r3, [r3, #32]
 800bc12:	2220      	movs	r2, #32
 800bc14:	2100      	movs	r1, #0
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff f808 	bl	800ac2c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a18      	ldr	r0, [r3, #32]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3324      	adds	r3, #36	@ 0x24
 800bc24:	220b      	movs	r2, #11
 800bc26:	4619      	mov	r1, r3
 800bc28:	f7fe ffdf 	bl	800abea <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b088      	sub	sp, #32
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3324      	adds	r3, #36	@ 0x24
 800bc50:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bc52:	220b      	movs	r2, #11
 800bc54:	2120      	movs	r1, #32
 800bc56:	68b8      	ldr	r0, [r7, #8]
 800bc58:	f7fe ffe8 	bl	800ac2c <mem_set>
	si = i = 0; ni = 8;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	613b      	str	r3, [r7, #16]
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	61fb      	str	r3, [r7, #28]
 800bc64:	2308      	movs	r3, #8
 800bc66:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	1c5a      	adds	r2, r3, #1
 800bc6c:	61fa      	str	r2, [r7, #28]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	4413      	add	r3, r2
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bc76:	7efb      	ldrb	r3, [r7, #27]
 800bc78:	2b20      	cmp	r3, #32
 800bc7a:	d94e      	bls.n	800bd1a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bc7c:	7efb      	ldrb	r3, [r7, #27]
 800bc7e:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc80:	d006      	beq.n	800bc90 <create_name+0x54>
 800bc82:	7efb      	ldrb	r3, [r7, #27]
 800bc84:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc86:	d110      	bne.n	800bcaa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bc88:	e002      	b.n	800bc90 <create_name+0x54>
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	61fb      	str	r3, [r7, #28]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	4413      	add	r3, r2
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc9a:	d0f6      	beq.n	800bc8a <create_name+0x4e>
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	4413      	add	r3, r2
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	2b5c      	cmp	r3, #92	@ 0x5c
 800bca6:	d0f0      	beq.n	800bc8a <create_name+0x4e>
			break;
 800bca8:	e038      	b.n	800bd1c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bcaa:	7efb      	ldrb	r3, [r7, #27]
 800bcac:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcae:	d003      	beq.n	800bcb8 <create_name+0x7c>
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d30c      	bcc.n	800bcd2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	2b0b      	cmp	r3, #11
 800bcbc:	d002      	beq.n	800bcc4 <create_name+0x88>
 800bcbe:	7efb      	ldrb	r3, [r7, #27]
 800bcc0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcc2:	d001      	beq.n	800bcc8 <create_name+0x8c>
 800bcc4:	2306      	movs	r3, #6
 800bcc6:	e044      	b.n	800bd52 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bcc8:	2308      	movs	r3, #8
 800bcca:	613b      	str	r3, [r7, #16]
 800bccc:	230b      	movs	r3, #11
 800bcce:	617b      	str	r3, [r7, #20]
			continue;
 800bcd0:	e022      	b.n	800bd18 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bcd2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	da04      	bge.n	800bce4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bcda:	7efb      	ldrb	r3, [r7, #27]
 800bcdc:	3b80      	subs	r3, #128	@ 0x80
 800bcde:	4a1f      	ldr	r2, [pc, #124]	@ (800bd5c <create_name+0x120>)
 800bce0:	5cd3      	ldrb	r3, [r2, r3]
 800bce2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bce4:	7efb      	ldrb	r3, [r7, #27]
 800bce6:	4619      	mov	r1, r3
 800bce8:	481d      	ldr	r0, [pc, #116]	@ (800bd60 <create_name+0x124>)
 800bcea:	f7fe ffe1 	bl	800acb0 <chk_chr>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <create_name+0xbc>
 800bcf4:	2306      	movs	r3, #6
 800bcf6:	e02c      	b.n	800bd52 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bcf8:	7efb      	ldrb	r3, [r7, #27]
 800bcfa:	2b60      	cmp	r3, #96	@ 0x60
 800bcfc:	d905      	bls.n	800bd0a <create_name+0xce>
 800bcfe:	7efb      	ldrb	r3, [r7, #27]
 800bd00:	2b7a      	cmp	r3, #122	@ 0x7a
 800bd02:	d802      	bhi.n	800bd0a <create_name+0xce>
 800bd04:	7efb      	ldrb	r3, [r7, #27]
 800bd06:	3b20      	subs	r3, #32
 800bd08:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	1c5a      	adds	r2, r3, #1
 800bd0e:	613a      	str	r2, [r7, #16]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	4413      	add	r3, r2
 800bd14:	7efa      	ldrb	r2, [r7, #27]
 800bd16:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bd18:	e7a6      	b.n	800bc68 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bd1a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	441a      	add	r2, r3
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <create_name+0xf4>
 800bd2c:	2306      	movs	r3, #6
 800bd2e:	e010      	b.n	800bd52 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	2be5      	cmp	r3, #229	@ 0xe5
 800bd36:	d102      	bne.n	800bd3e <create_name+0x102>
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2205      	movs	r2, #5
 800bd3c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bd3e:	7efb      	ldrb	r3, [r7, #27]
 800bd40:	2b20      	cmp	r3, #32
 800bd42:	d801      	bhi.n	800bd48 <create_name+0x10c>
 800bd44:	2204      	movs	r2, #4
 800bd46:	e000      	b.n	800bd4a <create_name+0x10e>
 800bd48:	2200      	movs	r2, #0
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	330b      	adds	r3, #11
 800bd4e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bd50:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3720      	adds	r7, #32
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	0801139c 	.word	0x0801139c
 800bd60:	08011310 	.word	0x08011310

0800bd64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bd78:	e002      	b.n	800bd80 <follow_path+0x1c>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd86:	d0f8      	beq.n	800bd7a <follow_path+0x16>
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b5c      	cmp	r3, #92	@ 0x5c
 800bd8e:	d0f4      	beq.n	800bd7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	2200      	movs	r2, #0
 800bd94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	2b1f      	cmp	r3, #31
 800bd9c:	d80a      	bhi.n	800bdb4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2280      	movs	r2, #128	@ 0x80
 800bda2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bda6:	2100      	movs	r1, #0
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7ff fcfa 	bl	800b7a2 <dir_sdi>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	75fb      	strb	r3, [r7, #23]
 800bdb2:	e043      	b.n	800be3c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bdb4:	463b      	mov	r3, r7
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7ff ff3f 	bl	800bc3c <create_name>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d134      	bne.n	800be32 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff feb0 	bl	800bb2e <dir_find>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bdd8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00a      	beq.n	800bdf6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bde0:	7dfb      	ldrb	r3, [r7, #23]
 800bde2:	2b04      	cmp	r3, #4
 800bde4:	d127      	bne.n	800be36 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bde6:	7afb      	ldrb	r3, [r7, #11]
 800bde8:	f003 0304 	and.w	r3, r3, #4
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d122      	bne.n	800be36 <follow_path+0xd2>
 800bdf0:	2305      	movs	r3, #5
 800bdf2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bdf4:	e01f      	b.n	800be36 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bdf6:	7afb      	ldrb	r3, [r7, #11]
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d11c      	bne.n	800be3a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	799b      	ldrb	r3, [r3, #6]
 800be04:	f003 0310 	and.w	r3, r3, #16
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800be0c:	2305      	movs	r3, #5
 800be0e:	75fb      	strb	r3, [r7, #23]
 800be10:	e014      	b.n	800be3c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be20:	4413      	add	r3, r2
 800be22:	4619      	mov	r1, r3
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f7ff fe43 	bl	800bab0 <ld_clust>
 800be2a:	4602      	mov	r2, r0
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be30:	e7c0      	b.n	800bdb4 <follow_path+0x50>
			if (res != FR_OK) break;
 800be32:	bf00      	nop
 800be34:	e002      	b.n	800be3c <follow_path+0xd8>
				break;
 800be36:	bf00      	nop
 800be38:	e000      	b.n	800be3c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800be3a:	bf00      	nop
			}
		}
	}

	return res;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800be46:	b480      	push	{r7}
 800be48:	b087      	sub	sp, #28
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800be4e:	f04f 33ff 	mov.w	r3, #4294967295
 800be52:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d031      	beq.n	800bec0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	e002      	b.n	800be6a <get_ldnumber+0x24>
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	3301      	adds	r3, #1
 800be68:	617b      	str	r3, [r7, #20]
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	2b20      	cmp	r3, #32
 800be70:	d903      	bls.n	800be7a <get_ldnumber+0x34>
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	2b3a      	cmp	r3, #58	@ 0x3a
 800be78:	d1f4      	bne.n	800be64 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	2b3a      	cmp	r3, #58	@ 0x3a
 800be80:	d11c      	bne.n	800bebc <get_ldnumber+0x76>
			tp = *path;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	60fa      	str	r2, [r7, #12]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	3b30      	subs	r3, #48	@ 0x30
 800be92:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	2b09      	cmp	r3, #9
 800be98:	d80e      	bhi.n	800beb8 <get_ldnumber+0x72>
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d10a      	bne.n	800beb8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d107      	bne.n	800beb8 <get_ldnumber+0x72>
					vol = (int)i;
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	3301      	adds	r3, #1
 800beb0:	617b      	str	r3, [r7, #20]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	697a      	ldr	r2, [r7, #20]
 800beb6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	e002      	b.n	800bec2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bebc:	2300      	movs	r3, #0
 800bebe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bec0:	693b      	ldr	r3, [r7, #16]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	371c      	adds	r7, #28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
	...

0800bed0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	70da      	strb	r2, [r3, #3]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f04f 32ff 	mov.w	r2, #4294967295
 800bee6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff f8dc 	bl	800b0a8 <move_window>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <check_fs+0x2a>
 800bef6:	2304      	movs	r3, #4
 800bef8:	e038      	b.n	800bf6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	3334      	adds	r3, #52	@ 0x34
 800befe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe fdee 	bl	800aae4 <ld_word>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d001      	beq.n	800bf18 <check_fs+0x48>
 800bf14:	2303      	movs	r3, #3
 800bf16:	e029      	b.n	800bf6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf1e:	2be9      	cmp	r3, #233	@ 0xe9
 800bf20:	d009      	beq.n	800bf36 <check_fs+0x66>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf28:	2beb      	cmp	r3, #235	@ 0xeb
 800bf2a:	d11e      	bne.n	800bf6a <check_fs+0x9a>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800bf32:	2b90      	cmp	r3, #144	@ 0x90
 800bf34:	d119      	bne.n	800bf6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	3334      	adds	r3, #52	@ 0x34
 800bf3a:	3336      	adds	r3, #54	@ 0x36
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fe fdea 	bl	800ab16 <ld_dword>
 800bf42:	4603      	mov	r3, r0
 800bf44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bf48:	4a0a      	ldr	r2, [pc, #40]	@ (800bf74 <check_fs+0xa4>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d101      	bne.n	800bf52 <check_fs+0x82>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e00c      	b.n	800bf6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3334      	adds	r3, #52	@ 0x34
 800bf56:	3352      	adds	r3, #82	@ 0x52
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fe fddc 	bl	800ab16 <ld_dword>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	4a05      	ldr	r2, [pc, #20]	@ (800bf78 <check_fs+0xa8>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d101      	bne.n	800bf6a <check_fs+0x9a>
 800bf66:	2300      	movs	r3, #0
 800bf68:	e000      	b.n	800bf6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bf6a:	2302      	movs	r3, #2
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	00544146 	.word	0x00544146
 800bf78:	33544146 	.word	0x33544146

0800bf7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b096      	sub	sp, #88	@ 0x58
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	4613      	mov	r3, r2
 800bf88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f7ff ff58 	bl	800be46 <get_ldnumber>
 800bf96:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	da01      	bge.n	800bfa2 <find_volume+0x26>
 800bf9e:	230b      	movs	r3, #11
 800bfa0:	e235      	b.n	800c40e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bfa2:	4aa5      	ldr	r2, [pc, #660]	@ (800c238 <find_volume+0x2bc>)
 800bfa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfaa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d101      	bne.n	800bfb6 <find_volume+0x3a>
 800bfb2:	230c      	movs	r3, #12
 800bfb4:	e22b      	b.n	800c40e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800bfb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bfb8:	f7fe fe95 	bl	800ace6 <lock_fs>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <find_volume+0x4a>
 800bfc2:	230f      	movs	r3, #15
 800bfc4:	e223      	b.n	800c40e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bfcc:	79fb      	ldrb	r3, [r7, #7]
 800bfce:	f023 0301 	bic.w	r3, r3, #1
 800bfd2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d01a      	beq.n	800c012 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfde:	785b      	ldrb	r3, [r3, #1]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe fce1 	bl	800a9a8 <disk_status>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bfec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10c      	bne.n	800c012 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bff8:	79fb      	ldrb	r3, [r7, #7]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d007      	beq.n	800c00e <find_volume+0x92>
 800bffe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c002:	f003 0304 	and.w	r3, r3, #4
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800c00a:	230a      	movs	r3, #10
 800c00c:	e1ff      	b.n	800c40e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800c00e:	2300      	movs	r3, #0
 800c010:	e1fd      	b.n	800c40e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c014:	2200      	movs	r2, #0
 800c016:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c022:	785b      	ldrb	r3, [r3, #1]
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe fcd9 	bl	800a9dc <disk_initialize>
 800c02a:	4603      	mov	r3, r0
 800c02c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c030:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c034:	f003 0301 	and.w	r3, r3, #1
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c03c:	2303      	movs	r3, #3
 800c03e:	e1e6      	b.n	800c40e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c040:	79fb      	ldrb	r3, [r7, #7]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d007      	beq.n	800c056 <find_volume+0xda>
 800c046:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c04a:	f003 0304 	and.w	r3, r3, #4
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d001      	beq.n	800c056 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800c052:	230a      	movs	r3, #10
 800c054:	e1db      	b.n	800c40e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c056:	2300      	movs	r3, #0
 800c058:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c05a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c05c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c05e:	f7ff ff37 	bl	800bed0 <check_fs>
 800c062:	4603      	mov	r3, r0
 800c064:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c068:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d149      	bne.n	800c104 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c070:	2300      	movs	r3, #0
 800c072:	643b      	str	r3, [r7, #64]	@ 0x40
 800c074:	e01e      	b.n	800c0b4 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c078:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c07e:	011b      	lsls	r3, r3, #4
 800c080:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c084:	4413      	add	r3, r2
 800c086:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08a:	3304      	adds	r3, #4
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d006      	beq.n	800c0a0 <find_volume+0x124>
 800c092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c094:	3308      	adds	r3, #8
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe fd3d 	bl	800ab16 <ld_dword>
 800c09c:	4602      	mov	r2, r0
 800c09e:	e000      	b.n	800c0a2 <find_volume+0x126>
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	3358      	adds	r3, #88	@ 0x58
 800c0a8:	443b      	add	r3, r7
 800c0aa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	d9dd      	bls.n	800c076 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c0be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <find_volume+0x14e>
 800c0c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c0ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	3358      	adds	r3, #88	@ 0x58
 800c0d0:	443b      	add	r3, r7
 800c0d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c0d6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c0d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d005      	beq.n	800c0ea <find_volume+0x16e>
 800c0de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c0e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c0e2:	f7ff fef5 	bl	800bed0 <check_fs>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	e000      	b.n	800c0ec <find_volume+0x170>
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c0f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d905      	bls.n	800c104 <find_volume+0x188>
 800c0f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c100:	2b03      	cmp	r3, #3
 800c102:	d9e2      	bls.n	800c0ca <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c104:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c108:	2b04      	cmp	r3, #4
 800c10a:	d101      	bne.n	800c110 <find_volume+0x194>
 800c10c:	2301      	movs	r3, #1
 800c10e:	e17e      	b.n	800c40e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c110:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c114:	2b01      	cmp	r3, #1
 800c116:	d901      	bls.n	800c11c <find_volume+0x1a0>
 800c118:	230d      	movs	r3, #13
 800c11a:	e178      	b.n	800c40e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11e:	3334      	adds	r3, #52	@ 0x34
 800c120:	330b      	adds	r3, #11
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe fcde 	bl	800aae4 <ld_word>
 800c128:	4603      	mov	r3, r0
 800c12a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c12e:	d001      	beq.n	800c134 <find_volume+0x1b8>
 800c130:	230d      	movs	r3, #13
 800c132:	e16c      	b.n	800c40e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c136:	3334      	adds	r3, #52	@ 0x34
 800c138:	3316      	adds	r3, #22
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe fcd2 	bl	800aae4 <ld_word>
 800c140:	4603      	mov	r3, r0
 800c142:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c146:	2b00      	cmp	r3, #0
 800c148:	d106      	bne.n	800c158 <find_volume+0x1dc>
 800c14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c14c:	3334      	adds	r3, #52	@ 0x34
 800c14e:	3324      	adds	r3, #36	@ 0x24
 800c150:	4618      	mov	r0, r3
 800c152:	f7fe fce0 	bl	800ab16 <ld_dword>
 800c156:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c15c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c160:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c166:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16a:	789b      	ldrb	r3, [r3, #2]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d005      	beq.n	800c17c <find_volume+0x200>
 800c170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c172:	789b      	ldrb	r3, [r3, #2]
 800c174:	2b02      	cmp	r3, #2
 800c176:	d001      	beq.n	800c17c <find_volume+0x200>
 800c178:	230d      	movs	r3, #13
 800c17a:	e148      	b.n	800c40e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17e:	789b      	ldrb	r3, [r3, #2]
 800c180:	461a      	mov	r2, r3
 800c182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c184:	fb02 f303 	mul.w	r3, r2, r3
 800c188:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c190:	461a      	mov	r2, r3
 800c192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c194:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c198:	895b      	ldrh	r3, [r3, #10]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d008      	beq.n	800c1b0 <find_volume+0x234>
 800c19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a0:	895b      	ldrh	r3, [r3, #10]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a6:	895b      	ldrh	r3, [r3, #10]
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <find_volume+0x238>
 800c1b0:	230d      	movs	r3, #13
 800c1b2:	e12c      	b.n	800c40e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b6:	3334      	adds	r3, #52	@ 0x34
 800c1b8:	3311      	adds	r3, #17
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe fc92 	bl	800aae4 <ld_word>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ca:	891b      	ldrh	r3, [r3, #8]
 800c1cc:	f003 030f 	and.w	r3, r3, #15
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <find_volume+0x25e>
 800c1d6:	230d      	movs	r3, #13
 800c1d8:	e119      	b.n	800c40e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1dc:	3334      	adds	r3, #52	@ 0x34
 800c1de:	3313      	adds	r3, #19
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fe fc7f 	bl	800aae4 <ld_word>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c1ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d106      	bne.n	800c1fe <find_volume+0x282>
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f2:	3334      	adds	r3, #52	@ 0x34
 800c1f4:	3320      	adds	r3, #32
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fc8d 	bl	800ab16 <ld_dword>
 800c1fc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c200:	3334      	adds	r3, #52	@ 0x34
 800c202:	330e      	adds	r3, #14
 800c204:	4618      	mov	r0, r3
 800c206:	f7fe fc6d 	bl	800aae4 <ld_word>
 800c20a:	4603      	mov	r3, r0
 800c20c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c20e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <find_volume+0x29c>
 800c214:	230d      	movs	r3, #13
 800c216:	e0fa      	b.n	800c40e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c218:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c21a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c21c:	4413      	add	r3, r2
 800c21e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c220:	8912      	ldrh	r2, [r2, #8]
 800c222:	0912      	lsrs	r2, r2, #4
 800c224:	b292      	uxth	r2, r2
 800c226:	4413      	add	r3, r2
 800c228:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c22a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22e:	429a      	cmp	r2, r3
 800c230:	d204      	bcs.n	800c23c <find_volume+0x2c0>
 800c232:	230d      	movs	r3, #13
 800c234:	e0eb      	b.n	800c40e <find_volume+0x492>
 800c236:	bf00      	nop
 800c238:	20001070 	.word	0x20001070
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c23c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c244:	8952      	ldrh	r2, [r2, #10]
 800c246:	fbb3 f3f2 	udiv	r3, r3, r2
 800c24a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d101      	bne.n	800c256 <find_volume+0x2da>
 800c252:	230d      	movs	r3, #13
 800c254:	e0db      	b.n	800c40e <find_volume+0x492>
		fmt = FS_FAT32;
 800c256:	2303      	movs	r3, #3
 800c258:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c262:	4293      	cmp	r3, r2
 800c264:	d802      	bhi.n	800c26c <find_volume+0x2f0>
 800c266:	2302      	movs	r3, #2
 800c268:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c272:	4293      	cmp	r3, r2
 800c274:	d802      	bhi.n	800c27c <find_volume+0x300>
 800c276:	2301      	movs	r3, #1
 800c278:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27e:	1c9a      	adds	r2, r3, #2
 800c280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c282:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c286:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c288:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c28a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c28c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c28e:	441a      	add	r2, r3
 800c290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c292:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c294:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c298:	441a      	add	r2, r3
 800c29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800c29e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d11e      	bne.n	800c2e4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a8:	3334      	adds	r3, #52	@ 0x34
 800c2aa:	332a      	adds	r3, #42	@ 0x2a
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fe fc19 	bl	800aae4 <ld_word>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <find_volume+0x340>
 800c2b8:	230d      	movs	r3, #13
 800c2ba:	e0a8      	b.n	800c40e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2be:	891b      	ldrh	r3, [r3, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <find_volume+0x34c>
 800c2c4:	230d      	movs	r3, #13
 800c2c6:	e0a2      	b.n	800c40e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ca:	3334      	adds	r3, #52	@ 0x34
 800c2cc:	332c      	adds	r3, #44	@ 0x2c
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe fc21 	bl	800ab16 <ld_dword>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2dc:	699b      	ldr	r3, [r3, #24]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2e2:	e01f      	b.n	800c324 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e6:	891b      	ldrh	r3, [r3, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d101      	bne.n	800c2f0 <find_volume+0x374>
 800c2ec:	230d      	movs	r3, #13
 800c2ee:	e08e      	b.n	800c40e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2f6:	441a      	add	r2, r3
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fa:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c2fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c300:	2b02      	cmp	r3, #2
 800c302:	d103      	bne.n	800c30c <find_volume+0x390>
 800c304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	e00a      	b.n	800c322 <find_volume+0x3a6>
 800c30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30e:	699a      	ldr	r2, [r3, #24]
 800c310:	4613      	mov	r3, r2
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	4413      	add	r3, r2
 800c316:	085a      	lsrs	r2, r3, #1
 800c318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	f003 0301 	and.w	r3, r3, #1
 800c320:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c322:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c326:	69da      	ldr	r2, [r3, #28]
 800c328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c32a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c32e:	0a5b      	lsrs	r3, r3, #9
 800c330:	429a      	cmp	r2, r3
 800c332:	d201      	bcs.n	800c338 <find_volume+0x3bc>
 800c334:	230d      	movs	r3, #13
 800c336:	e06a      	b.n	800c40e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33a:	f04f 32ff 	mov.w	r2, #4294967295
 800c33e:	615a      	str	r2, [r3, #20]
 800c340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c342:	695a      	ldr	r2, [r3, #20]
 800c344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c346:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34a:	2280      	movs	r2, #128	@ 0x80
 800c34c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c34e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c352:	2b03      	cmp	r3, #3
 800c354:	d149      	bne.n	800c3ea <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c358:	3334      	adds	r3, #52	@ 0x34
 800c35a:	3330      	adds	r3, #48	@ 0x30
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe fbc1 	bl	800aae4 <ld_word>
 800c362:	4603      	mov	r3, r0
 800c364:	2b01      	cmp	r3, #1
 800c366:	d140      	bne.n	800c3ea <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c36a:	3301      	adds	r3, #1
 800c36c:	4619      	mov	r1, r3
 800c36e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c370:	f7fe fe9a 	bl	800b0a8 <move_window>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d137      	bne.n	800c3ea <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800c37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37c:	2200      	movs	r2, #0
 800c37e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c382:	3334      	adds	r3, #52	@ 0x34
 800c384:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fe fbab 	bl	800aae4 <ld_word>
 800c38e:	4603      	mov	r3, r0
 800c390:	461a      	mov	r2, r3
 800c392:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c396:	429a      	cmp	r2, r3
 800c398:	d127      	bne.n	800c3ea <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39c:	3334      	adds	r3, #52	@ 0x34
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe fbb9 	bl	800ab16 <ld_dword>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	4a1c      	ldr	r2, [pc, #112]	@ (800c418 <find_volume+0x49c>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d11e      	bne.n	800c3ea <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ae:	3334      	adds	r3, #52	@ 0x34
 800c3b0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fe fbae 	bl	800ab16 <ld_dword>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	4a17      	ldr	r2, [pc, #92]	@ (800c41c <find_volume+0x4a0>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d113      	bne.n	800c3ea <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c4:	3334      	adds	r3, #52	@ 0x34
 800c3c6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fe fba3 	bl	800ab16 <ld_dword>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d8:	3334      	adds	r3, #52	@ 0x34
 800c3da:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe fb99 	bl	800ab16 <ld_dword>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ec:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c3f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c420 <find_volume+0x4a4>)
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	4b09      	ldr	r3, [pc, #36]	@ (800c420 <find_volume+0x4a4>)
 800c3fc:	801a      	strh	r2, [r3, #0]
 800c3fe:	4b08      	ldr	r3, [pc, #32]	@ (800c420 <find_volume+0x4a4>)
 800c400:	881a      	ldrh	r2, [r3, #0]
 800c402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c404:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c406:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c408:	f7fe fde6 	bl	800afd8 <clear_lock>
#endif
	return FR_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3758      	adds	r7, #88	@ 0x58
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	41615252 	.word	0x41615252
 800c41c:	61417272 	.word	0x61417272
 800c420:	20001074 	.word	0x20001074

0800c424 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c42e:	2309      	movs	r3, #9
 800c430:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d02e      	beq.n	800c496 <validate+0x72>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d02a      	beq.n	800c496 <validate+0x72>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d025      	beq.n	800c496 <validate+0x72>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	889a      	ldrh	r2, [r3, #4]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	88db      	ldrh	r3, [r3, #6]
 800c454:	429a      	cmp	r2, r3
 800c456:	d11e      	bne.n	800c496 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fe fc42 	bl	800ace6 <lock_fs>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d014      	beq.n	800c492 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	785b      	ldrb	r3, [r3, #1]
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fe fa9a 	bl	800a9a8 <disk_status>
 800c474:	4603      	mov	r3, r0
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d102      	bne.n	800c484 <validate+0x60>
				res = FR_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	73fb      	strb	r3, [r7, #15]
 800c482:	e008      	b.n	800c496 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2100      	movs	r1, #0
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fe fc41 	bl	800ad12 <unlock_fs>
 800c490:	e001      	b.n	800c496 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c492:	230f      	movs	r3, #15
 800c494:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d102      	bne.n	800c4a2 <validate+0x7e>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	e000      	b.n	800c4a4 <validate+0x80>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	683a      	ldr	r2, [r7, #0]
 800c4a6:	6013      	str	r3, [r2, #0]
	return res;
 800c4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
	...

0800c4b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b088      	sub	sp, #32
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c4c6:	f107 0310 	add.w	r3, r7, #16
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff fcbb 	bl	800be46 <get_ldnumber>
 800c4d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	da01      	bge.n	800c4dc <f_mount+0x28>
 800c4d8:	230b      	movs	r3, #11
 800c4da:	e048      	b.n	800c56e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c4dc:	4a26      	ldr	r2, [pc, #152]	@ (800c578 <f_mount+0xc4>)
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00f      	beq.n	800c50c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c4ec:	69b8      	ldr	r0, [r7, #24]
 800c4ee:	f7fe fd73 	bl	800afd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f001 f837 	bl	800d56a <ff_del_syncobj>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d101      	bne.n	800c506 <f_mount+0x52>
 800c502:	2302      	movs	r3, #2
 800c504:	e033      	b.n	800c56e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	2200      	movs	r2, #0
 800c50a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00f      	beq.n	800c532 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	330c      	adds	r3, #12
 800c520:	4619      	mov	r1, r3
 800c522:	4610      	mov	r0, r2
 800c524:	f001 f803 	bl	800d52e <ff_cre_syncobj>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <f_mount+0x7e>
 800c52e:	2302      	movs	r3, #2
 800c530:	e01d      	b.n	800c56e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	4910      	ldr	r1, [pc, #64]	@ (800c578 <f_mount+0xc4>)
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d002      	beq.n	800c548 <f_mount+0x94>
 800c542:	79fb      	ldrb	r3, [r7, #7]
 800c544:	2b01      	cmp	r3, #1
 800c546:	d001      	beq.n	800c54c <f_mount+0x98>
 800c548:	2300      	movs	r3, #0
 800c54a:	e010      	b.n	800c56e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c54c:	f107 010c 	add.w	r1, r7, #12
 800c550:	f107 0308 	add.w	r3, r7, #8
 800c554:	2200      	movs	r2, #0
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff fd10 	bl	800bf7c <find_volume>
 800c55c:	4603      	mov	r3, r0
 800c55e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	7dfa      	ldrb	r2, [r7, #23]
 800c564:	4611      	mov	r1, r2
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe fbd3 	bl	800ad12 <unlock_fs>
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3720      	adds	r7, #32
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20001070 	.word	0x20001070

0800c57c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b098      	sub	sp, #96	@ 0x60
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	4613      	mov	r3, r2
 800c588:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <f_open+0x18>
 800c590:	2309      	movs	r3, #9
 800c592:	e1b0      	b.n	800c8f6 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c594:	79fb      	ldrb	r3, [r7, #7]
 800c596:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c59a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c59c:	79fa      	ldrb	r2, [r7, #7]
 800c59e:	f107 0110 	add.w	r1, r7, #16
 800c5a2:	f107 0308 	add.w	r3, r7, #8
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7ff fce8 	bl	800bf7c <find_volume>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f040 818d 	bne.w	800c8d6 <f_open+0x35a>
		dj.obj.fs = fs;
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	f107 0314 	add.w	r3, r7, #20
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff fbcb 	bl	800bd64 <follow_path>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c5d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d118      	bne.n	800c60e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c5dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c5e0:	b25b      	sxtb	r3, r3
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	da03      	bge.n	800c5ee <f_open+0x72>
				res = FR_INVALID_NAME;
 800c5e6:	2306      	movs	r3, #6
 800c5e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c5ec:	e00f      	b.n	800c60e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	bf8c      	ite	hi
 800c5f4:	2301      	movhi	r3, #1
 800c5f6:	2300      	movls	r3, #0
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f107 0314 	add.w	r3, r7, #20
 800c600:	4611      	mov	r1, r2
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe fba0 	bl	800ad48 <chk_lock>
 800c608:	4603      	mov	r3, r0
 800c60a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	f003 031c 	and.w	r3, r3, #28
 800c614:	2b00      	cmp	r3, #0
 800c616:	d07f      	beq.n	800c718 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c618:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d017      	beq.n	800c650 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c620:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c624:	2b04      	cmp	r3, #4
 800c626:	d10e      	bne.n	800c646 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c628:	f7fe fbea 	bl	800ae00 <enq_lock>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d006      	beq.n	800c640 <f_open+0xc4>
 800c632:	f107 0314 	add.w	r3, r7, #20
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff face 	bl	800bbd8 <dir_register>
 800c63c:	4603      	mov	r3, r0
 800c63e:	e000      	b.n	800c642 <f_open+0xc6>
 800c640:	2312      	movs	r3, #18
 800c642:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c646:	79fb      	ldrb	r3, [r7, #7]
 800c648:	f043 0308 	orr.w	r3, r3, #8
 800c64c:	71fb      	strb	r3, [r7, #7]
 800c64e:	e010      	b.n	800c672 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c650:	7ebb      	ldrb	r3, [r7, #26]
 800c652:	f003 0311 	and.w	r3, r3, #17
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <f_open+0xe6>
					res = FR_DENIED;
 800c65a:	2307      	movs	r3, #7
 800c65c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c660:	e007      	b.n	800c672 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	f003 0304 	and.w	r3, r3, #4
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <f_open+0xf6>
 800c66c:	2308      	movs	r3, #8
 800c66e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c672:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c676:	2b00      	cmp	r3, #0
 800c678:	d168      	bne.n	800c74c <f_open+0x1d0>
 800c67a:	79fb      	ldrb	r3, [r7, #7]
 800c67c:	f003 0308 	and.w	r3, r3, #8
 800c680:	2b00      	cmp	r3, #0
 800c682:	d063      	beq.n	800c74c <f_open+0x1d0>
				dw = GET_FATTIME();
 800c684:	f7fe f930 	bl	800a8e8 <get_fattime>
 800c688:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c68c:	330e      	adds	r3, #14
 800c68e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c690:	4618      	mov	r0, r3
 800c692:	f7fe fa7e 	bl	800ab92 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c698:	3316      	adds	r3, #22
 800c69a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fe fa78 	bl	800ab92 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c6a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6a4:	330b      	adds	r3, #11
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7ff f9fd 	bl	800bab0 <ld_clust>
 800c6b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c6bc:	2200      	movs	r2, #0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7ff fa15 	bl	800baee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c6:	331c      	adds	r3, #28
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fe fa61 	bl	800ab92 <st_dword>
					fs->wflag = 1;
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c6d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d037      	beq.n	800c74c <f_open+0x1d0>
						dw = fs->winsect;
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c6e2:	f107 0314 	add.w	r3, r7, #20
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fe ff28 	bl	800b540 <remove_chain>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c6f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d126      	bne.n	800c74c <f_open+0x1d0>
							res = move_window(fs, dw);
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c702:	4618      	mov	r0, r3
 800c704:	f7fe fcd0 	bl	800b0a8 <move_window>
 800c708:	4603      	mov	r3, r0
 800c70a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c712:	3a01      	subs	r2, #1
 800c714:	611a      	str	r2, [r3, #16]
 800c716:	e019      	b.n	800c74c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c718:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d115      	bne.n	800c74c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c720:	7ebb      	ldrb	r3, [r7, #26]
 800c722:	f003 0310 	and.w	r3, r3, #16
 800c726:	2b00      	cmp	r3, #0
 800c728:	d003      	beq.n	800c732 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c72a:	2304      	movs	r3, #4
 800c72c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c730:	e00c      	b.n	800c74c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d007      	beq.n	800c74c <f_open+0x1d0>
 800c73c:	7ebb      	ldrb	r3, [r7, #26]
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <f_open+0x1d0>
						res = FR_DENIED;
 800c746:	2307      	movs	r3, #7
 800c748:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c74c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c750:	2b00      	cmp	r3, #0
 800c752:	d126      	bne.n	800c7a2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c754:	79fb      	ldrb	r3, [r7, #7]
 800c756:	f003 0308 	and.w	r3, r3, #8
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c75e:	79fb      	ldrb	r3, [r7, #7]
 800c760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c764:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c76e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	2b01      	cmp	r3, #1
 800c778:	bf8c      	ite	hi
 800c77a:	2301      	movhi	r3, #1
 800c77c:	2300      	movls	r3, #0
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	461a      	mov	r2, r3
 800c782:	f107 0314 	add.w	r3, r7, #20
 800c786:	4611      	mov	r1, r2
 800c788:	4618      	mov	r0, r3
 800c78a:	f7fe fb5b 	bl	800ae44 <inc_lock>
 800c78e:	4602      	mov	r2, r0
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d102      	bne.n	800c7a2 <f_open+0x226>
 800c79c:	2302      	movs	r3, #2
 800c79e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f040 8095 	bne.w	800c8d6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7ff f97c 	bl	800bab0 <ld_clust>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c0:	331c      	adds	r3, #28
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe f9a7 	bl	800ab16 <ld_dword>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	88da      	ldrh	r2, [r3, #6]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	79fa      	ldrb	r2, [r7, #7]
 800c7e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3330      	adds	r3, #48	@ 0x30
 800c7fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c802:	2100      	movs	r1, #0
 800c804:	4618      	mov	r0, r3
 800c806:	f7fe fa11 	bl	800ac2c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	f003 0320 	and.w	r3, r3, #32
 800c810:	2b00      	cmp	r3, #0
 800c812:	d060      	beq.n	800c8d6 <f_open+0x35a>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d05c      	beq.n	800c8d6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	68da      	ldr	r2, [r3, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	895b      	ldrh	r3, [r3, #10]
 800c828:	025b      	lsls	r3, r3, #9
 800c82a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	657b      	str	r3, [r7, #84]	@ 0x54
 800c838:	e016      	b.n	800c868 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe fced 	bl	800b21e <get_fat>
 800c844:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d802      	bhi.n	800c852 <f_open+0x2d6>
 800c84c:	2302      	movs	r3, #2
 800c84e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c858:	d102      	bne.n	800c860 <f_open+0x2e4>
 800c85a:	2301      	movs	r3, #1
 800c85c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c860:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	657b      	str	r3, [r7, #84]	@ 0x54
 800c868:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d103      	bne.n	800c878 <f_open+0x2fc>
 800c870:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c874:	429a      	cmp	r2, r3
 800c876:	d8e0      	bhi.n	800c83a <f_open+0x2be>
				}
				fp->clust = clst;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c87c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c87e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c882:	2b00      	cmp	r3, #0
 800c884:	d127      	bne.n	800c8d6 <f_open+0x35a>
 800c886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d022      	beq.n	800c8d6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe fca3 	bl	800b1e0 <clust2sect>
 800c89a:	6478      	str	r0, [r7, #68]	@ 0x44
 800c89c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d103      	bne.n	800c8aa <f_open+0x32e>
						res = FR_INT_ERR;
 800c8a2:	2302      	movs	r3, #2
 800c8a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c8a8:	e015      	b.n	800c8d6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c8aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8ac:	0a5a      	lsrs	r2, r3, #9
 800c8ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8b0:	441a      	add	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	7858      	ldrb	r0, [r3, #1]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6a1a      	ldr	r2, [r3, #32]
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	f7fe f8af 	bl	800aa28 <disk_read>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <f_open+0x35a>
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d002      	beq.n	800c8e4 <f_open+0x368>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800c8ea:	4611      	mov	r1, r2
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fe fa10 	bl	800ad12 <unlock_fs>
 800c8f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3760      	adds	r7, #96	@ 0x60
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b08c      	sub	sp, #48	@ 0x30
 800c902:	af00      	add	r7, sp, #0
 800c904:	60f8      	str	r0, [r7, #12]
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	607a      	str	r2, [r7, #4]
 800c90a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2200      	movs	r2, #0
 800c914:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f107 0210 	add.w	r2, r7, #16
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f7ff fd80 	bl	800c424 <validate>
 800c924:	4603      	mov	r3, r0
 800c926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c92a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d107      	bne.n	800c942 <f_write+0x44>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	7d5b      	ldrb	r3, [r3, #21]
 800c936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c93a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d009      	beq.n	800c956 <f_write+0x58>
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c948:	4611      	mov	r1, r2
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fe f9e1 	bl	800ad12 <unlock_fs>
 800c950:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c954:	e173      	b.n	800cc3e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	7d1b      	ldrb	r3, [r3, #20]
 800c95a:	f003 0302 	and.w	r3, r3, #2
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d106      	bne.n	800c970 <f_write+0x72>
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	2107      	movs	r1, #7
 800c966:	4618      	mov	r0, r3
 800c968:	f7fe f9d3 	bl	800ad12 <unlock_fs>
 800c96c:	2307      	movs	r3, #7
 800c96e:	e166      	b.n	800cc3e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	699a      	ldr	r2, [r3, #24]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	441a      	add	r2, r3
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	f080 814b 	bcs.w	800cc18 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	43db      	mvns	r3, r3
 800c988:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c98a:	e145      	b.n	800cc18 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c994:	2b00      	cmp	r3, #0
 800c996:	f040 8101 	bne.w	800cb9c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	699b      	ldr	r3, [r3, #24]
 800c99e:	0a5b      	lsrs	r3, r3, #9
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	8952      	ldrh	r2, [r2, #10]
 800c9a4:	3a01      	subs	r2, #1
 800c9a6:	4013      	ands	r3, r2
 800c9a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d14d      	bne.n	800ca4c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10c      	bne.n	800c9d2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d11a      	bne.n	800c9fa <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe fe1e 	bl	800b60a <create_chain>
 800c9ce:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c9d0:	e013      	b.n	800c9fa <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d007      	beq.n	800c9ea <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	4619      	mov	r1, r3
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f7fe feaa 	bl	800b73a <clmt_clust>
 800c9e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c9e8:	e007      	b.n	800c9fa <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	69db      	ldr	r3, [r3, #28]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	f7fe fe09 	bl	800b60a <create_chain>
 800c9f8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 8110 	beq.w	800cc22 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d109      	bne.n	800ca1c <f_write+0x11e>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	755a      	strb	r2, [r3, #21]
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	2102      	movs	r1, #2
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fe f97d 	bl	800ad12 <unlock_fs>
 800ca18:	2302      	movs	r3, #2
 800ca1a:	e110      	b.n	800cc3e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca22:	d109      	bne.n	800ca38 <f_write+0x13a>
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2201      	movs	r2, #1
 800ca28:	755a      	strb	r2, [r3, #21]
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fe f96f 	bl	800ad12 <unlock_fs>
 800ca34:	2301      	movs	r3, #1
 800ca36:	e102      	b.n	800cc3e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca3c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d102      	bne.n	800ca4c <f_write+0x14e>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca4a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	7d1b      	ldrb	r3, [r3, #20]
 800ca50:	b25b      	sxtb	r3, r3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	da1d      	bge.n	800ca92 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	7858      	ldrb	r0, [r3, #1]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6a1a      	ldr	r2, [r3, #32]
 800ca64:	2301      	movs	r3, #1
 800ca66:	f7fd ffff 	bl	800aa68 <disk_write>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d009      	beq.n	800ca84 <f_write+0x186>
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2201      	movs	r2, #1
 800ca74:	755a      	strb	r2, [r3, #21]
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	2101      	movs	r1, #1
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe f949 	bl	800ad12 <unlock_fs>
 800ca80:	2301      	movs	r3, #1
 800ca82:	e0dc      	b.n	800cc3e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	7d1b      	ldrb	r3, [r3, #20]
 800ca88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ca92:	693a      	ldr	r2, [r7, #16]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	69db      	ldr	r3, [r3, #28]
 800ca98:	4619      	mov	r1, r3
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	f7fe fba0 	bl	800b1e0 <clust2sect>
 800caa0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d109      	bne.n	800cabc <f_write+0x1be>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2202      	movs	r2, #2
 800caac:	755a      	strb	r2, [r3, #21]
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	2102      	movs	r1, #2
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fe f92d 	bl	800ad12 <unlock_fs>
 800cab8:	2302      	movs	r3, #2
 800caba:	e0c0      	b.n	800cc3e <f_write+0x340>
			sect += csect;
 800cabc:	697a      	ldr	r2, [r7, #20]
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	4413      	add	r3, r2
 800cac2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	0a5b      	lsrs	r3, r3, #9
 800cac8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d041      	beq.n	800cb54 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cad0:	69ba      	ldr	r2, [r7, #24]
 800cad2:	6a3b      	ldr	r3, [r7, #32]
 800cad4:	4413      	add	r3, r2
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	8952      	ldrh	r2, [r2, #10]
 800cada:	4293      	cmp	r3, r2
 800cadc:	d905      	bls.n	800caea <f_write+0x1ec>
					cc = fs->csize - csect;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	895b      	ldrh	r3, [r3, #10]
 800cae2:	461a      	mov	r2, r3
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	7858      	ldrb	r0, [r3, #1]
 800caee:	6a3b      	ldr	r3, [r7, #32]
 800caf0:	697a      	ldr	r2, [r7, #20]
 800caf2:	69f9      	ldr	r1, [r7, #28]
 800caf4:	f7fd ffb8 	bl	800aa68 <disk_write>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d009      	beq.n	800cb12 <f_write+0x214>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2201      	movs	r2, #1
 800cb02:	755a      	strb	r2, [r3, #21]
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	2101      	movs	r1, #1
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fe f902 	bl	800ad12 <unlock_fs>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e095      	b.n	800cc3e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	6a1a      	ldr	r2, [r3, #32]
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	6a3a      	ldr	r2, [r7, #32]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d915      	bls.n	800cb4c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6a1a      	ldr	r2, [r3, #32]
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	025b      	lsls	r3, r3, #9
 800cb30:	69fa      	ldr	r2, [r7, #28]
 800cb32:	4413      	add	r3, r2
 800cb34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb38:	4619      	mov	r1, r3
 800cb3a:	f7fe f856 	bl	800abea <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	7d1b      	ldrb	r3, [r3, #20]
 800cb42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cb4c:	6a3b      	ldr	r3, [r7, #32]
 800cb4e:	025b      	lsls	r3, r3, #9
 800cb50:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cb52:	e044      	b.n	800cbde <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6a1b      	ldr	r3, [r3, #32]
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d01b      	beq.n	800cb96 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	699a      	ldr	r2, [r3, #24]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d215      	bcs.n	800cb96 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	7858      	ldrb	r0, [r3, #1]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb74:	2301      	movs	r3, #1
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	f7fd ff56 	bl	800aa28 <disk_read>
 800cb7c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d009      	beq.n	800cb96 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2201      	movs	r2, #1
 800cb86:	755a      	strb	r2, [r3, #21]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fe f8c0 	bl	800ad12 <unlock_fs>
 800cb92:	2301      	movs	r3, #1
 800cb94:	e053      	b.n	800cc3e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	697a      	ldr	r2, [r7, #20]
 800cb9a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	699b      	ldr	r3, [r3, #24]
 800cba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cba4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cba8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cbaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d901      	bls.n	800cbb6 <f_write+0x2b8>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc4:	4413      	add	r3, r2
 800cbc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbc8:	69f9      	ldr	r1, [r7, #28]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fe f80d 	bl	800abea <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	7d1b      	ldrb	r3, [r3, #20]
 800cbd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cbd8:	b2da      	uxtb	r2, r3
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cbde:	69fa      	ldr	r2, [r7, #28]
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe2:	4413      	add	r3, r2
 800cbe4:	61fb      	str	r3, [r7, #28]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	699a      	ldr	r2, [r3, #24]
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	441a      	add	r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	619a      	str	r2, [r3, #24]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	68da      	ldr	r2, [r3, #12]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	bf38      	it	cc
 800cbfe:	461a      	movcc	r2, r3
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	60da      	str	r2, [r3, #12]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0a:	441a      	add	r2, r3
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	601a      	str	r2, [r3, #0]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f47f aeb6 	bne.w	800c98c <f_write+0x8e>
 800cc20:	e000      	b.n	800cc24 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc22:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	7d1b      	ldrb	r3, [r3, #20]
 800cc28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc2c:	b2da      	uxtb	r2, r3
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	2100      	movs	r1, #0
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe f86b 	bl	800ad12 <unlock_fs>
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3730      	adds	r7, #48	@ 0x30
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b086      	sub	sp, #24
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f107 0208 	add.w	r2, r7, #8
 800cc54:	4611      	mov	r1, r2
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7ff fbe4 	bl	800c424 <validate>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d16d      	bne.n	800cd42 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	7d1b      	ldrb	r3, [r3, #20]
 800cc6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d067      	beq.n	800cd42 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	7d1b      	ldrb	r3, [r3, #20]
 800cc76:	b25b      	sxtb	r3, r3
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	da1a      	bge.n	800ccb2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	7858      	ldrb	r0, [r3, #1]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a1a      	ldr	r2, [r3, #32]
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	f7fd feec 	bl	800aa68 <disk_write>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d006      	beq.n	800cca4 <f_sync+0x5e>
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2101      	movs	r1, #1
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe f839 	bl	800ad12 <unlock_fs>
 800cca0:	2301      	movs	r3, #1
 800cca2:	e055      	b.n	800cd50 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	7d1b      	ldrb	r3, [r3, #20]
 800cca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ccb2:	f7fd fe19 	bl	800a8e8 <get_fattime>
 800ccb6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	f7fe f9f1 	bl	800b0a8 <move_window>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ccca:	7dfb      	ldrb	r3, [r7, #23]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d138      	bne.n	800cd42 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	330b      	adds	r3, #11
 800ccda:	781a      	ldrb	r2, [r3, #0]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	330b      	adds	r3, #11
 800cce0:	f042 0220 	orr.w	r2, r2, #32
 800cce4:	b2d2      	uxtb	r2, r2
 800cce6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6818      	ldr	r0, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	68f9      	ldr	r1, [r7, #12]
 800ccf4:	f7fe fefb 	bl	800baee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f103 021c 	add.w	r2, r3, #28
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	4619      	mov	r1, r3
 800cd04:	4610      	mov	r0, r2
 800cd06:	f7fd ff44 	bl	800ab92 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	3316      	adds	r3, #22
 800cd0e:	6939      	ldr	r1, [r7, #16]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7fd ff3e 	bl	800ab92 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3312      	adds	r3, #18
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fd ff1d 	bl	800ab5c <st_word>
					fs->wflag = 1;
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2201      	movs	r2, #1
 800cd26:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fe f9ea 	bl	800b104 <sync_fs>
 800cd30:	4603      	mov	r3, r0
 800cd32:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	7d1b      	ldrb	r3, [r3, #20]
 800cd38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd3c:	b2da      	uxtb	r2, r3
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	7dfa      	ldrb	r2, [r7, #23]
 800cd46:	4611      	mov	r1, r2
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7fd ffe2 	bl	800ad12 <unlock_fs>
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3718      	adds	r7, #24
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7ff ff70 	bl	800cc46 <f_sync>
 800cd66:	4603      	mov	r3, r0
 800cd68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d11d      	bne.n	800cdac <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f107 0208 	add.w	r2, r7, #8
 800cd76:	4611      	mov	r1, r2
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7ff fb53 	bl	800c424 <validate>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d111      	bne.n	800cdac <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	691b      	ldr	r3, [r3, #16]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fe f8e7 	bl	800af60 <dec_lock>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d102      	bne.n	800cda2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2100      	movs	r1, #0
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fd ffb3 	bl	800ad12 <unlock_fs>
#endif
		}
	}
	return res;
 800cdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b090      	sub	sp, #64	@ 0x40
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f107 0208 	add.w	r2, r7, #8
 800cdc6:	4611      	mov	r1, r2
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7ff fb2b 	bl	800c424 <validate>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cdd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d103      	bne.n	800cde4 <f_lseek+0x2e>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	7d5b      	ldrb	r3, [r3, #21]
 800cde0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cde4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d009      	beq.n	800ce00 <f_lseek+0x4a>
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fd ff8c 	bl	800ad12 <unlock_fs>
 800cdfa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cdfe:	e229      	b.n	800d254 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f000 80ea 	beq.w	800cfde <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce10:	d164      	bne.n	800cedc <f_lseek+0x126>
			tbl = fp->cltbl;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce16:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ce18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1a:	1d1a      	adds	r2, r3, #4
 800ce1c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	617b      	str	r3, [r7, #20]
 800ce22:	2302      	movs	r3, #2
 800ce24:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d044      	beq.n	800cebc <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ce32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce34:	613b      	str	r3, [r7, #16]
 800ce36:	2300      	movs	r3, #0
 800ce38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3c:	3302      	adds	r3, #2
 800ce3e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ce40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce42:	60fb      	str	r3, [r7, #12]
 800ce44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce46:	3301      	adds	r3, #1
 800ce48:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe f9e5 	bl	800b21e <get_fat>
 800ce54:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ce56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d809      	bhi.n	800ce70 <f_lseek+0xba>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2202      	movs	r2, #2
 800ce60:	755a      	strb	r2, [r3, #21]
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2102      	movs	r1, #2
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fd ff53 	bl	800ad12 <unlock_fs>
 800ce6c:	2302      	movs	r3, #2
 800ce6e:	e1f1      	b.n	800d254 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce76:	d109      	bne.n	800ce8c <f_lseek+0xd6>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	755a      	strb	r2, [r3, #21]
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	2101      	movs	r1, #1
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fd ff45 	bl	800ad12 <unlock_fs>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e1e3      	b.n	800d254 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d0d4      	beq.n	800ce40 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ce96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d809      	bhi.n	800ceb2 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea0:	1d1a      	adds	r2, r3, #4
 800cea2:	627a      	str	r2, [r7, #36]	@ 0x24
 800cea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceaa:	1d1a      	adds	r2, r3, #4
 800ceac:	627a      	str	r2, [r7, #36]	@ 0x24
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	699b      	ldr	r3, [r3, #24]
 800ceb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d3ba      	bcc.n	800ce32 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cec2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d803      	bhi.n	800ced4 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cece:	2200      	movs	r2, #0
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	e1b6      	b.n	800d242 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ced4:	2311      	movs	r3, #17
 800ced6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ceda:	e1b2      	b.n	800d242 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d902      	bls.n	800ceec <f_lseek+0x136>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 81a4 	beq.w	800d242 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	4619      	mov	r1, r3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7fe fc1a 	bl	800b73a <clmt_clust>
 800cf06:	4602      	mov	r2, r0
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	4619      	mov	r1, r3
 800cf14:	4610      	mov	r0, r2
 800cf16:	f7fe f963 	bl	800b1e0 <clust2sect>
 800cf1a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d109      	bne.n	800cf36 <f_lseek+0x180>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2202      	movs	r2, #2
 800cf26:	755a      	strb	r2, [r3, #21]
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	2102      	movs	r1, #2
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fd fef0 	bl	800ad12 <unlock_fs>
 800cf32:	2302      	movs	r3, #2
 800cf34:	e18e      	b.n	800d254 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	0a5b      	lsrs	r3, r3, #9
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	8952      	ldrh	r2, [r2, #10]
 800cf40:	3a01      	subs	r2, #1
 800cf42:	4013      	ands	r3, r2
 800cf44:	69ba      	ldr	r2, [r7, #24]
 800cf46:	4413      	add	r3, r2
 800cf48:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	699b      	ldr	r3, [r3, #24]
 800cf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 8175 	beq.w	800d242 <f_lseek+0x48c>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6a1b      	ldr	r3, [r3, #32]
 800cf5c:	69ba      	ldr	r2, [r7, #24]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	f000 816f 	beq.w	800d242 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	7d1b      	ldrb	r3, [r3, #20]
 800cf68:	b25b      	sxtb	r3, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	da1d      	bge.n	800cfaa <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	7858      	ldrb	r0, [r3, #1]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6a1a      	ldr	r2, [r3, #32]
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	f7fd fd73 	bl	800aa68 <disk_write>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d009      	beq.n	800cf9c <f_lseek+0x1e6>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	755a      	strb	r2, [r3, #21]
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	2101      	movs	r1, #1
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fd febd 	bl	800ad12 <unlock_fs>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e15b      	b.n	800d254 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7d1b      	ldrb	r3, [r3, #20]
 800cfa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	7858      	ldrb	r0, [r3, #1]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	69ba      	ldr	r2, [r7, #24]
 800cfb8:	f7fd fd36 	bl	800aa28 <disk_read>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d009      	beq.n	800cfd6 <f_lseek+0x220>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	755a      	strb	r2, [r3, #21]
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	2101      	movs	r1, #1
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fd fea0 	bl	800ad12 <unlock_fs>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e13e      	b.n	800d254 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	69ba      	ldr	r2, [r7, #24]
 800cfda:	621a      	str	r2, [r3, #32]
 800cfdc:	e131      	b.n	800d242 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d908      	bls.n	800cffa <f_lseek+0x244>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	7d1b      	ldrb	r3, [r3, #20]
 800cfec:	f003 0302 	and.w	r3, r3, #2
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d102      	bne.n	800cffa <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	699b      	ldr	r3, [r3, #24]
 800cffe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	637b      	str	r3, [r7, #52]	@ 0x34
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d008:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 80c0 	beq.w	800d192 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	895b      	ldrh	r3, [r3, #10]
 800d016:	025b      	lsls	r3, r3, #9
 800d018:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d01b      	beq.n	800d058 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	1e5a      	subs	r2, r3, #1
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	fbb2 f2f3 	udiv	r2, r2, r3
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	1e59      	subs	r1, r3, #1
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d034:	429a      	cmp	r2, r3
 800d036:	d30f      	bcc.n	800d058 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d038:	6a3b      	ldr	r3, [r7, #32]
 800d03a:	1e5a      	subs	r2, r3, #1
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	425b      	negs	r3, r3
 800d040:	401a      	ands	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	683a      	ldr	r2, [r7, #0]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	69db      	ldr	r3, [r3, #28]
 800d054:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d056:	e02c      	b.n	800d0b2 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d060:	2b00      	cmp	r3, #0
 800d062:	d123      	bne.n	800d0ac <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2100      	movs	r1, #0
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fe face 	bl	800b60a <create_chain>
 800d06e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d072:	2b01      	cmp	r3, #1
 800d074:	d109      	bne.n	800d08a <f_lseek+0x2d4>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2202      	movs	r2, #2
 800d07a:	755a      	strb	r2, [r3, #21]
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	2102      	movs	r1, #2
 800d080:	4618      	mov	r0, r3
 800d082:	f7fd fe46 	bl	800ad12 <unlock_fs>
 800d086:	2302      	movs	r3, #2
 800d088:	e0e4      	b.n	800d254 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d090:	d109      	bne.n	800d0a6 <f_lseek+0x2f0>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	755a      	strb	r2, [r3, #21]
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2101      	movs	r1, #1
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7fd fe38 	bl	800ad12 <unlock_fs>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e0d6      	b.n	800d254 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0aa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0b0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d06c      	beq.n	800d192 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800d0b8:	e044      	b.n	800d144 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	603b      	str	r3, [r7, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	699a      	ldr	r2, [r3, #24]
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	441a      	add	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	7d1b      	ldrb	r3, [r3, #20]
 800d0d2:	f003 0302 	and.w	r3, r3, #2
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00b      	beq.n	800d0f2 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe fa93 	bl	800b60a <create_chain>
 800d0e4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d108      	bne.n	800d0fe <f_lseek+0x348>
							ofs = 0; break;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	603b      	str	r3, [r7, #0]
 800d0f0:	e02c      	b.n	800d14c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe f891 	bl	800b21e <get_fat>
 800d0fc:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d104:	d109      	bne.n	800d11a <f_lseek+0x364>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2201      	movs	r2, #1
 800d10a:	755a      	strb	r2, [r3, #21]
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2101      	movs	r1, #1
 800d110:	4618      	mov	r0, r3
 800d112:	f7fd fdfe 	bl	800ad12 <unlock_fs>
 800d116:	2301      	movs	r3, #1
 800d118:	e09c      	b.n	800d254 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d904      	bls.n	800d12a <f_lseek+0x374>
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	699b      	ldr	r3, [r3, #24]
 800d124:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d126:	429a      	cmp	r2, r3
 800d128:	d309      	bcc.n	800d13e <f_lseek+0x388>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2202      	movs	r2, #2
 800d12e:	755a      	strb	r2, [r3, #21]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2102      	movs	r1, #2
 800d134:	4618      	mov	r0, r3
 800d136:	f7fd fdec 	bl	800ad12 <unlock_fs>
 800d13a:	2302      	movs	r3, #2
 800d13c:	e08a      	b.n	800d254 <f_lseek+0x49e>
					fp->clust = clst;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d142:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d8b6      	bhi.n	800d0ba <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	699a      	ldr	r2, [r3, #24]
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	441a      	add	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d017      	beq.n	800d192 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d166:	4618      	mov	r0, r3
 800d168:	f7fe f83a 	bl	800b1e0 <clust2sect>
 800d16c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d16e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d170:	2b00      	cmp	r3, #0
 800d172:	d109      	bne.n	800d188 <f_lseek+0x3d2>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2202      	movs	r2, #2
 800d178:	755a      	strb	r2, [r3, #21]
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2102      	movs	r1, #2
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fd fdc7 	bl	800ad12 <unlock_fs>
 800d184:	2302      	movs	r3, #2
 800d186:	e065      	b.n	800d254 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	0a5b      	lsrs	r3, r3, #9
 800d18c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d18e:	4413      	add	r3, r2
 800d190:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	699a      	ldr	r2, [r3, #24]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d90a      	bls.n	800d1b4 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	699a      	ldr	r2, [r3, #24]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	7d1b      	ldrb	r3, [r3, #20]
 800d1aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d040      	beq.n	800d242 <f_lseek+0x48c>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a1b      	ldr	r3, [r3, #32]
 800d1c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d03b      	beq.n	800d242 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	7d1b      	ldrb	r3, [r3, #20]
 800d1ce:	b25b      	sxtb	r3, r3
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	da1d      	bge.n	800d210 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	7858      	ldrb	r0, [r3, #1]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a1a      	ldr	r2, [r3, #32]
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	f7fd fc40 	bl	800aa68 <disk_write>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d009      	beq.n	800d202 <f_lseek+0x44c>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	755a      	strb	r2, [r3, #21]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	2101      	movs	r1, #1
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fd fd8a 	bl	800ad12 <unlock_fs>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e028      	b.n	800d254 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	7d1b      	ldrb	r3, [r3, #20]
 800d206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	7858      	ldrb	r0, [r3, #1]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d21a:	2301      	movs	r3, #1
 800d21c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d21e:	f7fd fc03 	bl	800aa28 <disk_read>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d009      	beq.n	800d23c <f_lseek+0x486>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	755a      	strb	r2, [r3, #21]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	2101      	movs	r1, #1
 800d232:	4618      	mov	r0, r3
 800d234:	f7fd fd6d 	bl	800ad12 <unlock_fs>
 800d238:	2301      	movs	r3, #1
 800d23a:	e00b      	b.n	800d254 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d240:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d248:	4611      	mov	r1, r2
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fd fd61 	bl	800ad12 <unlock_fs>
 800d250:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d254:	4618      	mov	r0, r3
 800d256:	3740      	adds	r7, #64	@ 0x40
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b096      	sub	sp, #88	@ 0x58
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d264:	f107 0108 	add.w	r1, r7, #8
 800d268:	1d3b      	adds	r3, r7, #4
 800d26a:	2202      	movs	r2, #2
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fe fe85 	bl	800bf7c <find_volume>
 800d272:	4603      	mov	r3, r0
 800d274:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800d27c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d280:	2b00      	cmp	r3, #0
 800d282:	f040 80ec 	bne.w	800d45e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	f107 030c 	add.w	r3, r7, #12
 800d28c:	4611      	mov	r1, r2
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe fd68 	bl	800bd64 <follow_path>
 800d294:	4603      	mov	r3, r0
 800d296:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800d29a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d102      	bne.n	800d2a8 <f_mkdir+0x4c>
 800d2a2:	2308      	movs	r3, #8
 800d2a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800d2a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d2ac:	2b04      	cmp	r3, #4
 800d2ae:	f040 80d6 	bne.w	800d45e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800d2b2:	f107 030c 	add.w	r3, r7, #12
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe f9a6 	bl	800b60a <create_chain>
 800d2be:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	895b      	ldrh	r3, [r3, #10]
 800d2c4:	025b      	lsls	r3, r3, #9
 800d2c6:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800d2ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <f_mkdir+0x7e>
 800d2d4:	2307      	movs	r3, #7
 800d2d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800d2da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d102      	bne.n	800d2e6 <f_mkdir+0x8a>
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d2e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ec:	d102      	bne.n	800d2f4 <f_mkdir+0x98>
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800d2f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d106      	bne.n	800d30a <f_mkdir+0xae>
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fd fe8e 	bl	800b020 <sync_window>
 800d304:	4603      	mov	r3, r0
 800d306:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800d30a:	f7fd faed 	bl	800a8e8 <get_fattime>
 800d30e:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800d310:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d314:	2b00      	cmp	r3, #0
 800d316:	d16a      	bne.n	800d3ee <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7fd ff5f 	bl	800b1e0 <clust2sect>
 800d322:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	3334      	adds	r3, #52	@ 0x34
 800d328:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800d32a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d32e:	2100      	movs	r1, #0
 800d330:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d332:	f7fd fc7b 	bl	800ac2c <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800d336:	220b      	movs	r2, #11
 800d338:	2120      	movs	r1, #32
 800d33a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d33c:	f7fd fc76 	bl	800ac2c <mem_set>
					dir[DIR_Name] = '.';
 800d340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d342:	222e      	movs	r2, #46	@ 0x2e
 800d344:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800d346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d348:	330b      	adds	r3, #11
 800d34a:	2210      	movs	r2, #16
 800d34c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800d34e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d350:	3316      	adds	r3, #22
 800d352:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d354:	4618      	mov	r0, r3
 800d356:	f7fd fc1c 	bl	800ab92 <st_dword>
					st_clust(fs, dir, dcl);
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d35e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d360:	4618      	mov	r0, r3
 800d362:	f7fe fbc4 	bl	800baee <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800d366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d368:	3320      	adds	r3, #32
 800d36a:	2220      	movs	r2, #32
 800d36c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fd fc3b 	bl	800abea <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800d374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d376:	3321      	adds	r3, #33	@ 0x21
 800d378:	222e      	movs	r2, #46	@ 0x2e
 800d37a:	701a      	strb	r2, [r3, #0]
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b03      	cmp	r3, #3
 800d386:	d106      	bne.n	800d396 <f_mkdir+0x13a>
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d38c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d38e:	429a      	cmp	r2, r3
 800d390:	d101      	bne.n	800d396 <f_mkdir+0x13a>
 800d392:	2300      	movs	r3, #0
 800d394:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800d396:	68b8      	ldr	r0, [r7, #8]
 800d398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d39a:	3320      	adds	r3, #32
 800d39c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d39e:	4619      	mov	r1, r3
 800d3a0:	f7fe fba5 	bl	800baee <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	895b      	ldrh	r3, [r3, #10]
 800d3a8:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3aa:	e01b      	b.n	800d3e4 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800d3ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3ae:	1c5a      	adds	r2, r3, #1
 800d3b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fd fe2e 	bl	800b020 <sync_window>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800d3ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10c      	bne.n	800d3ec <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800d3d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d3da:	f7fd fc27 	bl	800ac2c <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d3de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e0:	3b01      	subs	r3, #1
 800d3e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d1e0      	bne.n	800d3ac <f_mkdir+0x150>
 800d3ea:	e000      	b.n	800d3ee <f_mkdir+0x192>
					if (res != FR_OK) break;
 800d3ec:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800d3ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d107      	bne.n	800d406 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800d3f6:	f107 030c 	add.w	r3, r7, #12
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fe fbec 	bl	800bbd8 <dir_register>
 800d400:	4603      	mov	r3, r0
 800d402:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800d406:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d120      	bne.n	800d450 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800d40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d410:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800d412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d414:	3316      	adds	r3, #22
 800d416:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fd fbba 	bl	800ab92 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d422:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d424:	4618      	mov	r0, r3
 800d426:	f7fe fb62 	bl	800baee <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800d42a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d42c:	330b      	adds	r3, #11
 800d42e:	2210      	movs	r2, #16
 800d430:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	2201      	movs	r2, #1
 800d436:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800d438:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10e      	bne.n	800d45e <f_mkdir+0x202>
					res = sync_fs(fs);
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	4618      	mov	r0, r3
 800d444:	f7fd fe5e 	bl	800b104 <sync_fs>
 800d448:	4603      	mov	r3, r0
 800d44a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800d44e:	e006      	b.n	800d45e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800d450:	f107 030c 	add.w	r3, r7, #12
 800d454:	2200      	movs	r2, #0
 800d456:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fe f871 	bl	800b540 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d464:	4611      	mov	r1, r2
 800d466:	4618      	mov	r0, r3
 800d468:	f7fd fc53 	bl	800ad12 <unlock_fs>
 800d46c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800d470:	4618      	mov	r0, r3
 800d472:	3758      	adds	r7, #88	@ 0x58
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d478:	b480      	push	{r7}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	4613      	mov	r3, r2
 800d484:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d486:	2301      	movs	r3, #1
 800d488:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d48e:	4b1f      	ldr	r3, [pc, #124]	@ (800d50c <FATFS_LinkDriverEx+0x94>)
 800d490:	7a5b      	ldrb	r3, [r3, #9]
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b00      	cmp	r3, #0
 800d496:	d131      	bne.n	800d4fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d498:	4b1c      	ldr	r3, [pc, #112]	@ (800d50c <FATFS_LinkDriverEx+0x94>)
 800d49a:	7a5b      	ldrb	r3, [r3, #9]
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	461a      	mov	r2, r3
 800d4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800d50c <FATFS_LinkDriverEx+0x94>)
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d4a6:	4b19      	ldr	r3, [pc, #100]	@ (800d50c <FATFS_LinkDriverEx+0x94>)
 800d4a8:	7a5b      	ldrb	r3, [r3, #9]
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	4a17      	ldr	r2, [pc, #92]	@ (800d50c <FATFS_LinkDriverEx+0x94>)
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4413      	add	r3, r2
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d4b6:	4b15      	ldr	r3, [pc, #84]	@ (800d50c <FATFS_LinkDriverEx+0x94>)
 800d4b8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4b13      	ldr	r3, [pc, #76]	@ (800d50c <FATFS_LinkDriverEx+0x94>)
 800d4c0:	4413      	add	r3, r2
 800d4c2:	79fa      	ldrb	r2, [r7, #7]
 800d4c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d4c6:	4b11      	ldr	r3, [pc, #68]	@ (800d50c <FATFS_LinkDriverEx+0x94>)
 800d4c8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	1c5a      	adds	r2, r3, #1
 800d4ce:	b2d1      	uxtb	r1, r2
 800d4d0:	4a0e      	ldr	r2, [pc, #56]	@ (800d50c <FATFS_LinkDriverEx+0x94>)
 800d4d2:	7251      	strb	r1, [r2, #9]
 800d4d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d4d6:	7dbb      	ldrb	r3, [r7, #22]
 800d4d8:	3330      	adds	r3, #48	@ 0x30
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	223a      	movs	r2, #58	@ 0x3a
 800d4e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	3302      	adds	r3, #2
 800d4ec:	222f      	movs	r2, #47	@ 0x2f
 800d4ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	3303      	adds	r3, #3
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	20001098 	.word	0x20001098

0800d510 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d51a:	2200      	movs	r2, #0
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7ff ffaa 	bl	800d478 <FATFS_LinkDriverEx>
 800d524:	4603      	mov	r3, r0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d52e:	b580      	push	{r7, lr}
 800d530:	b084      	sub	sp, #16
 800d532:	af00      	add	r7, sp, #0
 800d534:	4603      	mov	r3, r0
 800d536:	6039      	str	r1, [r7, #0]
 800d538:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800d53a:	2300      	movs	r3, #0
 800d53c:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d53e:	f107 0308 	add.w	r3, r7, #8
 800d542:	2101      	movs	r1, #1
 800d544:	4618      	mov	r0, r3
 800d546:	f000 f939 	bl	800d7bc <osSemaphoreCreate>
 800d54a:	4602      	mov	r2, r0
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	bf14      	ite	ne
 800d558:	2301      	movne	r3, #1
 800d55a:	2300      	moveq	r3, #0
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	60fb      	str	r3, [r7, #12]

    return ret;
 800d560:	68fb      	ldr	r3, [r7, #12]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b082      	sub	sp, #8
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 f9c4 	bl	800d900 <osSemaphoreDelete>
#endif
    return 1;
 800d578:	2301      	movs	r3, #1
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800d58e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 f930 	bl	800d7f8 <osSemaphoreWait>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 f96d 	bl	800d894 <osSemaphoreRelease>
#endif
}
 800d5ba:	bf00      	nop
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b085      	sub	sp, #20
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d5d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d5d4:	2b84      	cmp	r3, #132	@ 0x84
 800d5d6:	d005      	beq.n	800d5e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d5d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	4413      	add	r3, r2
 800d5e0:	3303      	adds	r3, #3
 800d5e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5f8:	f3ef 8305 	mrs	r3, IPSR
 800d5fc:	607b      	str	r3, [r7, #4]
  return(result);
 800d5fe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d600:	2b00      	cmp	r3, #0
 800d602:	bf14      	ite	ne
 800d604:	2301      	movne	r3, #1
 800d606:	2300      	moveq	r3, #0
 800d608:	b2db      	uxtb	r3, r3
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	370c      	adds	r7, #12
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d61a:	f001 fa6b 	bl	800eaf4 <vTaskStartScheduler>
  
  return osOK;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	bd80      	pop	{r7, pc}

0800d624 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d626:	b087      	sub	sp, #28
 800d628:	af02      	add	r7, sp, #8
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	685c      	ldr	r4, [r3, #4]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d63a:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff ffbd 	bl	800d5c2 <makeFreeRtosPriority>
 800d648:	4602      	mov	r2, r0
 800d64a:	f107 030c 	add.w	r3, r7, #12
 800d64e:	9301      	str	r3, [sp, #4]
 800d650:	9200      	str	r2, [sp, #0]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	4632      	mov	r2, r6
 800d656:	4629      	mov	r1, r5
 800d658:	4620      	mov	r0, r4
 800d65a:	f000 ffad 	bl	800e5b8 <xTaskCreate>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b01      	cmp	r3, #1
 800d662:	d001      	beq.n	800d668 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800d664:	2300      	movs	r3, #0
 800d666:	e000      	b.n	800d66a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800d668:	68fb      	ldr	r3, [r7, #12]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d672 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b084      	sub	sp, #16
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <osDelay+0x16>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	e000      	b.n	800d68a <osDelay+0x18>
 800d688:	2301      	movs	r3, #1
 800d68a:	4618      	mov	r0, r3
 800d68c:	f001 f968 	bl	800e960 <vTaskDelay>
  
  return osOK;
 800d690:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b082      	sub	sp, #8
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800d6a2:	2001      	movs	r0, #1
 800d6a4:	f000 fada 	bl	800dc5c <xQueueCreateMutex>
 800d6a8:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3708      	adds	r7, #8
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
	...

0800d6b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <osMutexWait+0x18>
    return osErrorParameter;
 800d6c8:	2380      	movs	r3, #128	@ 0x80
 800d6ca:	e03a      	b.n	800d742 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d6:	d103      	bne.n	800d6e0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800d6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6dc:	60fb      	str	r3, [r7, #12]
 800d6de:	e009      	b.n	800d6f4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d006      	beq.n	800d6f4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <osMutexWait+0x40>
      ticks = 1;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d6f4:	f7ff ff7d 	bl	800d5f2 <inHandlerMode>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d017      	beq.n	800d72e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d6fe:	f107 0308 	add.w	r3, r7, #8
 800d702:	461a      	mov	r2, r3
 800d704:	2100      	movs	r1, #0
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fd62 	bl	800e1d0 <xQueueReceiveFromISR>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d001      	beq.n	800d716 <osMutexWait+0x62>
      return osErrorOS;
 800d712:	23ff      	movs	r3, #255	@ 0xff
 800d714:	e015      	b.n	800d742 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d011      	beq.n	800d740 <osMutexWait+0x8c>
 800d71c:	4b0b      	ldr	r3, [pc, #44]	@ (800d74c <osMutexWait+0x98>)
 800d71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	e008      	b.n	800d740 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d72e:	68f9      	ldr	r1, [r7, #12]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fc3d 	bl	800dfb0 <xQueueSemaphoreTake>
 800d736:	4603      	mov	r3, r0
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d001      	beq.n	800d740 <osMutexWait+0x8c>
    return osErrorOS;
 800d73c:	23ff      	movs	r3, #255	@ 0xff
 800d73e:	e000      	b.n	800d742 <osMutexWait+0x8e>
  }
  
  return osOK;
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	e000ed04 	.word	0xe000ed04

0800d750 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d758:	2300      	movs	r3, #0
 800d75a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d75c:	2300      	movs	r3, #0
 800d75e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800d760:	f7ff ff47 	bl	800d5f2 <inHandlerMode>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d016      	beq.n	800d798 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d76a:	f107 0308 	add.w	r3, r7, #8
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 fb8d 	bl	800de90 <xQueueGiveFromISR>
 800d776:	4603      	mov	r3, r0
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d001      	beq.n	800d780 <osMutexRelease+0x30>
      return osErrorOS;
 800d77c:	23ff      	movs	r3, #255	@ 0xff
 800d77e:	e017      	b.n	800d7b0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d013      	beq.n	800d7ae <osMutexRelease+0x5e>
 800d786:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b8 <osMutexRelease+0x68>)
 800d788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	e00a      	b.n	800d7ae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d798:	2300      	movs	r3, #0
 800d79a:	2200      	movs	r2, #0
 800d79c:	2100      	movs	r1, #0
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 fa74 	bl	800dc8c <xQueueGenericSend>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d001      	beq.n	800d7ae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800d7aa:	23ff      	movs	r3, #255	@ 0xff
 800d7ac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	e000ed04 	.word	0xe000ed04

0800d7bc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d110      	bne.n	800d7ee <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800d7cc:	2203      	movs	r2, #3
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	2001      	movs	r0, #1
 800d7d2:	f000 f9d3 	bl	800db7c <xQueueGenericCreate>
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <osSemaphoreCreate+0x2e>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f000 fa51 	bl	800dc8c <xQueueGenericSend>
    return sema;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	e000      	b.n	800d7f0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800d7ee:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d802:	2300      	movs	r3, #0
 800d804:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d101      	bne.n	800d810 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d80c:	2380      	movs	r3, #128	@ 0x80
 800d80e:	e03a      	b.n	800d886 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81a:	d103      	bne.n	800d824 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d81c:	f04f 33ff 	mov.w	r3, #4294967295
 800d820:	60fb      	str	r3, [r7, #12]
 800d822:	e009      	b.n	800d838 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d006      	beq.n	800d838 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <osSemaphoreWait+0x40>
      ticks = 1;
 800d834:	2301      	movs	r3, #1
 800d836:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d838:	f7ff fedb 	bl	800d5f2 <inHandlerMode>
 800d83c:	4603      	mov	r3, r0
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d017      	beq.n	800d872 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d842:	f107 0308 	add.w	r3, r7, #8
 800d846:	461a      	mov	r2, r3
 800d848:	2100      	movs	r1, #0
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fcc0 	bl	800e1d0 <xQueueReceiveFromISR>
 800d850:	4603      	mov	r3, r0
 800d852:	2b01      	cmp	r3, #1
 800d854:	d001      	beq.n	800d85a <osSemaphoreWait+0x62>
      return osErrorOS;
 800d856:	23ff      	movs	r3, #255	@ 0xff
 800d858:	e015      	b.n	800d886 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d011      	beq.n	800d884 <osSemaphoreWait+0x8c>
 800d860:	4b0b      	ldr	r3, [pc, #44]	@ (800d890 <osSemaphoreWait+0x98>)
 800d862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d866:	601a      	str	r2, [r3, #0]
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	e008      	b.n	800d884 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d872:	68f9      	ldr	r1, [r7, #12]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fb9b 	bl	800dfb0 <xQueueSemaphoreTake>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d001      	beq.n	800d884 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d880:	23ff      	movs	r3, #255	@ 0xff
 800d882:	e000      	b.n	800d886 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	e000ed04 	.word	0xe000ed04

0800d894 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d8a4:	f7ff fea5 	bl	800d5f2 <inHandlerMode>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d016      	beq.n	800d8dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d8ae:	f107 0308 	add.w	r3, r7, #8
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 faeb 	bl	800de90 <xQueueGiveFromISR>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d001      	beq.n	800d8c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d8c0:	23ff      	movs	r3, #255	@ 0xff
 800d8c2:	e017      	b.n	800d8f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d013      	beq.n	800d8f2 <osSemaphoreRelease+0x5e>
 800d8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800d8fc <osSemaphoreRelease+0x68>)
 800d8cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8d0:	601a      	str	r2, [r3, #0]
 800d8d2:	f3bf 8f4f 	dsb	sy
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	e00a      	b.n	800d8f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d8dc:	2300      	movs	r3, #0
 800d8de:	2200      	movs	r2, #0
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 f9d2 	bl	800dc8c <xQueueGenericSend>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d001      	beq.n	800d8f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d8ee:	23ff      	movs	r3, #255	@ 0xff
 800d8f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3710      	adds	r7, #16
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	e000ed04 	.word	0xe000ed04

0800d900 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800d908:	f7ff fe73 	bl	800d5f2 <inHandlerMode>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d001      	beq.n	800d916 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800d912:	2382      	movs	r3, #130	@ 0x82
 800d914:	e003      	b.n	800d91e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fcdc 	bl	800e2d4 <vQueueDelete>

  return osOK; 
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800d926:	b580      	push	{r7, lr}
 800d928:	b082      	sub	sp, #8
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f001 f84c 	bl	800e9cc <vTaskSuspend>
  
  return osOK;
 800d934:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800d936:	4618      	mov	r0, r3
 800d938:	3708      	adds	r7, #8
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d93e:	b480      	push	{r7}
 800d940:	b083      	sub	sp, #12
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f103 0208 	add.w	r2, r3, #8
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f04f 32ff 	mov.w	r2, #4294967295
 800d956:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f103 0208 	add.w	r2, r3, #8
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f103 0208 	add.w	r2, r3, #8
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d972:	bf00      	nop
 800d974:	370c      	adds	r7, #12
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr

0800d97e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d97e:	b480      	push	{r7}
 800d980:	b083      	sub	sp, #12
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d98c:	bf00      	nop
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	689a      	ldr	r2, [r3, #8]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	683a      	ldr	r2, [r7, #0]
 800d9bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	683a      	ldr	r2, [r7, #0]
 800d9c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	1c5a      	adds	r2, r3, #1
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	601a      	str	r2, [r3, #0]
}
 800d9d4:	bf00      	nop
 800d9d6:	3714      	adds	r7, #20
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f6:	d103      	bne.n	800da00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	60fb      	str	r3, [r7, #12]
 800d9fe:	e00c      	b.n	800da1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	3308      	adds	r3, #8
 800da04:	60fb      	str	r3, [r7, #12]
 800da06:	e002      	b.n	800da0e <vListInsert+0x2e>
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	60fb      	str	r3, [r7, #12]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	429a      	cmp	r2, r3
 800da18:	d2f6      	bcs.n	800da08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	683a      	ldr	r2, [r7, #0]
 800da28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	1c5a      	adds	r2, r3, #1
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	601a      	str	r2, [r3, #0]
}
 800da46:	bf00      	nop
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800da52:	b480      	push	{r7}
 800da54:	b085      	sub	sp, #20
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	6892      	ldr	r2, [r2, #8]
 800da68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	6852      	ldr	r2, [r2, #4]
 800da72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d103      	bne.n	800da86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	689a      	ldr	r2, [r3, #8]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	1e5a      	subs	r2, r3, #1
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3714      	adds	r7, #20
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
	...

0800daa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d10b      	bne.n	800dad4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac0:	f383 8811 	msr	BASEPRI, r3
 800dac4:	f3bf 8f6f 	isb	sy
 800dac8:	f3bf 8f4f 	dsb	sy
 800dacc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dace:	bf00      	nop
 800dad0:	bf00      	nop
 800dad2:	e7fd      	b.n	800dad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dad4:	f001 ff60 	bl	800f998 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dae0:	68f9      	ldr	r1, [r7, #12]
 800dae2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dae4:	fb01 f303 	mul.w	r3, r1, r3
 800dae8:	441a      	add	r2, r3
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db04:	3b01      	subs	r3, #1
 800db06:	68f9      	ldr	r1, [r7, #12]
 800db08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800db0a:	fb01 f303 	mul.w	r3, r1, r3
 800db0e:	441a      	add	r2, r3
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	22ff      	movs	r2, #255	@ 0xff
 800db18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	22ff      	movs	r2, #255	@ 0xff
 800db20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d114      	bne.n	800db54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	691b      	ldr	r3, [r3, #16]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d01a      	beq.n	800db68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	3310      	adds	r3, #16
 800db36:	4618      	mov	r0, r3
 800db38:	f001 fa2e 	bl	800ef98 <xTaskRemoveFromEventList>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d012      	beq.n	800db68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800db42:	4b0d      	ldr	r3, [pc, #52]	@ (800db78 <xQueueGenericReset+0xd0>)
 800db44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db48:	601a      	str	r2, [r3, #0]
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	e009      	b.n	800db68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	3310      	adds	r3, #16
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff fef0 	bl	800d93e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	3324      	adds	r3, #36	@ 0x24
 800db62:	4618      	mov	r0, r3
 800db64:	f7ff feeb 	bl	800d93e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800db68:	f001 ff48 	bl	800f9fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800db6c:	2301      	movs	r3, #1
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	e000ed04 	.word	0xe000ed04

0800db7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b08a      	sub	sp, #40	@ 0x28
 800db80:	af02      	add	r7, sp, #8
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	4613      	mov	r3, r2
 800db88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10b      	bne.n	800dba8 <xQueueGenericCreate+0x2c>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	613b      	str	r3, [r7, #16]
}
 800dba2:	bf00      	nop
 800dba4:	bf00      	nop
 800dba6:	e7fd      	b.n	800dba4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	68ba      	ldr	r2, [r7, #8]
 800dbac:	fb02 f303 	mul.w	r3, r2, r3
 800dbb0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	3348      	adds	r3, #72	@ 0x48
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f002 f810 	bl	800fbdc <pvPortMalloc>
 800dbbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00d      	beq.n	800dbe0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dbc4:	69bb      	ldr	r3, [r7, #24]
 800dbc6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	3348      	adds	r3, #72	@ 0x48
 800dbcc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dbce:	79fa      	ldrb	r2, [r7, #7]
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	68b9      	ldr	r1, [r7, #8]
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f000 f805 	bl	800dbea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dbe0:	69bb      	ldr	r3, [r7, #24]
	}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3720      	adds	r7, #32
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b084      	sub	sp, #16
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	60f8      	str	r0, [r7, #12]
 800dbf2:	60b9      	str	r1, [r7, #8]
 800dbf4:	607a      	str	r2, [r7, #4]
 800dbf6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d103      	bne.n	800dc06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	69ba      	ldr	r2, [r7, #24]
 800dc02:	601a      	str	r2, [r3, #0]
 800dc04:	e002      	b.n	800dc0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dc18:	2101      	movs	r1, #1
 800dc1a:	69b8      	ldr	r0, [r7, #24]
 800dc1c:	f7ff ff44 	bl	800daa8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dc20:	bf00      	nop
 800dc22:	3710      	adds	r7, #16
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00e      	beq.n	800dc54 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dc48:	2300      	movs	r3, #0
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f81c 	bl	800dc8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dc54:	bf00      	nop
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	4603      	mov	r3, r0
 800dc64:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc66:	2301      	movs	r3, #1
 800dc68:	617b      	str	r3, [r7, #20]
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	461a      	mov	r2, r3
 800dc72:	6939      	ldr	r1, [r7, #16]
 800dc74:	6978      	ldr	r0, [r7, #20]
 800dc76:	f7ff ff81 	bl	800db7c <xQueueGenericCreate>
 800dc7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f7ff ffd3 	bl	800dc28 <prvInitialiseMutex>

		return xNewQueue;
 800dc82:	68fb      	ldr	r3, [r7, #12]
	}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3718      	adds	r7, #24
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08e      	sub	sp, #56	@ 0x38
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10b      	bne.n	800dcc0 <xQueueGenericSend+0x34>
	__asm volatile
 800dca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dcba:	bf00      	nop
 800dcbc:	bf00      	nop
 800dcbe:	e7fd      	b.n	800dcbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d103      	bne.n	800dcce <xQueueGenericSend+0x42>
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d101      	bne.n	800dcd2 <xQueueGenericSend+0x46>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e000      	b.n	800dcd4 <xQueueGenericSend+0x48>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10b      	bne.n	800dcf0 <xQueueGenericSend+0x64>
	__asm volatile
 800dcd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcdc:	f383 8811 	msr	BASEPRI, r3
 800dce0:	f3bf 8f6f 	isb	sy
 800dce4:	f3bf 8f4f 	dsb	sy
 800dce8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dcea:	bf00      	nop
 800dcec:	bf00      	nop
 800dcee:	e7fd      	b.n	800dcec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d103      	bne.n	800dcfe <xQueueGenericSend+0x72>
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d101      	bne.n	800dd02 <xQueueGenericSend+0x76>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e000      	b.n	800dd04 <xQueueGenericSend+0x78>
 800dd02:	2300      	movs	r3, #0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d10b      	bne.n	800dd20 <xQueueGenericSend+0x94>
	__asm volatile
 800dd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd0c:	f383 8811 	msr	BASEPRI, r3
 800dd10:	f3bf 8f6f 	isb	sy
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	623b      	str	r3, [r7, #32]
}
 800dd1a:	bf00      	nop
 800dd1c:	bf00      	nop
 800dd1e:	e7fd      	b.n	800dd1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd20:	f001 fae0 	bl	800f2e4 <xTaskGetSchedulerState>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d102      	bne.n	800dd30 <xQueueGenericSend+0xa4>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d101      	bne.n	800dd34 <xQueueGenericSend+0xa8>
 800dd30:	2301      	movs	r3, #1
 800dd32:	e000      	b.n	800dd36 <xQueueGenericSend+0xaa>
 800dd34:	2300      	movs	r3, #0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10b      	bne.n	800dd52 <xQueueGenericSend+0xc6>
	__asm volatile
 800dd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd3e:	f383 8811 	msr	BASEPRI, r3
 800dd42:	f3bf 8f6f 	isb	sy
 800dd46:	f3bf 8f4f 	dsb	sy
 800dd4a:	61fb      	str	r3, [r7, #28]
}
 800dd4c:	bf00      	nop
 800dd4e:	bf00      	nop
 800dd50:	e7fd      	b.n	800dd4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd52:	f001 fe21 	bl	800f998 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d302      	bcc.n	800dd68 <xQueueGenericSend+0xdc>
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d129      	bne.n	800ddbc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd68:	683a      	ldr	r2, [r7, #0]
 800dd6a:	68b9      	ldr	r1, [r7, #8]
 800dd6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd6e:	f000 fae8 	bl	800e342 <prvCopyDataToQueue>
 800dd72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d010      	beq.n	800dd9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7e:	3324      	adds	r3, #36	@ 0x24
 800dd80:	4618      	mov	r0, r3
 800dd82:	f001 f909 	bl	800ef98 <xTaskRemoveFromEventList>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d013      	beq.n	800ddb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dd8c:	4b3f      	ldr	r3, [pc, #252]	@ (800de8c <xQueueGenericSend+0x200>)
 800dd8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd92:	601a      	str	r2, [r3, #0]
 800dd94:	f3bf 8f4f 	dsb	sy
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	e00a      	b.n	800ddb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d007      	beq.n	800ddb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dda4:	4b39      	ldr	r3, [pc, #228]	@ (800de8c <xQueueGenericSend+0x200>)
 800dda6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddaa:	601a      	str	r2, [r3, #0]
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ddb4:	f001 fe22 	bl	800f9fc <vPortExitCritical>
				return pdPASS;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e063      	b.n	800de84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d103      	bne.n	800ddca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddc2:	f001 fe1b 	bl	800f9fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	e05c      	b.n	800de84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d106      	bne.n	800ddde <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddd0:	f107 0314 	add.w	r3, r7, #20
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f001 f943 	bl	800f060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddda:	2301      	movs	r3, #1
 800dddc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ddde:	f001 fe0d 	bl	800f9fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dde2:	f000 fed9 	bl	800eb98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dde6:	f001 fdd7 	bl	800f998 <vPortEnterCritical>
 800ddea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ddf0:	b25b      	sxtb	r3, r3
 800ddf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf6:	d103      	bne.n	800de00 <xQueueGenericSend+0x174>
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de06:	b25b      	sxtb	r3, r3
 800de08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de0c:	d103      	bne.n	800de16 <xQueueGenericSend+0x18a>
 800de0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de10:	2200      	movs	r2, #0
 800de12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de16:	f001 fdf1 	bl	800f9fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de1a:	1d3a      	adds	r2, r7, #4
 800de1c:	f107 0314 	add.w	r3, r7, #20
 800de20:	4611      	mov	r1, r2
 800de22:	4618      	mov	r0, r3
 800de24:	f001 f932 	bl	800f08c <xTaskCheckForTimeOut>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d124      	bne.n	800de78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800de2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de30:	f000 fb7f 	bl	800e532 <prvIsQueueFull>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d018      	beq.n	800de6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de3c:	3310      	adds	r3, #16
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	4611      	mov	r1, r2
 800de42:	4618      	mov	r0, r3
 800de44:	f001 f882 	bl	800ef4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800de48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de4a:	f000 fb0a 	bl	800e462 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800de4e:	f000 feb1 	bl	800ebb4 <xTaskResumeAll>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	f47f af7c 	bne.w	800dd52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800de5a:	4b0c      	ldr	r3, [pc, #48]	@ (800de8c <xQueueGenericSend+0x200>)
 800de5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	e772      	b.n	800dd52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800de6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de6e:	f000 faf8 	bl	800e462 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de72:	f000 fe9f 	bl	800ebb4 <xTaskResumeAll>
 800de76:	e76c      	b.n	800dd52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800de78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de7a:	f000 faf2 	bl	800e462 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de7e:	f000 fe99 	bl	800ebb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800de82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800de84:	4618      	mov	r0, r3
 800de86:	3738      	adds	r7, #56	@ 0x38
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	e000ed04 	.word	0xe000ed04

0800de90 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08e      	sub	sp, #56	@ 0x38
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800de9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10b      	bne.n	800debc <xQueueGiveFromISR+0x2c>
	__asm volatile
 800dea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea8:	f383 8811 	msr	BASEPRI, r3
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	623b      	str	r3, [r7, #32]
}
 800deb6:	bf00      	nop
 800deb8:	bf00      	nop
 800deba:	e7fd      	b.n	800deb8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800debc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00b      	beq.n	800dedc <xQueueGiveFromISR+0x4c>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	61fb      	str	r3, [r7, #28]
}
 800ded6:	bf00      	nop
 800ded8:	bf00      	nop
 800deda:	e7fd      	b.n	800ded8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d103      	bne.n	800deec <xQueueGiveFromISR+0x5c>
 800dee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d101      	bne.n	800def0 <xQueueGiveFromISR+0x60>
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <xQueueGiveFromISR+0x62>
 800def0:	2300      	movs	r3, #0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d10b      	bne.n	800df0e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	61bb      	str	r3, [r7, #24]
}
 800df08:	bf00      	nop
 800df0a:	bf00      	nop
 800df0c:	e7fd      	b.n	800df0a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df0e:	f001 fe23 	bl	800fb58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800df12:	f3ef 8211 	mrs	r2, BASEPRI
 800df16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1a:	f383 8811 	msr	BASEPRI, r3
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	617a      	str	r2, [r7, #20]
 800df28:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800df2a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800df2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df32:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800df34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d22b      	bcs.n	800df96 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800df3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df4e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800df50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800df54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df58:	d112      	bne.n	800df80 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d016      	beq.n	800df90 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df64:	3324      	adds	r3, #36	@ 0x24
 800df66:	4618      	mov	r0, r3
 800df68:	f001 f816 	bl	800ef98 <xTaskRemoveFromEventList>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00e      	beq.n	800df90 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00b      	beq.n	800df90 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	2201      	movs	r2, #1
 800df7c:	601a      	str	r2, [r3, #0]
 800df7e:	e007      	b.n	800df90 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df84:	3301      	adds	r3, #1
 800df86:	b2db      	uxtb	r3, r3
 800df88:	b25a      	sxtb	r2, r3
 800df8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800df90:	2301      	movs	r3, #1
 800df92:	637b      	str	r3, [r7, #52]	@ 0x34
 800df94:	e001      	b.n	800df9a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800df96:	2300      	movs	r3, #0
 800df98:	637b      	str	r3, [r7, #52]	@ 0x34
 800df9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dfa4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3738      	adds	r7, #56	@ 0x38
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b08e      	sub	sp, #56	@ 0x38
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dfc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10b      	bne.n	800dfe4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dfcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd0:	f383 8811 	msr	BASEPRI, r3
 800dfd4:	f3bf 8f6f 	isb	sy
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	623b      	str	r3, [r7, #32]
}
 800dfde:	bf00      	nop
 800dfe0:	bf00      	nop
 800dfe2:	e7fd      	b.n	800dfe0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00b      	beq.n	800e004 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	61fb      	str	r3, [r7, #28]
}
 800dffe:	bf00      	nop
 800e000:	bf00      	nop
 800e002:	e7fd      	b.n	800e000 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e004:	f001 f96e 	bl	800f2e4 <xTaskGetSchedulerState>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d102      	bne.n	800e014 <xQueueSemaphoreTake+0x64>
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d101      	bne.n	800e018 <xQueueSemaphoreTake+0x68>
 800e014:	2301      	movs	r3, #1
 800e016:	e000      	b.n	800e01a <xQueueSemaphoreTake+0x6a>
 800e018:	2300      	movs	r3, #0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d10b      	bne.n	800e036 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	61bb      	str	r3, [r7, #24]
}
 800e030:	bf00      	nop
 800e032:	bf00      	nop
 800e034:	e7fd      	b.n	800e032 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e036:	f001 fcaf 	bl	800f998 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e03e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e042:	2b00      	cmp	r3, #0
 800e044:	d024      	beq.n	800e090 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e048:	1e5a      	subs	r2, r3, #1
 800e04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e04c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d104      	bne.n	800e060 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e056:	f001 faf1 	bl	800f63c <pvTaskIncrementMutexHeldCount>
 800e05a:	4602      	mov	r2, r0
 800e05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e062:	691b      	ldr	r3, [r3, #16]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d00f      	beq.n	800e088 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06a:	3310      	adds	r3, #16
 800e06c:	4618      	mov	r0, r3
 800e06e:	f000 ff93 	bl	800ef98 <xTaskRemoveFromEventList>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d007      	beq.n	800e088 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e078:	4b54      	ldr	r3, [pc, #336]	@ (800e1cc <xQueueSemaphoreTake+0x21c>)
 800e07a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e07e:	601a      	str	r2, [r3, #0]
 800e080:	f3bf 8f4f 	dsb	sy
 800e084:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e088:	f001 fcb8 	bl	800f9fc <vPortExitCritical>
				return pdPASS;
 800e08c:	2301      	movs	r3, #1
 800e08e:	e098      	b.n	800e1c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d112      	bne.n	800e0bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00b      	beq.n	800e0b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800e09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a0:	f383 8811 	msr	BASEPRI, r3
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	617b      	str	r3, [r7, #20]
}
 800e0ae:	bf00      	nop
 800e0b0:	bf00      	nop
 800e0b2:	e7fd      	b.n	800e0b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e0b4:	f001 fca2 	bl	800f9fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	e082      	b.n	800e1c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d106      	bne.n	800e0d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0c2:	f107 030c 	add.w	r3, r7, #12
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f000 ffca 	bl	800f060 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0d0:	f001 fc94 	bl	800f9fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e0d4:	f000 fd60 	bl	800eb98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0d8:	f001 fc5e 	bl	800f998 <vPortEnterCritical>
 800e0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e0e2:	b25b      	sxtb	r3, r3
 800e0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e8:	d103      	bne.n	800e0f2 <xQueueSemaphoreTake+0x142>
 800e0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e0f8:	b25b      	sxtb	r3, r3
 800e0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0fe:	d103      	bne.n	800e108 <xQueueSemaphoreTake+0x158>
 800e100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e102:	2200      	movs	r2, #0
 800e104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e108:	f001 fc78 	bl	800f9fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e10c:	463a      	mov	r2, r7
 800e10e:	f107 030c 	add.w	r3, r7, #12
 800e112:	4611      	mov	r1, r2
 800e114:	4618      	mov	r0, r3
 800e116:	f000 ffb9 	bl	800f08c <xTaskCheckForTimeOut>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d132      	bne.n	800e186 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e120:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e122:	f000 f9f0 	bl	800e506 <prvIsQueueEmpty>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d026      	beq.n	800e17a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d109      	bne.n	800e148 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e134:	f001 fc30 	bl	800f998 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f001 f8ef 	bl	800f320 <xTaskPriorityInherit>
 800e142:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e144:	f001 fc5a 	bl	800f9fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e14a:	3324      	adds	r3, #36	@ 0x24
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	4611      	mov	r1, r2
 800e150:	4618      	mov	r0, r3
 800e152:	f000 fefb 	bl	800ef4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e156:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e158:	f000 f983 	bl	800e462 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e15c:	f000 fd2a 	bl	800ebb4 <xTaskResumeAll>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	f47f af67 	bne.w	800e036 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e168:	4b18      	ldr	r3, [pc, #96]	@ (800e1cc <xQueueSemaphoreTake+0x21c>)
 800e16a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e16e:	601a      	str	r2, [r3, #0]
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	e75d      	b.n	800e036 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e17a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e17c:	f000 f971 	bl	800e462 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e180:	f000 fd18 	bl	800ebb4 <xTaskResumeAll>
 800e184:	e757      	b.n	800e036 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e186:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e188:	f000 f96b 	bl	800e462 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e18c:	f000 fd12 	bl	800ebb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e190:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e192:	f000 f9b8 	bl	800e506 <prvIsQueueEmpty>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f43f af4c 	beq.w	800e036 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d00d      	beq.n	800e1c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e1a4:	f001 fbf8 	bl	800f998 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e1a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e1aa:	f000 f8b2 	bl	800e312 <prvGetDisinheritPriorityAfterTimeout>
 800e1ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f001 f9b0 	bl	800f51c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e1bc:	f001 fc1e 	bl	800f9fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e1c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3738      	adds	r7, #56	@ 0x38
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	e000ed04 	.word	0xe000ed04

0800e1d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b08e      	sub	sp, #56	@ 0x38
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d10b      	bne.n	800e1fe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800e1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ea:	f383 8811 	msr	BASEPRI, r3
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	623b      	str	r3, [r7, #32]
}
 800e1f8:	bf00      	nop
 800e1fa:	bf00      	nop
 800e1fc:	e7fd      	b.n	800e1fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d103      	bne.n	800e20c <xQueueReceiveFromISR+0x3c>
 800e204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d101      	bne.n	800e210 <xQueueReceiveFromISR+0x40>
 800e20c:	2301      	movs	r3, #1
 800e20e:	e000      	b.n	800e212 <xQueueReceiveFromISR+0x42>
 800e210:	2300      	movs	r3, #0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10b      	bne.n	800e22e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	61fb      	str	r3, [r7, #28]
}
 800e228:	bf00      	nop
 800e22a:	bf00      	nop
 800e22c:	e7fd      	b.n	800e22a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e22e:	f001 fc93 	bl	800fb58 <vPortValidateInterruptPriority>
	__asm volatile
 800e232:	f3ef 8211 	mrs	r2, BASEPRI
 800e236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e23a:	f383 8811 	msr	BASEPRI, r3
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	61ba      	str	r2, [r7, #24]
 800e248:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e24a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e252:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e256:	2b00      	cmp	r3, #0
 800e258:	d02f      	beq.n	800e2ba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e264:	68b9      	ldr	r1, [r7, #8]
 800e266:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e268:	f000 f8d5 	bl	800e416 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26e:	1e5a      	subs	r2, r3, #1
 800e270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e272:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e274:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e27c:	d112      	bne.n	800e2a4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e280:	691b      	ldr	r3, [r3, #16]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d016      	beq.n	800e2b4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e288:	3310      	adds	r3, #16
 800e28a:	4618      	mov	r0, r3
 800e28c:	f000 fe84 	bl	800ef98 <xTaskRemoveFromEventList>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00e      	beq.n	800e2b4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d00b      	beq.n	800e2b4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	e007      	b.n	800e2b4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	b25a      	sxtb	r2, r3
 800e2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2b8:	e001      	b.n	800e2be <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	f383 8811 	msr	BASEPRI, r3
}
 800e2c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3738      	adds	r7, #56	@ 0x38
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d10b      	bne.n	800e2fe <vQueueDelete+0x2a>
	__asm volatile
 800e2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	60bb      	str	r3, [r7, #8]
}
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
 800e2fc:	e7fd      	b.n	800e2fa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e2fe:	68f8      	ldr	r0, [r7, #12]
 800e300:	f000 f930 	bl	800e564 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	f001 fd37 	bl	800fd78 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e30a:	bf00      	nop
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}

0800e312 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e312:	b480      	push	{r7}
 800e314:	b085      	sub	sp, #20
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d006      	beq.n	800e330 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f1c3 0307 	rsb	r3, r3, #7
 800e32c:	60fb      	str	r3, [r7, #12]
 800e32e:	e001      	b.n	800e334 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e330:	2300      	movs	r3, #0
 800e332:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e334:	68fb      	ldr	r3, [r7, #12]
	}
 800e336:	4618      	mov	r0, r3
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b086      	sub	sp, #24
 800e346:	af00      	add	r7, sp, #0
 800e348:	60f8      	str	r0, [r7, #12]
 800e34a:	60b9      	str	r1, [r7, #8]
 800e34c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e34e:	2300      	movs	r3, #0
 800e350:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e356:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10d      	bne.n	800e37c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d14d      	bne.n	800e404 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	4618      	mov	r0, r3
 800e36e:	f001 f84d 	bl	800f40c <xTaskPriorityDisinherit>
 800e372:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	609a      	str	r2, [r3, #8]
 800e37a:	e043      	b.n	800e404 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d119      	bne.n	800e3b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6858      	ldr	r0, [r3, #4]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e38a:	461a      	mov	r2, r3
 800e38c:	68b9      	ldr	r1, [r7, #8]
 800e38e:	f001 fedb 	bl	8010148 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	685a      	ldr	r2, [r3, #4]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e39a:	441a      	add	r2, r3
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	685a      	ldr	r2, [r3, #4]
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d32b      	bcc.n	800e404 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	605a      	str	r2, [r3, #4]
 800e3b4:	e026      	b.n	800e404 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	68d8      	ldr	r0, [r3, #12]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3be:	461a      	mov	r2, r3
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	f001 fec1 	bl	8010148 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	68da      	ldr	r2, [r3, #12]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ce:	425b      	negs	r3, r3
 800e3d0:	441a      	add	r2, r3
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	68da      	ldr	r2, [r3, #12]
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d207      	bcs.n	800e3f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	689a      	ldr	r2, [r3, #8]
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ea:	425b      	negs	r3, r3
 800e3ec:	441a      	add	r2, r3
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b02      	cmp	r3, #2
 800e3f6:	d105      	bne.n	800e404 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d002      	beq.n	800e404 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	3b01      	subs	r3, #1
 800e402:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e40c:	697b      	ldr	r3, [r7, #20]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
 800e41e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e424:	2b00      	cmp	r3, #0
 800e426:	d018      	beq.n	800e45a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	68da      	ldr	r2, [r3, #12]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e430:	441a      	add	r2, r3
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	68da      	ldr	r2, [r3, #12]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d303      	bcc.n	800e44a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	68d9      	ldr	r1, [r3, #12]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e452:	461a      	mov	r2, r3
 800e454:	6838      	ldr	r0, [r7, #0]
 800e456:	f001 fe77 	bl	8010148 <memcpy>
	}
}
 800e45a:	bf00      	nop
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e462:	b580      	push	{r7, lr}
 800e464:	b084      	sub	sp, #16
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e46a:	f001 fa95 	bl	800f998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e474:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e476:	e011      	b.n	800e49c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d012      	beq.n	800e4a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	3324      	adds	r3, #36	@ 0x24
 800e484:	4618      	mov	r0, r3
 800e486:	f000 fd87 	bl	800ef98 <xTaskRemoveFromEventList>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d001      	beq.n	800e494 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e490:	f000 fe60 	bl	800f154 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e494:	7bfb      	ldrb	r3, [r7, #15]
 800e496:	3b01      	subs	r3, #1
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e49c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	dce9      	bgt.n	800e478 <prvUnlockQueue+0x16>
 800e4a4:	e000      	b.n	800e4a8 <prvUnlockQueue+0x46>
					break;
 800e4a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	22ff      	movs	r2, #255	@ 0xff
 800e4ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e4b0:	f001 faa4 	bl	800f9fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e4b4:	f001 fa70 	bl	800f998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e4be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e4c0:	e011      	b.n	800e4e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	691b      	ldr	r3, [r3, #16]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d012      	beq.n	800e4f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	3310      	adds	r3, #16
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f000 fd62 	bl	800ef98 <xTaskRemoveFromEventList>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e4da:	f000 fe3b 	bl	800f154 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e4de:	7bbb      	ldrb	r3, [r7, #14]
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e4e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	dce9      	bgt.n	800e4c2 <prvUnlockQueue+0x60>
 800e4ee:	e000      	b.n	800e4f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e4f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	22ff      	movs	r2, #255	@ 0xff
 800e4f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e4fa:	f001 fa7f 	bl	800f9fc <vPortExitCritical>
}
 800e4fe:	bf00      	nop
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b084      	sub	sp, #16
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e50e:	f001 fa43 	bl	800f998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e516:	2b00      	cmp	r3, #0
 800e518:	d102      	bne.n	800e520 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e51a:	2301      	movs	r3, #1
 800e51c:	60fb      	str	r3, [r7, #12]
 800e51e:	e001      	b.n	800e524 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e520:	2300      	movs	r3, #0
 800e522:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e524:	f001 fa6a 	bl	800f9fc <vPortExitCritical>

	return xReturn;
 800e528:	68fb      	ldr	r3, [r7, #12]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3710      	adds	r7, #16
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}

0800e532 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b084      	sub	sp, #16
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e53a:	f001 fa2d 	bl	800f998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e546:	429a      	cmp	r2, r3
 800e548:	d102      	bne.n	800e550 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e54a:	2301      	movs	r3, #1
 800e54c:	60fb      	str	r3, [r7, #12]
 800e54e:	e001      	b.n	800e554 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e550:	2300      	movs	r3, #0
 800e552:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e554:	f001 fa52 	bl	800f9fc <vPortExitCritical>

	return xReturn;
 800e558:	68fb      	ldr	r3, [r7, #12]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
	...

0800e564 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e56c:	2300      	movs	r3, #0
 800e56e:	60fb      	str	r3, [r7, #12]
 800e570:	e016      	b.n	800e5a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e572:	4a10      	ldr	r2, [pc, #64]	@ (800e5b4 <vQueueUnregisterQueue+0x50>)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	00db      	lsls	r3, r3, #3
 800e578:	4413      	add	r3, r2
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d10b      	bne.n	800e59a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e582:	4a0c      	ldr	r2, [pc, #48]	@ (800e5b4 <vQueueUnregisterQueue+0x50>)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2100      	movs	r1, #0
 800e588:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e58c:	4a09      	ldr	r2, [pc, #36]	@ (800e5b4 <vQueueUnregisterQueue+0x50>)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	00db      	lsls	r3, r3, #3
 800e592:	4413      	add	r3, r2
 800e594:	2200      	movs	r2, #0
 800e596:	605a      	str	r2, [r3, #4]
				break;
 800e598:	e006      	b.n	800e5a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	3301      	adds	r3, #1
 800e59e:	60fb      	str	r3, [r7, #12]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2b07      	cmp	r3, #7
 800e5a4:	d9e5      	bls.n	800e572 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e5a6:	bf00      	nop
 800e5a8:	bf00      	nop
 800e5aa:	3714      	adds	r7, #20
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr
 800e5b4:	200010a4 	.word	0x200010a4

0800e5b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b08c      	sub	sp, #48	@ 0x30
 800e5bc:	af04      	add	r7, sp, #16
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	603b      	str	r3, [r7, #0]
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e5c8:	88fb      	ldrh	r3, [r7, #6]
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f001 fb05 	bl	800fbdc <pvPortMalloc>
 800e5d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00e      	beq.n	800e5f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e5da:	20a0      	movs	r0, #160	@ 0xa0
 800e5dc:	f001 fafe 	bl	800fbdc <pvPortMalloc>
 800e5e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d003      	beq.n	800e5f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800e5ee:	e005      	b.n	800e5fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e5f0:	6978      	ldr	r0, [r7, #20]
 800e5f2:	f001 fbc1 	bl	800fd78 <vPortFree>
 800e5f6:	e001      	b.n	800e5fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e5fc:	69fb      	ldr	r3, [r7, #28]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d013      	beq.n	800e62a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e602:	88fa      	ldrh	r2, [r7, #6]
 800e604:	2300      	movs	r3, #0
 800e606:	9303      	str	r3, [sp, #12]
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	9302      	str	r3, [sp, #8]
 800e60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	68b9      	ldr	r1, [r7, #8]
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f000 f80f 	bl	800e63c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e61e:	69f8      	ldr	r0, [r7, #28]
 800e620:	f000 f8b4 	bl	800e78c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e624:	2301      	movs	r3, #1
 800e626:	61bb      	str	r3, [r7, #24]
 800e628:	e002      	b.n	800e630 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e62a:	f04f 33ff 	mov.w	r3, #4294967295
 800e62e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e630:	69bb      	ldr	r3, [r7, #24]
	}
 800e632:	4618      	mov	r0, r3
 800e634:	3720      	adds	r7, #32
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
	...

0800e63c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b088      	sub	sp, #32
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
 800e648:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e64c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	461a      	mov	r2, r3
 800e654:	21a5      	movs	r1, #165	@ 0xa5
 800e656:	f001 fce5 	bl	8010024 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e664:	3b01      	subs	r3, #1
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	f023 0307 	bic.w	r3, r3, #7
 800e672:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	f003 0307 	and.w	r3, r3, #7
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00b      	beq.n	800e696 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	617b      	str	r3, [r7, #20]
}
 800e690:	bf00      	nop
 800e692:	bf00      	nop
 800e694:	e7fd      	b.n	800e692 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d01f      	beq.n	800e6dc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e69c:	2300      	movs	r3, #0
 800e69e:	61fb      	str	r3, [r7, #28]
 800e6a0:	e012      	b.n	800e6c8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e6a2:	68ba      	ldr	r2, [r7, #8]
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	7819      	ldrb	r1, [r3, #0]
 800e6aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	3334      	adds	r3, #52	@ 0x34
 800e6b2:	460a      	mov	r2, r1
 800e6b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	4413      	add	r3, r2
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d006      	beq.n	800e6d0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e6c2:	69fb      	ldr	r3, [r7, #28]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	61fb      	str	r3, [r7, #28]
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	2b0f      	cmp	r3, #15
 800e6cc:	d9e9      	bls.n	800e6a2 <prvInitialiseNewTask+0x66>
 800e6ce:	e000      	b.n	800e6d2 <prvInitialiseNewTask+0x96>
			{
				break;
 800e6d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e6da:	e003      	b.n	800e6e4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e6:	2b06      	cmp	r3, #6
 800e6e8:	d901      	bls.n	800e6ee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e6ea:	2306      	movs	r3, #6
 800e6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e702:	3304      	adds	r3, #4
 800e704:	4618      	mov	r0, r3
 800e706:	f7ff f93a 	bl	800d97e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70c:	3318      	adds	r3, #24
 800e70e:	4618      	mov	r0, r3
 800e710:	f7ff f935 	bl	800d97e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e718:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e71c:	f1c3 0207 	rsb	r2, r3, #7
 800e720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e722:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e728:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e72c:	2200      	movs	r2, #0
 800e72e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e734:	2200      	movs	r2, #0
 800e736:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e73c:	334c      	adds	r3, #76	@ 0x4c
 800e73e:	224c      	movs	r2, #76	@ 0x4c
 800e740:	2100      	movs	r1, #0
 800e742:	4618      	mov	r0, r3
 800e744:	f001 fc6e 	bl	8010024 <memset>
 800e748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e74a:	4a0d      	ldr	r2, [pc, #52]	@ (800e780 <prvInitialiseNewTask+0x144>)
 800e74c:	651a      	str	r2, [r3, #80]	@ 0x50
 800e74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e750:	4a0c      	ldr	r2, [pc, #48]	@ (800e784 <prvInitialiseNewTask+0x148>)
 800e752:	655a      	str	r2, [r3, #84]	@ 0x54
 800e754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e756:	4a0c      	ldr	r2, [pc, #48]	@ (800e788 <prvInitialiseNewTask+0x14c>)
 800e758:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e75a:	683a      	ldr	r2, [r7, #0]
 800e75c:	68f9      	ldr	r1, [r7, #12]
 800e75e:	69b8      	ldr	r0, [r7, #24]
 800e760:	f000 ffe6 	bl	800f730 <pxPortInitialiseStack>
 800e764:	4602      	mov	r2, r0
 800e766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e768:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d002      	beq.n	800e776 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e776:	bf00      	nop
 800e778:	3720      	adds	r7, #32
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	20004118 	.word	0x20004118
 800e784:	20004180 	.word	0x20004180
 800e788:	200041e8 	.word	0x200041e8

0800e78c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e794:	f001 f900 	bl	800f998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e798:	4b2a      	ldr	r3, [pc, #168]	@ (800e844 <prvAddNewTaskToReadyList+0xb8>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3301      	adds	r3, #1
 800e79e:	4a29      	ldr	r2, [pc, #164]	@ (800e844 <prvAddNewTaskToReadyList+0xb8>)
 800e7a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e7a2:	4b29      	ldr	r3, [pc, #164]	@ (800e848 <prvAddNewTaskToReadyList+0xbc>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d109      	bne.n	800e7be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e7aa:	4a27      	ldr	r2, [pc, #156]	@ (800e848 <prvAddNewTaskToReadyList+0xbc>)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e7b0:	4b24      	ldr	r3, [pc, #144]	@ (800e844 <prvAddNewTaskToReadyList+0xb8>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d110      	bne.n	800e7da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e7b8:	f000 fcf0 	bl	800f19c <prvInitialiseTaskLists>
 800e7bc:	e00d      	b.n	800e7da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e7be:	4b23      	ldr	r3, [pc, #140]	@ (800e84c <prvAddNewTaskToReadyList+0xc0>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d109      	bne.n	800e7da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e7c6:	4b20      	ldr	r3, [pc, #128]	@ (800e848 <prvAddNewTaskToReadyList+0xbc>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d802      	bhi.n	800e7da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e7d4:	4a1c      	ldr	r2, [pc, #112]	@ (800e848 <prvAddNewTaskToReadyList+0xbc>)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e7da:	4b1d      	ldr	r3, [pc, #116]	@ (800e850 <prvAddNewTaskToReadyList+0xc4>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	4a1b      	ldr	r2, [pc, #108]	@ (800e850 <prvAddNewTaskToReadyList+0xc4>)
 800e7e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	409a      	lsls	r2, r3
 800e7ec:	4b19      	ldr	r3, [pc, #100]	@ (800e854 <prvAddNewTaskToReadyList+0xc8>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	4a18      	ldr	r2, [pc, #96]	@ (800e854 <prvAddNewTaskToReadyList+0xc8>)
 800e7f4:	6013      	str	r3, [r2, #0]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4413      	add	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	4a15      	ldr	r2, [pc, #84]	@ (800e858 <prvAddNewTaskToReadyList+0xcc>)
 800e804:	441a      	add	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	3304      	adds	r3, #4
 800e80a:	4619      	mov	r1, r3
 800e80c:	4610      	mov	r0, r2
 800e80e:	f7ff f8c3 	bl	800d998 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e812:	f001 f8f3 	bl	800f9fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e816:	4b0d      	ldr	r3, [pc, #52]	@ (800e84c <prvAddNewTaskToReadyList+0xc0>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00e      	beq.n	800e83c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e81e:	4b0a      	ldr	r3, [pc, #40]	@ (800e848 <prvAddNewTaskToReadyList+0xbc>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e828:	429a      	cmp	r2, r3
 800e82a:	d207      	bcs.n	800e83c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e82c:	4b0b      	ldr	r3, [pc, #44]	@ (800e85c <prvAddNewTaskToReadyList+0xd0>)
 800e82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e832:	601a      	str	r2, [r3, #0]
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e83c:	bf00      	nop
 800e83e:	3708      	adds	r7, #8
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	200011e4 	.word	0x200011e4
 800e848:	200010e4 	.word	0x200010e4
 800e84c:	200011f0 	.word	0x200011f0
 800e850:	20001200 	.word	0x20001200
 800e854:	200011ec 	.word	0x200011ec
 800e858:	200010e8 	.word	0x200010e8
 800e85c:	e000ed04 	.word	0xe000ed04

0800e860 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e860:	b580      	push	{r7, lr}
 800e862:	b08a      	sub	sp, #40	@ 0x28
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e86a:	2300      	movs	r3, #0
 800e86c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d10b      	bne.n	800e88c <vTaskDelayUntil+0x2c>
	__asm volatile
 800e874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e878:	f383 8811 	msr	BASEPRI, r3
 800e87c:	f3bf 8f6f 	isb	sy
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	617b      	str	r3, [r7, #20]
}
 800e886:	bf00      	nop
 800e888:	bf00      	nop
 800e88a:	e7fd      	b.n	800e888 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10b      	bne.n	800e8aa <vTaskDelayUntil+0x4a>
	__asm volatile
 800e892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e896:	f383 8811 	msr	BASEPRI, r3
 800e89a:	f3bf 8f6f 	isb	sy
 800e89e:	f3bf 8f4f 	dsb	sy
 800e8a2:	613b      	str	r3, [r7, #16]
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop
 800e8a8:	e7fd      	b.n	800e8a6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800e8aa:	4b2a      	ldr	r3, [pc, #168]	@ (800e954 <vTaskDelayUntil+0xf4>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00b      	beq.n	800e8ca <vTaskDelayUntil+0x6a>
	__asm volatile
 800e8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b6:	f383 8811 	msr	BASEPRI, r3
 800e8ba:	f3bf 8f6f 	isb	sy
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	60fb      	str	r3, [r7, #12]
}
 800e8c4:	bf00      	nop
 800e8c6:	bf00      	nop
 800e8c8:	e7fd      	b.n	800e8c6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800e8ca:	f000 f965 	bl	800eb98 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e8ce:	4b22      	ldr	r3, [pc, #136]	@ (800e958 <vTaskDelayUntil+0xf8>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	683a      	ldr	r2, [r7, #0]
 800e8da:	4413      	add	r3, r2
 800e8dc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	6a3a      	ldr	r2, [r7, #32]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d20b      	bcs.n	800e900 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	69fa      	ldr	r2, [r7, #28]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d211      	bcs.n	800e916 <vTaskDelayUntil+0xb6>
 800e8f2:	69fa      	ldr	r2, [r7, #28]
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d90d      	bls.n	800e916 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8fe:	e00a      	b.n	800e916 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	69fa      	ldr	r2, [r7, #28]
 800e906:	429a      	cmp	r2, r3
 800e908:	d303      	bcc.n	800e912 <vTaskDelayUntil+0xb2>
 800e90a:	69fa      	ldr	r2, [r7, #28]
 800e90c:	6a3b      	ldr	r3, [r7, #32]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d901      	bls.n	800e916 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800e912:	2301      	movs	r3, #1
 800e914:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	69fa      	ldr	r2, [r7, #28]
 800e91a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d006      	beq.n	800e930 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e922:	69fa      	ldr	r2, [r7, #28]
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	2100      	movs	r1, #0
 800e92a:	4618      	mov	r0, r3
 800e92c:	f000 fe9a 	bl	800f664 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e930:	f000 f940 	bl	800ebb4 <xTaskResumeAll>
 800e934:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d107      	bne.n	800e94c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800e93c:	4b07      	ldr	r3, [pc, #28]	@ (800e95c <vTaskDelayUntil+0xfc>)
 800e93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e94c:	bf00      	nop
 800e94e:	3728      	adds	r7, #40	@ 0x28
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	2000120c 	.word	0x2000120c
 800e958:	200011e8 	.word	0x200011e8
 800e95c:	e000ed04 	.word	0xe000ed04

0800e960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e968:	2300      	movs	r3, #0
 800e96a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d018      	beq.n	800e9a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e972:	4b14      	ldr	r3, [pc, #80]	@ (800e9c4 <vTaskDelay+0x64>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00b      	beq.n	800e992 <vTaskDelay+0x32>
	__asm volatile
 800e97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e97e:	f383 8811 	msr	BASEPRI, r3
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	f3bf 8f4f 	dsb	sy
 800e98a:	60bb      	str	r3, [r7, #8]
}
 800e98c:	bf00      	nop
 800e98e:	bf00      	nop
 800e990:	e7fd      	b.n	800e98e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e992:	f000 f901 	bl	800eb98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e996:	2100      	movs	r1, #0
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 fe63 	bl	800f664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e99e:	f000 f909 	bl	800ebb4 <xTaskResumeAll>
 800e9a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d107      	bne.n	800e9ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e9aa:	4b07      	ldr	r3, [pc, #28]	@ (800e9c8 <vTaskDelay+0x68>)
 800e9ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9b0:	601a      	str	r2, [r3, #0]
 800e9b2:	f3bf 8f4f 	dsb	sy
 800e9b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e9ba:	bf00      	nop
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	2000120c 	.word	0x2000120c
 800e9c8:	e000ed04 	.word	0xe000ed04

0800e9cc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e9d4:	f000 ffe0 	bl	800f998 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d102      	bne.n	800e9e4 <vTaskSuspend+0x18>
 800e9de:	4b3d      	ldr	r3, [pc, #244]	@ (800ead4 <vTaskSuspend+0x108>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	e000      	b.n	800e9e6 <vTaskSuspend+0x1a>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	3304      	adds	r3, #4
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7ff f830 	bl	800da52 <uxListRemove>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d115      	bne.n	800ea24 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9fc:	4936      	ldr	r1, [pc, #216]	@ (800ead8 <vTaskSuspend+0x10c>)
 800e9fe:	4613      	mov	r3, r2
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	4413      	add	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	440b      	add	r3, r1
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d10a      	bne.n	800ea24 <vTaskSuspend+0x58>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea12:	2201      	movs	r2, #1
 800ea14:	fa02 f303 	lsl.w	r3, r2, r3
 800ea18:	43da      	mvns	r2, r3
 800ea1a:	4b30      	ldr	r3, [pc, #192]	@ (800eadc <vTaskSuspend+0x110>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4013      	ands	r3, r2
 800ea20:	4a2e      	ldr	r2, [pc, #184]	@ (800eadc <vTaskSuspend+0x110>)
 800ea22:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d004      	beq.n	800ea36 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	3318      	adds	r3, #24
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7ff f80e 	bl	800da52 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	3304      	adds	r3, #4
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	4828      	ldr	r0, [pc, #160]	@ (800eae0 <vTaskSuspend+0x114>)
 800ea3e:	f7fe ffab 	bl	800d998 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d103      	bne.n	800ea56 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ea56:	f000 ffd1 	bl	800f9fc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ea5a:	4b22      	ldr	r3, [pc, #136]	@ (800eae4 <vTaskSuspend+0x118>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d005      	beq.n	800ea6e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ea62:	f000 ff99 	bl	800f998 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ea66:	f000 fc1d 	bl	800f2a4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ea6a:	f000 ffc7 	bl	800f9fc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ea6e:	4b19      	ldr	r3, [pc, #100]	@ (800ead4 <vTaskSuspend+0x108>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	68fa      	ldr	r2, [r7, #12]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d128      	bne.n	800eaca <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800ea78:	4b1a      	ldr	r3, [pc, #104]	@ (800eae4 <vTaskSuspend+0x118>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d018      	beq.n	800eab2 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ea80:	4b19      	ldr	r3, [pc, #100]	@ (800eae8 <vTaskSuspend+0x11c>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00b      	beq.n	800eaa0 <vTaskSuspend+0xd4>
	__asm volatile
 800ea88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8c:	f383 8811 	msr	BASEPRI, r3
 800ea90:	f3bf 8f6f 	isb	sy
 800ea94:	f3bf 8f4f 	dsb	sy
 800ea98:	60bb      	str	r3, [r7, #8]
}
 800ea9a:	bf00      	nop
 800ea9c:	bf00      	nop
 800ea9e:	e7fd      	b.n	800ea9c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800eaa0:	4b12      	ldr	r3, [pc, #72]	@ (800eaec <vTaskSuspend+0x120>)
 800eaa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaa6:	601a      	str	r2, [r3, #0]
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eab0:	e00b      	b.n	800eaca <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800eab2:	4b0b      	ldr	r3, [pc, #44]	@ (800eae0 <vTaskSuspend+0x114>)
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	4b0e      	ldr	r3, [pc, #56]	@ (800eaf0 <vTaskSuspend+0x124>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d103      	bne.n	800eac6 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800eabe:	4b05      	ldr	r3, [pc, #20]	@ (800ead4 <vTaskSuspend+0x108>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	601a      	str	r2, [r3, #0]
	}
 800eac4:	e001      	b.n	800eaca <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800eac6:	f000 f9dd 	bl	800ee84 <vTaskSwitchContext>
	}
 800eaca:	bf00      	nop
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	200010e4 	.word	0x200010e4
 800ead8:	200010e8 	.word	0x200010e8
 800eadc:	200011ec 	.word	0x200011ec
 800eae0:	200011d0 	.word	0x200011d0
 800eae4:	200011f0 	.word	0x200011f0
 800eae8:	2000120c 	.word	0x2000120c
 800eaec:	e000ed04 	.word	0xe000ed04
 800eaf0:	200011e4 	.word	0x200011e4

0800eaf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800eafa:	4b1f      	ldr	r3, [pc, #124]	@ (800eb78 <vTaskStartScheduler+0x84>)
 800eafc:	9301      	str	r3, [sp, #4]
 800eafe:	2300      	movs	r3, #0
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	2300      	movs	r3, #0
 800eb04:	2280      	movs	r2, #128	@ 0x80
 800eb06:	491d      	ldr	r1, [pc, #116]	@ (800eb7c <vTaskStartScheduler+0x88>)
 800eb08:	481d      	ldr	r0, [pc, #116]	@ (800eb80 <vTaskStartScheduler+0x8c>)
 800eb0a:	f7ff fd55 	bl	800e5b8 <xTaskCreate>
 800eb0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	d11b      	bne.n	800eb4e <vTaskStartScheduler+0x5a>
	__asm volatile
 800eb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb1a:	f383 8811 	msr	BASEPRI, r3
 800eb1e:	f3bf 8f6f 	isb	sy
 800eb22:	f3bf 8f4f 	dsb	sy
 800eb26:	60bb      	str	r3, [r7, #8]
}
 800eb28:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eb2a:	4b16      	ldr	r3, [pc, #88]	@ (800eb84 <vTaskStartScheduler+0x90>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	334c      	adds	r3, #76	@ 0x4c
 800eb30:	4a15      	ldr	r2, [pc, #84]	@ (800eb88 <vTaskStartScheduler+0x94>)
 800eb32:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eb34:	4b15      	ldr	r3, [pc, #84]	@ (800eb8c <vTaskStartScheduler+0x98>)
 800eb36:	f04f 32ff 	mov.w	r2, #4294967295
 800eb3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eb3c:	4b14      	ldr	r3, [pc, #80]	@ (800eb90 <vTaskStartScheduler+0x9c>)
 800eb3e:	2201      	movs	r2, #1
 800eb40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eb42:	4b14      	ldr	r3, [pc, #80]	@ (800eb94 <vTaskStartScheduler+0xa0>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eb48:	f000 fe82 	bl	800f850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eb4c:	e00f      	b.n	800eb6e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb54:	d10b      	bne.n	800eb6e <vTaskStartScheduler+0x7a>
	__asm volatile
 800eb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb5a:	f383 8811 	msr	BASEPRI, r3
 800eb5e:	f3bf 8f6f 	isb	sy
 800eb62:	f3bf 8f4f 	dsb	sy
 800eb66:	607b      	str	r3, [r7, #4]
}
 800eb68:	bf00      	nop
 800eb6a:	bf00      	nop
 800eb6c:	e7fd      	b.n	800eb6a <vTaskStartScheduler+0x76>
}
 800eb6e:	bf00      	nop
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	20001208 	.word	0x20001208
 800eb7c:	08011354 	.word	0x08011354
 800eb80:	0800f16d 	.word	0x0800f16d
 800eb84:	200010e4 	.word	0x200010e4
 800eb88:	20000030 	.word	0x20000030
 800eb8c:	20001204 	.word	0x20001204
 800eb90:	200011f0 	.word	0x200011f0
 800eb94:	200011e8 	.word	0x200011e8

0800eb98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eb98:	b480      	push	{r7}
 800eb9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eb9c:	4b04      	ldr	r3, [pc, #16]	@ (800ebb0 <vTaskSuspendAll+0x18>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3301      	adds	r3, #1
 800eba2:	4a03      	ldr	r2, [pc, #12]	@ (800ebb0 <vTaskSuspendAll+0x18>)
 800eba4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eba6:	bf00      	nop
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr
 800ebb0:	2000120c 	.word	0x2000120c

0800ebb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ebc2:	4b42      	ldr	r3, [pc, #264]	@ (800eccc <xTaskResumeAll+0x118>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10b      	bne.n	800ebe2 <xTaskResumeAll+0x2e>
	__asm volatile
 800ebca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	603b      	str	r3, [r7, #0]
}
 800ebdc:	bf00      	nop
 800ebde:	bf00      	nop
 800ebe0:	e7fd      	b.n	800ebde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ebe2:	f000 fed9 	bl	800f998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ebe6:	4b39      	ldr	r3, [pc, #228]	@ (800eccc <xTaskResumeAll+0x118>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	3b01      	subs	r3, #1
 800ebec:	4a37      	ldr	r2, [pc, #220]	@ (800eccc <xTaskResumeAll+0x118>)
 800ebee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebf0:	4b36      	ldr	r3, [pc, #216]	@ (800eccc <xTaskResumeAll+0x118>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d161      	bne.n	800ecbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ebf8:	4b35      	ldr	r3, [pc, #212]	@ (800ecd0 <xTaskResumeAll+0x11c>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d05d      	beq.n	800ecbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec00:	e02e      	b.n	800ec60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec02:	4b34      	ldr	r3, [pc, #208]	@ (800ecd4 <xTaskResumeAll+0x120>)
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	3318      	adds	r3, #24
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe ff1f 	bl	800da52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	3304      	adds	r3, #4
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7fe ff1a 	bl	800da52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec22:	2201      	movs	r2, #1
 800ec24:	409a      	lsls	r2, r3
 800ec26:	4b2c      	ldr	r3, [pc, #176]	@ (800ecd8 <xTaskResumeAll+0x124>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	4a2a      	ldr	r2, [pc, #168]	@ (800ecd8 <xTaskResumeAll+0x124>)
 800ec2e:	6013      	str	r3, [r2, #0]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec34:	4613      	mov	r3, r2
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	4413      	add	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4a27      	ldr	r2, [pc, #156]	@ (800ecdc <xTaskResumeAll+0x128>)
 800ec3e:	441a      	add	r2, r3
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	3304      	adds	r3, #4
 800ec44:	4619      	mov	r1, r3
 800ec46:	4610      	mov	r0, r2
 800ec48:	f7fe fea6 	bl	800d998 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec50:	4b23      	ldr	r3, [pc, #140]	@ (800ece0 <xTaskResumeAll+0x12c>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d302      	bcc.n	800ec60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ec5a:	4b22      	ldr	r3, [pc, #136]	@ (800ece4 <xTaskResumeAll+0x130>)
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec60:	4b1c      	ldr	r3, [pc, #112]	@ (800ecd4 <xTaskResumeAll+0x120>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1cc      	bne.n	800ec02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d001      	beq.n	800ec72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ec6e:	f000 fb19 	bl	800f2a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ec72:	4b1d      	ldr	r3, [pc, #116]	@ (800ece8 <xTaskResumeAll+0x134>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d010      	beq.n	800eca0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ec7e:	f000 f847 	bl	800ed10 <xTaskIncrementTick>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d002      	beq.n	800ec8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ec88:	4b16      	ldr	r3, [pc, #88]	@ (800ece4 <xTaskResumeAll+0x130>)
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	3b01      	subs	r3, #1
 800ec92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d1f1      	bne.n	800ec7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ec9a:	4b13      	ldr	r3, [pc, #76]	@ (800ece8 <xTaskResumeAll+0x134>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eca0:	4b10      	ldr	r3, [pc, #64]	@ (800ece4 <xTaskResumeAll+0x130>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d009      	beq.n	800ecbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ecac:	4b0f      	ldr	r3, [pc, #60]	@ (800ecec <xTaskResumeAll+0x138>)
 800ecae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	f3bf 8f4f 	dsb	sy
 800ecb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ecbc:	f000 fe9e 	bl	800f9fc <vPortExitCritical>

	return xAlreadyYielded;
 800ecc0:	68bb      	ldr	r3, [r7, #8]
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3710      	adds	r7, #16
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	2000120c 	.word	0x2000120c
 800ecd0:	200011e4 	.word	0x200011e4
 800ecd4:	200011a4 	.word	0x200011a4
 800ecd8:	200011ec 	.word	0x200011ec
 800ecdc:	200010e8 	.word	0x200010e8
 800ece0:	200010e4 	.word	0x200010e4
 800ece4:	200011f8 	.word	0x200011f8
 800ece8:	200011f4 	.word	0x200011f4
 800ecec:	e000ed04 	.word	0xe000ed04

0800ecf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ecf0:	b480      	push	{r7}
 800ecf2:	b083      	sub	sp, #12
 800ecf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ecf6:	4b05      	ldr	r3, [pc, #20]	@ (800ed0c <xTaskGetTickCount+0x1c>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ecfc:	687b      	ldr	r3, [r7, #4]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr
 800ed0a:	bf00      	nop
 800ed0c:	200011e8 	.word	0x200011e8

0800ed10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ed16:	2300      	movs	r3, #0
 800ed18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed1a:	4b4f      	ldr	r3, [pc, #316]	@ (800ee58 <xTaskIncrementTick+0x148>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f040 808f 	bne.w	800ee42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ed24:	4b4d      	ldr	r3, [pc, #308]	@ (800ee5c <xTaskIncrementTick+0x14c>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ed2c:	4a4b      	ldr	r2, [pc, #300]	@ (800ee5c <xTaskIncrementTick+0x14c>)
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d121      	bne.n	800ed7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ed38:	4b49      	ldr	r3, [pc, #292]	@ (800ee60 <xTaskIncrementTick+0x150>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00b      	beq.n	800ed5a <xTaskIncrementTick+0x4a>
	__asm volatile
 800ed42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	603b      	str	r3, [r7, #0]
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop
 800ed58:	e7fd      	b.n	800ed56 <xTaskIncrementTick+0x46>
 800ed5a:	4b41      	ldr	r3, [pc, #260]	@ (800ee60 <xTaskIncrementTick+0x150>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	60fb      	str	r3, [r7, #12]
 800ed60:	4b40      	ldr	r3, [pc, #256]	@ (800ee64 <xTaskIncrementTick+0x154>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a3e      	ldr	r2, [pc, #248]	@ (800ee60 <xTaskIncrementTick+0x150>)
 800ed66:	6013      	str	r3, [r2, #0]
 800ed68:	4a3e      	ldr	r2, [pc, #248]	@ (800ee64 <xTaskIncrementTick+0x154>)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6013      	str	r3, [r2, #0]
 800ed6e:	4b3e      	ldr	r3, [pc, #248]	@ (800ee68 <xTaskIncrementTick+0x158>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	3301      	adds	r3, #1
 800ed74:	4a3c      	ldr	r2, [pc, #240]	@ (800ee68 <xTaskIncrementTick+0x158>)
 800ed76:	6013      	str	r3, [r2, #0]
 800ed78:	f000 fa94 	bl	800f2a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ed7c:	4b3b      	ldr	r3, [pc, #236]	@ (800ee6c <xTaskIncrementTick+0x15c>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	693a      	ldr	r2, [r7, #16]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d348      	bcc.n	800ee18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed86:	4b36      	ldr	r3, [pc, #216]	@ (800ee60 <xTaskIncrementTick+0x150>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d104      	bne.n	800ed9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed90:	4b36      	ldr	r3, [pc, #216]	@ (800ee6c <xTaskIncrementTick+0x15c>)
 800ed92:	f04f 32ff 	mov.w	r2, #4294967295
 800ed96:	601a      	str	r2, [r3, #0]
					break;
 800ed98:	e03e      	b.n	800ee18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed9a:	4b31      	ldr	r3, [pc, #196]	@ (800ee60 <xTaskIncrementTick+0x150>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800edaa:	693a      	ldr	r2, [r7, #16]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d203      	bcs.n	800edba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800edb2:	4a2e      	ldr	r2, [pc, #184]	@ (800ee6c <xTaskIncrementTick+0x15c>)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800edb8:	e02e      	b.n	800ee18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	3304      	adds	r3, #4
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe fe47 	bl	800da52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d004      	beq.n	800edd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	3318      	adds	r3, #24
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fe fe3e 	bl	800da52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edda:	2201      	movs	r2, #1
 800eddc:	409a      	lsls	r2, r3
 800edde:	4b24      	ldr	r3, [pc, #144]	@ (800ee70 <xTaskIncrementTick+0x160>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	4313      	orrs	r3, r2
 800ede4:	4a22      	ldr	r2, [pc, #136]	@ (800ee70 <xTaskIncrementTick+0x160>)
 800ede6:	6013      	str	r3, [r2, #0]
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edec:	4613      	mov	r3, r2
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	4413      	add	r3, r2
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	4a1f      	ldr	r2, [pc, #124]	@ (800ee74 <xTaskIncrementTick+0x164>)
 800edf6:	441a      	add	r2, r3
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	3304      	adds	r3, #4
 800edfc:	4619      	mov	r1, r3
 800edfe:	4610      	mov	r0, r2
 800ee00:	f7fe fdca 	bl	800d998 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee08:	4b1b      	ldr	r3, [pc, #108]	@ (800ee78 <xTaskIncrementTick+0x168>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d3b9      	bcc.n	800ed86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ee12:	2301      	movs	r3, #1
 800ee14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee16:	e7b6      	b.n	800ed86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ee18:	4b17      	ldr	r3, [pc, #92]	@ (800ee78 <xTaskIncrementTick+0x168>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee1e:	4915      	ldr	r1, [pc, #84]	@ (800ee74 <xTaskIncrementTick+0x164>)
 800ee20:	4613      	mov	r3, r2
 800ee22:	009b      	lsls	r3, r3, #2
 800ee24:	4413      	add	r3, r2
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	440b      	add	r3, r1
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d901      	bls.n	800ee34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ee30:	2301      	movs	r3, #1
 800ee32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ee34:	4b11      	ldr	r3, [pc, #68]	@ (800ee7c <xTaskIncrementTick+0x16c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d007      	beq.n	800ee4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	617b      	str	r3, [r7, #20]
 800ee40:	e004      	b.n	800ee4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ee42:	4b0f      	ldr	r3, [pc, #60]	@ (800ee80 <xTaskIncrementTick+0x170>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	3301      	adds	r3, #1
 800ee48:	4a0d      	ldr	r2, [pc, #52]	@ (800ee80 <xTaskIncrementTick+0x170>)
 800ee4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ee4c:	697b      	ldr	r3, [r7, #20]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	2000120c 	.word	0x2000120c
 800ee5c:	200011e8 	.word	0x200011e8
 800ee60:	2000119c 	.word	0x2000119c
 800ee64:	200011a0 	.word	0x200011a0
 800ee68:	200011fc 	.word	0x200011fc
 800ee6c:	20001204 	.word	0x20001204
 800ee70:	200011ec 	.word	0x200011ec
 800ee74:	200010e8 	.word	0x200010e8
 800ee78:	200010e4 	.word	0x200010e4
 800ee7c:	200011f8 	.word	0x200011f8
 800ee80:	200011f4 	.word	0x200011f4

0800ee84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ee84:	b480      	push	{r7}
 800ee86:	b087      	sub	sp, #28
 800ee88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ee8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ef34 <vTaskSwitchContext+0xb0>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d003      	beq.n	800ee9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ee92:	4b29      	ldr	r3, [pc, #164]	@ (800ef38 <vTaskSwitchContext+0xb4>)
 800ee94:	2201      	movs	r2, #1
 800ee96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ee98:	e045      	b.n	800ef26 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800ee9a:	4b27      	ldr	r3, [pc, #156]	@ (800ef38 <vTaskSwitchContext+0xb4>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eea0:	4b26      	ldr	r3, [pc, #152]	@ (800ef3c <vTaskSwitchContext+0xb8>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	fab3 f383 	clz	r3, r3
 800eeac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800eeae:	7afb      	ldrb	r3, [r7, #11]
 800eeb0:	f1c3 031f 	rsb	r3, r3, #31
 800eeb4:	617b      	str	r3, [r7, #20]
 800eeb6:	4922      	ldr	r1, [pc, #136]	@ (800ef40 <vTaskSwitchContext+0xbc>)
 800eeb8:	697a      	ldr	r2, [r7, #20]
 800eeba:	4613      	mov	r3, r2
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	4413      	add	r3, r2
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	440b      	add	r3, r1
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10b      	bne.n	800eee2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800eeca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eece:	f383 8811 	msr	BASEPRI, r3
 800eed2:	f3bf 8f6f 	isb	sy
 800eed6:	f3bf 8f4f 	dsb	sy
 800eeda:	607b      	str	r3, [r7, #4]
}
 800eedc:	bf00      	nop
 800eede:	bf00      	nop
 800eee0:	e7fd      	b.n	800eede <vTaskSwitchContext+0x5a>
 800eee2:	697a      	ldr	r2, [r7, #20]
 800eee4:	4613      	mov	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	4413      	add	r3, r2
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	4a14      	ldr	r2, [pc, #80]	@ (800ef40 <vTaskSwitchContext+0xbc>)
 800eeee:	4413      	add	r3, r2
 800eef0:	613b      	str	r3, [r7, #16]
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	605a      	str	r2, [r3, #4]
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	685a      	ldr	r2, [r3, #4]
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	3308      	adds	r3, #8
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d104      	bne.n	800ef12 <vTaskSwitchContext+0x8e>
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	685a      	ldr	r2, [r3, #4]
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	605a      	str	r2, [r3, #4]
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	68db      	ldr	r3, [r3, #12]
 800ef18:	4a0a      	ldr	r2, [pc, #40]	@ (800ef44 <vTaskSwitchContext+0xc0>)
 800ef1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ef1c:	4b09      	ldr	r3, [pc, #36]	@ (800ef44 <vTaskSwitchContext+0xc0>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	334c      	adds	r3, #76	@ 0x4c
 800ef22:	4a09      	ldr	r2, [pc, #36]	@ (800ef48 <vTaskSwitchContext+0xc4>)
 800ef24:	6013      	str	r3, [r2, #0]
}
 800ef26:	bf00      	nop
 800ef28:	371c      	adds	r7, #28
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	2000120c 	.word	0x2000120c
 800ef38:	200011f8 	.word	0x200011f8
 800ef3c:	200011ec 	.word	0x200011ec
 800ef40:	200010e8 	.word	0x200010e8
 800ef44:	200010e4 	.word	0x200010e4
 800ef48:	20000030 	.word	0x20000030

0800ef4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10b      	bne.n	800ef74 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ef5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef60:	f383 8811 	msr	BASEPRI, r3
 800ef64:	f3bf 8f6f 	isb	sy
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	60fb      	str	r3, [r7, #12]
}
 800ef6e:	bf00      	nop
 800ef70:	bf00      	nop
 800ef72:	e7fd      	b.n	800ef70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ef74:	4b07      	ldr	r3, [pc, #28]	@ (800ef94 <vTaskPlaceOnEventList+0x48>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	3318      	adds	r3, #24
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f7fe fd2f 	bl	800d9e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ef82:	2101      	movs	r1, #1
 800ef84:	6838      	ldr	r0, [r7, #0]
 800ef86:	f000 fb6d 	bl	800f664 <prvAddCurrentTaskToDelayedList>
}
 800ef8a:	bf00      	nop
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	200010e4 	.word	0x200010e4

0800ef98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b086      	sub	sp, #24
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d10b      	bne.n	800efc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800efae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	60fb      	str	r3, [r7, #12]
}
 800efc0:	bf00      	nop
 800efc2:	bf00      	nop
 800efc4:	e7fd      	b.n	800efc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	3318      	adds	r3, #24
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fe fd41 	bl	800da52 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800efd0:	4b1d      	ldr	r3, [pc, #116]	@ (800f048 <xTaskRemoveFromEventList+0xb0>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d11c      	bne.n	800f012 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	3304      	adds	r3, #4
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fe fd38 	bl	800da52 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe6:	2201      	movs	r2, #1
 800efe8:	409a      	lsls	r2, r3
 800efea:	4b18      	ldr	r3, [pc, #96]	@ (800f04c <xTaskRemoveFromEventList+0xb4>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4313      	orrs	r3, r2
 800eff0:	4a16      	ldr	r2, [pc, #88]	@ (800f04c <xTaskRemoveFromEventList+0xb4>)
 800eff2:	6013      	str	r3, [r2, #0]
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff8:	4613      	mov	r3, r2
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	4413      	add	r3, r2
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4a13      	ldr	r2, [pc, #76]	@ (800f050 <xTaskRemoveFromEventList+0xb8>)
 800f002:	441a      	add	r2, r3
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	3304      	adds	r3, #4
 800f008:	4619      	mov	r1, r3
 800f00a:	4610      	mov	r0, r2
 800f00c:	f7fe fcc4 	bl	800d998 <vListInsertEnd>
 800f010:	e005      	b.n	800f01e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	3318      	adds	r3, #24
 800f016:	4619      	mov	r1, r3
 800f018:	480e      	ldr	r0, [pc, #56]	@ (800f054 <xTaskRemoveFromEventList+0xbc>)
 800f01a:	f7fe fcbd 	bl	800d998 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f022:	4b0d      	ldr	r3, [pc, #52]	@ (800f058 <xTaskRemoveFromEventList+0xc0>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f028:	429a      	cmp	r2, r3
 800f02a:	d905      	bls.n	800f038 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f02c:	2301      	movs	r3, #1
 800f02e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f030:	4b0a      	ldr	r3, [pc, #40]	@ (800f05c <xTaskRemoveFromEventList+0xc4>)
 800f032:	2201      	movs	r2, #1
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	e001      	b.n	800f03c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f038:	2300      	movs	r3, #0
 800f03a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f03c:	697b      	ldr	r3, [r7, #20]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3718      	adds	r7, #24
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	2000120c 	.word	0x2000120c
 800f04c:	200011ec 	.word	0x200011ec
 800f050:	200010e8 	.word	0x200010e8
 800f054:	200011a4 	.word	0x200011a4
 800f058:	200010e4 	.word	0x200010e4
 800f05c:	200011f8 	.word	0x200011f8

0800f060 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f068:	4b06      	ldr	r3, [pc, #24]	@ (800f084 <vTaskInternalSetTimeOutState+0x24>)
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f070:	4b05      	ldr	r3, [pc, #20]	@ (800f088 <vTaskInternalSetTimeOutState+0x28>)
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	605a      	str	r2, [r3, #4]
}
 800f078:	bf00      	nop
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr
 800f084:	200011fc 	.word	0x200011fc
 800f088:	200011e8 	.word	0x200011e8

0800f08c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b088      	sub	sp, #32
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d10b      	bne.n	800f0b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a0:	f383 8811 	msr	BASEPRI, r3
 800f0a4:	f3bf 8f6f 	isb	sy
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	613b      	str	r3, [r7, #16]
}
 800f0ae:	bf00      	nop
 800f0b0:	bf00      	nop
 800f0b2:	e7fd      	b.n	800f0b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10b      	bne.n	800f0d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	60fb      	str	r3, [r7, #12]
}
 800f0cc:	bf00      	nop
 800f0ce:	bf00      	nop
 800f0d0:	e7fd      	b.n	800f0ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f0d2:	f000 fc61 	bl	800f998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800f14c <xTaskCheckForTimeOut+0xc0>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	69ba      	ldr	r2, [r7, #24]
 800f0e2:	1ad3      	subs	r3, r2, r3
 800f0e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ee:	d102      	bne.n	800f0f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	61fb      	str	r3, [r7, #28]
 800f0f4:	e023      	b.n	800f13e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	4b15      	ldr	r3, [pc, #84]	@ (800f150 <xTaskCheckForTimeOut+0xc4>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d007      	beq.n	800f112 <xTaskCheckForTimeOut+0x86>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	69ba      	ldr	r2, [r7, #24]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d302      	bcc.n	800f112 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f10c:	2301      	movs	r3, #1
 800f10e:	61fb      	str	r3, [r7, #28]
 800f110:	e015      	b.n	800f13e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	697a      	ldr	r2, [r7, #20]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d20b      	bcs.n	800f134 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	1ad2      	subs	r2, r2, r3
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7ff ff99 	bl	800f060 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f12e:	2300      	movs	r3, #0
 800f130:	61fb      	str	r3, [r7, #28]
 800f132:	e004      	b.n	800f13e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	2200      	movs	r2, #0
 800f138:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f13a:	2301      	movs	r3, #1
 800f13c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f13e:	f000 fc5d 	bl	800f9fc <vPortExitCritical>

	return xReturn;
 800f142:	69fb      	ldr	r3, [r7, #28]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3720      	adds	r7, #32
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	200011e8 	.word	0x200011e8
 800f150:	200011fc 	.word	0x200011fc

0800f154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f154:	b480      	push	{r7}
 800f156:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f158:	4b03      	ldr	r3, [pc, #12]	@ (800f168 <vTaskMissedYield+0x14>)
 800f15a:	2201      	movs	r2, #1
 800f15c:	601a      	str	r2, [r3, #0]
}
 800f15e:	bf00      	nop
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr
 800f168:	200011f8 	.word	0x200011f8

0800f16c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b082      	sub	sp, #8
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f174:	f000 f852 	bl	800f21c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f178:	4b06      	ldr	r3, [pc, #24]	@ (800f194 <prvIdleTask+0x28>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d9f9      	bls.n	800f174 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f180:	4b05      	ldr	r3, [pc, #20]	@ (800f198 <prvIdleTask+0x2c>)
 800f182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f186:	601a      	str	r2, [r3, #0]
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f190:	e7f0      	b.n	800f174 <prvIdleTask+0x8>
 800f192:	bf00      	nop
 800f194:	200010e8 	.word	0x200010e8
 800f198:	e000ed04 	.word	0xe000ed04

0800f19c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	607b      	str	r3, [r7, #4]
 800f1a6:	e00c      	b.n	800f1c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	4413      	add	r3, r2
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	4a12      	ldr	r2, [pc, #72]	@ (800f1fc <prvInitialiseTaskLists+0x60>)
 800f1b4:	4413      	add	r3, r2
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7fe fbc1 	bl	800d93e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	607b      	str	r3, [r7, #4]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2b06      	cmp	r3, #6
 800f1c6:	d9ef      	bls.n	800f1a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f1c8:	480d      	ldr	r0, [pc, #52]	@ (800f200 <prvInitialiseTaskLists+0x64>)
 800f1ca:	f7fe fbb8 	bl	800d93e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f1ce:	480d      	ldr	r0, [pc, #52]	@ (800f204 <prvInitialiseTaskLists+0x68>)
 800f1d0:	f7fe fbb5 	bl	800d93e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f1d4:	480c      	ldr	r0, [pc, #48]	@ (800f208 <prvInitialiseTaskLists+0x6c>)
 800f1d6:	f7fe fbb2 	bl	800d93e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f1da:	480c      	ldr	r0, [pc, #48]	@ (800f20c <prvInitialiseTaskLists+0x70>)
 800f1dc:	f7fe fbaf 	bl	800d93e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f1e0:	480b      	ldr	r0, [pc, #44]	@ (800f210 <prvInitialiseTaskLists+0x74>)
 800f1e2:	f7fe fbac 	bl	800d93e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f214 <prvInitialiseTaskLists+0x78>)
 800f1e8:	4a05      	ldr	r2, [pc, #20]	@ (800f200 <prvInitialiseTaskLists+0x64>)
 800f1ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f218 <prvInitialiseTaskLists+0x7c>)
 800f1ee:	4a05      	ldr	r2, [pc, #20]	@ (800f204 <prvInitialiseTaskLists+0x68>)
 800f1f0:	601a      	str	r2, [r3, #0]
}
 800f1f2:	bf00      	nop
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	200010e8 	.word	0x200010e8
 800f200:	20001174 	.word	0x20001174
 800f204:	20001188 	.word	0x20001188
 800f208:	200011a4 	.word	0x200011a4
 800f20c:	200011b8 	.word	0x200011b8
 800f210:	200011d0 	.word	0x200011d0
 800f214:	2000119c 	.word	0x2000119c
 800f218:	200011a0 	.word	0x200011a0

0800f21c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f222:	e019      	b.n	800f258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f224:	f000 fbb8 	bl	800f998 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f228:	4b10      	ldr	r3, [pc, #64]	@ (800f26c <prvCheckTasksWaitingTermination+0x50>)
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	3304      	adds	r3, #4
 800f234:	4618      	mov	r0, r3
 800f236:	f7fe fc0c 	bl	800da52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f23a:	4b0d      	ldr	r3, [pc, #52]	@ (800f270 <prvCheckTasksWaitingTermination+0x54>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	3b01      	subs	r3, #1
 800f240:	4a0b      	ldr	r2, [pc, #44]	@ (800f270 <prvCheckTasksWaitingTermination+0x54>)
 800f242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f244:	4b0b      	ldr	r3, [pc, #44]	@ (800f274 <prvCheckTasksWaitingTermination+0x58>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	3b01      	subs	r3, #1
 800f24a:	4a0a      	ldr	r2, [pc, #40]	@ (800f274 <prvCheckTasksWaitingTermination+0x58>)
 800f24c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f24e:	f000 fbd5 	bl	800f9fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 f810 	bl	800f278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f258:	4b06      	ldr	r3, [pc, #24]	@ (800f274 <prvCheckTasksWaitingTermination+0x58>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d1e1      	bne.n	800f224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f260:	bf00      	nop
 800f262:	bf00      	nop
 800f264:	3708      	adds	r7, #8
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	200011b8 	.word	0x200011b8
 800f270:	200011e4 	.word	0x200011e4
 800f274:	200011cc 	.word	0x200011cc

0800f278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	334c      	adds	r3, #76	@ 0x4c
 800f284:	4618      	mov	r0, r3
 800f286:	f000 fed5 	bl	8010034 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 fd72 	bl	800fd78 <vPortFree>
			vPortFree( pxTCB );
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 fd6f 	bl	800fd78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f29a:	bf00      	nop
 800f29c:	3708      	adds	r7, #8
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
	...

0800f2a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f2dc <prvResetNextTaskUnblockTime+0x38>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d104      	bne.n	800f2be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f2e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f2bc:	e008      	b.n	800f2d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2be:	4b07      	ldr	r3, [pc, #28]	@ (800f2dc <prvResetNextTaskUnblockTime+0x38>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	68db      	ldr	r3, [r3, #12]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	4a04      	ldr	r2, [pc, #16]	@ (800f2e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f2ce:	6013      	str	r3, [r2, #0]
}
 800f2d0:	bf00      	nop
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	2000119c 	.word	0x2000119c
 800f2e0:	20001204 	.word	0x20001204

0800f2e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f2ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f318 <xTaskGetSchedulerState+0x34>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d102      	bne.n	800f2f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	607b      	str	r3, [r7, #4]
 800f2f6:	e008      	b.n	800f30a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2f8:	4b08      	ldr	r3, [pc, #32]	@ (800f31c <xTaskGetSchedulerState+0x38>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d102      	bne.n	800f306 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f300:	2302      	movs	r3, #2
 800f302:	607b      	str	r3, [r7, #4]
 800f304:	e001      	b.n	800f30a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f306:	2300      	movs	r3, #0
 800f308:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f30a:	687b      	ldr	r3, [r7, #4]
	}
 800f30c:	4618      	mov	r0, r3
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	200011f0 	.word	0x200011f0
 800f31c:	2000120c 	.word	0x2000120c

0800f320 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f32c:	2300      	movs	r3, #0
 800f32e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d05e      	beq.n	800f3f4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f33a:	4b31      	ldr	r3, [pc, #196]	@ (800f400 <xTaskPriorityInherit+0xe0>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f340:	429a      	cmp	r2, r3
 800f342:	d24e      	bcs.n	800f3e2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	699b      	ldr	r3, [r3, #24]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	db06      	blt.n	800f35a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f34c:	4b2c      	ldr	r3, [pc, #176]	@ (800f400 <xTaskPriorityInherit+0xe0>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f352:	f1c3 0207 	rsb	r2, r3, #7
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	6959      	ldr	r1, [r3, #20]
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f362:	4613      	mov	r3, r2
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4413      	add	r3, r2
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4a26      	ldr	r2, [pc, #152]	@ (800f404 <xTaskPriorityInherit+0xe4>)
 800f36c:	4413      	add	r3, r2
 800f36e:	4299      	cmp	r1, r3
 800f370:	d12f      	bne.n	800f3d2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	3304      	adds	r3, #4
 800f376:	4618      	mov	r0, r3
 800f378:	f7fe fb6b 	bl	800da52 <uxListRemove>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d10a      	bne.n	800f398 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f386:	2201      	movs	r2, #1
 800f388:	fa02 f303 	lsl.w	r3, r2, r3
 800f38c:	43da      	mvns	r2, r3
 800f38e:	4b1e      	ldr	r3, [pc, #120]	@ (800f408 <xTaskPriorityInherit+0xe8>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4013      	ands	r3, r2
 800f394:	4a1c      	ldr	r2, [pc, #112]	@ (800f408 <xTaskPriorityInherit+0xe8>)
 800f396:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f398:	4b19      	ldr	r3, [pc, #100]	@ (800f400 <xTaskPriorityInherit+0xe0>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	409a      	lsls	r2, r3
 800f3aa:	4b17      	ldr	r3, [pc, #92]	@ (800f408 <xTaskPriorityInherit+0xe8>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	4a15      	ldr	r2, [pc, #84]	@ (800f408 <xTaskPriorityInherit+0xe8>)
 800f3b2:	6013      	str	r3, [r2, #0]
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	4413      	add	r3, r2
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	4a10      	ldr	r2, [pc, #64]	@ (800f404 <xTaskPriorityInherit+0xe4>)
 800f3c2:	441a      	add	r2, r3
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7fe fae4 	bl	800d998 <vListInsertEnd>
 800f3d0:	e004      	b.n	800f3dc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800f400 <xTaskPriorityInherit+0xe0>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	60fb      	str	r3, [r7, #12]
 800f3e0:	e008      	b.n	800f3f4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f3e6:	4b06      	ldr	r3, [pc, #24]	@ (800f400 <xTaskPriorityInherit+0xe0>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d201      	bcs.n	800f3f4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
	}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	200010e4 	.word	0x200010e4
 800f404:	200010e8 	.word	0x200010e8
 800f408:	200011ec 	.word	0x200011ec

0800f40c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b086      	sub	sp, #24
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f418:	2300      	movs	r3, #0
 800f41a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d070      	beq.n	800f504 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f422:	4b3b      	ldr	r3, [pc, #236]	@ (800f510 <xTaskPriorityDisinherit+0x104>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	693a      	ldr	r2, [r7, #16]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d00b      	beq.n	800f444 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f430:	f383 8811 	msr	BASEPRI, r3
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	f3bf 8f4f 	dsb	sy
 800f43c:	60fb      	str	r3, [r7, #12]
}
 800f43e:	bf00      	nop
 800f440:	bf00      	nop
 800f442:	e7fd      	b.n	800f440 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d10b      	bne.n	800f464 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	60bb      	str	r3, [r7, #8]
}
 800f45e:	bf00      	nop
 800f460:	bf00      	nop
 800f462:	e7fd      	b.n	800f460 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f468:	1e5a      	subs	r2, r3, #1
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f476:	429a      	cmp	r2, r3
 800f478:	d044      	beq.n	800f504 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d140      	bne.n	800f504 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	3304      	adds	r3, #4
 800f486:	4618      	mov	r0, r3
 800f488:	f7fe fae3 	bl	800da52 <uxListRemove>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d115      	bne.n	800f4be <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f496:	491f      	ldr	r1, [pc, #124]	@ (800f514 <xTaskPriorityDisinherit+0x108>)
 800f498:	4613      	mov	r3, r2
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	4413      	add	r3, r2
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	440b      	add	r3, r1
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10a      	bne.n	800f4be <xTaskPriorityDisinherit+0xb2>
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f4b2:	43da      	mvns	r2, r3
 800f4b4:	4b18      	ldr	r3, [pc, #96]	@ (800f518 <xTaskPriorityDisinherit+0x10c>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4013      	ands	r3, r2
 800f4ba:	4a17      	ldr	r2, [pc, #92]	@ (800f518 <xTaskPriorityDisinherit+0x10c>)
 800f4bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ca:	f1c3 0207 	rsb	r2, r3, #7
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	409a      	lsls	r2, r3
 800f4da:	4b0f      	ldr	r3, [pc, #60]	@ (800f518 <xTaskPriorityDisinherit+0x10c>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	4a0d      	ldr	r2, [pc, #52]	@ (800f518 <xTaskPriorityDisinherit+0x10c>)
 800f4e2:	6013      	str	r3, [r2, #0]
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	4413      	add	r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	4a08      	ldr	r2, [pc, #32]	@ (800f514 <xTaskPriorityDisinherit+0x108>)
 800f4f2:	441a      	add	r2, r3
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	4610      	mov	r0, r2
 800f4fc:	f7fe fa4c 	bl	800d998 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f500:	2301      	movs	r3, #1
 800f502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f504:	697b      	ldr	r3, [r7, #20]
	}
 800f506:	4618      	mov	r0, r3
 800f508:	3718      	adds	r7, #24
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	200010e4 	.word	0x200010e4
 800f514:	200010e8 	.word	0x200010e8
 800f518:	200011ec 	.word	0x200011ec

0800f51c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b088      	sub	sp, #32
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f52a:	2301      	movs	r3, #1
 800f52c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d079      	beq.n	800f628 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10b      	bne.n	800f554 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f540:	f383 8811 	msr	BASEPRI, r3
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	60fb      	str	r3, [r7, #12]
}
 800f54e:	bf00      	nop
 800f550:	bf00      	nop
 800f552:	e7fd      	b.n	800f550 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f558:	683a      	ldr	r2, [r7, #0]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d902      	bls.n	800f564 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	61fb      	str	r3, [r7, #28]
 800f562:	e002      	b.n	800f56a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f568:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f56e:	69fa      	ldr	r2, [r7, #28]
 800f570:	429a      	cmp	r2, r3
 800f572:	d059      	beq.n	800f628 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f578:	697a      	ldr	r2, [r7, #20]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d154      	bne.n	800f628 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f57e:	4b2c      	ldr	r3, [pc, #176]	@ (800f630 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	69ba      	ldr	r2, [r7, #24]
 800f584:	429a      	cmp	r2, r3
 800f586:	d10b      	bne.n	800f5a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f58c:	f383 8811 	msr	BASEPRI, r3
 800f590:	f3bf 8f6f 	isb	sy
 800f594:	f3bf 8f4f 	dsb	sy
 800f598:	60bb      	str	r3, [r7, #8]
}
 800f59a:	bf00      	nop
 800f59c:	bf00      	nop
 800f59e:	e7fd      	b.n	800f59c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	69fa      	ldr	r2, [r7, #28]
 800f5aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	699b      	ldr	r3, [r3, #24]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	db04      	blt.n	800f5be <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	f1c3 0207 	rsb	r2, r3, #7
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	6959      	ldr	r1, [r3, #20]
 800f5c2:	693a      	ldr	r2, [r7, #16]
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	4413      	add	r3, r2
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	4a19      	ldr	r2, [pc, #100]	@ (800f634 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f5ce:	4413      	add	r3, r2
 800f5d0:	4299      	cmp	r1, r3
 800f5d2:	d129      	bne.n	800f628 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5d4:	69bb      	ldr	r3, [r7, #24]
 800f5d6:	3304      	adds	r3, #4
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fe fa3a 	bl	800da52 <uxListRemove>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d10a      	bne.n	800f5fa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800f5ee:	43da      	mvns	r2, r3
 800f5f0:	4b11      	ldr	r3, [pc, #68]	@ (800f638 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	4a10      	ldr	r2, [pc, #64]	@ (800f638 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f5f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5fe:	2201      	movs	r2, #1
 800f600:	409a      	lsls	r2, r3
 800f602:	4b0d      	ldr	r3, [pc, #52]	@ (800f638 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4313      	orrs	r3, r2
 800f608:	4a0b      	ldr	r2, [pc, #44]	@ (800f638 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800f60a:	6013      	str	r3, [r2, #0]
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f610:	4613      	mov	r3, r2
 800f612:	009b      	lsls	r3, r3, #2
 800f614:	4413      	add	r3, r2
 800f616:	009b      	lsls	r3, r3, #2
 800f618:	4a06      	ldr	r2, [pc, #24]	@ (800f634 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f61a:	441a      	add	r2, r3
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	3304      	adds	r3, #4
 800f620:	4619      	mov	r1, r3
 800f622:	4610      	mov	r0, r2
 800f624:	f7fe f9b8 	bl	800d998 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f628:	bf00      	nop
 800f62a:	3720      	adds	r7, #32
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	200010e4 	.word	0x200010e4
 800f634:	200010e8 	.word	0x200010e8
 800f638:	200011ec 	.word	0x200011ec

0800f63c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f63c:	b480      	push	{r7}
 800f63e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f640:	4b07      	ldr	r3, [pc, #28]	@ (800f660 <pvTaskIncrementMutexHeldCount+0x24>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d004      	beq.n	800f652 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f648:	4b05      	ldr	r3, [pc, #20]	@ (800f660 <pvTaskIncrementMutexHeldCount+0x24>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f64e:	3201      	adds	r2, #1
 800f650:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f652:	4b03      	ldr	r3, [pc, #12]	@ (800f660 <pvTaskIncrementMutexHeldCount+0x24>)
 800f654:	681b      	ldr	r3, [r3, #0]
	}
 800f656:	4618      	mov	r0, r3
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr
 800f660:	200010e4 	.word	0x200010e4

0800f664 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f66e:	4b29      	ldr	r3, [pc, #164]	@ (800f714 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f674:	4b28      	ldr	r3, [pc, #160]	@ (800f718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	3304      	adds	r3, #4
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fe f9e9 	bl	800da52 <uxListRemove>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10b      	bne.n	800f69e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f686:	4b24      	ldr	r3, [pc, #144]	@ (800f718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f68c:	2201      	movs	r2, #1
 800f68e:	fa02 f303 	lsl.w	r3, r2, r3
 800f692:	43da      	mvns	r2, r3
 800f694:	4b21      	ldr	r3, [pc, #132]	@ (800f71c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4013      	ands	r3, r2
 800f69a:	4a20      	ldr	r2, [pc, #128]	@ (800f71c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f69c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a4:	d10a      	bne.n	800f6bc <prvAddCurrentTaskToDelayedList+0x58>
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d007      	beq.n	800f6bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6ac:	4b1a      	ldr	r3, [pc, #104]	@ (800f718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3304      	adds	r3, #4
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	481a      	ldr	r0, [pc, #104]	@ (800f720 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f6b6:	f7fe f96f 	bl	800d998 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f6ba:	e026      	b.n	800f70a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f6c4:	4b14      	ldr	r3, [pc, #80]	@ (800f718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d209      	bcs.n	800f6e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6d4:	4b13      	ldr	r3, [pc, #76]	@ (800f724 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	4b0f      	ldr	r3, [pc, #60]	@ (800f718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	3304      	adds	r3, #4
 800f6de:	4619      	mov	r1, r3
 800f6e0:	4610      	mov	r0, r2
 800f6e2:	f7fe f97d 	bl	800d9e0 <vListInsert>
}
 800f6e6:	e010      	b.n	800f70a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6e8:	4b0f      	ldr	r3, [pc, #60]	@ (800f728 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f718 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	f7fe f973 	bl	800d9e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800f72c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	429a      	cmp	r2, r3
 800f702:	d202      	bcs.n	800f70a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f704:	4a09      	ldr	r2, [pc, #36]	@ (800f72c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	6013      	str	r3, [r2, #0]
}
 800f70a:	bf00      	nop
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	200011e8 	.word	0x200011e8
 800f718:	200010e4 	.word	0x200010e4
 800f71c:	200011ec 	.word	0x200011ec
 800f720:	200011d0 	.word	0x200011d0
 800f724:	200011a0 	.word	0x200011a0
 800f728:	2000119c 	.word	0x2000119c
 800f72c:	20001204 	.word	0x20001204

0800f730 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	3b04      	subs	r3, #4
 800f740:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3b04      	subs	r3, #4
 800f74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	f023 0201 	bic.w	r2, r3, #1
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	3b04      	subs	r3, #4
 800f75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f760:	4a0c      	ldr	r2, [pc, #48]	@ (800f794 <pxPortInitialiseStack+0x64>)
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	3b14      	subs	r3, #20
 800f76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3b04      	subs	r3, #4
 800f776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f06f 0202 	mvn.w	r2, #2
 800f77e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	3b20      	subs	r3, #32
 800f784:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f786:	68fb      	ldr	r3, [r7, #12]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3714      	adds	r7, #20
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr
 800f794:	0800f799 	.word	0x0800f799

0800f798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f798:	b480      	push	{r7}
 800f79a:	b085      	sub	sp, #20
 800f79c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f7a2:	4b13      	ldr	r3, [pc, #76]	@ (800f7f0 <prvTaskExitError+0x58>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7aa:	d00b      	beq.n	800f7c4 <prvTaskExitError+0x2c>
	__asm volatile
 800f7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b0:	f383 8811 	msr	BASEPRI, r3
 800f7b4:	f3bf 8f6f 	isb	sy
 800f7b8:	f3bf 8f4f 	dsb	sy
 800f7bc:	60fb      	str	r3, [r7, #12]
}
 800f7be:	bf00      	nop
 800f7c0:	bf00      	nop
 800f7c2:	e7fd      	b.n	800f7c0 <prvTaskExitError+0x28>
	__asm volatile
 800f7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c8:	f383 8811 	msr	BASEPRI, r3
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f3bf 8f4f 	dsb	sy
 800f7d4:	60bb      	str	r3, [r7, #8]
}
 800f7d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f7d8:	bf00      	nop
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d0fc      	beq.n	800f7da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f7e0:	bf00      	nop
 800f7e2:	bf00      	nop
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop
 800f7f0:	2000002c 	.word	0x2000002c
	...

0800f800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f800:	4b07      	ldr	r3, [pc, #28]	@ (800f820 <pxCurrentTCBConst2>)
 800f802:	6819      	ldr	r1, [r3, #0]
 800f804:	6808      	ldr	r0, [r1, #0]
 800f806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f80a:	f380 8809 	msr	PSP, r0
 800f80e:	f3bf 8f6f 	isb	sy
 800f812:	f04f 0000 	mov.w	r0, #0
 800f816:	f380 8811 	msr	BASEPRI, r0
 800f81a:	4770      	bx	lr
 800f81c:	f3af 8000 	nop.w

0800f820 <pxCurrentTCBConst2>:
 800f820:	200010e4 	.word	0x200010e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f824:	bf00      	nop
 800f826:	bf00      	nop

0800f828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f828:	4808      	ldr	r0, [pc, #32]	@ (800f84c <prvPortStartFirstTask+0x24>)
 800f82a:	6800      	ldr	r0, [r0, #0]
 800f82c:	6800      	ldr	r0, [r0, #0]
 800f82e:	f380 8808 	msr	MSP, r0
 800f832:	f04f 0000 	mov.w	r0, #0
 800f836:	f380 8814 	msr	CONTROL, r0
 800f83a:	b662      	cpsie	i
 800f83c:	b661      	cpsie	f
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	df00      	svc	0
 800f848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f84a:	bf00      	nop
 800f84c:	e000ed08 	.word	0xe000ed08

0800f850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b086      	sub	sp, #24
 800f854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f856:	4b47      	ldr	r3, [pc, #284]	@ (800f974 <xPortStartScheduler+0x124>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4a47      	ldr	r2, [pc, #284]	@ (800f978 <xPortStartScheduler+0x128>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d10b      	bne.n	800f878 <xPortStartScheduler+0x28>
	__asm volatile
 800f860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f864:	f383 8811 	msr	BASEPRI, r3
 800f868:	f3bf 8f6f 	isb	sy
 800f86c:	f3bf 8f4f 	dsb	sy
 800f870:	60fb      	str	r3, [r7, #12]
}
 800f872:	bf00      	nop
 800f874:	bf00      	nop
 800f876:	e7fd      	b.n	800f874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f878:	4b3e      	ldr	r3, [pc, #248]	@ (800f974 <xPortStartScheduler+0x124>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a3f      	ldr	r2, [pc, #252]	@ (800f97c <xPortStartScheduler+0x12c>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d10b      	bne.n	800f89a <xPortStartScheduler+0x4a>
	__asm volatile
 800f882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f886:	f383 8811 	msr	BASEPRI, r3
 800f88a:	f3bf 8f6f 	isb	sy
 800f88e:	f3bf 8f4f 	dsb	sy
 800f892:	613b      	str	r3, [r7, #16]
}
 800f894:	bf00      	nop
 800f896:	bf00      	nop
 800f898:	e7fd      	b.n	800f896 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f89a:	4b39      	ldr	r3, [pc, #228]	@ (800f980 <xPortStartScheduler+0x130>)
 800f89c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	22ff      	movs	r2, #255	@ 0xff
 800f8aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f8b4:	78fb      	ldrb	r3, [r7, #3]
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	4b31      	ldr	r3, [pc, #196]	@ (800f984 <xPortStartScheduler+0x134>)
 800f8c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f8c2:	4b31      	ldr	r3, [pc, #196]	@ (800f988 <xPortStartScheduler+0x138>)
 800f8c4:	2207      	movs	r2, #7
 800f8c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8c8:	e009      	b.n	800f8de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f8ca:	4b2f      	ldr	r3, [pc, #188]	@ (800f988 <xPortStartScheduler+0x138>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	3b01      	subs	r3, #1
 800f8d0:	4a2d      	ldr	r2, [pc, #180]	@ (800f988 <xPortStartScheduler+0x138>)
 800f8d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f8d4:	78fb      	ldrb	r3, [r7, #3]
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	005b      	lsls	r3, r3, #1
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8de:	78fb      	ldrb	r3, [r7, #3]
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8e6:	2b80      	cmp	r3, #128	@ 0x80
 800f8e8:	d0ef      	beq.n	800f8ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f8ea:	4b27      	ldr	r3, [pc, #156]	@ (800f988 <xPortStartScheduler+0x138>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f1c3 0307 	rsb	r3, r3, #7
 800f8f2:	2b04      	cmp	r3, #4
 800f8f4:	d00b      	beq.n	800f90e <xPortStartScheduler+0xbe>
	__asm volatile
 800f8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8fa:	f383 8811 	msr	BASEPRI, r3
 800f8fe:	f3bf 8f6f 	isb	sy
 800f902:	f3bf 8f4f 	dsb	sy
 800f906:	60bb      	str	r3, [r7, #8]
}
 800f908:	bf00      	nop
 800f90a:	bf00      	nop
 800f90c:	e7fd      	b.n	800f90a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f90e:	4b1e      	ldr	r3, [pc, #120]	@ (800f988 <xPortStartScheduler+0x138>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	021b      	lsls	r3, r3, #8
 800f914:	4a1c      	ldr	r2, [pc, #112]	@ (800f988 <xPortStartScheduler+0x138>)
 800f916:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f918:	4b1b      	ldr	r3, [pc, #108]	@ (800f988 <xPortStartScheduler+0x138>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f920:	4a19      	ldr	r2, [pc, #100]	@ (800f988 <xPortStartScheduler+0x138>)
 800f922:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	b2da      	uxtb	r2, r3
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f92c:	4b17      	ldr	r3, [pc, #92]	@ (800f98c <xPortStartScheduler+0x13c>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a16      	ldr	r2, [pc, #88]	@ (800f98c <xPortStartScheduler+0x13c>)
 800f932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f936:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f938:	4b14      	ldr	r3, [pc, #80]	@ (800f98c <xPortStartScheduler+0x13c>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a13      	ldr	r2, [pc, #76]	@ (800f98c <xPortStartScheduler+0x13c>)
 800f93e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f942:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f944:	f000 f8da 	bl	800fafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f948:	4b11      	ldr	r3, [pc, #68]	@ (800f990 <xPortStartScheduler+0x140>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f94e:	f000 f8f9 	bl	800fb44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f952:	4b10      	ldr	r3, [pc, #64]	@ (800f994 <xPortStartScheduler+0x144>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a0f      	ldr	r2, [pc, #60]	@ (800f994 <xPortStartScheduler+0x144>)
 800f958:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f95c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f95e:	f7ff ff63 	bl	800f828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f962:	f7ff fa8f 	bl	800ee84 <vTaskSwitchContext>
	prvTaskExitError();
 800f966:	f7ff ff17 	bl	800f798 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f96a:	2300      	movs	r3, #0
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3718      	adds	r7, #24
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	e000ed00 	.word	0xe000ed00
 800f978:	410fc271 	.word	0x410fc271
 800f97c:	410fc270 	.word	0x410fc270
 800f980:	e000e400 	.word	0xe000e400
 800f984:	20001210 	.word	0x20001210
 800f988:	20001214 	.word	0x20001214
 800f98c:	e000ed20 	.word	0xe000ed20
 800f990:	2000002c 	.word	0x2000002c
 800f994:	e000ef34 	.word	0xe000ef34

0800f998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
	__asm volatile
 800f99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9a2:	f383 8811 	msr	BASEPRI, r3
 800f9a6:	f3bf 8f6f 	isb	sy
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	607b      	str	r3, [r7, #4]
}
 800f9b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f9b2:	4b10      	ldr	r3, [pc, #64]	@ (800f9f4 <vPortEnterCritical+0x5c>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	4a0e      	ldr	r2, [pc, #56]	@ (800f9f4 <vPortEnterCritical+0x5c>)
 800f9ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f9bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f9f4 <vPortEnterCritical+0x5c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d110      	bne.n	800f9e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800f9f8 <vPortEnterCritical+0x60>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d00b      	beq.n	800f9e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	603b      	str	r3, [r7, #0]
}
 800f9e0:	bf00      	nop
 800f9e2:	bf00      	nop
 800f9e4:	e7fd      	b.n	800f9e2 <vPortEnterCritical+0x4a>
	}
}
 800f9e6:	bf00      	nop
 800f9e8:	370c      	adds	r7, #12
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop
 800f9f4:	2000002c 	.word	0x2000002c
 800f9f8:	e000ed04 	.word	0xe000ed04

0800f9fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa02:	4b12      	ldr	r3, [pc, #72]	@ (800fa4c <vPortExitCritical+0x50>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d10b      	bne.n	800fa22 <vPortExitCritical+0x26>
	__asm volatile
 800fa0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa0e:	f383 8811 	msr	BASEPRI, r3
 800fa12:	f3bf 8f6f 	isb	sy
 800fa16:	f3bf 8f4f 	dsb	sy
 800fa1a:	607b      	str	r3, [r7, #4]
}
 800fa1c:	bf00      	nop
 800fa1e:	bf00      	nop
 800fa20:	e7fd      	b.n	800fa1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fa22:	4b0a      	ldr	r3, [pc, #40]	@ (800fa4c <vPortExitCritical+0x50>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	3b01      	subs	r3, #1
 800fa28:	4a08      	ldr	r2, [pc, #32]	@ (800fa4c <vPortExitCritical+0x50>)
 800fa2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa2c:	4b07      	ldr	r3, [pc, #28]	@ (800fa4c <vPortExitCritical+0x50>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d105      	bne.n	800fa40 <vPortExitCritical+0x44>
 800fa34:	2300      	movs	r3, #0
 800fa36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	f383 8811 	msr	BASEPRI, r3
}
 800fa3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa40:	bf00      	nop
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr
 800fa4c:	2000002c 	.word	0x2000002c

0800fa50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa50:	f3ef 8009 	mrs	r0, PSP
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	4b15      	ldr	r3, [pc, #84]	@ (800fab0 <pxCurrentTCBConst>)
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	f01e 0f10 	tst.w	lr, #16
 800fa60:	bf08      	it	eq
 800fa62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa6a:	6010      	str	r0, [r2, #0]
 800fa6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fa74:	f380 8811 	msr	BASEPRI, r0
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	f3bf 8f6f 	isb	sy
 800fa80:	f7ff fa00 	bl	800ee84 <vTaskSwitchContext>
 800fa84:	f04f 0000 	mov.w	r0, #0
 800fa88:	f380 8811 	msr	BASEPRI, r0
 800fa8c:	bc09      	pop	{r0, r3}
 800fa8e:	6819      	ldr	r1, [r3, #0]
 800fa90:	6808      	ldr	r0, [r1, #0]
 800fa92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa96:	f01e 0f10 	tst.w	lr, #16
 800fa9a:	bf08      	it	eq
 800fa9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800faa0:	f380 8809 	msr	PSP, r0
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	f3af 8000 	nop.w

0800fab0 <pxCurrentTCBConst>:
 800fab0:	200010e4 	.word	0x200010e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fab4:	bf00      	nop
 800fab6:	bf00      	nop

0800fab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
	__asm volatile
 800fabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	607b      	str	r3, [r7, #4]
}
 800fad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fad2:	f7ff f91d 	bl	800ed10 <xTaskIncrementTick>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d003      	beq.n	800fae4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fadc:	4b06      	ldr	r3, [pc, #24]	@ (800faf8 <SysTick_Handler+0x40>)
 800fade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fae2:	601a      	str	r2, [r3, #0]
 800fae4:	2300      	movs	r3, #0
 800fae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	f383 8811 	msr	BASEPRI, r3
}
 800faee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800faf0:	bf00      	nop
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	e000ed04 	.word	0xe000ed04

0800fafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fafc:	b480      	push	{r7}
 800fafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb00:	4b0b      	ldr	r3, [pc, #44]	@ (800fb30 <vPortSetupTimerInterrupt+0x34>)
 800fb02:	2200      	movs	r2, #0
 800fb04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb06:	4b0b      	ldr	r3, [pc, #44]	@ (800fb34 <vPortSetupTimerInterrupt+0x38>)
 800fb08:	2200      	movs	r2, #0
 800fb0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb0c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb38 <vPortSetupTimerInterrupt+0x3c>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4a0a      	ldr	r2, [pc, #40]	@ (800fb3c <vPortSetupTimerInterrupt+0x40>)
 800fb12:	fba2 2303 	umull	r2, r3, r2, r3
 800fb16:	099b      	lsrs	r3, r3, #6
 800fb18:	4a09      	ldr	r2, [pc, #36]	@ (800fb40 <vPortSetupTimerInterrupt+0x44>)
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb1e:	4b04      	ldr	r3, [pc, #16]	@ (800fb30 <vPortSetupTimerInterrupt+0x34>)
 800fb20:	2207      	movs	r2, #7
 800fb22:	601a      	str	r2, [r3, #0]
}
 800fb24:	bf00      	nop
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	e000e010 	.word	0xe000e010
 800fb34:	e000e018 	.word	0xe000e018
 800fb38:	20000008 	.word	0x20000008
 800fb3c:	10624dd3 	.word	0x10624dd3
 800fb40:	e000e014 	.word	0xe000e014

0800fb44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fb54 <vPortEnableVFP+0x10>
 800fb48:	6801      	ldr	r1, [r0, #0]
 800fb4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fb4e:	6001      	str	r1, [r0, #0]
 800fb50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb52:	bf00      	nop
 800fb54:	e000ed88 	.word	0xe000ed88

0800fb58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb58:	b480      	push	{r7}
 800fb5a:	b085      	sub	sp, #20
 800fb5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb5e:	f3ef 8305 	mrs	r3, IPSR
 800fb62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2b0f      	cmp	r3, #15
 800fb68:	d915      	bls.n	800fb96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb6a:	4a18      	ldr	r2, [pc, #96]	@ (800fbcc <vPortValidateInterruptPriority+0x74>)
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	4413      	add	r3, r2
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb74:	4b16      	ldr	r3, [pc, #88]	@ (800fbd0 <vPortValidateInterruptPriority+0x78>)
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	7afa      	ldrb	r2, [r7, #11]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d20b      	bcs.n	800fb96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb82:	f383 8811 	msr	BASEPRI, r3
 800fb86:	f3bf 8f6f 	isb	sy
 800fb8a:	f3bf 8f4f 	dsb	sy
 800fb8e:	607b      	str	r3, [r7, #4]
}
 800fb90:	bf00      	nop
 800fb92:	bf00      	nop
 800fb94:	e7fd      	b.n	800fb92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb96:	4b0f      	ldr	r3, [pc, #60]	@ (800fbd4 <vPortValidateInterruptPriority+0x7c>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fb9e:	4b0e      	ldr	r3, [pc, #56]	@ (800fbd8 <vPortValidateInterruptPriority+0x80>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d90b      	bls.n	800fbbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbaa:	f383 8811 	msr	BASEPRI, r3
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	603b      	str	r3, [r7, #0]
}
 800fbb8:	bf00      	nop
 800fbba:	bf00      	nop
 800fbbc:	e7fd      	b.n	800fbba <vPortValidateInterruptPriority+0x62>
	}
 800fbbe:	bf00      	nop
 800fbc0:	3714      	adds	r7, #20
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	e000e3f0 	.word	0xe000e3f0
 800fbd0:	20001210 	.word	0x20001210
 800fbd4:	e000ed0c 	.word	0xe000ed0c
 800fbd8:	20001214 	.word	0x20001214

0800fbdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b08a      	sub	sp, #40	@ 0x28
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fbe8:	f7fe ffd6 	bl	800eb98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fbec:	4b5c      	ldr	r3, [pc, #368]	@ (800fd60 <pvPortMalloc+0x184>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d101      	bne.n	800fbf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fbf4:	f000 f924 	bl	800fe40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fbf8:	4b5a      	ldr	r3, [pc, #360]	@ (800fd64 <pvPortMalloc+0x188>)
 800fbfa:	681a      	ldr	r2, [r3, #0]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4013      	ands	r3, r2
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	f040 8095 	bne.w	800fd30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d01e      	beq.n	800fc4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fc0c:	2208      	movs	r2, #8
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4413      	add	r3, r2
 800fc12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f003 0307 	and.w	r3, r3, #7
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d015      	beq.n	800fc4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f023 0307 	bic.w	r3, r3, #7
 800fc24:	3308      	adds	r3, #8
 800fc26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f003 0307 	and.w	r3, r3, #7
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d00b      	beq.n	800fc4a <pvPortMalloc+0x6e>
	__asm volatile
 800fc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc36:	f383 8811 	msr	BASEPRI, r3
 800fc3a:	f3bf 8f6f 	isb	sy
 800fc3e:	f3bf 8f4f 	dsb	sy
 800fc42:	617b      	str	r3, [r7, #20]
}
 800fc44:	bf00      	nop
 800fc46:	bf00      	nop
 800fc48:	e7fd      	b.n	800fc46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d06f      	beq.n	800fd30 <pvPortMalloc+0x154>
 800fc50:	4b45      	ldr	r3, [pc, #276]	@ (800fd68 <pvPortMalloc+0x18c>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d86a      	bhi.n	800fd30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc5a:	4b44      	ldr	r3, [pc, #272]	@ (800fd6c <pvPortMalloc+0x190>)
 800fc5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc5e:	4b43      	ldr	r3, [pc, #268]	@ (800fd6c <pvPortMalloc+0x190>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc64:	e004      	b.n	800fc70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d903      	bls.n	800fc82 <pvPortMalloc+0xa6>
 800fc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1f1      	bne.n	800fc66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc82:	4b37      	ldr	r3, [pc, #220]	@ (800fd60 <pvPortMalloc+0x184>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d051      	beq.n	800fd30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc8c:	6a3b      	ldr	r3, [r7, #32]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2208      	movs	r2, #8
 800fc92:	4413      	add	r3, r2
 800fc94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca0:	685a      	ldr	r2, [r3, #4]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	1ad2      	subs	r2, r2, r3
 800fca6:	2308      	movs	r3, #8
 800fca8:	005b      	lsls	r3, r3, #1
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d920      	bls.n	800fcf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fcae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	f003 0307 	and.w	r3, r3, #7
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00b      	beq.n	800fcd8 <pvPortMalloc+0xfc>
	__asm volatile
 800fcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc4:	f383 8811 	msr	BASEPRI, r3
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	f3bf 8f4f 	dsb	sy
 800fcd0:	613b      	str	r3, [r7, #16]
}
 800fcd2:	bf00      	nop
 800fcd4:	bf00      	nop
 800fcd6:	e7fd      	b.n	800fcd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcda:	685a      	ldr	r2, [r3, #4]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	1ad2      	subs	r2, r2, r3
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fcea:	69b8      	ldr	r0, [r7, #24]
 800fcec:	f000 f90a 	bl	800ff04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fcf0:	4b1d      	ldr	r3, [pc, #116]	@ (800fd68 <pvPortMalloc+0x18c>)
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	1ad3      	subs	r3, r2, r3
 800fcfa:	4a1b      	ldr	r2, [pc, #108]	@ (800fd68 <pvPortMalloc+0x18c>)
 800fcfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fcfe:	4b1a      	ldr	r3, [pc, #104]	@ (800fd68 <pvPortMalloc+0x18c>)
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	4b1b      	ldr	r3, [pc, #108]	@ (800fd70 <pvPortMalloc+0x194>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d203      	bcs.n	800fd12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd0a:	4b17      	ldr	r3, [pc, #92]	@ (800fd68 <pvPortMalloc+0x18c>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	4a18      	ldr	r2, [pc, #96]	@ (800fd70 <pvPortMalloc+0x194>)
 800fd10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd14:	685a      	ldr	r2, [r3, #4]
 800fd16:	4b13      	ldr	r3, [pc, #76]	@ (800fd64 <pvPortMalloc+0x188>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	431a      	orrs	r2, r3
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd22:	2200      	movs	r2, #0
 800fd24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fd26:	4b13      	ldr	r3, [pc, #76]	@ (800fd74 <pvPortMalloc+0x198>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	4a11      	ldr	r2, [pc, #68]	@ (800fd74 <pvPortMalloc+0x198>)
 800fd2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd30:	f7fe ff40 	bl	800ebb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	f003 0307 	and.w	r3, r3, #7
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00b      	beq.n	800fd56 <pvPortMalloc+0x17a>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	60fb      	str	r3, [r7, #12]
}
 800fd50:	bf00      	nop
 800fd52:	bf00      	nop
 800fd54:	e7fd      	b.n	800fd52 <pvPortMalloc+0x176>
	return pvReturn;
 800fd56:	69fb      	ldr	r3, [r7, #28]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3728      	adds	r7, #40	@ 0x28
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	20004100 	.word	0x20004100
 800fd64:	20004114 	.word	0x20004114
 800fd68:	20004104 	.word	0x20004104
 800fd6c:	200040f8 	.word	0x200040f8
 800fd70:	20004108 	.word	0x20004108
 800fd74:	2000410c 	.word	0x2000410c

0800fd78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b086      	sub	sp, #24
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d04f      	beq.n	800fe2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd8a:	2308      	movs	r3, #8
 800fd8c:	425b      	negs	r3, r3
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	4413      	add	r3, r2
 800fd92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	685a      	ldr	r2, [r3, #4]
 800fd9c:	4b25      	ldr	r3, [pc, #148]	@ (800fe34 <vPortFree+0xbc>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4013      	ands	r3, r2
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d10b      	bne.n	800fdbe <vPortFree+0x46>
	__asm volatile
 800fda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdaa:	f383 8811 	msr	BASEPRI, r3
 800fdae:	f3bf 8f6f 	isb	sy
 800fdb2:	f3bf 8f4f 	dsb	sy
 800fdb6:	60fb      	str	r3, [r7, #12]
}
 800fdb8:	bf00      	nop
 800fdba:	bf00      	nop
 800fdbc:	e7fd      	b.n	800fdba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00b      	beq.n	800fdde <vPortFree+0x66>
	__asm volatile
 800fdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdca:	f383 8811 	msr	BASEPRI, r3
 800fdce:	f3bf 8f6f 	isb	sy
 800fdd2:	f3bf 8f4f 	dsb	sy
 800fdd6:	60bb      	str	r3, [r7, #8]
}
 800fdd8:	bf00      	nop
 800fdda:	bf00      	nop
 800fddc:	e7fd      	b.n	800fdda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	685a      	ldr	r2, [r3, #4]
 800fde2:	4b14      	ldr	r3, [pc, #80]	@ (800fe34 <vPortFree+0xbc>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	4013      	ands	r3, r2
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d01e      	beq.n	800fe2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d11a      	bne.n	800fe2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	685a      	ldr	r2, [r3, #4]
 800fdf8:	4b0e      	ldr	r3, [pc, #56]	@ (800fe34 <vPortFree+0xbc>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	43db      	mvns	r3, r3
 800fdfe:	401a      	ands	r2, r3
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe04:	f7fe fec8 	bl	800eb98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	685a      	ldr	r2, [r3, #4]
 800fe0c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe38 <vPortFree+0xc0>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4413      	add	r3, r2
 800fe12:	4a09      	ldr	r2, [pc, #36]	@ (800fe38 <vPortFree+0xc0>)
 800fe14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe16:	6938      	ldr	r0, [r7, #16]
 800fe18:	f000 f874 	bl	800ff04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fe1c:	4b07      	ldr	r3, [pc, #28]	@ (800fe3c <vPortFree+0xc4>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	3301      	adds	r3, #1
 800fe22:	4a06      	ldr	r2, [pc, #24]	@ (800fe3c <vPortFree+0xc4>)
 800fe24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fe26:	f7fe fec5 	bl	800ebb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe2a:	bf00      	nop
 800fe2c:	3718      	adds	r7, #24
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	20004114 	.word	0x20004114
 800fe38:	20004104 	.word	0x20004104
 800fe3c:	20004110 	.word	0x20004110

0800fe40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe40:	b480      	push	{r7}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe46:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800fe4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fe4c:	4b27      	ldr	r3, [pc, #156]	@ (800feec <prvHeapInit+0xac>)
 800fe4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f003 0307 	and.w	r3, r3, #7
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d00c      	beq.n	800fe74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	3307      	adds	r3, #7
 800fe5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f023 0307 	bic.w	r3, r3, #7
 800fe66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fe68:	68ba      	ldr	r2, [r7, #8]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	1ad3      	subs	r3, r2, r3
 800fe6e:	4a1f      	ldr	r2, [pc, #124]	@ (800feec <prvHeapInit+0xac>)
 800fe70:	4413      	add	r3, r2
 800fe72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fe78:	4a1d      	ldr	r2, [pc, #116]	@ (800fef0 <prvHeapInit+0xb0>)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe7e:	4b1c      	ldr	r3, [pc, #112]	@ (800fef0 <prvHeapInit+0xb0>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	68ba      	ldr	r2, [r7, #8]
 800fe88:	4413      	add	r3, r2
 800fe8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe8c:	2208      	movs	r2, #8
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	1a9b      	subs	r3, r3, r2
 800fe92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	f023 0307 	bic.w	r3, r3, #7
 800fe9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	4a15      	ldr	r2, [pc, #84]	@ (800fef4 <prvHeapInit+0xb4>)
 800fea0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fea2:	4b14      	ldr	r3, [pc, #80]	@ (800fef4 <prvHeapInit+0xb4>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	2200      	movs	r2, #0
 800fea8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800feaa:	4b12      	ldr	r3, [pc, #72]	@ (800fef4 <prvHeapInit+0xb4>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	2200      	movs	r2, #0
 800feb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	1ad2      	subs	r2, r2, r3
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fec0:	4b0c      	ldr	r3, [pc, #48]	@ (800fef4 <prvHeapInit+0xb4>)
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	685b      	ldr	r3, [r3, #4]
 800fecc:	4a0a      	ldr	r2, [pc, #40]	@ (800fef8 <prvHeapInit+0xb8>)
 800fece:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	4a09      	ldr	r2, [pc, #36]	@ (800fefc <prvHeapInit+0xbc>)
 800fed6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fed8:	4b09      	ldr	r3, [pc, #36]	@ (800ff00 <prvHeapInit+0xc0>)
 800feda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fede:	601a      	str	r2, [r3, #0]
}
 800fee0:	bf00      	nop
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	20001218 	.word	0x20001218
 800fef0:	200040f8 	.word	0x200040f8
 800fef4:	20004100 	.word	0x20004100
 800fef8:	20004108 	.word	0x20004108
 800fefc:	20004104 	.word	0x20004104
 800ff00:	20004114 	.word	0x20004114

0800ff04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff04:	b480      	push	{r7}
 800ff06:	b085      	sub	sp, #20
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff0c:	4b28      	ldr	r3, [pc, #160]	@ (800ffb0 <prvInsertBlockIntoFreeList+0xac>)
 800ff0e:	60fb      	str	r3, [r7, #12]
 800ff10:	e002      	b.n	800ff18 <prvInsertBlockIntoFreeList+0x14>
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	60fb      	str	r3, [r7, #12]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d8f7      	bhi.n	800ff12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	68ba      	ldr	r2, [r7, #8]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d108      	bne.n	800ff46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	685a      	ldr	r2, [r3, #4]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	685b      	ldr	r3, [r3, #4]
 800ff3c:	441a      	add	r2, r3
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	68ba      	ldr	r2, [r7, #8]
 800ff50:	441a      	add	r2, r3
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d118      	bne.n	800ff8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	4b15      	ldr	r3, [pc, #84]	@ (800ffb4 <prvInsertBlockIntoFreeList+0xb0>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d00d      	beq.n	800ff82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	685a      	ldr	r2, [r3, #4]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	441a      	add	r2, r3
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	601a      	str	r2, [r3, #0]
 800ff80:	e008      	b.n	800ff94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff82:	4b0c      	ldr	r3, [pc, #48]	@ (800ffb4 <prvInsertBlockIntoFreeList+0xb0>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	601a      	str	r2, [r3, #0]
 800ff8a:	e003      	b.n	800ff94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff94:	68fa      	ldr	r2, [r7, #12]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d002      	beq.n	800ffa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffa2:	bf00      	nop
 800ffa4:	3714      	adds	r7, #20
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	200040f8 	.word	0x200040f8
 800ffb4:	20004100 	.word	0x20004100

0800ffb8 <sniprintf>:
 800ffb8:	b40c      	push	{r2, r3}
 800ffba:	b530      	push	{r4, r5, lr}
 800ffbc:	4b18      	ldr	r3, [pc, #96]	@ (8010020 <sniprintf+0x68>)
 800ffbe:	1e0c      	subs	r4, r1, #0
 800ffc0:	681d      	ldr	r5, [r3, #0]
 800ffc2:	b09d      	sub	sp, #116	@ 0x74
 800ffc4:	da08      	bge.n	800ffd8 <sniprintf+0x20>
 800ffc6:	238b      	movs	r3, #139	@ 0x8b
 800ffc8:	602b      	str	r3, [r5, #0]
 800ffca:	f04f 30ff 	mov.w	r0, #4294967295
 800ffce:	b01d      	add	sp, #116	@ 0x74
 800ffd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffd4:	b002      	add	sp, #8
 800ffd6:	4770      	bx	lr
 800ffd8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ffdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ffe0:	f04f 0300 	mov.w	r3, #0
 800ffe4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ffe6:	bf14      	ite	ne
 800ffe8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ffec:	4623      	moveq	r3, r4
 800ffee:	9304      	str	r3, [sp, #16]
 800fff0:	9307      	str	r3, [sp, #28]
 800fff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fff6:	9002      	str	r0, [sp, #8]
 800fff8:	9006      	str	r0, [sp, #24]
 800fffa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fffe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010000:	ab21      	add	r3, sp, #132	@ 0x84
 8010002:	a902      	add	r1, sp, #8
 8010004:	4628      	mov	r0, r5
 8010006:	9301      	str	r3, [sp, #4]
 8010008:	f000 fa00 	bl	801040c <_svfiprintf_r>
 801000c:	1c43      	adds	r3, r0, #1
 801000e:	bfbc      	itt	lt
 8010010:	238b      	movlt	r3, #139	@ 0x8b
 8010012:	602b      	strlt	r3, [r5, #0]
 8010014:	2c00      	cmp	r4, #0
 8010016:	d0da      	beq.n	800ffce <sniprintf+0x16>
 8010018:	9b02      	ldr	r3, [sp, #8]
 801001a:	2200      	movs	r2, #0
 801001c:	701a      	strb	r2, [r3, #0]
 801001e:	e7d6      	b.n	800ffce <sniprintf+0x16>
 8010020:	20000030 	.word	0x20000030

08010024 <memset>:
 8010024:	4402      	add	r2, r0
 8010026:	4603      	mov	r3, r0
 8010028:	4293      	cmp	r3, r2
 801002a:	d100      	bne.n	801002e <memset+0xa>
 801002c:	4770      	bx	lr
 801002e:	f803 1b01 	strb.w	r1, [r3], #1
 8010032:	e7f9      	b.n	8010028 <memset+0x4>

08010034 <_reclaim_reent>:
 8010034:	4b2d      	ldr	r3, [pc, #180]	@ (80100ec <_reclaim_reent+0xb8>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	4283      	cmp	r3, r0
 801003a:	b570      	push	{r4, r5, r6, lr}
 801003c:	4604      	mov	r4, r0
 801003e:	d053      	beq.n	80100e8 <_reclaim_reent+0xb4>
 8010040:	69c3      	ldr	r3, [r0, #28]
 8010042:	b31b      	cbz	r3, 801008c <_reclaim_reent+0x58>
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	b163      	cbz	r3, 8010062 <_reclaim_reent+0x2e>
 8010048:	2500      	movs	r5, #0
 801004a:	69e3      	ldr	r3, [r4, #28]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	5959      	ldr	r1, [r3, r5]
 8010050:	b9b1      	cbnz	r1, 8010080 <_reclaim_reent+0x4c>
 8010052:	3504      	adds	r5, #4
 8010054:	2d80      	cmp	r5, #128	@ 0x80
 8010056:	d1f8      	bne.n	801004a <_reclaim_reent+0x16>
 8010058:	69e3      	ldr	r3, [r4, #28]
 801005a:	4620      	mov	r0, r4
 801005c:	68d9      	ldr	r1, [r3, #12]
 801005e:	f000 f881 	bl	8010164 <_free_r>
 8010062:	69e3      	ldr	r3, [r4, #28]
 8010064:	6819      	ldr	r1, [r3, #0]
 8010066:	b111      	cbz	r1, 801006e <_reclaim_reent+0x3a>
 8010068:	4620      	mov	r0, r4
 801006a:	f000 f87b 	bl	8010164 <_free_r>
 801006e:	69e3      	ldr	r3, [r4, #28]
 8010070:	689d      	ldr	r5, [r3, #8]
 8010072:	b15d      	cbz	r5, 801008c <_reclaim_reent+0x58>
 8010074:	4629      	mov	r1, r5
 8010076:	4620      	mov	r0, r4
 8010078:	682d      	ldr	r5, [r5, #0]
 801007a:	f000 f873 	bl	8010164 <_free_r>
 801007e:	e7f8      	b.n	8010072 <_reclaim_reent+0x3e>
 8010080:	680e      	ldr	r6, [r1, #0]
 8010082:	4620      	mov	r0, r4
 8010084:	f000 f86e 	bl	8010164 <_free_r>
 8010088:	4631      	mov	r1, r6
 801008a:	e7e1      	b.n	8010050 <_reclaim_reent+0x1c>
 801008c:	6961      	ldr	r1, [r4, #20]
 801008e:	b111      	cbz	r1, 8010096 <_reclaim_reent+0x62>
 8010090:	4620      	mov	r0, r4
 8010092:	f000 f867 	bl	8010164 <_free_r>
 8010096:	69e1      	ldr	r1, [r4, #28]
 8010098:	b111      	cbz	r1, 80100a0 <_reclaim_reent+0x6c>
 801009a:	4620      	mov	r0, r4
 801009c:	f000 f862 	bl	8010164 <_free_r>
 80100a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80100a2:	b111      	cbz	r1, 80100aa <_reclaim_reent+0x76>
 80100a4:	4620      	mov	r0, r4
 80100a6:	f000 f85d 	bl	8010164 <_free_r>
 80100aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80100ac:	b111      	cbz	r1, 80100b4 <_reclaim_reent+0x80>
 80100ae:	4620      	mov	r0, r4
 80100b0:	f000 f858 	bl	8010164 <_free_r>
 80100b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80100b6:	b111      	cbz	r1, 80100be <_reclaim_reent+0x8a>
 80100b8:	4620      	mov	r0, r4
 80100ba:	f000 f853 	bl	8010164 <_free_r>
 80100be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80100c0:	b111      	cbz	r1, 80100c8 <_reclaim_reent+0x94>
 80100c2:	4620      	mov	r0, r4
 80100c4:	f000 f84e 	bl	8010164 <_free_r>
 80100c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80100ca:	b111      	cbz	r1, 80100d2 <_reclaim_reent+0x9e>
 80100cc:	4620      	mov	r0, r4
 80100ce:	f000 f849 	bl	8010164 <_free_r>
 80100d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80100d4:	b111      	cbz	r1, 80100dc <_reclaim_reent+0xa8>
 80100d6:	4620      	mov	r0, r4
 80100d8:	f000 f844 	bl	8010164 <_free_r>
 80100dc:	6a23      	ldr	r3, [r4, #32]
 80100de:	b11b      	cbz	r3, 80100e8 <_reclaim_reent+0xb4>
 80100e0:	4620      	mov	r0, r4
 80100e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80100e6:	4718      	bx	r3
 80100e8:	bd70      	pop	{r4, r5, r6, pc}
 80100ea:	bf00      	nop
 80100ec:	20000030 	.word	0x20000030

080100f0 <__errno>:
 80100f0:	4b01      	ldr	r3, [pc, #4]	@ (80100f8 <__errno+0x8>)
 80100f2:	6818      	ldr	r0, [r3, #0]
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	20000030 	.word	0x20000030

080100fc <__libc_init_array>:
 80100fc:	b570      	push	{r4, r5, r6, lr}
 80100fe:	4d0d      	ldr	r5, [pc, #52]	@ (8010134 <__libc_init_array+0x38>)
 8010100:	4c0d      	ldr	r4, [pc, #52]	@ (8010138 <__libc_init_array+0x3c>)
 8010102:	1b64      	subs	r4, r4, r5
 8010104:	10a4      	asrs	r4, r4, #2
 8010106:	2600      	movs	r6, #0
 8010108:	42a6      	cmp	r6, r4
 801010a:	d109      	bne.n	8010120 <__libc_init_array+0x24>
 801010c:	4d0b      	ldr	r5, [pc, #44]	@ (801013c <__libc_init_array+0x40>)
 801010e:	4c0c      	ldr	r4, [pc, #48]	@ (8010140 <__libc_init_array+0x44>)
 8010110:	f001 f82c 	bl	801116c <_init>
 8010114:	1b64      	subs	r4, r4, r5
 8010116:	10a4      	asrs	r4, r4, #2
 8010118:	2600      	movs	r6, #0
 801011a:	42a6      	cmp	r6, r4
 801011c:	d105      	bne.n	801012a <__libc_init_array+0x2e>
 801011e:	bd70      	pop	{r4, r5, r6, pc}
 8010120:	f855 3b04 	ldr.w	r3, [r5], #4
 8010124:	4798      	blx	r3
 8010126:	3601      	adds	r6, #1
 8010128:	e7ee      	b.n	8010108 <__libc_init_array+0xc>
 801012a:	f855 3b04 	ldr.w	r3, [r5], #4
 801012e:	4798      	blx	r3
 8010130:	3601      	adds	r6, #1
 8010132:	e7f2      	b.n	801011a <__libc_init_array+0x1e>
 8010134:	08011470 	.word	0x08011470
 8010138:	08011470 	.word	0x08011470
 801013c:	08011470 	.word	0x08011470
 8010140:	08011474 	.word	0x08011474

08010144 <__retarget_lock_acquire_recursive>:
 8010144:	4770      	bx	lr

08010146 <__retarget_lock_release_recursive>:
 8010146:	4770      	bx	lr

08010148 <memcpy>:
 8010148:	440a      	add	r2, r1
 801014a:	4291      	cmp	r1, r2
 801014c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010150:	d100      	bne.n	8010154 <memcpy+0xc>
 8010152:	4770      	bx	lr
 8010154:	b510      	push	{r4, lr}
 8010156:	f811 4b01 	ldrb.w	r4, [r1], #1
 801015a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801015e:	4291      	cmp	r1, r2
 8010160:	d1f9      	bne.n	8010156 <memcpy+0xe>
 8010162:	bd10      	pop	{r4, pc}

08010164 <_free_r>:
 8010164:	b538      	push	{r3, r4, r5, lr}
 8010166:	4605      	mov	r5, r0
 8010168:	2900      	cmp	r1, #0
 801016a:	d041      	beq.n	80101f0 <_free_r+0x8c>
 801016c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010170:	1f0c      	subs	r4, r1, #4
 8010172:	2b00      	cmp	r3, #0
 8010174:	bfb8      	it	lt
 8010176:	18e4      	addlt	r4, r4, r3
 8010178:	f000 f8e0 	bl	801033c <__malloc_lock>
 801017c:	4a1d      	ldr	r2, [pc, #116]	@ (80101f4 <_free_r+0x90>)
 801017e:	6813      	ldr	r3, [r2, #0]
 8010180:	b933      	cbnz	r3, 8010190 <_free_r+0x2c>
 8010182:	6063      	str	r3, [r4, #4]
 8010184:	6014      	str	r4, [r2, #0]
 8010186:	4628      	mov	r0, r5
 8010188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801018c:	f000 b8dc 	b.w	8010348 <__malloc_unlock>
 8010190:	42a3      	cmp	r3, r4
 8010192:	d908      	bls.n	80101a6 <_free_r+0x42>
 8010194:	6820      	ldr	r0, [r4, #0]
 8010196:	1821      	adds	r1, r4, r0
 8010198:	428b      	cmp	r3, r1
 801019a:	bf01      	itttt	eq
 801019c:	6819      	ldreq	r1, [r3, #0]
 801019e:	685b      	ldreq	r3, [r3, #4]
 80101a0:	1809      	addeq	r1, r1, r0
 80101a2:	6021      	streq	r1, [r4, #0]
 80101a4:	e7ed      	b.n	8010182 <_free_r+0x1e>
 80101a6:	461a      	mov	r2, r3
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	b10b      	cbz	r3, 80101b0 <_free_r+0x4c>
 80101ac:	42a3      	cmp	r3, r4
 80101ae:	d9fa      	bls.n	80101a6 <_free_r+0x42>
 80101b0:	6811      	ldr	r1, [r2, #0]
 80101b2:	1850      	adds	r0, r2, r1
 80101b4:	42a0      	cmp	r0, r4
 80101b6:	d10b      	bne.n	80101d0 <_free_r+0x6c>
 80101b8:	6820      	ldr	r0, [r4, #0]
 80101ba:	4401      	add	r1, r0
 80101bc:	1850      	adds	r0, r2, r1
 80101be:	4283      	cmp	r3, r0
 80101c0:	6011      	str	r1, [r2, #0]
 80101c2:	d1e0      	bne.n	8010186 <_free_r+0x22>
 80101c4:	6818      	ldr	r0, [r3, #0]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	6053      	str	r3, [r2, #4]
 80101ca:	4408      	add	r0, r1
 80101cc:	6010      	str	r0, [r2, #0]
 80101ce:	e7da      	b.n	8010186 <_free_r+0x22>
 80101d0:	d902      	bls.n	80101d8 <_free_r+0x74>
 80101d2:	230c      	movs	r3, #12
 80101d4:	602b      	str	r3, [r5, #0]
 80101d6:	e7d6      	b.n	8010186 <_free_r+0x22>
 80101d8:	6820      	ldr	r0, [r4, #0]
 80101da:	1821      	adds	r1, r4, r0
 80101dc:	428b      	cmp	r3, r1
 80101de:	bf04      	itt	eq
 80101e0:	6819      	ldreq	r1, [r3, #0]
 80101e2:	685b      	ldreq	r3, [r3, #4]
 80101e4:	6063      	str	r3, [r4, #4]
 80101e6:	bf04      	itt	eq
 80101e8:	1809      	addeq	r1, r1, r0
 80101ea:	6021      	streq	r1, [r4, #0]
 80101ec:	6054      	str	r4, [r2, #4]
 80101ee:	e7ca      	b.n	8010186 <_free_r+0x22>
 80101f0:	bd38      	pop	{r3, r4, r5, pc}
 80101f2:	bf00      	nop
 80101f4:	2000425c 	.word	0x2000425c

080101f8 <sbrk_aligned>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	4e0f      	ldr	r6, [pc, #60]	@ (8010238 <sbrk_aligned+0x40>)
 80101fc:	460c      	mov	r4, r1
 80101fe:	6831      	ldr	r1, [r6, #0]
 8010200:	4605      	mov	r5, r0
 8010202:	b911      	cbnz	r1, 801020a <sbrk_aligned+0x12>
 8010204:	f000 fba4 	bl	8010950 <_sbrk_r>
 8010208:	6030      	str	r0, [r6, #0]
 801020a:	4621      	mov	r1, r4
 801020c:	4628      	mov	r0, r5
 801020e:	f000 fb9f 	bl	8010950 <_sbrk_r>
 8010212:	1c43      	adds	r3, r0, #1
 8010214:	d103      	bne.n	801021e <sbrk_aligned+0x26>
 8010216:	f04f 34ff 	mov.w	r4, #4294967295
 801021a:	4620      	mov	r0, r4
 801021c:	bd70      	pop	{r4, r5, r6, pc}
 801021e:	1cc4      	adds	r4, r0, #3
 8010220:	f024 0403 	bic.w	r4, r4, #3
 8010224:	42a0      	cmp	r0, r4
 8010226:	d0f8      	beq.n	801021a <sbrk_aligned+0x22>
 8010228:	1a21      	subs	r1, r4, r0
 801022a:	4628      	mov	r0, r5
 801022c:	f000 fb90 	bl	8010950 <_sbrk_r>
 8010230:	3001      	adds	r0, #1
 8010232:	d1f2      	bne.n	801021a <sbrk_aligned+0x22>
 8010234:	e7ef      	b.n	8010216 <sbrk_aligned+0x1e>
 8010236:	bf00      	nop
 8010238:	20004258 	.word	0x20004258

0801023c <_malloc_r>:
 801023c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010240:	1ccd      	adds	r5, r1, #3
 8010242:	f025 0503 	bic.w	r5, r5, #3
 8010246:	3508      	adds	r5, #8
 8010248:	2d0c      	cmp	r5, #12
 801024a:	bf38      	it	cc
 801024c:	250c      	movcc	r5, #12
 801024e:	2d00      	cmp	r5, #0
 8010250:	4606      	mov	r6, r0
 8010252:	db01      	blt.n	8010258 <_malloc_r+0x1c>
 8010254:	42a9      	cmp	r1, r5
 8010256:	d904      	bls.n	8010262 <_malloc_r+0x26>
 8010258:	230c      	movs	r3, #12
 801025a:	6033      	str	r3, [r6, #0]
 801025c:	2000      	movs	r0, #0
 801025e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010338 <_malloc_r+0xfc>
 8010266:	f000 f869 	bl	801033c <__malloc_lock>
 801026a:	f8d8 3000 	ldr.w	r3, [r8]
 801026e:	461c      	mov	r4, r3
 8010270:	bb44      	cbnz	r4, 80102c4 <_malloc_r+0x88>
 8010272:	4629      	mov	r1, r5
 8010274:	4630      	mov	r0, r6
 8010276:	f7ff ffbf 	bl	80101f8 <sbrk_aligned>
 801027a:	1c43      	adds	r3, r0, #1
 801027c:	4604      	mov	r4, r0
 801027e:	d158      	bne.n	8010332 <_malloc_r+0xf6>
 8010280:	f8d8 4000 	ldr.w	r4, [r8]
 8010284:	4627      	mov	r7, r4
 8010286:	2f00      	cmp	r7, #0
 8010288:	d143      	bne.n	8010312 <_malloc_r+0xd6>
 801028a:	2c00      	cmp	r4, #0
 801028c:	d04b      	beq.n	8010326 <_malloc_r+0xea>
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	4639      	mov	r1, r7
 8010292:	4630      	mov	r0, r6
 8010294:	eb04 0903 	add.w	r9, r4, r3
 8010298:	f000 fb5a 	bl	8010950 <_sbrk_r>
 801029c:	4581      	cmp	r9, r0
 801029e:	d142      	bne.n	8010326 <_malloc_r+0xea>
 80102a0:	6821      	ldr	r1, [r4, #0]
 80102a2:	1a6d      	subs	r5, r5, r1
 80102a4:	4629      	mov	r1, r5
 80102a6:	4630      	mov	r0, r6
 80102a8:	f7ff ffa6 	bl	80101f8 <sbrk_aligned>
 80102ac:	3001      	adds	r0, #1
 80102ae:	d03a      	beq.n	8010326 <_malloc_r+0xea>
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	442b      	add	r3, r5
 80102b4:	6023      	str	r3, [r4, #0]
 80102b6:	f8d8 3000 	ldr.w	r3, [r8]
 80102ba:	685a      	ldr	r2, [r3, #4]
 80102bc:	bb62      	cbnz	r2, 8010318 <_malloc_r+0xdc>
 80102be:	f8c8 7000 	str.w	r7, [r8]
 80102c2:	e00f      	b.n	80102e4 <_malloc_r+0xa8>
 80102c4:	6822      	ldr	r2, [r4, #0]
 80102c6:	1b52      	subs	r2, r2, r5
 80102c8:	d420      	bmi.n	801030c <_malloc_r+0xd0>
 80102ca:	2a0b      	cmp	r2, #11
 80102cc:	d917      	bls.n	80102fe <_malloc_r+0xc2>
 80102ce:	1961      	adds	r1, r4, r5
 80102d0:	42a3      	cmp	r3, r4
 80102d2:	6025      	str	r5, [r4, #0]
 80102d4:	bf18      	it	ne
 80102d6:	6059      	strne	r1, [r3, #4]
 80102d8:	6863      	ldr	r3, [r4, #4]
 80102da:	bf08      	it	eq
 80102dc:	f8c8 1000 	streq.w	r1, [r8]
 80102e0:	5162      	str	r2, [r4, r5]
 80102e2:	604b      	str	r3, [r1, #4]
 80102e4:	4630      	mov	r0, r6
 80102e6:	f000 f82f 	bl	8010348 <__malloc_unlock>
 80102ea:	f104 000b 	add.w	r0, r4, #11
 80102ee:	1d23      	adds	r3, r4, #4
 80102f0:	f020 0007 	bic.w	r0, r0, #7
 80102f4:	1ac2      	subs	r2, r0, r3
 80102f6:	bf1c      	itt	ne
 80102f8:	1a1b      	subne	r3, r3, r0
 80102fa:	50a3      	strne	r3, [r4, r2]
 80102fc:	e7af      	b.n	801025e <_malloc_r+0x22>
 80102fe:	6862      	ldr	r2, [r4, #4]
 8010300:	42a3      	cmp	r3, r4
 8010302:	bf0c      	ite	eq
 8010304:	f8c8 2000 	streq.w	r2, [r8]
 8010308:	605a      	strne	r2, [r3, #4]
 801030a:	e7eb      	b.n	80102e4 <_malloc_r+0xa8>
 801030c:	4623      	mov	r3, r4
 801030e:	6864      	ldr	r4, [r4, #4]
 8010310:	e7ae      	b.n	8010270 <_malloc_r+0x34>
 8010312:	463c      	mov	r4, r7
 8010314:	687f      	ldr	r7, [r7, #4]
 8010316:	e7b6      	b.n	8010286 <_malloc_r+0x4a>
 8010318:	461a      	mov	r2, r3
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	42a3      	cmp	r3, r4
 801031e:	d1fb      	bne.n	8010318 <_malloc_r+0xdc>
 8010320:	2300      	movs	r3, #0
 8010322:	6053      	str	r3, [r2, #4]
 8010324:	e7de      	b.n	80102e4 <_malloc_r+0xa8>
 8010326:	230c      	movs	r3, #12
 8010328:	6033      	str	r3, [r6, #0]
 801032a:	4630      	mov	r0, r6
 801032c:	f000 f80c 	bl	8010348 <__malloc_unlock>
 8010330:	e794      	b.n	801025c <_malloc_r+0x20>
 8010332:	6005      	str	r5, [r0, #0]
 8010334:	e7d6      	b.n	80102e4 <_malloc_r+0xa8>
 8010336:	bf00      	nop
 8010338:	2000425c 	.word	0x2000425c

0801033c <__malloc_lock>:
 801033c:	4801      	ldr	r0, [pc, #4]	@ (8010344 <__malloc_lock+0x8>)
 801033e:	f7ff bf01 	b.w	8010144 <__retarget_lock_acquire_recursive>
 8010342:	bf00      	nop
 8010344:	20004254 	.word	0x20004254

08010348 <__malloc_unlock>:
 8010348:	4801      	ldr	r0, [pc, #4]	@ (8010350 <__malloc_unlock+0x8>)
 801034a:	f7ff befc 	b.w	8010146 <__retarget_lock_release_recursive>
 801034e:	bf00      	nop
 8010350:	20004254 	.word	0x20004254

08010354 <__ssputs_r>:
 8010354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010358:	688e      	ldr	r6, [r1, #8]
 801035a:	461f      	mov	r7, r3
 801035c:	42be      	cmp	r6, r7
 801035e:	680b      	ldr	r3, [r1, #0]
 8010360:	4682      	mov	sl, r0
 8010362:	460c      	mov	r4, r1
 8010364:	4690      	mov	r8, r2
 8010366:	d82d      	bhi.n	80103c4 <__ssputs_r+0x70>
 8010368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801036c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010370:	d026      	beq.n	80103c0 <__ssputs_r+0x6c>
 8010372:	6965      	ldr	r5, [r4, #20]
 8010374:	6909      	ldr	r1, [r1, #16]
 8010376:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801037a:	eba3 0901 	sub.w	r9, r3, r1
 801037e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010382:	1c7b      	adds	r3, r7, #1
 8010384:	444b      	add	r3, r9
 8010386:	106d      	asrs	r5, r5, #1
 8010388:	429d      	cmp	r5, r3
 801038a:	bf38      	it	cc
 801038c:	461d      	movcc	r5, r3
 801038e:	0553      	lsls	r3, r2, #21
 8010390:	d527      	bpl.n	80103e2 <__ssputs_r+0x8e>
 8010392:	4629      	mov	r1, r5
 8010394:	f7ff ff52 	bl	801023c <_malloc_r>
 8010398:	4606      	mov	r6, r0
 801039a:	b360      	cbz	r0, 80103f6 <__ssputs_r+0xa2>
 801039c:	6921      	ldr	r1, [r4, #16]
 801039e:	464a      	mov	r2, r9
 80103a0:	f7ff fed2 	bl	8010148 <memcpy>
 80103a4:	89a3      	ldrh	r3, [r4, #12]
 80103a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80103aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103ae:	81a3      	strh	r3, [r4, #12]
 80103b0:	6126      	str	r6, [r4, #16]
 80103b2:	6165      	str	r5, [r4, #20]
 80103b4:	444e      	add	r6, r9
 80103b6:	eba5 0509 	sub.w	r5, r5, r9
 80103ba:	6026      	str	r6, [r4, #0]
 80103bc:	60a5      	str	r5, [r4, #8]
 80103be:	463e      	mov	r6, r7
 80103c0:	42be      	cmp	r6, r7
 80103c2:	d900      	bls.n	80103c6 <__ssputs_r+0x72>
 80103c4:	463e      	mov	r6, r7
 80103c6:	6820      	ldr	r0, [r4, #0]
 80103c8:	4632      	mov	r2, r6
 80103ca:	4641      	mov	r1, r8
 80103cc:	f000 faa6 	bl	801091c <memmove>
 80103d0:	68a3      	ldr	r3, [r4, #8]
 80103d2:	1b9b      	subs	r3, r3, r6
 80103d4:	60a3      	str	r3, [r4, #8]
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	4433      	add	r3, r6
 80103da:	6023      	str	r3, [r4, #0]
 80103dc:	2000      	movs	r0, #0
 80103de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103e2:	462a      	mov	r2, r5
 80103e4:	f000 fac4 	bl	8010970 <_realloc_r>
 80103e8:	4606      	mov	r6, r0
 80103ea:	2800      	cmp	r0, #0
 80103ec:	d1e0      	bne.n	80103b0 <__ssputs_r+0x5c>
 80103ee:	6921      	ldr	r1, [r4, #16]
 80103f0:	4650      	mov	r0, sl
 80103f2:	f7ff feb7 	bl	8010164 <_free_r>
 80103f6:	230c      	movs	r3, #12
 80103f8:	f8ca 3000 	str.w	r3, [sl]
 80103fc:	89a3      	ldrh	r3, [r4, #12]
 80103fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010402:	81a3      	strh	r3, [r4, #12]
 8010404:	f04f 30ff 	mov.w	r0, #4294967295
 8010408:	e7e9      	b.n	80103de <__ssputs_r+0x8a>
	...

0801040c <_svfiprintf_r>:
 801040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010410:	4698      	mov	r8, r3
 8010412:	898b      	ldrh	r3, [r1, #12]
 8010414:	061b      	lsls	r3, r3, #24
 8010416:	b09d      	sub	sp, #116	@ 0x74
 8010418:	4607      	mov	r7, r0
 801041a:	460d      	mov	r5, r1
 801041c:	4614      	mov	r4, r2
 801041e:	d510      	bpl.n	8010442 <_svfiprintf_r+0x36>
 8010420:	690b      	ldr	r3, [r1, #16]
 8010422:	b973      	cbnz	r3, 8010442 <_svfiprintf_r+0x36>
 8010424:	2140      	movs	r1, #64	@ 0x40
 8010426:	f7ff ff09 	bl	801023c <_malloc_r>
 801042a:	6028      	str	r0, [r5, #0]
 801042c:	6128      	str	r0, [r5, #16]
 801042e:	b930      	cbnz	r0, 801043e <_svfiprintf_r+0x32>
 8010430:	230c      	movs	r3, #12
 8010432:	603b      	str	r3, [r7, #0]
 8010434:	f04f 30ff 	mov.w	r0, #4294967295
 8010438:	b01d      	add	sp, #116	@ 0x74
 801043a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801043e:	2340      	movs	r3, #64	@ 0x40
 8010440:	616b      	str	r3, [r5, #20]
 8010442:	2300      	movs	r3, #0
 8010444:	9309      	str	r3, [sp, #36]	@ 0x24
 8010446:	2320      	movs	r3, #32
 8010448:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801044c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010450:	2330      	movs	r3, #48	@ 0x30
 8010452:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80105f0 <_svfiprintf_r+0x1e4>
 8010456:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801045a:	f04f 0901 	mov.w	r9, #1
 801045e:	4623      	mov	r3, r4
 8010460:	469a      	mov	sl, r3
 8010462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010466:	b10a      	cbz	r2, 801046c <_svfiprintf_r+0x60>
 8010468:	2a25      	cmp	r2, #37	@ 0x25
 801046a:	d1f9      	bne.n	8010460 <_svfiprintf_r+0x54>
 801046c:	ebba 0b04 	subs.w	fp, sl, r4
 8010470:	d00b      	beq.n	801048a <_svfiprintf_r+0x7e>
 8010472:	465b      	mov	r3, fp
 8010474:	4622      	mov	r2, r4
 8010476:	4629      	mov	r1, r5
 8010478:	4638      	mov	r0, r7
 801047a:	f7ff ff6b 	bl	8010354 <__ssputs_r>
 801047e:	3001      	adds	r0, #1
 8010480:	f000 80a7 	beq.w	80105d2 <_svfiprintf_r+0x1c6>
 8010484:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010486:	445a      	add	r2, fp
 8010488:	9209      	str	r2, [sp, #36]	@ 0x24
 801048a:	f89a 3000 	ldrb.w	r3, [sl]
 801048e:	2b00      	cmp	r3, #0
 8010490:	f000 809f 	beq.w	80105d2 <_svfiprintf_r+0x1c6>
 8010494:	2300      	movs	r3, #0
 8010496:	f04f 32ff 	mov.w	r2, #4294967295
 801049a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801049e:	f10a 0a01 	add.w	sl, sl, #1
 80104a2:	9304      	str	r3, [sp, #16]
 80104a4:	9307      	str	r3, [sp, #28]
 80104a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80104ac:	4654      	mov	r4, sl
 80104ae:	2205      	movs	r2, #5
 80104b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104b4:	484e      	ldr	r0, [pc, #312]	@ (80105f0 <_svfiprintf_r+0x1e4>)
 80104b6:	f7ef feb3 	bl	8000220 <memchr>
 80104ba:	9a04      	ldr	r2, [sp, #16]
 80104bc:	b9d8      	cbnz	r0, 80104f6 <_svfiprintf_r+0xea>
 80104be:	06d0      	lsls	r0, r2, #27
 80104c0:	bf44      	itt	mi
 80104c2:	2320      	movmi	r3, #32
 80104c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104c8:	0711      	lsls	r1, r2, #28
 80104ca:	bf44      	itt	mi
 80104cc:	232b      	movmi	r3, #43	@ 0x2b
 80104ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104d2:	f89a 3000 	ldrb.w	r3, [sl]
 80104d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80104d8:	d015      	beq.n	8010506 <_svfiprintf_r+0xfa>
 80104da:	9a07      	ldr	r2, [sp, #28]
 80104dc:	4654      	mov	r4, sl
 80104de:	2000      	movs	r0, #0
 80104e0:	f04f 0c0a 	mov.w	ip, #10
 80104e4:	4621      	mov	r1, r4
 80104e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104ea:	3b30      	subs	r3, #48	@ 0x30
 80104ec:	2b09      	cmp	r3, #9
 80104ee:	d94b      	bls.n	8010588 <_svfiprintf_r+0x17c>
 80104f0:	b1b0      	cbz	r0, 8010520 <_svfiprintf_r+0x114>
 80104f2:	9207      	str	r2, [sp, #28]
 80104f4:	e014      	b.n	8010520 <_svfiprintf_r+0x114>
 80104f6:	eba0 0308 	sub.w	r3, r0, r8
 80104fa:	fa09 f303 	lsl.w	r3, r9, r3
 80104fe:	4313      	orrs	r3, r2
 8010500:	9304      	str	r3, [sp, #16]
 8010502:	46a2      	mov	sl, r4
 8010504:	e7d2      	b.n	80104ac <_svfiprintf_r+0xa0>
 8010506:	9b03      	ldr	r3, [sp, #12]
 8010508:	1d19      	adds	r1, r3, #4
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	9103      	str	r1, [sp, #12]
 801050e:	2b00      	cmp	r3, #0
 8010510:	bfbb      	ittet	lt
 8010512:	425b      	neglt	r3, r3
 8010514:	f042 0202 	orrlt.w	r2, r2, #2
 8010518:	9307      	strge	r3, [sp, #28]
 801051a:	9307      	strlt	r3, [sp, #28]
 801051c:	bfb8      	it	lt
 801051e:	9204      	strlt	r2, [sp, #16]
 8010520:	7823      	ldrb	r3, [r4, #0]
 8010522:	2b2e      	cmp	r3, #46	@ 0x2e
 8010524:	d10a      	bne.n	801053c <_svfiprintf_r+0x130>
 8010526:	7863      	ldrb	r3, [r4, #1]
 8010528:	2b2a      	cmp	r3, #42	@ 0x2a
 801052a:	d132      	bne.n	8010592 <_svfiprintf_r+0x186>
 801052c:	9b03      	ldr	r3, [sp, #12]
 801052e:	1d1a      	adds	r2, r3, #4
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	9203      	str	r2, [sp, #12]
 8010534:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010538:	3402      	adds	r4, #2
 801053a:	9305      	str	r3, [sp, #20]
 801053c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010600 <_svfiprintf_r+0x1f4>
 8010540:	7821      	ldrb	r1, [r4, #0]
 8010542:	2203      	movs	r2, #3
 8010544:	4650      	mov	r0, sl
 8010546:	f7ef fe6b 	bl	8000220 <memchr>
 801054a:	b138      	cbz	r0, 801055c <_svfiprintf_r+0x150>
 801054c:	9b04      	ldr	r3, [sp, #16]
 801054e:	eba0 000a 	sub.w	r0, r0, sl
 8010552:	2240      	movs	r2, #64	@ 0x40
 8010554:	4082      	lsls	r2, r0
 8010556:	4313      	orrs	r3, r2
 8010558:	3401      	adds	r4, #1
 801055a:	9304      	str	r3, [sp, #16]
 801055c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010560:	4824      	ldr	r0, [pc, #144]	@ (80105f4 <_svfiprintf_r+0x1e8>)
 8010562:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010566:	2206      	movs	r2, #6
 8010568:	f7ef fe5a 	bl	8000220 <memchr>
 801056c:	2800      	cmp	r0, #0
 801056e:	d036      	beq.n	80105de <_svfiprintf_r+0x1d2>
 8010570:	4b21      	ldr	r3, [pc, #132]	@ (80105f8 <_svfiprintf_r+0x1ec>)
 8010572:	bb1b      	cbnz	r3, 80105bc <_svfiprintf_r+0x1b0>
 8010574:	9b03      	ldr	r3, [sp, #12]
 8010576:	3307      	adds	r3, #7
 8010578:	f023 0307 	bic.w	r3, r3, #7
 801057c:	3308      	adds	r3, #8
 801057e:	9303      	str	r3, [sp, #12]
 8010580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010582:	4433      	add	r3, r6
 8010584:	9309      	str	r3, [sp, #36]	@ 0x24
 8010586:	e76a      	b.n	801045e <_svfiprintf_r+0x52>
 8010588:	fb0c 3202 	mla	r2, ip, r2, r3
 801058c:	460c      	mov	r4, r1
 801058e:	2001      	movs	r0, #1
 8010590:	e7a8      	b.n	80104e4 <_svfiprintf_r+0xd8>
 8010592:	2300      	movs	r3, #0
 8010594:	3401      	adds	r4, #1
 8010596:	9305      	str	r3, [sp, #20]
 8010598:	4619      	mov	r1, r3
 801059a:	f04f 0c0a 	mov.w	ip, #10
 801059e:	4620      	mov	r0, r4
 80105a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105a4:	3a30      	subs	r2, #48	@ 0x30
 80105a6:	2a09      	cmp	r2, #9
 80105a8:	d903      	bls.n	80105b2 <_svfiprintf_r+0x1a6>
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d0c6      	beq.n	801053c <_svfiprintf_r+0x130>
 80105ae:	9105      	str	r1, [sp, #20]
 80105b0:	e7c4      	b.n	801053c <_svfiprintf_r+0x130>
 80105b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80105b6:	4604      	mov	r4, r0
 80105b8:	2301      	movs	r3, #1
 80105ba:	e7f0      	b.n	801059e <_svfiprintf_r+0x192>
 80105bc:	ab03      	add	r3, sp, #12
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	462a      	mov	r2, r5
 80105c2:	4b0e      	ldr	r3, [pc, #56]	@ (80105fc <_svfiprintf_r+0x1f0>)
 80105c4:	a904      	add	r1, sp, #16
 80105c6:	4638      	mov	r0, r7
 80105c8:	f3af 8000 	nop.w
 80105cc:	1c42      	adds	r2, r0, #1
 80105ce:	4606      	mov	r6, r0
 80105d0:	d1d6      	bne.n	8010580 <_svfiprintf_r+0x174>
 80105d2:	89ab      	ldrh	r3, [r5, #12]
 80105d4:	065b      	lsls	r3, r3, #25
 80105d6:	f53f af2d 	bmi.w	8010434 <_svfiprintf_r+0x28>
 80105da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105dc:	e72c      	b.n	8010438 <_svfiprintf_r+0x2c>
 80105de:	ab03      	add	r3, sp, #12
 80105e0:	9300      	str	r3, [sp, #0]
 80105e2:	462a      	mov	r2, r5
 80105e4:	4b05      	ldr	r3, [pc, #20]	@ (80105fc <_svfiprintf_r+0x1f0>)
 80105e6:	a904      	add	r1, sp, #16
 80105e8:	4638      	mov	r0, r7
 80105ea:	f000 f879 	bl	80106e0 <_printf_i>
 80105ee:	e7ed      	b.n	80105cc <_svfiprintf_r+0x1c0>
 80105f0:	0801141c 	.word	0x0801141c
 80105f4:	08011426 	.word	0x08011426
 80105f8:	00000000 	.word	0x00000000
 80105fc:	08010355 	.word	0x08010355
 8010600:	08011422 	.word	0x08011422

08010604 <_printf_common>:
 8010604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010608:	4616      	mov	r6, r2
 801060a:	4698      	mov	r8, r3
 801060c:	688a      	ldr	r2, [r1, #8]
 801060e:	690b      	ldr	r3, [r1, #16]
 8010610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010614:	4293      	cmp	r3, r2
 8010616:	bfb8      	it	lt
 8010618:	4613      	movlt	r3, r2
 801061a:	6033      	str	r3, [r6, #0]
 801061c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010620:	4607      	mov	r7, r0
 8010622:	460c      	mov	r4, r1
 8010624:	b10a      	cbz	r2, 801062a <_printf_common+0x26>
 8010626:	3301      	adds	r3, #1
 8010628:	6033      	str	r3, [r6, #0]
 801062a:	6823      	ldr	r3, [r4, #0]
 801062c:	0699      	lsls	r1, r3, #26
 801062e:	bf42      	ittt	mi
 8010630:	6833      	ldrmi	r3, [r6, #0]
 8010632:	3302      	addmi	r3, #2
 8010634:	6033      	strmi	r3, [r6, #0]
 8010636:	6825      	ldr	r5, [r4, #0]
 8010638:	f015 0506 	ands.w	r5, r5, #6
 801063c:	d106      	bne.n	801064c <_printf_common+0x48>
 801063e:	f104 0a19 	add.w	sl, r4, #25
 8010642:	68e3      	ldr	r3, [r4, #12]
 8010644:	6832      	ldr	r2, [r6, #0]
 8010646:	1a9b      	subs	r3, r3, r2
 8010648:	42ab      	cmp	r3, r5
 801064a:	dc26      	bgt.n	801069a <_printf_common+0x96>
 801064c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010650:	6822      	ldr	r2, [r4, #0]
 8010652:	3b00      	subs	r3, #0
 8010654:	bf18      	it	ne
 8010656:	2301      	movne	r3, #1
 8010658:	0692      	lsls	r2, r2, #26
 801065a:	d42b      	bmi.n	80106b4 <_printf_common+0xb0>
 801065c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010660:	4641      	mov	r1, r8
 8010662:	4638      	mov	r0, r7
 8010664:	47c8      	blx	r9
 8010666:	3001      	adds	r0, #1
 8010668:	d01e      	beq.n	80106a8 <_printf_common+0xa4>
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	6922      	ldr	r2, [r4, #16]
 801066e:	f003 0306 	and.w	r3, r3, #6
 8010672:	2b04      	cmp	r3, #4
 8010674:	bf02      	ittt	eq
 8010676:	68e5      	ldreq	r5, [r4, #12]
 8010678:	6833      	ldreq	r3, [r6, #0]
 801067a:	1aed      	subeq	r5, r5, r3
 801067c:	68a3      	ldr	r3, [r4, #8]
 801067e:	bf0c      	ite	eq
 8010680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010684:	2500      	movne	r5, #0
 8010686:	4293      	cmp	r3, r2
 8010688:	bfc4      	itt	gt
 801068a:	1a9b      	subgt	r3, r3, r2
 801068c:	18ed      	addgt	r5, r5, r3
 801068e:	2600      	movs	r6, #0
 8010690:	341a      	adds	r4, #26
 8010692:	42b5      	cmp	r5, r6
 8010694:	d11a      	bne.n	80106cc <_printf_common+0xc8>
 8010696:	2000      	movs	r0, #0
 8010698:	e008      	b.n	80106ac <_printf_common+0xa8>
 801069a:	2301      	movs	r3, #1
 801069c:	4652      	mov	r2, sl
 801069e:	4641      	mov	r1, r8
 80106a0:	4638      	mov	r0, r7
 80106a2:	47c8      	blx	r9
 80106a4:	3001      	adds	r0, #1
 80106a6:	d103      	bne.n	80106b0 <_printf_common+0xac>
 80106a8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106b0:	3501      	adds	r5, #1
 80106b2:	e7c6      	b.n	8010642 <_printf_common+0x3e>
 80106b4:	18e1      	adds	r1, r4, r3
 80106b6:	1c5a      	adds	r2, r3, #1
 80106b8:	2030      	movs	r0, #48	@ 0x30
 80106ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80106be:	4422      	add	r2, r4
 80106c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80106c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80106c8:	3302      	adds	r3, #2
 80106ca:	e7c7      	b.n	801065c <_printf_common+0x58>
 80106cc:	2301      	movs	r3, #1
 80106ce:	4622      	mov	r2, r4
 80106d0:	4641      	mov	r1, r8
 80106d2:	4638      	mov	r0, r7
 80106d4:	47c8      	blx	r9
 80106d6:	3001      	adds	r0, #1
 80106d8:	d0e6      	beq.n	80106a8 <_printf_common+0xa4>
 80106da:	3601      	adds	r6, #1
 80106dc:	e7d9      	b.n	8010692 <_printf_common+0x8e>
	...

080106e0 <_printf_i>:
 80106e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106e4:	7e0f      	ldrb	r7, [r1, #24]
 80106e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80106e8:	2f78      	cmp	r7, #120	@ 0x78
 80106ea:	4691      	mov	r9, r2
 80106ec:	4680      	mov	r8, r0
 80106ee:	460c      	mov	r4, r1
 80106f0:	469a      	mov	sl, r3
 80106f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80106f6:	d807      	bhi.n	8010708 <_printf_i+0x28>
 80106f8:	2f62      	cmp	r7, #98	@ 0x62
 80106fa:	d80a      	bhi.n	8010712 <_printf_i+0x32>
 80106fc:	2f00      	cmp	r7, #0
 80106fe:	f000 80d1 	beq.w	80108a4 <_printf_i+0x1c4>
 8010702:	2f58      	cmp	r7, #88	@ 0x58
 8010704:	f000 80b8 	beq.w	8010878 <_printf_i+0x198>
 8010708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801070c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010710:	e03a      	b.n	8010788 <_printf_i+0xa8>
 8010712:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010716:	2b15      	cmp	r3, #21
 8010718:	d8f6      	bhi.n	8010708 <_printf_i+0x28>
 801071a:	a101      	add	r1, pc, #4	@ (adr r1, 8010720 <_printf_i+0x40>)
 801071c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010720:	08010779 	.word	0x08010779
 8010724:	0801078d 	.word	0x0801078d
 8010728:	08010709 	.word	0x08010709
 801072c:	08010709 	.word	0x08010709
 8010730:	08010709 	.word	0x08010709
 8010734:	08010709 	.word	0x08010709
 8010738:	0801078d 	.word	0x0801078d
 801073c:	08010709 	.word	0x08010709
 8010740:	08010709 	.word	0x08010709
 8010744:	08010709 	.word	0x08010709
 8010748:	08010709 	.word	0x08010709
 801074c:	0801088b 	.word	0x0801088b
 8010750:	080107b7 	.word	0x080107b7
 8010754:	08010845 	.word	0x08010845
 8010758:	08010709 	.word	0x08010709
 801075c:	08010709 	.word	0x08010709
 8010760:	080108ad 	.word	0x080108ad
 8010764:	08010709 	.word	0x08010709
 8010768:	080107b7 	.word	0x080107b7
 801076c:	08010709 	.word	0x08010709
 8010770:	08010709 	.word	0x08010709
 8010774:	0801084d 	.word	0x0801084d
 8010778:	6833      	ldr	r3, [r6, #0]
 801077a:	1d1a      	adds	r2, r3, #4
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	6032      	str	r2, [r6, #0]
 8010780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010784:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010788:	2301      	movs	r3, #1
 801078a:	e09c      	b.n	80108c6 <_printf_i+0x1e6>
 801078c:	6833      	ldr	r3, [r6, #0]
 801078e:	6820      	ldr	r0, [r4, #0]
 8010790:	1d19      	adds	r1, r3, #4
 8010792:	6031      	str	r1, [r6, #0]
 8010794:	0606      	lsls	r6, r0, #24
 8010796:	d501      	bpl.n	801079c <_printf_i+0xbc>
 8010798:	681d      	ldr	r5, [r3, #0]
 801079a:	e003      	b.n	80107a4 <_printf_i+0xc4>
 801079c:	0645      	lsls	r5, r0, #25
 801079e:	d5fb      	bpl.n	8010798 <_printf_i+0xb8>
 80107a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80107a4:	2d00      	cmp	r5, #0
 80107a6:	da03      	bge.n	80107b0 <_printf_i+0xd0>
 80107a8:	232d      	movs	r3, #45	@ 0x2d
 80107aa:	426d      	negs	r5, r5
 80107ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80107b0:	4858      	ldr	r0, [pc, #352]	@ (8010914 <_printf_i+0x234>)
 80107b2:	230a      	movs	r3, #10
 80107b4:	e011      	b.n	80107da <_printf_i+0xfa>
 80107b6:	6821      	ldr	r1, [r4, #0]
 80107b8:	6833      	ldr	r3, [r6, #0]
 80107ba:	0608      	lsls	r0, r1, #24
 80107bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80107c0:	d402      	bmi.n	80107c8 <_printf_i+0xe8>
 80107c2:	0649      	lsls	r1, r1, #25
 80107c4:	bf48      	it	mi
 80107c6:	b2ad      	uxthmi	r5, r5
 80107c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80107ca:	4852      	ldr	r0, [pc, #328]	@ (8010914 <_printf_i+0x234>)
 80107cc:	6033      	str	r3, [r6, #0]
 80107ce:	bf14      	ite	ne
 80107d0:	230a      	movne	r3, #10
 80107d2:	2308      	moveq	r3, #8
 80107d4:	2100      	movs	r1, #0
 80107d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80107da:	6866      	ldr	r6, [r4, #4]
 80107dc:	60a6      	str	r6, [r4, #8]
 80107de:	2e00      	cmp	r6, #0
 80107e0:	db05      	blt.n	80107ee <_printf_i+0x10e>
 80107e2:	6821      	ldr	r1, [r4, #0]
 80107e4:	432e      	orrs	r6, r5
 80107e6:	f021 0104 	bic.w	r1, r1, #4
 80107ea:	6021      	str	r1, [r4, #0]
 80107ec:	d04b      	beq.n	8010886 <_printf_i+0x1a6>
 80107ee:	4616      	mov	r6, r2
 80107f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80107f4:	fb03 5711 	mls	r7, r3, r1, r5
 80107f8:	5dc7      	ldrb	r7, [r0, r7]
 80107fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80107fe:	462f      	mov	r7, r5
 8010800:	42bb      	cmp	r3, r7
 8010802:	460d      	mov	r5, r1
 8010804:	d9f4      	bls.n	80107f0 <_printf_i+0x110>
 8010806:	2b08      	cmp	r3, #8
 8010808:	d10b      	bne.n	8010822 <_printf_i+0x142>
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	07df      	lsls	r7, r3, #31
 801080e:	d508      	bpl.n	8010822 <_printf_i+0x142>
 8010810:	6923      	ldr	r3, [r4, #16]
 8010812:	6861      	ldr	r1, [r4, #4]
 8010814:	4299      	cmp	r1, r3
 8010816:	bfde      	ittt	le
 8010818:	2330      	movle	r3, #48	@ 0x30
 801081a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801081e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010822:	1b92      	subs	r2, r2, r6
 8010824:	6122      	str	r2, [r4, #16]
 8010826:	f8cd a000 	str.w	sl, [sp]
 801082a:	464b      	mov	r3, r9
 801082c:	aa03      	add	r2, sp, #12
 801082e:	4621      	mov	r1, r4
 8010830:	4640      	mov	r0, r8
 8010832:	f7ff fee7 	bl	8010604 <_printf_common>
 8010836:	3001      	adds	r0, #1
 8010838:	d14a      	bne.n	80108d0 <_printf_i+0x1f0>
 801083a:	f04f 30ff 	mov.w	r0, #4294967295
 801083e:	b004      	add	sp, #16
 8010840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010844:	6823      	ldr	r3, [r4, #0]
 8010846:	f043 0320 	orr.w	r3, r3, #32
 801084a:	6023      	str	r3, [r4, #0]
 801084c:	4832      	ldr	r0, [pc, #200]	@ (8010918 <_printf_i+0x238>)
 801084e:	2778      	movs	r7, #120	@ 0x78
 8010850:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010854:	6823      	ldr	r3, [r4, #0]
 8010856:	6831      	ldr	r1, [r6, #0]
 8010858:	061f      	lsls	r7, r3, #24
 801085a:	f851 5b04 	ldr.w	r5, [r1], #4
 801085e:	d402      	bmi.n	8010866 <_printf_i+0x186>
 8010860:	065f      	lsls	r7, r3, #25
 8010862:	bf48      	it	mi
 8010864:	b2ad      	uxthmi	r5, r5
 8010866:	6031      	str	r1, [r6, #0]
 8010868:	07d9      	lsls	r1, r3, #31
 801086a:	bf44      	itt	mi
 801086c:	f043 0320 	orrmi.w	r3, r3, #32
 8010870:	6023      	strmi	r3, [r4, #0]
 8010872:	b11d      	cbz	r5, 801087c <_printf_i+0x19c>
 8010874:	2310      	movs	r3, #16
 8010876:	e7ad      	b.n	80107d4 <_printf_i+0xf4>
 8010878:	4826      	ldr	r0, [pc, #152]	@ (8010914 <_printf_i+0x234>)
 801087a:	e7e9      	b.n	8010850 <_printf_i+0x170>
 801087c:	6823      	ldr	r3, [r4, #0]
 801087e:	f023 0320 	bic.w	r3, r3, #32
 8010882:	6023      	str	r3, [r4, #0]
 8010884:	e7f6      	b.n	8010874 <_printf_i+0x194>
 8010886:	4616      	mov	r6, r2
 8010888:	e7bd      	b.n	8010806 <_printf_i+0x126>
 801088a:	6833      	ldr	r3, [r6, #0]
 801088c:	6825      	ldr	r5, [r4, #0]
 801088e:	6961      	ldr	r1, [r4, #20]
 8010890:	1d18      	adds	r0, r3, #4
 8010892:	6030      	str	r0, [r6, #0]
 8010894:	062e      	lsls	r6, r5, #24
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	d501      	bpl.n	801089e <_printf_i+0x1be>
 801089a:	6019      	str	r1, [r3, #0]
 801089c:	e002      	b.n	80108a4 <_printf_i+0x1c4>
 801089e:	0668      	lsls	r0, r5, #25
 80108a0:	d5fb      	bpl.n	801089a <_printf_i+0x1ba>
 80108a2:	8019      	strh	r1, [r3, #0]
 80108a4:	2300      	movs	r3, #0
 80108a6:	6123      	str	r3, [r4, #16]
 80108a8:	4616      	mov	r6, r2
 80108aa:	e7bc      	b.n	8010826 <_printf_i+0x146>
 80108ac:	6833      	ldr	r3, [r6, #0]
 80108ae:	1d1a      	adds	r2, r3, #4
 80108b0:	6032      	str	r2, [r6, #0]
 80108b2:	681e      	ldr	r6, [r3, #0]
 80108b4:	6862      	ldr	r2, [r4, #4]
 80108b6:	2100      	movs	r1, #0
 80108b8:	4630      	mov	r0, r6
 80108ba:	f7ef fcb1 	bl	8000220 <memchr>
 80108be:	b108      	cbz	r0, 80108c4 <_printf_i+0x1e4>
 80108c0:	1b80      	subs	r0, r0, r6
 80108c2:	6060      	str	r0, [r4, #4]
 80108c4:	6863      	ldr	r3, [r4, #4]
 80108c6:	6123      	str	r3, [r4, #16]
 80108c8:	2300      	movs	r3, #0
 80108ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108ce:	e7aa      	b.n	8010826 <_printf_i+0x146>
 80108d0:	6923      	ldr	r3, [r4, #16]
 80108d2:	4632      	mov	r2, r6
 80108d4:	4649      	mov	r1, r9
 80108d6:	4640      	mov	r0, r8
 80108d8:	47d0      	blx	sl
 80108da:	3001      	adds	r0, #1
 80108dc:	d0ad      	beq.n	801083a <_printf_i+0x15a>
 80108de:	6823      	ldr	r3, [r4, #0]
 80108e0:	079b      	lsls	r3, r3, #30
 80108e2:	d413      	bmi.n	801090c <_printf_i+0x22c>
 80108e4:	68e0      	ldr	r0, [r4, #12]
 80108e6:	9b03      	ldr	r3, [sp, #12]
 80108e8:	4298      	cmp	r0, r3
 80108ea:	bfb8      	it	lt
 80108ec:	4618      	movlt	r0, r3
 80108ee:	e7a6      	b.n	801083e <_printf_i+0x15e>
 80108f0:	2301      	movs	r3, #1
 80108f2:	4632      	mov	r2, r6
 80108f4:	4649      	mov	r1, r9
 80108f6:	4640      	mov	r0, r8
 80108f8:	47d0      	blx	sl
 80108fa:	3001      	adds	r0, #1
 80108fc:	d09d      	beq.n	801083a <_printf_i+0x15a>
 80108fe:	3501      	adds	r5, #1
 8010900:	68e3      	ldr	r3, [r4, #12]
 8010902:	9903      	ldr	r1, [sp, #12]
 8010904:	1a5b      	subs	r3, r3, r1
 8010906:	42ab      	cmp	r3, r5
 8010908:	dcf2      	bgt.n	80108f0 <_printf_i+0x210>
 801090a:	e7eb      	b.n	80108e4 <_printf_i+0x204>
 801090c:	2500      	movs	r5, #0
 801090e:	f104 0619 	add.w	r6, r4, #25
 8010912:	e7f5      	b.n	8010900 <_printf_i+0x220>
 8010914:	0801142d 	.word	0x0801142d
 8010918:	0801143e 	.word	0x0801143e

0801091c <memmove>:
 801091c:	4288      	cmp	r0, r1
 801091e:	b510      	push	{r4, lr}
 8010920:	eb01 0402 	add.w	r4, r1, r2
 8010924:	d902      	bls.n	801092c <memmove+0x10>
 8010926:	4284      	cmp	r4, r0
 8010928:	4623      	mov	r3, r4
 801092a:	d807      	bhi.n	801093c <memmove+0x20>
 801092c:	1e43      	subs	r3, r0, #1
 801092e:	42a1      	cmp	r1, r4
 8010930:	d008      	beq.n	8010944 <memmove+0x28>
 8010932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010936:	f803 2f01 	strb.w	r2, [r3, #1]!
 801093a:	e7f8      	b.n	801092e <memmove+0x12>
 801093c:	4402      	add	r2, r0
 801093e:	4601      	mov	r1, r0
 8010940:	428a      	cmp	r2, r1
 8010942:	d100      	bne.n	8010946 <memmove+0x2a>
 8010944:	bd10      	pop	{r4, pc}
 8010946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801094a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801094e:	e7f7      	b.n	8010940 <memmove+0x24>

08010950 <_sbrk_r>:
 8010950:	b538      	push	{r3, r4, r5, lr}
 8010952:	4d06      	ldr	r5, [pc, #24]	@ (801096c <_sbrk_r+0x1c>)
 8010954:	2300      	movs	r3, #0
 8010956:	4604      	mov	r4, r0
 8010958:	4608      	mov	r0, r1
 801095a:	602b      	str	r3, [r5, #0]
 801095c:	f7f1 fe04 	bl	8002568 <_sbrk>
 8010960:	1c43      	adds	r3, r0, #1
 8010962:	d102      	bne.n	801096a <_sbrk_r+0x1a>
 8010964:	682b      	ldr	r3, [r5, #0]
 8010966:	b103      	cbz	r3, 801096a <_sbrk_r+0x1a>
 8010968:	6023      	str	r3, [r4, #0]
 801096a:	bd38      	pop	{r3, r4, r5, pc}
 801096c:	20004250 	.word	0x20004250

08010970 <_realloc_r>:
 8010970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010974:	4607      	mov	r7, r0
 8010976:	4614      	mov	r4, r2
 8010978:	460d      	mov	r5, r1
 801097a:	b921      	cbnz	r1, 8010986 <_realloc_r+0x16>
 801097c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010980:	4611      	mov	r1, r2
 8010982:	f7ff bc5b 	b.w	801023c <_malloc_r>
 8010986:	b92a      	cbnz	r2, 8010994 <_realloc_r+0x24>
 8010988:	f7ff fbec 	bl	8010164 <_free_r>
 801098c:	4625      	mov	r5, r4
 801098e:	4628      	mov	r0, r5
 8010990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010994:	f000 f81a 	bl	80109cc <_malloc_usable_size_r>
 8010998:	4284      	cmp	r4, r0
 801099a:	4606      	mov	r6, r0
 801099c:	d802      	bhi.n	80109a4 <_realloc_r+0x34>
 801099e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80109a2:	d8f4      	bhi.n	801098e <_realloc_r+0x1e>
 80109a4:	4621      	mov	r1, r4
 80109a6:	4638      	mov	r0, r7
 80109a8:	f7ff fc48 	bl	801023c <_malloc_r>
 80109ac:	4680      	mov	r8, r0
 80109ae:	b908      	cbnz	r0, 80109b4 <_realloc_r+0x44>
 80109b0:	4645      	mov	r5, r8
 80109b2:	e7ec      	b.n	801098e <_realloc_r+0x1e>
 80109b4:	42b4      	cmp	r4, r6
 80109b6:	4622      	mov	r2, r4
 80109b8:	4629      	mov	r1, r5
 80109ba:	bf28      	it	cs
 80109bc:	4632      	movcs	r2, r6
 80109be:	f7ff fbc3 	bl	8010148 <memcpy>
 80109c2:	4629      	mov	r1, r5
 80109c4:	4638      	mov	r0, r7
 80109c6:	f7ff fbcd 	bl	8010164 <_free_r>
 80109ca:	e7f1      	b.n	80109b0 <_realloc_r+0x40>

080109cc <_malloc_usable_size_r>:
 80109cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109d0:	1f18      	subs	r0, r3, #4
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	bfbc      	itt	lt
 80109d6:	580b      	ldrlt	r3, [r1, r0]
 80109d8:	18c0      	addlt	r0, r0, r3
 80109da:	4770      	bx	lr

080109dc <powf>:
 80109dc:	b508      	push	{r3, lr}
 80109de:	ed2d 8b04 	vpush	{d8-d9}
 80109e2:	eeb0 8a60 	vmov.f32	s16, s1
 80109e6:	eeb0 9a40 	vmov.f32	s18, s0
 80109ea:	f000 f859 	bl	8010aa0 <__ieee754_powf>
 80109ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80109f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f6:	eef0 8a40 	vmov.f32	s17, s0
 80109fa:	d63e      	bvs.n	8010a7a <powf+0x9e>
 80109fc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a04:	d112      	bne.n	8010a2c <powf+0x50>
 8010a06:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a0e:	d039      	beq.n	8010a84 <powf+0xa8>
 8010a10:	eeb0 0a48 	vmov.f32	s0, s16
 8010a14:	f000 f839 	bl	8010a8a <finitef>
 8010a18:	b378      	cbz	r0, 8010a7a <powf+0x9e>
 8010a1a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a22:	d52a      	bpl.n	8010a7a <powf+0x9e>
 8010a24:	f7ff fb64 	bl	80100f0 <__errno>
 8010a28:	2322      	movs	r3, #34	@ 0x22
 8010a2a:	e014      	b.n	8010a56 <powf+0x7a>
 8010a2c:	f000 f82d 	bl	8010a8a <finitef>
 8010a30:	b998      	cbnz	r0, 8010a5a <powf+0x7e>
 8010a32:	eeb0 0a49 	vmov.f32	s0, s18
 8010a36:	f000 f828 	bl	8010a8a <finitef>
 8010a3a:	b170      	cbz	r0, 8010a5a <powf+0x7e>
 8010a3c:	eeb0 0a48 	vmov.f32	s0, s16
 8010a40:	f000 f823 	bl	8010a8a <finitef>
 8010a44:	b148      	cbz	r0, 8010a5a <powf+0x7e>
 8010a46:	eef4 8a68 	vcmp.f32	s17, s17
 8010a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4e:	d7e9      	bvc.n	8010a24 <powf+0x48>
 8010a50:	f7ff fb4e 	bl	80100f0 <__errno>
 8010a54:	2321      	movs	r3, #33	@ 0x21
 8010a56:	6003      	str	r3, [r0, #0]
 8010a58:	e00f      	b.n	8010a7a <powf+0x9e>
 8010a5a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a62:	d10a      	bne.n	8010a7a <powf+0x9e>
 8010a64:	eeb0 0a49 	vmov.f32	s0, s18
 8010a68:	f000 f80f 	bl	8010a8a <finitef>
 8010a6c:	b128      	cbz	r0, 8010a7a <powf+0x9e>
 8010a6e:	eeb0 0a48 	vmov.f32	s0, s16
 8010a72:	f000 f80a 	bl	8010a8a <finitef>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	d1d4      	bne.n	8010a24 <powf+0x48>
 8010a7a:	eeb0 0a68 	vmov.f32	s0, s17
 8010a7e:	ecbd 8b04 	vpop	{d8-d9}
 8010a82:	bd08      	pop	{r3, pc}
 8010a84:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010a88:	e7f7      	b.n	8010a7a <powf+0x9e>

08010a8a <finitef>:
 8010a8a:	ee10 3a10 	vmov	r3, s0
 8010a8e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8010a92:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010a96:	bfac      	ite	ge
 8010a98:	2000      	movge	r0, #0
 8010a9a:	2001      	movlt	r0, #1
 8010a9c:	4770      	bx	lr
	...

08010aa0 <__ieee754_powf>:
 8010aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa4:	ee10 4a90 	vmov	r4, s1
 8010aa8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8010aac:	ed2d 8b02 	vpush	{d8}
 8010ab0:	ee10 6a10 	vmov	r6, s0
 8010ab4:	eeb0 8a40 	vmov.f32	s16, s0
 8010ab8:	eef0 8a60 	vmov.f32	s17, s1
 8010abc:	d10c      	bne.n	8010ad8 <__ieee754_powf+0x38>
 8010abe:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8010ac2:	0076      	lsls	r6, r6, #1
 8010ac4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8010ac8:	f240 8274 	bls.w	8010fb4 <__ieee754_powf+0x514>
 8010acc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010ad0:	ecbd 8b02 	vpop	{d8}
 8010ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ad8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010adc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010ae0:	d802      	bhi.n	8010ae8 <__ieee754_powf+0x48>
 8010ae2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010ae6:	d908      	bls.n	8010afa <__ieee754_powf+0x5a>
 8010ae8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010aec:	d1ee      	bne.n	8010acc <__ieee754_powf+0x2c>
 8010aee:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010af2:	0064      	lsls	r4, r4, #1
 8010af4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8010af8:	e7e6      	b.n	8010ac8 <__ieee754_powf+0x28>
 8010afa:	2e00      	cmp	r6, #0
 8010afc:	da1f      	bge.n	8010b3e <__ieee754_powf+0x9e>
 8010afe:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010b02:	f080 8260 	bcs.w	8010fc6 <__ieee754_powf+0x526>
 8010b06:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010b0a:	d32f      	bcc.n	8010b6c <__ieee754_powf+0xcc>
 8010b0c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8010b10:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010b14:	fa49 f503 	asr.w	r5, r9, r3
 8010b18:	fa05 f303 	lsl.w	r3, r5, r3
 8010b1c:	454b      	cmp	r3, r9
 8010b1e:	d123      	bne.n	8010b68 <__ieee754_powf+0xc8>
 8010b20:	f005 0501 	and.w	r5, r5, #1
 8010b24:	f1c5 0502 	rsb	r5, r5, #2
 8010b28:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010b2c:	d11f      	bne.n	8010b6e <__ieee754_powf+0xce>
 8010b2e:	2c00      	cmp	r4, #0
 8010b30:	f280 8246 	bge.w	8010fc0 <__ieee754_powf+0x520>
 8010b34:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010b38:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010b3c:	e7c8      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010b3e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010b42:	d111      	bne.n	8010b68 <__ieee754_powf+0xc8>
 8010b44:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8010b48:	f000 8234 	beq.w	8010fb4 <__ieee754_powf+0x514>
 8010b4c:	d906      	bls.n	8010b5c <__ieee754_powf+0xbc>
 8010b4e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8010e64 <__ieee754_powf+0x3c4>
 8010b52:	2c00      	cmp	r4, #0
 8010b54:	bfa8      	it	ge
 8010b56:	eeb0 0a68 	vmovge.f32	s0, s17
 8010b5a:	e7b9      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010b5c:	2c00      	cmp	r4, #0
 8010b5e:	f280 822c 	bge.w	8010fba <__ieee754_powf+0x51a>
 8010b62:	eeb1 0a68 	vneg.f32	s0, s17
 8010b66:	e7b3      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010b68:	2500      	movs	r5, #0
 8010b6a:	e7dd      	b.n	8010b28 <__ieee754_powf+0x88>
 8010b6c:	2500      	movs	r5, #0
 8010b6e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010b72:	d102      	bne.n	8010b7a <__ieee754_powf+0xda>
 8010b74:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010b78:	e7aa      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010b7a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010b7e:	f040 8227 	bne.w	8010fd0 <__ieee754_powf+0x530>
 8010b82:	2e00      	cmp	r6, #0
 8010b84:	f2c0 8224 	blt.w	8010fd0 <__ieee754_powf+0x530>
 8010b88:	eeb0 0a48 	vmov.f32	s0, s16
 8010b8c:	ecbd 8b02 	vpop	{d8}
 8010b90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b94:	f000 bae6 	b.w	8011164 <__ieee754_sqrtf>
 8010b98:	2d01      	cmp	r5, #1
 8010b9a:	d199      	bne.n	8010ad0 <__ieee754_powf+0x30>
 8010b9c:	eeb1 0a40 	vneg.f32	s0, s0
 8010ba0:	e796      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010ba2:	0ff0      	lsrs	r0, r6, #31
 8010ba4:	3801      	subs	r0, #1
 8010ba6:	ea55 0300 	orrs.w	r3, r5, r0
 8010baa:	d104      	bne.n	8010bb6 <__ieee754_powf+0x116>
 8010bac:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010bb0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010bb4:	e78c      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010bb6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8010bba:	d96d      	bls.n	8010c98 <__ieee754_powf+0x1f8>
 8010bbc:	4baa      	ldr	r3, [pc, #680]	@ (8010e68 <__ieee754_powf+0x3c8>)
 8010bbe:	4598      	cmp	r8, r3
 8010bc0:	d808      	bhi.n	8010bd4 <__ieee754_powf+0x134>
 8010bc2:	2c00      	cmp	r4, #0
 8010bc4:	da0b      	bge.n	8010bde <__ieee754_powf+0x13e>
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	ecbd 8b02 	vpop	{d8}
 8010bcc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bd0:	f000 bac2 	b.w	8011158 <__math_oflowf>
 8010bd4:	4ba5      	ldr	r3, [pc, #660]	@ (8010e6c <__ieee754_powf+0x3cc>)
 8010bd6:	4598      	cmp	r8, r3
 8010bd8:	d908      	bls.n	8010bec <__ieee754_powf+0x14c>
 8010bda:	2c00      	cmp	r4, #0
 8010bdc:	dcf3      	bgt.n	8010bc6 <__ieee754_powf+0x126>
 8010bde:	2000      	movs	r0, #0
 8010be0:	ecbd 8b02 	vpop	{d8}
 8010be4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010be8:	f000 bab0 	b.w	801114c <__math_uflowf>
 8010bec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010bf0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010bf4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8010e70 <__ieee754_powf+0x3d0>
 8010bf8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010bfc:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010c00:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010c04:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010c08:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010c0c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8010e74 <__ieee754_powf+0x3d4>
 8010c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010c14:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8010e78 <__ieee754_powf+0x3d8>
 8010c18:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010c1c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8010e7c <__ieee754_powf+0x3dc>
 8010c20:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010c24:	eeb0 7a67 	vmov.f32	s14, s15
 8010c28:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010c2c:	ee17 3a10 	vmov	r3, s14
 8010c30:	f36f 030b 	bfc	r3, #0, #12
 8010c34:	ee07 3a10 	vmov	s14, r3
 8010c38:	eeb0 6a47 	vmov.f32	s12, s14
 8010c3c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8010c40:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010c44:	3d01      	subs	r5, #1
 8010c46:	4305      	orrs	r5, r0
 8010c48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010c4c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010c50:	f36f 040b 	bfc	r4, #0, #12
 8010c54:	bf18      	it	ne
 8010c56:	eeb0 8a66 	vmovne.f32	s16, s13
 8010c5a:	ee06 4a90 	vmov	s13, r4
 8010c5e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010c62:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8010c66:	ee67 7a26 	vmul.f32	s15, s14, s13
 8010c6a:	eee6 0a07 	vfma.f32	s1, s12, s14
 8010c6e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010c72:	ee17 1a10 	vmov	r1, s14
 8010c76:	2900      	cmp	r1, #0
 8010c78:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010c7c:	f340 80dd 	ble.w	8010e3a <__ieee754_powf+0x39a>
 8010c80:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010c84:	f240 80ca 	bls.w	8010e1c <__ieee754_powf+0x37c>
 8010c88:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c90:	bf4c      	ite	mi
 8010c92:	2001      	movmi	r0, #1
 8010c94:	2000      	movpl	r0, #0
 8010c96:	e797      	b.n	8010bc8 <__ieee754_powf+0x128>
 8010c98:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8010c9c:	bf01      	itttt	eq
 8010c9e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8010e80 <__ieee754_powf+0x3e0>
 8010ca2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010ca6:	f06f 0317 	mvneq.w	r3, #23
 8010caa:	ee17 7a90 	vmoveq	r7, s15
 8010cae:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010cb2:	bf18      	it	ne
 8010cb4:	2300      	movne	r3, #0
 8010cb6:	3a7f      	subs	r2, #127	@ 0x7f
 8010cb8:	441a      	add	r2, r3
 8010cba:	4b72      	ldr	r3, [pc, #456]	@ (8010e84 <__ieee754_powf+0x3e4>)
 8010cbc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010cc0:	429f      	cmp	r7, r3
 8010cc2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010cc6:	dd06      	ble.n	8010cd6 <__ieee754_powf+0x236>
 8010cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8010e88 <__ieee754_powf+0x3e8>)
 8010cca:	429f      	cmp	r7, r3
 8010ccc:	f340 80a4 	ble.w	8010e18 <__ieee754_powf+0x378>
 8010cd0:	3201      	adds	r2, #1
 8010cd2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8010cd6:	2600      	movs	r6, #0
 8010cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8010e8c <__ieee754_powf+0x3ec>)
 8010cda:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8010cde:	ee07 1a10 	vmov	s14, r1
 8010ce2:	edd3 5a00 	vldr	s11, [r3]
 8010ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8010e90 <__ieee754_powf+0x3f0>)
 8010ce8:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010cec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010cf0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010cf4:	1049      	asrs	r1, r1, #1
 8010cf6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8010cfa:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8010cfe:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010d02:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010d06:	ee07 1a90 	vmov	s15, r1
 8010d0a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010d0e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010d12:	ee15 7a10 	vmov	r7, s10
 8010d16:	401f      	ands	r7, r3
 8010d18:	ee06 7a90 	vmov	s13, r7
 8010d1c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010d20:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010d24:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010d28:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010d2c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8010e94 <__ieee754_powf+0x3f4>
 8010d30:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010e98 <__ieee754_powf+0x3f8>
 8010d34:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010d38:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8010e9c <__ieee754_powf+0x3fc>
 8010d3c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010d40:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8010e70 <__ieee754_powf+0x3d0>
 8010d44:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010d48:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010ea0 <__ieee754_powf+0x400>
 8010d4c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010d50:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8010ea4 <__ieee754_powf+0x404>
 8010d54:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010d58:	eee7 5a27 	vfma.f32	s11, s14, s15
 8010d5c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8010d60:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010d64:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010d68:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8010d6c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8010d70:	eef0 5a67 	vmov.f32	s11, s15
 8010d74:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8010d78:	ee75 5a87 	vadd.f32	s11, s11, s14
 8010d7c:	ee15 1a90 	vmov	r1, s11
 8010d80:	4019      	ands	r1, r3
 8010d82:	ee05 1a90 	vmov	s11, r1
 8010d86:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010d8a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8010d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d92:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010d96:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010d9a:	eeb0 6a67 	vmov.f32	s12, s15
 8010d9e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010da2:	ee16 1a10 	vmov	r1, s12
 8010da6:	4019      	ands	r1, r3
 8010da8:	ee06 1a10 	vmov	s12, r1
 8010dac:	eeb0 7a46 	vmov.f32	s14, s12
 8010db0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8010db4:	493c      	ldr	r1, [pc, #240]	@ (8010ea8 <__ieee754_powf+0x408>)
 8010db6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8010dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010dbe:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8010eac <__ieee754_powf+0x40c>
 8010dc2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8010eb0 <__ieee754_powf+0x410>
 8010dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010dca:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8010eb4 <__ieee754_powf+0x414>
 8010dce:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010dd2:	ed91 7a00 	vldr	s14, [r1]
 8010dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010dda:	ee07 2a10 	vmov	s14, r2
 8010dde:	4a36      	ldr	r2, [pc, #216]	@ (8010eb8 <__ieee754_powf+0x418>)
 8010de0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8010de4:	eeb0 7a67 	vmov.f32	s14, s15
 8010de8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8010dec:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8010df0:	ed92 5a00 	vldr	s10, [r2]
 8010df4:	ee37 7a05 	vadd.f32	s14, s14, s10
 8010df8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010dfc:	ee17 2a10 	vmov	r2, s14
 8010e00:	401a      	ands	r2, r3
 8010e02:	ee07 2a10 	vmov	s14, r2
 8010e06:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010e0a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8010e0e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010e12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010e16:	e715      	b.n	8010c44 <__ieee754_powf+0x1a4>
 8010e18:	2601      	movs	r6, #1
 8010e1a:	e75d      	b.n	8010cd8 <__ieee754_powf+0x238>
 8010e1c:	d152      	bne.n	8010ec4 <__ieee754_powf+0x424>
 8010e1e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8010ebc <__ieee754_powf+0x41c>
 8010e22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e26:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010e2a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e32:	f73f af29 	bgt.w	8010c88 <__ieee754_powf+0x1e8>
 8010e36:	2386      	movs	r3, #134	@ 0x86
 8010e38:	e048      	b.n	8010ecc <__ieee754_powf+0x42c>
 8010e3a:	4a21      	ldr	r2, [pc, #132]	@ (8010ec0 <__ieee754_powf+0x420>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d907      	bls.n	8010e50 <__ieee754_powf+0x3b0>
 8010e40:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e48:	bf4c      	ite	mi
 8010e4a:	2001      	movmi	r0, #1
 8010e4c:	2000      	movpl	r0, #0
 8010e4e:	e6c7      	b.n	8010be0 <__ieee754_powf+0x140>
 8010e50:	d138      	bne.n	8010ec4 <__ieee754_powf+0x424>
 8010e52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e56:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5e:	dbea      	blt.n	8010e36 <__ieee754_powf+0x396>
 8010e60:	e7ee      	b.n	8010e40 <__ieee754_powf+0x3a0>
 8010e62:	bf00      	nop
 8010e64:	00000000 	.word	0x00000000
 8010e68:	3f7ffff3 	.word	0x3f7ffff3
 8010e6c:	3f800007 	.word	0x3f800007
 8010e70:	3eaaaaab 	.word	0x3eaaaaab
 8010e74:	3fb8aa00 	.word	0x3fb8aa00
 8010e78:	3fb8aa3b 	.word	0x3fb8aa3b
 8010e7c:	36eca570 	.word	0x36eca570
 8010e80:	4b800000 	.word	0x4b800000
 8010e84:	001cc471 	.word	0x001cc471
 8010e88:	005db3d6 	.word	0x005db3d6
 8010e8c:	08011460 	.word	0x08011460
 8010e90:	fffff000 	.word	0xfffff000
 8010e94:	3e6c3255 	.word	0x3e6c3255
 8010e98:	3e53f142 	.word	0x3e53f142
 8010e9c:	3e8ba305 	.word	0x3e8ba305
 8010ea0:	3edb6db7 	.word	0x3edb6db7
 8010ea4:	3f19999a 	.word	0x3f19999a
 8010ea8:	08011450 	.word	0x08011450
 8010eac:	3f76384f 	.word	0x3f76384f
 8010eb0:	3f763800 	.word	0x3f763800
 8010eb4:	369dc3a0 	.word	0x369dc3a0
 8010eb8:	08011458 	.word	0x08011458
 8010ebc:	3338aa3c 	.word	0x3338aa3c
 8010ec0:	43160000 	.word	0x43160000
 8010ec4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8010ec8:	d96f      	bls.n	8010faa <__ieee754_powf+0x50a>
 8010eca:	15db      	asrs	r3, r3, #23
 8010ecc:	3b7e      	subs	r3, #126	@ 0x7e
 8010ece:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8010ed2:	4118      	asrs	r0, r3
 8010ed4:	4408      	add	r0, r1
 8010ed6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8010eda:	4a4e      	ldr	r2, [pc, #312]	@ (8011014 <__ieee754_powf+0x574>)
 8010edc:	3b7f      	subs	r3, #127	@ 0x7f
 8010ede:	411a      	asrs	r2, r3
 8010ee0:	4002      	ands	r2, r0
 8010ee2:	ee07 2a10 	vmov	s14, r2
 8010ee6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8010eea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010eee:	f1c3 0317 	rsb	r3, r3, #23
 8010ef2:	4118      	asrs	r0, r3
 8010ef4:	2900      	cmp	r1, #0
 8010ef6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010efa:	bfb8      	it	lt
 8010efc:	4240      	neglt	r0, r0
 8010efe:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8010f02:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8011018 <__ieee754_powf+0x578>
 8010f06:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801101c <__ieee754_powf+0x57c>
 8010f0a:	ee16 3a90 	vmov	r3, s13
 8010f0e:	f36f 030b 	bfc	r3, #0, #12
 8010f12:	ee06 3a90 	vmov	s13, r3
 8010f16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010f1a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f1e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010f22:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8011020 <__ieee754_powf+0x580>
 8010f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f2a:	eee0 7a87 	vfma.f32	s15, s1, s14
 8010f2e:	eeb0 7a67 	vmov.f32	s14, s15
 8010f32:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010f36:	eef0 5a47 	vmov.f32	s11, s14
 8010f3a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8010f3e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8010f42:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010f46:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8011024 <__ieee754_powf+0x584>
 8010f4a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8011028 <__ieee754_powf+0x588>
 8010f4e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010f52:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801102c <__ieee754_powf+0x58c>
 8010f56:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010f5a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8011030 <__ieee754_powf+0x590>
 8010f5e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8010f62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011034 <__ieee754_powf+0x594>
 8010f66:	eee6 5a26 	vfma.f32	s11, s12, s13
 8010f6a:	eeb0 6a47 	vmov.f32	s12, s14
 8010f6e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8010f72:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010f76:	ee67 5a06 	vmul.f32	s11, s14, s12
 8010f7a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8010f7e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8010f82:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010f86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010f8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010f92:	ee10 3a10 	vmov	r3, s0
 8010f96:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010f9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010f9e:	da06      	bge.n	8010fae <__ieee754_powf+0x50e>
 8010fa0:	f000 f854 	bl	801104c <scalbnf>
 8010fa4:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010fa8:	e592      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010faa:	2000      	movs	r0, #0
 8010fac:	e7a7      	b.n	8010efe <__ieee754_powf+0x45e>
 8010fae:	ee00 3a10 	vmov	s0, r3
 8010fb2:	e7f7      	b.n	8010fa4 <__ieee754_powf+0x504>
 8010fb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010fb8:	e58a      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010fba:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8011038 <__ieee754_powf+0x598>
 8010fbe:	e587      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010fc0:	eeb0 0a48 	vmov.f32	s0, s16
 8010fc4:	e584      	b.n	8010ad0 <__ieee754_powf+0x30>
 8010fc6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010fca:	f43f adbb 	beq.w	8010b44 <__ieee754_powf+0xa4>
 8010fce:	2502      	movs	r5, #2
 8010fd0:	eeb0 0a48 	vmov.f32	s0, s16
 8010fd4:	f000 f832 	bl	801103c <fabsf>
 8010fd8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8010fdc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8010fe0:	4647      	mov	r7, r8
 8010fe2:	d003      	beq.n	8010fec <__ieee754_powf+0x54c>
 8010fe4:	f1b8 0f00 	cmp.w	r8, #0
 8010fe8:	f47f addb 	bne.w	8010ba2 <__ieee754_powf+0x102>
 8010fec:	2c00      	cmp	r4, #0
 8010fee:	bfbc      	itt	lt
 8010ff0:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8010ff4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8010ff8:	2e00      	cmp	r6, #0
 8010ffa:	f6bf ad69 	bge.w	8010ad0 <__ieee754_powf+0x30>
 8010ffe:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8011002:	ea58 0805 	orrs.w	r8, r8, r5
 8011006:	f47f adc7 	bne.w	8010b98 <__ieee754_powf+0xf8>
 801100a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801100e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011012:	e55d      	b.n	8010ad0 <__ieee754_powf+0x30>
 8011014:	ff800000 	.word	0xff800000
 8011018:	3f317218 	.word	0x3f317218
 801101c:	3f317200 	.word	0x3f317200
 8011020:	35bfbe8c 	.word	0x35bfbe8c
 8011024:	b5ddea0e 	.word	0xb5ddea0e
 8011028:	3331bb4c 	.word	0x3331bb4c
 801102c:	388ab355 	.word	0x388ab355
 8011030:	bb360b61 	.word	0xbb360b61
 8011034:	3e2aaaab 	.word	0x3e2aaaab
 8011038:	00000000 	.word	0x00000000

0801103c <fabsf>:
 801103c:	ee10 3a10 	vmov	r3, s0
 8011040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011044:	ee00 3a10 	vmov	s0, r3
 8011048:	4770      	bx	lr
	...

0801104c <scalbnf>:
 801104c:	ee10 3a10 	vmov	r3, s0
 8011050:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011054:	d02b      	beq.n	80110ae <scalbnf+0x62>
 8011056:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801105a:	d302      	bcc.n	8011062 <scalbnf+0x16>
 801105c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011060:	4770      	bx	lr
 8011062:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011066:	d123      	bne.n	80110b0 <scalbnf+0x64>
 8011068:	4b24      	ldr	r3, [pc, #144]	@ (80110fc <scalbnf+0xb0>)
 801106a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011100 <scalbnf+0xb4>
 801106e:	4298      	cmp	r0, r3
 8011070:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011074:	db17      	blt.n	80110a6 <scalbnf+0x5a>
 8011076:	ee10 3a10 	vmov	r3, s0
 801107a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801107e:	3a19      	subs	r2, #25
 8011080:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011084:	4288      	cmp	r0, r1
 8011086:	dd15      	ble.n	80110b4 <scalbnf+0x68>
 8011088:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011104 <scalbnf+0xb8>
 801108c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011108 <scalbnf+0xbc>
 8011090:	ee10 3a10 	vmov	r3, s0
 8011094:	eeb0 7a67 	vmov.f32	s14, s15
 8011098:	2b00      	cmp	r3, #0
 801109a:	bfb8      	it	lt
 801109c:	eef0 7a66 	vmovlt.f32	s15, s13
 80110a0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80110a4:	4770      	bx	lr
 80110a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801110c <scalbnf+0xc0>
 80110aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80110ae:	4770      	bx	lr
 80110b0:	0dd2      	lsrs	r2, r2, #23
 80110b2:	e7e5      	b.n	8011080 <scalbnf+0x34>
 80110b4:	4410      	add	r0, r2
 80110b6:	28fe      	cmp	r0, #254	@ 0xfe
 80110b8:	dce6      	bgt.n	8011088 <scalbnf+0x3c>
 80110ba:	2800      	cmp	r0, #0
 80110bc:	dd06      	ble.n	80110cc <scalbnf+0x80>
 80110be:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80110c2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80110c6:	ee00 3a10 	vmov	s0, r3
 80110ca:	4770      	bx	lr
 80110cc:	f110 0f16 	cmn.w	r0, #22
 80110d0:	da09      	bge.n	80110e6 <scalbnf+0x9a>
 80110d2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801110c <scalbnf+0xc0>
 80110d6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011110 <scalbnf+0xc4>
 80110da:	ee10 3a10 	vmov	r3, s0
 80110de:	eeb0 7a67 	vmov.f32	s14, s15
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	e7d9      	b.n	801109a <scalbnf+0x4e>
 80110e6:	3019      	adds	r0, #25
 80110e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80110ec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80110f0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011114 <scalbnf+0xc8>
 80110f4:	ee07 3a90 	vmov	s15, r3
 80110f8:	e7d7      	b.n	80110aa <scalbnf+0x5e>
 80110fa:	bf00      	nop
 80110fc:	ffff3cb0 	.word	0xffff3cb0
 8011100:	4c000000 	.word	0x4c000000
 8011104:	7149f2ca 	.word	0x7149f2ca
 8011108:	f149f2ca 	.word	0xf149f2ca
 801110c:	0da24260 	.word	0x0da24260
 8011110:	8da24260 	.word	0x8da24260
 8011114:	33000000 	.word	0x33000000

08011118 <with_errnof>:
 8011118:	b510      	push	{r4, lr}
 801111a:	ed2d 8b02 	vpush	{d8}
 801111e:	eeb0 8a40 	vmov.f32	s16, s0
 8011122:	4604      	mov	r4, r0
 8011124:	f7fe ffe4 	bl	80100f0 <__errno>
 8011128:	eeb0 0a48 	vmov.f32	s0, s16
 801112c:	ecbd 8b02 	vpop	{d8}
 8011130:	6004      	str	r4, [r0, #0]
 8011132:	bd10      	pop	{r4, pc}

08011134 <xflowf>:
 8011134:	b130      	cbz	r0, 8011144 <xflowf+0x10>
 8011136:	eef1 7a40 	vneg.f32	s15, s0
 801113a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801113e:	2022      	movs	r0, #34	@ 0x22
 8011140:	f7ff bfea 	b.w	8011118 <with_errnof>
 8011144:	eef0 7a40 	vmov.f32	s15, s0
 8011148:	e7f7      	b.n	801113a <xflowf+0x6>
	...

0801114c <__math_uflowf>:
 801114c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011154 <__math_uflowf+0x8>
 8011150:	f7ff bff0 	b.w	8011134 <xflowf>
 8011154:	10000000 	.word	0x10000000

08011158 <__math_oflowf>:
 8011158:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011160 <__math_oflowf+0x8>
 801115c:	f7ff bfea 	b.w	8011134 <xflowf>
 8011160:	70000000 	.word	0x70000000

08011164 <__ieee754_sqrtf>:
 8011164:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011168:	4770      	bx	lr
	...

0801116c <_init>:
 801116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116e:	bf00      	nop
 8011170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011172:	bc08      	pop	{r3}
 8011174:	469e      	mov	lr, r3
 8011176:	4770      	bx	lr

08011178 <_fini>:
 8011178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801117a:	bf00      	nop
 801117c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801117e:	bc08      	pop	{r3}
 8011180:	469e      	mov	lr, r3
 8011182:	4770      	bx	lr
