
code_propre_cansat_Freertos_groundbalise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118b0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  08011a90  08011a90  00012a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123ac  080123ac  000141f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080123ac  080123ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123b4  080123b4  000141f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080123b4  080123b4  000133b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080123b8  080123b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080123bc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003094  200001f8  080125b4  000141f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000328c  080125b4  0001428c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029182  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eea  00000000  00000000  0003d3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002280  00000000  00000000  00043298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a95  00000000  00000000  00045518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002731e  00000000  00000000  00046fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cec6  00000000  00000000  0006e2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec62f  00000000  00000000  0009b191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001877c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a654  00000000  00000000  00187804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00191e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011a78 	.word	0x08011a78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	08011a78 	.word	0x08011a78

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f00c fbea 	bl	800d862 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108e:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001090:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001096:	4b3e      	ldr	r3, [pc, #248]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001098:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b3c      	ldr	r3, [pc, #240]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b0:	4b37      	ldr	r3, [pc, #220]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010b8:	2208      	movs	r2, #8
 80010ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010bc:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010be:	2200      	movs	r2, #0
 80010c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010c2:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ce:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010d8:	2200      	movs	r2, #0
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010de:	2200      	movs	r2, #0
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ea:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	4825      	ldr	r0, [pc, #148]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010fa:	f002 fa25 	bl	8003548 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001104:	f000 ffb2 	bl	800206c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800110c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001110:	4619      	mov	r1, r3
 8001112:	481f      	ldr	r0, [pc, #124]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001114:	f003 fbea 	bl	80048ec <HAL_ADCEx_MultiModeConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800111e:	f000 ffa5 	bl	800206c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_ADC1_Init+0x124>)
 8001124:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800112a:	2307      	movs	r3, #7
 800112c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001140:	f002 fe72 	bl	8003e28 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800114a:	f000 ff8f 	bl	800206c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_ADC1_Init+0x128>)
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001152:	230c      	movs	r3, #12
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_ADC1_Init+0x120>)
 800115c:	f002 fe64 	bl	8003e28 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001166:	f000 ff81 	bl	800206c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <MX_ADC1_Init+0x12c>)
 800116c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800116e:	2312      	movs	r3, #18
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001178:	f002 fe56 	bl	8003e28 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001182:	f000 ff73 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3730      	adds	r7, #48	@ 0x30
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000214 	.word	0x20000214
 8001194:	cb840000 	.word	0xcb840000
 8001198:	c3210000 	.word	0xc3210000
 800119c:	0c900008 	.word	0x0c900008

080011a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09a      	sub	sp, #104	@ 0x68
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2244      	movs	r2, #68	@ 0x44
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00c fb4e 	bl	800d862 <memset>
  if(adcHandle->Instance==ADC1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ce:	d167      	bne.n	80012a0 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 fc9f 	bl	8006b24 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011ec:	f000 ff3e 	bl	800206c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a2c      	ldr	r2, [pc, #176]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	4a26      	ldr	r2, [pc, #152]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001220:	2304      	movs	r3, #4
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	2303      	movs	r3, #3
 8001226:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001236:	f004 f81b 	bl	8005270 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800123c:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <HAL_ADC_MspInit+0x110>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001242:	2205      	movs	r2, #5
 8001244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001254:	2280      	movs	r2, #128	@ 0x80
 8001256:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800125a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001266:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800126a:	2220      	movs	r2, #32
 800126c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001274:	480d      	ldr	r0, [pc, #52]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001276:	f003 fcbd 	bl	8004bf4 <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001280:	f000 fef4 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001288:	655a      	str	r2, [r3, #84]	@ 0x54
 800128a:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	2012      	movs	r0, #18
 8001296:	f003 fc85 	bl	8004ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800129a:	2012      	movs	r0, #18
 800129c:	f003 fc9c 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3768      	adds	r7, #104	@ 0x68
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	20000280 	.word	0x20000280
 80012b0:	4002001c 	.word	0x4002001c
 80012b4:	00000000 	.word	0x00000000

080012b8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80012b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ca:	f040 8097 	bne.w	80013fc <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80012ce:	4b52      	ldr	r3, [pc, #328]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f94e 	bl	8000574 <__aeabi_i2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	a14a      	add	r1, pc, #296	@ (adr r1, 8001408 <HAL_ADC_ConvCpltCallback+0x150>)
 80012de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e2:	f7ff fadb 	bl	800089c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fca3 	bl	8000c38 <__aeabi_d2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a49      	ldr	r2, [pc, #292]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 80012f6:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80012f8:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	4b49      	ldr	r3, [pc, #292]	@ (8001424 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001308:	ee17 0a90 	vmov	r0, s15
 800130c:	f7ff f944 	bl	8000598 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	f04f 0000 	mov.w	r0, #0
 8001318:	4943      	ldr	r1, [pc, #268]	@ (8001428 <HAL_ADC_ConvCpltCallback+0x170>)
 800131a:	f7ff fabf 	bl	800089c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4690      	mov	r8, r2
 8001324:	4699      	mov	r9, r3
 8001326:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 8001328:	885b      	ldrh	r3, [r3, #2]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f922 	bl	8000574 <__aeabi_i2d>
 8001330:	4604      	mov	r4, r0
 8001332:	460d      	mov	r5, r1
 8001334:	4b39      	ldr	r3, [pc, #228]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f92d 	bl	8000598 <__aeabi_f2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b3a      	ldr	r3, [pc, #232]	@ (800142c <HAL_ADC_ConvCpltCallback+0x174>)
 8001344:	f7ff faaa 	bl	800089c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff f97a 	bl	8000648 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	461d      	mov	r5, r3
 800135c:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <HAL_ADC_ConvCpltCallback+0x16c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f919 	bl	8000598 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7fe ffb3 	bl	80002d8 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4640      	mov	r0, r8
 8001378:	4649      	mov	r1, r9
 800137a:	f7ff f965 	bl	8000648 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fc57 	bl	8000c38 <__aeabi_d2f>
 800138a:	ee07 0a10 	vmov	s14, r0
 800138e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <HAL_ADC_ConvCpltCallback+0x178>)
 8001398:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 800139e:	88db      	ldrh	r3, [r3, #6]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8e7 	bl	8000574 <__aeabi_i2d>
 80013a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001410 <HAL_ADC_ConvCpltCallback+0x158>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fa76 	bl	800089c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_ADC_ConvCpltCallback+0x174>)
 80013be:	f7ff f943 	bl	8000648 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8e2 	bl	8000598 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff f934 	bl	8000648 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fc26 	bl	8000c38 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <HAL_ADC_ConvCpltCallback+0x17c>)
 80013f0:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 80013f2:	2203      	movs	r2, #3
 80013f4:	4908      	ldr	r1, [pc, #32]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 80013f6:	4810      	ldr	r0, [pc, #64]	@ (8001438 <HAL_ADC_ConvCpltCallback+0x180>)
 80013f8:	f002 fa2a 	bl	8003850 <HAL_ADC_Start_DMA>

	}

}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001406:	bf00      	nop
 8001408:	d70a3d70 	.word	0xd70a3d70
 800140c:	40b36323 	.word	0x40b36323
 8001410:	00000000 	.word	0x00000000
 8001414:	40affe00 	.word	0x40affe00
 8001418:	2000034c 	.word	0x2000034c
 800141c:	20000358 	.word	0x20000358
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004
 8001428:	40590000 	.word	0x40590000
 800142c:	40080000 	.word	0x40080000
 8001430:	20000354 	.word	0x20000354
 8001434:	2000035c 	.word	0x2000035c
 8001438:	20000214 	.word	0x20000214

0800143c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b094      	sub	sp, #80	@ 0x50
 8001440:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityNormal, 0, 256);
 8001442:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <MX_FREERTOS_Init+0x94>)
 8001444:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001448:	461d      	mov	r5, r3
 800144a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 8001452:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f00a f8f3 	bl	800b644 <osThreadCreate>
 800145e:	4603      	mov	r3, r0
 8001460:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <MX_FREERTOS_Init+0x98>)
 8001462:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 256);
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <MX_FREERTOS_Init+0x9c>)
 8001466:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800146a:	461d      	mov	r5, r3
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 8001474:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f00a f8e2 	bl	800b644 <osThreadCreate>
 8001480:	4603      	mov	r3, r0
 8001482:	4a16      	ldr	r2, [pc, #88]	@ (80014dc <MX_FREERTOS_Init+0xa0>)
 8001484:	6013      	str	r3, [r2, #0]

  /* definition and creation of distancecalc */
  osThreadDef(distancecalc, Startdistancecalc, osPriorityNormal, 0, 256);
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <MX_FREERTOS_Init+0xa4>)
 8001488:	f107 0414 	add.w	r4, r7, #20
 800148c:	461d      	mov	r5, r3
 800148e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001492:	682b      	ldr	r3, [r5, #0]
 8001494:	6023      	str	r3, [r4, #0]
  distancecalcHandle = osThreadCreate(osThread(distancecalc), NULL);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f00a f8d1 	bl	800b644 <osThreadCreate>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a0f      	ldr	r2, [pc, #60]	@ (80014e4 <MX_FREERTOS_Init+0xa8>)
 80014a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityHigh, 0, 256);
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_FREERTOS_Init+0xac>)
 80014aa:	463c      	mov	r4, r7
 80014ac:	461d      	mov	r5, r3
 80014ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b2:	682b      	ldr	r3, [r5, #0]
 80014b4:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 80014b6:	463b      	mov	r3, r7
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00a f8c2 	bl	800b644 <osThreadCreate>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <MX_FREERTOS_Init+0xb0>)
 80014c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	@ 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bdb0      	pop	{r4, r5, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08011aa0 	.word	0x08011aa0
 80014d4:	200002e0 	.word	0x200002e0
 80014d8:	08011ac0 	.word	0x08011ac0
 80014dc:	200002e4 	.word	0x200002e4
 80014e0:	08011ae4 	.word	0x08011ae4
 80014e4:	200002e8 	.word	0x200002e8
 80014e8:	08011b08 	.word	0x08011b08
 80014ec:	200002ec 	.word	0x200002ec

080014f0 <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af04      	add	r7, sp, #16
 80014f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
  /* Infinite loop */
  for(;;)
  {
	  statemachine();
 80014f8:	f000 fe3e 	bl	8002178 <statemachine>

	  create_and_send_payload((uint8_t*) tarvos_TX_Buffer,CHANNEL,SAT_ADDR,0x29,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 80014fc:	2300      	movs	r3, #0
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2300      	movs	r3, #0
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	2300      	movs	r3, #0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	eddf 2a0b 	vldr	s5, [pc, #44]	@ 8001538 <Startstatemachine+0x48>
 800150c:	ed9f 2a0a 	vldr	s4, [pc, #40]	@ 8001538 <Startstatemachine+0x48>
 8001510:	eddf 1a09 	vldr	s3, [pc, #36]	@ 8001538 <Startstatemachine+0x48>
 8001514:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8001538 <Startstatemachine+0x48>
 8001518:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8001538 <Startstatemachine+0x48>
 800151c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001538 <Startstatemachine+0x48>
 8001520:	2329      	movs	r3, #41	@ 0x29
 8001522:	2210      	movs	r2, #16
 8001524:	2182      	movs	r1, #130	@ 0x82
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <Startstatemachine+0x4c>)
 8001528:	f001 f9fa 	bl	8002920 <create_and_send_payload>




    osDelay(1000);
 800152c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001530:	f00a f8af 	bl	800b692 <osDelay>
  {
 8001534:	bf00      	nop
 8001536:	e7df      	b.n	80014f8 <Startstatemachine+0x8>
 8001538:	00000000 	.word	0x00000000
 800153c:	20000360 	.word	0x20000360

08001540 <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET){
 8001548:	2104      	movs	r1, #4
 800154a:	4808      	ldr	r0, [pc, #32]	@ (800156c <StartSdcard+0x2c>)
 800154c:	f004 f812 	bl	8005574 <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d103      	bne.n	800155e <StartSdcard+0x1e>
		  sd_detect_flag=1;
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <StartSdcard+0x30>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e002      	b.n	8001564 <StartSdcard+0x24>




	  }
	  else{sd_detect_flag=0;}
 800155e:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <StartSdcard+0x30>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]





    osDelay(100);
 8001564:	2064      	movs	r0, #100	@ 0x64
 8001566:	f00a f894 	bl	800b692 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET){
 800156a:	e7ed      	b.n	8001548 <StartSdcard+0x8>
 800156c:	48000400 	.word	0x48000400
 8001570:	20000608 	.word	0x20000608

08001574 <Startdistancecalc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startdistancecalc */
void Startdistancecalc(void const * argument)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startdistancecalc */
  /* Infinite loop */
  for(;;)
  {

    osDelay(100);
 800157c:	2064      	movs	r0, #100	@ 0x64
 800157e:	f00a f888 	bl	800b692 <osDelay>
 8001582:	e7fb      	b.n	800157c <Startdistancecalc+0x8>

08001584 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(trameready==1){
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <startTarvosDecode+0x34>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10c      	bne.n	80015ae <startTarvosDecode+0x2a>

		  switch(tarvos_DATA[3]){
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <startTarvosDecode+0x38>)
 8001596:	78db      	ldrb	r3, [r3, #3]
 8001598:	2b16      	cmp	r3, #22
 800159a:	d104      	bne.n	80015a6 <startTarvosDecode+0x22>
		  case BOTTOM_ADDR:
			  decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 800159c:	4907      	ldr	r1, [pc, #28]	@ (80015bc <startTarvosDecode+0x38>)
 800159e:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <startTarvosDecode+0x3c>)
 80015a0:	f001 fa08 	bl	80029b4 <decode_payload>
			  break;
 80015a4:	e000      	b.n	80015a8 <startTarvosDecode+0x24>
		  default:


			  break;
 80015a6:	bf00      	nop
		  }
		  trameready=0;
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <startTarvosDecode+0x34>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
	  }


    osDelay(100);
 80015ae:	2064      	movs	r0, #100	@ 0x64
 80015b0:	f00a f86f 	bl	800b692 <osDelay>
	  if(trameready==1){
 80015b4:	e7ea      	b.n	800158c <startTarvosDecode+0x8>
 80015b6:	bf00      	nop
 80015b8:	20000610 	.word	0x20000610
 80015bc:	200003e0 	.word	0x200003e0
 80015c0:	20000460 	.word	0x20000460

080015c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_DMA_Init+0x70>)
 80015cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ce:	4a19      	ldr	r2, [pc, #100]	@ (8001634 <MX_DMA_Init+0x70>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80015d6:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <MX_DMA_Init+0x70>)
 80015d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <MX_DMA_Init+0x70>)
 80015e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e6:	4a13      	ldr	r2, [pc, #76]	@ (8001634 <MX_DMA_Init+0x70>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <MX_DMA_Init+0x70>)
 80015f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2105      	movs	r1, #5
 80015fe:	200b      	movs	r0, #11
 8001600:	f003 fad0 	bl	8004ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001604:	200b      	movs	r0, #11
 8001606:	f003 fae7 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2105      	movs	r1, #5
 800160e:	200c      	movs	r0, #12
 8001610:	f003 fac8 	bl	8004ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001614:	200c      	movs	r0, #12
 8001616:	f003 fadf 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	200d      	movs	r0, #13
 8001620:	f003 fac0 	bl	8004ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001624:	200d      	movs	r0, #13
 8001626:	f003 fad7 	bl	8004bd8 <HAL_NVIC_EnableIRQ>

}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000

08001638 <MX_GPIO_Init>:
     PC6   ------> S_TIM3_CH1
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800164e:	4b4f      	ldr	r3, [pc, #316]	@ (800178c <MX_GPIO_Init+0x154>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	4a4e      	ldr	r2, [pc, #312]	@ (800178c <MX_GPIO_Init+0x154>)
 8001654:	f043 0320 	orr.w	r3, r3, #32
 8001658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165a:	4b4c      	ldr	r3, [pc, #304]	@ (800178c <MX_GPIO_Init+0x154>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b49      	ldr	r3, [pc, #292]	@ (800178c <MX_GPIO_Init+0x154>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	4a48      	ldr	r2, [pc, #288]	@ (800178c <MX_GPIO_Init+0x154>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001672:	4b46      	ldr	r3, [pc, #280]	@ (800178c <MX_GPIO_Init+0x154>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	4b43      	ldr	r3, [pc, #268]	@ (800178c <MX_GPIO_Init+0x154>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a42      	ldr	r2, [pc, #264]	@ (800178c <MX_GPIO_Init+0x154>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b40      	ldr	r3, [pc, #256]	@ (800178c <MX_GPIO_Init+0x154>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b3d      	ldr	r3, [pc, #244]	@ (800178c <MX_GPIO_Init+0x154>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	4a3c      	ldr	r2, [pc, #240]	@ (800178c <MX_GPIO_Init+0x154>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a2:	4b3a      	ldr	r3, [pc, #232]	@ (800178c <MX_GPIO_Init+0x154>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2110      	movs	r1, #16
 80016b2:	4837      	ldr	r0, [pc, #220]	@ (8001790 <MX_GPIO_Init+0x158>)
 80016b4:	f003 ff76 	bl	80055a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80016be:	4835      	ldr	r0, [pc, #212]	@ (8001794 <MX_GPIO_Init+0x15c>)
 80016c0:	f003 ff70 	bl	80055a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016c4:	2310      	movs	r3, #16
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016c8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016dc:	f003 fdc8 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016e0:	2310      	movs	r3, #16
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4826      	ldr	r0, [pc, #152]	@ (8001790 <MX_GPIO_Init+0x158>)
 80016f8:	f003 fdba 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016fc:	2304      	movs	r3, #4
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4821      	ldr	r0, [pc, #132]	@ (8001794 <MX_GPIO_Init+0x15c>)
 8001710:	f003 fdae 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 8001714:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4819      	ldr	r0, [pc, #100]	@ (8001794 <MX_GPIO_Init+0x15c>)
 800172e:	f003 fd9f 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001732:	2340      	movs	r3, #64	@ 0x40
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001742:	2302      	movs	r3, #2
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4810      	ldr	r0, [pc, #64]	@ (8001790 <MX_GPIO_Init+0x158>)
 800174e:	f003 fd8f 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001752:	23c0      	movs	r3, #192	@ 0xc0
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001762:	2307      	movs	r3, #7
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4809      	ldr	r0, [pc, #36]	@ (8001794 <MX_GPIO_Init+0x15c>)
 800176e:	f003 fd7f 	bl	8005270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2105      	movs	r1, #5
 8001776:	200a      	movs	r0, #10
 8001778:	f003 fa14 	bl	8004ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800177c:	200a      	movs	r0, #10
 800177e:	f003 fa2b 	bl	8004bd8 <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	@ 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	48000800 	.word	0x48000800
 8001794:	48000400 	.word	0x48000400

08001798 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <MX_I2C1_Init+0x74>)
 800179e:	4a1c      	ldr	r2, [pc, #112]	@ (8001810 <MX_I2C1_Init+0x78>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B182BE;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <MX_I2C1_Init+0x74>)
 80017a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001814 <MX_I2C1_Init+0x7c>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017a8:	4b18      	ldr	r3, [pc, #96]	@ (800180c <MX_I2C1_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ae:	4b17      	ldr	r3, [pc, #92]	@ (800180c <MX_I2C1_Init+0x74>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <MX_I2C1_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <MX_I2C1_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <MX_I2C1_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <MX_I2C1_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <MX_I2C1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d2:	480e      	ldr	r0, [pc, #56]	@ (800180c <MX_I2C1_Init+0x74>)
 80017d4:	f003 ff30 	bl	8005638 <HAL_I2C_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017de:	f000 fc45 	bl	800206c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4809      	ldr	r0, [pc, #36]	@ (800180c <MX_I2C1_Init+0x74>)
 80017e6:	f004 faf5 	bl	8005dd4 <HAL_I2CEx_ConfigAnalogFilter>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017f0:	f000 fc3c 	bl	800206c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_I2C1_Init+0x74>)
 80017f8:	f004 fb37 	bl	8005e6a <HAL_I2CEx_ConfigDigitalFilter>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001802:	f000 fc33 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002f4 	.word	0x200002f4
 8001810:	40005400 	.word	0x40005400
 8001814:	20b182be 	.word	0x20b182be

08001818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b09c      	sub	sp, #112	@ 0x70
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	2244      	movs	r2, #68	@ 0x44
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f00c f812 	bl	800d862 <memset>
  if(i2cHandle->Instance==I2C1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2e      	ldr	r2, [pc, #184]	@ (80018fc <HAL_I2C_MspInit+0xe4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d154      	bne.n	80018f2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001848:	2340      	movs	r3, #64	@ 0x40
 800184a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4618      	mov	r0, r3
 8001856:	f005 f965 	bl	8006b24 <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001860:	f000 fc04 	bl	800206c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b26      	ldr	r3, [pc, #152]	@ (8001900 <HAL_I2C_MspInit+0xe8>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001868:	4a25      	ldr	r2, [pc, #148]	@ (8001900 <HAL_I2C_MspInit+0xe8>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001870:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <HAL_I2C_MspInit+0xe8>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_I2C_MspInit+0xe8>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001880:	4a1f      	ldr	r2, [pc, #124]	@ (8001900 <HAL_I2C_MspInit+0xe8>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001888:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_I2C_MspInit+0xe8>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001894:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001898:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189a:	2312      	movs	r3, #18
 800189c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018a6:	2304      	movs	r3, #4
 80018a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b4:	f003 fcdc 	bl	8005270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018be:	2312      	movs	r3, #18
 80018c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ca:	2304      	movs	r3, #4
 80018cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018d2:	4619      	mov	r1, r3
 80018d4:	480b      	ldr	r0, [pc, #44]	@ (8001904 <HAL_I2C_MspInit+0xec>)
 80018d6:	f003 fccb 	bl	8005270 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_I2C_MspInit+0xe8>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	4a08      	ldr	r2, [pc, #32]	@ (8001900 <HAL_I2C_MspInit+0xe8>)
 80018e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_I2C_MspInit+0xe8>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018f2:	bf00      	nop
 80018f4:	3770      	adds	r7, #112	@ 0x70
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40005400 	.word	0x40005400
 8001900:	40021000 	.word	0x40021000
 8001904:	48000400 	.word	0x48000400

08001908 <lcd_send_data>:

char str[40];

extern I2C_HandleTypeDef hi2c1;

void lcd_send_data( char data){
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af02      	add	r7, sp, #8
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u=(data&0xf0);
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f023 030f 	bic.w	r3, r3, #15
 8001918:	73fb      	strb	r3, [r7, #15]
	data_l=((data<<4)&0xf0);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	73bb      	strb	r3, [r7, #14]
	data_t[0]=data_u|0x0D;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	f043 030d 	orr.w	r3, r3, #13
 8001926:	b2db      	uxtb	r3, r3
 8001928:	723b      	strb	r3, [r7, #8]
	data_t[1]=data_u|0x09;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	f043 0309 	orr.w	r3, r3, #9
 8001930:	b2db      	uxtb	r3, r3
 8001932:	727b      	strb	r3, [r7, #9]
	data_t[2]=data_l|0x0D;
 8001934:	7bbb      	ldrb	r3, [r7, #14]
 8001936:	f043 030d 	orr.w	r3, r3, #13
 800193a:	b2db      	uxtb	r3, r3
 800193c:	72bb      	strb	r3, [r7, #10]
	data_t[3]=data_l|0x09;
 800193e:	7bbb      	ldrb	r3, [r7, #14]
 8001940:	f043 0309 	orr.w	r3, r3, #9
 8001944:	b2db      	uxtb	r3, r3
 8001946:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t,4, 100);
 8001948:	f107 0208 	add.w	r2, r7, #8
 800194c:	2364      	movs	r3, #100	@ 0x64
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2304      	movs	r3, #4
 8001952:	214e      	movs	r1, #78	@ 0x4e
 8001954:	4803      	ldr	r0, [pc, #12]	@ (8001964 <lcd_send_data+0x5c>)
 8001956:	f003 ff0b 	bl	8005770 <HAL_I2C_Master_Transmit>





}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200002f4 	.word	0x200002f4

08001968 <lcd_send_cmd>:

void lcd_send_cmd( char data){
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af02      	add	r7, sp, #8
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u=(data&0xf0);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f023 030f 	bic.w	r3, r3, #15
 8001978:	73fb      	strb	r3, [r7, #15]
	data_l=((data<<4)&0xf0);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	73bb      	strb	r3, [r7, #14]
	data_t[0]=data_u|0x0C;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	f043 030c 	orr.w	r3, r3, #12
 8001986:	b2db      	uxtb	r3, r3
 8001988:	723b      	strb	r3, [r7, #8]
	data_t[1]=data_u|0x08;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	b2db      	uxtb	r3, r3
 8001992:	727b      	strb	r3, [r7, #9]
	data_t[2]=data_l|0x0C;
 8001994:	7bbb      	ldrb	r3, [r7, #14]
 8001996:	f043 030c 	orr.w	r3, r3, #12
 800199a:	b2db      	uxtb	r3, r3
 800199c:	72bb      	strb	r3, [r7, #10]
	data_t[3]=data_l|0x08;
 800199e:	7bbb      	ldrb	r3, [r7, #14]
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t,4, 100);
 80019a8:	f107 0208 	add.w	r2, r7, #8
 80019ac:	2364      	movs	r3, #100	@ 0x64
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2304      	movs	r3, #4
 80019b2:	214e      	movs	r1, #78	@ 0x4e
 80019b4:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <lcd_send_cmd+0x5c>)
 80019b6:	f003 fedb 	bl	8005770 <HAL_I2C_Master_Transmit>





}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200002f4 	.word	0x200002f4

080019c8 <lcd_Init>:

void lcd_Init(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0

	HAL_Delay(50);
 80019cc:	2032      	movs	r0, #50	@ 0x32
 80019ce:	f001 fb59 	bl	8003084 <HAL_Delay>
	lcd_send_cmd(0x30);
 80019d2:	2030      	movs	r0, #48	@ 0x30
 80019d4:	f7ff ffc8 	bl	8001968 <lcd_send_cmd>
	HAL_Delay(5);
 80019d8:	2005      	movs	r0, #5
 80019da:	f001 fb53 	bl	8003084 <HAL_Delay>
	lcd_send_cmd(0x30);
 80019de:	2030      	movs	r0, #48	@ 0x30
 80019e0:	f7ff ffc2 	bl	8001968 <lcd_send_cmd>
	HAL_Delay(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f001 fb4d 	bl	8003084 <HAL_Delay>
	lcd_send_cmd(0x30);
 80019ea:	2030      	movs	r0, #48	@ 0x30
 80019ec:	f7ff ffbc 	bl	8001968 <lcd_send_cmd>
	HAL_Delay(10);
 80019f0:	200a      	movs	r0, #10
 80019f2:	f001 fb47 	bl	8003084 <HAL_Delay>
	lcd_send_cmd(0x20);
 80019f6:	2020      	movs	r0, #32
 80019f8:	f7ff ffb6 	bl	8001968 <lcd_send_cmd>

	HAL_Delay(10);
 80019fc:	200a      	movs	r0, #10
 80019fe:	f001 fb41 	bl	8003084 <HAL_Delay>
	lcd_send_cmd(0x28);
 8001a02:	2028      	movs	r0, #40	@ 0x28
 8001a04:	f7ff ffb0 	bl	8001968 <lcd_send_cmd>

	HAL_Delay(1);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f001 fb3b 	bl	8003084 <HAL_Delay>
	lcd_send_cmd(0x08);
 8001a0e:	2008      	movs	r0, #8
 8001a10:	f7ff ffaa 	bl	8001968 <lcd_send_cmd>
	HAL_Delay(1);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f001 fb35 	bl	8003084 <HAL_Delay>
	lcd_send_cmd(0x01);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7ff ffa4 	bl	8001968 <lcd_send_cmd>
	HAL_Delay(1);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f001 fb2f 	bl	8003084 <HAL_Delay>
	HAL_Delay(1);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f001 fb2c 	bl	8003084 <HAL_Delay>
	lcd_send_cmd(0x06);
 8001a2c:	2006      	movs	r0, #6
 8001a2e:	f7ff ff9b 	bl	8001968 <lcd_send_cmd>
	HAL_Delay(1);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f001 fb26 	bl	8003084 <HAL_Delay>
	lcd_send_cmd(0x0C);
 8001a38:	200c      	movs	r0, #12
 8001a3a:	f7ff ff95 	bl	8001968 <lcd_send_cmd>


}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <lcd_send_string>:

void lcd_send_string (char *str){
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]


	while (*str)lcd_send_data(*str++);
 8001a4a:	e006      	b.n	8001a5a <lcd_send_string+0x18>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff57 	bl	8001908 <lcd_send_data>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f4      	bne.n	8001a4c <lcd_send_string+0xa>
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <setCursor>:

void setCursor(int x, int y){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]


	switch(y){
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <setCursor+0x18>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <setCursor+0x22>
 8001a82:	e009      	b.n	8001a98 <setCursor+0x2c>
	case 0:
		y|=0x80;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a8a:	603b      	str	r3, [r7, #0]
		break;
 8001a8c:	e004      	b.n	8001a98 <setCursor+0x2c>
	case 1:
		y|=0xC0;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001a94:	603b      	str	r3, [r7, #0]
		break;
 8001a96:	bf00      	nop

	}
	lcd_send_cmd(y);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff63 	bl	8001968 <lcd_send_cmd>
	lcd_send_cmd(x);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff5e 	bl	8001968 <lcd_send_cmd>

}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8001aba:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <LED_Init+0x3c>)
 8001abc:	f005 fb8e 	bl	80071dc <HAL_TIM_PWM_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	80fb      	strh	r3, [r7, #6]
 8001ac8:	e006      	b.n	8001ad8 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	4a09      	ldr	r2, [pc, #36]	@ (8001af4 <LED_Init+0x40>)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	80fb      	strh	r3, [r7, #6]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001ade:	d9f4      	bls.n	8001aca <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <LED_Init+0x44>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8001ae6:	797b      	ldrb	r3, [r7, #5]




}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200006d0 	.word	0x200006d0
 8001af4:	200004c4 	.word	0x200004c4
 8001af8:	200005fd 	.word	0x200005fd

08001afc <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8001afc:	b490      	push	{r4, r7}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4604      	mov	r4, r0
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71bb      	strb	r3, [r7, #6]
 8001b12:	460b      	mov	r3, r1
 8001b14:	717b      	strb	r3, [r7, #5]
 8001b16:	4613      	mov	r3, r2
 8001b18:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8001b2a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b2e:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8001b30:	793b      	ldrb	r3, [r7, #4]
 8001b32:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8001b34:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b38:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	e007      	b.n	8001b50 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8001b40:	4a35      	ldr	r2, [pc, #212]	@ (8001c18 <LED_Setcolour+0x11c>)
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	4413      	add	r3, r2
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	623b      	str	r3, [r7, #32]
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001b56:	ddf3      	ble.n	8001b40 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8001b58:	2300      	movs	r3, #0
 8001b5a:	77fb      	strb	r3, [r7, #31]
 8001b5c:	e032      	b.n	8001bc4 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8001b5e:	2300      	movs	r3, #0
 8001b60:	77bb      	strb	r3, [r7, #30]
 8001b62:	e029      	b.n	8001bb8 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	e020      	b.n	8001bac <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8001b6a:	7ffa      	ldrb	r2, [r7, #31]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	441a      	add	r2, r3
 8001b72:	7fbb      	ldrb	r3, [r7, #30]
 8001b74:	4413      	add	r3, r2
 8001b76:	3328      	adds	r3, #40	@ 0x28
 8001b78:	443b      	add	r3, r7
 8001b7a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa42 f303 	asr.w	r3, r2, r3
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8001b8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b90:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <LED_Setcolour+0x11c>)
 8001b92:	215a      	movs	r1, #90	@ 0x5a
 8001b94:	54d1      	strb	r1, [r2, r3]
 8001b96:	e003      	b.n	8001ba0 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8001b98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c18 <LED_Setcolour+0x11c>)
 8001b9c:	211e      	movs	r1, #30
 8001b9e:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8001ba0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b07      	cmp	r3, #7
 8001bb0:	dddb      	ble.n	8001b6a <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 8001bb2:	7fbb      	ldrb	r3, [r7, #30]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	77bb      	strb	r3, [r7, #30]
 8001bb8:	7fbb      	ldrb	r3, [r7, #30]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d9d2      	bls.n	8001b64 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	77fb      	strb	r3, [r7, #31]
 8001bc4:	7ffb      	ldrb	r3, [r7, #31]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d9c9      	bls.n	8001b5e <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e009      	b.n	8001be4 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8001bd0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bd2:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <LED_Setcolour+0x11c>)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8001bd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bda:	3301      	adds	r3, #1
 8001bdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bea:	dbf1      	blt.n	8001bd0 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	e009      	b.n	8001c06 <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8001bf2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bf4:	4a08      	ldr	r2, [pc, #32]	@ (8001c18 <LED_Setcolour+0x11c>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8001bfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	3301      	adds	r3, #1
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	ddf2      	ble.n	8001bf2 <LED_Setcolour+0xf6>
		}

}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	@ 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc90      	pop	{r4, r7}
 8001c16:	4770      	bx	lr
 8001c18:	200004c4 	.word	0x200004c4

08001c1c <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8001c22:	f240 1339 	movw	r3, #313	@ 0x139
 8001c26:	4a07      	ldr	r2, [pc, #28]	@ (8001c44 <LED_Update+0x28>)
 8001c28:	2104      	movs	r1, #4
 8001c2a:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <LED_Update+0x2c>)
 8001c2c:	f005 fb38 	bl	80072a0 <HAL_TIM_PWM_Start_DMA>
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]

	if(halStatus=HAL_OK){
 8001c34:	2300      	movs	r3, #0
 8001c36:	71fb      	strb	r3, [r7, #7]
		DMA_COMPLETE_FLAG=0;
	}


	return halStatus;
 8001c38:	79fb      	ldrb	r3, [r7, #7]

}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200004c4 	.word	0x200004c4
 8001c48:	200006d0 	.word	0x200006d0

08001c4c <LED_Callback>:



void LED_Callback(){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 8001c50:	2104      	movs	r1, #4
 8001c52:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <LED_Callback+0x18>)
 8001c54:	f005 fd3c 	bl	80076d0 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <LED_Callback+0x1c>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]


}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200006d0 	.word	0x200006d0
 8001c68:	200005fd 	.word	0x200005fd

08001c6c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4){
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d133      	bne.n	8001ce4 <HAL_GPIO_EXTI_Callback+0x78>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)== GPIO_PIN_SET){
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c82:	f003 fc77 	bl	8005574 <HAL_GPIO_ReadPin>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d109      	bne.n	8001ca0 <HAL_GPIO_EXTI_Callback+0x34>

						gros_btn_time=0;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <HAL_GPIO_EXTI_Callback+0x80>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
						tbtn1=HAL_GetTick();
 8001c92:	f001 f9eb 	bl	800306c <HAL_GetTick>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_GPIO_EXTI_Callback+0x84>)
 8001c9c:	601a      	str	r2, [r3, #0]
//	if(GPIO_Pin==GPIO_PIN_0){
//		flag_drop=1;
//
//		}

	}
 8001c9e:	e021      	b.n	8001ce4 <HAL_GPIO_EXTI_Callback+0x78>
						gros_btn_time=(HAL_GetTick()-tbtn1);
 8001ca0:	f001 f9e4 	bl	800306c <HAL_GetTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_GPIO_EXTI_Callback+0x80>)
 8001cb0:	601a      	str	r2, [r3, #0]
					if(gros_btn_time>=400 && gros_btn_time<=2000){
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <HAL_GPIO_EXTI_Callback+0x80>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
					if(gros_btn_time>=2500 && gros_btn_time<=3500){
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_GPIO_EXTI_Callback+0x80>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001cc2:	4293      	cmp	r3, r2
					if(gros_btn_time>=4000){
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_GPIO_EXTI_Callback+0x80>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001ccc:	db07      	blt.n	8001cde <HAL_GPIO_EXTI_Callback+0x72>
											HAL_GPIO_TogglePin(PWEN_GPIO_Port,PWEN_Pin);
 8001cce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cd2:	4808      	ldr	r0, [pc, #32]	@ (8001cf4 <HAL_GPIO_EXTI_Callback+0x88>)
 8001cd4:	f003 fc7e 	bl	80055d4 <HAL_GPIO_TogglePin>
											gros_btn_time=0;
 8001cd8:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <HAL_GPIO_EXTI_Callback+0x80>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
					gros_btn_time=0;
 8001cde:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_GPIO_EXTI_Callback+0x80>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
	}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000600 	.word	0x20000600
 8001cf0:	20000348 	.word	0x20000348
 8001cf4:	48000400 	.word	0x48000400

08001cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

	LED_Callback();
 8001d00:	f7ff ffa4 	bl	8001c4c <LED_Callback>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	0000      	movs	r0, r0
	...

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d16:	f001 f97e 	bl	8003016 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d1a:	f000 f94b 	bl	8001fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1e:	f7ff fc8b 	bl	8001638 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d22:	f7ff fc4f 	bl	80015c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d26:	f7ff f9a3 	bl	8001070 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d2a:	f7ff fd35 	bl	8001798 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001d2e:	f000 ffdd 	bl	8002cec <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001d32:	f000 fe7d 	bl	8002a30 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001d36:	f000 f99f 	bl	8002078 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8001d3a:	f009 fb99 	bl	800b470 <MX_FATFS_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <main+0x38>
    Error_Handler();
 8001d44:	f000 f992 	bl	800206c <Error_Handler>
  }
  MX_TIM4_Init();
 8001d48:	f000 fee8 	bl	8002b1c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d52:	488f      	ldr	r0, [pc, #572]	@ (8001f90 <main+0x280>)
 8001d54:	f003 fc26 	bl	80055a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d5e:	488c      	ldr	r0, [pc, #560]	@ (8001f90 <main+0x280>)
 8001d60:	f003 fc20 	bl	80055a4 <HAL_GPIO_WritePin>





  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8001d64:	2203      	movs	r2, #3
 8001d66:	498b      	ldr	r1, [pc, #556]	@ (8001f94 <main+0x284>)
 8001d68:	488b      	ldr	r0, [pc, #556]	@ (8001f98 <main+0x288>)
 8001d6a:	f001 fd71 	bl	8003850 <HAL_ADC_Start_DMA>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <main+0x6a>

 	 pbmseeker=1;
 8001d74:	4b89      	ldr	r3, [pc, #548]	@ (8001f9c <main+0x28c>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

   }



  if(  LED_Init()!=HAL_OK){
 8001d7a:	f7ff fe9b 	bl	8001ab4 <LED_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <main+0x7a>

 	 pbmseeker=1;
 8001d84:	4b85      	ldr	r3, [pc, #532]	@ (8001f9c <main+0x28c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]


   }
  //mon adresse est 1° et on envoit à 2°
  if( INIT_PERM_TARVOS(GROUND_ADDR, GROUND_ADDR)!=HAL_OK){
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f000 fc2b 	bl	80025e8 <INIT_PERM_TARVOS>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <main+0x8e>

 	 pbmseeker=1;
 8001d98:	4b80      	ldr	r3, [pc, #512]	@ (8001f9c <main+0x28c>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]


   }


  HAL_Delay(100);
 8001d9e:	2064      	movs	r0, #100	@ 0x64
 8001da0:	f001 f970 	bl	8003084 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8001da4:	487e      	ldr	r0, [pc, #504]	@ (8001fa0 <main+0x290>)
 8001da6:	f007 f87f 	bl	8008ea8 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5)!=HAL_OK){
 8001daa:	2205      	movs	r2, #5
 8001dac:	497d      	ldr	r1, [pc, #500]	@ (8001fa4 <main+0x294>)
 8001dae:	487c      	ldr	r0, [pc, #496]	@ (8001fa0 <main+0x290>)
 8001db0:	f007 f82e 	bl	8008e10 <HAL_UART_Receive_DMA>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <main+0xb0>

 	pbmseeker=1;
 8001dba:	4b78      	ldr	r3, [pc, #480]	@ (8001f9c <main+0x28c>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]


   }
  lcd_Init();
 8001dc0:	f7ff fe02 	bl	80019c8 <lcd_Init>
  	  setCursor(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fe50 	bl	8001a6c <setCursor>
  	  lcd_send_string("test1");
 8001dcc:	4876      	ldr	r0, [pc, #472]	@ (8001fa8 <main+0x298>)
 8001dce:	f7ff fe38 	bl	8001a42 <lcd_send_string>
  	  HAL_Delay(1000);
 8001dd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dd6:	f001 f955 	bl	8003084 <HAL_Delay>
  	  setCursor(0,1);
 8001dda:	2101      	movs	r1, #1
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fe45 	bl	8001a6c <setCursor>
  	  lcd_send_string("test2");
 8001de2:	4872      	ldr	r0, [pc, #456]	@ (8001fac <main+0x29c>)
 8001de4:	f7ff fe2d 	bl	8001a42 <lcd_send_string>
  }
  if(pbmseeker==1){


  }
  int r=0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  int g=0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  int b=0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
  int t=0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	603b      	str	r3, [r7, #0]


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001df8:	f7ff fb20 	bl	800143c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001dfc:	f009 fc1b 	bl	800b636 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LED_Setcolour(r, g, b,r, g, b);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	b2d8      	uxtb	r0, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	b2d9      	uxtb	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	b2dc      	uxtb	r4, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	b2dd      	uxtb	r5, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	9201      	str	r2, [sp, #4]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	4622      	mov	r2, r4
 8001e20:	f7ff fe6c 	bl	8001afc <LED_Setcolour>
	  r=floor(abs(255*cosf((2*M_PI/255)*t)));
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f7fe fba5 	bl	8000574 <__aeabi_i2d>
 8001e2a:	a353      	add	r3, pc, #332	@ (adr r3, 8001f78 <main+0x268>)
 8001e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e30:	f7fe fc0a 	bl	8000648 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fefc 	bl	8000c38 <__aeabi_d2f>
 8001e40:	4603      	mov	r3, r0
 8001e42:	ee00 3a10 	vmov	s0, r3
 8001e46:	f00f f8e9 	bl	801101c <cosf>
 8001e4a:	eef0 7a40 	vmov.f32	s15, s0
 8001e4e:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001fb0 <main+0x2a0>
 8001e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e56:	ee17 0a90 	vmov	r0, s15
 8001e5a:	f7fe fb9d 	bl	8000598 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	ec43 2b10 	vmov	d0, r2, r3
 8001e66:	f00a fd6d 	bl	800c944 <abs>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb81 	bl	8000574 <__aeabi_i2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fe95 	bl	8000ba8 <__aeabi_d2iz>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60fb      	str	r3, [r7, #12]
	  g=floor(abs(255*cosf((2*M_PI/255)*t+(180/M_PI))));
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f7fe fb76 	bl	8000574 <__aeabi_i2d>
 8001e88:	a33b      	add	r3, pc, #236	@ (adr r3, 8001f78 <main+0x268>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe fbdb 	bl	8000648 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	a339      	add	r3, pc, #228	@ (adr r3, 8001f80 <main+0x270>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fa1c 	bl	80002dc <__adddf3>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f7fe fec4 	bl	8000c38 <__aeabi_d2f>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	ee00 3a10 	vmov	s0, r3
 8001eb6:	f00f f8b1 	bl	801101c <cosf>
 8001eba:	eef0 7a40 	vmov.f32	s15, s0
 8001ebe:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001fb0 <main+0x2a0>
 8001ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec6:	ee17 0a90 	vmov	r0, s15
 8001eca:	f7fe fb65 	bl	8000598 <__aeabi_f2d>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	ec43 2b10 	vmov	d0, r2, r3
 8001ed6:	f00a fd35 	bl	800c944 <abs>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fb49 	bl	8000574 <__aeabi_i2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fe5d 	bl	8000ba8 <__aeabi_d2iz>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	60bb      	str	r3, [r7, #8]
	  b=floor(abs(255*cosf((2*M_PI/255)*t+(270/M_PI))));
 8001ef2:	6838      	ldr	r0, [r7, #0]
 8001ef4:	f7fe fb3e 	bl	8000574 <__aeabi_i2d>
 8001ef8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001f78 <main+0x268>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f7fe fba3 	bl	8000648 <__aeabi_dmul>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001f88 <main+0x278>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe f9e4 	bl	80002dc <__adddf3>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fe8c 	bl	8000c38 <__aeabi_d2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	ee00 3a10 	vmov	s0, r3
 8001f26:	f00f f879 	bl	801101c <cosf>
 8001f2a:	eef0 7a40 	vmov.f32	s15, s0
 8001f2e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001fb0 <main+0x2a0>
 8001f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f36:	ee17 0a90 	vmov	r0, s15
 8001f3a:	f7fe fb2d 	bl	8000598 <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	ec43 2b10 	vmov	d0, r2, r3
 8001f46:	f00a fcfd 	bl	800c944 <abs>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fb11 	bl	8000574 <__aeabi_i2d>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7fe fe25 	bl	8000ba8 <__aeabi_d2iz>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	607b      	str	r3, [r7, #4]

	  if(t>=255){
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f66:	dd01      	ble.n	8001f6c <main+0x25c>
		  t=0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	603b      	str	r3, [r7, #0]
	  }
	  t++;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	603b      	str	r3, [r7, #0]

	  LED_Update();
 8001f72:	f7ff fe53 	bl	8001c1c <LED_Update>
  {
 8001f76:	e743      	b.n	8001e00 <main+0xf0>
 8001f78:	8acefc14 	.word	0x8acefc14
 8001f7c:	3f993b36 	.word	0x3f993b36
 8001f80:	1a63c1f8 	.word	0x1a63c1f8
 8001f84:	404ca5dc 	.word	0x404ca5dc
 8001f88:	13cad17a 	.word	0x13cad17a
 8001f8c:	40557c65 	.word	0x40557c65
 8001f90:	48000400 	.word	0x48000400
 8001f94:	2000034c 	.word	0x2000034c
 8001f98:	20000214 	.word	0x20000214
 8001f9c:	2000060c 	.word	0x2000060c
 8001fa0:	200007d0 	.word	0x200007d0
 8001fa4:	20000420 	.word	0x20000420
 8001fa8:	08011b1c 	.word	0x08011b1c
 8001fac:	08011b24 	.word	0x08011b24
 8001fb0:	437f0000 	.word	0x437f0000

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	@ 0x50
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 0318 	add.w	r3, r7, #24
 8001fbe:	2238      	movs	r2, #56	@ 0x38
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00b fc4d 	bl	800d862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001fda:	f003 ff93 	bl	8005f04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fe2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fe6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fec:	2303      	movs	r3, #3
 8001fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002000:	2302      	movs	r3, #2
 8002002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002004:	f107 0318 	add.w	r3, r7, #24
 8002008:	4618      	mov	r0, r3
 800200a:	f004 f82f 	bl	800606c <HAL_RCC_OscConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002014:	f000 f82a 	bl	800206c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002018:	230f      	movs	r3, #15
 800201a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201c:	2303      	movs	r3, #3
 800201e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2103      	movs	r1, #3
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fb2d 	bl	8006690 <HAL_RCC_ClockConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800203c:	f000 f816 	bl	800206c <Error_Handler>
  }
}
 8002040:	bf00      	nop
 8002042:	3750      	adds	r7, #80	@ 0x50
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800205a:	f000 fff5 	bl	8003048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40012c00 	.word	0x40012c00

0800206c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <Error_Handler+0x8>

08002078 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <MX_SPI1_Init+0x74>)
 800207e:	4a1c      	ldr	r2, [pc, #112]	@ (80020f0 <MX_SPI1_Init+0x78>)
 8002080:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002082:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <MX_SPI1_Init+0x74>)
 8002084:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002088:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800208a:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <MX_SPI1_Init+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002090:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <MX_SPI1_Init+0x74>)
 8002092:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002096:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002098:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <MX_SPI1_Init+0x74>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800209e:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020ae:	2218      	movs	r2, #24
 80020b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020c4:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020c6:	2207      	movs	r2, #7
 80020c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020d2:	2208      	movs	r2, #8
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	@ (80020ec <MX_SPI1_Init+0x74>)
 80020d8:	f004 ff14 	bl	8006f04 <HAL_SPI_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020e2:	f7ff ffc3 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000614 	.word	0x20000614
 80020f0:	40013000 	.word	0x40013000

080020f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	@ 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <HAL_SPI_MspInit+0x7c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d128      	bne.n	8002168 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <HAL_SPI_MspInit+0x80>)
 8002118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211a:	4a16      	ldr	r2, [pc, #88]	@ (8002174 <HAL_SPI_MspInit+0x80>)
 800211c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002120:	6613      	str	r3, [r2, #96]	@ 0x60
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_SPI_MspInit+0x80>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <HAL_SPI_MspInit+0x80>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	4a10      	ldr	r2, [pc, #64]	@ (8002174 <HAL_SPI_MspInit+0x80>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <HAL_SPI_MspInit+0x80>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002146:	23e0      	movs	r3, #224	@ 0xe0
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214e:	2301      	movs	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002156:	2305      	movs	r3, #5
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002164:	f003 f884 	bl	8005270 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	@ 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40013000 	.word	0x40013000
 8002174:	40021000 	.word	0x40021000

08002178 <statemachine>:
int datascreenindex=0;




void statemachine(void){
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

	switch(state){
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <statemachine+0x50>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d019      	beq.n	80021b8 <statemachine+0x40>
 8002184:	2b02      	cmp	r3, #2
 8002186:	dc1a      	bgt.n	80021be <statemachine+0x46>
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <statemachine+0x18>
 800218c:	2b01      	cmp	r3, #1
		break;

	case PRESEPARATION:


		break;
 800218e:	e016      	b.n	80021be <statemachine+0x46>
if(datascreenindex<=10){
 8002190:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <statemachine+0x54>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b0a      	cmp	r3, #10
 8002196:	dd02      	ble.n	800219e <statemachine+0x26>
else if(datascreenindex>10 && datascreenindex<=20){
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <statemachine+0x54>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b0a      	cmp	r3, #10
			datascreenindex++;
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <statemachine+0x54>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <statemachine+0x54>)
 80021a6:	6013      	str	r3, [r2, #0]
			if(datascreenindex>=30){
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <statemachine+0x54>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b1d      	cmp	r3, #29
 80021ae:	dd05      	ble.n	80021bc <statemachine+0x44>
				datascreenindex=0;
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <statemachine+0x54>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
		break;
 80021b6:	e001      	b.n	80021bc <statemachine+0x44>



	case POSTSEPARATION:

		break;
 80021b8:	bf00      	nop
 80021ba:	e000      	b.n	80021be <statemachine+0x46>
		break;
 80021bc:	bf00      	nop


	}


}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	20000604 	.word	0x20000604
 80021cc:	20000678 	.word	0x20000678

080021d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_MspInit+0x50>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	4a11      	ldr	r2, [pc, #68]	@ (8002220 <HAL_MspInit+0x50>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <HAL_MspInit+0x50>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <HAL_MspInit+0x50>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002220 <HAL_MspInit+0x50>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_MspInit+0x50>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	210f      	movs	r1, #15
 800220a:	f06f 0001 	mvn.w	r0, #1
 800220e:	f002 fcc9 	bl	8004ba4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002212:	f003 ff1b 	bl	800604c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000

08002224 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	@ 0x30
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002234:	4b2c      	ldr	r3, [pc, #176]	@ (80022e8 <HAL_InitTick+0xc4>)
 8002236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002238:	4a2b      	ldr	r2, [pc, #172]	@ (80022e8 <HAL_InitTick+0xc4>)
 800223a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800223e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002240:	4b29      	ldr	r3, [pc, #164]	@ (80022e8 <HAL_InitTick+0xc4>)
 8002242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800224c:	f107 020c 	add.w	r2, r7, #12
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f004 fbee 	bl	8006a38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800225c:	f004 fbd6 	bl	8006a0c <HAL_RCC_GetPCLK2Freq>
 8002260:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002264:	4a21      	ldr	r2, [pc, #132]	@ (80022ec <HAL_InitTick+0xc8>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0c9b      	lsrs	r3, r3, #18
 800226c:	3b01      	subs	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002270:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <HAL_InitTick+0xcc>)
 8002272:	4a20      	ldr	r2, [pc, #128]	@ (80022f4 <HAL_InitTick+0xd0>)
 8002274:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002276:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <HAL_InitTick+0xcc>)
 8002278:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800227c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_InitTick+0xcc>)
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <HAL_InitTick+0xcc>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_InitTick+0xcc>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002290:	4817      	ldr	r0, [pc, #92]	@ (80022f0 <HAL_InitTick+0xcc>)
 8002292:	f004 fee2 	bl	800705a <HAL_TIM_Base_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800229c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11b      	bne.n	80022dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80022a4:	4812      	ldr	r0, [pc, #72]	@ (80022f0 <HAL_InitTick+0xcc>)
 80022a6:	f004 ff2f 	bl	8007108 <HAL_TIM_Base_Start_IT>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80022b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d111      	bne.n	80022dc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80022b8:	2019      	movs	r0, #25
 80022ba:	f002 fc8d 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d808      	bhi.n	80022d6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80022c4:	2200      	movs	r2, #0
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	2019      	movs	r0, #25
 80022ca:	f002 fc6b 	bl	8004ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <HAL_InitTick+0xd4>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	e002      	b.n	80022dc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3730      	adds	r7, #48	@ 0x30
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	431bde83 	.word	0x431bde83
 80022f0:	2000067c 	.word	0x2000067c
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	2000000c 	.word	0x2000000c

080022fc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002300:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <SDTimer_Handler+0x40>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <SDTimer_Handler+0x1c>
    Timer1--;
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <SDTimer_Handler+0x40>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b09      	ldr	r3, [pc, #36]	@ (800233c <SDTimer_Handler+0x40>)
 8002316:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <SDTimer_Handler+0x44>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <SDTimer_Handler+0x34>
    Timer2--;
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <SDTimer_Handler+0x44>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <SDTimer_Handler+0x44>)
 800232e:	701a      	strb	r2, [r3, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	200002f0 	.word	0x200002f0
 8002340:	200002f1 	.word	0x200002f1

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <NMI_Handler+0x4>

0800234c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <HardFault_Handler+0x4>

08002354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <MemManage_Handler+0x4>

0800235c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <BusFault_Handler+0x4>

08002364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <UsageFault_Handler+0x4>

0800236c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800237e:	2010      	movs	r0, #16
 8002380:	f003 f942 	bl	8005608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <DMA1_Channel1_IRQHandler+0x10>)
 800238e:	f002 fe14 	bl	8004fba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000768 	.word	0x20000768

0800239c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <DMA1_Channel2_IRQHandler+0x10>)
 80023a2:	f002 fe0a 	bl	8004fba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000280 	.word	0x20000280

080023b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80023b4:	4802      	ldr	r0, [pc, #8]	@ (80023c0 <DMA1_Channel3_IRQHandler+0x10>)
 80023b6:	f002 fe00 	bl	8004fba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000864 	.word	0x20000864

080023c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023c8:	4802      	ldr	r0, [pc, #8]	@ (80023d4 <ADC1_2_IRQHandler+0x10>)
 80023ca:	f001 faf5 	bl	80039b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000214 	.word	0x20000214

080023d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023dc:	4802      	ldr	r0, [pc, #8]	@ (80023e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80023de:	f005 fa6f 	bl	80078c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000067c 	.word	0x2000067c

080023ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	FatFsCnt++;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <TIM4_IRQHandler+0x30>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <TIM4_IRQHandler+0x30>)
 80023fc:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80023fe:	4b07      	ldr	r3, [pc, #28]	@ (800241c <TIM4_IRQHandler+0x30>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b09      	cmp	r3, #9
 8002406:	d904      	bls.n	8002412 <TIM4_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8002408:	4b04      	ldr	r3, [pc, #16]	@ (800241c <TIM4_IRQHandler+0x30>)
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 800240e:	f7ff ff75 	bl	80022fc <SDTimer_Handler>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002412:	4803      	ldr	r0, [pc, #12]	@ (8002420 <TIM4_IRQHandler+0x34>)
 8002414:	f005 fa54 	bl	80078c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200006c8 	.word	0x200006c8
 8002420:	2000071c 	.word	0x2000071c

08002424 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002428:	4802      	ldr	r0, [pc, #8]	@ (8002434 <LPUART1_IRQHandler+0x10>)
 800242a:	f006 fe4b 	bl	80090c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200007d0 	.word	0x200007d0

08002438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return 1;
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_kill>:

int _kill(int pid, int sig)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002452:	f00b fa59 	bl	800d908 <__errno>
 8002456:	4603      	mov	r3, r0
 8002458:	2216      	movs	r2, #22
 800245a:	601a      	str	r2, [r3, #0]
  return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_exit>:

void _exit (int status)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffe7 	bl	8002448 <_kill>
  while (1) {}    /* Make sure we hang here */
 800247a:	bf00      	nop
 800247c:	e7fd      	b.n	800247a <_exit+0x12>

0800247e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e00a      	b.n	80024a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002490:	f3af 8000 	nop.w
 8002494:	4601      	mov	r1, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	60ba      	str	r2, [r7, #8]
 800249c:	b2ca      	uxtb	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dbf0      	blt.n	8002490 <_read+0x12>
  }

  return len;
 80024ae:	687b      	ldr	r3, [r7, #4]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e009      	b.n	80024de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	60ba      	str	r2, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	dbf1      	blt.n	80024ca <_write+0x12>
  }
  return len;
 80024e6:	687b      	ldr	r3, [r7, #4]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_close>:

int _close(int file)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002518:	605a      	str	r2, [r3, #4]
  return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_isatty>:

int _isatty(int file)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002530:	2301      	movs	r3, #1
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f00b f9be 	bl	800d908 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20008000 	.word	0x20008000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	200006cc 	.word	0x200006cc
 80025c0:	20003290 	.word	0x20003290

080025c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <SystemInit+0x20>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <SystemInit+0x20>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08e      	sub	sp, #56	@ 0x38
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	460a      	mov	r2, r1
 80025f2:	71fb      	strb	r3, [r7, #7]
 80025f4:	4613      	mov	r3, r2
 80025f6:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 80025f8:	2306      	movs	r3, #6
 80025fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 80025fe:	2304      	movs	r3, #4
 8002600:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 800260a:	4a6f      	ldr	r2, [pc, #444]	@ (80027c8 <INIT_PERM_TARVOS+0x1e0>)
 800260c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002614:	6018      	str	r0, [r3, #0]
 8002616:	3304      	adds	r3, #4
 8002618:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 800261a:	4a6c      	ldr	r2, [pc, #432]	@ (80027cc <INIT_PERM_TARVOS+0x1e4>)
 800261c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002624:	6018      	str	r0, [r3, #0]
 8002626:	3304      	adds	r3, #4
 8002628:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 800262a:	4a69      	ldr	r2, [pc, #420]	@ (80027d0 <INIT_PERM_TARVOS+0x1e8>)
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002634:	6018      	str	r0, [r3, #0]
 8002636:	3304      	adds	r3, #4
 8002638:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 800263a:	2302      	movs	r3, #2
 800263c:	753b      	strb	r3, [r7, #20]
 800263e:	2309      	movs	r3, #9
 8002640:	757b      	strb	r3, [r7, #21]
 8002642:	2302      	movs	r3, #2
 8002644:	75bb      	strb	r3, [r7, #22]
 8002646:	230b      	movs	r3, #11
 8002648:	75fb      	strb	r3, [r7, #23]
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	763b      	strb	r3, [r7, #24]
 800264e:	2300      	movs	r3, #0
 8002650:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 8002652:	2302      	movs	r3, #2
 8002654:	733b      	strb	r3, [r7, #12]
 8002656:	2309      	movs	r3, #9
 8002658:	737b      	strb	r3, [r7, #13]
 800265a:	2302      	movs	r3, #2
 800265c:	73bb      	strb	r3, [r7, #14]
 800265e:	2308      	movs	r3, #8
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	79bb      	ldrb	r3, [r7, #6]
 8002664:	743b      	strb	r3, [r7, #16]
 8002666:	2300      	movs	r3, #0
 8002668:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 800266a:	4b5a      	ldr	r3, [pc, #360]	@ (80027d4 <INIT_PERM_TARVOS+0x1ec>)
 800266c:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 800266e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f8ac 	bl	80027dc <Get_CRC8>
 8002684:	4603      	mov	r3, r0
 8002686:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 800268a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800268e:	b29a      	uxth	r2, r3
 8002690:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002694:	2364      	movs	r3, #100	@ 0x64
 8002696:	4850      	ldr	r0, [pc, #320]	@ (80027d8 <INIT_PERM_TARVOS+0x1f0>)
 8002698:	f006 fae0 	bl	8008c5c <HAL_UART_Transmit>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 80026a8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f88f 	bl	80027dc <Get_CRC8>
 80026be:	4603      	mov	r3, r0
 80026c0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 80026c4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80026ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80026d2:	4841      	ldr	r0, [pc, #260]	@ (80027d8 <INIT_PERM_TARVOS+0x1f0>)
 80026d4:	f006 fac2 	bl	8008c5c <HAL_UART_Transmit>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 80026e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f871 	bl	80027dc <Get_CRC8>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 8002700:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002704:	b29a      	uxth	r2, r3
 8002706:	f107 011c 	add.w	r1, r7, #28
 800270a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800270e:	4832      	ldr	r0, [pc, #200]	@ (80027d8 <INIT_PERM_TARVOS+0x1f0>)
 8002710:	f006 faa4 	bl	8008c5c <HAL_UART_Transmit>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 8002720:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f853 	bl	80027dc <Get_CRC8>
 8002736:	4603      	mov	r3, r0
 8002738:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 800273a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800273e:	b29a      	uxth	r2, r3
 8002740:	f107 0114 	add.w	r1, r7, #20
 8002744:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002748:	4823      	ldr	r0, [pc, #140]	@ (80027d8 <INIT_PERM_TARVOS+0x1f0>)
 800274a:	f006 fa87 	bl	8008c5c <HAL_UART_Transmit>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 800275a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f836 	bl	80027dc <Get_CRC8>
 8002770:	4603      	mov	r3, r0
 8002772:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8002774:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002778:	b29a      	uxth	r2, r3
 800277a:	f107 010c 	add.w	r1, r7, #12
 800277e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002782:	4815      	ldr	r0, [pc, #84]	@ (80027d8 <INIT_PERM_TARVOS+0x1f0>)
 8002784:	f006 fa6a 	bl	8008c5c <HAL_UART_Transmit>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8002794:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002798:	b29a      	uxth	r2, r3
 800279a:	f107 0108 	add.w	r1, r7, #8
 800279e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80027a2:	480d      	ldr	r0, [pc, #52]	@ (80027d8 <INIT_PERM_TARVOS+0x1f0>)
 80027a4:	f006 fa5a 	bl	8008c5c <HAL_UART_Transmit>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 80027b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027b8:	f000 fc64 	bl	8003084 <HAL_Delay>
    return status;
 80027bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3738      	adds	r7, #56	@ 0x38
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	08011b50 	.word	0x08011b50
 80027cc:	08011b58 	.word	0x08011b58
 80027d0:	08011b60 	.word	0x08011b60
 80027d4:	07000502 	.word	0x07000502
 80027d8:	200007d0 	.word	0x200007d0

080027dc <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 80027ec:	2300      	movs	r3, #0
 80027ee:	81bb      	strh	r3, [r7, #12]
 80027f0:	e009      	b.n	8002806 <Get_CRC8+0x2a>
		crc ^= bufP[i];
 80027f2:	89bb      	ldrh	r3, [r7, #12]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	4053      	eors	r3, r2
 80027fe:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8002800:	89bb      	ldrh	r3, [r7, #12]
 8002802:	3301      	adds	r3, #1
 8002804:	81bb      	strh	r3, [r7, #12]
 8002806:	89ba      	ldrh	r2, [r7, #12]
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	429a      	cmp	r2, r3
 800280c:	d3f1      	bcc.n	80027f2 <Get_CRC8+0x16>
	}
	return crc;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <SEND_DATA_NETW1>:

    return status;

}

void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 800281c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002820:	b08a      	sub	sp, #40	@ 0x28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	72fb      	strb	r3, [r7, #11]
 800282c:	4613      	mov	r3, r2
 800282e:	72bb      	strb	r3, [r7, #10]
 8002830:	466b      	mov	r3, sp
 8002832:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1d9e      	adds	r6, r3, #6
 8002838:	1e73      	subs	r3, r6, #1
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	4632      	mov	r2, r6
 800283e:	2300      	movs	r3, #0
 8002840:	4690      	mov	r8, r2
 8002842:	4699      	mov	r9, r3
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002850:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002854:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002858:	4632      	mov	r2, r6
 800285a:	2300      	movs	r3, #0
 800285c:	4614      	mov	r4, r2
 800285e:	461d      	mov	r5, r3
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	00eb      	lsls	r3, r5, #3
 800286a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286e:	00e2      	lsls	r2, r4, #3
 8002870:	4633      	mov	r3, r6
 8002872:	3307      	adds	r3, #7
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	ebad 0d03 	sub.w	sp, sp, r3
 800287c:	466b      	mov	r3, sp
 800287e:	3300      	adds	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	2201      	movs	r2, #1
 800288c:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	3302      	adds	r3, #2
 8002894:	b2da      	uxtb	r2, r3
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	7afa      	ldrb	r2, [r7, #11]
 800289e:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	7aba      	ldrb	r2, [r7, #10]
 80028a4:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80028ac:	e00e      	b.n	80028cc <SEND_DATA_NETW1+0xb0>
        trame[5 + i] = data[i];
 80028ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	441a      	add	r2, r3
 80028b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028ba:	3305      	adds	r3, #5
 80028bc:	7811      	ldrb	r1, [r2, #0]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 80028c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028c6:	3301      	adds	r3, #1
 80028c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80028cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	dceb      	bgt.n	80028ae <SEND_DATA_NETW1+0x92>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3305      	adds	r3, #5
 80028dc:	b29a      	uxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	1d5c      	adds	r4, r3, #5
 80028e2:	4611      	mov	r1, r2
 80028e4:	69f8      	ldr	r0, [r7, #28]
 80028e6:	f7ff ff79 	bl	80027dc <Get_CRC8>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 80028f2:	b2b2      	uxth	r2, r6
 80028f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028f8:	69f9      	ldr	r1, [r7, #28]
 80028fa:	4808      	ldr	r0, [pc, #32]	@ (800291c <SEND_DATA_NETW1+0x100>)
 80028fc:	f006 f9ae 	bl	8008c5c <HAL_UART_Transmit>
    uint8_t bufferreceivetest[10];
    HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)bufferreceivetest,5);
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	2205      	movs	r2, #5
 8002906:	4619      	mov	r1, r3
 8002908:	4804      	ldr	r0, [pc, #16]	@ (800291c <SEND_DATA_NETW1+0x100>)
 800290a:	f006 fa35 	bl	8008d78 <HAL_UART_Receive_IT>
 800290e:	46d5      	mov	sp, sl

}
 8002910:	bf00      	nop
 8002912:	3728      	adds	r7, #40	@ 0x28
 8002914:	46bd      	mov	sp, r7
 8002916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800291a:	bf00      	nop
 800291c:	200007d0 	.word	0x200007d0

08002920 <create_and_send_payload>:
	return status;

}

//payload size==32
void create_and_send_payload(uint8_t* buffer,uint8_t channel,uint8_t dest_adress,uint16_t header_code,uint8_t flag1,uint8_t flag2,float latitude,float longitude,float altitude,float altitude_baro,float extra1,float extra2,int32_t extra_int){
 8002920:	b580      	push	{r7, lr}
 8002922:	b092      	sub	sp, #72	@ 0x48
 8002924:	af00      	add	r7, sp, #0
 8002926:	61f8      	str	r0, [r7, #28]
 8002928:	4608      	mov	r0, r1
 800292a:	4611      	mov	r1, r2
 800292c:	461a      	mov	r2, r3
 800292e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002932:	edc7 0a04 	vstr	s1, [r7, #16]
 8002936:	ed87 1a03 	vstr	s2, [r7, #12]
 800293a:	edc7 1a02 	vstr	s3, [r7, #8]
 800293e:	ed87 2a01 	vstr	s4, [r7, #4]
 8002942:	edc7 2a00 	vstr	s5, [r7]
 8002946:	4603      	mov	r3, r0
 8002948:	76fb      	strb	r3, [r7, #27]
 800294a:	460b      	mov	r3, r1
 800294c:	76bb      	strb	r3, [r7, #26]
 800294e:	4613      	mov	r3, r2
 8002950:	833b      	strh	r3, [r7, #24]
    uint8_t buffdonnee[34];
    buffdonnee[0] = (header_code >> 8) & 0xFF;
 8002952:	8b3b      	ldrh	r3, [r7, #24]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	b29b      	uxth	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    buffdonnee[1] = header_code & 0xFF;
 800295e:	8b3b      	ldrh	r3, [r7, #24]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    buffdonnee[2] = flag1;
 8002966:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800296a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    buffdonnee[3] = flag2;
 800296e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    memcpy(&buffdonnee[4],  &latitude,      sizeof(float));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	62bb      	str	r3, [r7, #40]	@ 0x28
    memcpy(&buffdonnee[8],  &longitude,     sizeof(float));
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(&buffdonnee[12], &altitude,      sizeof(float));
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	633b      	str	r3, [r7, #48]	@ 0x30
    memcpy(&buffdonnee[16], &altitude_baro, sizeof(float));
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(&buffdonnee[20], &extra1,        sizeof(float));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	63bb      	str	r3, [r7, #56]	@ 0x38
    memcpy(&buffdonnee[24], &extra2,        sizeof(float));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memcpy(&buffdonnee[28], &extra_int,     sizeof(int32_t));
 800298e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002990:	643b      	str	r3, [r7, #64]	@ 0x40
    buffdonnee[33]=0x00;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    buffdonnee[34]=0x00;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 32);
 800299e:	7eba      	ldrb	r2, [r7, #26]
 80029a0:	7ef9      	ldrb	r1, [r7, #27]
 80029a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80029a6:	2320      	movs	r3, #32
 80029a8:	f7ff ff38 	bl	800281c <SEND_DATA_NETW1>

}
 80029ac:	bf00      	nop
 80029ae:	3748      	adds	r7, #72	@ 0x48
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <decode_payload>:

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d12e      	bne.n	8002a24 <decode_payload+0x70>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b81      	cmp	r3, #129	@ 0x81
 80029ce:	d129      	bne.n	8002a24 <decode_payload+0x70>
		return;
	}
	if(receivingbuffer[2]!=34){
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	3302      	adds	r3, #2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b22      	cmp	r3, #34	@ 0x22
 80029d8:	d126      	bne.n	8002a28 <decode_payload+0x74>
		return;
	}

	out->senderadress=receivingbuffer[3];
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	78da      	ldrb	r2, [r3, #3]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	3304      	adds	r3, #4
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b21b      	sxth	r3, r3
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	3305      	adds	r3, #5
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	b21b      	sxth	r3, r3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag1 = receivingbuffer[6];
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	799a      	ldrb	r2, [r3, #6]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag2 = receivingbuffer[7];
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	79da      	ldrb	r2, [r3, #7]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    noreturn_flag2=1;
    }

#endif

    memset((uint8_t *)receivingbuffer,0,64);
 8002a18:	2240      	movs	r2, #64	@ 0x40
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	6838      	ldr	r0, [r7, #0]
 8002a1e:	f00a ff20 	bl	800d862 <memset>
 8002a22:	e002      	b.n	8002a2a <decode_payload+0x76>
		return;
 8002a24:	bf00      	nop
 8002a26:	e000      	b.n	8002a2a <decode_payload+0x76>
		return;
 8002a28:	bf00      	nop
}
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	@ 0x38
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a50:	463b      	mov	r3, r7
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	611a      	str	r2, [r3, #16]
 8002a5e:	615a      	str	r2, [r3, #20]
 8002a60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a62:	4b2d      	ldr	r3, [pc, #180]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002a64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a70:	4b29      	ldr	r3, [pc, #164]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 8002a76:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002a78:	227c      	movs	r2, #124	@ 0x7c
 8002a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7c:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a82:	4b25      	ldr	r3, [pc, #148]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a88:	4823      	ldr	r0, [pc, #140]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002a8a:	f004 fae6 	bl	800705a <HAL_TIM_Base_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a94:	f7ff faea 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	481c      	ldr	r0, [pc, #112]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002aa6:	f005 f96f 	bl	8007d88 <HAL_TIM_ConfigClockSource>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002ab0:	f7ff fadc 	bl	800206c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ab4:	4818      	ldr	r0, [pc, #96]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002ab6:	f004 fb91 	bl	80071dc <HAL_TIM_PWM_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ac0:	f7ff fad4 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4811      	ldr	r0, [pc, #68]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002ad4:	f005 ffaa 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002ade:	f7ff fac5 	bl	800206c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae2:	2360      	movs	r3, #96	@ 0x60
 8002ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af2:	463b      	mov	r3, r7
 8002af4:	2204      	movs	r2, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4807      	ldr	r0, [pc, #28]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002afa:	f005 f831 	bl	8007b60 <HAL_TIM_PWM_ConfigChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002b04:	f7ff fab2 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b08:	4803      	ldr	r0, [pc, #12]	@ (8002b18 <MX_TIM2_Init+0xe8>)
 8002b0a:	f000 f8bb 	bl	8002c84 <HAL_TIM_MspPostInit>

}
 8002b0e:	bf00      	nop
 8002b10:	3738      	adds	r7, #56	@ 0x38
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200006d0 	.word	0x200006d0

08002b1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b22:	f107 0310 	add.w	r3, r7, #16
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <MX_TIM4_Init+0x94>)
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <MX_TIM4_Init+0x98>)
 8002b3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <MX_TIM4_Init+0x94>)
 8002b42:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002b46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <MX_TIM4_Init+0x94>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8002b4e:	4b18      	ldr	r3, [pc, #96]	@ (8002bb0 <MX_TIM4_Init+0x94>)
 8002b50:	2209      	movs	r2, #9
 8002b52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b54:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <MX_TIM4_Init+0x94>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <MX_TIM4_Init+0x94>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b60:	4813      	ldr	r0, [pc, #76]	@ (8002bb0 <MX_TIM4_Init+0x94>)
 8002b62:	f004 fa7a 	bl	800705a <HAL_TIM_Base_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b6c:	f7ff fa7e 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b76:	f107 0310 	add.w	r3, r7, #16
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	480c      	ldr	r0, [pc, #48]	@ (8002bb0 <MX_TIM4_Init+0x94>)
 8002b7e:	f005 f903 	bl	8007d88 <HAL_TIM_ConfigClockSource>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002b88:	f7ff fa70 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4805      	ldr	r0, [pc, #20]	@ (8002bb0 <MX_TIM4_Init+0x94>)
 8002b9a:	f005 ff47 	bl	8008a2c <HAL_TIMEx_MasterConfigSynchronization>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002ba4:	f7ff fa62 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ba8:	bf00      	nop
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	2000071c 	.word	0x2000071c
 8002bb4:	40000800 	.word	0x40000800

08002bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc8:	d136      	bne.n	8002c38 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bca:	4b2a      	ldr	r3, [pc, #168]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	4a29      	ldr	r2, [pc, #164]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bd6:	4b27      	ldr	r3, [pc, #156]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8002be2:	4b25      	ldr	r3, [pc, #148]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002be4:	4a25      	ldr	r2, [pc, #148]	@ (8002c7c <HAL_TIM_Base_MspInit+0xc4>)
 8002be6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8002be8:	4b23      	ldr	r3, [pc, #140]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002bea:	2239      	movs	r2, #57	@ 0x39
 8002bec:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bee:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf4:	4b20      	ldr	r3, [pc, #128]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002bfc:	2280      	movs	r2, #128	@ 0x80
 8002bfe:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c06:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002c10:	2220      	movs	r2, #32
 8002c12:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002c14:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8002c1a:	4817      	ldr	r0, [pc, #92]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002c1c:	f001 ffea 	bl	8004bf4 <HAL_DMA_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8002c26:	f7ff fa21 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a12      	ldr	r2, [pc, #72]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c30:	4a11      	ldr	r2, [pc, #68]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c36:	e018      	b.n	8002c6a <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM4)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a10      	ldr	r2, [pc, #64]	@ (8002c80 <HAL_TIM_Base_MspInit+0xc8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d113      	bne.n	8002c6a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c42:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	4a0b      	ldr	r2, [pc, #44]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c4e:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2106      	movs	r1, #6
 8002c5e:	201e      	movs	r0, #30
 8002c60:	f001 ffa0 	bl	8004ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c64:	201e      	movs	r0, #30
 8002c66:	f001 ffb7 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	20000768 	.word	0x20000768
 8002c7c:	40020008 	.word	0x40020008
 8002c80:	40000800 	.word	0x40000800

08002c84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <HAL_TIM_MspPostInit+0x64>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002caa:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce8 <HAL_TIM_MspPostInit+0x64>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce8 <HAL_TIM_MspPostInit+0x64>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cdc:	f002 fac8 	bl	8005270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ce0:	bf00      	nop
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000

08002cec <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cf0:	4b21      	ldr	r3, [pc, #132]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002cf2:	4a22      	ldr	r2, [pc, #136]	@ (8002d7c <MX_LPUART1_UART_Init+0x90>)
 8002cf4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002cf6:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cfc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002d04:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002d10:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d12:	220c      	movs	r2, #12
 8002d14:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d16:	4b18      	ldr	r3, [pc, #96]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d1c:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d22:	4b15      	ldr	r3, [pc, #84]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002d2e:	4812      	ldr	r0, [pc, #72]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d30:	f005 ff44 	bl	8008bbc <HAL_UART_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002d3a:	f7ff f997 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d3e:	2100      	movs	r1, #0
 8002d40:	480d      	ldr	r0, [pc, #52]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d42:	f008 faca 	bl	800b2da <HAL_UARTEx_SetTxFifoThreshold>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002d4c:	f7ff f98e 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d50:	2100      	movs	r1, #0
 8002d52:	4809      	ldr	r0, [pc, #36]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d54:	f008 faff 	bl	800b356 <HAL_UARTEx_SetRxFifoThreshold>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002d5e:	f7ff f985 	bl	800206c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <MX_LPUART1_UART_Init+0x8c>)
 8002d64:	f008 fa80 	bl	800b268 <HAL_UARTEx_DisableFifoMode>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002d6e:	f7ff f97d 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200007d0 	.word	0x200007d0
 8002d7c:	40008000 	.word	0x40008000

08002d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b09c      	sub	sp, #112	@ 0x70
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d98:	f107 0318 	add.w	r3, r7, #24
 8002d9c:	2244      	movs	r2, #68	@ 0x44
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f00a fd5e 	bl	800d862 <memset>
  if(uartHandle->Instance==LPUART1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a47      	ldr	r2, [pc, #284]	@ (8002ec8 <HAL_UART_MspInit+0x148>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	f040 8086 	bne.w	8002ebe <HAL_UART_MspInit+0x13e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002db2:	2320      	movs	r3, #32
 8002db4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dba:	f107 0318 	add.w	r3, r7, #24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 feb0 	bl	8006b24 <HAL_RCCEx_PeriphCLKConfig>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002dca:	f7ff f94f 	bl	800206c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002dce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <HAL_UART_MspInit+0x14c>)
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8002ecc <HAL_UART_MspInit+0x14c>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002dda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_UART_MspInit+0x14c>)
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	4b39      	ldr	r3, [pc, #228]	@ (8002ecc <HAL_UART_MspInit+0x14c>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dea:	4a38      	ldr	r2, [pc, #224]	@ (8002ecc <HAL_UART_MspInit+0x14c>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df2:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <HAL_UART_MspInit+0x14c>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ecc <HAL_UART_MspInit+0x14c>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e02:	4a32      	ldr	r2, [pc, #200]	@ (8002ecc <HAL_UART_MspInit+0x14c>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e0a:	4b30      	ldr	r3, [pc, #192]	@ (8002ecc <HAL_UART_MspInit+0x14c>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e16:	2308      	movs	r3, #8
 8002e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002e26:	230c      	movs	r3, #12
 8002e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e34:	f002 fa1c 	bl	8005270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e46:	2300      	movs	r3, #0
 8002e48:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e52:	4619      	mov	r1, r3
 8002e54:	481e      	ldr	r0, [pc, #120]	@ (8002ed0 <HAL_UART_MspInit+0x150>)
 8002e56:	f002 fa0b 	bl	8005270 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed8 <HAL_UART_MspInit+0x158>)
 8002e5e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002e60:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e62:	2222      	movs	r2, #34	@ 0x22
 8002e64:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e72:	4b18      	ldr	r3, [pc, #96]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e74:	2280      	movs	r2, #128	@ 0x80
 8002e76:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e78:	4b16      	ldr	r3, [pc, #88]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e84:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e86:	2220      	movs	r2, #32
 8002e88:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002e90:	4810      	ldr	r0, [pc, #64]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002e92:	f001 feaf 	bl	8004bf4 <HAL_DMA_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8002e9c:	f7ff f8e6 	bl	800206c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002ea4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <HAL_UART_MspInit+0x154>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2105      	movs	r1, #5
 8002eb2:	205b      	movs	r0, #91	@ 0x5b
 8002eb4:	f001 fe76 	bl	8004ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002eb8:	205b      	movs	r0, #91	@ 0x5b
 8002eba:	f001 fe8d 	bl	8004bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	3770      	adds	r7, #112	@ 0x70
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40008000 	.word	0x40008000
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	48000400 	.word	0x48000400
 8002ed4:	20000864 	.word	0x20000864
 8002ed8:	40020030 	.word	0x40020030

08002edc <HAL_UART_RxCpltCallback>:
  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==LPUART1){
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2e      	ldr	r2, [pc, #184]	@ (8002fa4 <HAL_UART_RxCpltCallback+0xc8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d156      	bne.n	8002f9c <HAL_UART_RxCpltCallback+0xc0>



		if(receivingflag==0){
 8002eee:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d122      	bne.n	8002f3c <HAL_UART_RxCpltCallback+0x60>
		if(tarvos_RX_Buffer[1]==0x81 && tarvos_RX_Buffer[0]==0x02){
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8002fac <HAL_UART_RxCpltCallback+0xd0>)
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	2b81      	cmp	r3, #129	@ 0x81
 8002efc:	d110      	bne.n	8002f20 <HAL_UART_RxCpltCallback+0x44>
 8002efe:	4b2b      	ldr	r3, [pc, #172]	@ (8002fac <HAL_UART_RxCpltCallback+0xd0>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d10c      	bne.n	8002f20 <HAL_UART_RxCpltCallback+0x44>

			memcpy((uint8_t *) tarvos_DATA,(uint8_t *)tarvos_RX_Buffer,5);
 8002f06:	2205      	movs	r2, #5
 8002f08:	4928      	ldr	r1, [pc, #160]	@ (8002fac <HAL_UART_RxCpltCallback+0xd0>)
 8002f0a:	4829      	ldr	r0, [pc, #164]	@ (8002fb0 <HAL_UART_RxCpltCallback+0xd4>)
 8002f0c:	f00a fd29 	bl	800d962 <memcpy>




			receivingflag=1;
 8002f10:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
			receivingindex++;
 8002f16:	4b27      	ldr	r3, [pc, #156]	@ (8002fb4 <HAL_UART_RxCpltCallback+0xd8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a25      	ldr	r2, [pc, #148]	@ (8002fb4 <HAL_UART_RxCpltCallback+0xd8>)
 8002f1e:	6013      	str	r3, [r2, #0]
		}

		if(tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[0]==0x02){
 8002f20:	4b22      	ldr	r3, [pc, #136]	@ (8002fac <HAL_UART_RxCpltCallback+0xd0>)
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	2b40      	cmp	r3, #64	@ 0x40
 8002f26:	d11f      	bne.n	8002f68 <HAL_UART_RxCpltCallback+0x8c>
 8002f28:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <HAL_UART_RxCpltCallback+0xd0>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d11b      	bne.n	8002f68 <HAL_UART_RxCpltCallback+0x8c>
					memset((uint8_t *)tarvos_RX_Buffer,0,5);
 8002f30:	2205      	movs	r2, #5
 8002f32:	2100      	movs	r1, #0
 8002f34:	481d      	ldr	r0, [pc, #116]	@ (8002fac <HAL_UART_RxCpltCallback+0xd0>)
 8002f36:	f00a fc94 	bl	800d862 <memset>
 8002f3a:	e015      	b.n	8002f68 <HAL_UART_RxCpltCallback+0x8c>
				}


		}
		else{
			if(receivingindex!=0){
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <HAL_UART_RxCpltCallback+0xd8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d011      	beq.n	8002f68 <HAL_UART_RxCpltCallback+0x8c>
				memcpy((uint8_t *) tarvos_DATA+(5*receivingindex),(uint8_t *)tarvos_RX_Buffer,5);
 8002f44:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb4 <HAL_UART_RxCpltCallback+0xd8>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <HAL_UART_RxCpltCallback+0xd4>)
 8002f52:	4413      	add	r3, r2
 8002f54:	2205      	movs	r2, #5
 8002f56:	4915      	ldr	r1, [pc, #84]	@ (8002fac <HAL_UART_RxCpltCallback+0xd0>)
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f00a fd02 	bl	800d962 <memcpy>
				receivingindex++;
 8002f5e:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <HAL_UART_RxCpltCallback+0xd8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a13      	ldr	r2, [pc, #76]	@ (8002fb4 <HAL_UART_RxCpltCallback+0xd8>)
 8002f66:	6013      	str	r3, [r2, #0]
			}
		}

		if(receivingindex==8){
 8002f68:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <HAL_UART_RxCpltCallback+0xd8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d108      	bne.n	8002f82 <HAL_UART_RxCpltCallback+0xa6>
			receivingindex=0;
 8002f70:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <HAL_UART_RxCpltCallback+0xd8>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
			receivingflag=0;
 8002f76:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa8 <HAL_UART_RxCpltCallback+0xcc>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
			trameready=1;
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <HAL_UART_RxCpltCallback+0xdc>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
		}
						HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5);//on recoit par dma à nouveau 64 caractères
 8002f82:	2205      	movs	r2, #5
 8002f84:	4909      	ldr	r1, [pc, #36]	@ (8002fac <HAL_UART_RxCpltCallback+0xd0>)
 8002f86:	480d      	ldr	r0, [pc, #52]	@ (8002fbc <HAL_UART_RxCpltCallback+0xe0>)
 8002f88:	f005 ff42 	bl	8008e10 <HAL_UART_Receive_DMA>
						__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc0 <HAL_UART_RxCpltCallback+0xe4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_UART_RxCpltCallback+0xe4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0204 	bic.w	r2, r2, #4
 8002f9a:	601a      	str	r2, [r3, #0]

		}


}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40008000 	.word	0x40008000
 8002fa8:	200007c8 	.word	0x200007c8
 8002fac:	20000420 	.word	0x20000420
 8002fb0:	200003e0 	.word	0x200003e0
 8002fb4:	200007cc 	.word	0x200007cc
 8002fb8:	20000610 	.word	0x20000610
 8002fbc:	200007d0 	.word	0x200007d0
 8002fc0:	20000864 	.word	0x20000864

08002fc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fc4:	480d      	ldr	r0, [pc, #52]	@ (8002ffc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fc6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fc8:	f7ff fafc 	bl	80025c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fcc:	480c      	ldr	r0, [pc, #48]	@ (8003000 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fce:	490d      	ldr	r1, [pc, #52]	@ (8003004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003008 <LoopForever+0xe>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8003010 <LoopForever+0x16>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002ff2:	f00a fc8f 	bl	800d914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ff6:	f7fe fe8b 	bl	8001d10 <main>

08002ffa <LoopForever>:

LoopForever:
    b LoopForever
 8002ffa:	e7fe      	b.n	8002ffa <LoopForever>
  ldr   r0, =_estack
 8002ffc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003004:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003008:	080123bc 	.word	0x080123bc
  ldr r2, =_sbss
 800300c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003010:	2000328c 	.word	0x2000328c

08003014 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003014:	e7fe      	b.n	8003014 <COMP1_2_3_IRQHandler>

08003016 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003020:	2003      	movs	r0, #3
 8003022:	f001 fdb4 	bl	8004b8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003026:	200f      	movs	r0, #15
 8003028:	f7ff f8fc 	bl	8002224 <HAL_InitTick>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	71fb      	strb	r3, [r7, #7]
 8003036:	e001      	b.n	800303c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003038:	f7ff f8ca 	bl	80021d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800303c:	79fb      	ldrb	r3, [r7, #7]

}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800304c:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_IncTick+0x1c>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_IncTick+0x20>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4413      	add	r3, r2
 8003056:	4a03      	ldr	r2, [pc, #12]	@ (8003064 <HAL_IncTick+0x1c>)
 8003058:	6013      	str	r3, [r2, #0]
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	200008c4 	.word	0x200008c4
 8003068:	20000010 	.word	0x20000010

0800306c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return uwTick;
 8003070:	4b03      	ldr	r3, [pc, #12]	@ (8003080 <HAL_GetTick+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	200008c4 	.word	0x200008c4

08003084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff ffee 	bl	800306c <HAL_GetTick>
 8003090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d004      	beq.n	80030a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800309e:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_Delay+0x40>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030a8:	bf00      	nop
 80030aa:	f7ff ffdf 	bl	800306c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d8f7      	bhi.n	80030aa <HAL_Delay+0x26>
  {
  }
}
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000010 	.word	0x20000010

080030c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	609a      	str	r2, [r3, #8]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3360      	adds	r3, #96	@ 0x60
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <LL_ADC_SetOffset+0x44>)
 8003152:	4013      	ands	r3, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	4313      	orrs	r3, r2
 8003160:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	03fff000 	.word	0x03fff000

08003178 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3360      	adds	r3, #96	@ 0x60
 8003186:	461a      	mov	r2, r3
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3360      	adds	r3, #96	@ 0x60
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80031da:	b480      	push	{r7}
 80031dc:	b087      	sub	sp, #28
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3360      	adds	r3, #96	@ 0x60
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	431a      	orrs	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3360      	adds	r3, #96	@ 0x60
 8003220:	461a      	mov	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	431a      	orrs	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	615a      	str	r2, [r3, #20]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003292:	b480      	push	{r7}
 8003294:	b087      	sub	sp, #28
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3330      	adds	r3, #48	@ 0x30
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	4413      	add	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	211f      	movs	r1, #31
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	f003 011f 	and.w	r1, r3, #31
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	431a      	orrs	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3314      	adds	r3, #20
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	0e5b      	lsrs	r3, r3, #25
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	4413      	add	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	0d1b      	lsrs	r3, r3, #20
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2107      	movs	r1, #7
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	401a      	ands	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	0d1b      	lsrs	r3, r3, #20
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	431a      	orrs	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0318 	and.w	r3, r3, #24
 800338a:	4908      	ldr	r1, [pc, #32]	@ (80033ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800338c:	40d9      	lsrs	r1, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	400b      	ands	r3, r1
 8003392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003396:	431a      	orrs	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800339e:	bf00      	nop
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	0007ffff 	.word	0x0007ffff

080033b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 031f 	and.w	r3, r3, #31
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80033f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6093      	str	r3, [r2, #8]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800341c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003420:	d101      	bne.n	8003426 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003444:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003448:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003470:	d101      	bne.n	8003476 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003494:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <LL_ADC_IsEnabled+0x18>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <LL_ADC_IsEnabled+0x1a>
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034e6:	f043 0204 	orr.w	r2, r3, #4
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b04      	cmp	r3, #4
 800350c:	d101      	bne.n	8003512 <LL_ADC_REG_IsConversionOngoing+0x18>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d101      	bne.n	8003538 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e167      	b.n	8003832 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fd fe15 	bl	80011a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff3f 	bl	800340c <LL_ADC_IsDeepPowerDownEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d004      	beq.n	800359e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff25 	bl	80033e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ff5a 	bl	800345c <LL_ADC_IsInternalRegulatorEnabled>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d115      	bne.n	80035da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff ff3e 	bl	8003434 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b8:	4ba0      	ldr	r3, [pc, #640]	@ (800383c <HAL_ADC_Init+0x2f4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	4aa0      	ldr	r2, [pc, #640]	@ (8003840 <HAL_ADC_Init+0x2f8>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035cc:	e002      	b.n	80035d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f9      	bne.n	80035ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ff3c 	bl	800345c <LL_ADC_IsInternalRegulatorEnabled>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ff75 	bl	80034fa <LL_ADC_REG_IsConversionOngoing>
 8003610:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 8100 	bne.w	8003820 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 80fc 	bne.w	8003820 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ff35 	bl	80034ac <LL_ADC_IsEnabled>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d111      	bne.n	800366c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003648:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800364c:	f7ff ff2e 	bl	80034ac <LL_ADC_IsEnabled>
 8003650:	4604      	mov	r4, r0
 8003652:	487c      	ldr	r0, [pc, #496]	@ (8003844 <HAL_ADC_Init+0x2fc>)
 8003654:	f7ff ff2a 	bl	80034ac <LL_ADC_IsEnabled>
 8003658:	4603      	mov	r3, r0
 800365a:	4323      	orrs	r3, r4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4619      	mov	r1, r3
 8003666:	4878      	ldr	r0, [pc, #480]	@ (8003848 <HAL_ADC_Init+0x300>)
 8003668:	f7ff fd2e 	bl	80030c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7f5b      	ldrb	r3, [r3, #29]
 8003670:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003676:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800367c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003682:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800368a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003696:	2b01      	cmp	r3, #1
 8003698:	d106      	bne.n	80036a8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	3b01      	subs	r3, #1
 80036a0:	045b      	lsls	r3, r3, #17
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	4b60      	ldr	r3, [pc, #384]	@ (800384c <HAL_ADC_Init+0x304>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff ff14 	bl	8003520 <LL_ADC_INJ_IsConversionOngoing>
 80036f8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d16d      	bne.n	80037dc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d16a      	bne.n	80037dc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800370a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003712:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003722:	f023 0302 	bic.w	r3, r3, #2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	69b9      	ldr	r1, [r7, #24]
 800372c:	430b      	orrs	r3, r1
 800372e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d017      	beq.n	8003768 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003746:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003750:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003754:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6911      	ldr	r1, [r2, #16]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	430b      	orrs	r3, r1
 8003762:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003766:	e013      	b.n	8003790 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003776:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003788:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800378c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003796:	2b01      	cmp	r3, #1
 8003798:	d118      	bne.n	80037cc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037bc:	430a      	orrs	r2, r1
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	611a      	str	r2, [r3, #16]
 80037ca:	e007      	b.n	80037dc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10c      	bne.n	80037fe <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	f023 010f 	bic.w	r1, r3, #15
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	1e5a      	subs	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80037fc:	e007      	b.n	800380e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 020f 	bic.w	r2, r2, #15
 800380c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	f043 0201 	orr.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800381e:	e007      	b.n	8003830 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003824:	f043 0210 	orr.w	r2, r3, #16
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003830:	7ffb      	ldrb	r3, [r7, #31]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3724      	adds	r7, #36	@ 0x24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd90      	pop	{r4, r7, pc}
 800383a:	bf00      	nop
 800383c:	20000008 	.word	0x20000008
 8003840:	053e2d63 	.word	0x053e2d63
 8003844:	50000100 	.word	0x50000100
 8003848:	50000300 	.word	0x50000300
 800384c:	fff04007 	.word	0xfff04007

08003850 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800385c:	4851      	ldr	r0, [pc, #324]	@ (80039a4 <HAL_ADC_Start_DMA+0x154>)
 800385e:	f7ff fda7 	bl	80033b0 <LL_ADC_GetMultimode>
 8003862:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fe46 	bl	80034fa <LL_ADC_REG_IsConversionOngoing>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	f040 808f 	bne.w	8003994 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_ADC_Start_DMA+0x34>
 8003880:	2302      	movs	r3, #2
 8003882:	e08a      	b.n	800399a <HAL_ADC_Start_DMA+0x14a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b05      	cmp	r3, #5
 8003896:	d002      	beq.n	800389e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b09      	cmp	r3, #9
 800389c:	d173      	bne.n	8003986 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 feb2 	bl	8004608 <ADC_Enable>
 80038a4:	4603      	mov	r3, r0
 80038a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d166      	bne.n	800397c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a38      	ldr	r2, [pc, #224]	@ (80039a8 <HAL_ADC_Start_DMA+0x158>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d002      	beq.n	80038d2 <HAL_ADC_Start_DMA+0x82>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	e001      	b.n	80038d6 <HAL_ADC_Start_DMA+0x86>
 80038d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	4293      	cmp	r3, r2
 80038dc:	d002      	beq.n	80038e4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003900:	f023 0206 	bic.w	r2, r3, #6
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	661a      	str	r2, [r3, #96]	@ 0x60
 8003908:	e002      	b.n	8003910 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003914:	4a25      	ldr	r2, [pc, #148]	@ (80039ac <HAL_ADC_Start_DMA+0x15c>)
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391c:	4a24      	ldr	r2, [pc, #144]	@ (80039b0 <HAL_ADC_Start_DMA+0x160>)
 800391e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003924:	4a23      	ldr	r2, [pc, #140]	@ (80039b4 <HAL_ADC_Start_DMA+0x164>)
 8003926:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	221c      	movs	r2, #28
 800392e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0210 	orr.w	r2, r2, #16
 8003946:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3340      	adds	r3, #64	@ 0x40
 8003962:	4619      	mov	r1, r3
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f001 f9ec 	bl	8004d44 <HAL_DMA_Start_IT>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fdac 	bl	80034d2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800397a:	e00d      	b.n	8003998 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003984:	e008      	b.n	8003998 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003992:	e001      	b.n	8003998 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003994:	2302      	movs	r3, #2
 8003996:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003998:	7dfb      	ldrb	r3, [r7, #23]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	50000300 	.word	0x50000300
 80039a8:	50000100 	.word	0x50000100
 80039ac:	08004715 	.word	0x08004715
 80039b0:	080047ed 	.word	0x080047ed
 80039b4:	08004809 	.word	0x08004809

080039b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	@ 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80039c0:	2300      	movs	r3, #0
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039d4:	4883      	ldr	r0, [pc, #524]	@ (8003be4 <HAL_ADC_IRQHandler+0x22c>)
 80039d6:	f7ff fceb 	bl	80033b0 <LL_ADC_GetMultimode>
 80039da:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d017      	beq.n	8003a16 <HAL_ADC_IRQHandler+0x5e>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a00:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 ff65 	bl	80048d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2202      	movs	r2, #2
 8003a14:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <HAL_ADC_IRQHandler+0x72>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8085 	beq.w	8003b40 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d07f      	beq.n	8003b40 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fc05 	bl	800326c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d064      	beq.n	8003b32 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a5e      	ldr	r2, [pc, #376]	@ (8003be8 <HAL_ADC_IRQHandler+0x230>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d002      	beq.n	8003a78 <HAL_ADC_IRQHandler+0xc0>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	e001      	b.n	8003a7c <HAL_ADC_IRQHandler+0xc4>
 8003a78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d008      	beq.n	8003a96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d002      	beq.n	8003a96 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b09      	cmp	r3, #9
 8003a94:	d104      	bne.n	8003aa0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	e00d      	b.n	8003abc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a50      	ldr	r2, [pc, #320]	@ (8003be8 <HAL_ADC_IRQHandler+0x230>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d002      	beq.n	8003ab0 <HAL_ADC_IRQHandler+0xf8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	e001      	b.n	8003ab4 <HAL_ADC_IRQHandler+0xfc>
 8003ab0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ab4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d135      	bne.n	8003b32 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d12e      	bne.n	8003b32 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fd0e 	bl	80034fa <LL_ADC_REG_IsConversionOngoing>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d11a      	bne.n	8003b1a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 020c 	bic.w	r2, r2, #12
 8003af2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d112      	bne.n	8003b32 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b18:	e00b      	b.n	8003b32 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd fbc0 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	220c      	movs	r2, #12
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <HAL_ADC_IRQHandler+0x19c>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 809e 	beq.w	8003c9c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8098 	beq.w	8003c9c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fbae 	bl	80032ea <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003b8e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fb69 	bl	800326c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b9a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a11      	ldr	r2, [pc, #68]	@ (8003be8 <HAL_ADC_IRQHandler+0x230>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d002      	beq.n	8003bac <HAL_ADC_IRQHandler+0x1f4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	e001      	b.n	8003bb0 <HAL_ADC_IRQHandler+0x1f8>
 8003bac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d008      	beq.n	8003bca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d002      	beq.n	8003bca <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b07      	cmp	r3, #7
 8003bc8:	d104      	bne.n	8003bd4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	e011      	b.n	8003bf8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a03      	ldr	r2, [pc, #12]	@ (8003be8 <HAL_ADC_IRQHandler+0x230>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d006      	beq.n	8003bec <HAL_ADC_IRQHandler+0x234>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	e005      	b.n	8003bf0 <HAL_ADC_IRQHandler+0x238>
 8003be4:	50000300 	.word	0x50000300
 8003be8:	50000100 	.word	0x50000100
 8003bec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003bf0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d047      	beq.n	8003c8e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_ADC_IRQHandler+0x260>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d03f      	beq.n	8003c8e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d13a      	bne.n	8003c8e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c22:	2b40      	cmp	r3, #64	@ 0x40
 8003c24:	d133      	bne.n	8003c8e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d12e      	bne.n	8003c8e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fc73 	bl	8003520 <LL_ADC_INJ_IsConversionOngoing>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11a      	bne.n	8003c76 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c4e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d112      	bne.n	8003c8e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6c:	f043 0201 	orr.w	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c74:	e00b      	b.n	8003c8e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7a:	f043 0210 	orr.w	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fdfa 	bl	8004888 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2260      	movs	r2, #96	@ 0x60
 8003c9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d011      	beq.n	8003cca <HAL_ADC_IRQHandler+0x312>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f89f 	bl	8003e00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2280      	movs	r2, #128	@ 0x80
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d012      	beq.n	8003cfa <HAL_ADC_IRQHandler+0x342>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fde0 	bl	80048b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <HAL_ADC_IRQHandler+0x372>
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fdd2 	bl	80048c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d036      	beq.n	8003da2 <HAL_ADC_IRQHandler+0x3ea>
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d031      	beq.n	8003da2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8003d46:	2301      	movs	r3, #1
 8003d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d4a:	e014      	b.n	8003d76 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d52:	4825      	ldr	r0, [pc, #148]	@ (8003de8 <HAL_ADC_IRQHandler+0x430>)
 8003d54:	f7ff fb3a 	bl	80033cc <LL_ADC_GetMultiDMATransfer>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d62:	e008      	b.n	8003d76 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8003d72:	2301      	movs	r3, #1
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d10e      	bne.n	8003d9a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8c:	f043 0202 	orr.w	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f83d 	bl	8003e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2210      	movs	r2, #16
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d018      	beq.n	8003dde <HAL_ADC_IRQHandler+0x426>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d013      	beq.n	8003dde <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc6:	f043 0208 	orr.w	r2, r3, #8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fd5f 	bl	800489c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003dde:	bf00      	nop
 8003de0:	3728      	adds	r7, #40	@ 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	50000300 	.word	0x50000300

08003dec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b0b6      	sub	sp, #216	@ 0xd8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x22>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e3c8      	b.n	80045dc <HAL_ADC_ConfigChannel+0x7b4>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fb4f 	bl	80034fa <LL_ADC_REG_IsConversionOngoing>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 83ad 	bne.w	80045be <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	f7ff fa0e 	bl	8003292 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fb3d 	bl	80034fa <LL_ADC_REG_IsConversionOngoing>
 8003e80:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fb49 	bl	8003520 <LL_ADC_INJ_IsConversionOngoing>
 8003e8e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f040 81d9 	bne.w	800424e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 81d4 	bne.w	800424e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eae:	d10f      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f7ff fa28 	bl	8003310 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff f9bc 	bl	8003246 <LL_ADC_SetSamplingTimeCommonConfig>
 8003ece:	e00e      	b.n	8003eee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	461a      	mov	r2, r3
 8003ede:	f7ff fa17 	bl	8003310 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff f9ac 	bl	8003246 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	08db      	lsrs	r3, r3, #3
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d022      	beq.n	8003f56 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6919      	ldr	r1, [r3, #16]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f20:	f7ff f906 	bl	8003130 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6919      	ldr	r1, [r3, #16]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f7ff f952 	bl	80031da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d102      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x124>
 8003f46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f4a:	e000      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x126>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7ff f95e 	bl	8003210 <LL_ADC_SetOffsetSaturation>
 8003f54:	e17b      	b.n	800424e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff f90b 	bl	8003178 <LL_ADC_GetOffsetChannel>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x15a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff f900 	bl	8003178 <LL_ADC_GetOffsetChannel>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	0e9b      	lsrs	r3, r3, #26
 8003f7c:	f003 021f 	and.w	r2, r3, #31
 8003f80:	e01e      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x198>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff f8f5 	bl	8003178 <LL_ADC_GetOffsetChannel>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	e004      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003fb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d105      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x1b0>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	0e9b      	lsrs	r3, r3, #26
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	e018      	b.n	800400a <HAL_ADC_ConfigChannel+0x1e2>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003ff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	e004      	b.n	800400a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004004:	fab3 f383 	clz	r3, r3
 8004008:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800400a:	429a      	cmp	r2, r3
 800400c:	d106      	bne.n	800401c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff f8c4 	bl	80031a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2101      	movs	r1, #1
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff f8a8 	bl	8003178 <LL_ADC_GetOffsetChannel>
 8004028:	4603      	mov	r3, r0
 800402a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x220>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff f89d 	bl	8003178 <LL_ADC_GetOffsetChannel>
 800403e:	4603      	mov	r3, r0
 8004040:	0e9b      	lsrs	r3, r3, #26
 8004042:	f003 021f 	and.w	r2, r3, #31
 8004046:	e01e      	b.n	8004086 <HAL_ADC_ConfigChannel+0x25e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f892 	bl	8003178 <LL_ADC_GetOffsetChannel>
 8004054:	4603      	mov	r3, r0
 8004056:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800406a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800406e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004076:	2320      	movs	r3, #32
 8004078:	e004      	b.n	8004084 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800407a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <HAL_ADC_ConfigChannel+0x276>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	0e9b      	lsrs	r3, r3, #26
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	e018      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x2a8>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80040b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80040ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80040c2:	2320      	movs	r3, #32
 80040c4:	e004      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80040c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d106      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2200      	movs	r2, #0
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff f861 	bl	80031a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff f845 	bl	8003178 <LL_ADC_GetOffsetChannel>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_ADC_ConfigChannel+0x2e6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2102      	movs	r1, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff f83a 	bl	8003178 <LL_ADC_GetOffsetChannel>
 8004104:	4603      	mov	r3, r0
 8004106:	0e9b      	lsrs	r3, r3, #26
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	e01e      	b.n	800414c <HAL_ADC_ConfigChannel+0x324>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2102      	movs	r1, #2
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f82f 	bl	8003178 <LL_ADC_GetOffsetChannel>
 800411a:	4603      	mov	r3, r0
 800411c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800412c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004130:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004134:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800413c:	2320      	movs	r3, #32
 800413e:	e004      	b.n	800414a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004140:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x33c>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0e9b      	lsrs	r3, r3, #26
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	e016      	b.n	8004192 <HAL_ADC_ConfigChannel+0x36a>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004176:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800417c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e004      	b.n	8004192 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004188:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004192:	429a      	cmp	r2, r3
 8004194:	d106      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	2102      	movs	r1, #2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff f800 	bl	80031a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2103      	movs	r1, #3
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe ffe4 	bl	8003178 <LL_ADC_GetOffsetChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x3a8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2103      	movs	r1, #3
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe ffd9 	bl	8003178 <LL_ADC_GetOffsetChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	0e9b      	lsrs	r3, r3, #26
 80041ca:	f003 021f 	and.w	r2, r3, #31
 80041ce:	e017      	b.n	8004200 <HAL_ADC_ConfigChannel+0x3d8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2103      	movs	r1, #3
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe ffce 	bl	8003178 <LL_ADC_GetOffsetChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e2:	fa93 f3a3 	rbit	r3, r3
 80041e6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80041e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041ea:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80041ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80041f2:	2320      	movs	r3, #32
 80041f4:	e003      	b.n	80041fe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80041f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041f8:	fab3 f383 	clz	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x3f0>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	0e9b      	lsrs	r3, r3, #26
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	e011      	b.n	800423c <HAL_ADC_ConfigChannel+0x414>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004228:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800422a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004230:	2320      	movs	r3, #32
 8004232:	e003      	b.n	800423c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800423c:	429a      	cmp	r2, r3
 800423e:	d106      	bne.n	800424e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2200      	movs	r2, #0
 8004246:	2103      	movs	r1, #3
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe ffab 	bl	80031a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff f92a 	bl	80034ac <LL_ADC_IsEnabled>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	f040 8140 	bne.w	80044e0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6819      	ldr	r1, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	461a      	mov	r2, r3
 800426e:	f7ff f87b 	bl	8003368 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4a8f      	ldr	r2, [pc, #572]	@ (80044b4 <HAL_ADC_ConfigChannel+0x68c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	f040 8131 	bne.w	80044e0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10b      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x47e>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0e9b      	lsrs	r3, r3, #26
 8004294:	3301      	adds	r3, #1
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2b09      	cmp	r3, #9
 800429c:	bf94      	ite	ls
 800429e:	2301      	movls	r3, #1
 80042a0:	2300      	movhi	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	e019      	b.n	80042da <HAL_ADC_ConfigChannel+0x4b2>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80042b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042b6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80042b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80042be:	2320      	movs	r3, #32
 80042c0:	e003      	b.n	80042ca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80042c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042c4:	fab3 f383 	clz	r3, r3
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2b09      	cmp	r3, #9
 80042d2:	bf94      	ite	ls
 80042d4:	2301      	movls	r3, #1
 80042d6:	2300      	movhi	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d079      	beq.n	80043d2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d107      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x4d2>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	0e9b      	lsrs	r3, r3, #26
 80042f0:	3301      	adds	r3, #1
 80042f2:	069b      	lsls	r3, r3, #26
 80042f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042f8:	e015      	b.n	8004326 <HAL_ADC_ConfigChannel+0x4fe>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004302:	fa93 f3a3 	rbit	r3, r3
 8004306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800430a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800430c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004312:	2320      	movs	r3, #32
 8004314:	e003      	b.n	800431e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004318:	fab3 f383 	clz	r3, r3
 800431c:	b2db      	uxtb	r3, r3
 800431e:	3301      	adds	r3, #1
 8004320:	069b      	lsls	r3, r3, #26
 8004322:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x51e>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	0e9b      	lsrs	r3, r3, #26
 8004338:	3301      	adds	r3, #1
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2101      	movs	r1, #1
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	e017      	b.n	8004376 <HAL_ADC_ConfigChannel+0x54e>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004356:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800435e:	2320      	movs	r3, #32
 8004360:	e003      	b.n	800436a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	3301      	adds	r3, #1
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	2101      	movs	r1, #1
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	ea42 0103 	orr.w	r1, r2, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <HAL_ADC_ConfigChannel+0x574>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	0e9b      	lsrs	r3, r3, #26
 800438c:	3301      	adds	r3, #1
 800438e:	f003 021f 	and.w	r2, r3, #31
 8004392:	4613      	mov	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4413      	add	r3, r2
 8004398:	051b      	lsls	r3, r3, #20
 800439a:	e018      	b.n	80043ce <HAL_ADC_ConfigChannel+0x5a6>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80043aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80043ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80043b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	f003 021f 	and.w	r2, r3, #31
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ce:	430b      	orrs	r3, r1
 80043d0:	e081      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d107      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x5c6>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	0e9b      	lsrs	r3, r3, #26
 80043e4:	3301      	adds	r3, #1
 80043e6:	069b      	lsls	r3, r3, #26
 80043e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043ec:	e015      	b.n	800441a <HAL_ADC_ConfigChannel+0x5f2>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004406:	2320      	movs	r3, #32
 8004408:	e003      	b.n	8004412 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440c:	fab3 f383 	clz	r3, r3
 8004410:	b2db      	uxtb	r3, r3
 8004412:	3301      	adds	r3, #1
 8004414:	069b      	lsls	r3, r3, #26
 8004416:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_ADC_ConfigChannel+0x612>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	0e9b      	lsrs	r3, r3, #26
 800442c:	3301      	adds	r3, #1
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2101      	movs	r1, #1
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	e017      	b.n	800446a <HAL_ADC_ConfigChannel+0x642>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	61fb      	str	r3, [r7, #28]
  return result;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004452:	2320      	movs	r3, #32
 8004454:	e003      	b.n	800445e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	fab3 f383 	clz	r3, r3
 800445c:	b2db      	uxtb	r3, r3
 800445e:	3301      	adds	r3, #1
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	ea42 0103 	orr.w	r1, r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10d      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x66e>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	0e9b      	lsrs	r3, r3, #26
 8004480:	3301      	adds	r3, #1
 8004482:	f003 021f 	and.w	r2, r3, #31
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	3b1e      	subs	r3, #30
 800448e:	051b      	lsls	r3, r3, #20
 8004490:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004494:	e01e      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x6ac>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	613b      	str	r3, [r7, #16]
  return result;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80044ae:	2320      	movs	r3, #32
 80044b0:	e006      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x698>
 80044b2:	bf00      	nop
 80044b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	f003 021f 	and.w	r2, r3, #31
 80044c6:	4613      	mov	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4413      	add	r3, r2
 80044cc:	3b1e      	subs	r3, #30
 80044ce:	051b      	lsls	r3, r3, #20
 80044d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044da:	4619      	mov	r1, r3
 80044dc:	f7fe ff18 	bl	8003310 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b3f      	ldr	r3, [pc, #252]	@ (80045e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d071      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ec:	483e      	ldr	r0, [pc, #248]	@ (80045e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80044ee:	f7fe fe11 	bl	8003114 <LL_ADC_GetCommonPathInternalCh>
 80044f2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a3c      	ldr	r2, [pc, #240]	@ (80045ec <HAL_ADC_ConfigChannel+0x7c4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_ADC_ConfigChannel+0x6e2>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3a      	ldr	r2, [pc, #232]	@ (80045f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d127      	bne.n	800455a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800450a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800450e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d121      	bne.n	800455a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800451e:	d157      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004524:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004528:	4619      	mov	r1, r3
 800452a:	482f      	ldr	r0, [pc, #188]	@ (80045e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800452c:	f7fe fddf 	bl	80030ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004530:	4b30      	ldr	r3, [pc, #192]	@ (80045f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	099b      	lsrs	r3, r3, #6
 8004536:	4a30      	ldr	r2, [pc, #192]	@ (80045f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	099b      	lsrs	r3, r3, #6
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	4613      	mov	r3, r2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800454a:	e002      	b.n	8004552 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3b01      	subs	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f9      	bne.n	800454c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004558:	e03a      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a27      	ldr	r2, [pc, #156]	@ (80045fc <HAL_ADC_ConfigChannel+0x7d4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d113      	bne.n	800458c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004568:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a22      	ldr	r2, [pc, #136]	@ (8004600 <HAL_ADC_ConfigChannel+0x7d8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02a      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800457a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800457e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004582:	4619      	mov	r1, r3
 8004584:	4818      	ldr	r0, [pc, #96]	@ (80045e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004586:	f7fe fdb2 	bl	80030ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800458a:	e021      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1c      	ldr	r2, [pc, #112]	@ (8004604 <HAL_ADC_ConfigChannel+0x7dc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d11c      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800459a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d116      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a16      	ldr	r2, [pc, #88]	@ (8004600 <HAL_ADC_ConfigChannel+0x7d8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d011      	beq.n	80045d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045b4:	4619      	mov	r1, r3
 80045b6:	480c      	ldr	r0, [pc, #48]	@ (80045e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80045b8:	f7fe fd99 	bl	80030ee <LL_ADC_SetCommonPathInternalCh>
 80045bc:	e008      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80045d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80045dc:	4618      	mov	r0, r3
 80045de:	37d8      	adds	r7, #216	@ 0xd8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	80080000 	.word	0x80080000
 80045e8:	50000300 	.word	0x50000300
 80045ec:	c3210000 	.word	0xc3210000
 80045f0:	90c00010 	.word	0x90c00010
 80045f4:	20000008 	.word	0x20000008
 80045f8:	053e2d63 	.word	0x053e2d63
 80045fc:	c7520000 	.word	0xc7520000
 8004600:	50000100 	.word	0x50000100
 8004604:	cb840000 	.word	0xcb840000

08004608 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004610:	2300      	movs	r3, #0
 8004612:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe ff47 	bl	80034ac <LL_ADC_IsEnabled>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d169      	bne.n	80046f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	4b36      	ldr	r3, [pc, #216]	@ (8004704 <ADC_Enable+0xfc>)
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004636:	f043 0210 	orr.w	r2, r3, #16
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e055      	b.n	80046fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe ff16 	bl	8003484 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004658:	482b      	ldr	r0, [pc, #172]	@ (8004708 <ADC_Enable+0x100>)
 800465a:	f7fe fd5b 	bl	8003114 <LL_ADC_GetCommonPathInternalCh>
 800465e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004668:	4b28      	ldr	r3, [pc, #160]	@ (800470c <ADC_Enable+0x104>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	099b      	lsrs	r3, r3, #6
 800466e:	4a28      	ldr	r2, [pc, #160]	@ (8004710 <ADC_Enable+0x108>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	099b      	lsrs	r3, r3, #6
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004682:	e002      	b.n	800468a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	3b01      	subs	r3, #1
 8004688:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f9      	bne.n	8004684 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004690:	f7fe fcec 	bl	800306c <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004696:	e028      	b.n	80046ea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe ff05 	bl	80034ac <LL_ADC_IsEnabled>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d104      	bne.n	80046b2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe fee9 	bl	8003484 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046b2:	f7fe fcdb 	bl	800306c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d914      	bls.n	80046ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d00d      	beq.n	80046ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d2:	f043 0210 	orr.w	r2, r3, #16
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e007      	b.n	80046fa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d1cf      	bne.n	8004698 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	8000003f 	.word	0x8000003f
 8004708:	50000300 	.word	0x50000300
 800470c:	20000008 	.word	0x20000008
 8004710:	053e2d63 	.word	0x053e2d63

08004714 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004726:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800472a:	2b00      	cmp	r3, #0
 800472c:	d14b      	bne.n	80047c6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004732:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d021      	beq.n	800478c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe fd8d 	bl	800326c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d032      	beq.n	80047be <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d12b      	bne.n	80047be <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004776:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11f      	bne.n	80047be <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	65da      	str	r2, [r3, #92]	@ 0x5c
 800478a:	e018      	b.n	80047be <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d111      	bne.n	80047be <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d105      	bne.n	80047be <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b6:	f043 0201 	orr.w	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7fc fd7a 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047c4:	e00e      	b.n	80047e4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff fb1e 	bl	8003e14 <HAL_ADC_ErrorCallback>
}
 80047d8:	e004      	b.n	80047e4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff faf6 	bl	8003dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004826:	f043 0204 	orr.w	r2, r3, #4
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff faf0 	bl	8003e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004834:	bf00      	nop
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <LL_ADC_IsEnabled>:
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <LL_ADC_IsEnabled+0x18>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <LL_ADC_IsEnabled+0x1a>
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <LL_ADC_REG_IsConversionOngoing>:
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b04      	cmp	r3, #4
 8004874:	d101      	bne.n	800487a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b0a1      	sub	sp, #132	@ 0x84
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004906:	2302      	movs	r3, #2
 8004908:	e08b      	b.n	8004a22 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004912:	2300      	movs	r3, #0
 8004914:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004916:	2300      	movs	r3, #0
 8004918:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004922:	d102      	bne.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004924:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	e001      	b.n	800492e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800492a:	2300      	movs	r3, #0
 800492c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10b      	bne.n	800494c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e06a      	b.n	8004a22 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff ff87 	bl	8004862 <LL_ADC_REG_IsConversionOngoing>
 8004954:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff81 	bl	8004862 <LL_ADC_REG_IsConversionOngoing>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d14c      	bne.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004968:	2b00      	cmp	r3, #0
 800496a:	d149      	bne.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800496c:	4b30      	ldr	r3, [pc, #192]	@ (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800496e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d028      	beq.n	80049ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004978:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800498a:	035b      	lsls	r3, r3, #13
 800498c:	430b      	orrs	r3, r1
 800498e:	431a      	orrs	r2, r3
 8004990:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004992:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004994:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004998:	f7ff ff50 	bl	800483c <LL_ADC_IsEnabled>
 800499c:	4604      	mov	r4, r0
 800499e:	4823      	ldr	r0, [pc, #140]	@ (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80049a0:	f7ff ff4c 	bl	800483c <LL_ADC_IsEnabled>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4323      	orrs	r3, r4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d133      	bne.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80049b4:	f023 030f 	bic.w	r3, r3, #15
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	6811      	ldr	r1, [r2, #0]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	6892      	ldr	r2, [r2, #8]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	431a      	orrs	r2, r3
 80049c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049c8:	e024      	b.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049d6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80049da:	f7ff ff2f 	bl	800483c <LL_ADC_IsEnabled>
 80049de:	4604      	mov	r4, r0
 80049e0:	4812      	ldr	r0, [pc, #72]	@ (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80049e2:	f7ff ff2b 	bl	800483c <LL_ADC_IsEnabled>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4323      	orrs	r3, r4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d112      	bne.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80049f6:	f023 030f 	bic.w	r3, r3, #15
 80049fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80049fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049fe:	e009      	b.n	8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a04:	f043 0220 	orr.w	r2, r3, #32
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a12:	e000      	b.n	8004a16 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3784      	adds	r7, #132	@ 0x84
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd90      	pop	{r4, r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	50000100 	.word	0x50000100
 8004a30:	50000300 	.word	0x50000300

08004a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a44:	4b0c      	ldr	r3, [pc, #48]	@ (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a50:	4013      	ands	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a66:	4a04      	ldr	r2, [pc, #16]	@ (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	60d3      	str	r3, [r2, #12]
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	e000ed00 	.word	0xe000ed00

08004a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <__NVIC_GetPriorityGrouping+0x18>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f003 0307 	and.w	r3, r3, #7
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	db0b      	blt.n	8004ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	4907      	ldr	r1, [pc, #28]	@ (8004ad0 <__NVIC_EnableIRQ+0x38>)
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2001      	movs	r0, #1
 8004aba:	fa00 f202 	lsl.w	r2, r0, r2
 8004abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	e000e100 	.word	0xe000e100

08004ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	6039      	str	r1, [r7, #0]
 8004ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	db0a      	blt.n	8004afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	490c      	ldr	r1, [pc, #48]	@ (8004b20 <__NVIC_SetPriority+0x4c>)
 8004aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af2:	0112      	lsls	r2, r2, #4
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	440b      	add	r3, r1
 8004af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004afc:	e00a      	b.n	8004b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	4908      	ldr	r1, [pc, #32]	@ (8004b24 <__NVIC_SetPriority+0x50>)
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	3b04      	subs	r3, #4
 8004b0c:	0112      	lsls	r2, r2, #4
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	440b      	add	r3, r1
 8004b12:	761a      	strb	r2, [r3, #24]
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000e100 	.word	0xe000e100
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	@ 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f1c3 0307 	rsb	r3, r3, #7
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	bf28      	it	cs
 8004b46:	2304      	movcs	r3, #4
 8004b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d902      	bls.n	8004b58 <NVIC_EncodePriority+0x30>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3b03      	subs	r3, #3
 8004b56:	e000      	b.n	8004b5a <NVIC_EncodePriority+0x32>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43da      	mvns	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b70:	f04f 31ff 	mov.w	r1, #4294967295
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	43d9      	mvns	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b80:	4313      	orrs	r3, r2
         );
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3724      	adds	r7, #36	@ 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff ff4c 	bl	8004a34 <__NVIC_SetPriorityGrouping>
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bb2:	f7ff ff63 	bl	8004a7c <__NVIC_GetPriorityGrouping>
 8004bb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	f7ff ffb3 	bl	8004b28 <NVIC_EncodePriority>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff ff82 	bl	8004ad4 <__NVIC_SetPriority>
}
 8004bd0:	bf00      	nop
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff56 	bl	8004a98 <__NVIC_EnableIRQ>
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e08d      	b.n	8004d22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b47      	ldr	r3, [pc, #284]	@ (8004d2c <HAL_DMA_Init+0x138>)
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d80f      	bhi.n	8004c32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	4b45      	ldr	r3, [pc, #276]	@ (8004d30 <HAL_DMA_Init+0x13c>)
 8004c1a:	4413      	add	r3, r2
 8004c1c:	4a45      	ldr	r2, [pc, #276]	@ (8004d34 <HAL_DMA_Init+0x140>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	009a      	lsls	r2, r3, #2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a42      	ldr	r2, [pc, #264]	@ (8004d38 <HAL_DMA_Init+0x144>)
 8004c2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c30:	e00e      	b.n	8004c50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	4b40      	ldr	r3, [pc, #256]	@ (8004d3c <HAL_DMA_Init+0x148>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8004d34 <HAL_DMA_Init+0x140>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	009a      	lsls	r2, r3, #2
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d40 <HAL_DMA_Init+0x14c>)
 8004c4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fa82 	bl	80051ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cb0:	d102      	bne.n	8004cb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ccc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d010      	beq.n	8004cf8 <HAL_DMA_Init+0x104>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d80c      	bhi.n	8004cf8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 faa2 	bl	8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	e008      	b.n	8004d0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40020407 	.word	0x40020407
 8004d30:	bffdfff8 	.word	0xbffdfff8
 8004d34:	cccccccd 	.word	0xcccccccd
 8004d38:	40020000 	.word	0x40020000
 8004d3c:	bffdfbf8 	.word	0xbffdfbf8
 8004d40:	40020400 	.word	0x40020400

08004d44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_DMA_Start_IT+0x20>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e066      	b.n	8004e32 <HAL_DMA_Start_IT+0xee>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d155      	bne.n	8004e24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f9c7 	bl	8005130 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 020e 	orr.w	r2, r2, #14
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e00f      	b.n	8004ddc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0204 	bic.w	r2, r2, #4
 8004dca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 020a 	orr.w	r2, r2, #10
 8004dda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e005      	b.n	8004e30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d005      	beq.n	8004e5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2204      	movs	r2, #4
 8004e56:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
 8004e5c:	e037      	b.n	8004ece <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 020e 	bic.w	r2, r2, #14
 8004e6c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e7c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e92:	f003 021f 	and.w	r2, r3, #31
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004eaa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ec2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ecc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d00d      	beq.n	8004f20 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2204      	movs	r2, #4
 8004f08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
 8004f1e:	e047      	b.n	8004fb0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 020e 	bic.w	r2, r2, #14
 8004f2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f54:	f003 021f 	and.w	r2, r3, #31
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
    }
  }
  return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2204      	movs	r2, #4
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d026      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7a>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d021      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d107      	bne.n	800500e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0204 	bic.w	r2, r2, #4
 800500c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	f003 021f 	and.w	r2, r3, #31
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	2104      	movs	r1, #4
 800501c:	fa01 f202 	lsl.w	r2, r1, r2
 8005020:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	2b00      	cmp	r3, #0
 8005028:	d071      	beq.n	800510e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005032:	e06c      	b.n	800510e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	2202      	movs	r2, #2
 800503e:	409a      	lsls	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d02e      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d029      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 020a 	bic.w	r2, r2, #10
 800506e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507c:	f003 021f 	and.w	r2, r3, #31
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	2102      	movs	r1, #2
 8005086:	fa01 f202 	lsl.w	r2, r1, r2
 800508a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d038      	beq.n	800510e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80050a4:	e033      	b.n	800510e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	2208      	movs	r2, #8
 80050b0:	409a      	lsls	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02a      	beq.n	8005110 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d025      	beq.n	8005110 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 020e 	bic.w	r2, r2, #14
 80050d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d8:	f003 021f 	and.w	r2, r3, #31
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800510e:	bf00      	nop
 8005110:	bf00      	nop
}
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005146:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005158:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515e:	f003 021f 	and.w	r2, r3, #31
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f202 	lsl.w	r2, r1, r2
 800516c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b10      	cmp	r3, #16
 800517c:	d108      	bne.n	8005190 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800518e:	e007      	b.n	80051a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	60da      	str	r2, [r3, #12]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b16      	ldr	r3, [pc, #88]	@ (8005214 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	d802      	bhi.n	80051c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80051c0:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e001      	b.n	80051ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80051c6:	4b15      	ldr	r3, [pc, #84]	@ (800521c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80051c8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	3b08      	subs	r3, #8
 80051d6:	4a12      	ldr	r2, [pc, #72]	@ (8005220 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	009a      	lsls	r2, r3, #2
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	461a      	mov	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005224 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80051f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2201      	movs	r2, #1
 8005200:	409a      	lsls	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40020407 	.word	0x40020407
 8005218:	40020800 	.word	0x40020800
 800521c:	40020820 	.word	0x40020820
 8005220:	cccccccd 	.word	0xcccccccd
 8005224:	40020880 	.word	0x40020880

08005228 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	461a      	mov	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a08      	ldr	r2, [pc, #32]	@ (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800524a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3b01      	subs	r3, #1
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	2201      	movs	r2, #1
 8005256:	409a      	lsls	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	1000823f 	.word	0x1000823f
 800526c:	40020940 	.word	0x40020940

08005270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800527e:	e15a      	b.n	8005536 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	2101      	movs	r1, #1
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	fa01 f303 	lsl.w	r3, r1, r3
 800528c:	4013      	ands	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 814c 	beq.w	8005530 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d005      	beq.n	80052b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d130      	bne.n	8005312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	2203      	movs	r2, #3
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	43db      	mvns	r3, r3
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4013      	ands	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052e6:	2201      	movs	r2, #1
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4013      	ands	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	f003 0201 	and.w	r2, r3, #1
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b03      	cmp	r3, #3
 800531c:	d017      	beq.n	800534e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	2203      	movs	r2, #3
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4013      	ands	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d123      	bne.n	80053a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	08da      	lsrs	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3208      	adds	r2, #8
 8005362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	220f      	movs	r2, #15
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	08da      	lsrs	r2, r3, #3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3208      	adds	r2, #8
 800539c:	6939      	ldr	r1, [r7, #16]
 800539e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	2203      	movs	r2, #3
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	43db      	mvns	r3, r3
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4013      	ands	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f003 0203 	and.w	r2, r3, #3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 80a6 	beq.w	8005530 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053e4:	4b5b      	ldr	r3, [pc, #364]	@ (8005554 <HAL_GPIO_Init+0x2e4>)
 80053e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e8:	4a5a      	ldr	r2, [pc, #360]	@ (8005554 <HAL_GPIO_Init+0x2e4>)
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80053f0:	4b58      	ldr	r3, [pc, #352]	@ (8005554 <HAL_GPIO_Init+0x2e4>)
 80053f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053fc:	4a56      	ldr	r2, [pc, #344]	@ (8005558 <HAL_GPIO_Init+0x2e8>)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	089b      	lsrs	r3, r3, #2
 8005402:	3302      	adds	r3, #2
 8005404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	220f      	movs	r2, #15
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4013      	ands	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005426:	d01f      	beq.n	8005468 <HAL_GPIO_Init+0x1f8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a4c      	ldr	r2, [pc, #304]	@ (800555c <HAL_GPIO_Init+0x2ec>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d019      	beq.n	8005464 <HAL_GPIO_Init+0x1f4>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a4b      	ldr	r2, [pc, #300]	@ (8005560 <HAL_GPIO_Init+0x2f0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d013      	beq.n	8005460 <HAL_GPIO_Init+0x1f0>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a4a      	ldr	r2, [pc, #296]	@ (8005564 <HAL_GPIO_Init+0x2f4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00d      	beq.n	800545c <HAL_GPIO_Init+0x1ec>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a49      	ldr	r2, [pc, #292]	@ (8005568 <HAL_GPIO_Init+0x2f8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <HAL_GPIO_Init+0x1e8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a48      	ldr	r2, [pc, #288]	@ (800556c <HAL_GPIO_Init+0x2fc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_GPIO_Init+0x1e4>
 8005450:	2305      	movs	r3, #5
 8005452:	e00a      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005454:	2306      	movs	r3, #6
 8005456:	e008      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005458:	2304      	movs	r3, #4
 800545a:	e006      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 800545c:	2303      	movs	r3, #3
 800545e:	e004      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005460:	2302      	movs	r3, #2
 8005462:	e002      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <HAL_GPIO_Init+0x1fa>
 8005468:	2300      	movs	r3, #0
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	f002 0203 	and.w	r2, r2, #3
 8005470:	0092      	lsls	r2, r2, #2
 8005472:	4093      	lsls	r3, r2
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800547a:	4937      	ldr	r1, [pc, #220]	@ (8005558 <HAL_GPIO_Init+0x2e8>)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	3302      	adds	r3, #2
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005488:	4b39      	ldr	r3, [pc, #228]	@ (8005570 <HAL_GPIO_Init+0x300>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	43db      	mvns	r3, r3
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4013      	ands	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054ac:	4a30      	ldr	r2, [pc, #192]	@ (8005570 <HAL_GPIO_Init+0x300>)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005570 <HAL_GPIO_Init+0x300>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4013      	ands	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80054d6:	4a26      	ldr	r2, [pc, #152]	@ (8005570 <HAL_GPIO_Init+0x300>)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80054dc:	4b24      	ldr	r3, [pc, #144]	@ (8005570 <HAL_GPIO_Init+0x300>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4013      	ands	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005500:	4a1b      	ldr	r2, [pc, #108]	@ (8005570 <HAL_GPIO_Init+0x300>)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005506:	4b1a      	ldr	r3, [pc, #104]	@ (8005570 <HAL_GPIO_Init+0x300>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	43db      	mvns	r3, r3
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4013      	ands	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800552a:	4a11      	ldr	r2, [pc, #68]	@ (8005570 <HAL_GPIO_Init+0x300>)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	3301      	adds	r3, #1
 8005534:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	f47f ae9d 	bne.w	8005280 <HAL_GPIO_Init+0x10>
  }
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40021000 	.word	0x40021000
 8005558:	40010000 	.word	0x40010000
 800555c:	48000400 	.word	0x48000400
 8005560:	48000800 	.word	0x48000800
 8005564:	48000c00 	.word	0x48000c00
 8005568:	48001000 	.word	0x48001000
 800556c:	48001400 	.word	0x48001400
 8005570:	40010400 	.word	0x40010400

08005574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
 8005590:	e001      	b.n	8005596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	807b      	strh	r3, [r7, #2]
 80055b0:	4613      	mov	r3, r2
 80055b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055b4:	787b      	ldrb	r3, [r7, #1]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055ba:	887a      	ldrh	r2, [r7, #2]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055c0:	e002      	b.n	80055c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055c2:	887a      	ldrh	r2, [r7, #2]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055e6:	887a      	ldrh	r2, [r7, #2]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4013      	ands	r3, r2
 80055ec:	041a      	lsls	r2, r3, #16
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	43d9      	mvns	r1, r3
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	400b      	ands	r3, r1
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	619a      	str	r2, [r3, #24]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005612:	4b08      	ldr	r3, [pc, #32]	@ (8005634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d006      	beq.n	800562c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800561e:	4a05      	ldr	r2, [pc, #20]	@ (8005634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005624:	88fb      	ldrh	r3, [r7, #6]
 8005626:	4618      	mov	r0, r3
 8005628:	f7fc fb20 	bl	8001c6c <HAL_GPIO_EXTI_Callback>
  }
}
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40010400 	.word	0x40010400

08005638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e08d      	b.n	8005766 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fc f8da 	bl	8001818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	@ 0x24
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005688:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005698:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d107      	bne.n	80056b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056ae:	609a      	str	r2, [r3, #8]
 80056b0:	e006      	b.n	80056c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80056be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d108      	bne.n	80056da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056d6:	605a      	str	r2, [r3, #4]
 80056d8:	e007      	b.n	80056ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80056f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800570c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69d9      	ldr	r1, [r3, #28]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	461a      	mov	r2, r3
 800577c:	460b      	mov	r3, r1
 800577e:	817b      	strh	r3, [r7, #10]
 8005780:	4613      	mov	r3, r2
 8005782:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b20      	cmp	r3, #32
 800578e:	f040 80fd 	bne.w	800598c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_I2C_Master_Transmit+0x30>
 800579c:	2302      	movs	r3, #2
 800579e:	e0f6      	b.n	800598e <HAL_I2C_Master_Transmit+0x21e>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057a8:	f7fd fc60 	bl	800306c <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	2319      	movs	r3, #25
 80057b4:	2201      	movs	r2, #1
 80057b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 f914 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e0e1      	b.n	800598e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2221      	movs	r2, #33	@ 0x21
 80057ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2210      	movs	r2, #16
 80057d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	893a      	ldrh	r2, [r7, #8]
 80057ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2bff      	cmp	r3, #255	@ 0xff
 80057fa:	d906      	bls.n	800580a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	22ff      	movs	r2, #255	@ 0xff
 8005800:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005802:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e007      	b.n	800581a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580e:	b29a      	uxth	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005814:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005818:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581e:	2b00      	cmp	r3, #0
 8005820:	d024      	beq.n	800586c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	781a      	ldrb	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005856:	b2db      	uxtb	r3, r3
 8005858:	3301      	adds	r3, #1
 800585a:	b2da      	uxtb	r2, r3
 800585c:	8979      	ldrh	r1, [r7, #10]
 800585e:	4b4e      	ldr	r3, [pc, #312]	@ (8005998 <HAL_I2C_Master_Transmit+0x228>)
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fa83 	bl	8005d70 <I2C_TransferConfig>
 800586a:	e066      	b.n	800593a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005870:	b2da      	uxtb	r2, r3
 8005872:	8979      	ldrh	r1, [r7, #10]
 8005874:	4b48      	ldr	r3, [pc, #288]	@ (8005998 <HAL_I2C_Master_Transmit+0x228>)
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 fa78 	bl	8005d70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005880:	e05b      	b.n	800593a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	6a39      	ldr	r1, [r7, #32]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f907 	bl	8005a9a <I2C_WaitOnTXISFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e07b      	b.n	800598e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d034      	beq.n	800593a <HAL_I2C_Master_Transmit+0x1ca>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d130      	bne.n	800593a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	2200      	movs	r2, #0
 80058e0:	2180      	movs	r1, #128	@ 0x80
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f880 	bl	80059e8 <I2C_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e04d      	b.n	800598e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2bff      	cmp	r3, #255	@ 0xff
 80058fa:	d90e      	bls.n	800591a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	22ff      	movs	r2, #255	@ 0xff
 8005900:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005906:	b2da      	uxtb	r2, r3
 8005908:	8979      	ldrh	r1, [r7, #10]
 800590a:	2300      	movs	r3, #0
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fa2c 	bl	8005d70 <I2C_TransferConfig>
 8005918:	e00f      	b.n	800593a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005928:	b2da      	uxtb	r2, r3
 800592a:	8979      	ldrh	r1, [r7, #10]
 800592c:	2300      	movs	r3, #0
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 fa1b 	bl	8005d70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d19e      	bne.n	8005882 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	6a39      	ldr	r1, [r7, #32]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f8ed 	bl	8005b28 <I2C_WaitOnSTOPFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e01a      	b.n	800598e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2220      	movs	r2, #32
 800595e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b0c      	ldr	r3, [pc, #48]	@ (800599c <HAL_I2C_Master_Transmit+0x22c>)
 800596c:	400b      	ands	r3, r1
 800596e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	80002000 	.word	0x80002000
 800599c:	fe00e800 	.word	0xfe00e800

080059a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d103      	bne.n	80059be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d007      	beq.n	80059dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	619a      	str	r2, [r3, #24]
  }
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f8:	e03b      	b.n	8005a72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f8d6 	bl	8005bb0 <I2C_IsErrorOccurred>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e041      	b.n	8005a92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d02d      	beq.n	8005a72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a16:	f7fd fb29 	bl	800306c <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d302      	bcc.n	8005a2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d122      	bne.n	8005a72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4013      	ands	r3, r2
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d113      	bne.n	8005a72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4e:	f043 0220 	orr.w	r2, r3, #32
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e00f      	b.n	8005a92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d0b4      	beq.n	80059fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005aa6:	e033      	b.n	8005b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f87f 	bl	8005bb0 <I2C_IsErrorOccurred>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e031      	b.n	8005b20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac2:	d025      	beq.n	8005b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac4:	f7fd fad2 	bl	800306c <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d302      	bcc.n	8005ada <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11a      	bne.n	8005b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d013      	beq.n	8005b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aec:	f043 0220 	orr.w	r2, r3, #32
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e007      	b.n	8005b20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d1c4      	bne.n	8005aa8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b34:	e02f      	b.n	8005b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 f838 	bl	8005bb0 <I2C_IsErrorOccurred>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e02d      	b.n	8005ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4a:	f7fd fa8f 	bl	800306c <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d302      	bcc.n	8005b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d11a      	bne.n	8005b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d013      	beq.n	8005b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b72:	f043 0220 	orr.w	r2, r3, #32
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e007      	b.n	8005ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d1c8      	bne.n	8005b36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	@ 0x28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d068      	beq.n	8005cae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2210      	movs	r2, #16
 8005be2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005be4:	e049      	b.n	8005c7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d045      	beq.n	8005c7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bee:	f7fd fa3d 	bl	800306c <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <I2C_IsErrorOccurred+0x54>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d13a      	bne.n	8005c7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c26:	d121      	bne.n	8005c6c <I2C_IsErrorOccurred+0xbc>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c2e:	d01d      	beq.n	8005c6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d01a      	beq.n	8005c6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c46:	f7fd fa11 	bl	800306c <HAL_GetTick>
 8005c4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c4c:	e00e      	b.n	8005c6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c4e:	f7fd fa0d 	bl	800306c <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b19      	cmp	r3, #25
 8005c5a:	d907      	bls.n	8005c6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	f043 0320 	orr.w	r3, r3, #32
 8005c62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005c6a:	e006      	b.n	8005c7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d1e9      	bne.n	8005c4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d003      	beq.n	8005c90 <I2C_IsErrorOccurred+0xe0>
 8005c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0aa      	beq.n	8005be6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d103      	bne.n	8005ca0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f043 0304 	orr.w	r3, r3, #4
 8005ca6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	f043 0308 	orr.w	r3, r3, #8
 8005ce8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00b      	beq.n	8005d1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	f043 0302 	orr.w	r3, r3, #2
 8005d0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01c      	beq.n	8005d5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fe3b 	bl	80059a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6859      	ldr	r1, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <I2C_IsErrorOccurred+0x1bc>)
 8005d36:	400b      	ands	r3, r1
 8005d38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3728      	adds	r7, #40	@ 0x28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	fe00e800 	.word	0xfe00e800

08005d70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	817b      	strh	r3, [r7, #10]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d82:	897b      	ldrh	r3, [r7, #10]
 8005d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d88:	7a7b      	ldrb	r3, [r7, #9]
 8005d8a:	041b      	lsls	r3, r3, #16
 8005d8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	0d5b      	lsrs	r3, r3, #21
 8005daa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005dae:	4b08      	ldr	r3, [pc, #32]	@ (8005dd0 <I2C_TransferConfig+0x60>)
 8005db0:	430b      	orrs	r3, r1
 8005db2:	43db      	mvns	r3, r3
 8005db4:	ea02 0103 	and.w	r1, r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	03ff63ff 	.word	0x03ff63ff

08005dd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d138      	bne.n	8005e5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e032      	b.n	8005e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2224      	movs	r2, #36	@ 0x24
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0201 	bic.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e000      	b.n	8005e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d139      	bne.n	8005ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e033      	b.n	8005ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2224      	movs	r2, #36	@ 0x24
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ebc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e000      	b.n	8005ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
  }
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d141      	bne.n	8005f96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f12:	4b4b      	ldr	r3, [pc, #300]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f1e:	d131      	bne.n	8005f84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f20:	4b47      	ldr	r3, [pc, #284]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f26:	4a46      	ldr	r2, [pc, #280]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f30:	4b43      	ldr	r3, [pc, #268]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f38:	4a41      	ldr	r2, [pc, #260]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f40:	4b40      	ldr	r3, [pc, #256]	@ (8006044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2232      	movs	r2, #50	@ 0x32
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8006048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f50:	0c9b      	lsrs	r3, r3, #18
 8005f52:	3301      	adds	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f56:	e002      	b.n	8005f5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f5e:	4b38      	ldr	r3, [pc, #224]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6a:	d102      	bne.n	8005f72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1f2      	bne.n	8005f58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f72:	4b33      	ldr	r3, [pc, #204]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f7e:	d158      	bne.n	8006032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e057      	b.n	8006034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f84:	4b2e      	ldr	r3, [pc, #184]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f94:	e04d      	b.n	8006032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f9c:	d141      	bne.n	8006022 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f9e:	4b28      	ldr	r3, [pc, #160]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005faa:	d131      	bne.n	8006010 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fac:	4b24      	ldr	r3, [pc, #144]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb2:	4a23      	ldr	r2, [pc, #140]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fbc:	4b20      	ldr	r3, [pc, #128]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2232      	movs	r2, #50	@ 0x32
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8006048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fdc:	0c9b      	lsrs	r3, r3, #18
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fe2:	e002      	b.n	8005fea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fea:	4b15      	ldr	r3, [pc, #84]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff6:	d102      	bne.n	8005ffe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1f2      	bne.n	8005fe4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ffe:	4b10      	ldr	r3, [pc, #64]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600a:	d112      	bne.n	8006032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e011      	b.n	8006034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006010:	4b0b      	ldr	r3, [pc, #44]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006016:	4a0a      	ldr	r2, [pc, #40]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800601c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006020:	e007      	b.n	8006032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006022:	4b07      	ldr	r3, [pc, #28]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800602a:	4a05      	ldr	r2, [pc, #20]	@ (8006040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800602c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006030:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	40007000 	.word	0x40007000
 8006044:	20000008 	.word	0x20000008
 8006048:	431bde83 	.word	0x431bde83

0800604c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800604c:	b480      	push	{r7}
 800604e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006050:	4b05      	ldr	r3, [pc, #20]	@ (8006068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4a04      	ldr	r2, [pc, #16]	@ (8006068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006056:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800605a:	6093      	str	r3, [r2, #8]
}
 800605c:	bf00      	nop
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40007000 	.word	0x40007000

0800606c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e2fe      	b.n	800667c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d075      	beq.n	8006176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800608a:	4b97      	ldr	r3, [pc, #604]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006094:	4b94      	ldr	r3, [pc, #592]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b0c      	cmp	r3, #12
 80060a2:	d102      	bne.n	80060aa <HAL_RCC_OscConfig+0x3e>
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d002      	beq.n	80060b0 <HAL_RCC_OscConfig+0x44>
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d10b      	bne.n	80060c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b0:	4b8d      	ldr	r3, [pc, #564]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d05b      	beq.n	8006174 <HAL_RCC_OscConfig+0x108>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d157      	bne.n	8006174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e2d9      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d0:	d106      	bne.n	80060e0 <HAL_RCC_OscConfig+0x74>
 80060d2:	4b85      	ldr	r3, [pc, #532]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a84      	ldr	r2, [pc, #528]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80060d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e01d      	b.n	800611c <HAL_RCC_OscConfig+0xb0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060e8:	d10c      	bne.n	8006104 <HAL_RCC_OscConfig+0x98>
 80060ea:	4b7f      	ldr	r3, [pc, #508]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a7e      	ldr	r2, [pc, #504]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80060f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b7c      	ldr	r3, [pc, #496]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a7b      	ldr	r2, [pc, #492]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e00b      	b.n	800611c <HAL_RCC_OscConfig+0xb0>
 8006104:	4b78      	ldr	r3, [pc, #480]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a77      	ldr	r2, [pc, #476]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 800610a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b75      	ldr	r3, [pc, #468]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a74      	ldr	r2, [pc, #464]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800611a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fc ffa2 	bl	800306c <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800612c:	f7fc ff9e 	bl	800306c <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b64      	cmp	r3, #100	@ 0x64
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e29e      	b.n	800667c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800613e:	4b6a      	ldr	r3, [pc, #424]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0xc0>
 800614a:	e014      	b.n	8006176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fc ff8e 	bl	800306c <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006154:	f7fc ff8a 	bl	800306c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	@ 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e28a      	b.n	800667c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006166:	4b60      	ldr	r3, [pc, #384]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0xe8>
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d075      	beq.n	800626e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006182:	4b59      	ldr	r3, [pc, #356]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800618c:	4b56      	ldr	r3, [pc, #344]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b0c      	cmp	r3, #12
 800619a:	d102      	bne.n	80061a2 <HAL_RCC_OscConfig+0x136>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d002      	beq.n	80061a8 <HAL_RCC_OscConfig+0x13c>
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d11f      	bne.n	80061e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061a8:	4b4f      	ldr	r3, [pc, #316]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <HAL_RCC_OscConfig+0x154>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e25d      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c0:	4b49      	ldr	r3, [pc, #292]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	061b      	lsls	r3, r3, #24
 80061ce:	4946      	ldr	r1, [pc, #280]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80061d4:	4b45      	ldr	r3, [pc, #276]	@ (80062ec <HAL_RCC_OscConfig+0x280>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fc f823 	bl	8002224 <HAL_InitTick>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d043      	beq.n	800626c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e249      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d023      	beq.n	8006238 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061f0:	4b3d      	ldr	r3, [pc, #244]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a3c      	ldr	r2, [pc, #240]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80061f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fc:	f7fc ff36 	bl	800306c <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006204:	f7fc ff32 	bl	800306c <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e232      	b.n	800667c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006216:	4b34      	ldr	r3, [pc, #208]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800621e:	2b00      	cmp	r3, #0
 8006220:	d0f0      	beq.n	8006204 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006222:	4b31      	ldr	r3, [pc, #196]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	061b      	lsls	r3, r3, #24
 8006230:	492d      	ldr	r1, [pc, #180]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	604b      	str	r3, [r1, #4]
 8006236:	e01a      	b.n	800626e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006238:	4b2b      	ldr	r3, [pc, #172]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a2a      	ldr	r2, [pc, #168]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 800623e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006244:	f7fc ff12 	bl	800306c <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800624c:	f7fc ff0e 	bl	800306c <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e20e      	b.n	800667c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800625e:	4b22      	ldr	r3, [pc, #136]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x1e0>
 800626a:	e000      	b.n	800626e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800626c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d041      	beq.n	80062fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d01c      	beq.n	80062bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006282:	4b19      	ldr	r3, [pc, #100]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 8006284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006288:	4a17      	ldr	r2, [pc, #92]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fc feeb 	bl	800306c <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800629a:	f7fc fee7 	bl	800306c <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e1e7      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062ac:	4b0e      	ldr	r3, [pc, #56]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80062ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0ef      	beq.n	800629a <HAL_RCC_OscConfig+0x22e>
 80062ba:	e020      	b.n	80062fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062bc:	4b0a      	ldr	r3, [pc, #40]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80062be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062c2:	4a09      	ldr	r2, [pc, #36]	@ (80062e8 <HAL_RCC_OscConfig+0x27c>)
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062cc:	f7fc fece 	bl	800306c <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062d2:	e00d      	b.n	80062f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d4:	f7fc feca 	bl	800306c <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d906      	bls.n	80062f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e1ca      	b.n	800667c <HAL_RCC_OscConfig+0x610>
 80062e6:	bf00      	nop
 80062e8:	40021000 	.word	0x40021000
 80062ec:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062f0:	4b8c      	ldr	r3, [pc, #560]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80062f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1ea      	bne.n	80062d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80a6 	beq.w	8006458 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800630c:	2300      	movs	r3, #0
 800630e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006310:	4b84      	ldr	r3, [pc, #528]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 8006312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_RCC_OscConfig+0x2b4>
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <HAL_RCC_OscConfig+0x2b6>
 8006320:	2300      	movs	r3, #0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006326:	4b7f      	ldr	r3, [pc, #508]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 8006328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632a:	4a7e      	ldr	r2, [pc, #504]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 800632c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006330:	6593      	str	r3, [r2, #88]	@ 0x58
 8006332:	4b7c      	ldr	r3, [pc, #496]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800633e:	2301      	movs	r3, #1
 8006340:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006342:	4b79      	ldr	r3, [pc, #484]	@ (8006528 <HAL_RCC_OscConfig+0x4bc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800634a:	2b00      	cmp	r3, #0
 800634c:	d118      	bne.n	8006380 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800634e:	4b76      	ldr	r3, [pc, #472]	@ (8006528 <HAL_RCC_OscConfig+0x4bc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a75      	ldr	r2, [pc, #468]	@ (8006528 <HAL_RCC_OscConfig+0x4bc>)
 8006354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800635a:	f7fc fe87 	bl	800306c <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006362:	f7fc fe83 	bl	800306c <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e183      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006374:	4b6c      	ldr	r3, [pc, #432]	@ (8006528 <HAL_RCC_OscConfig+0x4bc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d108      	bne.n	800639a <HAL_RCC_OscConfig+0x32e>
 8006388:	4b66      	ldr	r3, [pc, #408]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638e:	4a65      	ldr	r2, [pc, #404]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006398:	e024      	b.n	80063e4 <HAL_RCC_OscConfig+0x378>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b05      	cmp	r3, #5
 80063a0:	d110      	bne.n	80063c4 <HAL_RCC_OscConfig+0x358>
 80063a2:	4b60      	ldr	r3, [pc, #384]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a8:	4a5e      	ldr	r2, [pc, #376]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80063aa:	f043 0304 	orr.w	r3, r3, #4
 80063ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b8:	4a5a      	ldr	r2, [pc, #360]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063c2:	e00f      	b.n	80063e4 <HAL_RCC_OscConfig+0x378>
 80063c4:	4b57      	ldr	r3, [pc, #348]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ca:	4a56      	ldr	r2, [pc, #344]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063d4:	4b53      	ldr	r3, [pc, #332]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063da:	4a52      	ldr	r2, [pc, #328]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80063dc:	f023 0304 	bic.w	r3, r3, #4
 80063e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d016      	beq.n	800641a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ec:	f7fc fe3e 	bl	800306c <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063f2:	e00a      	b.n	800640a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f4:	f7fc fe3a 	bl	800306c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e138      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800640a:	4b46      	ldr	r3, [pc, #280]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 800640c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0ed      	beq.n	80063f4 <HAL_RCC_OscConfig+0x388>
 8006418:	e015      	b.n	8006446 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641a:	f7fc fe27 	bl	800306c <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006420:	e00a      	b.n	8006438 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006422:	f7fc fe23 	bl	800306c <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006430:	4293      	cmp	r3, r2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e121      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006438:	4b3a      	ldr	r3, [pc, #232]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1ed      	bne.n	8006422 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006446:	7ffb      	ldrb	r3, [r7, #31]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d105      	bne.n	8006458 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800644c:	4b35      	ldr	r3, [pc, #212]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 800644e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006450:	4a34      	ldr	r2, [pc, #208]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 8006452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006456:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d03c      	beq.n	80064de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01c      	beq.n	80064a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800646c:	4b2d      	ldr	r3, [pc, #180]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 800646e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006472:	4a2c      	ldr	r2, [pc, #176]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647c:	f7fc fdf6 	bl	800306c <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006484:	f7fc fdf2 	bl	800306c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e0f2      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006496:	4b23      	ldr	r3, [pc, #140]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 8006498:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0ef      	beq.n	8006484 <HAL_RCC_OscConfig+0x418>
 80064a4:	e01b      	b.n	80064de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80064a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b6:	f7fc fdd9 	bl	800306c <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064be:	f7fc fdd5 	bl	800306c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e0d5      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064d0:	4b14      	ldr	r3, [pc, #80]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80064d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1ef      	bne.n	80064be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 80c9 	beq.w	800667a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 030c 	and.w	r3, r3, #12
 80064f0:	2b0c      	cmp	r3, #12
 80064f2:	f000 8083 	beq.w	80065fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d15e      	bne.n	80065bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064fe:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a08      	ldr	r2, [pc, #32]	@ (8006524 <HAL_RCC_OscConfig+0x4b8>)
 8006504:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650a:	f7fc fdaf 	bl	800306c <HAL_GetTick>
 800650e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006510:	e00c      	b.n	800652c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006512:	f7fc fdab 	bl	800306c <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d905      	bls.n	800652c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e0ab      	b.n	800667c <HAL_RCC_OscConfig+0x610>
 8006524:	40021000 	.word	0x40021000
 8006528:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800652c:	4b55      	ldr	r3, [pc, #340]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1ec      	bne.n	8006512 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006538:	4b52      	ldr	r3, [pc, #328]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	4b52      	ldr	r3, [pc, #328]	@ (8006688 <HAL_RCC_OscConfig+0x61c>)
 800653e:	4013      	ands	r3, r2
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6a11      	ldr	r1, [r2, #32]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006548:	3a01      	subs	r2, #1
 800654a:	0112      	lsls	r2, r2, #4
 800654c:	4311      	orrs	r1, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006552:	0212      	lsls	r2, r2, #8
 8006554:	4311      	orrs	r1, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800655a:	0852      	lsrs	r2, r2, #1
 800655c:	3a01      	subs	r2, #1
 800655e:	0552      	lsls	r2, r2, #21
 8006560:	4311      	orrs	r1, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006566:	0852      	lsrs	r2, r2, #1
 8006568:	3a01      	subs	r2, #1
 800656a:	0652      	lsls	r2, r2, #25
 800656c:	4311      	orrs	r1, r2
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006572:	06d2      	lsls	r2, r2, #27
 8006574:	430a      	orrs	r2, r1
 8006576:	4943      	ldr	r1, [pc, #268]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 8006578:	4313      	orrs	r3, r2
 800657a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800657c:	4b41      	ldr	r3, [pc, #260]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a40      	ldr	r2, [pc, #256]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 8006582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006586:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006588:	4b3e      	ldr	r3, [pc, #248]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	4a3d      	ldr	r2, [pc, #244]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 800658e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006592:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fc fd6a 	bl	800306c <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800659c:	f7fc fd66 	bl	800306c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e066      	b.n	800667c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065ae:	4b35      	ldr	r3, [pc, #212]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x530>
 80065ba:	e05e      	b.n	800667a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065bc:	4b31      	ldr	r3, [pc, #196]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a30      	ldr	r2, [pc, #192]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 80065c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c8:	f7fc fd50 	bl	800306c <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d0:	f7fc fd4c 	bl	800306c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e04c      	b.n	800667c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065e2:	4b28      	ldr	r3, [pc, #160]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80065ee:	4b25      	ldr	r3, [pc, #148]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	4924      	ldr	r1, [pc, #144]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 80065f4:	4b25      	ldr	r3, [pc, #148]	@ (800668c <HAL_RCC_OscConfig+0x620>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	60cb      	str	r3, [r1, #12]
 80065fa:	e03e      	b.n	800667a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e039      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006608:	4b1e      	ldr	r3, [pc, #120]	@ (8006684 <HAL_RCC_OscConfig+0x618>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f003 0203 	and.w	r2, r3, #3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	429a      	cmp	r2, r3
 800661a:	d12c      	bne.n	8006676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	3b01      	subs	r3, #1
 8006628:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800662a:	429a      	cmp	r2, r3
 800662c:	d123      	bne.n	8006676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800663a:	429a      	cmp	r2, r3
 800663c:	d11b      	bne.n	8006676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800664a:	429a      	cmp	r2, r3
 800664c:	d113      	bne.n	8006676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	3b01      	subs	r3, #1
 800665c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800665e:	429a      	cmp	r2, r3
 8006660:	d109      	bne.n	8006676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	3b01      	subs	r3, #1
 8006670:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006672:	429a      	cmp	r2, r3
 8006674:	d001      	beq.n	800667a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40021000 	.word	0x40021000
 8006688:	019f800c 	.word	0x019f800c
 800668c:	feeefffc 	.word	0xfeeefffc

08006690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e11e      	b.n	80068e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066a8:	4b91      	ldr	r3, [pc, #580]	@ (80068f0 <HAL_RCC_ClockConfig+0x260>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d910      	bls.n	80066d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b6:	4b8e      	ldr	r3, [pc, #568]	@ (80068f0 <HAL_RCC_ClockConfig+0x260>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f023 020f 	bic.w	r2, r3, #15
 80066be:	498c      	ldr	r1, [pc, #560]	@ (80068f0 <HAL_RCC_ClockConfig+0x260>)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c6:	4b8a      	ldr	r3, [pc, #552]	@ (80068f0 <HAL_RCC_ClockConfig+0x260>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d001      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e106      	b.n	80068e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d073      	beq.n	80067cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d129      	bne.n	8006740 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ec:	4b81      	ldr	r3, [pc, #516]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0f4      	b.n	80068e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80066fc:	f000 f9ce 	bl	8006a9c <RCC_GetSysClockFreqFromPLLSource>
 8006700:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4a7c      	ldr	r2, [pc, #496]	@ (80068f8 <HAL_RCC_ClockConfig+0x268>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d93f      	bls.n	800678a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800670a:	4b7a      	ldr	r3, [pc, #488]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800671e:	2b00      	cmp	r3, #0
 8006720:	d033      	beq.n	800678a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006726:	2b00      	cmp	r3, #0
 8006728:	d12f      	bne.n	800678a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800672a:	4b72      	ldr	r3, [pc, #456]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006732:	4a70      	ldr	r2, [pc, #448]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 8006734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006738:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800673a:	2380      	movs	r3, #128	@ 0x80
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e024      	b.n	800678a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d107      	bne.n	8006758 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006748:	4b6a      	ldr	r3, [pc, #424]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d109      	bne.n	8006768 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e0c6      	b.n	80068e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006758:	4b66      	ldr	r3, [pc, #408]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0be      	b.n	80068e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006768:	f000 f8ce 	bl	8006908 <HAL_RCC_GetSysClockFreq>
 800676c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	4a61      	ldr	r2, [pc, #388]	@ (80068f8 <HAL_RCC_ClockConfig+0x268>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d909      	bls.n	800678a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006776:	4b5f      	ldr	r3, [pc, #380]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800677e:	4a5d      	ldr	r2, [pc, #372]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 8006780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006784:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006786:	2380      	movs	r3, #128	@ 0x80
 8006788:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800678a:	4b5a      	ldr	r3, [pc, #360]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f023 0203 	bic.w	r2, r3, #3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	4957      	ldr	r1, [pc, #348]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 8006798:	4313      	orrs	r3, r2
 800679a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800679c:	f7fc fc66 	bl	800306c <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a2:	e00a      	b.n	80067ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a4:	f7fc fc62 	bl	800306c <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e095      	b.n	80068e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ba:	4b4e      	ldr	r3, [pc, #312]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 020c 	and.w	r2, r3, #12
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d1eb      	bne.n	80067a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d023      	beq.n	8006820 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067e4:	4b43      	ldr	r3, [pc, #268]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	4a42      	ldr	r2, [pc, #264]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 80067ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80067ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80067fc:	4b3d      	ldr	r3, [pc, #244]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006804:	4a3b      	ldr	r2, [pc, #236]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 8006806:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800680a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800680c:	4b39      	ldr	r3, [pc, #228]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	4936      	ldr	r1, [pc, #216]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 800681a:	4313      	orrs	r3, r2
 800681c:	608b      	str	r3, [r1, #8]
 800681e:	e008      	b.n	8006832 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b80      	cmp	r3, #128	@ 0x80
 8006824:	d105      	bne.n	8006832 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006826:	4b33      	ldr	r3, [pc, #204]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	4a32      	ldr	r2, [pc, #200]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 800682c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006830:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006832:	4b2f      	ldr	r3, [pc, #188]	@ (80068f0 <HAL_RCC_ClockConfig+0x260>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d21d      	bcs.n	800687c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006840:	4b2b      	ldr	r3, [pc, #172]	@ (80068f0 <HAL_RCC_ClockConfig+0x260>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f023 020f 	bic.w	r2, r3, #15
 8006848:	4929      	ldr	r1, [pc, #164]	@ (80068f0 <HAL_RCC_ClockConfig+0x260>)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	4313      	orrs	r3, r2
 800684e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006850:	f7fc fc0c 	bl	800306c <HAL_GetTick>
 8006854:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006856:	e00a      	b.n	800686e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006858:	f7fc fc08 	bl	800306c <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e03b      	b.n	80068e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b20      	ldr	r3, [pc, #128]	@ (80068f0 <HAL_RCC_ClockConfig+0x260>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d1ed      	bne.n	8006858 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006888:	4b1a      	ldr	r3, [pc, #104]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	4917      	ldr	r1, [pc, #92]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068a6:	4b13      	ldr	r3, [pc, #76]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	490f      	ldr	r1, [pc, #60]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068ba:	f000 f825 	bl	8006908 <HAL_RCC_GetSysClockFreq>
 80068be:	4602      	mov	r2, r0
 80068c0:	4b0c      	ldr	r3, [pc, #48]	@ (80068f4 <HAL_RCC_ClockConfig+0x264>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	091b      	lsrs	r3, r3, #4
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	490c      	ldr	r1, [pc, #48]	@ (80068fc <HAL_RCC_ClockConfig+0x26c>)
 80068cc:	5ccb      	ldrb	r3, [r1, r3]
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	fa22 f303 	lsr.w	r3, r2, r3
 80068d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006900 <HAL_RCC_ClockConfig+0x270>)
 80068d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80068da:	4b0a      	ldr	r3, [pc, #40]	@ (8006904 <HAL_RCC_ClockConfig+0x274>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fb fca0 	bl	8002224 <HAL_InitTick>
 80068e4:	4603      	mov	r3, r0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40022000 	.word	0x40022000
 80068f4:	40021000 	.word	0x40021000
 80068f8:	04c4b400 	.word	0x04c4b400
 80068fc:	08011b70 	.word	0x08011b70
 8006900:	20000008 	.word	0x20000008
 8006904:	2000000c 	.word	0x2000000c

08006908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800690e:	4b2c      	ldr	r3, [pc, #176]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b04      	cmp	r3, #4
 8006918:	d102      	bne.n	8006920 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800691a:	4b2a      	ldr	r3, [pc, #168]	@ (80069c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	e047      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006920:	4b27      	ldr	r3, [pc, #156]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 030c 	and.w	r3, r3, #12
 8006928:	2b08      	cmp	r3, #8
 800692a:	d102      	bne.n	8006932 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800692c:	4b25      	ldr	r3, [pc, #148]	@ (80069c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	e03e      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006932:	4b23      	ldr	r3, [pc, #140]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b0c      	cmp	r3, #12
 800693c:	d136      	bne.n	80069ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800693e:	4b20      	ldr	r3, [pc, #128]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006948:	4b1d      	ldr	r3, [pc, #116]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	3301      	adds	r3, #1
 8006954:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b03      	cmp	r3, #3
 800695a:	d10c      	bne.n	8006976 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800695c:	4a19      	ldr	r2, [pc, #100]	@ (80069c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	4a16      	ldr	r2, [pc, #88]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006966:	68d2      	ldr	r2, [r2, #12]
 8006968:	0a12      	lsrs	r2, r2, #8
 800696a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	617b      	str	r3, [r7, #20]
      break;
 8006974:	e00c      	b.n	8006990 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006976:	4a13      	ldr	r2, [pc, #76]	@ (80069c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	4a10      	ldr	r2, [pc, #64]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006980:	68d2      	ldr	r2, [r2, #12]
 8006982:	0a12      	lsrs	r2, r2, #8
 8006984:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006988:	fb02 f303 	mul.w	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]
      break;
 800698e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006990:	4b0b      	ldr	r3, [pc, #44]	@ (80069c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	0e5b      	lsrs	r3, r3, #25
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	3301      	adds	r3, #1
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	e001      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80069b0:	693b      	ldr	r3, [r7, #16]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40021000 	.word	0x40021000
 80069c4:	00f42400 	.word	0x00f42400

080069c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069cc:	4b03      	ldr	r3, [pc, #12]	@ (80069dc <HAL_RCC_GetHCLKFreq+0x14>)
 80069ce:	681b      	ldr	r3, [r3, #0]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	20000008 	.word	0x20000008

080069e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80069e4:	f7ff fff0 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4904      	ldr	r1, [pc, #16]	@ (8006a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	40021000 	.word	0x40021000
 8006a08:	08011b80 	.word	0x08011b80

08006a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a10:	f7ff ffda 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8006a14:	4602      	mov	r2, r0
 8006a16:	4b06      	ldr	r3, [pc, #24]	@ (8006a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	0adb      	lsrs	r3, r3, #11
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	4904      	ldr	r1, [pc, #16]	@ (8006a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a22:	5ccb      	ldrb	r3, [r1, r3]
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40021000 	.word	0x40021000
 8006a34:	08011b80 	.word	0x08011b80

08006a38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	220f      	movs	r2, #15
 8006a46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006a48:	4b12      	ldr	r3, [pc, #72]	@ (8006a94 <HAL_RCC_GetClockConfig+0x5c>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0203 	and.w	r2, r3, #3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006a54:	4b0f      	ldr	r3, [pc, #60]	@ (8006a94 <HAL_RCC_GetClockConfig+0x5c>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006a60:	4b0c      	ldr	r3, [pc, #48]	@ (8006a94 <HAL_RCC_GetClockConfig+0x5c>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006a6c:	4b09      	ldr	r3, [pc, #36]	@ (8006a94 <HAL_RCC_GetClockConfig+0x5c>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	08db      	lsrs	r3, r3, #3
 8006a72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006a7a:	4b07      	ldr	r3, [pc, #28]	@ (8006a98 <HAL_RCC_GetClockConfig+0x60>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 020f 	and.w	r2, r3, #15
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	601a      	str	r2, [r3, #0]
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40021000 	.word	0x40021000
 8006a98:	40022000 	.word	0x40022000

08006a9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006aac:	4b1b      	ldr	r3, [pc, #108]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	091b      	lsrs	r3, r3, #4
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d10c      	bne.n	8006ada <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ac0:	4a17      	ldr	r2, [pc, #92]	@ (8006b20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac8:	4a14      	ldr	r2, [pc, #80]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aca:	68d2      	ldr	r2, [r2, #12]
 8006acc:	0a12      	lsrs	r2, r2, #8
 8006ace:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ad2:	fb02 f303 	mul.w	r3, r2, r3
 8006ad6:	617b      	str	r3, [r7, #20]
    break;
 8006ad8:	e00c      	b.n	8006af4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ada:	4a11      	ldr	r2, [pc, #68]	@ (8006b20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ae4:	68d2      	ldr	r2, [r2, #12]
 8006ae6:	0a12      	lsrs	r2, r2, #8
 8006ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006aec:	fb02 f303 	mul.w	r3, r2, r3
 8006af0:	617b      	str	r3, [r7, #20]
    break;
 8006af2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006af4:	4b09      	ldr	r3, [pc, #36]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	0e5b      	lsrs	r3, r3, #25
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	3301      	adds	r3, #1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006b0e:	687b      	ldr	r3, [r7, #4]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	00f42400 	.word	0x00f42400

08006b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b30:	2300      	movs	r3, #0
 8006b32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8098 	beq.w	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b42:	2300      	movs	r3, #0
 8006b44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b46:	4b43      	ldr	r3, [pc, #268]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10d      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b52:	4b40      	ldr	r3, [pc, #256]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b56:	4a3f      	ldr	r2, [pc, #252]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b66:	60bb      	str	r3, [r7, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a39      	ldr	r2, [pc, #228]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b7a:	f7fc fa77 	bl	800306c <HAL_GetTick>
 8006b7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b80:	e009      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b82:	f7fc fa73 	bl	800306c <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d902      	bls.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	74fb      	strb	r3, [r7, #19]
        break;
 8006b94:	e005      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b96:	4b30      	ldr	r3, [pc, #192]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0ef      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ba2:	7cfb      	ldrb	r3, [r7, #19]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d159      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01e      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d019      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bc4:	4b23      	ldr	r3, [pc, #140]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bd0:	4b20      	ldr	r3, [pc, #128]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006be0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bf0:	4a18      	ldr	r2, [pc, #96]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d016      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c02:	f7fc fa33 	bl	800306c <HAL_GetTick>
 8006c06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c08:	e00b      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0a:	f7fc fa2f 	bl	800306c <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d902      	bls.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	74fb      	strb	r3, [r7, #19]
            break;
 8006c20:	e006      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c22:	4b0c      	ldr	r3, [pc, #48]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0ec      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006c30:	7cfb      	ldrb	r3, [r7, #19]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c36:	4b07      	ldr	r3, [pc, #28]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c44:	4903      	ldr	r1, [pc, #12]	@ (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c4c:	e008      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c4e:	7cfb      	ldrb	r3, [r7, #19]
 8006c50:	74bb      	strb	r3, [r7, #18]
 8006c52:	e005      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c54:	40021000 	.word	0x40021000
 8006c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5c:	7cfb      	ldrb	r3, [r7, #19]
 8006c5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c60:	7c7b      	ldrb	r3, [r7, #17]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c66:	4ba6      	ldr	r3, [pc, #664]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6a:	4aa5      	ldr	r2, [pc, #660]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c7e:	4ba0      	ldr	r3, [pc, #640]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c84:	f023 0203 	bic.w	r2, r3, #3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	499c      	ldr	r1, [pc, #624]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ca0:	4b97      	ldr	r3, [pc, #604]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca6:	f023 020c 	bic.w	r2, r3, #12
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	4994      	ldr	r1, [pc, #592]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cc2:	4b8f      	ldr	r3, [pc, #572]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	498b      	ldr	r1, [pc, #556]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ce4:	4b86      	ldr	r3, [pc, #536]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	4983      	ldr	r1, [pc, #524]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d06:	4b7e      	ldr	r3, [pc, #504]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	497a      	ldr	r1, [pc, #488]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d28:	4b75      	ldr	r3, [pc, #468]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	4972      	ldr	r1, [pc, #456]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	4969      	ldr	r1, [pc, #420]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d6c:	4b64      	ldr	r3, [pc, #400]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	4961      	ldr	r1, [pc, #388]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	4958      	ldr	r1, [pc, #352]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d015      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006db0:	4b53      	ldr	r3, [pc, #332]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbe:	4950      	ldr	r1, [pc, #320]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dce:	d105      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dda:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d015      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006de8:	4b45      	ldr	r3, [pc, #276]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	4942      	ldr	r1, [pc, #264]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e06:	d105      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e08:	4b3d      	ldr	r3, [pc, #244]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e12:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d015      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e20:	4b37      	ldr	r3, [pc, #220]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e2e:	4934      	ldr	r1, [pc, #208]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e3e:	d105      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e40:	4b2f      	ldr	r3, [pc, #188]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4a2e      	ldr	r2, [pc, #184]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d015      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e58:	4b29      	ldr	r3, [pc, #164]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e66:	4926      	ldr	r1, [pc, #152]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e76:	d105      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e78:	4b21      	ldr	r3, [pc, #132]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4a20      	ldr	r2, [pc, #128]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d015      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e90:	4b1b      	ldr	r3, [pc, #108]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9e:	4918      	ldr	r1, [pc, #96]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eae:	d105      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006eb0:	4b13      	ldr	r3, [pc, #76]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	4a12      	ldr	r2, [pc, #72]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d015      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ece:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed6:	490a      	ldr	r1, [pc, #40]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ee6:	d105      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ee8:	4b05      	ldr	r3, [pc, #20]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	4a04      	ldr	r2, [pc, #16]	@ (8006f00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ef4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40021000 	.word	0x40021000

08006f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e09d      	b.n	8007052 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d108      	bne.n	8006f30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f26:	d009      	beq.n	8006f3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	61da      	str	r2, [r3, #28]
 8006f2e:	e005      	b.n	8006f3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fb f8cc 	bl	80020f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f7c:	d902      	bls.n	8006f84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	e002      	b.n	8006f8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006f92:	d007      	beq.n	8006fa4 <HAL_SPI_Init+0xa0>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f9c:	d002      	beq.n	8006fa4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe6:	ea42 0103 	orr.w	r1, r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	0c1b      	lsrs	r3, r3, #16
 8007000:	f003 0204 	and.w	r2, r3, #4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007020:	ea42 0103 	orr.w	r1, r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007040:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e049      	b.n	8007100 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d106      	bne.n	8007086 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fb fd99 	bl	8002bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2202      	movs	r2, #2
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f001 f873 	bl	8008184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b01      	cmp	r3, #1
 800711a:	d001      	beq.n	8007120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e04a      	b.n	80071b6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a21      	ldr	r2, [pc, #132]	@ (80071c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d018      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x6c>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714a:	d013      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x6c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1d      	ldr	r2, [pc, #116]	@ (80071c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00e      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x6c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1c      	ldr	r2, [pc, #112]	@ (80071cc <HAL_TIM_Base_Start_IT+0xc4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d009      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x6c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1a      	ldr	r2, [pc, #104]	@ (80071d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x6c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a19      	ldr	r2, [pc, #100]	@ (80071d4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d115      	bne.n	80071a0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	4b17      	ldr	r3, [pc, #92]	@ (80071d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800717c:	4013      	ands	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b06      	cmp	r3, #6
 8007184:	d015      	beq.n	80071b2 <HAL_TIM_Base_Start_IT+0xaa>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800718c:	d011      	beq.n	80071b2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0201 	orr.w	r2, r2, #1
 800719c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719e:	e008      	b.n	80071b2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f042 0201 	orr.w	r2, r2, #1
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e000      	b.n	80071b4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40012c00 	.word	0x40012c00
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40013400 	.word	0x40013400
 80071d4:	40014000 	.word	0x40014000
 80071d8:	00010007 	.word	0x00010007

080071dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e049      	b.n	8007282 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f841 	bl	800728a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3304      	adds	r3, #4
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f000 ffb2 	bl	8008184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d109      	bne.n	80072cc <HAL_TIM_PWM_Start_DMA+0x2c>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	bf0c      	ite	eq
 80072c4:	2301      	moveq	r3, #1
 80072c6:	2300      	movne	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	e03c      	b.n	8007346 <HAL_TIM_PWM_Start_DMA+0xa6>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d109      	bne.n	80072e6 <HAL_TIM_PWM_Start_DMA+0x46>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	bf0c      	ite	eq
 80072de:	2301      	moveq	r3, #1
 80072e0:	2300      	movne	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	e02f      	b.n	8007346 <HAL_TIM_PWM_Start_DMA+0xa6>
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	d109      	bne.n	8007300 <HAL_TIM_PWM_Start_DMA+0x60>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	bf0c      	ite	eq
 80072f8:	2301      	moveq	r3, #1
 80072fa:	2300      	movne	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	e022      	b.n	8007346 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b0c      	cmp	r3, #12
 8007304:	d109      	bne.n	800731a <HAL_TIM_PWM_Start_DMA+0x7a>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	bf0c      	ite	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	2300      	movne	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	e015      	b.n	8007346 <HAL_TIM_PWM_Start_DMA+0xa6>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b10      	cmp	r3, #16
 800731e:	d109      	bne.n	8007334 <HAL_TIM_PWM_Start_DMA+0x94>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	bf0c      	ite	eq
 800732c:	2301      	moveq	r3, #1
 800732e:	2300      	movne	r3, #0
 8007330:	b2db      	uxtb	r3, r3
 8007332:	e008      	b.n	8007346 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	bf0c      	ite	eq
 8007340:	2301      	moveq	r3, #1
 8007342:	2300      	movne	r3, #0
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
 800734c:	e1a6      	b.n	800769c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d109      	bne.n	8007368 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	bf0c      	ite	eq
 8007360:	2301      	moveq	r3, #1
 8007362:	2300      	movne	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	e03c      	b.n	80073e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b04      	cmp	r3, #4
 800736c:	d109      	bne.n	8007382 <HAL_TIM_PWM_Start_DMA+0xe2>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b01      	cmp	r3, #1
 8007378:	bf0c      	ite	eq
 800737a:	2301      	moveq	r3, #1
 800737c:	2300      	movne	r3, #0
 800737e:	b2db      	uxtb	r3, r3
 8007380:	e02f      	b.n	80073e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b08      	cmp	r3, #8
 8007386:	d109      	bne.n	800739c <HAL_TIM_PWM_Start_DMA+0xfc>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b01      	cmp	r3, #1
 8007392:	bf0c      	ite	eq
 8007394:	2301      	moveq	r3, #1
 8007396:	2300      	movne	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	e022      	b.n	80073e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b0c      	cmp	r3, #12
 80073a0:	d109      	bne.n	80073b6 <HAL_TIM_PWM_Start_DMA+0x116>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	bf0c      	ite	eq
 80073ae:	2301      	moveq	r3, #1
 80073b0:	2300      	movne	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	e015      	b.n	80073e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d109      	bne.n	80073d0 <HAL_TIM_PWM_Start_DMA+0x130>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	bf0c      	ite	eq
 80073c8:	2301      	moveq	r3, #1
 80073ca:	2300      	movne	r3, #0
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	e008      	b.n	80073e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	bf0c      	ite	eq
 80073dc:	2301      	moveq	r3, #1
 80073de:	2300      	movne	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d034      	beq.n	8007450 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_TIM_PWM_Start_DMA+0x152>
 80073ec:	887b      	ldrh	r3, [r7, #2]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e152      	b.n	800769c <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d104      	bne.n	8007406 <HAL_TIM_PWM_Start_DMA+0x166>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007404:	e026      	b.n	8007454 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b04      	cmp	r3, #4
 800740a:	d104      	bne.n	8007416 <HAL_TIM_PWM_Start_DMA+0x176>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007414:	e01e      	b.n	8007454 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d104      	bne.n	8007426 <HAL_TIM_PWM_Start_DMA+0x186>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007424:	e016      	b.n	8007454 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b0c      	cmp	r3, #12
 800742a:	d104      	bne.n	8007436 <HAL_TIM_PWM_Start_DMA+0x196>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007434:	e00e      	b.n	8007454 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b10      	cmp	r3, #16
 800743a:	d104      	bne.n	8007446 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007444:	e006      	b.n	8007454 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800744e:	e001      	b.n	8007454 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e123      	b.n	800769c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b0c      	cmp	r3, #12
 8007458:	f200 80ae 	bhi.w	80075b8 <HAL_TIM_PWM_Start_DMA+0x318>
 800745c:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800745e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007462:	bf00      	nop
 8007464:	08007499 	.word	0x08007499
 8007468:	080075b9 	.word	0x080075b9
 800746c:	080075b9 	.word	0x080075b9
 8007470:	080075b9 	.word	0x080075b9
 8007474:	080074e1 	.word	0x080074e1
 8007478:	080075b9 	.word	0x080075b9
 800747c:	080075b9 	.word	0x080075b9
 8007480:	080075b9 	.word	0x080075b9
 8007484:	08007529 	.word	0x08007529
 8007488:	080075b9 	.word	0x080075b9
 800748c:	080075b9 	.word	0x080075b9
 8007490:	080075b9 	.word	0x080075b9
 8007494:	08007571 	.word	0x08007571
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749c:	4a81      	ldr	r2, [pc, #516]	@ (80076a4 <HAL_TIM_PWM_Start_DMA+0x404>)
 800749e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a4:	4a80      	ldr	r2, [pc, #512]	@ (80076a8 <HAL_TIM_PWM_Start_DMA+0x408>)
 80074a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ac:	4a7f      	ldr	r2, [pc, #508]	@ (80076ac <HAL_TIM_PWM_Start_DMA+0x40c>)
 80074ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3334      	adds	r3, #52	@ 0x34
 80074bc:	461a      	mov	r2, r3
 80074be:	887b      	ldrh	r3, [r7, #2]
 80074c0:	f7fd fc40 	bl	8004d44 <HAL_DMA_Start_IT>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e0e6      	b.n	800769c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074dc:	60da      	str	r2, [r3, #12]
      break;
 80074de:	e06e      	b.n	80075be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e4:	4a6f      	ldr	r2, [pc, #444]	@ (80076a4 <HAL_TIM_PWM_Start_DMA+0x404>)
 80074e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ec:	4a6e      	ldr	r2, [pc, #440]	@ (80076a8 <HAL_TIM_PWM_Start_DMA+0x408>)
 80074ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	4a6d      	ldr	r2, [pc, #436]	@ (80076ac <HAL_TIM_PWM_Start_DMA+0x40c>)
 80074f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3338      	adds	r3, #56	@ 0x38
 8007504:	461a      	mov	r2, r3
 8007506:	887b      	ldrh	r3, [r7, #2]
 8007508:	f7fd fc1c 	bl	8004d44 <HAL_DMA_Start_IT>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e0c2      	b.n	800769c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007524:	60da      	str	r2, [r3, #12]
      break;
 8007526:	e04a      	b.n	80075be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	4a5d      	ldr	r2, [pc, #372]	@ (80076a4 <HAL_TIM_PWM_Start_DMA+0x404>)
 800752e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007534:	4a5c      	ldr	r2, [pc, #368]	@ (80076a8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007536:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	4a5b      	ldr	r2, [pc, #364]	@ (80076ac <HAL_TIM_PWM_Start_DMA+0x40c>)
 800753e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	333c      	adds	r3, #60	@ 0x3c
 800754c:	461a      	mov	r2, r3
 800754e:	887b      	ldrh	r3, [r7, #2]
 8007550:	f7fd fbf8 	bl	8004d44 <HAL_DMA_Start_IT>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e09e      	b.n	800769c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800756c:	60da      	str	r2, [r3, #12]
      break;
 800756e:	e026      	b.n	80075be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007574:	4a4b      	ldr	r2, [pc, #300]	@ (80076a4 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007576:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757c:	4a4a      	ldr	r2, [pc, #296]	@ (80076a8 <HAL_TIM_PWM_Start_DMA+0x408>)
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007584:	4a49      	ldr	r2, [pc, #292]	@ (80076ac <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007586:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3340      	adds	r3, #64	@ 0x40
 8007594:	461a      	mov	r2, r3
 8007596:	887b      	ldrh	r3, [r7, #2]
 8007598:	f7fd fbd4 	bl	8004d44 <HAL_DMA_Start_IT>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e07a      	b.n	800769c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075b4:	60da      	str	r2, [r3, #12]
      break;
 80075b6:	e002      	b.n	80075be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	75fb      	strb	r3, [r7, #23]
      break;
 80075bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d16a      	bne.n	800769a <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2201      	movs	r2, #1
 80075ca:	68b9      	ldr	r1, [r7, #8]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 fa07 	bl	80089e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a36      	ldr	r2, [pc, #216]	@ (80076b0 <HAL_TIM_PWM_Start_DMA+0x410>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <HAL_TIM_PWM_Start_DMA+0x364>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a34      	ldr	r2, [pc, #208]	@ (80076b4 <HAL_TIM_PWM_Start_DMA+0x414>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00e      	beq.n	8007604 <HAL_TIM_PWM_Start_DMA+0x364>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a33      	ldr	r2, [pc, #204]	@ (80076b8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d009      	beq.n	8007604 <HAL_TIM_PWM_Start_DMA+0x364>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a31      	ldr	r2, [pc, #196]	@ (80076bc <HAL_TIM_PWM_Start_DMA+0x41c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d004      	beq.n	8007604 <HAL_TIM_PWM_Start_DMA+0x364>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a30      	ldr	r2, [pc, #192]	@ (80076c0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d101      	bne.n	8007608 <HAL_TIM_PWM_Start_DMA+0x368>
 8007604:	2301      	movs	r3, #1
 8007606:	e000      	b.n	800760a <HAL_TIM_PWM_Start_DMA+0x36a>
 8007608:	2300      	movs	r3, #0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800761c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a23      	ldr	r2, [pc, #140]	@ (80076b0 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d018      	beq.n	800765a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007630:	d013      	beq.n	800765a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a23      	ldr	r2, [pc, #140]	@ (80076c4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <HAL_TIM_PWM_Start_DMA+0x3ba>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a21      	ldr	r2, [pc, #132]	@ (80076c8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1a      	ldr	r2, [pc, #104]	@ (80076b4 <HAL_TIM_PWM_Start_DMA+0x414>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a18      	ldr	r2, [pc, #96]	@ (80076b8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d115      	bne.n	8007686 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	4b1a      	ldr	r3, [pc, #104]	@ (80076cc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007662:	4013      	ands	r3, r2
 8007664:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b06      	cmp	r3, #6
 800766a:	d015      	beq.n	8007698 <HAL_TIM_PWM_Start_DMA+0x3f8>
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007672:	d011      	beq.n	8007698 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	e008      	b.n	8007698 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e000      	b.n	800769a <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007698:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	08008073 	.word	0x08008073
 80076a8:	0800811b 	.word	0x0800811b
 80076ac:	08007fe1 	.word	0x08007fe1
 80076b0:	40012c00 	.word	0x40012c00
 80076b4:	40013400 	.word	0x40013400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	00010007 	.word	0x00010007

080076d0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b0c      	cmp	r3, #12
 80076e2:	d855      	bhi.n	8007790 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80076e4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ec <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80076e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ea:	bf00      	nop
 80076ec:	08007721 	.word	0x08007721
 80076f0:	08007791 	.word	0x08007791
 80076f4:	08007791 	.word	0x08007791
 80076f8:	08007791 	.word	0x08007791
 80076fc:	0800773d 	.word	0x0800773d
 8007700:	08007791 	.word	0x08007791
 8007704:	08007791 	.word	0x08007791
 8007708:	08007791 	.word	0x08007791
 800770c:	08007759 	.word	0x08007759
 8007710:	08007791 	.word	0x08007791
 8007714:	08007791 	.word	0x08007791
 8007718:	08007791 	.word	0x08007791
 800771c:	08007775 	.word	0x08007775
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800772e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	4618      	mov	r0, r3
 8007736:	f7fd fbd9 	bl	8004eec <HAL_DMA_Abort_IT>
      break;
 800773a:	e02c      	b.n	8007796 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800774a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007750:	4618      	mov	r0, r3
 8007752:	f7fd fbcb 	bl	8004eec <HAL_DMA_Abort_IT>
      break;
 8007756:	e01e      	b.n	8007796 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007766:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776c:	4618      	mov	r0, r3
 800776e:	f7fd fbbd 	bl	8004eec <HAL_DMA_Abort_IT>
      break;
 8007772:	e010      	b.n	8007796 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007782:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007788:	4618      	mov	r0, r3
 800778a:	f7fd fbaf 	bl	8004eec <HAL_DMA_Abort_IT>
      break;
 800778e:	e002      	b.n	8007796 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
      break;
 8007794:	bf00      	nop
  }

  if (status == HAL_OK)
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f040 8081 	bne.w	80078a0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2200      	movs	r2, #0
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f001 f91a 	bl	80089e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a3e      	ldr	r2, [pc, #248]	@ (80078ac <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d013      	beq.n	80077de <HAL_TIM_PWM_Stop_DMA+0x10e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a3d      	ldr	r2, [pc, #244]	@ (80078b0 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00e      	beq.n	80077de <HAL_TIM_PWM_Stop_DMA+0x10e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a3b      	ldr	r2, [pc, #236]	@ (80078b4 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d009      	beq.n	80077de <HAL_TIM_PWM_Stop_DMA+0x10e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a3a      	ldr	r2, [pc, #232]	@ (80078b8 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d004      	beq.n	80077de <HAL_TIM_PWM_Stop_DMA+0x10e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a38      	ldr	r2, [pc, #224]	@ (80078bc <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d101      	bne.n	80077e2 <HAL_TIM_PWM_Stop_DMA+0x112>
 80077de:	2301      	movs	r3, #1
 80077e0:	e000      	b.n	80077e4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80077e2:	2300      	movs	r3, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d017      	beq.n	8007818 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6a1a      	ldr	r2, [r3, #32]
 80077ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80077f2:	4013      	ands	r3, r2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10f      	bne.n	8007818 <HAL_TIM_PWM_Stop_DMA+0x148>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a1a      	ldr	r2, [r3, #32]
 80077fe:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007802:	4013      	ands	r3, r2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d107      	bne.n	8007818 <HAL_TIM_PWM_Stop_DMA+0x148>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007816:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6a1a      	ldr	r2, [r3, #32]
 800781e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007822:	4013      	ands	r3, r2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10f      	bne.n	8007848 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a1a      	ldr	r2, [r3, #32]
 800782e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007832:	4013      	ands	r3, r2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d107      	bne.n	8007848 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0201 	bic.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d104      	bne.n	8007858 <HAL_TIM_PWM_Stop_DMA+0x188>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007856:	e023      	b.n	80078a0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b04      	cmp	r3, #4
 800785c:	d104      	bne.n	8007868 <HAL_TIM_PWM_Stop_DMA+0x198>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007866:	e01b      	b.n	80078a0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b08      	cmp	r3, #8
 800786c:	d104      	bne.n	8007878 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007876:	e013      	b.n	80078a0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b0c      	cmp	r3, #12
 800787c:	d104      	bne.n	8007888 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007886:	e00b      	b.n	80078a0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b10      	cmp	r3, #16
 800788c:	d104      	bne.n	8007898 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007896:	e003      	b.n	80078a0 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40012c00 	.word	0x40012c00
 80078b0:	40013400 	.word	0x40013400
 80078b4:	40014000 	.word	0x40014000
 80078b8:	40014400 	.word	0x40014400
 80078bc:	40014800 	.word	0x40014800

080078c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d020      	beq.n	8007924 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01b      	beq.n	8007924 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f06f 0202 	mvn.w	r2, #2
 80078f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fb40 	bl	8007f90 <HAL_TIM_IC_CaptureCallback>
 8007910:	e005      	b.n	800791e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fb32 	bl	8007f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fa f9ed 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 0304 	and.w	r3, r3, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	d020      	beq.n	8007970 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01b      	beq.n	8007970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f06f 0204 	mvn.w	r2, #4
 8007940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2202      	movs	r2, #2
 8007946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb1a 	bl	8007f90 <HAL_TIM_IC_CaptureCallback>
 800795c:	e005      	b.n	800796a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fb0c 	bl	8007f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fa f9c7 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d020      	beq.n	80079bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01b      	beq.n	80079bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f06f 0208 	mvn.w	r2, #8
 800798c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2204      	movs	r2, #4
 8007992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 faf4 	bl	8007f90 <HAL_TIM_IC_CaptureCallback>
 80079a8:	e005      	b.n	80079b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fae6 	bl	8007f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7fa f9a1 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f003 0310 	and.w	r3, r3, #16
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d020      	beq.n	8007a08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f003 0310 	and.w	r3, r3, #16
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01b      	beq.n	8007a08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f06f 0210 	mvn.w	r2, #16
 80079d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2208      	movs	r2, #8
 80079de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 face 	bl	8007f90 <HAL_TIM_IC_CaptureCallback>
 80079f4:	e005      	b.n	8007a02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fac0 	bl	8007f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7fa f97b 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00c      	beq.n	8007a2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d007      	beq.n	8007a2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0201 	mvn.w	r2, #1
 8007a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7fa fb0e 	bl	8002048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d104      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00c      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 f875 	bl	8008b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00c      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f86d 	bl	8008b58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00c      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d007      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fa8b 	bl	8007fb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00c      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f06f 0220 	mvn.w	r2, #32
 8007abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f835 	bl	8008b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00c      	beq.n	8007aea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d007      	beq.n	8007aea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f841 	bl	8008b6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00c      	beq.n	8007b0e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d007      	beq.n	8007b0e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f001 f839 	bl	8008b80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00c      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d007      	beq.n	8007b32 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f831 	bl	8008b94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00c      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d007      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f829 	bl	8008ba8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e0ff      	b.n	8007d7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b14      	cmp	r3, #20
 8007b8a:	f200 80f0 	bhi.w	8007d6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007be9 	.word	0x08007be9
 8007b98:	08007d6f 	.word	0x08007d6f
 8007b9c:	08007d6f 	.word	0x08007d6f
 8007ba0:	08007d6f 	.word	0x08007d6f
 8007ba4:	08007c29 	.word	0x08007c29
 8007ba8:	08007d6f 	.word	0x08007d6f
 8007bac:	08007d6f 	.word	0x08007d6f
 8007bb0:	08007d6f 	.word	0x08007d6f
 8007bb4:	08007c6b 	.word	0x08007c6b
 8007bb8:	08007d6f 	.word	0x08007d6f
 8007bbc:	08007d6f 	.word	0x08007d6f
 8007bc0:	08007d6f 	.word	0x08007d6f
 8007bc4:	08007cab 	.word	0x08007cab
 8007bc8:	08007d6f 	.word	0x08007d6f
 8007bcc:	08007d6f 	.word	0x08007d6f
 8007bd0:	08007d6f 	.word	0x08007d6f
 8007bd4:	08007ced 	.word	0x08007ced
 8007bd8:	08007d6f 	.word	0x08007d6f
 8007bdc:	08007d6f 	.word	0x08007d6f
 8007be0:	08007d6f 	.word	0x08007d6f
 8007be4:	08007d2d 	.word	0x08007d2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fb64 	bl	80082bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0208 	orr.w	r2, r2, #8
 8007c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0204 	bic.w	r2, r2, #4
 8007c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6999      	ldr	r1, [r3, #24]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	691a      	ldr	r2, [r3, #16]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	619a      	str	r2, [r3, #24]
      break;
 8007c26:	e0a5      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fbd4 	bl	80083dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699a      	ldr	r2, [r3, #24]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6999      	ldr	r1, [r3, #24]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	021a      	lsls	r2, r3, #8
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	619a      	str	r2, [r3, #24]
      break;
 8007c68:	e084      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fc3d 	bl	80084f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69da      	ldr	r2, [r3, #28]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0208 	orr.w	r2, r2, #8
 8007c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0204 	bic.w	r2, r2, #4
 8007c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69d9      	ldr	r1, [r3, #28]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	61da      	str	r2, [r3, #28]
      break;
 8007ca8:	e064      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 fca5 	bl	8008600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69da      	ldr	r2, [r3, #28]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69d9      	ldr	r1, [r3, #28]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	021a      	lsls	r2, r3, #8
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	61da      	str	r2, [r3, #28]
      break;
 8007cea:	e043      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fd0e 	bl	8008714 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0208 	orr.w	r2, r2, #8
 8007d06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0204 	bic.w	r2, r2, #4
 8007d16:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	691a      	ldr	r2, [r3, #16]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d2a:	e023      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 fd52 	bl	80087dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d56:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	021a      	lsls	r2, r3, #8
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d6c:	e002      	b.n	8007d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	75fb      	strb	r3, [r7, #23]
      break;
 8007d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop

08007d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_TIM_ConfigClockSource+0x1c>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e0de      	b.n	8007f62 <HAL_TIM_ConfigClockSource+0x1da>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007dc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a63      	ldr	r2, [pc, #396]	@ (8007f6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	f000 80a9 	beq.w	8007f36 <HAL_TIM_ConfigClockSource+0x1ae>
 8007de4:	4a61      	ldr	r2, [pc, #388]	@ (8007f6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	f200 80ae 	bhi.w	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007dec:	4a60      	ldr	r2, [pc, #384]	@ (8007f70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	f000 80a1 	beq.w	8007f36 <HAL_TIM_ConfigClockSource+0x1ae>
 8007df4:	4a5e      	ldr	r2, [pc, #376]	@ (8007f70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	f200 80a6 	bhi.w	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8007f74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	f000 8099 	beq.w	8007f36 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e04:	4a5b      	ldr	r2, [pc, #364]	@ (8007f74 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	f200 809e 	bhi.w	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e0c:	4a5a      	ldr	r2, [pc, #360]	@ (8007f78 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	f000 8091 	beq.w	8007f36 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e14:	4a58      	ldr	r2, [pc, #352]	@ (8007f78 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	f200 8096 	bhi.w	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007e20:	f000 8089 	beq.w	8007f36 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007e28:	f200 808e 	bhi.w	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e30:	d03e      	beq.n	8007eb0 <HAL_TIM_ConfigClockSource+0x128>
 8007e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e36:	f200 8087 	bhi.w	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e3e:	f000 8086 	beq.w	8007f4e <HAL_TIM_ConfigClockSource+0x1c6>
 8007e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e46:	d87f      	bhi.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e48:	2b70      	cmp	r3, #112	@ 0x70
 8007e4a:	d01a      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0xfa>
 8007e4c:	2b70      	cmp	r3, #112	@ 0x70
 8007e4e:	d87b      	bhi.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e50:	2b60      	cmp	r3, #96	@ 0x60
 8007e52:	d050      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x16e>
 8007e54:	2b60      	cmp	r3, #96	@ 0x60
 8007e56:	d877      	bhi.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e58:	2b50      	cmp	r3, #80	@ 0x50
 8007e5a:	d03c      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x14e>
 8007e5c:	2b50      	cmp	r3, #80	@ 0x50
 8007e5e:	d873      	bhi.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e60:	2b40      	cmp	r3, #64	@ 0x40
 8007e62:	d058      	beq.n	8007f16 <HAL_TIM_ConfigClockSource+0x18e>
 8007e64:	2b40      	cmp	r3, #64	@ 0x40
 8007e66:	d86f      	bhi.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e68:	2b30      	cmp	r3, #48	@ 0x30
 8007e6a:	d064      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e6c:	2b30      	cmp	r3, #48	@ 0x30
 8007e6e:	d86b      	bhi.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d060      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d867      	bhi.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d05c      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e7c:	2b10      	cmp	r3, #16
 8007e7e:	d05a      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x1ae>
 8007e80:	e062      	b.n	8007f48 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e92:	f000 fd85 	bl	80089a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ea4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	609a      	str	r2, [r3, #8]
      break;
 8007eae:	e04f      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ec0:	f000 fd6e 	bl	80089a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ed2:	609a      	str	r2, [r3, #8]
      break;
 8007ed4:	e03c      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f000 fce0 	bl	80088a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2150      	movs	r1, #80	@ 0x50
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fd39 	bl	8008966 <TIM_ITRx_SetConfig>
      break;
 8007ef4:	e02c      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f02:	461a      	mov	r2, r3
 8007f04:	f000 fcff 	bl	8008906 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2160      	movs	r1, #96	@ 0x60
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fd29 	bl	8008966 <TIM_ITRx_SetConfig>
      break;
 8007f14:	e01c      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f22:	461a      	mov	r2, r3
 8007f24:	f000 fcc0 	bl	80088a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2140      	movs	r1, #64	@ 0x40
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fd19 	bl	8008966 <TIM_ITRx_SetConfig>
      break;
 8007f34:	e00c      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f000 fd10 	bl	8008966 <TIM_ITRx_SetConfig>
      break;
 8007f46:	e003      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4c:	e000      	b.n	8007f50 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007f4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	00100070 	.word	0x00100070
 8007f70:	00100040 	.word	0x00100040
 8007f74:	00100030 	.word	0x00100030
 8007f78:	00100020 	.word	0x00100020

08007f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d107      	bne.n	8008008 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008006:	e02a      	b.n	800805e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	429a      	cmp	r2, r3
 8008010:	d107      	bne.n	8008022 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2202      	movs	r2, #2
 8008016:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008020:	e01d      	b.n	800805e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	429a      	cmp	r2, r3
 800802a:	d107      	bne.n	800803c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2204      	movs	r2, #4
 8008030:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800803a:	e010      	b.n	800805e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d107      	bne.n	8008056 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2208      	movs	r2, #8
 800804a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008054:	e003      	b.n	800805e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7ff ffb4 	bl	8007fcc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	771a      	strb	r2, [r3, #28]
}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	429a      	cmp	r2, r3
 8008088:	d10b      	bne.n	80080a2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d136      	bne.n	8008106 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080a0:	e031      	b.n	8008106 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d10b      	bne.n	80080c4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2202      	movs	r2, #2
 80080b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d125      	bne.n	8008106 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080c2:	e020      	b.n	8008106 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d10b      	bne.n	80080e6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2204      	movs	r2, #4
 80080d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d114      	bne.n	8008106 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080e4:	e00f      	b.n	8008106 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d10a      	bne.n	8008106 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2208      	movs	r2, #8
 80080f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7f9 fdf6 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	771a      	strb	r2, [r3, #28]
}
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008126:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	429a      	cmp	r2, r3
 8008130:	d103      	bne.n	800813a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	771a      	strb	r2, [r3, #28]
 8008138:	e019      	b.n	800816e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	d103      	bne.n	800814c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2202      	movs	r2, #2
 8008148:	771a      	strb	r2, [r3, #28]
 800814a:	e010      	b.n	800816e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d103      	bne.n	800815e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2204      	movs	r2, #4
 800815a:	771a      	strb	r2, [r3, #28]
 800815c:	e007      	b.n	800816e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d102      	bne.n	800816e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2208      	movs	r2, #8
 800816c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff ff18 	bl	8007fa4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	771a      	strb	r2, [r3, #28]
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a42      	ldr	r2, [pc, #264]	@ (80082a0 <TIM_Base_SetConfig+0x11c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00f      	beq.n	80081bc <TIM_Base_SetConfig+0x38>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081a2:	d00b      	beq.n	80081bc <TIM_Base_SetConfig+0x38>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a3f      	ldr	r2, [pc, #252]	@ (80082a4 <TIM_Base_SetConfig+0x120>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d007      	beq.n	80081bc <TIM_Base_SetConfig+0x38>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a3e      	ldr	r2, [pc, #248]	@ (80082a8 <TIM_Base_SetConfig+0x124>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d003      	beq.n	80081bc <TIM_Base_SetConfig+0x38>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a3d      	ldr	r2, [pc, #244]	@ (80082ac <TIM_Base_SetConfig+0x128>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d108      	bne.n	80081ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a33      	ldr	r2, [pc, #204]	@ (80082a0 <TIM_Base_SetConfig+0x11c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d01b      	beq.n	800820e <TIM_Base_SetConfig+0x8a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081dc:	d017      	beq.n	800820e <TIM_Base_SetConfig+0x8a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a30      	ldr	r2, [pc, #192]	@ (80082a4 <TIM_Base_SetConfig+0x120>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <TIM_Base_SetConfig+0x8a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a2f      	ldr	r2, [pc, #188]	@ (80082a8 <TIM_Base_SetConfig+0x124>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00f      	beq.n	800820e <TIM_Base_SetConfig+0x8a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a2e      	ldr	r2, [pc, #184]	@ (80082ac <TIM_Base_SetConfig+0x128>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00b      	beq.n	800820e <TIM_Base_SetConfig+0x8a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a2d      	ldr	r2, [pc, #180]	@ (80082b0 <TIM_Base_SetConfig+0x12c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d007      	beq.n	800820e <TIM_Base_SetConfig+0x8a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a2c      	ldr	r2, [pc, #176]	@ (80082b4 <TIM_Base_SetConfig+0x130>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <TIM_Base_SetConfig+0x8a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a2b      	ldr	r2, [pc, #172]	@ (80082b8 <TIM_Base_SetConfig+0x134>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d108      	bne.n	8008220 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a16      	ldr	r2, [pc, #88]	@ (80082a0 <TIM_Base_SetConfig+0x11c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00f      	beq.n	800826c <TIM_Base_SetConfig+0xe8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a17      	ldr	r2, [pc, #92]	@ (80082ac <TIM_Base_SetConfig+0x128>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00b      	beq.n	800826c <TIM_Base_SetConfig+0xe8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a16      	ldr	r2, [pc, #88]	@ (80082b0 <TIM_Base_SetConfig+0x12c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d007      	beq.n	800826c <TIM_Base_SetConfig+0xe8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a15      	ldr	r2, [pc, #84]	@ (80082b4 <TIM_Base_SetConfig+0x130>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d003      	beq.n	800826c <TIM_Base_SetConfig+0xe8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a14      	ldr	r2, [pc, #80]	@ (80082b8 <TIM_Base_SetConfig+0x134>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d103      	bne.n	8008274 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b01      	cmp	r3, #1
 8008284:	d105      	bne.n	8008292 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f023 0201 	bic.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	611a      	str	r2, [r3, #16]
  }
}
 8008292:	bf00      	nop
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40012c00 	.word	0x40012c00
 80082a4:	40000400 	.word	0x40000400
 80082a8:	40000800 	.word	0x40000800
 80082ac:	40013400 	.word	0x40013400
 80082b0:	40014000 	.word	0x40014000
 80082b4:	40014400 	.word	0x40014400
 80082b8:	40014800 	.word	0x40014800

080082bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	f023 0201 	bic.w	r2, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f023 0303 	bic.w	r3, r3, #3
 80082f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f023 0302 	bic.w	r3, r3, #2
 8008308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	4313      	orrs	r3, r2
 8008312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a2c      	ldr	r2, [pc, #176]	@ (80083c8 <TIM_OC1_SetConfig+0x10c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00f      	beq.n	800833c <TIM_OC1_SetConfig+0x80>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a2b      	ldr	r2, [pc, #172]	@ (80083cc <TIM_OC1_SetConfig+0x110>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d00b      	beq.n	800833c <TIM_OC1_SetConfig+0x80>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a2a      	ldr	r2, [pc, #168]	@ (80083d0 <TIM_OC1_SetConfig+0x114>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d007      	beq.n	800833c <TIM_OC1_SetConfig+0x80>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a29      	ldr	r2, [pc, #164]	@ (80083d4 <TIM_OC1_SetConfig+0x118>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d003      	beq.n	800833c <TIM_OC1_SetConfig+0x80>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a28      	ldr	r2, [pc, #160]	@ (80083d8 <TIM_OC1_SetConfig+0x11c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d10c      	bne.n	8008356 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f023 0308 	bic.w	r3, r3, #8
 8008342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	4313      	orrs	r3, r2
 800834c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f023 0304 	bic.w	r3, r3, #4
 8008354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <TIM_OC1_SetConfig+0x10c>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00f      	beq.n	800837e <TIM_OC1_SetConfig+0xc2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a1a      	ldr	r2, [pc, #104]	@ (80083cc <TIM_OC1_SetConfig+0x110>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00b      	beq.n	800837e <TIM_OC1_SetConfig+0xc2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a19      	ldr	r2, [pc, #100]	@ (80083d0 <TIM_OC1_SetConfig+0x114>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d007      	beq.n	800837e <TIM_OC1_SetConfig+0xc2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a18      	ldr	r2, [pc, #96]	@ (80083d4 <TIM_OC1_SetConfig+0x118>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d003      	beq.n	800837e <TIM_OC1_SetConfig+0xc2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a17      	ldr	r2, [pc, #92]	@ (80083d8 <TIM_OC1_SetConfig+0x11c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d111      	bne.n	80083a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800838c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	4313      	orrs	r3, r2
 80083a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	621a      	str	r2, [r3, #32]
}
 80083bc:	bf00      	nop
 80083be:	371c      	adds	r7, #28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	40012c00 	.word	0x40012c00
 80083cc:	40013400 	.word	0x40013400
 80083d0:	40014000 	.word	0x40014000
 80083d4:	40014400 	.word	0x40014400
 80083d8:	40014800 	.word	0x40014800

080083dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	f023 0210 	bic.w	r2, r3, #16
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800840a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800840e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f023 0320 	bic.w	r3, r3, #32
 800842a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a28      	ldr	r2, [pc, #160]	@ (80084dc <TIM_OC2_SetConfig+0x100>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d003      	beq.n	8008448 <TIM_OC2_SetConfig+0x6c>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a27      	ldr	r2, [pc, #156]	@ (80084e0 <TIM_OC2_SetConfig+0x104>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d10d      	bne.n	8008464 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800844e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008462:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a1d      	ldr	r2, [pc, #116]	@ (80084dc <TIM_OC2_SetConfig+0x100>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00f      	beq.n	800848c <TIM_OC2_SetConfig+0xb0>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a1c      	ldr	r2, [pc, #112]	@ (80084e0 <TIM_OC2_SetConfig+0x104>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_OC2_SetConfig+0xb0>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a1b      	ldr	r2, [pc, #108]	@ (80084e4 <TIM_OC2_SetConfig+0x108>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d007      	beq.n	800848c <TIM_OC2_SetConfig+0xb0>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a1a      	ldr	r2, [pc, #104]	@ (80084e8 <TIM_OC2_SetConfig+0x10c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_OC2_SetConfig+0xb0>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a19      	ldr	r2, [pc, #100]	@ (80084ec <TIM_OC2_SetConfig+0x110>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d113      	bne.n	80084b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008492:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800849a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40013400 	.word	0x40013400
 80084e4:	40014000 	.word	0x40014000
 80084e8:	40014400 	.word	0x40014400
 80084ec:	40014800 	.word	0x40014800

080084f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800851e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0303 	bic.w	r3, r3, #3
 800852a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800853c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a27      	ldr	r2, [pc, #156]	@ (80085ec <TIM_OC3_SetConfig+0xfc>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d003      	beq.n	800855a <TIM_OC3_SetConfig+0x6a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a26      	ldr	r2, [pc, #152]	@ (80085f0 <TIM_OC3_SetConfig+0x100>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d10d      	bne.n	8008576 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a1c      	ldr	r2, [pc, #112]	@ (80085ec <TIM_OC3_SetConfig+0xfc>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00f      	beq.n	800859e <TIM_OC3_SetConfig+0xae>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a1b      	ldr	r2, [pc, #108]	@ (80085f0 <TIM_OC3_SetConfig+0x100>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00b      	beq.n	800859e <TIM_OC3_SetConfig+0xae>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1a      	ldr	r2, [pc, #104]	@ (80085f4 <TIM_OC3_SetConfig+0x104>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d007      	beq.n	800859e <TIM_OC3_SetConfig+0xae>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a19      	ldr	r2, [pc, #100]	@ (80085f8 <TIM_OC3_SetConfig+0x108>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d003      	beq.n	800859e <TIM_OC3_SetConfig+0xae>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a18      	ldr	r2, [pc, #96]	@ (80085fc <TIM_OC3_SetConfig+0x10c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d113      	bne.n	80085c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	40012c00 	.word	0x40012c00
 80085f0:	40013400 	.word	0x40013400
 80085f4:	40014000 	.word	0x40014000
 80085f8:	40014400 	.word	0x40014400
 80085fc:	40014800 	.word	0x40014800

08008600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800862e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800863a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800864e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	031b      	lsls	r3, r3, #12
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a28      	ldr	r2, [pc, #160]	@ (8008700 <TIM_OC4_SetConfig+0x100>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d003      	beq.n	800866c <TIM_OC4_SetConfig+0x6c>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a27      	ldr	r2, [pc, #156]	@ (8008704 <TIM_OC4_SetConfig+0x104>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d10d      	bne.n	8008688 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	031b      	lsls	r3, r3, #12
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	4313      	orrs	r3, r2
 800867e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a1d      	ldr	r2, [pc, #116]	@ (8008700 <TIM_OC4_SetConfig+0x100>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00f      	beq.n	80086b0 <TIM_OC4_SetConfig+0xb0>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a1c      	ldr	r2, [pc, #112]	@ (8008704 <TIM_OC4_SetConfig+0x104>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d00b      	beq.n	80086b0 <TIM_OC4_SetConfig+0xb0>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a1b      	ldr	r2, [pc, #108]	@ (8008708 <TIM_OC4_SetConfig+0x108>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d007      	beq.n	80086b0 <TIM_OC4_SetConfig+0xb0>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a1a      	ldr	r2, [pc, #104]	@ (800870c <TIM_OC4_SetConfig+0x10c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_OC4_SetConfig+0xb0>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a19      	ldr	r2, [pc, #100]	@ (8008710 <TIM_OC4_SetConfig+0x110>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d113      	bne.n	80086d8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	019b      	lsls	r3, r3, #6
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	019b      	lsls	r3, r3, #6
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	621a      	str	r2, [r3, #32]
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40012c00 	.word	0x40012c00
 8008704:	40013400 	.word	0x40013400
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400
 8008710:	40014800 	.word	0x40014800

08008714 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008758:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a17      	ldr	r2, [pc, #92]	@ (80087c8 <TIM_OC5_SetConfig+0xb4>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d00f      	beq.n	800878e <TIM_OC5_SetConfig+0x7a>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a16      	ldr	r2, [pc, #88]	@ (80087cc <TIM_OC5_SetConfig+0xb8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00b      	beq.n	800878e <TIM_OC5_SetConfig+0x7a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <TIM_OC5_SetConfig+0xbc>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d007      	beq.n	800878e <TIM_OC5_SetConfig+0x7a>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a14      	ldr	r2, [pc, #80]	@ (80087d4 <TIM_OC5_SetConfig+0xc0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d003      	beq.n	800878e <TIM_OC5_SetConfig+0x7a>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a13      	ldr	r2, [pc, #76]	@ (80087d8 <TIM_OC5_SetConfig+0xc4>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d109      	bne.n	80087a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008794:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	4313      	orrs	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	621a      	str	r2, [r3, #32]
}
 80087bc:	bf00      	nop
 80087be:	371c      	adds	r7, #28
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	40013400 	.word	0x40013400
 80087d0:	40014000 	.word	0x40014000
 80087d4:	40014400 	.word	0x40014400
 80087d8:	40014800 	.word	0x40014800

080087dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800880a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800880e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	021b      	lsls	r3, r3, #8
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4313      	orrs	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	051b      	lsls	r3, r3, #20
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	4313      	orrs	r3, r2
 800882e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a18      	ldr	r2, [pc, #96]	@ (8008894 <TIM_OC6_SetConfig+0xb8>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00f      	beq.n	8008858 <TIM_OC6_SetConfig+0x7c>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a17      	ldr	r2, [pc, #92]	@ (8008898 <TIM_OC6_SetConfig+0xbc>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00b      	beq.n	8008858 <TIM_OC6_SetConfig+0x7c>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a16      	ldr	r2, [pc, #88]	@ (800889c <TIM_OC6_SetConfig+0xc0>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d007      	beq.n	8008858 <TIM_OC6_SetConfig+0x7c>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a15      	ldr	r2, [pc, #84]	@ (80088a0 <TIM_OC6_SetConfig+0xc4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d003      	beq.n	8008858 <TIM_OC6_SetConfig+0x7c>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a14      	ldr	r2, [pc, #80]	@ (80088a4 <TIM_OC6_SetConfig+0xc8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d109      	bne.n	800886c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800885e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	029b      	lsls	r3, r3, #10
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4313      	orrs	r3, r2
 800886a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	621a      	str	r2, [r3, #32]
}
 8008886:	bf00      	nop
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40012c00 	.word	0x40012c00
 8008898:	40013400 	.word	0x40013400
 800889c:	40014000 	.word	0x40014000
 80088a0:	40014400 	.word	0x40014400
 80088a4:	40014800 	.word	0x40014800

080088a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	f023 0201 	bic.w	r2, r3, #1
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f023 030a 	bic.w	r3, r3, #10
 80088e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	621a      	str	r2, [r3, #32]
}
 80088fa:	bf00      	nop
 80088fc:	371c      	adds	r7, #28
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008906:	b480      	push	{r7}
 8008908:	b087      	sub	sp, #28
 800890a:	af00      	add	r7, sp, #0
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	f023 0210 	bic.w	r2, r3, #16
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	031b      	lsls	r3, r3, #12
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	4313      	orrs	r3, r2
 800893a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008942:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	621a      	str	r2, [r3, #32]
}
 800895a:	bf00      	nop
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800897c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4313      	orrs	r3, r2
 8008988:	f043 0307 	orr.w	r3, r3, #7
 800898c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	609a      	str	r2, [r3, #8]
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	021a      	lsls	r2, r3, #8
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	431a      	orrs	r2, r3
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	609a      	str	r2, [r3, #8]
}
 80089d4:	bf00      	nop
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f003 031f 	and.w	r3, r3, #31
 80089f2:	2201      	movs	r2, #1
 80089f4:	fa02 f303 	lsl.w	r3, r2, r3
 80089f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a1a      	ldr	r2, [r3, #32]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	43db      	mvns	r3, r3
 8008a02:	401a      	ands	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6a1a      	ldr	r2, [r3, #32]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	fa01 f303 	lsl.w	r3, r1, r3
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	621a      	str	r2, [r3, #32]
}
 8008a1e:	bf00      	nop
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
	...

08008a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e065      	b.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a2c      	ldr	r2, [pc, #176]	@ (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d004      	beq.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a2b      	ldr	r2, [pc, #172]	@ (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d108      	bne.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a1b      	ldr	r2, [pc, #108]	@ (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d018      	beq.n	8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aba:	d013      	beq.n	8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a18      	ldr	r2, [pc, #96]	@ (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00e      	beq.n	8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a17      	ldr	r2, [pc, #92]	@ (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d009      	beq.n	8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a12      	ldr	r2, [pc, #72]	@ (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a13      	ldr	r2, [pc, #76]	@ (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d10c      	bne.n	8008afe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	40012c00 	.word	0x40012c00
 8008b20:	40013400 	.word	0x40013400
 8008b24:	40000400 	.word	0x40000400
 8008b28:	40000800 	.word	0x40000800
 8008b2c:	40014000 	.word	0x40014000

08008b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e042      	b.n	8008c54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d106      	bne.n	8008be6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7fa f8cd 	bl	8002d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2224      	movs	r2, #36	@ 0x24
 8008bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 0201 	bic.w	r2, r2, #1
 8008bfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 f894 	bl	8009d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fdc5 	bl	800979c <UART_SetConfig>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d101      	bne.n	8008c1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e01b      	b.n	8008c54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 f913 	bl	8009e78 <UART_CheckIdleState>
 8008c52:	4603      	mov	r3, r0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08a      	sub	sp, #40	@ 0x28
 8008c60:	af02      	add	r7, sp, #8
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	d17b      	bne.n	8008d6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <HAL_UART_Transmit+0x26>
 8008c7c:	88fb      	ldrh	r3, [r7, #6]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e074      	b.n	8008d70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2221      	movs	r2, #33	@ 0x21
 8008c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c96:	f7fa f9e9 	bl	800306c <HAL_GetTick>
 8008c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	88fa      	ldrh	r2, [r7, #6]
 8008ca0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	88fa      	ldrh	r2, [r7, #6]
 8008ca8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cb4:	d108      	bne.n	8008cc8 <HAL_UART_Transmit+0x6c>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d104      	bne.n	8008cc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	61bb      	str	r3, [r7, #24]
 8008cc6:	e003      	b.n	8008cd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cd0:	e030      	b.n	8008d34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2180      	movs	r1, #128	@ 0x80
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f001 f975 	bl	8009fcc <UART_WaitOnFlagUntilTimeout>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d005      	beq.n	8008cf4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e03d      	b.n	8008d70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10b      	bne.n	8008d12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	61bb      	str	r3, [r7, #24]
 8008d10:	e007      	b.n	8008d22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	781a      	ldrb	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1c8      	bne.n	8008cd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2200      	movs	r2, #0
 8008d48:	2140      	movs	r1, #64	@ 0x40
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f001 f93e 	bl	8009fcc <UART_WaitOnFlagUntilTimeout>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e006      	b.n	8008d70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e000      	b.n	8008d70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008d6e:	2302      	movs	r3, #2
  }
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3720      	adds	r7, #32
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08a      	sub	sp, #40	@ 0x28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4613      	mov	r3, r2
 8008d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	d137      	bne.n	8008e00 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <HAL_UART_Receive_IT+0x24>
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e030      	b.n	8008e02 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a18      	ldr	r2, [pc, #96]	@ (8008e0c <HAL_UART_Receive_IT+0x94>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d01f      	beq.n	8008df0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d018      	beq.n	8008df0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	613b      	str	r3, [r7, #16]
   return(result);
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ddc:	623b      	str	r3, [r7, #32]
 8008dde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	69f9      	ldr	r1, [r7, #28]
 8008de2:	6a3a      	ldr	r2, [r7, #32]
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e6      	bne.n	8008dbe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	461a      	mov	r2, r3
 8008df4:	68b9      	ldr	r1, [r7, #8]
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f001 f956 	bl	800a0a8 <UART_Start_Receive_IT>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	e000      	b.n	8008e02 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e00:	2302      	movs	r3, #2
  }
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3728      	adds	r7, #40	@ 0x28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	40008000 	.word	0x40008000

08008e10 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08a      	sub	sp, #40	@ 0x28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d137      	bne.n	8008e98 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <HAL_UART_Receive_DMA+0x24>
 8008e2e:	88fb      	ldrh	r3, [r7, #6]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e030      	b.n	8008e9a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a18      	ldr	r2, [pc, #96]	@ (8008ea4 <HAL_UART_Receive_DMA+0x94>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d01f      	beq.n	8008e88 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d018      	beq.n	8008e88 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	613b      	str	r3, [r7, #16]
   return(result);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e74:	623b      	str	r3, [r7, #32]
 8008e76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	69f9      	ldr	r1, [r7, #28]
 8008e7a:	6a3a      	ldr	r2, [r7, #32]
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e6      	bne.n	8008e56 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e88:	88fb      	ldrh	r3, [r7, #6]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f001 fa2c 	bl	800a2ec <UART_Start_Receive_DMA>
 8008e94:	4603      	mov	r3, r0
 8008e96:	e000      	b.n	8008e9a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e98:	2302      	movs	r3, #2
  }
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3728      	adds	r7, #40	@ 0x28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	40008000 	.word	0x40008000

08008ea8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b0a0      	sub	sp, #128	@ 0x80
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008ebe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ec0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8008ec4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008ece:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ed0:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008ed4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008edc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e6      	bne.n	8008eb0 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef4:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 8008ef8:	f023 0301 	bic.w	r3, r3, #1
 8008efc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3308      	adds	r3, #8
 8008f04:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008f06:	657a      	str	r2, [r7, #84]	@ 0x54
 8008f08:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e3      	bne.n	8008ee2 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d118      	bne.n	8008f54 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f2a:	e853 3f00 	ldrex	r3, [r3]
 8008f2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f32:	f023 0310 	bic.w	r3, r3, #16
 8008f36:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f48:	e841 2300 	strex	r3, r2, [r1]
 8008f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e6      	bne.n	8008f22 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f5e:	2b80      	cmp	r3, #128	@ 0x80
 8008f60:	d137      	bne.n	8008fd2 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f78:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e5      	bne.n	8008f62 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d019      	beq.n	8008fd2 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fb ff45 	bl	8004e3a <HAL_DMA_Abort>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fc f8ac 	bl	8005118 <HAL_DMA_GetError>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	d105      	bne.n	8008fd2 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2210      	movs	r2, #16
 8008fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e073      	b.n	80090ba <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fdc:	2b40      	cmp	r3, #64	@ 0x40
 8008fde:	d13b      	bne.n	8009058 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	e853 3f00 	ldrex	r3, [r3]
 8008fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ff6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009000:	61ba      	str	r2, [r7, #24]
 8009002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009004:	6979      	ldr	r1, [r7, #20]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	e841 2300 	strex	r3, r2, [r1]
 800900c:	613b      	str	r3, [r7, #16]
   return(result);
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e5      	bne.n	8008fe0 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01c      	beq.n	8009058 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009024:	2200      	movs	r2, #0
 8009026:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902e:	4618      	mov	r0, r3
 8009030:	f7fb ff03 	bl	8004e3a <HAL_DMA_Abort>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00e      	beq.n	8009058 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009040:	4618      	mov	r0, r3
 8009042:	f7fc f869 	bl	8005118 <HAL_DMA_GetError>
 8009046:	4603      	mov	r3, r0
 8009048:	2b20      	cmp	r3, #32
 800904a:	d105      	bne.n	8009058 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2210      	movs	r2, #16
 8009050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e030      	b.n	80090ba <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	220f      	movs	r2, #15
 800906e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009078:	d107      	bne.n	800908a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	699a      	ldr	r2, [r3, #24]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f042 0210 	orr.w	r2, r2, #16
 8009088:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	699a      	ldr	r2, [r3, #24]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f042 0208 	orr.w	r2, r2, #8
 8009098:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3780      	adds	r7, #128	@ 0x80
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b0ba      	sub	sp, #232	@ 0xe8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80090ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80090f2:	4013      	ands	r3, r2
 80090f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80090f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d11b      	bne.n	8009138 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d015      	beq.n	8009138 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800910c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009110:	f003 0320 	and.w	r3, r3, #32
 8009114:	2b00      	cmp	r3, #0
 8009116:	d105      	bne.n	8009124 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800911c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d009      	beq.n	8009138 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 8300 	beq.w	800972e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	4798      	blx	r3
      }
      return;
 8009136:	e2fa      	b.n	800972e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 8123 	beq.w	8009388 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009142:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009146:	4b8d      	ldr	r3, [pc, #564]	@ (800937c <HAL_UART_IRQHandler+0x2b8>)
 8009148:	4013      	ands	r3, r2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d106      	bne.n	800915c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800914e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009152:	4b8b      	ldr	r3, [pc, #556]	@ (8009380 <HAL_UART_IRQHandler+0x2bc>)
 8009154:	4013      	ands	r3, r2
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 8116 	beq.w	8009388 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d011      	beq.n	800918c <HAL_UART_IRQHandler+0xc8>
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800916c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00b      	beq.n	800918c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2201      	movs	r2, #1
 800917a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009182:	f043 0201 	orr.w	r2, r3, #1
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800918c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b00      	cmp	r3, #0
 8009196:	d011      	beq.n	80091bc <HAL_UART_IRQHandler+0xf8>
 8009198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2202      	movs	r2, #2
 80091aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b2:	f043 0204 	orr.w	r2, r3, #4
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d011      	beq.n	80091ec <HAL_UART_IRQHandler+0x128>
 80091c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2204      	movs	r2, #4
 80091da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e2:	f043 0202 	orr.w	r2, r3, #2
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f0:	f003 0308 	and.w	r3, r3, #8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d017      	beq.n	8009228 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	d105      	bne.n	8009210 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009204:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009208:	4b5c      	ldr	r3, [pc, #368]	@ (800937c <HAL_UART_IRQHandler+0x2b8>)
 800920a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00b      	beq.n	8009228 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2208      	movs	r2, #8
 8009216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800921e:	f043 0208 	orr.w	r2, r3, #8
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009230:	2b00      	cmp	r3, #0
 8009232:	d012      	beq.n	800925a <HAL_UART_IRQHandler+0x196>
 8009234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009238:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00c      	beq.n	800925a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009250:	f043 0220 	orr.w	r2, r3, #32
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 8266 	beq.w	8009732 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b00      	cmp	r3, #0
 8009270:	d013      	beq.n	800929a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b00      	cmp	r3, #0
 800927c:	d105      	bne.n	800928a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800927e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d007      	beq.n	800929a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ae:	2b40      	cmp	r3, #64	@ 0x40
 80092b0:	d005      	beq.n	80092be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d054      	beq.n	8009368 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 f8fb 	bl	800a4ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b40      	cmp	r3, #64	@ 0x40
 80092d0:	d146      	bne.n	8009360 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3308      	adds	r3, #8
 80092d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80092e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80092fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009302:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800930a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1d9      	bne.n	80092d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009324:	2b00      	cmp	r3, #0
 8009326:	d017      	beq.n	8009358 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800932e:	4a15      	ldr	r2, [pc, #84]	@ (8009384 <HAL_UART_IRQHandler+0x2c0>)
 8009330:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009338:	4618      	mov	r0, r3
 800933a:	f7fb fdd7 	bl	8004eec <HAL_DMA_Abort_IT>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d019      	beq.n	8009378 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009352:	4610      	mov	r0, r2
 8009354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009356:	e00f      	b.n	8009378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa09 	bl	8009770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800935e:	e00b      	b.n	8009378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fa05 	bl	8009770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009366:	e007      	b.n	8009378 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fa01 	bl	8009770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009376:	e1dc      	b.n	8009732 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009378:	bf00      	nop
    return;
 800937a:	e1da      	b.n	8009732 <HAL_UART_IRQHandler+0x66e>
 800937c:	10000001 	.word	0x10000001
 8009380:	04000120 	.word	0x04000120
 8009384:	0800a771 	.word	0x0800a771

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800938c:	2b01      	cmp	r3, #1
 800938e:	f040 8170 	bne.w	8009672 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009396:	f003 0310 	and.w	r3, r3, #16
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 8169 	beq.w	8009672 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093a4:	f003 0310 	and.w	r3, r3, #16
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 8162 	beq.w	8009672 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2210      	movs	r2, #16
 80093b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c0:	2b40      	cmp	r3, #64	@ 0x40
 80093c2:	f040 80d8 	bne.w	8009576 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 80af 	beq.w	800953c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093e8:	429a      	cmp	r2, r3
 80093ea:	f080 80a7 	bcs.w	800953c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b00      	cmp	r3, #0
 8009408:	f040 8087 	bne.w	800951a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009420:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009428:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800943a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009442:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800944e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1da      	bne.n	800940c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3308      	adds	r3, #8
 800945c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009460:	e853 3f00 	ldrex	r3, [r3]
 8009464:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009466:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009468:	f023 0301 	bic.w	r3, r3, #1
 800946c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3308      	adds	r3, #8
 8009476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800947a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800947e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009480:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009482:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800948c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e1      	bne.n	8009456 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3308      	adds	r3, #8
 8009498:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3308      	adds	r3, #8
 80094b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e3      	bne.n	8009492 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2220      	movs	r2, #32
 80094ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094e8:	f023 0310 	bic.w	r3, r3, #16
 80094ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
 80094f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009500:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e4      	bne.n	80094d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009514:	4618      	mov	r0, r3
 8009516:	f7fb fc90 	bl	8004e3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2202      	movs	r2, #2
 800951e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800952c:	b29b      	uxth	r3, r3
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	b29b      	uxth	r3, r3
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f925 	bl	8009784 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800953a:	e0fc      	b.n	8009736 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009546:	429a      	cmp	r2, r3
 8009548:	f040 80f5 	bne.w	8009736 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0320 	and.w	r3, r3, #32
 800955a:	2b20      	cmp	r3, #32
 800955c:	f040 80eb 	bne.w	8009736 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f908 	bl	8009784 <HAL_UARTEx_RxEventCallback>
      return;
 8009574:	e0df      	b.n	8009736 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009582:	b29b      	uxth	r3, r3
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009590:	b29b      	uxth	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80d1 	beq.w	800973a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 80cc 	beq.w	800973a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095aa:	e853 3f00 	ldrex	r3, [r3]
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80095c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e4      	bne.n	80095a2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3308      	adds	r3, #8
 80095de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	623b      	str	r3, [r7, #32]
   return(result);
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095ee:	f023 0301 	bic.w	r3, r3, #1
 80095f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3308      	adds	r3, #8
 80095fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009600:	633a      	str	r2, [r7, #48]	@ 0x30
 8009602:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009608:	e841 2300 	strex	r3, r2, [r1]
 800960c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800960e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1e1      	bne.n	80095d8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2220      	movs	r2, #32
 8009618:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	60fb      	str	r3, [r7, #12]
   return(result);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f023 0310 	bic.w	r3, r3, #16
 800963c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800964a:	61fb      	str	r3, [r7, #28]
 800964c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	69b9      	ldr	r1, [r7, #24]
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	617b      	str	r3, [r7, #20]
   return(result);
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e4      	bne.n	8009628 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f88a 	bl	8009784 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009670:	e063      	b.n	800973a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00e      	beq.n	800969c <HAL_UART_IRQHandler+0x5d8>
 800967e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d008      	beq.n	800969c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009692:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 fdc9 	bl	800b22c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800969a:	e051      	b.n	8009740 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800969c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d014      	beq.n	80096d2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80096a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d105      	bne.n	80096c0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80096b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d03a      	beq.n	800973e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
    }
    return;
 80096d0:	e035      	b.n	800973e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d009      	beq.n	80096f2 <HAL_UART_IRQHandler+0x62e>
 80096de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 f852 	bl	800a794 <UART_EndTransmit_IT>
    return;
 80096f0:	e026      	b.n	8009740 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80096f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <HAL_UART_IRQHandler+0x64e>
 80096fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009702:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 fda2 	bl	800b254 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009710:	e016      	b.n	8009740 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d010      	beq.n	8009740 <HAL_UART_IRQHandler+0x67c>
 800971e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009722:	2b00      	cmp	r3, #0
 8009724:	da0c      	bge.n	8009740 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fd8a 	bl	800b240 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800972c:	e008      	b.n	8009740 <HAL_UART_IRQHandler+0x67c>
      return;
 800972e:	bf00      	nop
 8009730:	e006      	b.n	8009740 <HAL_UART_IRQHandler+0x67c>
    return;
 8009732:	bf00      	nop
 8009734:	e004      	b.n	8009740 <HAL_UART_IRQHandler+0x67c>
      return;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <HAL_UART_IRQHandler+0x67c>
      return;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <HAL_UART_IRQHandler+0x67c>
    return;
 800973e:	bf00      	nop
  }
}
 8009740:	37e8      	adds	r7, #232	@ 0xe8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop

08009748 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800979c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097a0:	b08c      	sub	sp, #48	@ 0x30
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	431a      	orrs	r2, r3
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	431a      	orrs	r2, r3
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4bab      	ldr	r3, [pc, #684]	@ (8009a78 <UART_SetConfig+0x2dc>)
 80097cc:	4013      	ands	r3, r2
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	6812      	ldr	r2, [r2, #0]
 80097d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097d4:	430b      	orrs	r3, r1
 80097d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	68da      	ldr	r2, [r3, #12]
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	430a      	orrs	r2, r1
 80097ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4aa0      	ldr	r2, [pc, #640]	@ (8009a7c <UART_SetConfig+0x2e0>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d004      	beq.n	8009808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009804:	4313      	orrs	r3, r2
 8009806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009812:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	6812      	ldr	r2, [r2, #0]
 800981a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800981c:	430b      	orrs	r3, r1
 800981e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009826:	f023 010f 	bic.w	r1, r3, #15
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a91      	ldr	r2, [pc, #580]	@ (8009a80 <UART_SetConfig+0x2e4>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d125      	bne.n	800988c <UART_SetConfig+0xf0>
 8009840:	4b90      	ldr	r3, [pc, #576]	@ (8009a84 <UART_SetConfig+0x2e8>)
 8009842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009846:	f003 0303 	and.w	r3, r3, #3
 800984a:	2b03      	cmp	r3, #3
 800984c:	d81a      	bhi.n	8009884 <UART_SetConfig+0xe8>
 800984e:	a201      	add	r2, pc, #4	@ (adr r2, 8009854 <UART_SetConfig+0xb8>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	08009865 	.word	0x08009865
 8009858:	08009875 	.word	0x08009875
 800985c:	0800986d 	.word	0x0800986d
 8009860:	0800987d 	.word	0x0800987d
 8009864:	2301      	movs	r3, #1
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800986a:	e0d6      	b.n	8009a1a <UART_SetConfig+0x27e>
 800986c:	2302      	movs	r3, #2
 800986e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009872:	e0d2      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009874:	2304      	movs	r3, #4
 8009876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800987a:	e0ce      	b.n	8009a1a <UART_SetConfig+0x27e>
 800987c:	2308      	movs	r3, #8
 800987e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009882:	e0ca      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009884:	2310      	movs	r3, #16
 8009886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800988a:	e0c6      	b.n	8009a1a <UART_SetConfig+0x27e>
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a7d      	ldr	r2, [pc, #500]	@ (8009a88 <UART_SetConfig+0x2ec>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d138      	bne.n	8009908 <UART_SetConfig+0x16c>
 8009896:	4b7b      	ldr	r3, [pc, #492]	@ (8009a84 <UART_SetConfig+0x2e8>)
 8009898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989c:	f003 030c 	and.w	r3, r3, #12
 80098a0:	2b0c      	cmp	r3, #12
 80098a2:	d82d      	bhi.n	8009900 <UART_SetConfig+0x164>
 80098a4:	a201      	add	r2, pc, #4	@ (adr r2, 80098ac <UART_SetConfig+0x110>)
 80098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098aa:	bf00      	nop
 80098ac:	080098e1 	.word	0x080098e1
 80098b0:	08009901 	.word	0x08009901
 80098b4:	08009901 	.word	0x08009901
 80098b8:	08009901 	.word	0x08009901
 80098bc:	080098f1 	.word	0x080098f1
 80098c0:	08009901 	.word	0x08009901
 80098c4:	08009901 	.word	0x08009901
 80098c8:	08009901 	.word	0x08009901
 80098cc:	080098e9 	.word	0x080098e9
 80098d0:	08009901 	.word	0x08009901
 80098d4:	08009901 	.word	0x08009901
 80098d8:	08009901 	.word	0x08009901
 80098dc:	080098f9 	.word	0x080098f9
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098e6:	e098      	b.n	8009a1a <UART_SetConfig+0x27e>
 80098e8:	2302      	movs	r3, #2
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ee:	e094      	b.n	8009a1a <UART_SetConfig+0x27e>
 80098f0:	2304      	movs	r3, #4
 80098f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098f6:	e090      	b.n	8009a1a <UART_SetConfig+0x27e>
 80098f8:	2308      	movs	r3, #8
 80098fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098fe:	e08c      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009900:	2310      	movs	r3, #16
 8009902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009906:	e088      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a5f      	ldr	r2, [pc, #380]	@ (8009a8c <UART_SetConfig+0x2f0>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d125      	bne.n	800995e <UART_SetConfig+0x1c2>
 8009912:	4b5c      	ldr	r3, [pc, #368]	@ (8009a84 <UART_SetConfig+0x2e8>)
 8009914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009918:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800991c:	2b30      	cmp	r3, #48	@ 0x30
 800991e:	d016      	beq.n	800994e <UART_SetConfig+0x1b2>
 8009920:	2b30      	cmp	r3, #48	@ 0x30
 8009922:	d818      	bhi.n	8009956 <UART_SetConfig+0x1ba>
 8009924:	2b20      	cmp	r3, #32
 8009926:	d00a      	beq.n	800993e <UART_SetConfig+0x1a2>
 8009928:	2b20      	cmp	r3, #32
 800992a:	d814      	bhi.n	8009956 <UART_SetConfig+0x1ba>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <UART_SetConfig+0x19a>
 8009930:	2b10      	cmp	r3, #16
 8009932:	d008      	beq.n	8009946 <UART_SetConfig+0x1aa>
 8009934:	e00f      	b.n	8009956 <UART_SetConfig+0x1ba>
 8009936:	2300      	movs	r3, #0
 8009938:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993c:	e06d      	b.n	8009a1a <UART_SetConfig+0x27e>
 800993e:	2302      	movs	r3, #2
 8009940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009944:	e069      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009946:	2304      	movs	r3, #4
 8009948:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800994c:	e065      	b.n	8009a1a <UART_SetConfig+0x27e>
 800994e:	2308      	movs	r3, #8
 8009950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009954:	e061      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009956:	2310      	movs	r3, #16
 8009958:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800995c:	e05d      	b.n	8009a1a <UART_SetConfig+0x27e>
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a4b      	ldr	r2, [pc, #300]	@ (8009a90 <UART_SetConfig+0x2f4>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d125      	bne.n	80099b4 <UART_SetConfig+0x218>
 8009968:	4b46      	ldr	r3, [pc, #280]	@ (8009a84 <UART_SetConfig+0x2e8>)
 800996a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800996e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009972:	2bc0      	cmp	r3, #192	@ 0xc0
 8009974:	d016      	beq.n	80099a4 <UART_SetConfig+0x208>
 8009976:	2bc0      	cmp	r3, #192	@ 0xc0
 8009978:	d818      	bhi.n	80099ac <UART_SetConfig+0x210>
 800997a:	2b80      	cmp	r3, #128	@ 0x80
 800997c:	d00a      	beq.n	8009994 <UART_SetConfig+0x1f8>
 800997e:	2b80      	cmp	r3, #128	@ 0x80
 8009980:	d814      	bhi.n	80099ac <UART_SetConfig+0x210>
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <UART_SetConfig+0x1f0>
 8009986:	2b40      	cmp	r3, #64	@ 0x40
 8009988:	d008      	beq.n	800999c <UART_SetConfig+0x200>
 800998a:	e00f      	b.n	80099ac <UART_SetConfig+0x210>
 800998c:	2300      	movs	r3, #0
 800998e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009992:	e042      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009994:	2302      	movs	r3, #2
 8009996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800999a:	e03e      	b.n	8009a1a <UART_SetConfig+0x27e>
 800999c:	2304      	movs	r3, #4
 800999e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099a2:	e03a      	b.n	8009a1a <UART_SetConfig+0x27e>
 80099a4:	2308      	movs	r3, #8
 80099a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099aa:	e036      	b.n	8009a1a <UART_SetConfig+0x27e>
 80099ac:	2310      	movs	r3, #16
 80099ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099b2:	e032      	b.n	8009a1a <UART_SetConfig+0x27e>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a30      	ldr	r2, [pc, #192]	@ (8009a7c <UART_SetConfig+0x2e0>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d12a      	bne.n	8009a14 <UART_SetConfig+0x278>
 80099be:	4b31      	ldr	r3, [pc, #196]	@ (8009a84 <UART_SetConfig+0x2e8>)
 80099c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80099c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099cc:	d01a      	beq.n	8009a04 <UART_SetConfig+0x268>
 80099ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099d2:	d81b      	bhi.n	8009a0c <UART_SetConfig+0x270>
 80099d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099d8:	d00c      	beq.n	80099f4 <UART_SetConfig+0x258>
 80099da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099de:	d815      	bhi.n	8009a0c <UART_SetConfig+0x270>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <UART_SetConfig+0x250>
 80099e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e8:	d008      	beq.n	80099fc <UART_SetConfig+0x260>
 80099ea:	e00f      	b.n	8009a0c <UART_SetConfig+0x270>
 80099ec:	2300      	movs	r3, #0
 80099ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099f2:	e012      	b.n	8009a1a <UART_SetConfig+0x27e>
 80099f4:	2302      	movs	r3, #2
 80099f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099fa:	e00e      	b.n	8009a1a <UART_SetConfig+0x27e>
 80099fc:	2304      	movs	r3, #4
 80099fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a02:	e00a      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009a04:	2308      	movs	r3, #8
 8009a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a0a:	e006      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a12:	e002      	b.n	8009a1a <UART_SetConfig+0x27e>
 8009a14:	2310      	movs	r3, #16
 8009a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a17      	ldr	r2, [pc, #92]	@ (8009a7c <UART_SetConfig+0x2e0>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	f040 80a8 	bne.w	8009b76 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a2a:	2b08      	cmp	r3, #8
 8009a2c:	d834      	bhi.n	8009a98 <UART_SetConfig+0x2fc>
 8009a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <UART_SetConfig+0x298>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a59 	.word	0x08009a59
 8009a38:	08009a99 	.word	0x08009a99
 8009a3c:	08009a61 	.word	0x08009a61
 8009a40:	08009a99 	.word	0x08009a99
 8009a44:	08009a67 	.word	0x08009a67
 8009a48:	08009a99 	.word	0x08009a99
 8009a4c:	08009a99 	.word	0x08009a99
 8009a50:	08009a99 	.word	0x08009a99
 8009a54:	08009a6f 	.word	0x08009a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a58:	f7fc ffc2 	bl	80069e0 <HAL_RCC_GetPCLK1Freq>
 8009a5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a5e:	e021      	b.n	8009aa4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a60:	4b0c      	ldr	r3, [pc, #48]	@ (8009a94 <UART_SetConfig+0x2f8>)
 8009a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a64:	e01e      	b.n	8009aa4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a66:	f7fc ff4f 	bl	8006908 <HAL_RCC_GetSysClockFreq>
 8009a6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a6c:	e01a      	b.n	8009aa4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a74:	e016      	b.n	8009aa4 <UART_SetConfig+0x308>
 8009a76:	bf00      	nop
 8009a78:	cfff69f3 	.word	0xcfff69f3
 8009a7c:	40008000 	.word	0x40008000
 8009a80:	40013800 	.word	0x40013800
 8009a84:	40021000 	.word	0x40021000
 8009a88:	40004400 	.word	0x40004400
 8009a8c:	40004800 	.word	0x40004800
 8009a90:	40004c00 	.word	0x40004c00
 8009a94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009aa2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 812a 	beq.w	8009d00 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab0:	4a9e      	ldr	r2, [pc, #632]	@ (8009d2c <UART_SetConfig+0x590>)
 8009ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8009abe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	005b      	lsls	r3, r3, #1
 8009ac8:	4413      	add	r3, r2
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d305      	bcc.n	8009adc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d903      	bls.n	8009ae4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ae2:	e10d      	b.n	8009d00 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	60bb      	str	r3, [r7, #8]
 8009aea:	60fa      	str	r2, [r7, #12]
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af0:	4a8e      	ldr	r2, [pc, #568]	@ (8009d2c <UART_SetConfig+0x590>)
 8009af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	2200      	movs	r2, #0
 8009afa:	603b      	str	r3, [r7, #0]
 8009afc:	607a      	str	r2, [r7, #4]
 8009afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b06:	f7f7 f8e7 	bl	8000cd8 <__aeabi_uldivmod>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4610      	mov	r0, r2
 8009b10:	4619      	mov	r1, r3
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	020b      	lsls	r3, r1, #8
 8009b1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b20:	0202      	lsls	r2, r0, #8
 8009b22:	6979      	ldr	r1, [r7, #20]
 8009b24:	6849      	ldr	r1, [r1, #4]
 8009b26:	0849      	lsrs	r1, r1, #1
 8009b28:	2000      	movs	r0, #0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	eb12 0804 	adds.w	r8, r2, r4
 8009b32:	eb43 0905 	adc.w	r9, r3, r5
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	469a      	mov	sl, r3
 8009b3e:	4693      	mov	fp, r2
 8009b40:	4652      	mov	r2, sl
 8009b42:	465b      	mov	r3, fp
 8009b44:	4640      	mov	r0, r8
 8009b46:	4649      	mov	r1, r9
 8009b48:	f7f7 f8c6 	bl	8000cd8 <__aeabi_uldivmod>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4613      	mov	r3, r2
 8009b52:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b5a:	d308      	bcc.n	8009b6e <UART_SetConfig+0x3d2>
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b62:	d204      	bcs.n	8009b6e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6a3a      	ldr	r2, [r7, #32]
 8009b6a:	60da      	str	r2, [r3, #12]
 8009b6c:	e0c8      	b.n	8009d00 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b74:	e0c4      	b.n	8009d00 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	69db      	ldr	r3, [r3, #28]
 8009b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b7e:	d167      	bne.n	8009c50 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009b80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	d828      	bhi.n	8009bda <UART_SetConfig+0x43e>
 8009b88:	a201      	add	r2, pc, #4	@ (adr r2, 8009b90 <UART_SetConfig+0x3f4>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009bb5 	.word	0x08009bb5
 8009b94:	08009bbd 	.word	0x08009bbd
 8009b98:	08009bc5 	.word	0x08009bc5
 8009b9c:	08009bdb 	.word	0x08009bdb
 8009ba0:	08009bcb 	.word	0x08009bcb
 8009ba4:	08009bdb 	.word	0x08009bdb
 8009ba8:	08009bdb 	.word	0x08009bdb
 8009bac:	08009bdb 	.word	0x08009bdb
 8009bb0:	08009bd3 	.word	0x08009bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb4:	f7fc ff14 	bl	80069e0 <HAL_RCC_GetPCLK1Freq>
 8009bb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bba:	e014      	b.n	8009be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bbc:	f7fc ff26 	bl	8006a0c <HAL_RCC_GetPCLK2Freq>
 8009bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bc2:	e010      	b.n	8009be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8009d30 <UART_SetConfig+0x594>)
 8009bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bc8:	e00d      	b.n	8009be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bca:	f7fc fe9d 	bl	8006908 <HAL_RCC_GetSysClockFreq>
 8009bce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bd0:	e009      	b.n	8009be6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bd8:	e005      	b.n	8009be6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 8089 	beq.w	8009d00 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8009d2c <UART_SetConfig+0x590>)
 8009bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c00:	005a      	lsls	r2, r3, #1
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	085b      	lsrs	r3, r3, #1
 8009c08:	441a      	add	r2, r3
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	2b0f      	cmp	r3, #15
 8009c18:	d916      	bls.n	8009c48 <UART_SetConfig+0x4ac>
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c20:	d212      	bcs.n	8009c48 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f023 030f 	bic.w	r3, r3, #15
 8009c2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	8bfb      	ldrh	r3, [r7, #30]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	8bfa      	ldrh	r2, [r7, #30]
 8009c44:	60da      	str	r2, [r3, #12]
 8009c46:	e05b      	b.n	8009d00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c4e:	e057      	b.n	8009d00 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c54:	2b08      	cmp	r3, #8
 8009c56:	d828      	bhi.n	8009caa <UART_SetConfig+0x50e>
 8009c58:	a201      	add	r2, pc, #4	@ (adr r2, 8009c60 <UART_SetConfig+0x4c4>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009c85 	.word	0x08009c85
 8009c64:	08009c8d 	.word	0x08009c8d
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	08009cab 	.word	0x08009cab
 8009c70:	08009c9b 	.word	0x08009c9b
 8009c74:	08009cab 	.word	0x08009cab
 8009c78:	08009cab 	.word	0x08009cab
 8009c7c:	08009cab 	.word	0x08009cab
 8009c80:	08009ca3 	.word	0x08009ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c84:	f7fc feac 	bl	80069e0 <HAL_RCC_GetPCLK1Freq>
 8009c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c8a:	e014      	b.n	8009cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c8c:	f7fc febe 	bl	8006a0c <HAL_RCC_GetPCLK2Freq>
 8009c90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c92:	e010      	b.n	8009cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c94:	4b26      	ldr	r3, [pc, #152]	@ (8009d30 <UART_SetConfig+0x594>)
 8009c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c98:	e00d      	b.n	8009cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c9a:	f7fc fe35 	bl	8006908 <HAL_RCC_GetSysClockFreq>
 8009c9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ca0:	e009      	b.n	8009cb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ca8:	e005      	b.n	8009cb6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cb4:	bf00      	nop
    }

    if (pclk != 0U)
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d021      	beq.n	8009d00 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8009d2c <UART_SetConfig+0x590>)
 8009cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cca:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	085b      	lsrs	r3, r3, #1
 8009cd4:	441a      	add	r2, r3
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	2b0f      	cmp	r3, #15
 8009ce4:	d909      	bls.n	8009cfa <UART_SetConfig+0x55e>
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cec:	d205      	bcs.n	8009cfa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cee:	6a3b      	ldr	r3, [r7, #32]
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60da      	str	r2, [r3, #12]
 8009cf8:	e002      	b.n	8009d00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2200      	movs	r2, #0
 8009d14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3730      	adds	r7, #48	@ 0x30
 8009d24:	46bd      	mov	sp, r7
 8009d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d2a:	bf00      	nop
 8009d2c:	08011b88 	.word	0x08011b88
 8009d30:	00f42400 	.word	0x00f42400

08009d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d40:	f003 0308 	and.w	r3, r3, #8
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00a      	beq.n	8009d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00a      	beq.n	8009da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da6:	f003 0304 	and.w	r3, r3, #4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00a      	beq.n	8009dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc8:	f003 0310 	and.w	r3, r3, #16
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00a      	beq.n	8009de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dea:	f003 0320 	and.w	r3, r3, #32
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00a      	beq.n	8009e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d01a      	beq.n	8009e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e32:	d10a      	bne.n	8009e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	430a      	orrs	r2, r1
 8009e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	605a      	str	r2, [r3, #4]
  }
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b098      	sub	sp, #96	@ 0x60
 8009e7c:	af02      	add	r7, sp, #8
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e88:	f7f9 f8f0 	bl	800306c <HAL_GetTick>
 8009e8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0308 	and.w	r3, r3, #8
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d12f      	bne.n	8009efc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f88e 	bl	8009fcc <UART_WaitOnFlagUntilTimeout>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d022      	beq.n	8009efc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ed6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e6      	bne.n	8009eb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2220      	movs	r2, #32
 8009eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e063      	b.n	8009fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0304 	and.w	r3, r3, #4
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	d149      	bne.n	8009f9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f0e:	9300      	str	r3, [sp, #0]
 8009f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f12:	2200      	movs	r2, #0
 8009f14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f857 	bl	8009fcc <UART_WaitOnFlagUntilTimeout>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d03c      	beq.n	8009f9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2c:	e853 3f00 	ldrex	r3, [r3]
 8009f30:	623b      	str	r3, [r7, #32]
   return(result);
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f42:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f4a:	e841 2300 	strex	r3, r2, [r1]
 8009f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1e6      	bne.n	8009f24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f023 0301 	bic.w	r3, r3, #1
 8009f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f76:	61fa      	str	r2, [r7, #28]
 8009f78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	69b9      	ldr	r1, [r7, #24]
 8009f7c:	69fa      	ldr	r2, [r7, #28]
 8009f7e:	e841 2300 	strex	r3, r2, [r1]
 8009f82:	617b      	str	r3, [r7, #20]
   return(result);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1e5      	bne.n	8009f56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e012      	b.n	8009fc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2220      	movs	r2, #32
 8009faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3758      	adds	r7, #88	@ 0x58
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fdc:	e04f      	b.n	800a07e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe4:	d04b      	beq.n	800a07e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fe6:	f7f9 f841 	bl	800306c <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d302      	bcc.n	8009ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e04e      	b.n	800a09e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0304 	and.w	r3, r3, #4
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d037      	beq.n	800a07e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b80      	cmp	r3, #128	@ 0x80
 800a012:	d034      	beq.n	800a07e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b40      	cmp	r3, #64	@ 0x40
 800a018:	d031      	beq.n	800a07e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	f003 0308 	and.w	r3, r3, #8
 800a024:	2b08      	cmp	r3, #8
 800a026:	d110      	bne.n	800a04a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2208      	movs	r2, #8
 800a02e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 fa42 	bl	800a4ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2208      	movs	r2, #8
 800a03a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e029      	b.n	800a09e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	69db      	ldr	r3, [r3, #28]
 800a050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a058:	d111      	bne.n	800a07e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 fa28 	bl	800a4ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2220      	movs	r2, #32
 800a06e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e00f      	b.n	800a09e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69da      	ldr	r2, [r3, #28]
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	4013      	ands	r3, r2
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	bf0c      	ite	eq
 800a08e:	2301      	moveq	r3, #1
 800a090:	2300      	movne	r3, #0
 800a092:	b2db      	uxtb	r3, r3
 800a094:	461a      	mov	r2, r3
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d0a0      	beq.n	8009fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b0a3      	sub	sp, #140	@ 0x8c
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	88fa      	ldrh	r2, [r7, #6]
 800a0c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	88fa      	ldrh	r2, [r7, #6]
 800a0c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0da:	d10e      	bne.n	800a0fa <UART_Start_Receive_IT+0x52>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d105      	bne.n	800a0f0 <UART_Start_Receive_IT+0x48>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a0ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a0ee:	e02d      	b.n	800a14c <UART_Start_Receive_IT+0xa4>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	22ff      	movs	r2, #255	@ 0xff
 800a0f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a0f8:	e028      	b.n	800a14c <UART_Start_Receive_IT+0xa4>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10d      	bne.n	800a11e <UART_Start_Receive_IT+0x76>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d104      	bne.n	800a114 <UART_Start_Receive_IT+0x6c>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	22ff      	movs	r2, #255	@ 0xff
 800a10e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a112:	e01b      	b.n	800a14c <UART_Start_Receive_IT+0xa4>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	227f      	movs	r2, #127	@ 0x7f
 800a118:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a11c:	e016      	b.n	800a14c <UART_Start_Receive_IT+0xa4>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a126:	d10d      	bne.n	800a144 <UART_Start_Receive_IT+0x9c>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d104      	bne.n	800a13a <UART_Start_Receive_IT+0x92>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	227f      	movs	r2, #127	@ 0x7f
 800a134:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a138:	e008      	b.n	800a14c <UART_Start_Receive_IT+0xa4>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	223f      	movs	r2, #63	@ 0x3f
 800a13e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a142:	e003      	b.n	800a14c <UART_Start_Receive_IT+0xa4>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2222      	movs	r2, #34	@ 0x22
 800a158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3308      	adds	r3, #8
 800a162:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a166:	e853 3f00 	ldrex	r3, [r3]
 800a16a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a16c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a16e:	f043 0301 	orr.w	r3, r3, #1
 800a172:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a180:	673a      	str	r2, [r7, #112]	@ 0x70
 800a182:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a184:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a186:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a188:	e841 2300 	strex	r3, r2, [r1]
 800a18c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a18e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e3      	bne.n	800a15c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a19c:	d14f      	bne.n	800a23e <UART_Start_Receive_IT+0x196>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a1a4:	88fa      	ldrh	r2, [r7, #6]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d349      	bcc.n	800a23e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1b2:	d107      	bne.n	800a1c4 <UART_Start_Receive_IT+0x11c>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d103      	bne.n	800a1c4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4a47      	ldr	r2, [pc, #284]	@ (800a2dc <UART_Start_Receive_IT+0x234>)
 800a1c0:	675a      	str	r2, [r3, #116]	@ 0x74
 800a1c2:	e002      	b.n	800a1ca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4a46      	ldr	r2, [pc, #280]	@ (800a2e0 <UART_Start_Receive_IT+0x238>)
 800a1c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01a      	beq.n	800a208 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1da:	e853 3f00 	ldrex	r3, [r3]
 800a1de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a1e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a1f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1f6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a1fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a1fc:	e841 2300 	strex	r3, r2, [r1]
 800a200:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e4      	bne.n	800a1d2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3308      	adds	r3, #8
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a21e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3308      	adds	r3, #8
 800a226:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a228:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a22a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a22e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a230:	e841 2300 	strex	r3, r2, [r1]
 800a234:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e5      	bne.n	800a208 <UART_Start_Receive_IT+0x160>
 800a23c:	e046      	b.n	800a2cc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a246:	d107      	bne.n	800a258 <UART_Start_Receive_IT+0x1b0>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d103      	bne.n	800a258 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	4a24      	ldr	r2, [pc, #144]	@ (800a2e4 <UART_Start_Receive_IT+0x23c>)
 800a254:	675a      	str	r2, [r3, #116]	@ 0x74
 800a256:	e002      	b.n	800a25e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4a23      	ldr	r2, [pc, #140]	@ (800a2e8 <UART_Start_Receive_IT+0x240>)
 800a25c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d019      	beq.n	800a29a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a27a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a284:	637b      	str	r3, [r7, #52]	@ 0x34
 800a286:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a28a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e6      	bne.n	800a266 <UART_Start_Receive_IT+0x1be>
 800a298:	e018      	b.n	800a2cc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f043 0320 	orr.w	r3, r3, #32
 800a2ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2b8:	623b      	str	r3, [r7, #32]
 800a2ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	69f9      	ldr	r1, [r7, #28]
 800a2be:	6a3a      	ldr	r2, [r7, #32]
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e6      	bne.n	800a29a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	378c      	adds	r7, #140	@ 0x8c
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	0800aec1 	.word	0x0800aec1
 800a2e0:	0800ab5d 	.word	0x0800ab5d
 800a2e4:	0800a9a5 	.word	0x0800a9a5
 800a2e8:	0800a7ed 	.word	0x0800a7ed

0800a2ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b096      	sub	sp, #88	@ 0x58
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	88fa      	ldrh	r2, [r7, #6]
 800a304:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2222      	movs	r2, #34	@ 0x22
 800a314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d02d      	beq.n	800a37e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a328:	4a40      	ldr	r2, [pc, #256]	@ (800a42c <UART_Start_Receive_DMA+0x140>)
 800a32a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a332:	4a3f      	ldr	r2, [pc, #252]	@ (800a430 <UART_Start_Receive_DMA+0x144>)
 800a334:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a33c:	4a3d      	ldr	r2, [pc, #244]	@ (800a434 <UART_Start_Receive_DMA+0x148>)
 800a33e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a346:	2200      	movs	r2, #0
 800a348:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3324      	adds	r3, #36	@ 0x24
 800a356:	4619      	mov	r1, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a35c:	461a      	mov	r2, r3
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	f7fa fcf0 	bl	8004d44 <HAL_DMA_Start_IT>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d009      	beq.n	800a37e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2210      	movs	r2, #16
 800a36e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2220      	movs	r2, #32
 800a376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e051      	b.n	800a422 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d018      	beq.n	800a3b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38e:	e853 3f00 	ldrex	r3, [r3]
 800a392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a39a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ac:	e841 2300 	strex	r3, r2, [r1]
 800a3b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a3b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e6      	bne.n	800a386 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3308      	adds	r3, #8
 800a3be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	e853 3f00 	ldrex	r3, [r3]
 800a3c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ca:	f043 0301 	orr.w	r3, r3, #1
 800a3ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3d8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a3da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3e0:	e841 2300 	strex	r3, r2, [r1]
 800a3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e5      	bne.n	800a3b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	e853 3f00 	ldrex	r3, [r3]
 800a3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3308      	adds	r3, #8
 800a40a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a40c:	623a      	str	r2, [r7, #32]
 800a40e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	69f9      	ldr	r1, [r7, #28]
 800a412:	6a3a      	ldr	r2, [r7, #32]
 800a414:	e841 2300 	strex	r3, r2, [r1]
 800a418:	61bb      	str	r3, [r7, #24]
   return(result);
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e5      	bne.n	800a3ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3758      	adds	r7, #88	@ 0x58
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	0800a587 	.word	0x0800a587
 800a430:	0800a6b3 	.word	0x0800a6b3
 800a434:	0800a6f1 	.word	0x0800a6f1

0800a438 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a438:	b480      	push	{r7}
 800a43a:	b08f      	sub	sp, #60	@ 0x3c
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	e853 3f00 	ldrex	r3, [r3]
 800a44c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a454:	637b      	str	r3, [r7, #52]	@ 0x34
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a460:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a462:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a466:	e841 2300 	strex	r3, r2, [r1]
 800a46a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1e6      	bne.n	800a440 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3308      	adds	r3, #8
 800a478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	60bb      	str	r3, [r7, #8]
   return(result);
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a488:	633b      	str	r3, [r7, #48]	@ 0x30
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3308      	adds	r3, #8
 800a490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a492:	61ba      	str	r2, [r7, #24]
 800a494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a496:	6979      	ldr	r1, [r7, #20]
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e5      	bne.n	800a472 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a4ae:	bf00      	nop
 800a4b0:	373c      	adds	r7, #60	@ 0x3c
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b095      	sub	sp, #84	@ 0x54
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e6      	bne.n	800a4c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fc:	6a3b      	ldr	r3, [r7, #32]
 800a4fe:	e853 3f00 	ldrex	r3, [r3]
 800a502:	61fb      	str	r3, [r7, #28]
   return(result);
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a50a:	f023 0301 	bic.w	r3, r3, #1
 800a50e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3308      	adds	r3, #8
 800a516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a518:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a51a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a51e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e3      	bne.n	800a4f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a530:	2b01      	cmp	r3, #1
 800a532:	d118      	bne.n	800a566 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	e853 3f00 	ldrex	r3, [r3]
 800a540:	60bb      	str	r3, [r7, #8]
   return(result);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f023 0310 	bic.w	r3, r3, #16
 800a548:	647b      	str	r3, [r7, #68]	@ 0x44
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a552:	61bb      	str	r3, [r7, #24]
 800a554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	6979      	ldr	r1, [r7, #20]
 800a558:	69ba      	ldr	r2, [r7, #24]
 800a55a:	e841 2300 	strex	r3, r2, [r1]
 800a55e:	613b      	str	r3, [r7, #16]
   return(result);
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1e6      	bne.n	800a534 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2220      	movs	r2, #32
 800a56a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a57a:	bf00      	nop
 800a57c:	3754      	adds	r7, #84	@ 0x54
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b09c      	sub	sp, #112	@ 0x70
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a592:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0320 	and.w	r3, r3, #32
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d171      	bne.n	800a686 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a5a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5b2:	e853 3f00 	ldrex	r3, [r3]
 800a5b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5be:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a5ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5d0:	e841 2300 	strex	r3, r2, [r1]
 800a5d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a5d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1e6      	bne.n	800a5aa <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3308      	adds	r3, #8
 800a5e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e6:	e853 3f00 	ldrex	r3, [r3]
 800a5ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ee:	f023 0301 	bic.w	r3, r3, #1
 800a5f2:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3308      	adds	r3, #8
 800a5fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a5fc:	647a      	str	r2, [r7, #68]	@ 0x44
 800a5fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a604:	e841 2300 	strex	r3, r2, [r1]
 800a608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1e5      	bne.n	800a5dc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3308      	adds	r3, #8
 800a616:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	e853 3f00 	ldrex	r3, [r3]
 800a61e:	623b      	str	r3, [r7, #32]
   return(result);
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a626:	663b      	str	r3, [r7, #96]	@ 0x60
 800a628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3308      	adds	r3, #8
 800a62e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a630:	633a      	str	r2, [r7, #48]	@ 0x30
 800a632:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a634:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a638:	e841 2300 	strex	r3, r2, [r1]
 800a63c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1e5      	bne.n	800a610 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a646:	2220      	movs	r2, #32
 800a648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a64c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a64e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a650:	2b01      	cmp	r3, #1
 800a652:	d118      	bne.n	800a686 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	60fb      	str	r3, [r7, #12]
   return(result);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f023 0310 	bic.w	r3, r3, #16
 800a668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a66a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a672:	61fb      	str	r3, [r7, #28]
 800a674:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	69b9      	ldr	r1, [r7, #24]
 800a678:	69fa      	ldr	r2, [r7, #28]
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	617b      	str	r3, [r7, #20]
   return(result);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e6      	bne.n	800a654 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a688:	2200      	movs	r2, #0
 800a68a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a68c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a68e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a690:	2b01      	cmp	r3, #1
 800a692:	d107      	bne.n	800a6a4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a696:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a69a:	4619      	mov	r1, r3
 800a69c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a69e:	f7ff f871 	bl	8009784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6a2:	e002      	b.n	800a6aa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a6a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6a6:	f7f8 fc19 	bl	8002edc <HAL_UART_RxCpltCallback>
}
 800a6aa:	bf00      	nop
 800a6ac:	3770      	adds	r7, #112	@ 0x70
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b084      	sub	sp, #16
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6be:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d109      	bne.n	800a6e2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6d4:	085b      	lsrs	r3, r3, #1
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	4619      	mov	r1, r3
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff f852 	bl	8009784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6e0:	e002      	b.n	800a6e8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f7ff f83a 	bl	800975c <HAL_UART_RxHalfCpltCallback>
}
 800a6e8:	bf00      	nop
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6fc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a704:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a70c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a718:	2b80      	cmp	r3, #128	@ 0x80
 800a71a:	d109      	bne.n	800a730 <UART_DMAError+0x40>
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	2b21      	cmp	r3, #33	@ 0x21
 800a720:	d106      	bne.n	800a730 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2200      	movs	r2, #0
 800a726:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a72a:	6978      	ldr	r0, [r7, #20]
 800a72c:	f7ff fe84 	bl	800a438 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a73a:	2b40      	cmp	r3, #64	@ 0x40
 800a73c:	d109      	bne.n	800a752 <UART_DMAError+0x62>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2b22      	cmp	r3, #34	@ 0x22
 800a742:	d106      	bne.n	800a752 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2200      	movs	r2, #0
 800a748:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a74c:	6978      	ldr	r0, [r7, #20]
 800a74e:	f7ff feb4 	bl	800a4ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a758:	f043 0210 	orr.w	r2, r3, #16
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a762:	6978      	ldr	r0, [r7, #20]
 800a764:	f7ff f804 	bl	8009770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a768:	bf00      	nop
 800a76a:	3718      	adds	r7, #24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7fe fff2 	bl	8009770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7b0:	61fb      	str	r3, [r7, #28]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	61bb      	str	r3, [r7, #24]
 800a7bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7be:	6979      	ldr	r1, [r7, #20]
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	e841 2300 	strex	r3, r2, [r1]
 800a7c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1e6      	bne.n	800a79c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2220      	movs	r2, #32
 800a7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7fe ffb3 	bl	8009748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7e2:	bf00      	nop
 800a7e4:	3720      	adds	r7, #32
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b09c      	sub	sp, #112	@ 0x70
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a804:	2b22      	cmp	r3, #34	@ 0x22
 800a806:	f040 80be 	bne.w	800a986 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a810:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a814:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a818:	b2d9      	uxtb	r1, r3
 800a81a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a824:	400a      	ands	r2, r1
 800a826:	b2d2      	uxtb	r2, r2
 800a828:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	3b01      	subs	r3, #1
 800a83e:	b29a      	uxth	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f040 80a1 	bne.w	800a996 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a872:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a874:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a878:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e6      	bne.n	800a854 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3308      	adds	r3, #8
 800a88c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a898:	f023 0301 	bic.w	r3, r3, #1
 800a89c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a8a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a8a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e5      	bne.n	800a886 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a33      	ldr	r2, [pc, #204]	@ (800a9a0 <UART_RxISR_8BIT+0x1b4>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d01f      	beq.n	800a918 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d018      	beq.n	800a918 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a904:	633b      	str	r3, [r7, #48]	@ 0x30
 800a906:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a90a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a90c:	e841 2300 	strex	r3, r2, [r1]
 800a910:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e6      	bne.n	800a8e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d12e      	bne.n	800a97e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	e853 3f00 	ldrex	r3, [r3]
 800a932:	60fb      	str	r3, [r7, #12]
   return(result);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f023 0310 	bic.w	r3, r3, #16
 800a93a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	461a      	mov	r2, r3
 800a942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a944:	61fb      	str	r3, [r7, #28]
 800a946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a948:	69b9      	ldr	r1, [r7, #24]
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	e841 2300 	strex	r3, r2, [r1]
 800a950:	617b      	str	r3, [r7, #20]
   return(result);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1e6      	bne.n	800a926 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	f003 0310 	and.w	r3, r3, #16
 800a962:	2b10      	cmp	r3, #16
 800a964:	d103      	bne.n	800a96e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2210      	movs	r2, #16
 800a96c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7fe ff04 	bl	8009784 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a97c:	e00b      	b.n	800a996 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7f8 faac 	bl	8002edc <HAL_UART_RxCpltCallback>
}
 800a984:	e007      	b.n	800a996 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	699a      	ldr	r2, [r3, #24]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f042 0208 	orr.w	r2, r2, #8
 800a994:	619a      	str	r2, [r3, #24]
}
 800a996:	bf00      	nop
 800a998:	3770      	adds	r7, #112	@ 0x70
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	40008000 	.word	0x40008000

0800a9a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b09c      	sub	sp, #112	@ 0x70
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a9b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9bc:	2b22      	cmp	r3, #34	@ 0x22
 800a9be:	f040 80be 	bne.w	800ab3e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a9d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a9d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a9da:	4013      	ands	r3, r2
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9e6:	1c9a      	adds	r2, r3, #2
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f040 80a1 	bne.w	800ab4e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800aa1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa20:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa2a:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa2c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa32:	e841 2300 	strex	r3, r2, [r1]
 800aa36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1e6      	bne.n	800aa0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3308      	adds	r3, #8
 800aa44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa50:	f023 0301 	bic.w	r3, r3, #1
 800aa54:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3308      	adds	r3, #8
 800aa5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa5e:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e5      	bne.n	800aa3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2220      	movs	r2, #32
 800aa76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a33      	ldr	r2, [pc, #204]	@ (800ab58 <UART_RxISR_16BIT+0x1b4>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d01f      	beq.n	800aad0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d018      	beq.n	800aad0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	e853 3f00 	ldrex	r3, [r3]
 800aaaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	461a      	mov	r2, r3
 800aaba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aabc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aabe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aac4:	e841 2300 	strex	r3, r2, [r1]
 800aac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1e6      	bne.n	800aa9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d12e      	bne.n	800ab36 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f023 0310 	bic.w	r3, r3, #16
 800aaf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aafc:	61bb      	str	r3, [r7, #24]
 800aafe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	6979      	ldr	r1, [r7, #20]
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	e841 2300 	strex	r3, r2, [r1]
 800ab08:	613b      	str	r3, [r7, #16]
   return(result);
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e6      	bne.n	800aade <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	f003 0310 	and.w	r3, r3, #16
 800ab1a:	2b10      	cmp	r3, #16
 800ab1c:	d103      	bne.n	800ab26 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2210      	movs	r2, #16
 800ab24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7fe fe28 	bl	8009784 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab34:	e00b      	b.n	800ab4e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7f8 f9d0 	bl	8002edc <HAL_UART_RxCpltCallback>
}
 800ab3c:	e007      	b.n	800ab4e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	699a      	ldr	r2, [r3, #24]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f042 0208 	orr.w	r2, r2, #8
 800ab4c:	619a      	str	r2, [r3, #24]
}
 800ab4e:	bf00      	nop
 800ab50:	3770      	adds	r7, #112	@ 0x70
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	40008000 	.word	0x40008000

0800ab5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b0ac      	sub	sp, #176	@ 0xb0
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ab6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab92:	2b22      	cmp	r3, #34	@ 0x22
 800ab94:	f040 8183 	bne.w	800ae9e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ab9e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aba2:	e126      	b.n	800adf2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abaa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800abb2:	b2d9      	uxtb	r1, r3
 800abb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abbe:	400a      	ands	r2, r1
 800abc0:	b2d2      	uxtb	r2, r2
 800abc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abc8:	1c5a      	adds	r2, r3, #1
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	3b01      	subs	r3, #1
 800abd8:	b29a      	uxth	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800abea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abee:	f003 0307 	and.w	r3, r3, #7
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d053      	beq.n	800ac9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800abf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d011      	beq.n	800ac26 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ac02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ac06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00b      	beq.n	800ac26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2201      	movs	r2, #1
 800ac14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac1c:	f043 0201 	orr.w	r2, r3, #1
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac2a:	f003 0302 	and.w	r3, r3, #2
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d011      	beq.n	800ac56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ac32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00b      	beq.n	800ac56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2202      	movs	r2, #2
 800ac44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac4c:	f043 0204 	orr.w	r2, r3, #4
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac5a:	f003 0304 	and.w	r3, r3, #4
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d011      	beq.n	800ac86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ac62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00b      	beq.n	800ac86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2204      	movs	r2, #4
 800ac74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac7c:	f043 0202 	orr.w	r2, r3, #2
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d006      	beq.n	800ac9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7fe fd6d 	bl	8009770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f040 80a3 	bne.w	800adf2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acb4:	e853 3f00 	ldrex	r3, [r3]
 800acb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800acba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	461a      	mov	r2, r3
 800acca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800acce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800acd0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800acd4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800acdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e4      	bne.n	800acac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3308      	adds	r3, #8
 800ace8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acec:	e853 3f00 	ldrex	r3, [r3]
 800acf0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800acf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800acf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800acf8:	f023 0301 	bic.w	r3, r3, #1
 800acfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3308      	adds	r3, #8
 800ad06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad0a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ad0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ad10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ad18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e1      	bne.n	800ace2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2220      	movs	r2, #32
 800ad22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a60      	ldr	r2, [pc, #384]	@ (800aeb8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d021      	beq.n	800ad80 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d01a      	beq.n	800ad80 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad52:	e853 3f00 	ldrex	r3, [r3]
 800ad56:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ad58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ad6c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad6e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad74:	e841 2300 	strex	r3, r2, [r1]
 800ad78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ad7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d1e4      	bne.n	800ad4a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d130      	bne.n	800adea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad96:	e853 3f00 	ldrex	r3, [r3]
 800ad9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9e:	f023 0310 	bic.w	r3, r3, #16
 800ada2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800adb0:	643b      	str	r3, [r7, #64]	@ 0x40
 800adb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800adb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800adb8:	e841 2300 	strex	r3, r2, [r1]
 800adbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1e4      	bne.n	800ad8e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	f003 0310 	and.w	r3, r3, #16
 800adce:	2b10      	cmp	r3, #16
 800add0:	d103      	bne.n	800adda <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2210      	movs	r2, #16
 800add8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7fe fcce 	bl	8009784 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ade8:	e00e      	b.n	800ae08 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7f8 f876 	bl	8002edc <HAL_UART_RxCpltCallback>
        break;
 800adf0:	e00a      	b.n	800ae08 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800adf2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d006      	beq.n	800ae08 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800adfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f47f aece 	bne.w	800aba4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae0e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ae12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d049      	beq.n	800aeae <UART_RxISR_8BIT_FIFOEN+0x352>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ae20:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d242      	bcs.n	800aeae <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	3308      	adds	r3, #8
 800ae48:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ae4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae54:	e841 2300 	strex	r3, r2, [r1]
 800ae58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e3      	bne.n	800ae28 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a16      	ldr	r2, [pc, #88]	@ (800aebc <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ae64:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	e853 3f00 	ldrex	r3, [r3]
 800ae72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f043 0320 	orr.w	r3, r3, #32
 800ae7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ae88:	61bb      	str	r3, [r7, #24]
 800ae8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	e841 2300 	strex	r3, r2, [r1]
 800ae94:	613b      	str	r3, [r7, #16]
   return(result);
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e4      	bne.n	800ae66 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae9c:	e007      	b.n	800aeae <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	699a      	ldr	r2, [r3, #24]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f042 0208 	orr.w	r2, r2, #8
 800aeac:	619a      	str	r2, [r3, #24]
}
 800aeae:	bf00      	nop
 800aeb0:	37b0      	adds	r7, #176	@ 0xb0
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	40008000 	.word	0x40008000
 800aebc:	0800a7ed 	.word	0x0800a7ed

0800aec0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b0ae      	sub	sp, #184	@ 0xb8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aece:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aef6:	2b22      	cmp	r3, #34	@ 0x22
 800aef8:	f040 8187 	bne.w	800b20a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800af02:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af06:	e12a      	b.n	800b15e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800af1a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800af1e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800af22:	4013      	ands	r3, r2
 800af24:	b29a      	uxth	r2, r3
 800af26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800af2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af30:	1c9a      	adds	r2, r3, #2
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	3b01      	subs	r3, #1
 800af40:	b29a      	uxth	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800af52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af56:	f003 0307 	and.w	r3, r3, #7
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d053      	beq.n	800b006 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d011      	beq.n	800af8e <UART_RxISR_16BIT_FIFOEN+0xce>
 800af6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2201      	movs	r2, #1
 800af7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af84:	f043 0201 	orr.w	r2, r3, #1
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af92:	f003 0302 	and.w	r3, r3, #2
 800af96:	2b00      	cmp	r3, #0
 800af98:	d011      	beq.n	800afbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 800af9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00b      	beq.n	800afbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2202      	movs	r2, #2
 800afac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb4:	f043 0204 	orr.w	r2, r3, #4
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afc2:	f003 0304 	and.w	r3, r3, #4
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d011      	beq.n	800afee <UART_RxISR_16BIT_FIFOEN+0x12e>
 800afca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00b      	beq.n	800afee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2204      	movs	r2, #4
 800afdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afe4:	f043 0202 	orr.w	r2, r3, #2
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d006      	beq.n	800b006 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7fe fbb9 	bl	8009770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f040 80a5 	bne.w	800b15e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	461a      	mov	r2, r3
 800b032:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b036:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b03a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b03e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b042:	e841 2300 	strex	r3, r2, [r1]
 800b046:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1e2      	bne.n	800b014 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3308      	adds	r3, #8
 800b054:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b058:	e853 3f00 	ldrex	r3, [r3]
 800b05c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b05e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b060:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b064:	f023 0301 	bic.w	r3, r3, #1
 800b068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3308      	adds	r3, #8
 800b072:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b076:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b078:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b07c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b07e:	e841 2300 	strex	r3, r2, [r1]
 800b082:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1e1      	bne.n	800b04e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2220      	movs	r2, #32
 800b08e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a60      	ldr	r2, [pc, #384]	@ (800b224 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d021      	beq.n	800b0ec <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d01a      	beq.n	800b0ec <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0be:	e853 3f00 	ldrex	r3, [r3]
 800b0c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b0c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b0d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0e0:	e841 2300 	strex	r3, r2, [r1]
 800b0e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e4      	bne.n	800b0b6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d130      	bne.n	800b156 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b102:	e853 3f00 	ldrex	r3, [r3]
 800b106:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b10a:	f023 0310 	bic.w	r3, r3, #16
 800b10e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b11c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b11e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b124:	e841 2300 	strex	r3, r2, [r1]
 800b128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b12a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1e4      	bne.n	800b0fa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	69db      	ldr	r3, [r3, #28]
 800b136:	f003 0310 	and.w	r3, r3, #16
 800b13a:	2b10      	cmp	r3, #16
 800b13c:	d103      	bne.n	800b146 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2210      	movs	r2, #16
 800b144:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7fe fb18 	bl	8009784 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b154:	e00e      	b.n	800b174 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7f7 fec0 	bl	8002edc <HAL_UART_RxCpltCallback>
        break;
 800b15c:	e00a      	b.n	800b174 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b15e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b162:	2b00      	cmp	r3, #0
 800b164:	d006      	beq.n	800b174 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800b166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b16a:	f003 0320 	and.w	r3, r3, #32
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f47f aeca 	bne.w	800af08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b17a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b17e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b182:	2b00      	cmp	r3, #0
 800b184:	d049      	beq.n	800b21a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b18c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b190:	429a      	cmp	r2, r3
 800b192:	d242      	bcs.n	800b21a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3308      	adds	r3, #8
 800b19a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19e:	e853 3f00 	ldrex	r3, [r3]
 800b1a2:	623b      	str	r3, [r7, #32]
   return(result);
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b1aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b1b8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1c0:	e841 2300 	strex	r3, r2, [r1]
 800b1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1e3      	bne.n	800b194 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a16      	ldr	r2, [pc, #88]	@ (800b228 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800b1d0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	e853 3f00 	ldrex	r3, [r3]
 800b1de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f043 0320 	orr.w	r3, r3, #32
 800b1e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b1f4:	61fb      	str	r3, [r7, #28]
 800b1f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f8:	69b9      	ldr	r1, [r7, #24]
 800b1fa:	69fa      	ldr	r2, [r7, #28]
 800b1fc:	e841 2300 	strex	r3, r2, [r1]
 800b200:	617b      	str	r3, [r7, #20]
   return(result);
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1e4      	bne.n	800b1d2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b208:	e007      	b.n	800b21a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	699a      	ldr	r2, [r3, #24]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f042 0208 	orr.w	r2, r2, #8
 800b218:	619a      	str	r2, [r3, #24]
}
 800b21a:	bf00      	nop
 800b21c:	37b8      	adds	r7, #184	@ 0xb8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40008000 	.word	0x40008000
 800b228:	0800a9a5 	.word	0x0800a9a5

0800b22c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b276:	2b01      	cmp	r3, #1
 800b278:	d101      	bne.n	800b27e <HAL_UARTEx_DisableFifoMode+0x16>
 800b27a:	2302      	movs	r3, #2
 800b27c:	e027      	b.n	800b2ce <HAL_UARTEx_DisableFifoMode+0x66>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2224      	movs	r2, #36	@ 0x24
 800b28a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f022 0201 	bic.w	r2, r2, #1
 800b2a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b2ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d101      	bne.n	800b2f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	e02d      	b.n	800b34e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2224      	movs	r2, #36	@ 0x24
 800b2fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f022 0201 	bic.w	r2, r2, #1
 800b318:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f850 	bl	800b3d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2220      	movs	r2, #32
 800b340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b084      	sub	sp, #16
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b366:	2b01      	cmp	r3, #1
 800b368:	d101      	bne.n	800b36e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b36a:	2302      	movs	r3, #2
 800b36c:	e02d      	b.n	800b3ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2224      	movs	r2, #36	@ 0x24
 800b37a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f022 0201 	bic.w	r2, r2, #1
 800b394:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f812 	bl	800b3d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2220      	movs	r2, #32
 800b3bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
	...

0800b3d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d108      	bne.n	800b3f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3f4:	e031      	b.n	800b45a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3f6:	2308      	movs	r3, #8
 800b3f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3fa:	2308      	movs	r3, #8
 800b3fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	0e5b      	lsrs	r3, r3, #25
 800b406:	b2db      	uxtb	r3, r3
 800b408:	f003 0307 	and.w	r3, r3, #7
 800b40c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	0f5b      	lsrs	r3, r3, #29
 800b416:	b2db      	uxtb	r3, r3
 800b418:	f003 0307 	and.w	r3, r3, #7
 800b41c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b41e:	7bbb      	ldrb	r3, [r7, #14]
 800b420:	7b3a      	ldrb	r2, [r7, #12]
 800b422:	4911      	ldr	r1, [pc, #68]	@ (800b468 <UARTEx_SetNbDataToProcess+0x94>)
 800b424:	5c8a      	ldrb	r2, [r1, r2]
 800b426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b42a:	7b3a      	ldrb	r2, [r7, #12]
 800b42c:	490f      	ldr	r1, [pc, #60]	@ (800b46c <UARTEx_SetNbDataToProcess+0x98>)
 800b42e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b430:	fb93 f3f2 	sdiv	r3, r3, r2
 800b434:	b29a      	uxth	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
 800b43e:	7b7a      	ldrb	r2, [r7, #13]
 800b440:	4909      	ldr	r1, [pc, #36]	@ (800b468 <UARTEx_SetNbDataToProcess+0x94>)
 800b442:	5c8a      	ldrb	r2, [r1, r2]
 800b444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b448:	7b7a      	ldrb	r2, [r7, #13]
 800b44a:	4908      	ldr	r1, [pc, #32]	@ (800b46c <UARTEx_SetNbDataToProcess+0x98>)
 800b44c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b44e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b452:	b29a      	uxth	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b45a:	bf00      	nop
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	08011ba0 	.word	0x08011ba0
 800b46c:	08011ba8 	.word	0x08011ba8

0800b470 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800b474:	4907      	ldr	r1, [pc, #28]	@ (800b494 <MX_FATFS_Init+0x24>)
 800b476:	4808      	ldr	r0, [pc, #32]	@ (800b498 <MX_FATFS_Init+0x28>)
 800b478:	f000 f8b6 	bl	800b5e8 <FATFS_LinkDriver>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d002      	beq.n	800b488 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800b482:	f04f 33ff 	mov.w	r3, #4294967295
 800b486:	e003      	b.n	800b490 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800b488:	4b04      	ldr	r3, [pc, #16]	@ (800b49c <MX_FATFS_Init+0x2c>)
 800b48a:	2201      	movs	r2, #1
 800b48c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800b48e:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800b490:	4618      	mov	r0, r3
 800b492:	bd80      	pop	{r7, pc}
 800b494:	200008c8 	.word	0x200008c8
 800b498:	20000018 	.word	0x20000018
 800b49c:	200008cc 	.word	0x200008cc

0800b4a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b4aa:	4b06      	ldr	r3, [pc, #24]	@ (800b4c4 <USER_initialize+0x24>)
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b4b0:	4b04      	ldr	r3, [pc, #16]	@ (800b4c4 <USER_initialize+0x24>)
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	370c      	adds	r7, #12
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	20000014 	.word	0x20000014

0800b4c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b4d2:	4b06      	ldr	r3, [pc, #24]	@ (800b4ec <USER_status+0x24>)
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b4d8:	4b04      	ldr	r3, [pc, #16]	@ (800b4ec <USER_status+0x24>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	20000014 	.word	0x20000014

0800b4f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60b9      	str	r1, [r7, #8]
 800b4f8:	607a      	str	r2, [r7, #4]
 800b4fa:	603b      	str	r3, [r7, #0]
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b500:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b502:	4618      	mov	r0, r3
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b50e:	b480      	push	{r7}
 800b510:	b085      	sub	sp, #20
 800b512:	af00      	add	r7, sp, #0
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
 800b518:	603b      	str	r3, [r7, #0]
 800b51a:	4603      	mov	r3, r0
 800b51c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b51e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b520:	4618      	mov	r0, r3
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	603a      	str	r2, [r7, #0]
 800b536:	71fb      	strb	r3, [r7, #7]
 800b538:	460b      	mov	r3, r1
 800b53a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	73fb      	strb	r3, [r7, #15]
    return res;
 800b540:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b542:	4618      	mov	r0, r3
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
	...

0800b550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b550:	b480      	push	{r7}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	4613      	mov	r3, r2
 800b55c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b55e:	2301      	movs	r3, #1
 800b560:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b566:	4b1f      	ldr	r3, [pc, #124]	@ (800b5e4 <FATFS_LinkDriverEx+0x94>)
 800b568:	7a5b      	ldrb	r3, [r3, #9]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d131      	bne.n	800b5d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b570:	4b1c      	ldr	r3, [pc, #112]	@ (800b5e4 <FATFS_LinkDriverEx+0x94>)
 800b572:	7a5b      	ldrb	r3, [r3, #9]
 800b574:	b2db      	uxtb	r3, r3
 800b576:	461a      	mov	r2, r3
 800b578:	4b1a      	ldr	r3, [pc, #104]	@ (800b5e4 <FATFS_LinkDriverEx+0x94>)
 800b57a:	2100      	movs	r1, #0
 800b57c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b57e:	4b19      	ldr	r3, [pc, #100]	@ (800b5e4 <FATFS_LinkDriverEx+0x94>)
 800b580:	7a5b      	ldrb	r3, [r3, #9]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	4a17      	ldr	r2, [pc, #92]	@ (800b5e4 <FATFS_LinkDriverEx+0x94>)
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b58e:	4b15      	ldr	r3, [pc, #84]	@ (800b5e4 <FATFS_LinkDriverEx+0x94>)
 800b590:	7a5b      	ldrb	r3, [r3, #9]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	461a      	mov	r2, r3
 800b596:	4b13      	ldr	r3, [pc, #76]	@ (800b5e4 <FATFS_LinkDriverEx+0x94>)
 800b598:	4413      	add	r3, r2
 800b59a:	79fa      	ldrb	r2, [r7, #7]
 800b59c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b59e:	4b11      	ldr	r3, [pc, #68]	@ (800b5e4 <FATFS_LinkDriverEx+0x94>)
 800b5a0:	7a5b      	ldrb	r3, [r3, #9]
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	b2d1      	uxtb	r1, r2
 800b5a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b5e4 <FATFS_LinkDriverEx+0x94>)
 800b5aa:	7251      	strb	r1, [r2, #9]
 800b5ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5ae:	7dbb      	ldrb	r3, [r7, #22]
 800b5b0:	3330      	adds	r3, #48	@ 0x30
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	223a      	movs	r2, #58	@ 0x3a
 800b5be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	3302      	adds	r3, #2
 800b5c4:	222f      	movs	r2, #47	@ 0x2f
 800b5c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	3303      	adds	r3, #3
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	371c      	adds	r7, #28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	200008d0 	.word	0x200008d0

0800b5e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7ff ffaa 	bl	800b550 <FATFS_LinkDriverEx>
 800b5fc:	4603      	mov	r3, r0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b606:	b480      	push	{r7}
 800b608:	b085      	sub	sp, #20
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	4603      	mov	r3, r0
 800b60e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b610:	2300      	movs	r3, #0
 800b612:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b618:	2b84      	cmp	r3, #132	@ 0x84
 800b61a:	d005      	beq.n	800b628 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b61c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4413      	add	r3, r2
 800b624:	3303      	adds	r3, #3
 800b626:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b628:	68fb      	ldr	r3, [r7, #12]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr

0800b636 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b63a:	f000 fa5b 	bl	800baf4 <vTaskStartScheduler>
  
  return osOK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	bd80      	pop	{r7, pc}

0800b644 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b646:	b087      	sub	sp, #28
 800b648:	af02      	add	r7, sp, #8
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685c      	ldr	r4, [r3, #4]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b65a:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b662:	4618      	mov	r0, r3
 800b664:	f7ff ffcf 	bl	800b606 <makeFreeRtosPriority>
 800b668:	4602      	mov	r2, r0
 800b66a:	f107 030c 	add.w	r3, r7, #12
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	9200      	str	r2, [sp, #0]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	4632      	mov	r2, r6
 800b676:	4629      	mov	r1, r5
 800b678:	4620      	mov	r0, r4
 800b67a:	f000 f8d2 	bl	800b822 <xTaskCreate>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b01      	cmp	r3, #1
 800b682:	d001      	beq.n	800b688 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800b684:	2300      	movs	r3, #0
 800b686:	e000      	b.n	800b68a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800b688:	68fb      	ldr	r3, [r7, #12]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b692 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <osDelay+0x16>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	e000      	b.n	800b6aa <osDelay+0x18>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 f9ec 	bl	800ba88 <vTaskDelay>
  
  return osOK;
 800b6b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f103 0208 	add.w	r2, r3, #8
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f103 0208 	add.w	r2, r3, #8
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f103 0208 	add.w	r2, r3, #8
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6ee:	bf00      	nop
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b083      	sub	sp, #12
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	689a      	ldr	r2, [r3, #8]
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	601a      	str	r2, [r3, #0]
}
 800b750:	bf00      	nop
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b772:	d103      	bne.n	800b77c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	e00c      	b.n	800b796 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	3308      	adds	r3, #8
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	e002      	b.n	800b78a <vListInsert+0x2e>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	429a      	cmp	r2, r3
 800b794:	d2f6      	bcs.n	800b784 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	601a      	str	r2, [r3, #0]
}
 800b7c2:	bf00      	nop
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b085      	sub	sp, #20
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	6892      	ldr	r2, [r2, #8]
 800b7e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	6852      	ldr	r2, [r2, #4]
 800b7ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d103      	bne.n	800b802 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	689a      	ldr	r2, [r3, #8]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	1e5a      	subs	r2, r3, #1
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b822:	b580      	push	{r7, lr}
 800b824:	b08c      	sub	sp, #48	@ 0x30
 800b826:	af04      	add	r7, sp, #16
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	603b      	str	r3, [r7, #0]
 800b82e:	4613      	mov	r3, r2
 800b830:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b832:	88fb      	ldrh	r3, [r7, #6]
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4618      	mov	r0, r3
 800b838:	f000 fe96 	bl	800c568 <pvPortMalloc>
 800b83c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00e      	beq.n	800b862 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b844:	2054      	movs	r0, #84	@ 0x54
 800b846:	f000 fe8f 	bl	800c568 <pvPortMalloc>
 800b84a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	631a      	str	r2, [r3, #48]	@ 0x30
 800b858:	e005      	b.n	800b866 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b85a:	6978      	ldr	r0, [r7, #20]
 800b85c:	f000 ff52 	bl	800c704 <vPortFree>
 800b860:	e001      	b.n	800b866 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d013      	beq.n	800b894 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b86c:	88fa      	ldrh	r2, [r7, #6]
 800b86e:	2300      	movs	r3, #0
 800b870:	9303      	str	r3, [sp, #12]
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	9302      	str	r3, [sp, #8]
 800b876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b878:	9301      	str	r3, [sp, #4]
 800b87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	68b9      	ldr	r1, [r7, #8]
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f000 f80e 	bl	800b8a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b888:	69f8      	ldr	r0, [r7, #28]
 800b88a:	f000 f893 	bl	800b9b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b88e:	2301      	movs	r3, #1
 800b890:	61bb      	str	r3, [r7, #24]
 800b892:	e002      	b.n	800b89a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b894:	f04f 33ff 	mov.w	r3, #4294967295
 800b898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b89a:	69bb      	ldr	r3, [r7, #24]
	}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3720      	adds	r7, #32
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	f023 0307 	bic.w	r3, r3, #7
 800b8ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00b      	beq.n	800b8ee <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8e8:	bf00      	nop
 800b8ea:	bf00      	nop
 800b8ec:	e7fd      	b.n	800b8ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01f      	beq.n	800b934 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61fb      	str	r3, [r7, #28]
 800b8f8:	e012      	b.n	800b920 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	4413      	add	r3, r2
 800b900:	7819      	ldrb	r1, [r3, #0]
 800b902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	4413      	add	r3, r2
 800b908:	3334      	adds	r3, #52	@ 0x34
 800b90a:	460a      	mov	r2, r1
 800b90c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	4413      	add	r3, r2
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d006      	beq.n	800b928 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	3301      	adds	r3, #1
 800b91e:	61fb      	str	r3, [r7, #28]
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	2b0f      	cmp	r3, #15
 800b924:	d9e9      	bls.n	800b8fa <prvInitialiseNewTask+0x56>
 800b926:	e000      	b.n	800b92a <prvInitialiseNewTask+0x86>
			{
				break;
 800b928:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b932:	e003      	b.n	800b93c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b936:	2200      	movs	r2, #0
 800b938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93e:	2b06      	cmp	r3, #6
 800b940:	d901      	bls.n	800b946 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b942:	2306      	movs	r3, #6
 800b944:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b94a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b950:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b954:	2200      	movs	r2, #0
 800b956:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95a:	3304      	adds	r3, #4
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fecc 	bl	800b6fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b964:	3318      	adds	r3, #24
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff fec7 	bl	800b6fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b970:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b974:	f1c3 0207 	rsb	r2, r3, #7
 800b978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b980:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b984:	2200      	movs	r2, #0
 800b986:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	68f9      	ldr	r1, [r7, #12]
 800b994:	69b8      	ldr	r0, [r7, #24]
 800b996:	f000 fbd3 	bl	800c140 <pxPortInitialiseStack>
 800b99a:	4602      	mov	r2, r0
 800b99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d002      	beq.n	800b9ac <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9ac:	bf00      	nop
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b9bc:	f000 fcf4 	bl	800c3a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b9c0:	4b2a      	ldr	r3, [pc, #168]	@ (800ba6c <prvAddNewTaskToReadyList+0xb8>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	4a29      	ldr	r2, [pc, #164]	@ (800ba6c <prvAddNewTaskToReadyList+0xb8>)
 800b9c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b9ca:	4b29      	ldr	r3, [pc, #164]	@ (800ba70 <prvAddNewTaskToReadyList+0xbc>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d109      	bne.n	800b9e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b9d2:	4a27      	ldr	r2, [pc, #156]	@ (800ba70 <prvAddNewTaskToReadyList+0xbc>)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9d8:	4b24      	ldr	r3, [pc, #144]	@ (800ba6c <prvAddNewTaskToReadyList+0xb8>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d110      	bne.n	800ba02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b9e0:	f000 faaa 	bl	800bf38 <prvInitialiseTaskLists>
 800b9e4:	e00d      	b.n	800ba02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b9e6:	4b23      	ldr	r3, [pc, #140]	@ (800ba74 <prvAddNewTaskToReadyList+0xc0>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d109      	bne.n	800ba02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9ee:	4b20      	ldr	r3, [pc, #128]	@ (800ba70 <prvAddNewTaskToReadyList+0xbc>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d802      	bhi.n	800ba02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9fc:	4a1c      	ldr	r2, [pc, #112]	@ (800ba70 <prvAddNewTaskToReadyList+0xbc>)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba02:	4b1d      	ldr	r3, [pc, #116]	@ (800ba78 <prvAddNewTaskToReadyList+0xc4>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	3301      	adds	r3, #1
 800ba08:	4a1b      	ldr	r2, [pc, #108]	@ (800ba78 <prvAddNewTaskToReadyList+0xc4>)
 800ba0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba10:	2201      	movs	r2, #1
 800ba12:	409a      	lsls	r2, r3
 800ba14:	4b19      	ldr	r3, [pc, #100]	@ (800ba7c <prvAddNewTaskToReadyList+0xc8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	4a18      	ldr	r2, [pc, #96]	@ (800ba7c <prvAddNewTaskToReadyList+0xc8>)
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4a15      	ldr	r2, [pc, #84]	@ (800ba80 <prvAddNewTaskToReadyList+0xcc>)
 800ba2c:	441a      	add	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	3304      	adds	r3, #4
 800ba32:	4619      	mov	r1, r3
 800ba34:	4610      	mov	r0, r2
 800ba36:	f7ff fe6d 	bl	800b714 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ba3a:	f000 fce7 	bl	800c40c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ba3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba74 <prvAddNewTaskToReadyList+0xc0>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00e      	beq.n	800ba64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ba46:	4b0a      	ldr	r3, [pc, #40]	@ (800ba70 <prvAddNewTaskToReadyList+0xbc>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d207      	bcs.n	800ba64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba54:	4b0b      	ldr	r3, [pc, #44]	@ (800ba84 <prvAddNewTaskToReadyList+0xd0>)
 800ba56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba5a:	601a      	str	r2, [r3, #0]
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba64:	bf00      	nop
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	200009dc 	.word	0x200009dc
 800ba70:	200008dc 	.word	0x200008dc
 800ba74:	200009e8 	.word	0x200009e8
 800ba78:	200009f8 	.word	0x200009f8
 800ba7c:	200009e4 	.word	0x200009e4
 800ba80:	200008e0 	.word	0x200008e0
 800ba84:	e000ed04 	.word	0xe000ed04

0800ba88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d018      	beq.n	800bacc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba9a:	4b14      	ldr	r3, [pc, #80]	@ (800baec <vTaskDelay+0x64>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00b      	beq.n	800baba <vTaskDelay+0x32>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	60bb      	str	r3, [r7, #8]
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop
 800bab8:	e7fd      	b.n	800bab6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800baba:	f000 f863 	bl	800bb84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800babe:	2100      	movs	r1, #0
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fad7 	bl	800c074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bac6:	f000 f86b 	bl	800bba0 <xTaskResumeAll>
 800baca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d107      	bne.n	800bae2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bad2:	4b07      	ldr	r3, [pc, #28]	@ (800baf0 <vTaskDelay+0x68>)
 800bad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bae2:	bf00      	nop
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20000a04 	.word	0x20000a04
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800bafa:	4b1c      	ldr	r3, [pc, #112]	@ (800bb6c <vTaskStartScheduler+0x78>)
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	2300      	movs	r3, #0
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	2300      	movs	r3, #0
 800bb04:	2280      	movs	r2, #128	@ 0x80
 800bb06:	491a      	ldr	r1, [pc, #104]	@ (800bb70 <vTaskStartScheduler+0x7c>)
 800bb08:	481a      	ldr	r0, [pc, #104]	@ (800bb74 <vTaskStartScheduler+0x80>)
 800bb0a:	f7ff fe8a 	bl	800b822 <xTaskCreate>
 800bb0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d116      	bne.n	800bb44 <vTaskStartScheduler+0x50>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	60bb      	str	r3, [r7, #8]
}
 800bb28:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb2a:	4b13      	ldr	r3, [pc, #76]	@ (800bb78 <vTaskStartScheduler+0x84>)
 800bb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb32:	4b12      	ldr	r3, [pc, #72]	@ (800bb7c <vTaskStartScheduler+0x88>)
 800bb34:	2201      	movs	r2, #1
 800bb36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb38:	4b11      	ldr	r3, [pc, #68]	@ (800bb80 <vTaskStartScheduler+0x8c>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb3e:	f000 fb8f 	bl	800c260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb42:	e00f      	b.n	800bb64 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4a:	d10b      	bne.n	800bb64 <vTaskStartScheduler+0x70>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	607b      	str	r3, [r7, #4]
}
 800bb5e:	bf00      	nop
 800bb60:	bf00      	nop
 800bb62:	e7fd      	b.n	800bb60 <vTaskStartScheduler+0x6c>
}
 800bb64:	bf00      	nop
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20000a00 	.word	0x20000a00
 800bb70:	08011b68 	.word	0x08011b68
 800bb74:	0800bf09 	.word	0x0800bf09
 800bb78:	200009fc 	.word	0x200009fc
 800bb7c:	200009e8 	.word	0x200009e8
 800bb80:	200009e0 	.word	0x200009e0

0800bb84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb88:	4b04      	ldr	r3, [pc, #16]	@ (800bb9c <vTaskSuspendAll+0x18>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	4a03      	ldr	r2, [pc, #12]	@ (800bb9c <vTaskSuspendAll+0x18>)
 800bb90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb92:	bf00      	nop
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	20000a04 	.word	0x20000a04

0800bba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bbae:	4b42      	ldr	r3, [pc, #264]	@ (800bcb8 <xTaskResumeAll+0x118>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10b      	bne.n	800bbce <xTaskResumeAll+0x2e>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	603b      	str	r3, [r7, #0]
}
 800bbc8:	bf00      	nop
 800bbca:	bf00      	nop
 800bbcc:	e7fd      	b.n	800bbca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bbce:	f000 fbeb 	bl	800c3a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bbd2:	4b39      	ldr	r3, [pc, #228]	@ (800bcb8 <xTaskResumeAll+0x118>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	4a37      	ldr	r2, [pc, #220]	@ (800bcb8 <xTaskResumeAll+0x118>)
 800bbda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbdc:	4b36      	ldr	r3, [pc, #216]	@ (800bcb8 <xTaskResumeAll+0x118>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d161      	bne.n	800bca8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bbe4:	4b35      	ldr	r3, [pc, #212]	@ (800bcbc <xTaskResumeAll+0x11c>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d05d      	beq.n	800bca8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbec:	e02e      	b.n	800bc4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbee:	4b34      	ldr	r3, [pc, #208]	@ (800bcc0 <xTaskResumeAll+0x120>)
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3318      	adds	r3, #24
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff fde7 	bl	800b7ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	3304      	adds	r3, #4
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7ff fde2 	bl	800b7ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0e:	2201      	movs	r2, #1
 800bc10:	409a      	lsls	r2, r3
 800bc12:	4b2c      	ldr	r3, [pc, #176]	@ (800bcc4 <xTaskResumeAll+0x124>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	4a2a      	ldr	r2, [pc, #168]	@ (800bcc4 <xTaskResumeAll+0x124>)
 800bc1a:	6013      	str	r3, [r2, #0]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc20:	4613      	mov	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4a27      	ldr	r2, [pc, #156]	@ (800bcc8 <xTaskResumeAll+0x128>)
 800bc2a:	441a      	add	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4619      	mov	r1, r3
 800bc32:	4610      	mov	r0, r2
 800bc34:	f7ff fd6e 	bl	800b714 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc3c:	4b23      	ldr	r3, [pc, #140]	@ (800bccc <xTaskResumeAll+0x12c>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d302      	bcc.n	800bc4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bc46:	4b22      	ldr	r3, [pc, #136]	@ (800bcd0 <xTaskResumeAll+0x130>)
 800bc48:	2201      	movs	r2, #1
 800bc4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc4c:	4b1c      	ldr	r3, [pc, #112]	@ (800bcc0 <xTaskResumeAll+0x120>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1cc      	bne.n	800bbee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc5a:	f000 f9eb 	bl	800c034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc5e:	4b1d      	ldr	r3, [pc, #116]	@ (800bcd4 <xTaskResumeAll+0x134>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d010      	beq.n	800bc8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc6a:	f000 f837 	bl	800bcdc <xTaskIncrementTick>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bc74:	4b16      	ldr	r3, [pc, #88]	@ (800bcd0 <xTaskResumeAll+0x130>)
 800bc76:	2201      	movs	r2, #1
 800bc78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1f1      	bne.n	800bc6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bc86:	4b13      	ldr	r3, [pc, #76]	@ (800bcd4 <xTaskResumeAll+0x134>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc8c:	4b10      	ldr	r3, [pc, #64]	@ (800bcd0 <xTaskResumeAll+0x130>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d009      	beq.n	800bca8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc94:	2301      	movs	r3, #1
 800bc96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc98:	4b0f      	ldr	r3, [pc, #60]	@ (800bcd8 <xTaskResumeAll+0x138>)
 800bc9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bca8:	f000 fbb0 	bl	800c40c <vPortExitCritical>

	return xAlreadyYielded;
 800bcac:	68bb      	ldr	r3, [r7, #8]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20000a04 	.word	0x20000a04
 800bcbc:	200009dc 	.word	0x200009dc
 800bcc0:	2000099c 	.word	0x2000099c
 800bcc4:	200009e4 	.word	0x200009e4
 800bcc8:	200008e0 	.word	0x200008e0
 800bccc:	200008dc 	.word	0x200008dc
 800bcd0:	200009f0 	.word	0x200009f0
 800bcd4:	200009ec 	.word	0x200009ec
 800bcd8:	e000ed04 	.word	0xe000ed04

0800bcdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bce2:	2300      	movs	r3, #0
 800bce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bce6:	4b4f      	ldr	r3, [pc, #316]	@ (800be24 <xTaskIncrementTick+0x148>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f040 808f 	bne.w	800be0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bcf0:	4b4d      	ldr	r3, [pc, #308]	@ (800be28 <xTaskIncrementTick+0x14c>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bcf8:	4a4b      	ldr	r2, [pc, #300]	@ (800be28 <xTaskIncrementTick+0x14c>)
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d121      	bne.n	800bd48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd04:	4b49      	ldr	r3, [pc, #292]	@ (800be2c <xTaskIncrementTick+0x150>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00b      	beq.n	800bd26 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	603b      	str	r3, [r7, #0]
}
 800bd20:	bf00      	nop
 800bd22:	bf00      	nop
 800bd24:	e7fd      	b.n	800bd22 <xTaskIncrementTick+0x46>
 800bd26:	4b41      	ldr	r3, [pc, #260]	@ (800be2c <xTaskIncrementTick+0x150>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	4b40      	ldr	r3, [pc, #256]	@ (800be30 <xTaskIncrementTick+0x154>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a3e      	ldr	r2, [pc, #248]	@ (800be2c <xTaskIncrementTick+0x150>)
 800bd32:	6013      	str	r3, [r2, #0]
 800bd34:	4a3e      	ldr	r2, [pc, #248]	@ (800be30 <xTaskIncrementTick+0x154>)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	4b3e      	ldr	r3, [pc, #248]	@ (800be34 <xTaskIncrementTick+0x158>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	4a3c      	ldr	r2, [pc, #240]	@ (800be34 <xTaskIncrementTick+0x158>)
 800bd42:	6013      	str	r3, [r2, #0]
 800bd44:	f000 f976 	bl	800c034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd48:	4b3b      	ldr	r3, [pc, #236]	@ (800be38 <xTaskIncrementTick+0x15c>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d348      	bcc.n	800bde4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd52:	4b36      	ldr	r3, [pc, #216]	@ (800be2c <xTaskIncrementTick+0x150>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d104      	bne.n	800bd66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd5c:	4b36      	ldr	r3, [pc, #216]	@ (800be38 <xTaskIncrementTick+0x15c>)
 800bd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd62:	601a      	str	r2, [r3, #0]
					break;
 800bd64:	e03e      	b.n	800bde4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd66:	4b31      	ldr	r3, [pc, #196]	@ (800be2c <xTaskIncrementTick+0x150>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d203      	bcs.n	800bd86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd7e:	4a2e      	ldr	r2, [pc, #184]	@ (800be38 <xTaskIncrementTick+0x15c>)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd84:	e02e      	b.n	800bde4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	3304      	adds	r3, #4
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7ff fd1f 	bl	800b7ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d004      	beq.n	800bda2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	3318      	adds	r3, #24
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff fd16 	bl	800b7ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda6:	2201      	movs	r2, #1
 800bda8:	409a      	lsls	r2, r3
 800bdaa:	4b24      	ldr	r3, [pc, #144]	@ (800be3c <xTaskIncrementTick+0x160>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	4a22      	ldr	r2, [pc, #136]	@ (800be3c <xTaskIncrementTick+0x160>)
 800bdb2:	6013      	str	r3, [r2, #0]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb8:	4613      	mov	r3, r2
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	4413      	add	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4a1f      	ldr	r2, [pc, #124]	@ (800be40 <xTaskIncrementTick+0x164>)
 800bdc2:	441a      	add	r2, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4610      	mov	r0, r2
 800bdcc:	f7ff fca2 	bl	800b714 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdd4:	4b1b      	ldr	r3, [pc, #108]	@ (800be44 <xTaskIncrementTick+0x168>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d3b9      	bcc.n	800bd52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bdde:	2301      	movs	r3, #1
 800bde0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bde2:	e7b6      	b.n	800bd52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bde4:	4b17      	ldr	r3, [pc, #92]	@ (800be44 <xTaskIncrementTick+0x168>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdea:	4915      	ldr	r1, [pc, #84]	@ (800be40 <xTaskIncrementTick+0x164>)
 800bdec:	4613      	mov	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	440b      	add	r3, r1
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d901      	bls.n	800be00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be00:	4b11      	ldr	r3, [pc, #68]	@ (800be48 <xTaskIncrementTick+0x16c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d007      	beq.n	800be18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800be08:	2301      	movs	r3, #1
 800be0a:	617b      	str	r3, [r7, #20]
 800be0c:	e004      	b.n	800be18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be0e:	4b0f      	ldr	r3, [pc, #60]	@ (800be4c <xTaskIncrementTick+0x170>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3301      	adds	r3, #1
 800be14:	4a0d      	ldr	r2, [pc, #52]	@ (800be4c <xTaskIncrementTick+0x170>)
 800be16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800be18:	697b      	ldr	r3, [r7, #20]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3718      	adds	r7, #24
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	20000a04 	.word	0x20000a04
 800be28:	200009e0 	.word	0x200009e0
 800be2c:	20000994 	.word	0x20000994
 800be30:	20000998 	.word	0x20000998
 800be34:	200009f4 	.word	0x200009f4
 800be38:	200009fc 	.word	0x200009fc
 800be3c:	200009e4 	.word	0x200009e4
 800be40:	200008e0 	.word	0x200008e0
 800be44:	200008dc 	.word	0x200008dc
 800be48:	200009f0 	.word	0x200009f0
 800be4c:	200009ec 	.word	0x200009ec

0800be50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be50:	b480      	push	{r7}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be56:	4b27      	ldr	r3, [pc, #156]	@ (800bef4 <vTaskSwitchContext+0xa4>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be5e:	4b26      	ldr	r3, [pc, #152]	@ (800bef8 <vTaskSwitchContext+0xa8>)
 800be60:	2201      	movs	r2, #1
 800be62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be64:	e040      	b.n	800bee8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800be66:	4b24      	ldr	r3, [pc, #144]	@ (800bef8 <vTaskSwitchContext+0xa8>)
 800be68:	2200      	movs	r2, #0
 800be6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be6c:	4b23      	ldr	r3, [pc, #140]	@ (800befc <vTaskSwitchContext+0xac>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	fab3 f383 	clz	r3, r3
 800be78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800be7a:	7afb      	ldrb	r3, [r7, #11]
 800be7c:	f1c3 031f 	rsb	r3, r3, #31
 800be80:	617b      	str	r3, [r7, #20]
 800be82:	491f      	ldr	r1, [pc, #124]	@ (800bf00 <vTaskSwitchContext+0xb0>)
 800be84:	697a      	ldr	r2, [r7, #20]
 800be86:	4613      	mov	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4413      	add	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	440b      	add	r3, r1
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10b      	bne.n	800beae <vTaskSwitchContext+0x5e>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	607b      	str	r3, [r7, #4]
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	e7fd      	b.n	800beaa <vTaskSwitchContext+0x5a>
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	4613      	mov	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4a11      	ldr	r2, [pc, #68]	@ (800bf00 <vTaskSwitchContext+0xb0>)
 800beba:	4413      	add	r3, r2
 800bebc:	613b      	str	r3, [r7, #16]
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	605a      	str	r2, [r3, #4]
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	3308      	adds	r3, #8
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d104      	bne.n	800bede <vTaskSwitchContext+0x8e>
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	605a      	str	r2, [r3, #4]
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	4a07      	ldr	r2, [pc, #28]	@ (800bf04 <vTaskSwitchContext+0xb4>)
 800bee6:	6013      	str	r3, [r2, #0]
}
 800bee8:	bf00      	nop
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	20000a04 	.word	0x20000a04
 800bef8:	200009f0 	.word	0x200009f0
 800befc:	200009e4 	.word	0x200009e4
 800bf00:	200008e0 	.word	0x200008e0
 800bf04:	200008dc 	.word	0x200008dc

0800bf08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf10:	f000 f852 	bl	800bfb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf14:	4b06      	ldr	r3, [pc, #24]	@ (800bf30 <prvIdleTask+0x28>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d9f9      	bls.n	800bf10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf1c:	4b05      	ldr	r3, [pc, #20]	@ (800bf34 <prvIdleTask+0x2c>)
 800bf1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf2c:	e7f0      	b.n	800bf10 <prvIdleTask+0x8>
 800bf2e:	bf00      	nop
 800bf30:	200008e0 	.word	0x200008e0
 800bf34:	e000ed04 	.word	0xe000ed04

0800bf38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf3e:	2300      	movs	r3, #0
 800bf40:	607b      	str	r3, [r7, #4]
 800bf42:	e00c      	b.n	800bf5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4a12      	ldr	r2, [pc, #72]	@ (800bf98 <prvInitialiseTaskLists+0x60>)
 800bf50:	4413      	add	r3, r2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7ff fbb1 	bl	800b6ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	607b      	str	r3, [r7, #4]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b06      	cmp	r3, #6
 800bf62:	d9ef      	bls.n	800bf44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf64:	480d      	ldr	r0, [pc, #52]	@ (800bf9c <prvInitialiseTaskLists+0x64>)
 800bf66:	f7ff fba8 	bl	800b6ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf6a:	480d      	ldr	r0, [pc, #52]	@ (800bfa0 <prvInitialiseTaskLists+0x68>)
 800bf6c:	f7ff fba5 	bl	800b6ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf70:	480c      	ldr	r0, [pc, #48]	@ (800bfa4 <prvInitialiseTaskLists+0x6c>)
 800bf72:	f7ff fba2 	bl	800b6ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf76:	480c      	ldr	r0, [pc, #48]	@ (800bfa8 <prvInitialiseTaskLists+0x70>)
 800bf78:	f7ff fb9f 	bl	800b6ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf7c:	480b      	ldr	r0, [pc, #44]	@ (800bfac <prvInitialiseTaskLists+0x74>)
 800bf7e:	f7ff fb9c 	bl	800b6ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf82:	4b0b      	ldr	r3, [pc, #44]	@ (800bfb0 <prvInitialiseTaskLists+0x78>)
 800bf84:	4a05      	ldr	r2, [pc, #20]	@ (800bf9c <prvInitialiseTaskLists+0x64>)
 800bf86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf88:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb4 <prvInitialiseTaskLists+0x7c>)
 800bf8a:	4a05      	ldr	r2, [pc, #20]	@ (800bfa0 <prvInitialiseTaskLists+0x68>)
 800bf8c:	601a      	str	r2, [r3, #0]
}
 800bf8e:	bf00      	nop
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	200008e0 	.word	0x200008e0
 800bf9c:	2000096c 	.word	0x2000096c
 800bfa0:	20000980 	.word	0x20000980
 800bfa4:	2000099c 	.word	0x2000099c
 800bfa8:	200009b0 	.word	0x200009b0
 800bfac:	200009c8 	.word	0x200009c8
 800bfb0:	20000994 	.word	0x20000994
 800bfb4:	20000998 	.word	0x20000998

0800bfb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfbe:	e019      	b.n	800bff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfc0:	f000 f9f2 	bl	800c3a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc4:	4b10      	ldr	r3, [pc, #64]	@ (800c008 <prvCheckTasksWaitingTermination+0x50>)
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff fbfc 	bl	800b7ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfd6:	4b0d      	ldr	r3, [pc, #52]	@ (800c00c <prvCheckTasksWaitingTermination+0x54>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	4a0b      	ldr	r2, [pc, #44]	@ (800c00c <prvCheckTasksWaitingTermination+0x54>)
 800bfde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800c010 <prvCheckTasksWaitingTermination+0x58>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	4a0a      	ldr	r2, [pc, #40]	@ (800c010 <prvCheckTasksWaitingTermination+0x58>)
 800bfe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfea:	f000 fa0f 	bl	800c40c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f810 	bl	800c014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bff4:	4b06      	ldr	r3, [pc, #24]	@ (800c010 <prvCheckTasksWaitingTermination+0x58>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e1      	bne.n	800bfc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bffc:	bf00      	nop
 800bffe:	bf00      	nop
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	200009b0 	.word	0x200009b0
 800c00c:	200009dc 	.word	0x200009dc
 800c010:	200009c4 	.word	0x200009c4

0800c014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c020:	4618      	mov	r0, r3
 800c022:	f000 fb6f 	bl	800c704 <vPortFree>
			vPortFree( pxTCB );
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fb6c 	bl	800c704 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c03a:	4b0c      	ldr	r3, [pc, #48]	@ (800c06c <prvResetNextTaskUnblockTime+0x38>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d104      	bne.n	800c04e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c044:	4b0a      	ldr	r3, [pc, #40]	@ (800c070 <prvResetNextTaskUnblockTime+0x3c>)
 800c046:	f04f 32ff 	mov.w	r2, #4294967295
 800c04a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c04c:	e008      	b.n	800c060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04e:	4b07      	ldr	r3, [pc, #28]	@ (800c06c <prvResetNextTaskUnblockTime+0x38>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	4a04      	ldr	r2, [pc, #16]	@ (800c070 <prvResetNextTaskUnblockTime+0x3c>)
 800c05e:	6013      	str	r3, [r2, #0]
}
 800c060:	bf00      	nop
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr
 800c06c:	20000994 	.word	0x20000994
 800c070:	200009fc 	.word	0x200009fc

0800c074 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c07e:	4b29      	ldr	r3, [pc, #164]	@ (800c124 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c084:	4b28      	ldr	r3, [pc, #160]	@ (800c128 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3304      	adds	r3, #4
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff fb9f 	bl	800b7ce <uxListRemove>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10b      	bne.n	800c0ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c096:	4b24      	ldr	r3, [pc, #144]	@ (800c128 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c09c:	2201      	movs	r2, #1
 800c09e:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a2:	43da      	mvns	r2, r3
 800c0a4:	4b21      	ldr	r3, [pc, #132]	@ (800c12c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	4a20      	ldr	r2, [pc, #128]	@ (800c12c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b4:	d10a      	bne.n	800c0cc <prvAddCurrentTaskToDelayedList+0x58>
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d007      	beq.n	800c0cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c128 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	481a      	ldr	r0, [pc, #104]	@ (800c130 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c0c6:	f7ff fb25 	bl	800b714 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0ca:	e026      	b.n	800c11a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0d4:	4b14      	ldr	r3, [pc, #80]	@ (800c128 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68ba      	ldr	r2, [r7, #8]
 800c0da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d209      	bcs.n	800c0f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0e4:	4b13      	ldr	r3, [pc, #76]	@ (800c134 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c128 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	f7ff fb33 	bl	800b75c <vListInsert>
}
 800c0f6:	e010      	b.n	800c11a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c138 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c128 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3304      	adds	r3, #4
 800c102:	4619      	mov	r1, r3
 800c104:	4610      	mov	r0, r2
 800c106:	f7ff fb29 	bl	800b75c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c10a:	4b0c      	ldr	r3, [pc, #48]	@ (800c13c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	429a      	cmp	r2, r3
 800c112:	d202      	bcs.n	800c11a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c114:	4a09      	ldr	r2, [pc, #36]	@ (800c13c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	6013      	str	r3, [r2, #0]
}
 800c11a:	bf00      	nop
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	200009e0 	.word	0x200009e0
 800c128:	200008dc 	.word	0x200008dc
 800c12c:	200009e4 	.word	0x200009e4
 800c130:	200009c8 	.word	0x200009c8
 800c134:	20000998 	.word	0x20000998
 800c138:	20000994 	.word	0x20000994
 800c13c:	200009fc 	.word	0x200009fc

0800c140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	3b04      	subs	r3, #4
 800c150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3b04      	subs	r3, #4
 800c15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	f023 0201 	bic.w	r2, r3, #1
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3b04      	subs	r3, #4
 800c16e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c170:	4a0c      	ldr	r2, [pc, #48]	@ (800c1a4 <pxPortInitialiseStack+0x64>)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3b14      	subs	r3, #20
 800c17a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3b04      	subs	r3, #4
 800c186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f06f 0202 	mvn.w	r2, #2
 800c18e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	3b20      	subs	r3, #32
 800c194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c196:	68fb      	ldr	r3, [r7, #12]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr
 800c1a4:	0800c1a9 	.word	0x0800c1a9

0800c1a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1b2:	4b13      	ldr	r3, [pc, #76]	@ (800c200 <prvTaskExitError+0x58>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ba:	d00b      	beq.n	800c1d4 <prvTaskExitError+0x2c>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	60fb      	str	r3, [r7, #12]
}
 800c1ce:	bf00      	nop
 800c1d0:	bf00      	nop
 800c1d2:	e7fd      	b.n	800c1d0 <prvTaskExitError+0x28>
	__asm volatile
 800c1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d8:	f383 8811 	msr	BASEPRI, r3
 800c1dc:	f3bf 8f6f 	isb	sy
 800c1e0:	f3bf 8f4f 	dsb	sy
 800c1e4:	60bb      	str	r3, [r7, #8]
}
 800c1e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1e8:	bf00      	nop
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d0fc      	beq.n	800c1ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1f0:	bf00      	nop
 800c1f2:	bf00      	nop
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	2000002c 	.word	0x2000002c
	...

0800c210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c210:	4b07      	ldr	r3, [pc, #28]	@ (800c230 <pxCurrentTCBConst2>)
 800c212:	6819      	ldr	r1, [r3, #0]
 800c214:	6808      	ldr	r0, [r1, #0]
 800c216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21a:	f380 8809 	msr	PSP, r0
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f04f 0000 	mov.w	r0, #0
 800c226:	f380 8811 	msr	BASEPRI, r0
 800c22a:	4770      	bx	lr
 800c22c:	f3af 8000 	nop.w

0800c230 <pxCurrentTCBConst2>:
 800c230:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c234:	bf00      	nop
 800c236:	bf00      	nop

0800c238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c238:	4808      	ldr	r0, [pc, #32]	@ (800c25c <prvPortStartFirstTask+0x24>)
 800c23a:	6800      	ldr	r0, [r0, #0]
 800c23c:	6800      	ldr	r0, [r0, #0]
 800c23e:	f380 8808 	msr	MSP, r0
 800c242:	f04f 0000 	mov.w	r0, #0
 800c246:	f380 8814 	msr	CONTROL, r0
 800c24a:	b662      	cpsie	i
 800c24c:	b661      	cpsie	f
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	df00      	svc	0
 800c258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c25a:	bf00      	nop
 800c25c:	e000ed08 	.word	0xe000ed08

0800c260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c266:	4b47      	ldr	r3, [pc, #284]	@ (800c384 <xPortStartScheduler+0x124>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a47      	ldr	r2, [pc, #284]	@ (800c388 <xPortStartScheduler+0x128>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d10b      	bne.n	800c288 <xPortStartScheduler+0x28>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	60fb      	str	r3, [r7, #12]
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	e7fd      	b.n	800c284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c288:	4b3e      	ldr	r3, [pc, #248]	@ (800c384 <xPortStartScheduler+0x124>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a3f      	ldr	r2, [pc, #252]	@ (800c38c <xPortStartScheduler+0x12c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d10b      	bne.n	800c2aa <xPortStartScheduler+0x4a>
	__asm volatile
 800c292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	613b      	str	r3, [r7, #16]
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop
 800c2a8:	e7fd      	b.n	800c2a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2aa:	4b39      	ldr	r3, [pc, #228]	@ (800c390 <xPortStartScheduler+0x130>)
 800c2ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	22ff      	movs	r2, #255	@ 0xff
 800c2ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2c4:	78fb      	ldrb	r3, [r7, #3]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	4b31      	ldr	r3, [pc, #196]	@ (800c394 <xPortStartScheduler+0x134>)
 800c2d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2d2:	4b31      	ldr	r3, [pc, #196]	@ (800c398 <xPortStartScheduler+0x138>)
 800c2d4:	2207      	movs	r2, #7
 800c2d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2d8:	e009      	b.n	800c2ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c2da:	4b2f      	ldr	r3, [pc, #188]	@ (800c398 <xPortStartScheduler+0x138>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	4a2d      	ldr	r2, [pc, #180]	@ (800c398 <xPortStartScheduler+0x138>)
 800c2e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2e4:	78fb      	ldrb	r3, [r7, #3]
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2ee:	78fb      	ldrb	r3, [r7, #3]
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2f6:	2b80      	cmp	r3, #128	@ 0x80
 800c2f8:	d0ef      	beq.n	800c2da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2fa:	4b27      	ldr	r3, [pc, #156]	@ (800c398 <xPortStartScheduler+0x138>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f1c3 0307 	rsb	r3, r3, #7
 800c302:	2b04      	cmp	r3, #4
 800c304:	d00b      	beq.n	800c31e <xPortStartScheduler+0xbe>
	__asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	60bb      	str	r3, [r7, #8]
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	e7fd      	b.n	800c31a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c31e:	4b1e      	ldr	r3, [pc, #120]	@ (800c398 <xPortStartScheduler+0x138>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	021b      	lsls	r3, r3, #8
 800c324:	4a1c      	ldr	r2, [pc, #112]	@ (800c398 <xPortStartScheduler+0x138>)
 800c326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c328:	4b1b      	ldr	r3, [pc, #108]	@ (800c398 <xPortStartScheduler+0x138>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c330:	4a19      	ldr	r2, [pc, #100]	@ (800c398 <xPortStartScheduler+0x138>)
 800c332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	b2da      	uxtb	r2, r3
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c33c:	4b17      	ldr	r3, [pc, #92]	@ (800c39c <xPortStartScheduler+0x13c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a16      	ldr	r2, [pc, #88]	@ (800c39c <xPortStartScheduler+0x13c>)
 800c342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c348:	4b14      	ldr	r3, [pc, #80]	@ (800c39c <xPortStartScheduler+0x13c>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a13      	ldr	r2, [pc, #76]	@ (800c39c <xPortStartScheduler+0x13c>)
 800c34e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c354:	f000 f8da 	bl	800c50c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c358:	4b11      	ldr	r3, [pc, #68]	@ (800c3a0 <xPortStartScheduler+0x140>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c35e:	f000 f8f9 	bl	800c554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c362:	4b10      	ldr	r3, [pc, #64]	@ (800c3a4 <xPortStartScheduler+0x144>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a0f      	ldr	r2, [pc, #60]	@ (800c3a4 <xPortStartScheduler+0x144>)
 800c368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c36c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c36e:	f7ff ff63 	bl	800c238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c372:	f7ff fd6d 	bl	800be50 <vTaskSwitchContext>
	prvTaskExitError();
 800c376:	f7ff ff17 	bl	800c1a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3718      	adds	r7, #24
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	e000ed00 	.word	0xe000ed00
 800c388:	410fc271 	.word	0x410fc271
 800c38c:	410fc270 	.word	0x410fc270
 800c390:	e000e400 	.word	0xe000e400
 800c394:	20000a08 	.word	0x20000a08
 800c398:	20000a0c 	.word	0x20000a0c
 800c39c:	e000ed20 	.word	0xe000ed20
 800c3a0:	2000002c 	.word	0x2000002c
 800c3a4:	e000ef34 	.word	0xe000ef34

0800c3a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	607b      	str	r3, [r7, #4]
}
 800c3c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3c2:	4b10      	ldr	r3, [pc, #64]	@ (800c404 <vPortEnterCritical+0x5c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	4a0e      	ldr	r2, [pc, #56]	@ (800c404 <vPortEnterCritical+0x5c>)
 800c3ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c404 <vPortEnterCritical+0x5c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d110      	bne.n	800c3f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c408 <vPortEnterCritical+0x60>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00b      	beq.n	800c3f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	603b      	str	r3, [r7, #0]
}
 800c3f0:	bf00      	nop
 800c3f2:	bf00      	nop
 800c3f4:	e7fd      	b.n	800c3f2 <vPortEnterCritical+0x4a>
	}
}
 800c3f6:	bf00      	nop
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	2000002c 	.word	0x2000002c
 800c408:	e000ed04 	.word	0xe000ed04

0800c40c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c412:	4b12      	ldr	r3, [pc, #72]	@ (800c45c <vPortExitCritical+0x50>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10b      	bne.n	800c432 <vPortExitCritical+0x26>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	607b      	str	r3, [r7, #4]
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c432:	4b0a      	ldr	r3, [pc, #40]	@ (800c45c <vPortExitCritical+0x50>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3b01      	subs	r3, #1
 800c438:	4a08      	ldr	r2, [pc, #32]	@ (800c45c <vPortExitCritical+0x50>)
 800c43a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c43c:	4b07      	ldr	r3, [pc, #28]	@ (800c45c <vPortExitCritical+0x50>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d105      	bne.n	800c450 <vPortExitCritical+0x44>
 800c444:	2300      	movs	r3, #0
 800c446:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c44e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	2000002c 	.word	0x2000002c

0800c460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c460:	f3ef 8009 	mrs	r0, PSP
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	4b15      	ldr	r3, [pc, #84]	@ (800c4c0 <pxCurrentTCBConst>)
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	f01e 0f10 	tst.w	lr, #16
 800c470:	bf08      	it	eq
 800c472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47a:	6010      	str	r0, [r2, #0]
 800c47c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c484:	f380 8811 	msr	BASEPRI, r0
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f7ff fcde 	bl	800be50 <vTaskSwitchContext>
 800c494:	f04f 0000 	mov.w	r0, #0
 800c498:	f380 8811 	msr	BASEPRI, r0
 800c49c:	bc09      	pop	{r0, r3}
 800c49e:	6819      	ldr	r1, [r3, #0]
 800c4a0:	6808      	ldr	r0, [r1, #0]
 800c4a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a6:	f01e 0f10 	tst.w	lr, #16
 800c4aa:	bf08      	it	eq
 800c4ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4b0:	f380 8809 	msr	PSP, r0
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	f3af 8000 	nop.w

0800c4c0 <pxCurrentTCBConst>:
 800c4c0:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop

0800c4c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	607b      	str	r3, [r7, #4]
}
 800c4e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4e2:	f7ff fbfb 	bl	800bcdc <xTaskIncrementTick>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d003      	beq.n	800c4f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4ec:	4b06      	ldr	r3, [pc, #24]	@ (800c508 <SysTick_Handler+0x40>)
 800c4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	f383 8811 	msr	BASEPRI, r3
}
 800c4fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	e000ed04 	.word	0xe000ed04

0800c50c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c50c:	b480      	push	{r7}
 800c50e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c510:	4b0b      	ldr	r3, [pc, #44]	@ (800c540 <vPortSetupTimerInterrupt+0x34>)
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c516:	4b0b      	ldr	r3, [pc, #44]	@ (800c544 <vPortSetupTimerInterrupt+0x38>)
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c51c:	4b0a      	ldr	r3, [pc, #40]	@ (800c548 <vPortSetupTimerInterrupt+0x3c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a0a      	ldr	r2, [pc, #40]	@ (800c54c <vPortSetupTimerInterrupt+0x40>)
 800c522:	fba2 2303 	umull	r2, r3, r2, r3
 800c526:	099b      	lsrs	r3, r3, #6
 800c528:	4a09      	ldr	r2, [pc, #36]	@ (800c550 <vPortSetupTimerInterrupt+0x44>)
 800c52a:	3b01      	subs	r3, #1
 800c52c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c52e:	4b04      	ldr	r3, [pc, #16]	@ (800c540 <vPortSetupTimerInterrupt+0x34>)
 800c530:	2207      	movs	r2, #7
 800c532:	601a      	str	r2, [r3, #0]
}
 800c534:	bf00      	nop
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	e000e010 	.word	0xe000e010
 800c544:	e000e018 	.word	0xe000e018
 800c548:	20000008 	.word	0x20000008
 800c54c:	10624dd3 	.word	0x10624dd3
 800c550:	e000e014 	.word	0xe000e014

0800c554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c564 <vPortEnableVFP+0x10>
 800c558:	6801      	ldr	r1, [r0, #0]
 800c55a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c55e:	6001      	str	r1, [r0, #0]
 800c560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c562:	bf00      	nop
 800c564:	e000ed88 	.word	0xe000ed88

0800c568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08a      	sub	sp, #40	@ 0x28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c570:	2300      	movs	r3, #0
 800c572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c574:	f7ff fb06 	bl	800bb84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c578:	4b5c      	ldr	r3, [pc, #368]	@ (800c6ec <pvPortMalloc+0x184>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c580:	f000 f924 	bl	800c7cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c584:	4b5a      	ldr	r3, [pc, #360]	@ (800c6f0 <pvPortMalloc+0x188>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 8095 	bne.w	800c6bc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01e      	beq.n	800c5d6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c598:	2208      	movs	r2, #8
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4413      	add	r3, r2
 800c59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d015      	beq.n	800c5d6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f023 0307 	bic.w	r3, r3, #7
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00b      	beq.n	800c5d6 <pvPortMalloc+0x6e>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	617b      	str	r3, [r7, #20]
}
 800c5d0:	bf00      	nop
 800c5d2:	bf00      	nop
 800c5d4:	e7fd      	b.n	800c5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d06f      	beq.n	800c6bc <pvPortMalloc+0x154>
 800c5dc:	4b45      	ldr	r3, [pc, #276]	@ (800c6f4 <pvPortMalloc+0x18c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d86a      	bhi.n	800c6bc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5e6:	4b44      	ldr	r3, [pc, #272]	@ (800c6f8 <pvPortMalloc+0x190>)
 800c5e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5ea:	4b43      	ldr	r3, [pc, #268]	@ (800c6f8 <pvPortMalloc+0x190>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5f0:	e004      	b.n	800c5fc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	429a      	cmp	r2, r3
 800c604:	d903      	bls.n	800c60e <pvPortMalloc+0xa6>
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1f1      	bne.n	800c5f2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c60e:	4b37      	ldr	r3, [pc, #220]	@ (800c6ec <pvPortMalloc+0x184>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c614:	429a      	cmp	r2, r3
 800c616:	d051      	beq.n	800c6bc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2208      	movs	r2, #8
 800c61e:	4413      	add	r3, r2
 800c620:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	6a3b      	ldr	r3, [r7, #32]
 800c628:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	1ad2      	subs	r2, r2, r3
 800c632:	2308      	movs	r3, #8
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	429a      	cmp	r2, r3
 800c638:	d920      	bls.n	800c67c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c63a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4413      	add	r3, r2
 800c640:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	f003 0307 	and.w	r3, r3, #7
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00b      	beq.n	800c664 <pvPortMalloc+0xfc>
	__asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	613b      	str	r3, [r7, #16]
}
 800c65e:	bf00      	nop
 800c660:	bf00      	nop
 800c662:	e7fd      	b.n	800c660 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	685a      	ldr	r2, [r3, #4]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	1ad2      	subs	r2, r2, r3
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c676:	69b8      	ldr	r0, [r7, #24]
 800c678:	f000 f90a 	bl	800c890 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c67c:	4b1d      	ldr	r3, [pc, #116]	@ (800c6f4 <pvPortMalloc+0x18c>)
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	1ad3      	subs	r3, r2, r3
 800c686:	4a1b      	ldr	r2, [pc, #108]	@ (800c6f4 <pvPortMalloc+0x18c>)
 800c688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c68a:	4b1a      	ldr	r3, [pc, #104]	@ (800c6f4 <pvPortMalloc+0x18c>)
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	4b1b      	ldr	r3, [pc, #108]	@ (800c6fc <pvPortMalloc+0x194>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	429a      	cmp	r2, r3
 800c694:	d203      	bcs.n	800c69e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c696:	4b17      	ldr	r3, [pc, #92]	@ (800c6f4 <pvPortMalloc+0x18c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a18      	ldr	r2, [pc, #96]	@ (800c6fc <pvPortMalloc+0x194>)
 800c69c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a0:	685a      	ldr	r2, [r3, #4]
 800c6a2:	4b13      	ldr	r3, [pc, #76]	@ (800c6f0 <pvPortMalloc+0x188>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	431a      	orrs	r2, r3
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6b2:	4b13      	ldr	r3, [pc, #76]	@ (800c700 <pvPortMalloc+0x198>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	4a11      	ldr	r2, [pc, #68]	@ (800c700 <pvPortMalloc+0x198>)
 800c6ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6bc:	f7ff fa70 	bl	800bba0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	f003 0307 	and.w	r3, r3, #7
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00b      	beq.n	800c6e2 <pvPortMalloc+0x17a>
	__asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ce:	f383 8811 	msr	BASEPRI, r3
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	60fb      	str	r3, [r7, #12]
}
 800c6dc:	bf00      	nop
 800c6de:	bf00      	nop
 800c6e0:	e7fd      	b.n	800c6de <pvPortMalloc+0x176>
	return pvReturn;
 800c6e2:	69fb      	ldr	r3, [r7, #28]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3728      	adds	r7, #40	@ 0x28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	20003128 	.word	0x20003128
 800c6f0:	2000313c 	.word	0x2000313c
 800c6f4:	2000312c 	.word	0x2000312c
 800c6f8:	20003120 	.word	0x20003120
 800c6fc:	20003130 	.word	0x20003130
 800c700:	20003134 	.word	0x20003134

0800c704 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b086      	sub	sp, #24
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d04f      	beq.n	800c7b6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c716:	2308      	movs	r3, #8
 800c718:	425b      	negs	r3, r3
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	4413      	add	r3, r2
 800c71e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	4b25      	ldr	r3, [pc, #148]	@ (800c7c0 <vPortFree+0xbc>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4013      	ands	r3, r2
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10b      	bne.n	800c74a <vPortFree+0x46>
	__asm volatile
 800c732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	60fb      	str	r3, [r7, #12]
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop
 800c748:	e7fd      	b.n	800c746 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00b      	beq.n	800c76a <vPortFree+0x66>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	60bb      	str	r3, [r7, #8]
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	e7fd      	b.n	800c766 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	4b14      	ldr	r3, [pc, #80]	@ (800c7c0 <vPortFree+0xbc>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4013      	ands	r3, r2
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01e      	beq.n	800c7b6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d11a      	bne.n	800c7b6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	4b0e      	ldr	r3, [pc, #56]	@ (800c7c0 <vPortFree+0xbc>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	43db      	mvns	r3, r3
 800c78a:	401a      	ands	r2, r3
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c790:	f7ff f9f8 	bl	800bb84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	4b0a      	ldr	r3, [pc, #40]	@ (800c7c4 <vPortFree+0xc0>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4413      	add	r3, r2
 800c79e:	4a09      	ldr	r2, [pc, #36]	@ (800c7c4 <vPortFree+0xc0>)
 800c7a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c7a2:	6938      	ldr	r0, [r7, #16]
 800c7a4:	f000 f874 	bl	800c890 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c7a8:	4b07      	ldr	r3, [pc, #28]	@ (800c7c8 <vPortFree+0xc4>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	4a06      	ldr	r2, [pc, #24]	@ (800c7c8 <vPortFree+0xc4>)
 800c7b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c7b2:	f7ff f9f5 	bl	800bba0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7b6:	bf00      	nop
 800c7b8:	3718      	adds	r7, #24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	2000313c 	.word	0x2000313c
 800c7c4:	2000312c 	.word	0x2000312c
 800c7c8:	20003138 	.word	0x20003138

0800c7cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 800c7d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7d8:	4b27      	ldr	r3, [pc, #156]	@ (800c878 <prvHeapInit+0xac>)
 800c7da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f003 0307 	and.w	r3, r3, #7
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00c      	beq.n	800c800 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3307      	adds	r3, #7
 800c7ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f023 0307 	bic.w	r3, r3, #7
 800c7f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	4a1f      	ldr	r2, [pc, #124]	@ (800c878 <prvHeapInit+0xac>)
 800c7fc:	4413      	add	r3, r2
 800c7fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c804:	4a1d      	ldr	r2, [pc, #116]	@ (800c87c <prvHeapInit+0xb0>)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c80a:	4b1c      	ldr	r3, [pc, #112]	@ (800c87c <prvHeapInit+0xb0>)
 800c80c:	2200      	movs	r2, #0
 800c80e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	4413      	add	r3, r2
 800c816:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c818:	2208      	movs	r2, #8
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	1a9b      	subs	r3, r3, r2
 800c81e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f023 0307 	bic.w	r3, r3, #7
 800c826:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	4a15      	ldr	r2, [pc, #84]	@ (800c880 <prvHeapInit+0xb4>)
 800c82c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c82e:	4b14      	ldr	r3, [pc, #80]	@ (800c880 <prvHeapInit+0xb4>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2200      	movs	r2, #0
 800c834:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c836:	4b12      	ldr	r3, [pc, #72]	@ (800c880 <prvHeapInit+0xb4>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	1ad2      	subs	r2, r2, r3
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c84c:	4b0c      	ldr	r3, [pc, #48]	@ (800c880 <prvHeapInit+0xb4>)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	4a0a      	ldr	r2, [pc, #40]	@ (800c884 <prvHeapInit+0xb8>)
 800c85a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	4a09      	ldr	r2, [pc, #36]	@ (800c888 <prvHeapInit+0xbc>)
 800c862:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c864:	4b09      	ldr	r3, [pc, #36]	@ (800c88c <prvHeapInit+0xc0>)
 800c866:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c86a:	601a      	str	r2, [r3, #0]
}
 800c86c:	bf00      	nop
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	20000a10 	.word	0x20000a10
 800c87c:	20003120 	.word	0x20003120
 800c880:	20003128 	.word	0x20003128
 800c884:	20003130 	.word	0x20003130
 800c888:	2000312c 	.word	0x2000312c
 800c88c:	2000313c 	.word	0x2000313c

0800c890 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c898:	4b28      	ldr	r3, [pc, #160]	@ (800c93c <prvInsertBlockIntoFreeList+0xac>)
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	e002      	b.n	800c8a4 <prvInsertBlockIntoFreeList+0x14>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	60fb      	str	r3, [r7, #12]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d8f7      	bhi.n	800c89e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d108      	bne.n	800c8d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	441a      	add	r2, r3
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	441a      	add	r2, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d118      	bne.n	800c918 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	4b15      	ldr	r3, [pc, #84]	@ (800c940 <prvInsertBlockIntoFreeList+0xb0>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d00d      	beq.n	800c90e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	441a      	add	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	e008      	b.n	800c920 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c90e:	4b0c      	ldr	r3, [pc, #48]	@ (800c940 <prvInsertBlockIntoFreeList+0xb0>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	601a      	str	r2, [r3, #0]
 800c916:	e003      	b.n	800c920 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	429a      	cmp	r2, r3
 800c926:	d002      	beq.n	800c92e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c92e:	bf00      	nop
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	20003120 	.word	0x20003120
 800c940:	20003128 	.word	0x20003128

0800c944 <abs>:
 800c944:	2800      	cmp	r0, #0
 800c946:	bfb8      	it	lt
 800c948:	4240      	neglt	r0, r0
 800c94a:	4770      	bx	lr

0800c94c <__cvt>:
 800c94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c950:	ec57 6b10 	vmov	r6, r7, d0
 800c954:	2f00      	cmp	r7, #0
 800c956:	460c      	mov	r4, r1
 800c958:	4619      	mov	r1, r3
 800c95a:	463b      	mov	r3, r7
 800c95c:	bfbb      	ittet	lt
 800c95e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c962:	461f      	movlt	r7, r3
 800c964:	2300      	movge	r3, #0
 800c966:	232d      	movlt	r3, #45	@ 0x2d
 800c968:	700b      	strb	r3, [r1, #0]
 800c96a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c96c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c970:	4691      	mov	r9, r2
 800c972:	f023 0820 	bic.w	r8, r3, #32
 800c976:	bfbc      	itt	lt
 800c978:	4632      	movlt	r2, r6
 800c97a:	4616      	movlt	r6, r2
 800c97c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c980:	d005      	beq.n	800c98e <__cvt+0x42>
 800c982:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c986:	d100      	bne.n	800c98a <__cvt+0x3e>
 800c988:	3401      	adds	r4, #1
 800c98a:	2102      	movs	r1, #2
 800c98c:	e000      	b.n	800c990 <__cvt+0x44>
 800c98e:	2103      	movs	r1, #3
 800c990:	ab03      	add	r3, sp, #12
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	ab02      	add	r3, sp, #8
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	ec47 6b10 	vmov	d0, r6, r7
 800c99c:	4653      	mov	r3, sl
 800c99e:	4622      	mov	r2, r4
 800c9a0:	f001 f87e 	bl	800daa0 <_dtoa_r>
 800c9a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	d119      	bne.n	800c9e0 <__cvt+0x94>
 800c9ac:	f019 0f01 	tst.w	r9, #1
 800c9b0:	d00e      	beq.n	800c9d0 <__cvt+0x84>
 800c9b2:	eb00 0904 	add.w	r9, r0, r4
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	4639      	mov	r1, r7
 800c9be:	f7f4 f8ab 	bl	8000b18 <__aeabi_dcmpeq>
 800c9c2:	b108      	cbz	r0, 800c9c8 <__cvt+0x7c>
 800c9c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c9c8:	2230      	movs	r2, #48	@ 0x30
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	454b      	cmp	r3, r9
 800c9ce:	d31e      	bcc.n	800ca0e <__cvt+0xc2>
 800c9d0:	9b03      	ldr	r3, [sp, #12]
 800c9d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9d4:	1b5b      	subs	r3, r3, r5
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	6013      	str	r3, [r2, #0]
 800c9da:	b004      	add	sp, #16
 800c9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c9e4:	eb00 0904 	add.w	r9, r0, r4
 800c9e8:	d1e5      	bne.n	800c9b6 <__cvt+0x6a>
 800c9ea:	7803      	ldrb	r3, [r0, #0]
 800c9ec:	2b30      	cmp	r3, #48	@ 0x30
 800c9ee:	d10a      	bne.n	800ca06 <__cvt+0xba>
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	f7f4 f88e 	bl	8000b18 <__aeabi_dcmpeq>
 800c9fc:	b918      	cbnz	r0, 800ca06 <__cvt+0xba>
 800c9fe:	f1c4 0401 	rsb	r4, r4, #1
 800ca02:	f8ca 4000 	str.w	r4, [sl]
 800ca06:	f8da 3000 	ldr.w	r3, [sl]
 800ca0a:	4499      	add	r9, r3
 800ca0c:	e7d3      	b.n	800c9b6 <__cvt+0x6a>
 800ca0e:	1c59      	adds	r1, r3, #1
 800ca10:	9103      	str	r1, [sp, #12]
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	e7d9      	b.n	800c9ca <__cvt+0x7e>

0800ca16 <__exponent>:
 800ca16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca18:	2900      	cmp	r1, #0
 800ca1a:	bfba      	itte	lt
 800ca1c:	4249      	neglt	r1, r1
 800ca1e:	232d      	movlt	r3, #45	@ 0x2d
 800ca20:	232b      	movge	r3, #43	@ 0x2b
 800ca22:	2909      	cmp	r1, #9
 800ca24:	7002      	strb	r2, [r0, #0]
 800ca26:	7043      	strb	r3, [r0, #1]
 800ca28:	dd29      	ble.n	800ca7e <__exponent+0x68>
 800ca2a:	f10d 0307 	add.w	r3, sp, #7
 800ca2e:	461d      	mov	r5, r3
 800ca30:	270a      	movs	r7, #10
 800ca32:	461a      	mov	r2, r3
 800ca34:	fbb1 f6f7 	udiv	r6, r1, r7
 800ca38:	fb07 1416 	mls	r4, r7, r6, r1
 800ca3c:	3430      	adds	r4, #48	@ 0x30
 800ca3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ca42:	460c      	mov	r4, r1
 800ca44:	2c63      	cmp	r4, #99	@ 0x63
 800ca46:	f103 33ff 	add.w	r3, r3, #4294967295
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	dcf1      	bgt.n	800ca32 <__exponent+0x1c>
 800ca4e:	3130      	adds	r1, #48	@ 0x30
 800ca50:	1e94      	subs	r4, r2, #2
 800ca52:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca56:	1c41      	adds	r1, r0, #1
 800ca58:	4623      	mov	r3, r4
 800ca5a:	42ab      	cmp	r3, r5
 800ca5c:	d30a      	bcc.n	800ca74 <__exponent+0x5e>
 800ca5e:	f10d 0309 	add.w	r3, sp, #9
 800ca62:	1a9b      	subs	r3, r3, r2
 800ca64:	42ac      	cmp	r4, r5
 800ca66:	bf88      	it	hi
 800ca68:	2300      	movhi	r3, #0
 800ca6a:	3302      	adds	r3, #2
 800ca6c:	4403      	add	r3, r0
 800ca6e:	1a18      	subs	r0, r3, r0
 800ca70:	b003      	add	sp, #12
 800ca72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca74:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ca78:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ca7c:	e7ed      	b.n	800ca5a <__exponent+0x44>
 800ca7e:	2330      	movs	r3, #48	@ 0x30
 800ca80:	3130      	adds	r1, #48	@ 0x30
 800ca82:	7083      	strb	r3, [r0, #2]
 800ca84:	70c1      	strb	r1, [r0, #3]
 800ca86:	1d03      	adds	r3, r0, #4
 800ca88:	e7f1      	b.n	800ca6e <__exponent+0x58>
	...

0800ca8c <_printf_float>:
 800ca8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca90:	b08d      	sub	sp, #52	@ 0x34
 800ca92:	460c      	mov	r4, r1
 800ca94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ca98:	4616      	mov	r6, r2
 800ca9a:	461f      	mov	r7, r3
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	f000 fee9 	bl	800d874 <_localeconv_r>
 800caa2:	6803      	ldr	r3, [r0, #0]
 800caa4:	9304      	str	r3, [sp, #16]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f3 fc0a 	bl	80002c0 <strlen>
 800caac:	2300      	movs	r3, #0
 800caae:	930a      	str	r3, [sp, #40]	@ 0x28
 800cab0:	f8d8 3000 	ldr.w	r3, [r8]
 800cab4:	9005      	str	r0, [sp, #20]
 800cab6:	3307      	adds	r3, #7
 800cab8:	f023 0307 	bic.w	r3, r3, #7
 800cabc:	f103 0208 	add.w	r2, r3, #8
 800cac0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cac4:	f8d4 b000 	ldr.w	fp, [r4]
 800cac8:	f8c8 2000 	str.w	r2, [r8]
 800cacc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cad0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cad4:	9307      	str	r3, [sp, #28]
 800cad6:	f8cd 8018 	str.w	r8, [sp, #24]
 800cada:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cae2:	4b9c      	ldr	r3, [pc, #624]	@ (800cd54 <_printf_float+0x2c8>)
 800cae4:	f04f 32ff 	mov.w	r2, #4294967295
 800cae8:	f7f4 f848 	bl	8000b7c <__aeabi_dcmpun>
 800caec:	bb70      	cbnz	r0, 800cb4c <_printf_float+0xc0>
 800caee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caf2:	4b98      	ldr	r3, [pc, #608]	@ (800cd54 <_printf_float+0x2c8>)
 800caf4:	f04f 32ff 	mov.w	r2, #4294967295
 800caf8:	f7f4 f822 	bl	8000b40 <__aeabi_dcmple>
 800cafc:	bb30      	cbnz	r0, 800cb4c <_printf_float+0xc0>
 800cafe:	2200      	movs	r2, #0
 800cb00:	2300      	movs	r3, #0
 800cb02:	4640      	mov	r0, r8
 800cb04:	4649      	mov	r1, r9
 800cb06:	f7f4 f811 	bl	8000b2c <__aeabi_dcmplt>
 800cb0a:	b110      	cbz	r0, 800cb12 <_printf_float+0x86>
 800cb0c:	232d      	movs	r3, #45	@ 0x2d
 800cb0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb12:	4a91      	ldr	r2, [pc, #580]	@ (800cd58 <_printf_float+0x2cc>)
 800cb14:	4b91      	ldr	r3, [pc, #580]	@ (800cd5c <_printf_float+0x2d0>)
 800cb16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb1a:	bf8c      	ite	hi
 800cb1c:	4690      	movhi	r8, r2
 800cb1e:	4698      	movls	r8, r3
 800cb20:	2303      	movs	r3, #3
 800cb22:	6123      	str	r3, [r4, #16]
 800cb24:	f02b 0304 	bic.w	r3, fp, #4
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	f04f 0900 	mov.w	r9, #0
 800cb2e:	9700      	str	r7, [sp, #0]
 800cb30:	4633      	mov	r3, r6
 800cb32:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cb34:	4621      	mov	r1, r4
 800cb36:	4628      	mov	r0, r5
 800cb38:	f000 f9d2 	bl	800cee0 <_printf_common>
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	f040 808d 	bne.w	800cc5c <_printf_float+0x1d0>
 800cb42:	f04f 30ff 	mov.w	r0, #4294967295
 800cb46:	b00d      	add	sp, #52	@ 0x34
 800cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4c:	4642      	mov	r2, r8
 800cb4e:	464b      	mov	r3, r9
 800cb50:	4640      	mov	r0, r8
 800cb52:	4649      	mov	r1, r9
 800cb54:	f7f4 f812 	bl	8000b7c <__aeabi_dcmpun>
 800cb58:	b140      	cbz	r0, 800cb6c <_printf_float+0xe0>
 800cb5a:	464b      	mov	r3, r9
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	bfbc      	itt	lt
 800cb60:	232d      	movlt	r3, #45	@ 0x2d
 800cb62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cb66:	4a7e      	ldr	r2, [pc, #504]	@ (800cd60 <_printf_float+0x2d4>)
 800cb68:	4b7e      	ldr	r3, [pc, #504]	@ (800cd64 <_printf_float+0x2d8>)
 800cb6a:	e7d4      	b.n	800cb16 <_printf_float+0x8a>
 800cb6c:	6863      	ldr	r3, [r4, #4]
 800cb6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cb72:	9206      	str	r2, [sp, #24]
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	d13b      	bne.n	800cbf0 <_printf_float+0x164>
 800cb78:	2306      	movs	r3, #6
 800cb7a:	6063      	str	r3, [r4, #4]
 800cb7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cb80:	2300      	movs	r3, #0
 800cb82:	6022      	str	r2, [r4, #0]
 800cb84:	9303      	str	r3, [sp, #12]
 800cb86:	ab0a      	add	r3, sp, #40	@ 0x28
 800cb88:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cb8c:	ab09      	add	r3, sp, #36	@ 0x24
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	6861      	ldr	r1, [r4, #4]
 800cb92:	ec49 8b10 	vmov	d0, r8, r9
 800cb96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f7ff fed6 	bl	800c94c <__cvt>
 800cba0:	9b06      	ldr	r3, [sp, #24]
 800cba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cba4:	2b47      	cmp	r3, #71	@ 0x47
 800cba6:	4680      	mov	r8, r0
 800cba8:	d129      	bne.n	800cbfe <_printf_float+0x172>
 800cbaa:	1cc8      	adds	r0, r1, #3
 800cbac:	db02      	blt.n	800cbb4 <_printf_float+0x128>
 800cbae:	6863      	ldr	r3, [r4, #4]
 800cbb0:	4299      	cmp	r1, r3
 800cbb2:	dd41      	ble.n	800cc38 <_printf_float+0x1ac>
 800cbb4:	f1aa 0a02 	sub.w	sl, sl, #2
 800cbb8:	fa5f fa8a 	uxtb.w	sl, sl
 800cbbc:	3901      	subs	r1, #1
 800cbbe:	4652      	mov	r2, sl
 800cbc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cbc4:	9109      	str	r1, [sp, #36]	@ 0x24
 800cbc6:	f7ff ff26 	bl	800ca16 <__exponent>
 800cbca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cbcc:	1813      	adds	r3, r2, r0
 800cbce:	2a01      	cmp	r2, #1
 800cbd0:	4681      	mov	r9, r0
 800cbd2:	6123      	str	r3, [r4, #16]
 800cbd4:	dc02      	bgt.n	800cbdc <_printf_float+0x150>
 800cbd6:	6822      	ldr	r2, [r4, #0]
 800cbd8:	07d2      	lsls	r2, r2, #31
 800cbda:	d501      	bpl.n	800cbe0 <_printf_float+0x154>
 800cbdc:	3301      	adds	r3, #1
 800cbde:	6123      	str	r3, [r4, #16]
 800cbe0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0a2      	beq.n	800cb2e <_printf_float+0xa2>
 800cbe8:	232d      	movs	r3, #45	@ 0x2d
 800cbea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbee:	e79e      	b.n	800cb2e <_printf_float+0xa2>
 800cbf0:	9a06      	ldr	r2, [sp, #24]
 800cbf2:	2a47      	cmp	r2, #71	@ 0x47
 800cbf4:	d1c2      	bne.n	800cb7c <_printf_float+0xf0>
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1c0      	bne.n	800cb7c <_printf_float+0xf0>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e7bd      	b.n	800cb7a <_printf_float+0xee>
 800cbfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc02:	d9db      	bls.n	800cbbc <_printf_float+0x130>
 800cc04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cc08:	d118      	bne.n	800cc3c <_printf_float+0x1b0>
 800cc0a:	2900      	cmp	r1, #0
 800cc0c:	6863      	ldr	r3, [r4, #4]
 800cc0e:	dd0b      	ble.n	800cc28 <_printf_float+0x19c>
 800cc10:	6121      	str	r1, [r4, #16]
 800cc12:	b913      	cbnz	r3, 800cc1a <_printf_float+0x18e>
 800cc14:	6822      	ldr	r2, [r4, #0]
 800cc16:	07d0      	lsls	r0, r2, #31
 800cc18:	d502      	bpl.n	800cc20 <_printf_float+0x194>
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	440b      	add	r3, r1
 800cc1e:	6123      	str	r3, [r4, #16]
 800cc20:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cc22:	f04f 0900 	mov.w	r9, #0
 800cc26:	e7db      	b.n	800cbe0 <_printf_float+0x154>
 800cc28:	b913      	cbnz	r3, 800cc30 <_printf_float+0x1a4>
 800cc2a:	6822      	ldr	r2, [r4, #0]
 800cc2c:	07d2      	lsls	r2, r2, #31
 800cc2e:	d501      	bpl.n	800cc34 <_printf_float+0x1a8>
 800cc30:	3302      	adds	r3, #2
 800cc32:	e7f4      	b.n	800cc1e <_printf_float+0x192>
 800cc34:	2301      	movs	r3, #1
 800cc36:	e7f2      	b.n	800cc1e <_printf_float+0x192>
 800cc38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cc3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc3e:	4299      	cmp	r1, r3
 800cc40:	db05      	blt.n	800cc4e <_printf_float+0x1c2>
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	6121      	str	r1, [r4, #16]
 800cc46:	07d8      	lsls	r0, r3, #31
 800cc48:	d5ea      	bpl.n	800cc20 <_printf_float+0x194>
 800cc4a:	1c4b      	adds	r3, r1, #1
 800cc4c:	e7e7      	b.n	800cc1e <_printf_float+0x192>
 800cc4e:	2900      	cmp	r1, #0
 800cc50:	bfd4      	ite	le
 800cc52:	f1c1 0202 	rsble	r2, r1, #2
 800cc56:	2201      	movgt	r2, #1
 800cc58:	4413      	add	r3, r2
 800cc5a:	e7e0      	b.n	800cc1e <_printf_float+0x192>
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	055a      	lsls	r2, r3, #21
 800cc60:	d407      	bmi.n	800cc72 <_printf_float+0x1e6>
 800cc62:	6923      	ldr	r3, [r4, #16]
 800cc64:	4642      	mov	r2, r8
 800cc66:	4631      	mov	r1, r6
 800cc68:	4628      	mov	r0, r5
 800cc6a:	47b8      	blx	r7
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	d12b      	bne.n	800ccc8 <_printf_float+0x23c>
 800cc70:	e767      	b.n	800cb42 <_printf_float+0xb6>
 800cc72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc76:	f240 80dd 	bls.w	800ce34 <_printf_float+0x3a8>
 800cc7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cc7e:	2200      	movs	r2, #0
 800cc80:	2300      	movs	r3, #0
 800cc82:	f7f3 ff49 	bl	8000b18 <__aeabi_dcmpeq>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d033      	beq.n	800ccf2 <_printf_float+0x266>
 800cc8a:	4a37      	ldr	r2, [pc, #220]	@ (800cd68 <_printf_float+0x2dc>)
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b8      	blx	r7
 800cc94:	3001      	adds	r0, #1
 800cc96:	f43f af54 	beq.w	800cb42 <_printf_float+0xb6>
 800cc9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cc9e:	4543      	cmp	r3, r8
 800cca0:	db02      	blt.n	800cca8 <_printf_float+0x21c>
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	07d8      	lsls	r0, r3, #31
 800cca6:	d50f      	bpl.n	800ccc8 <_printf_float+0x23c>
 800cca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccac:	4631      	mov	r1, r6
 800ccae:	4628      	mov	r0, r5
 800ccb0:	47b8      	blx	r7
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	f43f af45 	beq.w	800cb42 <_printf_float+0xb6>
 800ccb8:	f04f 0900 	mov.w	r9, #0
 800ccbc:	f108 38ff 	add.w	r8, r8, #4294967295
 800ccc0:	f104 0a1a 	add.w	sl, r4, #26
 800ccc4:	45c8      	cmp	r8, r9
 800ccc6:	dc09      	bgt.n	800ccdc <_printf_float+0x250>
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	079b      	lsls	r3, r3, #30
 800cccc:	f100 8103 	bmi.w	800ced6 <_printf_float+0x44a>
 800ccd0:	68e0      	ldr	r0, [r4, #12]
 800ccd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccd4:	4298      	cmp	r0, r3
 800ccd6:	bfb8      	it	lt
 800ccd8:	4618      	movlt	r0, r3
 800ccda:	e734      	b.n	800cb46 <_printf_float+0xba>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	4652      	mov	r2, sl
 800cce0:	4631      	mov	r1, r6
 800cce2:	4628      	mov	r0, r5
 800cce4:	47b8      	blx	r7
 800cce6:	3001      	adds	r0, #1
 800cce8:	f43f af2b 	beq.w	800cb42 <_printf_float+0xb6>
 800ccec:	f109 0901 	add.w	r9, r9, #1
 800ccf0:	e7e8      	b.n	800ccc4 <_printf_float+0x238>
 800ccf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	dc39      	bgt.n	800cd6c <_printf_float+0x2e0>
 800ccf8:	4a1b      	ldr	r2, [pc, #108]	@ (800cd68 <_printf_float+0x2dc>)
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	4628      	mov	r0, r5
 800cd00:	47b8      	blx	r7
 800cd02:	3001      	adds	r0, #1
 800cd04:	f43f af1d 	beq.w	800cb42 <_printf_float+0xb6>
 800cd08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cd0c:	ea59 0303 	orrs.w	r3, r9, r3
 800cd10:	d102      	bne.n	800cd18 <_printf_float+0x28c>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	07d9      	lsls	r1, r3, #31
 800cd16:	d5d7      	bpl.n	800ccc8 <_printf_float+0x23c>
 800cd18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd1c:	4631      	mov	r1, r6
 800cd1e:	4628      	mov	r0, r5
 800cd20:	47b8      	blx	r7
 800cd22:	3001      	adds	r0, #1
 800cd24:	f43f af0d 	beq.w	800cb42 <_printf_float+0xb6>
 800cd28:	f04f 0a00 	mov.w	sl, #0
 800cd2c:	f104 0b1a 	add.w	fp, r4, #26
 800cd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd32:	425b      	negs	r3, r3
 800cd34:	4553      	cmp	r3, sl
 800cd36:	dc01      	bgt.n	800cd3c <_printf_float+0x2b0>
 800cd38:	464b      	mov	r3, r9
 800cd3a:	e793      	b.n	800cc64 <_printf_float+0x1d8>
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	465a      	mov	r2, fp
 800cd40:	4631      	mov	r1, r6
 800cd42:	4628      	mov	r0, r5
 800cd44:	47b8      	blx	r7
 800cd46:	3001      	adds	r0, #1
 800cd48:	f43f aefb 	beq.w	800cb42 <_printf_float+0xb6>
 800cd4c:	f10a 0a01 	add.w	sl, sl, #1
 800cd50:	e7ee      	b.n	800cd30 <_printf_float+0x2a4>
 800cd52:	bf00      	nop
 800cd54:	7fefffff 	.word	0x7fefffff
 800cd58:	08011bb4 	.word	0x08011bb4
 800cd5c:	08011bb0 	.word	0x08011bb0
 800cd60:	08011bbc 	.word	0x08011bbc
 800cd64:	08011bb8 	.word	0x08011bb8
 800cd68:	08011bc0 	.word	0x08011bc0
 800cd6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cd72:	4553      	cmp	r3, sl
 800cd74:	bfa8      	it	ge
 800cd76:	4653      	movge	r3, sl
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	4699      	mov	r9, r3
 800cd7c:	dc36      	bgt.n	800cdec <_printf_float+0x360>
 800cd7e:	f04f 0b00 	mov.w	fp, #0
 800cd82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd86:	f104 021a 	add.w	r2, r4, #26
 800cd8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd8c:	9306      	str	r3, [sp, #24]
 800cd8e:	eba3 0309 	sub.w	r3, r3, r9
 800cd92:	455b      	cmp	r3, fp
 800cd94:	dc31      	bgt.n	800cdfa <_printf_float+0x36e>
 800cd96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd98:	459a      	cmp	sl, r3
 800cd9a:	dc3a      	bgt.n	800ce12 <_printf_float+0x386>
 800cd9c:	6823      	ldr	r3, [r4, #0]
 800cd9e:	07da      	lsls	r2, r3, #31
 800cda0:	d437      	bmi.n	800ce12 <_printf_float+0x386>
 800cda2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda4:	ebaa 0903 	sub.w	r9, sl, r3
 800cda8:	9b06      	ldr	r3, [sp, #24]
 800cdaa:	ebaa 0303 	sub.w	r3, sl, r3
 800cdae:	4599      	cmp	r9, r3
 800cdb0:	bfa8      	it	ge
 800cdb2:	4699      	movge	r9, r3
 800cdb4:	f1b9 0f00 	cmp.w	r9, #0
 800cdb8:	dc33      	bgt.n	800ce22 <_printf_float+0x396>
 800cdba:	f04f 0800 	mov.w	r8, #0
 800cdbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cdc2:	f104 0b1a 	add.w	fp, r4, #26
 800cdc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc8:	ebaa 0303 	sub.w	r3, sl, r3
 800cdcc:	eba3 0309 	sub.w	r3, r3, r9
 800cdd0:	4543      	cmp	r3, r8
 800cdd2:	f77f af79 	ble.w	800ccc8 <_printf_float+0x23c>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	465a      	mov	r2, fp
 800cdda:	4631      	mov	r1, r6
 800cddc:	4628      	mov	r0, r5
 800cdde:	47b8      	blx	r7
 800cde0:	3001      	adds	r0, #1
 800cde2:	f43f aeae 	beq.w	800cb42 <_printf_float+0xb6>
 800cde6:	f108 0801 	add.w	r8, r8, #1
 800cdea:	e7ec      	b.n	800cdc6 <_printf_float+0x33a>
 800cdec:	4642      	mov	r2, r8
 800cdee:	4631      	mov	r1, r6
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	47b8      	blx	r7
 800cdf4:	3001      	adds	r0, #1
 800cdf6:	d1c2      	bne.n	800cd7e <_printf_float+0x2f2>
 800cdf8:	e6a3      	b.n	800cb42 <_printf_float+0xb6>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4628      	mov	r0, r5
 800ce00:	9206      	str	r2, [sp, #24]
 800ce02:	47b8      	blx	r7
 800ce04:	3001      	adds	r0, #1
 800ce06:	f43f ae9c 	beq.w	800cb42 <_printf_float+0xb6>
 800ce0a:	9a06      	ldr	r2, [sp, #24]
 800ce0c:	f10b 0b01 	add.w	fp, fp, #1
 800ce10:	e7bb      	b.n	800cd8a <_printf_float+0x2fe>
 800ce12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce16:	4631      	mov	r1, r6
 800ce18:	4628      	mov	r0, r5
 800ce1a:	47b8      	blx	r7
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	d1c0      	bne.n	800cda2 <_printf_float+0x316>
 800ce20:	e68f      	b.n	800cb42 <_printf_float+0xb6>
 800ce22:	9a06      	ldr	r2, [sp, #24]
 800ce24:	464b      	mov	r3, r9
 800ce26:	4442      	add	r2, r8
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	47b8      	blx	r7
 800ce2e:	3001      	adds	r0, #1
 800ce30:	d1c3      	bne.n	800cdba <_printf_float+0x32e>
 800ce32:	e686      	b.n	800cb42 <_printf_float+0xb6>
 800ce34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ce38:	f1ba 0f01 	cmp.w	sl, #1
 800ce3c:	dc01      	bgt.n	800ce42 <_printf_float+0x3b6>
 800ce3e:	07db      	lsls	r3, r3, #31
 800ce40:	d536      	bpl.n	800ceb0 <_printf_float+0x424>
 800ce42:	2301      	movs	r3, #1
 800ce44:	4642      	mov	r2, r8
 800ce46:	4631      	mov	r1, r6
 800ce48:	4628      	mov	r0, r5
 800ce4a:	47b8      	blx	r7
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	f43f ae78 	beq.w	800cb42 <_printf_float+0xb6>
 800ce52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce56:	4631      	mov	r1, r6
 800ce58:	4628      	mov	r0, r5
 800ce5a:	47b8      	blx	r7
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	f43f ae70 	beq.w	800cb42 <_printf_float+0xb6>
 800ce62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce66:	2200      	movs	r2, #0
 800ce68:	2300      	movs	r3, #0
 800ce6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce6e:	f7f3 fe53 	bl	8000b18 <__aeabi_dcmpeq>
 800ce72:	b9c0      	cbnz	r0, 800cea6 <_printf_float+0x41a>
 800ce74:	4653      	mov	r3, sl
 800ce76:	f108 0201 	add.w	r2, r8, #1
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	47b8      	blx	r7
 800ce80:	3001      	adds	r0, #1
 800ce82:	d10c      	bne.n	800ce9e <_printf_float+0x412>
 800ce84:	e65d      	b.n	800cb42 <_printf_float+0xb6>
 800ce86:	2301      	movs	r3, #1
 800ce88:	465a      	mov	r2, fp
 800ce8a:	4631      	mov	r1, r6
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	47b8      	blx	r7
 800ce90:	3001      	adds	r0, #1
 800ce92:	f43f ae56 	beq.w	800cb42 <_printf_float+0xb6>
 800ce96:	f108 0801 	add.w	r8, r8, #1
 800ce9a:	45d0      	cmp	r8, sl
 800ce9c:	dbf3      	blt.n	800ce86 <_printf_float+0x3fa>
 800ce9e:	464b      	mov	r3, r9
 800cea0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cea4:	e6df      	b.n	800cc66 <_printf_float+0x1da>
 800cea6:	f04f 0800 	mov.w	r8, #0
 800ceaa:	f104 0b1a 	add.w	fp, r4, #26
 800ceae:	e7f4      	b.n	800ce9a <_printf_float+0x40e>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	4642      	mov	r2, r8
 800ceb4:	e7e1      	b.n	800ce7a <_printf_float+0x3ee>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	464a      	mov	r2, r9
 800ceba:	4631      	mov	r1, r6
 800cebc:	4628      	mov	r0, r5
 800cebe:	47b8      	blx	r7
 800cec0:	3001      	adds	r0, #1
 800cec2:	f43f ae3e 	beq.w	800cb42 <_printf_float+0xb6>
 800cec6:	f108 0801 	add.w	r8, r8, #1
 800ceca:	68e3      	ldr	r3, [r4, #12]
 800cecc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cece:	1a5b      	subs	r3, r3, r1
 800ced0:	4543      	cmp	r3, r8
 800ced2:	dcf0      	bgt.n	800ceb6 <_printf_float+0x42a>
 800ced4:	e6fc      	b.n	800ccd0 <_printf_float+0x244>
 800ced6:	f04f 0800 	mov.w	r8, #0
 800ceda:	f104 0919 	add.w	r9, r4, #25
 800cede:	e7f4      	b.n	800ceca <_printf_float+0x43e>

0800cee0 <_printf_common>:
 800cee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee4:	4616      	mov	r6, r2
 800cee6:	4698      	mov	r8, r3
 800cee8:	688a      	ldr	r2, [r1, #8]
 800ceea:	690b      	ldr	r3, [r1, #16]
 800ceec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cef0:	4293      	cmp	r3, r2
 800cef2:	bfb8      	it	lt
 800cef4:	4613      	movlt	r3, r2
 800cef6:	6033      	str	r3, [r6, #0]
 800cef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cefc:	4607      	mov	r7, r0
 800cefe:	460c      	mov	r4, r1
 800cf00:	b10a      	cbz	r2, 800cf06 <_printf_common+0x26>
 800cf02:	3301      	adds	r3, #1
 800cf04:	6033      	str	r3, [r6, #0]
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	0699      	lsls	r1, r3, #26
 800cf0a:	bf42      	ittt	mi
 800cf0c:	6833      	ldrmi	r3, [r6, #0]
 800cf0e:	3302      	addmi	r3, #2
 800cf10:	6033      	strmi	r3, [r6, #0]
 800cf12:	6825      	ldr	r5, [r4, #0]
 800cf14:	f015 0506 	ands.w	r5, r5, #6
 800cf18:	d106      	bne.n	800cf28 <_printf_common+0x48>
 800cf1a:	f104 0a19 	add.w	sl, r4, #25
 800cf1e:	68e3      	ldr	r3, [r4, #12]
 800cf20:	6832      	ldr	r2, [r6, #0]
 800cf22:	1a9b      	subs	r3, r3, r2
 800cf24:	42ab      	cmp	r3, r5
 800cf26:	dc26      	bgt.n	800cf76 <_printf_common+0x96>
 800cf28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf2c:	6822      	ldr	r2, [r4, #0]
 800cf2e:	3b00      	subs	r3, #0
 800cf30:	bf18      	it	ne
 800cf32:	2301      	movne	r3, #1
 800cf34:	0692      	lsls	r2, r2, #26
 800cf36:	d42b      	bmi.n	800cf90 <_printf_common+0xb0>
 800cf38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf3c:	4641      	mov	r1, r8
 800cf3e:	4638      	mov	r0, r7
 800cf40:	47c8      	blx	r9
 800cf42:	3001      	adds	r0, #1
 800cf44:	d01e      	beq.n	800cf84 <_printf_common+0xa4>
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	6922      	ldr	r2, [r4, #16]
 800cf4a:	f003 0306 	and.w	r3, r3, #6
 800cf4e:	2b04      	cmp	r3, #4
 800cf50:	bf02      	ittt	eq
 800cf52:	68e5      	ldreq	r5, [r4, #12]
 800cf54:	6833      	ldreq	r3, [r6, #0]
 800cf56:	1aed      	subeq	r5, r5, r3
 800cf58:	68a3      	ldr	r3, [r4, #8]
 800cf5a:	bf0c      	ite	eq
 800cf5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf60:	2500      	movne	r5, #0
 800cf62:	4293      	cmp	r3, r2
 800cf64:	bfc4      	itt	gt
 800cf66:	1a9b      	subgt	r3, r3, r2
 800cf68:	18ed      	addgt	r5, r5, r3
 800cf6a:	2600      	movs	r6, #0
 800cf6c:	341a      	adds	r4, #26
 800cf6e:	42b5      	cmp	r5, r6
 800cf70:	d11a      	bne.n	800cfa8 <_printf_common+0xc8>
 800cf72:	2000      	movs	r0, #0
 800cf74:	e008      	b.n	800cf88 <_printf_common+0xa8>
 800cf76:	2301      	movs	r3, #1
 800cf78:	4652      	mov	r2, sl
 800cf7a:	4641      	mov	r1, r8
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	47c8      	blx	r9
 800cf80:	3001      	adds	r0, #1
 800cf82:	d103      	bne.n	800cf8c <_printf_common+0xac>
 800cf84:	f04f 30ff 	mov.w	r0, #4294967295
 800cf88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8c:	3501      	adds	r5, #1
 800cf8e:	e7c6      	b.n	800cf1e <_printf_common+0x3e>
 800cf90:	18e1      	adds	r1, r4, r3
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	2030      	movs	r0, #48	@ 0x30
 800cf96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf9a:	4422      	add	r2, r4
 800cf9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cfa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cfa4:	3302      	adds	r3, #2
 800cfa6:	e7c7      	b.n	800cf38 <_printf_common+0x58>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	4622      	mov	r2, r4
 800cfac:	4641      	mov	r1, r8
 800cfae:	4638      	mov	r0, r7
 800cfb0:	47c8      	blx	r9
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	d0e6      	beq.n	800cf84 <_printf_common+0xa4>
 800cfb6:	3601      	adds	r6, #1
 800cfb8:	e7d9      	b.n	800cf6e <_printf_common+0x8e>
	...

0800cfbc <_printf_i>:
 800cfbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc0:	7e0f      	ldrb	r7, [r1, #24]
 800cfc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cfc4:	2f78      	cmp	r7, #120	@ 0x78
 800cfc6:	4691      	mov	r9, r2
 800cfc8:	4680      	mov	r8, r0
 800cfca:	460c      	mov	r4, r1
 800cfcc:	469a      	mov	sl, r3
 800cfce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cfd2:	d807      	bhi.n	800cfe4 <_printf_i+0x28>
 800cfd4:	2f62      	cmp	r7, #98	@ 0x62
 800cfd6:	d80a      	bhi.n	800cfee <_printf_i+0x32>
 800cfd8:	2f00      	cmp	r7, #0
 800cfda:	f000 80d1 	beq.w	800d180 <_printf_i+0x1c4>
 800cfde:	2f58      	cmp	r7, #88	@ 0x58
 800cfe0:	f000 80b8 	beq.w	800d154 <_printf_i+0x198>
 800cfe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cfec:	e03a      	b.n	800d064 <_printf_i+0xa8>
 800cfee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cff2:	2b15      	cmp	r3, #21
 800cff4:	d8f6      	bhi.n	800cfe4 <_printf_i+0x28>
 800cff6:	a101      	add	r1, pc, #4	@ (adr r1, 800cffc <_printf_i+0x40>)
 800cff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cffc:	0800d055 	.word	0x0800d055
 800d000:	0800d069 	.word	0x0800d069
 800d004:	0800cfe5 	.word	0x0800cfe5
 800d008:	0800cfe5 	.word	0x0800cfe5
 800d00c:	0800cfe5 	.word	0x0800cfe5
 800d010:	0800cfe5 	.word	0x0800cfe5
 800d014:	0800d069 	.word	0x0800d069
 800d018:	0800cfe5 	.word	0x0800cfe5
 800d01c:	0800cfe5 	.word	0x0800cfe5
 800d020:	0800cfe5 	.word	0x0800cfe5
 800d024:	0800cfe5 	.word	0x0800cfe5
 800d028:	0800d167 	.word	0x0800d167
 800d02c:	0800d093 	.word	0x0800d093
 800d030:	0800d121 	.word	0x0800d121
 800d034:	0800cfe5 	.word	0x0800cfe5
 800d038:	0800cfe5 	.word	0x0800cfe5
 800d03c:	0800d189 	.word	0x0800d189
 800d040:	0800cfe5 	.word	0x0800cfe5
 800d044:	0800d093 	.word	0x0800d093
 800d048:	0800cfe5 	.word	0x0800cfe5
 800d04c:	0800cfe5 	.word	0x0800cfe5
 800d050:	0800d129 	.word	0x0800d129
 800d054:	6833      	ldr	r3, [r6, #0]
 800d056:	1d1a      	adds	r2, r3, #4
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	6032      	str	r2, [r6, #0]
 800d05c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d064:	2301      	movs	r3, #1
 800d066:	e09c      	b.n	800d1a2 <_printf_i+0x1e6>
 800d068:	6833      	ldr	r3, [r6, #0]
 800d06a:	6820      	ldr	r0, [r4, #0]
 800d06c:	1d19      	adds	r1, r3, #4
 800d06e:	6031      	str	r1, [r6, #0]
 800d070:	0606      	lsls	r6, r0, #24
 800d072:	d501      	bpl.n	800d078 <_printf_i+0xbc>
 800d074:	681d      	ldr	r5, [r3, #0]
 800d076:	e003      	b.n	800d080 <_printf_i+0xc4>
 800d078:	0645      	lsls	r5, r0, #25
 800d07a:	d5fb      	bpl.n	800d074 <_printf_i+0xb8>
 800d07c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d080:	2d00      	cmp	r5, #0
 800d082:	da03      	bge.n	800d08c <_printf_i+0xd0>
 800d084:	232d      	movs	r3, #45	@ 0x2d
 800d086:	426d      	negs	r5, r5
 800d088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d08c:	4858      	ldr	r0, [pc, #352]	@ (800d1f0 <_printf_i+0x234>)
 800d08e:	230a      	movs	r3, #10
 800d090:	e011      	b.n	800d0b6 <_printf_i+0xfa>
 800d092:	6821      	ldr	r1, [r4, #0]
 800d094:	6833      	ldr	r3, [r6, #0]
 800d096:	0608      	lsls	r0, r1, #24
 800d098:	f853 5b04 	ldr.w	r5, [r3], #4
 800d09c:	d402      	bmi.n	800d0a4 <_printf_i+0xe8>
 800d09e:	0649      	lsls	r1, r1, #25
 800d0a0:	bf48      	it	mi
 800d0a2:	b2ad      	uxthmi	r5, r5
 800d0a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d0a6:	4852      	ldr	r0, [pc, #328]	@ (800d1f0 <_printf_i+0x234>)
 800d0a8:	6033      	str	r3, [r6, #0]
 800d0aa:	bf14      	ite	ne
 800d0ac:	230a      	movne	r3, #10
 800d0ae:	2308      	moveq	r3, #8
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d0b6:	6866      	ldr	r6, [r4, #4]
 800d0b8:	60a6      	str	r6, [r4, #8]
 800d0ba:	2e00      	cmp	r6, #0
 800d0bc:	db05      	blt.n	800d0ca <_printf_i+0x10e>
 800d0be:	6821      	ldr	r1, [r4, #0]
 800d0c0:	432e      	orrs	r6, r5
 800d0c2:	f021 0104 	bic.w	r1, r1, #4
 800d0c6:	6021      	str	r1, [r4, #0]
 800d0c8:	d04b      	beq.n	800d162 <_printf_i+0x1a6>
 800d0ca:	4616      	mov	r6, r2
 800d0cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0d0:	fb03 5711 	mls	r7, r3, r1, r5
 800d0d4:	5dc7      	ldrb	r7, [r0, r7]
 800d0d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0da:	462f      	mov	r7, r5
 800d0dc:	42bb      	cmp	r3, r7
 800d0de:	460d      	mov	r5, r1
 800d0e0:	d9f4      	bls.n	800d0cc <_printf_i+0x110>
 800d0e2:	2b08      	cmp	r3, #8
 800d0e4:	d10b      	bne.n	800d0fe <_printf_i+0x142>
 800d0e6:	6823      	ldr	r3, [r4, #0]
 800d0e8:	07df      	lsls	r7, r3, #31
 800d0ea:	d508      	bpl.n	800d0fe <_printf_i+0x142>
 800d0ec:	6923      	ldr	r3, [r4, #16]
 800d0ee:	6861      	ldr	r1, [r4, #4]
 800d0f0:	4299      	cmp	r1, r3
 800d0f2:	bfde      	ittt	le
 800d0f4:	2330      	movle	r3, #48	@ 0x30
 800d0f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d0fe:	1b92      	subs	r2, r2, r6
 800d100:	6122      	str	r2, [r4, #16]
 800d102:	f8cd a000 	str.w	sl, [sp]
 800d106:	464b      	mov	r3, r9
 800d108:	aa03      	add	r2, sp, #12
 800d10a:	4621      	mov	r1, r4
 800d10c:	4640      	mov	r0, r8
 800d10e:	f7ff fee7 	bl	800cee0 <_printf_common>
 800d112:	3001      	adds	r0, #1
 800d114:	d14a      	bne.n	800d1ac <_printf_i+0x1f0>
 800d116:	f04f 30ff 	mov.w	r0, #4294967295
 800d11a:	b004      	add	sp, #16
 800d11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d120:	6823      	ldr	r3, [r4, #0]
 800d122:	f043 0320 	orr.w	r3, r3, #32
 800d126:	6023      	str	r3, [r4, #0]
 800d128:	4832      	ldr	r0, [pc, #200]	@ (800d1f4 <_printf_i+0x238>)
 800d12a:	2778      	movs	r7, #120	@ 0x78
 800d12c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	6831      	ldr	r1, [r6, #0]
 800d134:	061f      	lsls	r7, r3, #24
 800d136:	f851 5b04 	ldr.w	r5, [r1], #4
 800d13a:	d402      	bmi.n	800d142 <_printf_i+0x186>
 800d13c:	065f      	lsls	r7, r3, #25
 800d13e:	bf48      	it	mi
 800d140:	b2ad      	uxthmi	r5, r5
 800d142:	6031      	str	r1, [r6, #0]
 800d144:	07d9      	lsls	r1, r3, #31
 800d146:	bf44      	itt	mi
 800d148:	f043 0320 	orrmi.w	r3, r3, #32
 800d14c:	6023      	strmi	r3, [r4, #0]
 800d14e:	b11d      	cbz	r5, 800d158 <_printf_i+0x19c>
 800d150:	2310      	movs	r3, #16
 800d152:	e7ad      	b.n	800d0b0 <_printf_i+0xf4>
 800d154:	4826      	ldr	r0, [pc, #152]	@ (800d1f0 <_printf_i+0x234>)
 800d156:	e7e9      	b.n	800d12c <_printf_i+0x170>
 800d158:	6823      	ldr	r3, [r4, #0]
 800d15a:	f023 0320 	bic.w	r3, r3, #32
 800d15e:	6023      	str	r3, [r4, #0]
 800d160:	e7f6      	b.n	800d150 <_printf_i+0x194>
 800d162:	4616      	mov	r6, r2
 800d164:	e7bd      	b.n	800d0e2 <_printf_i+0x126>
 800d166:	6833      	ldr	r3, [r6, #0]
 800d168:	6825      	ldr	r5, [r4, #0]
 800d16a:	6961      	ldr	r1, [r4, #20]
 800d16c:	1d18      	adds	r0, r3, #4
 800d16e:	6030      	str	r0, [r6, #0]
 800d170:	062e      	lsls	r6, r5, #24
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	d501      	bpl.n	800d17a <_printf_i+0x1be>
 800d176:	6019      	str	r1, [r3, #0]
 800d178:	e002      	b.n	800d180 <_printf_i+0x1c4>
 800d17a:	0668      	lsls	r0, r5, #25
 800d17c:	d5fb      	bpl.n	800d176 <_printf_i+0x1ba>
 800d17e:	8019      	strh	r1, [r3, #0]
 800d180:	2300      	movs	r3, #0
 800d182:	6123      	str	r3, [r4, #16]
 800d184:	4616      	mov	r6, r2
 800d186:	e7bc      	b.n	800d102 <_printf_i+0x146>
 800d188:	6833      	ldr	r3, [r6, #0]
 800d18a:	1d1a      	adds	r2, r3, #4
 800d18c:	6032      	str	r2, [r6, #0]
 800d18e:	681e      	ldr	r6, [r3, #0]
 800d190:	6862      	ldr	r2, [r4, #4]
 800d192:	2100      	movs	r1, #0
 800d194:	4630      	mov	r0, r6
 800d196:	f7f3 f843 	bl	8000220 <memchr>
 800d19a:	b108      	cbz	r0, 800d1a0 <_printf_i+0x1e4>
 800d19c:	1b80      	subs	r0, r0, r6
 800d19e:	6060      	str	r0, [r4, #4]
 800d1a0:	6863      	ldr	r3, [r4, #4]
 800d1a2:	6123      	str	r3, [r4, #16]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1aa:	e7aa      	b.n	800d102 <_printf_i+0x146>
 800d1ac:	6923      	ldr	r3, [r4, #16]
 800d1ae:	4632      	mov	r2, r6
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	4640      	mov	r0, r8
 800d1b4:	47d0      	blx	sl
 800d1b6:	3001      	adds	r0, #1
 800d1b8:	d0ad      	beq.n	800d116 <_printf_i+0x15a>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	079b      	lsls	r3, r3, #30
 800d1be:	d413      	bmi.n	800d1e8 <_printf_i+0x22c>
 800d1c0:	68e0      	ldr	r0, [r4, #12]
 800d1c2:	9b03      	ldr	r3, [sp, #12]
 800d1c4:	4298      	cmp	r0, r3
 800d1c6:	bfb8      	it	lt
 800d1c8:	4618      	movlt	r0, r3
 800d1ca:	e7a6      	b.n	800d11a <_printf_i+0x15e>
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	4632      	mov	r2, r6
 800d1d0:	4649      	mov	r1, r9
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	47d0      	blx	sl
 800d1d6:	3001      	adds	r0, #1
 800d1d8:	d09d      	beq.n	800d116 <_printf_i+0x15a>
 800d1da:	3501      	adds	r5, #1
 800d1dc:	68e3      	ldr	r3, [r4, #12]
 800d1de:	9903      	ldr	r1, [sp, #12]
 800d1e0:	1a5b      	subs	r3, r3, r1
 800d1e2:	42ab      	cmp	r3, r5
 800d1e4:	dcf2      	bgt.n	800d1cc <_printf_i+0x210>
 800d1e6:	e7eb      	b.n	800d1c0 <_printf_i+0x204>
 800d1e8:	2500      	movs	r5, #0
 800d1ea:	f104 0619 	add.w	r6, r4, #25
 800d1ee:	e7f5      	b.n	800d1dc <_printf_i+0x220>
 800d1f0:	08011bc2 	.word	0x08011bc2
 800d1f4:	08011bd3 	.word	0x08011bd3

0800d1f8 <_scanf_float>:
 800d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	b087      	sub	sp, #28
 800d1fe:	4691      	mov	r9, r2
 800d200:	9303      	str	r3, [sp, #12]
 800d202:	688b      	ldr	r3, [r1, #8]
 800d204:	1e5a      	subs	r2, r3, #1
 800d206:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d20a:	bf81      	itttt	hi
 800d20c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d210:	eb03 0b05 	addhi.w	fp, r3, r5
 800d214:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d218:	608b      	strhi	r3, [r1, #8]
 800d21a:	680b      	ldr	r3, [r1, #0]
 800d21c:	460a      	mov	r2, r1
 800d21e:	f04f 0500 	mov.w	r5, #0
 800d222:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d226:	f842 3b1c 	str.w	r3, [r2], #28
 800d22a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d22e:	4680      	mov	r8, r0
 800d230:	460c      	mov	r4, r1
 800d232:	bf98      	it	ls
 800d234:	f04f 0b00 	movls.w	fp, #0
 800d238:	9201      	str	r2, [sp, #4]
 800d23a:	4616      	mov	r6, r2
 800d23c:	46aa      	mov	sl, r5
 800d23e:	462f      	mov	r7, r5
 800d240:	9502      	str	r5, [sp, #8]
 800d242:	68a2      	ldr	r2, [r4, #8]
 800d244:	b15a      	cbz	r2, 800d25e <_scanf_float+0x66>
 800d246:	f8d9 3000 	ldr.w	r3, [r9]
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2b4e      	cmp	r3, #78	@ 0x4e
 800d24e:	d863      	bhi.n	800d318 <_scanf_float+0x120>
 800d250:	2b40      	cmp	r3, #64	@ 0x40
 800d252:	d83b      	bhi.n	800d2cc <_scanf_float+0xd4>
 800d254:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d258:	b2c8      	uxtb	r0, r1
 800d25a:	280e      	cmp	r0, #14
 800d25c:	d939      	bls.n	800d2d2 <_scanf_float+0xda>
 800d25e:	b11f      	cbz	r7, 800d268 <_scanf_float+0x70>
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d266:	6023      	str	r3, [r4, #0]
 800d268:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d26c:	f1ba 0f01 	cmp.w	sl, #1
 800d270:	f200 8114 	bhi.w	800d49c <_scanf_float+0x2a4>
 800d274:	9b01      	ldr	r3, [sp, #4]
 800d276:	429e      	cmp	r6, r3
 800d278:	f200 8105 	bhi.w	800d486 <_scanf_float+0x28e>
 800d27c:	2001      	movs	r0, #1
 800d27e:	b007      	add	sp, #28
 800d280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d288:	2a0d      	cmp	r2, #13
 800d28a:	d8e8      	bhi.n	800d25e <_scanf_float+0x66>
 800d28c:	a101      	add	r1, pc, #4	@ (adr r1, 800d294 <_scanf_float+0x9c>)
 800d28e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d292:	bf00      	nop
 800d294:	0800d3dd 	.word	0x0800d3dd
 800d298:	0800d25f 	.word	0x0800d25f
 800d29c:	0800d25f 	.word	0x0800d25f
 800d2a0:	0800d25f 	.word	0x0800d25f
 800d2a4:	0800d439 	.word	0x0800d439
 800d2a8:	0800d413 	.word	0x0800d413
 800d2ac:	0800d25f 	.word	0x0800d25f
 800d2b0:	0800d25f 	.word	0x0800d25f
 800d2b4:	0800d3eb 	.word	0x0800d3eb
 800d2b8:	0800d25f 	.word	0x0800d25f
 800d2bc:	0800d25f 	.word	0x0800d25f
 800d2c0:	0800d25f 	.word	0x0800d25f
 800d2c4:	0800d25f 	.word	0x0800d25f
 800d2c8:	0800d3a7 	.word	0x0800d3a7
 800d2cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d2d0:	e7da      	b.n	800d288 <_scanf_float+0x90>
 800d2d2:	290e      	cmp	r1, #14
 800d2d4:	d8c3      	bhi.n	800d25e <_scanf_float+0x66>
 800d2d6:	a001      	add	r0, pc, #4	@ (adr r0, 800d2dc <_scanf_float+0xe4>)
 800d2d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d2dc:	0800d397 	.word	0x0800d397
 800d2e0:	0800d25f 	.word	0x0800d25f
 800d2e4:	0800d397 	.word	0x0800d397
 800d2e8:	0800d427 	.word	0x0800d427
 800d2ec:	0800d25f 	.word	0x0800d25f
 800d2f0:	0800d339 	.word	0x0800d339
 800d2f4:	0800d37d 	.word	0x0800d37d
 800d2f8:	0800d37d 	.word	0x0800d37d
 800d2fc:	0800d37d 	.word	0x0800d37d
 800d300:	0800d37d 	.word	0x0800d37d
 800d304:	0800d37d 	.word	0x0800d37d
 800d308:	0800d37d 	.word	0x0800d37d
 800d30c:	0800d37d 	.word	0x0800d37d
 800d310:	0800d37d 	.word	0x0800d37d
 800d314:	0800d37d 	.word	0x0800d37d
 800d318:	2b6e      	cmp	r3, #110	@ 0x6e
 800d31a:	d809      	bhi.n	800d330 <_scanf_float+0x138>
 800d31c:	2b60      	cmp	r3, #96	@ 0x60
 800d31e:	d8b1      	bhi.n	800d284 <_scanf_float+0x8c>
 800d320:	2b54      	cmp	r3, #84	@ 0x54
 800d322:	d07b      	beq.n	800d41c <_scanf_float+0x224>
 800d324:	2b59      	cmp	r3, #89	@ 0x59
 800d326:	d19a      	bne.n	800d25e <_scanf_float+0x66>
 800d328:	2d07      	cmp	r5, #7
 800d32a:	d198      	bne.n	800d25e <_scanf_float+0x66>
 800d32c:	2508      	movs	r5, #8
 800d32e:	e02f      	b.n	800d390 <_scanf_float+0x198>
 800d330:	2b74      	cmp	r3, #116	@ 0x74
 800d332:	d073      	beq.n	800d41c <_scanf_float+0x224>
 800d334:	2b79      	cmp	r3, #121	@ 0x79
 800d336:	e7f6      	b.n	800d326 <_scanf_float+0x12e>
 800d338:	6821      	ldr	r1, [r4, #0]
 800d33a:	05c8      	lsls	r0, r1, #23
 800d33c:	d51e      	bpl.n	800d37c <_scanf_float+0x184>
 800d33e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d342:	6021      	str	r1, [r4, #0]
 800d344:	3701      	adds	r7, #1
 800d346:	f1bb 0f00 	cmp.w	fp, #0
 800d34a:	d003      	beq.n	800d354 <_scanf_float+0x15c>
 800d34c:	3201      	adds	r2, #1
 800d34e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d352:	60a2      	str	r2, [r4, #8]
 800d354:	68a3      	ldr	r3, [r4, #8]
 800d356:	3b01      	subs	r3, #1
 800d358:	60a3      	str	r3, [r4, #8]
 800d35a:	6923      	ldr	r3, [r4, #16]
 800d35c:	3301      	adds	r3, #1
 800d35e:	6123      	str	r3, [r4, #16]
 800d360:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d364:	3b01      	subs	r3, #1
 800d366:	2b00      	cmp	r3, #0
 800d368:	f8c9 3004 	str.w	r3, [r9, #4]
 800d36c:	f340 8082 	ble.w	800d474 <_scanf_float+0x27c>
 800d370:	f8d9 3000 	ldr.w	r3, [r9]
 800d374:	3301      	adds	r3, #1
 800d376:	f8c9 3000 	str.w	r3, [r9]
 800d37a:	e762      	b.n	800d242 <_scanf_float+0x4a>
 800d37c:	eb1a 0105 	adds.w	r1, sl, r5
 800d380:	f47f af6d 	bne.w	800d25e <_scanf_float+0x66>
 800d384:	6822      	ldr	r2, [r4, #0]
 800d386:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d38a:	6022      	str	r2, [r4, #0]
 800d38c:	460d      	mov	r5, r1
 800d38e:	468a      	mov	sl, r1
 800d390:	f806 3b01 	strb.w	r3, [r6], #1
 800d394:	e7de      	b.n	800d354 <_scanf_float+0x15c>
 800d396:	6822      	ldr	r2, [r4, #0]
 800d398:	0610      	lsls	r0, r2, #24
 800d39a:	f57f af60 	bpl.w	800d25e <_scanf_float+0x66>
 800d39e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d3a2:	6022      	str	r2, [r4, #0]
 800d3a4:	e7f4      	b.n	800d390 <_scanf_float+0x198>
 800d3a6:	f1ba 0f00 	cmp.w	sl, #0
 800d3aa:	d10c      	bne.n	800d3c6 <_scanf_float+0x1ce>
 800d3ac:	b977      	cbnz	r7, 800d3cc <_scanf_float+0x1d4>
 800d3ae:	6822      	ldr	r2, [r4, #0]
 800d3b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d3b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d3b8:	d108      	bne.n	800d3cc <_scanf_float+0x1d4>
 800d3ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d3be:	6022      	str	r2, [r4, #0]
 800d3c0:	f04f 0a01 	mov.w	sl, #1
 800d3c4:	e7e4      	b.n	800d390 <_scanf_float+0x198>
 800d3c6:	f1ba 0f02 	cmp.w	sl, #2
 800d3ca:	d050      	beq.n	800d46e <_scanf_float+0x276>
 800d3cc:	2d01      	cmp	r5, #1
 800d3ce:	d002      	beq.n	800d3d6 <_scanf_float+0x1de>
 800d3d0:	2d04      	cmp	r5, #4
 800d3d2:	f47f af44 	bne.w	800d25e <_scanf_float+0x66>
 800d3d6:	3501      	adds	r5, #1
 800d3d8:	b2ed      	uxtb	r5, r5
 800d3da:	e7d9      	b.n	800d390 <_scanf_float+0x198>
 800d3dc:	f1ba 0f01 	cmp.w	sl, #1
 800d3e0:	f47f af3d 	bne.w	800d25e <_scanf_float+0x66>
 800d3e4:	f04f 0a02 	mov.w	sl, #2
 800d3e8:	e7d2      	b.n	800d390 <_scanf_float+0x198>
 800d3ea:	b975      	cbnz	r5, 800d40a <_scanf_float+0x212>
 800d3ec:	2f00      	cmp	r7, #0
 800d3ee:	f47f af37 	bne.w	800d260 <_scanf_float+0x68>
 800d3f2:	6822      	ldr	r2, [r4, #0]
 800d3f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d3f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d3fc:	f040 8103 	bne.w	800d606 <_scanf_float+0x40e>
 800d400:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d404:	6022      	str	r2, [r4, #0]
 800d406:	2501      	movs	r5, #1
 800d408:	e7c2      	b.n	800d390 <_scanf_float+0x198>
 800d40a:	2d03      	cmp	r5, #3
 800d40c:	d0e3      	beq.n	800d3d6 <_scanf_float+0x1de>
 800d40e:	2d05      	cmp	r5, #5
 800d410:	e7df      	b.n	800d3d2 <_scanf_float+0x1da>
 800d412:	2d02      	cmp	r5, #2
 800d414:	f47f af23 	bne.w	800d25e <_scanf_float+0x66>
 800d418:	2503      	movs	r5, #3
 800d41a:	e7b9      	b.n	800d390 <_scanf_float+0x198>
 800d41c:	2d06      	cmp	r5, #6
 800d41e:	f47f af1e 	bne.w	800d25e <_scanf_float+0x66>
 800d422:	2507      	movs	r5, #7
 800d424:	e7b4      	b.n	800d390 <_scanf_float+0x198>
 800d426:	6822      	ldr	r2, [r4, #0]
 800d428:	0591      	lsls	r1, r2, #22
 800d42a:	f57f af18 	bpl.w	800d25e <_scanf_float+0x66>
 800d42e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d432:	6022      	str	r2, [r4, #0]
 800d434:	9702      	str	r7, [sp, #8]
 800d436:	e7ab      	b.n	800d390 <_scanf_float+0x198>
 800d438:	6822      	ldr	r2, [r4, #0]
 800d43a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d43e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d442:	d005      	beq.n	800d450 <_scanf_float+0x258>
 800d444:	0550      	lsls	r0, r2, #21
 800d446:	f57f af0a 	bpl.w	800d25e <_scanf_float+0x66>
 800d44a:	2f00      	cmp	r7, #0
 800d44c:	f000 80db 	beq.w	800d606 <_scanf_float+0x40e>
 800d450:	0591      	lsls	r1, r2, #22
 800d452:	bf58      	it	pl
 800d454:	9902      	ldrpl	r1, [sp, #8]
 800d456:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d45a:	bf58      	it	pl
 800d45c:	1a79      	subpl	r1, r7, r1
 800d45e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d462:	bf58      	it	pl
 800d464:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d468:	6022      	str	r2, [r4, #0]
 800d46a:	2700      	movs	r7, #0
 800d46c:	e790      	b.n	800d390 <_scanf_float+0x198>
 800d46e:	f04f 0a03 	mov.w	sl, #3
 800d472:	e78d      	b.n	800d390 <_scanf_float+0x198>
 800d474:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d478:	4649      	mov	r1, r9
 800d47a:	4640      	mov	r0, r8
 800d47c:	4798      	blx	r3
 800d47e:	2800      	cmp	r0, #0
 800d480:	f43f aedf 	beq.w	800d242 <_scanf_float+0x4a>
 800d484:	e6eb      	b.n	800d25e <_scanf_float+0x66>
 800d486:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d48a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d48e:	464a      	mov	r2, r9
 800d490:	4640      	mov	r0, r8
 800d492:	4798      	blx	r3
 800d494:	6923      	ldr	r3, [r4, #16]
 800d496:	3b01      	subs	r3, #1
 800d498:	6123      	str	r3, [r4, #16]
 800d49a:	e6eb      	b.n	800d274 <_scanf_float+0x7c>
 800d49c:	1e6b      	subs	r3, r5, #1
 800d49e:	2b06      	cmp	r3, #6
 800d4a0:	d824      	bhi.n	800d4ec <_scanf_float+0x2f4>
 800d4a2:	2d02      	cmp	r5, #2
 800d4a4:	d836      	bhi.n	800d514 <_scanf_float+0x31c>
 800d4a6:	9b01      	ldr	r3, [sp, #4]
 800d4a8:	429e      	cmp	r6, r3
 800d4aa:	f67f aee7 	bls.w	800d27c <_scanf_float+0x84>
 800d4ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d4b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d4b6:	464a      	mov	r2, r9
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	4798      	blx	r3
 800d4bc:	6923      	ldr	r3, [r4, #16]
 800d4be:	3b01      	subs	r3, #1
 800d4c0:	6123      	str	r3, [r4, #16]
 800d4c2:	e7f0      	b.n	800d4a6 <_scanf_float+0x2ae>
 800d4c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d4c8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d4cc:	464a      	mov	r2, r9
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	4798      	blx	r3
 800d4d2:	6923      	ldr	r3, [r4, #16]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	6123      	str	r3, [r4, #16]
 800d4d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4dc:	fa5f fa8a 	uxtb.w	sl, sl
 800d4e0:	f1ba 0f02 	cmp.w	sl, #2
 800d4e4:	d1ee      	bne.n	800d4c4 <_scanf_float+0x2cc>
 800d4e6:	3d03      	subs	r5, #3
 800d4e8:	b2ed      	uxtb	r5, r5
 800d4ea:	1b76      	subs	r6, r6, r5
 800d4ec:	6823      	ldr	r3, [r4, #0]
 800d4ee:	05da      	lsls	r2, r3, #23
 800d4f0:	d530      	bpl.n	800d554 <_scanf_float+0x35c>
 800d4f2:	055b      	lsls	r3, r3, #21
 800d4f4:	d511      	bpl.n	800d51a <_scanf_float+0x322>
 800d4f6:	9b01      	ldr	r3, [sp, #4]
 800d4f8:	429e      	cmp	r6, r3
 800d4fa:	f67f aebf 	bls.w	800d27c <_scanf_float+0x84>
 800d4fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d502:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d506:	464a      	mov	r2, r9
 800d508:	4640      	mov	r0, r8
 800d50a:	4798      	blx	r3
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	3b01      	subs	r3, #1
 800d510:	6123      	str	r3, [r4, #16]
 800d512:	e7f0      	b.n	800d4f6 <_scanf_float+0x2fe>
 800d514:	46aa      	mov	sl, r5
 800d516:	46b3      	mov	fp, r6
 800d518:	e7de      	b.n	800d4d8 <_scanf_float+0x2e0>
 800d51a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d51e:	6923      	ldr	r3, [r4, #16]
 800d520:	2965      	cmp	r1, #101	@ 0x65
 800d522:	f103 33ff 	add.w	r3, r3, #4294967295
 800d526:	f106 35ff 	add.w	r5, r6, #4294967295
 800d52a:	6123      	str	r3, [r4, #16]
 800d52c:	d00c      	beq.n	800d548 <_scanf_float+0x350>
 800d52e:	2945      	cmp	r1, #69	@ 0x45
 800d530:	d00a      	beq.n	800d548 <_scanf_float+0x350>
 800d532:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d536:	464a      	mov	r2, r9
 800d538:	4640      	mov	r0, r8
 800d53a:	4798      	blx	r3
 800d53c:	6923      	ldr	r3, [r4, #16]
 800d53e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d542:	3b01      	subs	r3, #1
 800d544:	1eb5      	subs	r5, r6, #2
 800d546:	6123      	str	r3, [r4, #16]
 800d548:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d54c:	464a      	mov	r2, r9
 800d54e:	4640      	mov	r0, r8
 800d550:	4798      	blx	r3
 800d552:	462e      	mov	r6, r5
 800d554:	6822      	ldr	r2, [r4, #0]
 800d556:	f012 0210 	ands.w	r2, r2, #16
 800d55a:	d001      	beq.n	800d560 <_scanf_float+0x368>
 800d55c:	2000      	movs	r0, #0
 800d55e:	e68e      	b.n	800d27e <_scanf_float+0x86>
 800d560:	7032      	strb	r2, [r6, #0]
 800d562:	6823      	ldr	r3, [r4, #0]
 800d564:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d56c:	d125      	bne.n	800d5ba <_scanf_float+0x3c2>
 800d56e:	9b02      	ldr	r3, [sp, #8]
 800d570:	429f      	cmp	r7, r3
 800d572:	d00a      	beq.n	800d58a <_scanf_float+0x392>
 800d574:	1bda      	subs	r2, r3, r7
 800d576:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d57a:	429e      	cmp	r6, r3
 800d57c:	bf28      	it	cs
 800d57e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d582:	4922      	ldr	r1, [pc, #136]	@ (800d60c <_scanf_float+0x414>)
 800d584:	4630      	mov	r0, r6
 800d586:	f000 f907 	bl	800d798 <siprintf>
 800d58a:	9901      	ldr	r1, [sp, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	4640      	mov	r0, r8
 800d590:	f002 fc02 	bl	800fd98 <_strtod_r>
 800d594:	9b03      	ldr	r3, [sp, #12]
 800d596:	6821      	ldr	r1, [r4, #0]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f011 0f02 	tst.w	r1, #2
 800d59e:	ec57 6b10 	vmov	r6, r7, d0
 800d5a2:	f103 0204 	add.w	r2, r3, #4
 800d5a6:	d015      	beq.n	800d5d4 <_scanf_float+0x3dc>
 800d5a8:	9903      	ldr	r1, [sp, #12]
 800d5aa:	600a      	str	r2, [r1, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	e9c3 6700 	strd	r6, r7, [r3]
 800d5b2:	68e3      	ldr	r3, [r4, #12]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	60e3      	str	r3, [r4, #12]
 800d5b8:	e7d0      	b.n	800d55c <_scanf_float+0x364>
 800d5ba:	9b04      	ldr	r3, [sp, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d0e4      	beq.n	800d58a <_scanf_float+0x392>
 800d5c0:	9905      	ldr	r1, [sp, #20]
 800d5c2:	230a      	movs	r3, #10
 800d5c4:	3101      	adds	r1, #1
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	f002 fc66 	bl	800fe98 <_strtol_r>
 800d5cc:	9b04      	ldr	r3, [sp, #16]
 800d5ce:	9e05      	ldr	r6, [sp, #20]
 800d5d0:	1ac2      	subs	r2, r0, r3
 800d5d2:	e7d0      	b.n	800d576 <_scanf_float+0x37e>
 800d5d4:	f011 0f04 	tst.w	r1, #4
 800d5d8:	9903      	ldr	r1, [sp, #12]
 800d5da:	600a      	str	r2, [r1, #0]
 800d5dc:	d1e6      	bne.n	800d5ac <_scanf_float+0x3b4>
 800d5de:	681d      	ldr	r5, [r3, #0]
 800d5e0:	4632      	mov	r2, r6
 800d5e2:	463b      	mov	r3, r7
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	4639      	mov	r1, r7
 800d5e8:	f7f3 fac8 	bl	8000b7c <__aeabi_dcmpun>
 800d5ec:	b128      	cbz	r0, 800d5fa <_scanf_float+0x402>
 800d5ee:	4808      	ldr	r0, [pc, #32]	@ (800d610 <_scanf_float+0x418>)
 800d5f0:	f000 f9c6 	bl	800d980 <nanf>
 800d5f4:	ed85 0a00 	vstr	s0, [r5]
 800d5f8:	e7db      	b.n	800d5b2 <_scanf_float+0x3ba>
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	4639      	mov	r1, r7
 800d5fe:	f7f3 fb1b 	bl	8000c38 <__aeabi_d2f>
 800d602:	6028      	str	r0, [r5, #0]
 800d604:	e7d5      	b.n	800d5b2 <_scanf_float+0x3ba>
 800d606:	2700      	movs	r7, #0
 800d608:	e62e      	b.n	800d268 <_scanf_float+0x70>
 800d60a:	bf00      	nop
 800d60c:	08011be4 	.word	0x08011be4
 800d610:	08011d25 	.word	0x08011d25

0800d614 <std>:
 800d614:	2300      	movs	r3, #0
 800d616:	b510      	push	{r4, lr}
 800d618:	4604      	mov	r4, r0
 800d61a:	e9c0 3300 	strd	r3, r3, [r0]
 800d61e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d622:	6083      	str	r3, [r0, #8]
 800d624:	8181      	strh	r1, [r0, #12]
 800d626:	6643      	str	r3, [r0, #100]	@ 0x64
 800d628:	81c2      	strh	r2, [r0, #14]
 800d62a:	6183      	str	r3, [r0, #24]
 800d62c:	4619      	mov	r1, r3
 800d62e:	2208      	movs	r2, #8
 800d630:	305c      	adds	r0, #92	@ 0x5c
 800d632:	f000 f916 	bl	800d862 <memset>
 800d636:	4b0d      	ldr	r3, [pc, #52]	@ (800d66c <std+0x58>)
 800d638:	6263      	str	r3, [r4, #36]	@ 0x24
 800d63a:	4b0d      	ldr	r3, [pc, #52]	@ (800d670 <std+0x5c>)
 800d63c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d63e:	4b0d      	ldr	r3, [pc, #52]	@ (800d674 <std+0x60>)
 800d640:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d642:	4b0d      	ldr	r3, [pc, #52]	@ (800d678 <std+0x64>)
 800d644:	6323      	str	r3, [r4, #48]	@ 0x30
 800d646:	4b0d      	ldr	r3, [pc, #52]	@ (800d67c <std+0x68>)
 800d648:	6224      	str	r4, [r4, #32]
 800d64a:	429c      	cmp	r4, r3
 800d64c:	d006      	beq.n	800d65c <std+0x48>
 800d64e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d652:	4294      	cmp	r4, r2
 800d654:	d002      	beq.n	800d65c <std+0x48>
 800d656:	33d0      	adds	r3, #208	@ 0xd0
 800d658:	429c      	cmp	r4, r3
 800d65a:	d105      	bne.n	800d668 <std+0x54>
 800d65c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d664:	f000 b97a 	b.w	800d95c <__retarget_lock_init_recursive>
 800d668:	bd10      	pop	{r4, pc}
 800d66a:	bf00      	nop
 800d66c:	0800d7dd 	.word	0x0800d7dd
 800d670:	0800d7ff 	.word	0x0800d7ff
 800d674:	0800d837 	.word	0x0800d837
 800d678:	0800d85b 	.word	0x0800d85b
 800d67c:	20003140 	.word	0x20003140

0800d680 <stdio_exit_handler>:
 800d680:	4a02      	ldr	r2, [pc, #8]	@ (800d68c <stdio_exit_handler+0xc>)
 800d682:	4903      	ldr	r1, [pc, #12]	@ (800d690 <stdio_exit_handler+0x10>)
 800d684:	4803      	ldr	r0, [pc, #12]	@ (800d694 <stdio_exit_handler+0x14>)
 800d686:	f000 b869 	b.w	800d75c <_fwalk_sglue>
 800d68a:	bf00      	nop
 800d68c:	20000030 	.word	0x20000030
 800d690:	08010255 	.word	0x08010255
 800d694:	20000040 	.word	0x20000040

0800d698 <cleanup_stdio>:
 800d698:	6841      	ldr	r1, [r0, #4]
 800d69a:	4b0c      	ldr	r3, [pc, #48]	@ (800d6cc <cleanup_stdio+0x34>)
 800d69c:	4299      	cmp	r1, r3
 800d69e:	b510      	push	{r4, lr}
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	d001      	beq.n	800d6a8 <cleanup_stdio+0x10>
 800d6a4:	f002 fdd6 	bl	8010254 <_fflush_r>
 800d6a8:	68a1      	ldr	r1, [r4, #8]
 800d6aa:	4b09      	ldr	r3, [pc, #36]	@ (800d6d0 <cleanup_stdio+0x38>)
 800d6ac:	4299      	cmp	r1, r3
 800d6ae:	d002      	beq.n	800d6b6 <cleanup_stdio+0x1e>
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f002 fdcf 	bl	8010254 <_fflush_r>
 800d6b6:	68e1      	ldr	r1, [r4, #12]
 800d6b8:	4b06      	ldr	r3, [pc, #24]	@ (800d6d4 <cleanup_stdio+0x3c>)
 800d6ba:	4299      	cmp	r1, r3
 800d6bc:	d004      	beq.n	800d6c8 <cleanup_stdio+0x30>
 800d6be:	4620      	mov	r0, r4
 800d6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6c4:	f002 bdc6 	b.w	8010254 <_fflush_r>
 800d6c8:	bd10      	pop	{r4, pc}
 800d6ca:	bf00      	nop
 800d6cc:	20003140 	.word	0x20003140
 800d6d0:	200031a8 	.word	0x200031a8
 800d6d4:	20003210 	.word	0x20003210

0800d6d8 <global_stdio_init.part.0>:
 800d6d8:	b510      	push	{r4, lr}
 800d6da:	4b0b      	ldr	r3, [pc, #44]	@ (800d708 <global_stdio_init.part.0+0x30>)
 800d6dc:	4c0b      	ldr	r4, [pc, #44]	@ (800d70c <global_stdio_init.part.0+0x34>)
 800d6de:	4a0c      	ldr	r2, [pc, #48]	@ (800d710 <global_stdio_init.part.0+0x38>)
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	2104      	movs	r1, #4
 800d6e8:	f7ff ff94 	bl	800d614 <std>
 800d6ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	2109      	movs	r1, #9
 800d6f4:	f7ff ff8e 	bl	800d614 <std>
 800d6f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d702:	2112      	movs	r1, #18
 800d704:	f7ff bf86 	b.w	800d614 <std>
 800d708:	20003278 	.word	0x20003278
 800d70c:	20003140 	.word	0x20003140
 800d710:	0800d681 	.word	0x0800d681

0800d714 <__sfp_lock_acquire>:
 800d714:	4801      	ldr	r0, [pc, #4]	@ (800d71c <__sfp_lock_acquire+0x8>)
 800d716:	f000 b922 	b.w	800d95e <__retarget_lock_acquire_recursive>
 800d71a:	bf00      	nop
 800d71c:	20003281 	.word	0x20003281

0800d720 <__sfp_lock_release>:
 800d720:	4801      	ldr	r0, [pc, #4]	@ (800d728 <__sfp_lock_release+0x8>)
 800d722:	f000 b91d 	b.w	800d960 <__retarget_lock_release_recursive>
 800d726:	bf00      	nop
 800d728:	20003281 	.word	0x20003281

0800d72c <__sinit>:
 800d72c:	b510      	push	{r4, lr}
 800d72e:	4604      	mov	r4, r0
 800d730:	f7ff fff0 	bl	800d714 <__sfp_lock_acquire>
 800d734:	6a23      	ldr	r3, [r4, #32]
 800d736:	b11b      	cbz	r3, 800d740 <__sinit+0x14>
 800d738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d73c:	f7ff bff0 	b.w	800d720 <__sfp_lock_release>
 800d740:	4b04      	ldr	r3, [pc, #16]	@ (800d754 <__sinit+0x28>)
 800d742:	6223      	str	r3, [r4, #32]
 800d744:	4b04      	ldr	r3, [pc, #16]	@ (800d758 <__sinit+0x2c>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1f5      	bne.n	800d738 <__sinit+0xc>
 800d74c:	f7ff ffc4 	bl	800d6d8 <global_stdio_init.part.0>
 800d750:	e7f2      	b.n	800d738 <__sinit+0xc>
 800d752:	bf00      	nop
 800d754:	0800d699 	.word	0x0800d699
 800d758:	20003278 	.word	0x20003278

0800d75c <_fwalk_sglue>:
 800d75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d760:	4607      	mov	r7, r0
 800d762:	4688      	mov	r8, r1
 800d764:	4614      	mov	r4, r2
 800d766:	2600      	movs	r6, #0
 800d768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d76c:	f1b9 0901 	subs.w	r9, r9, #1
 800d770:	d505      	bpl.n	800d77e <_fwalk_sglue+0x22>
 800d772:	6824      	ldr	r4, [r4, #0]
 800d774:	2c00      	cmp	r4, #0
 800d776:	d1f7      	bne.n	800d768 <_fwalk_sglue+0xc>
 800d778:	4630      	mov	r0, r6
 800d77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d77e:	89ab      	ldrh	r3, [r5, #12]
 800d780:	2b01      	cmp	r3, #1
 800d782:	d907      	bls.n	800d794 <_fwalk_sglue+0x38>
 800d784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d788:	3301      	adds	r3, #1
 800d78a:	d003      	beq.n	800d794 <_fwalk_sglue+0x38>
 800d78c:	4629      	mov	r1, r5
 800d78e:	4638      	mov	r0, r7
 800d790:	47c0      	blx	r8
 800d792:	4306      	orrs	r6, r0
 800d794:	3568      	adds	r5, #104	@ 0x68
 800d796:	e7e9      	b.n	800d76c <_fwalk_sglue+0x10>

0800d798 <siprintf>:
 800d798:	b40e      	push	{r1, r2, r3}
 800d79a:	b510      	push	{r4, lr}
 800d79c:	b09d      	sub	sp, #116	@ 0x74
 800d79e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d7a0:	9002      	str	r0, [sp, #8]
 800d7a2:	9006      	str	r0, [sp, #24]
 800d7a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d7a8:	480a      	ldr	r0, [pc, #40]	@ (800d7d4 <siprintf+0x3c>)
 800d7aa:	9107      	str	r1, [sp, #28]
 800d7ac:	9104      	str	r1, [sp, #16]
 800d7ae:	490a      	ldr	r1, [pc, #40]	@ (800d7d8 <siprintf+0x40>)
 800d7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7b4:	9105      	str	r1, [sp, #20]
 800d7b6:	2400      	movs	r4, #0
 800d7b8:	a902      	add	r1, sp, #8
 800d7ba:	6800      	ldr	r0, [r0, #0]
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d7c0:	f002 fbc8 	bl	800ff54 <_svfiprintf_r>
 800d7c4:	9b02      	ldr	r3, [sp, #8]
 800d7c6:	701c      	strb	r4, [r3, #0]
 800d7c8:	b01d      	add	sp, #116	@ 0x74
 800d7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ce:	b003      	add	sp, #12
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	2000003c 	.word	0x2000003c
 800d7d8:	ffff0208 	.word	0xffff0208

0800d7dc <__sread>:
 800d7dc:	b510      	push	{r4, lr}
 800d7de:	460c      	mov	r4, r1
 800d7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e4:	f000 f86c 	bl	800d8c0 <_read_r>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	bfab      	itete	ge
 800d7ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d7ee:	89a3      	ldrhlt	r3, [r4, #12]
 800d7f0:	181b      	addge	r3, r3, r0
 800d7f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d7f6:	bfac      	ite	ge
 800d7f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d7fa:	81a3      	strhlt	r3, [r4, #12]
 800d7fc:	bd10      	pop	{r4, pc}

0800d7fe <__swrite>:
 800d7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d802:	461f      	mov	r7, r3
 800d804:	898b      	ldrh	r3, [r1, #12]
 800d806:	05db      	lsls	r3, r3, #23
 800d808:	4605      	mov	r5, r0
 800d80a:	460c      	mov	r4, r1
 800d80c:	4616      	mov	r6, r2
 800d80e:	d505      	bpl.n	800d81c <__swrite+0x1e>
 800d810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d814:	2302      	movs	r3, #2
 800d816:	2200      	movs	r2, #0
 800d818:	f000 f840 	bl	800d89c <_lseek_r>
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d826:	81a3      	strh	r3, [r4, #12]
 800d828:	4632      	mov	r2, r6
 800d82a:	463b      	mov	r3, r7
 800d82c:	4628      	mov	r0, r5
 800d82e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d832:	f000 b857 	b.w	800d8e4 <_write_r>

0800d836 <__sseek>:
 800d836:	b510      	push	{r4, lr}
 800d838:	460c      	mov	r4, r1
 800d83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d83e:	f000 f82d 	bl	800d89c <_lseek_r>
 800d842:	1c43      	adds	r3, r0, #1
 800d844:	89a3      	ldrh	r3, [r4, #12]
 800d846:	bf15      	itete	ne
 800d848:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d84a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d84e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d852:	81a3      	strheq	r3, [r4, #12]
 800d854:	bf18      	it	ne
 800d856:	81a3      	strhne	r3, [r4, #12]
 800d858:	bd10      	pop	{r4, pc}

0800d85a <__sclose>:
 800d85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d85e:	f000 b80d 	b.w	800d87c <_close_r>

0800d862 <memset>:
 800d862:	4402      	add	r2, r0
 800d864:	4603      	mov	r3, r0
 800d866:	4293      	cmp	r3, r2
 800d868:	d100      	bne.n	800d86c <memset+0xa>
 800d86a:	4770      	bx	lr
 800d86c:	f803 1b01 	strb.w	r1, [r3], #1
 800d870:	e7f9      	b.n	800d866 <memset+0x4>
	...

0800d874 <_localeconv_r>:
 800d874:	4800      	ldr	r0, [pc, #0]	@ (800d878 <_localeconv_r+0x4>)
 800d876:	4770      	bx	lr
 800d878:	2000017c 	.word	0x2000017c

0800d87c <_close_r>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	4d06      	ldr	r5, [pc, #24]	@ (800d898 <_close_r+0x1c>)
 800d880:	2300      	movs	r3, #0
 800d882:	4604      	mov	r4, r0
 800d884:	4608      	mov	r0, r1
 800d886:	602b      	str	r3, [r5, #0]
 800d888:	f7f4 fe32 	bl	80024f0 <_close>
 800d88c:	1c43      	adds	r3, r0, #1
 800d88e:	d102      	bne.n	800d896 <_close_r+0x1a>
 800d890:	682b      	ldr	r3, [r5, #0]
 800d892:	b103      	cbz	r3, 800d896 <_close_r+0x1a>
 800d894:	6023      	str	r3, [r4, #0]
 800d896:	bd38      	pop	{r3, r4, r5, pc}
 800d898:	2000327c 	.word	0x2000327c

0800d89c <_lseek_r>:
 800d89c:	b538      	push	{r3, r4, r5, lr}
 800d89e:	4d07      	ldr	r5, [pc, #28]	@ (800d8bc <_lseek_r+0x20>)
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	4608      	mov	r0, r1
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	602a      	str	r2, [r5, #0]
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	f7f4 fe47 	bl	800253e <_lseek>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d102      	bne.n	800d8ba <_lseek_r+0x1e>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	b103      	cbz	r3, 800d8ba <_lseek_r+0x1e>
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	2000327c 	.word	0x2000327c

0800d8c0 <_read_r>:
 800d8c0:	b538      	push	{r3, r4, r5, lr}
 800d8c2:	4d07      	ldr	r5, [pc, #28]	@ (800d8e0 <_read_r+0x20>)
 800d8c4:	4604      	mov	r4, r0
 800d8c6:	4608      	mov	r0, r1
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	602a      	str	r2, [r5, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	f7f4 fdd5 	bl	800247e <_read>
 800d8d4:	1c43      	adds	r3, r0, #1
 800d8d6:	d102      	bne.n	800d8de <_read_r+0x1e>
 800d8d8:	682b      	ldr	r3, [r5, #0]
 800d8da:	b103      	cbz	r3, 800d8de <_read_r+0x1e>
 800d8dc:	6023      	str	r3, [r4, #0]
 800d8de:	bd38      	pop	{r3, r4, r5, pc}
 800d8e0:	2000327c 	.word	0x2000327c

0800d8e4 <_write_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	4d07      	ldr	r5, [pc, #28]	@ (800d904 <_write_r+0x20>)
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	4608      	mov	r0, r1
 800d8ec:	4611      	mov	r1, r2
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	602a      	str	r2, [r5, #0]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	f7f4 fde0 	bl	80024b8 <_write>
 800d8f8:	1c43      	adds	r3, r0, #1
 800d8fa:	d102      	bne.n	800d902 <_write_r+0x1e>
 800d8fc:	682b      	ldr	r3, [r5, #0]
 800d8fe:	b103      	cbz	r3, 800d902 <_write_r+0x1e>
 800d900:	6023      	str	r3, [r4, #0]
 800d902:	bd38      	pop	{r3, r4, r5, pc}
 800d904:	2000327c 	.word	0x2000327c

0800d908 <__errno>:
 800d908:	4b01      	ldr	r3, [pc, #4]	@ (800d910 <__errno+0x8>)
 800d90a:	6818      	ldr	r0, [r3, #0]
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	2000003c 	.word	0x2000003c

0800d914 <__libc_init_array>:
 800d914:	b570      	push	{r4, r5, r6, lr}
 800d916:	4d0d      	ldr	r5, [pc, #52]	@ (800d94c <__libc_init_array+0x38>)
 800d918:	4c0d      	ldr	r4, [pc, #52]	@ (800d950 <__libc_init_array+0x3c>)
 800d91a:	1b64      	subs	r4, r4, r5
 800d91c:	10a4      	asrs	r4, r4, #2
 800d91e:	2600      	movs	r6, #0
 800d920:	42a6      	cmp	r6, r4
 800d922:	d109      	bne.n	800d938 <__libc_init_array+0x24>
 800d924:	4d0b      	ldr	r5, [pc, #44]	@ (800d954 <__libc_init_array+0x40>)
 800d926:	4c0c      	ldr	r4, [pc, #48]	@ (800d958 <__libc_init_array+0x44>)
 800d928:	f004 f8a6 	bl	8011a78 <_init>
 800d92c:	1b64      	subs	r4, r4, r5
 800d92e:	10a4      	asrs	r4, r4, #2
 800d930:	2600      	movs	r6, #0
 800d932:	42a6      	cmp	r6, r4
 800d934:	d105      	bne.n	800d942 <__libc_init_array+0x2e>
 800d936:	bd70      	pop	{r4, r5, r6, pc}
 800d938:	f855 3b04 	ldr.w	r3, [r5], #4
 800d93c:	4798      	blx	r3
 800d93e:	3601      	adds	r6, #1
 800d940:	e7ee      	b.n	800d920 <__libc_init_array+0xc>
 800d942:	f855 3b04 	ldr.w	r3, [r5], #4
 800d946:	4798      	blx	r3
 800d948:	3601      	adds	r6, #1
 800d94a:	e7f2      	b.n	800d932 <__libc_init_array+0x1e>
 800d94c:	080123b4 	.word	0x080123b4
 800d950:	080123b4 	.word	0x080123b4
 800d954:	080123b4 	.word	0x080123b4
 800d958:	080123b8 	.word	0x080123b8

0800d95c <__retarget_lock_init_recursive>:
 800d95c:	4770      	bx	lr

0800d95e <__retarget_lock_acquire_recursive>:
 800d95e:	4770      	bx	lr

0800d960 <__retarget_lock_release_recursive>:
 800d960:	4770      	bx	lr

0800d962 <memcpy>:
 800d962:	440a      	add	r2, r1
 800d964:	4291      	cmp	r1, r2
 800d966:	f100 33ff 	add.w	r3, r0, #4294967295
 800d96a:	d100      	bne.n	800d96e <memcpy+0xc>
 800d96c:	4770      	bx	lr
 800d96e:	b510      	push	{r4, lr}
 800d970:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d974:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d978:	4291      	cmp	r1, r2
 800d97a:	d1f9      	bne.n	800d970 <memcpy+0xe>
 800d97c:	bd10      	pop	{r4, pc}
	...

0800d980 <nanf>:
 800d980:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d988 <nanf+0x8>
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	7fc00000 	.word	0x7fc00000

0800d98c <quorem>:
 800d98c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d990:	6903      	ldr	r3, [r0, #16]
 800d992:	690c      	ldr	r4, [r1, #16]
 800d994:	42a3      	cmp	r3, r4
 800d996:	4607      	mov	r7, r0
 800d998:	db7e      	blt.n	800da98 <quorem+0x10c>
 800d99a:	3c01      	subs	r4, #1
 800d99c:	f101 0814 	add.w	r8, r1, #20
 800d9a0:	00a3      	lsls	r3, r4, #2
 800d9a2:	f100 0514 	add.w	r5, r0, #20
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d9b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d9be:	fbb2 f6f3 	udiv	r6, r2, r3
 800d9c2:	d32e      	bcc.n	800da22 <quorem+0x96>
 800d9c4:	f04f 0a00 	mov.w	sl, #0
 800d9c8:	46c4      	mov	ip, r8
 800d9ca:	46ae      	mov	lr, r5
 800d9cc:	46d3      	mov	fp, sl
 800d9ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9d2:	b298      	uxth	r0, r3
 800d9d4:	fb06 a000 	mla	r0, r6, r0, sl
 800d9d8:	0c02      	lsrs	r2, r0, #16
 800d9da:	0c1b      	lsrs	r3, r3, #16
 800d9dc:	fb06 2303 	mla	r3, r6, r3, r2
 800d9e0:	f8de 2000 	ldr.w	r2, [lr]
 800d9e4:	b280      	uxth	r0, r0
 800d9e6:	b292      	uxth	r2, r2
 800d9e8:	1a12      	subs	r2, r2, r0
 800d9ea:	445a      	add	r2, fp
 800d9ec:	f8de 0000 	ldr.w	r0, [lr]
 800d9f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d9fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d9fe:	b292      	uxth	r2, r2
 800da00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800da04:	45e1      	cmp	r9, ip
 800da06:	f84e 2b04 	str.w	r2, [lr], #4
 800da0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800da0e:	d2de      	bcs.n	800d9ce <quorem+0x42>
 800da10:	9b00      	ldr	r3, [sp, #0]
 800da12:	58eb      	ldr	r3, [r5, r3]
 800da14:	b92b      	cbnz	r3, 800da22 <quorem+0x96>
 800da16:	9b01      	ldr	r3, [sp, #4]
 800da18:	3b04      	subs	r3, #4
 800da1a:	429d      	cmp	r5, r3
 800da1c:	461a      	mov	r2, r3
 800da1e:	d32f      	bcc.n	800da80 <quorem+0xf4>
 800da20:	613c      	str	r4, [r7, #16]
 800da22:	4638      	mov	r0, r7
 800da24:	f001 f9c8 	bl	800edb8 <__mcmp>
 800da28:	2800      	cmp	r0, #0
 800da2a:	db25      	blt.n	800da78 <quorem+0xec>
 800da2c:	4629      	mov	r1, r5
 800da2e:	2000      	movs	r0, #0
 800da30:	f858 2b04 	ldr.w	r2, [r8], #4
 800da34:	f8d1 c000 	ldr.w	ip, [r1]
 800da38:	fa1f fe82 	uxth.w	lr, r2
 800da3c:	fa1f f38c 	uxth.w	r3, ip
 800da40:	eba3 030e 	sub.w	r3, r3, lr
 800da44:	4403      	add	r3, r0
 800da46:	0c12      	lsrs	r2, r2, #16
 800da48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800da4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800da50:	b29b      	uxth	r3, r3
 800da52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da56:	45c1      	cmp	r9, r8
 800da58:	f841 3b04 	str.w	r3, [r1], #4
 800da5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800da60:	d2e6      	bcs.n	800da30 <quorem+0xa4>
 800da62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da6a:	b922      	cbnz	r2, 800da76 <quorem+0xea>
 800da6c:	3b04      	subs	r3, #4
 800da6e:	429d      	cmp	r5, r3
 800da70:	461a      	mov	r2, r3
 800da72:	d30b      	bcc.n	800da8c <quorem+0x100>
 800da74:	613c      	str	r4, [r7, #16]
 800da76:	3601      	adds	r6, #1
 800da78:	4630      	mov	r0, r6
 800da7a:	b003      	add	sp, #12
 800da7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da80:	6812      	ldr	r2, [r2, #0]
 800da82:	3b04      	subs	r3, #4
 800da84:	2a00      	cmp	r2, #0
 800da86:	d1cb      	bne.n	800da20 <quorem+0x94>
 800da88:	3c01      	subs	r4, #1
 800da8a:	e7c6      	b.n	800da1a <quorem+0x8e>
 800da8c:	6812      	ldr	r2, [r2, #0]
 800da8e:	3b04      	subs	r3, #4
 800da90:	2a00      	cmp	r2, #0
 800da92:	d1ef      	bne.n	800da74 <quorem+0xe8>
 800da94:	3c01      	subs	r4, #1
 800da96:	e7ea      	b.n	800da6e <quorem+0xe2>
 800da98:	2000      	movs	r0, #0
 800da9a:	e7ee      	b.n	800da7a <quorem+0xee>
 800da9c:	0000      	movs	r0, r0
	...

0800daa0 <_dtoa_r>:
 800daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa4:	69c7      	ldr	r7, [r0, #28]
 800daa6:	b097      	sub	sp, #92	@ 0x5c
 800daa8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800daac:	ec55 4b10 	vmov	r4, r5, d0
 800dab0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dab2:	9107      	str	r1, [sp, #28]
 800dab4:	4681      	mov	r9, r0
 800dab6:	920c      	str	r2, [sp, #48]	@ 0x30
 800dab8:	9311      	str	r3, [sp, #68]	@ 0x44
 800daba:	b97f      	cbnz	r7, 800dadc <_dtoa_r+0x3c>
 800dabc:	2010      	movs	r0, #16
 800dabe:	f000 fe09 	bl	800e6d4 <malloc>
 800dac2:	4602      	mov	r2, r0
 800dac4:	f8c9 001c 	str.w	r0, [r9, #28]
 800dac8:	b920      	cbnz	r0, 800dad4 <_dtoa_r+0x34>
 800daca:	4ba9      	ldr	r3, [pc, #676]	@ (800dd70 <_dtoa_r+0x2d0>)
 800dacc:	21ef      	movs	r1, #239	@ 0xef
 800dace:	48a9      	ldr	r0, [pc, #676]	@ (800dd74 <_dtoa_r+0x2d4>)
 800dad0:	f002 fc2e 	bl	8010330 <__assert_func>
 800dad4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dad8:	6007      	str	r7, [r0, #0]
 800dada:	60c7      	str	r7, [r0, #12]
 800dadc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dae0:	6819      	ldr	r1, [r3, #0]
 800dae2:	b159      	cbz	r1, 800dafc <_dtoa_r+0x5c>
 800dae4:	685a      	ldr	r2, [r3, #4]
 800dae6:	604a      	str	r2, [r1, #4]
 800dae8:	2301      	movs	r3, #1
 800daea:	4093      	lsls	r3, r2
 800daec:	608b      	str	r3, [r1, #8]
 800daee:	4648      	mov	r0, r9
 800daf0:	f000 fee6 	bl	800e8c0 <_Bfree>
 800daf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]
 800dafc:	1e2b      	subs	r3, r5, #0
 800dafe:	bfb9      	ittee	lt
 800db00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800db04:	9305      	strlt	r3, [sp, #20]
 800db06:	2300      	movge	r3, #0
 800db08:	6033      	strge	r3, [r6, #0]
 800db0a:	9f05      	ldr	r7, [sp, #20]
 800db0c:	4b9a      	ldr	r3, [pc, #616]	@ (800dd78 <_dtoa_r+0x2d8>)
 800db0e:	bfbc      	itt	lt
 800db10:	2201      	movlt	r2, #1
 800db12:	6032      	strlt	r2, [r6, #0]
 800db14:	43bb      	bics	r3, r7
 800db16:	d112      	bne.n	800db3e <_dtoa_r+0x9e>
 800db18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800db1e:	6013      	str	r3, [r2, #0]
 800db20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db24:	4323      	orrs	r3, r4
 800db26:	f000 855a 	beq.w	800e5de <_dtoa_r+0xb3e>
 800db2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800db2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800dd8c <_dtoa_r+0x2ec>
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 855c 	beq.w	800e5ee <_dtoa_r+0xb4e>
 800db36:	f10a 0303 	add.w	r3, sl, #3
 800db3a:	f000 bd56 	b.w	800e5ea <_dtoa_r+0xb4a>
 800db3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800db42:	2200      	movs	r2, #0
 800db44:	ec51 0b17 	vmov	r0, r1, d7
 800db48:	2300      	movs	r3, #0
 800db4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800db4e:	f7f2 ffe3 	bl	8000b18 <__aeabi_dcmpeq>
 800db52:	4680      	mov	r8, r0
 800db54:	b158      	cbz	r0, 800db6e <_dtoa_r+0xce>
 800db56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800db58:	2301      	movs	r3, #1
 800db5a:	6013      	str	r3, [r2, #0]
 800db5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800db5e:	b113      	cbz	r3, 800db66 <_dtoa_r+0xc6>
 800db60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800db62:	4b86      	ldr	r3, [pc, #536]	@ (800dd7c <_dtoa_r+0x2dc>)
 800db64:	6013      	str	r3, [r2, #0]
 800db66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800dd90 <_dtoa_r+0x2f0>
 800db6a:	f000 bd40 	b.w	800e5ee <_dtoa_r+0xb4e>
 800db6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800db72:	aa14      	add	r2, sp, #80	@ 0x50
 800db74:	a915      	add	r1, sp, #84	@ 0x54
 800db76:	4648      	mov	r0, r9
 800db78:	f001 fa3e 	bl	800eff8 <__d2b>
 800db7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800db80:	9002      	str	r0, [sp, #8]
 800db82:	2e00      	cmp	r6, #0
 800db84:	d078      	beq.n	800dc78 <_dtoa_r+0x1d8>
 800db86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800db8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800db94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800db98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800db9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dba0:	4619      	mov	r1, r3
 800dba2:	2200      	movs	r2, #0
 800dba4:	4b76      	ldr	r3, [pc, #472]	@ (800dd80 <_dtoa_r+0x2e0>)
 800dba6:	f7f2 fb97 	bl	80002d8 <__aeabi_dsub>
 800dbaa:	a36b      	add	r3, pc, #428	@ (adr r3, 800dd58 <_dtoa_r+0x2b8>)
 800dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb0:	f7f2 fd4a 	bl	8000648 <__aeabi_dmul>
 800dbb4:	a36a      	add	r3, pc, #424	@ (adr r3, 800dd60 <_dtoa_r+0x2c0>)
 800dbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbba:	f7f2 fb8f 	bl	80002dc <__adddf3>
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	460d      	mov	r5, r1
 800dbc4:	f7f2 fcd6 	bl	8000574 <__aeabi_i2d>
 800dbc8:	a367      	add	r3, pc, #412	@ (adr r3, 800dd68 <_dtoa_r+0x2c8>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	f7f2 fd3b 	bl	8000648 <__aeabi_dmul>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	4629      	mov	r1, r5
 800dbda:	f7f2 fb7f 	bl	80002dc <__adddf3>
 800dbde:	4604      	mov	r4, r0
 800dbe0:	460d      	mov	r5, r1
 800dbe2:	f7f2 ffe1 	bl	8000ba8 <__aeabi_d2iz>
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	4607      	mov	r7, r0
 800dbea:	2300      	movs	r3, #0
 800dbec:	4620      	mov	r0, r4
 800dbee:	4629      	mov	r1, r5
 800dbf0:	f7f2 ff9c 	bl	8000b2c <__aeabi_dcmplt>
 800dbf4:	b140      	cbz	r0, 800dc08 <_dtoa_r+0x168>
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	f7f2 fcbc 	bl	8000574 <__aeabi_i2d>
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	462b      	mov	r3, r5
 800dc00:	f7f2 ff8a 	bl	8000b18 <__aeabi_dcmpeq>
 800dc04:	b900      	cbnz	r0, 800dc08 <_dtoa_r+0x168>
 800dc06:	3f01      	subs	r7, #1
 800dc08:	2f16      	cmp	r7, #22
 800dc0a:	d852      	bhi.n	800dcb2 <_dtoa_r+0x212>
 800dc0c:	4b5d      	ldr	r3, [pc, #372]	@ (800dd84 <_dtoa_r+0x2e4>)
 800dc0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc1a:	f7f2 ff87 	bl	8000b2c <__aeabi_dcmplt>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d049      	beq.n	800dcb6 <_dtoa_r+0x216>
 800dc22:	3f01      	subs	r7, #1
 800dc24:	2300      	movs	r3, #0
 800dc26:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dc2a:	1b9b      	subs	r3, r3, r6
 800dc2c:	1e5a      	subs	r2, r3, #1
 800dc2e:	bf45      	ittet	mi
 800dc30:	f1c3 0301 	rsbmi	r3, r3, #1
 800dc34:	9300      	strmi	r3, [sp, #0]
 800dc36:	2300      	movpl	r3, #0
 800dc38:	2300      	movmi	r3, #0
 800dc3a:	9206      	str	r2, [sp, #24]
 800dc3c:	bf54      	ite	pl
 800dc3e:	9300      	strpl	r3, [sp, #0]
 800dc40:	9306      	strmi	r3, [sp, #24]
 800dc42:	2f00      	cmp	r7, #0
 800dc44:	db39      	blt.n	800dcba <_dtoa_r+0x21a>
 800dc46:	9b06      	ldr	r3, [sp, #24]
 800dc48:	970d      	str	r7, [sp, #52]	@ 0x34
 800dc4a:	443b      	add	r3, r7
 800dc4c:	9306      	str	r3, [sp, #24]
 800dc4e:	2300      	movs	r3, #0
 800dc50:	9308      	str	r3, [sp, #32]
 800dc52:	9b07      	ldr	r3, [sp, #28]
 800dc54:	2b09      	cmp	r3, #9
 800dc56:	d863      	bhi.n	800dd20 <_dtoa_r+0x280>
 800dc58:	2b05      	cmp	r3, #5
 800dc5a:	bfc4      	itt	gt
 800dc5c:	3b04      	subgt	r3, #4
 800dc5e:	9307      	strgt	r3, [sp, #28]
 800dc60:	9b07      	ldr	r3, [sp, #28]
 800dc62:	f1a3 0302 	sub.w	r3, r3, #2
 800dc66:	bfcc      	ite	gt
 800dc68:	2400      	movgt	r4, #0
 800dc6a:	2401      	movle	r4, #1
 800dc6c:	2b03      	cmp	r3, #3
 800dc6e:	d863      	bhi.n	800dd38 <_dtoa_r+0x298>
 800dc70:	e8df f003 	tbb	[pc, r3]
 800dc74:	2b375452 	.word	0x2b375452
 800dc78:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800dc7c:	441e      	add	r6, r3
 800dc7e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dc82:	2b20      	cmp	r3, #32
 800dc84:	bfc1      	itttt	gt
 800dc86:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dc8a:	409f      	lslgt	r7, r3
 800dc8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dc90:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dc94:	bfd6      	itet	le
 800dc96:	f1c3 0320 	rsble	r3, r3, #32
 800dc9a:	ea47 0003 	orrgt.w	r0, r7, r3
 800dc9e:	fa04 f003 	lslle.w	r0, r4, r3
 800dca2:	f7f2 fc57 	bl	8000554 <__aeabi_ui2d>
 800dca6:	2201      	movs	r2, #1
 800dca8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dcac:	3e01      	subs	r6, #1
 800dcae:	9212      	str	r2, [sp, #72]	@ 0x48
 800dcb0:	e776      	b.n	800dba0 <_dtoa_r+0x100>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e7b7      	b.n	800dc26 <_dtoa_r+0x186>
 800dcb6:	9010      	str	r0, [sp, #64]	@ 0x40
 800dcb8:	e7b6      	b.n	800dc28 <_dtoa_r+0x188>
 800dcba:	9b00      	ldr	r3, [sp, #0]
 800dcbc:	1bdb      	subs	r3, r3, r7
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	427b      	negs	r3, r7
 800dcc2:	9308      	str	r3, [sp, #32]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	930d      	str	r3, [sp, #52]	@ 0x34
 800dcc8:	e7c3      	b.n	800dc52 <_dtoa_r+0x1b2>
 800dcca:	2301      	movs	r3, #1
 800dccc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dcd0:	eb07 0b03 	add.w	fp, r7, r3
 800dcd4:	f10b 0301 	add.w	r3, fp, #1
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	9303      	str	r3, [sp, #12]
 800dcdc:	bfb8      	it	lt
 800dcde:	2301      	movlt	r3, #1
 800dce0:	e006      	b.n	800dcf0 <_dtoa_r+0x250>
 800dce2:	2301      	movs	r3, #1
 800dce4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dce6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	dd28      	ble.n	800dd3e <_dtoa_r+0x29e>
 800dcec:	469b      	mov	fp, r3
 800dcee:	9303      	str	r3, [sp, #12]
 800dcf0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	2204      	movs	r2, #4
 800dcf8:	f102 0514 	add.w	r5, r2, #20
 800dcfc:	429d      	cmp	r5, r3
 800dcfe:	d926      	bls.n	800dd4e <_dtoa_r+0x2ae>
 800dd00:	6041      	str	r1, [r0, #4]
 800dd02:	4648      	mov	r0, r9
 800dd04:	f000 fd9c 	bl	800e840 <_Balloc>
 800dd08:	4682      	mov	sl, r0
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	d142      	bne.n	800dd94 <_dtoa_r+0x2f4>
 800dd0e:	4b1e      	ldr	r3, [pc, #120]	@ (800dd88 <_dtoa_r+0x2e8>)
 800dd10:	4602      	mov	r2, r0
 800dd12:	f240 11af 	movw	r1, #431	@ 0x1af
 800dd16:	e6da      	b.n	800dace <_dtoa_r+0x2e>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	e7e3      	b.n	800dce4 <_dtoa_r+0x244>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	e7d5      	b.n	800dccc <_dtoa_r+0x22c>
 800dd20:	2401      	movs	r4, #1
 800dd22:	2300      	movs	r3, #0
 800dd24:	9307      	str	r3, [sp, #28]
 800dd26:	9409      	str	r4, [sp, #36]	@ 0x24
 800dd28:	f04f 3bff 	mov.w	fp, #4294967295
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f8cd b00c 	str.w	fp, [sp, #12]
 800dd32:	2312      	movs	r3, #18
 800dd34:	920c      	str	r2, [sp, #48]	@ 0x30
 800dd36:	e7db      	b.n	800dcf0 <_dtoa_r+0x250>
 800dd38:	2301      	movs	r3, #1
 800dd3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd3c:	e7f4      	b.n	800dd28 <_dtoa_r+0x288>
 800dd3e:	f04f 0b01 	mov.w	fp, #1
 800dd42:	f8cd b00c 	str.w	fp, [sp, #12]
 800dd46:	465b      	mov	r3, fp
 800dd48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800dd4c:	e7d0      	b.n	800dcf0 <_dtoa_r+0x250>
 800dd4e:	3101      	adds	r1, #1
 800dd50:	0052      	lsls	r2, r2, #1
 800dd52:	e7d1      	b.n	800dcf8 <_dtoa_r+0x258>
 800dd54:	f3af 8000 	nop.w
 800dd58:	636f4361 	.word	0x636f4361
 800dd5c:	3fd287a7 	.word	0x3fd287a7
 800dd60:	8b60c8b3 	.word	0x8b60c8b3
 800dd64:	3fc68a28 	.word	0x3fc68a28
 800dd68:	509f79fb 	.word	0x509f79fb
 800dd6c:	3fd34413 	.word	0x3fd34413
 800dd70:	08011bf6 	.word	0x08011bf6
 800dd74:	08011c0d 	.word	0x08011c0d
 800dd78:	7ff00000 	.word	0x7ff00000
 800dd7c:	08011bc1 	.word	0x08011bc1
 800dd80:	3ff80000 	.word	0x3ff80000
 800dd84:	08011dc0 	.word	0x08011dc0
 800dd88:	08011c65 	.word	0x08011c65
 800dd8c:	08011bf2 	.word	0x08011bf2
 800dd90:	08011bc0 	.word	0x08011bc0
 800dd94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dd98:	6018      	str	r0, [r3, #0]
 800dd9a:	9b03      	ldr	r3, [sp, #12]
 800dd9c:	2b0e      	cmp	r3, #14
 800dd9e:	f200 80a1 	bhi.w	800dee4 <_dtoa_r+0x444>
 800dda2:	2c00      	cmp	r4, #0
 800dda4:	f000 809e 	beq.w	800dee4 <_dtoa_r+0x444>
 800dda8:	2f00      	cmp	r7, #0
 800ddaa:	dd33      	ble.n	800de14 <_dtoa_r+0x374>
 800ddac:	4b9c      	ldr	r3, [pc, #624]	@ (800e020 <_dtoa_r+0x580>)
 800ddae:	f007 020f 	and.w	r2, r7, #15
 800ddb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddb6:	ed93 7b00 	vldr	d7, [r3]
 800ddba:	05f8      	lsls	r0, r7, #23
 800ddbc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ddc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ddc4:	d516      	bpl.n	800ddf4 <_dtoa_r+0x354>
 800ddc6:	4b97      	ldr	r3, [pc, #604]	@ (800e024 <_dtoa_r+0x584>)
 800ddc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ddcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddd0:	f7f2 fd64 	bl	800089c <__aeabi_ddiv>
 800ddd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddd8:	f004 040f 	and.w	r4, r4, #15
 800dddc:	2603      	movs	r6, #3
 800ddde:	4d91      	ldr	r5, [pc, #580]	@ (800e024 <_dtoa_r+0x584>)
 800dde0:	b954      	cbnz	r4, 800ddf8 <_dtoa_r+0x358>
 800dde2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dde6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ddea:	f7f2 fd57 	bl	800089c <__aeabi_ddiv>
 800ddee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddf2:	e028      	b.n	800de46 <_dtoa_r+0x3a6>
 800ddf4:	2602      	movs	r6, #2
 800ddf6:	e7f2      	b.n	800ddde <_dtoa_r+0x33e>
 800ddf8:	07e1      	lsls	r1, r4, #31
 800ddfa:	d508      	bpl.n	800de0e <_dtoa_r+0x36e>
 800ddfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800de00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de04:	f7f2 fc20 	bl	8000648 <__aeabi_dmul>
 800de08:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de0c:	3601      	adds	r6, #1
 800de0e:	1064      	asrs	r4, r4, #1
 800de10:	3508      	adds	r5, #8
 800de12:	e7e5      	b.n	800dde0 <_dtoa_r+0x340>
 800de14:	f000 80af 	beq.w	800df76 <_dtoa_r+0x4d6>
 800de18:	427c      	negs	r4, r7
 800de1a:	4b81      	ldr	r3, [pc, #516]	@ (800e020 <_dtoa_r+0x580>)
 800de1c:	4d81      	ldr	r5, [pc, #516]	@ (800e024 <_dtoa_r+0x584>)
 800de1e:	f004 020f 	and.w	r2, r4, #15
 800de22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800de2e:	f7f2 fc0b 	bl	8000648 <__aeabi_dmul>
 800de32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de36:	1124      	asrs	r4, r4, #4
 800de38:	2300      	movs	r3, #0
 800de3a:	2602      	movs	r6, #2
 800de3c:	2c00      	cmp	r4, #0
 800de3e:	f040 808f 	bne.w	800df60 <_dtoa_r+0x4c0>
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1d3      	bne.n	800ddee <_dtoa_r+0x34e>
 800de46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de48:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f000 8094 	beq.w	800df7a <_dtoa_r+0x4da>
 800de52:	4b75      	ldr	r3, [pc, #468]	@ (800e028 <_dtoa_r+0x588>)
 800de54:	2200      	movs	r2, #0
 800de56:	4620      	mov	r0, r4
 800de58:	4629      	mov	r1, r5
 800de5a:	f7f2 fe67 	bl	8000b2c <__aeabi_dcmplt>
 800de5e:	2800      	cmp	r0, #0
 800de60:	f000 808b 	beq.w	800df7a <_dtoa_r+0x4da>
 800de64:	9b03      	ldr	r3, [sp, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 8087 	beq.w	800df7a <_dtoa_r+0x4da>
 800de6c:	f1bb 0f00 	cmp.w	fp, #0
 800de70:	dd34      	ble.n	800dedc <_dtoa_r+0x43c>
 800de72:	4620      	mov	r0, r4
 800de74:	4b6d      	ldr	r3, [pc, #436]	@ (800e02c <_dtoa_r+0x58c>)
 800de76:	2200      	movs	r2, #0
 800de78:	4629      	mov	r1, r5
 800de7a:	f7f2 fbe5 	bl	8000648 <__aeabi_dmul>
 800de7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de82:	f107 38ff 	add.w	r8, r7, #4294967295
 800de86:	3601      	adds	r6, #1
 800de88:	465c      	mov	r4, fp
 800de8a:	4630      	mov	r0, r6
 800de8c:	f7f2 fb72 	bl	8000574 <__aeabi_i2d>
 800de90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de94:	f7f2 fbd8 	bl	8000648 <__aeabi_dmul>
 800de98:	4b65      	ldr	r3, [pc, #404]	@ (800e030 <_dtoa_r+0x590>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	f7f2 fa1e 	bl	80002dc <__adddf3>
 800dea0:	4605      	mov	r5, r0
 800dea2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dea6:	2c00      	cmp	r4, #0
 800dea8:	d16a      	bne.n	800df80 <_dtoa_r+0x4e0>
 800deaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800deae:	4b61      	ldr	r3, [pc, #388]	@ (800e034 <_dtoa_r+0x594>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	f7f2 fa11 	bl	80002d8 <__aeabi_dsub>
 800deb6:	4602      	mov	r2, r0
 800deb8:	460b      	mov	r3, r1
 800deba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800debe:	462a      	mov	r2, r5
 800dec0:	4633      	mov	r3, r6
 800dec2:	f7f2 fe51 	bl	8000b68 <__aeabi_dcmpgt>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	f040 8298 	bne.w	800e3fc <_dtoa_r+0x95c>
 800decc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ded0:	462a      	mov	r2, r5
 800ded2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ded6:	f7f2 fe29 	bl	8000b2c <__aeabi_dcmplt>
 800deda:	bb38      	cbnz	r0, 800df2c <_dtoa_r+0x48c>
 800dedc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dee0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dee4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f2c0 8157 	blt.w	800e19a <_dtoa_r+0x6fa>
 800deec:	2f0e      	cmp	r7, #14
 800deee:	f300 8154 	bgt.w	800e19a <_dtoa_r+0x6fa>
 800def2:	4b4b      	ldr	r3, [pc, #300]	@ (800e020 <_dtoa_r+0x580>)
 800def4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800def8:	ed93 7b00 	vldr	d7, [r3]
 800defc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800defe:	2b00      	cmp	r3, #0
 800df00:	ed8d 7b00 	vstr	d7, [sp]
 800df04:	f280 80e5 	bge.w	800e0d2 <_dtoa_r+0x632>
 800df08:	9b03      	ldr	r3, [sp, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f300 80e1 	bgt.w	800e0d2 <_dtoa_r+0x632>
 800df10:	d10c      	bne.n	800df2c <_dtoa_r+0x48c>
 800df12:	4b48      	ldr	r3, [pc, #288]	@ (800e034 <_dtoa_r+0x594>)
 800df14:	2200      	movs	r2, #0
 800df16:	ec51 0b17 	vmov	r0, r1, d7
 800df1a:	f7f2 fb95 	bl	8000648 <__aeabi_dmul>
 800df1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df22:	f7f2 fe17 	bl	8000b54 <__aeabi_dcmpge>
 800df26:	2800      	cmp	r0, #0
 800df28:	f000 8266 	beq.w	800e3f8 <_dtoa_r+0x958>
 800df2c:	2400      	movs	r4, #0
 800df2e:	4625      	mov	r5, r4
 800df30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df32:	4656      	mov	r6, sl
 800df34:	ea6f 0803 	mvn.w	r8, r3
 800df38:	2700      	movs	r7, #0
 800df3a:	4621      	mov	r1, r4
 800df3c:	4648      	mov	r0, r9
 800df3e:	f000 fcbf 	bl	800e8c0 <_Bfree>
 800df42:	2d00      	cmp	r5, #0
 800df44:	f000 80bd 	beq.w	800e0c2 <_dtoa_r+0x622>
 800df48:	b12f      	cbz	r7, 800df56 <_dtoa_r+0x4b6>
 800df4a:	42af      	cmp	r7, r5
 800df4c:	d003      	beq.n	800df56 <_dtoa_r+0x4b6>
 800df4e:	4639      	mov	r1, r7
 800df50:	4648      	mov	r0, r9
 800df52:	f000 fcb5 	bl	800e8c0 <_Bfree>
 800df56:	4629      	mov	r1, r5
 800df58:	4648      	mov	r0, r9
 800df5a:	f000 fcb1 	bl	800e8c0 <_Bfree>
 800df5e:	e0b0      	b.n	800e0c2 <_dtoa_r+0x622>
 800df60:	07e2      	lsls	r2, r4, #31
 800df62:	d505      	bpl.n	800df70 <_dtoa_r+0x4d0>
 800df64:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df68:	f7f2 fb6e 	bl	8000648 <__aeabi_dmul>
 800df6c:	3601      	adds	r6, #1
 800df6e:	2301      	movs	r3, #1
 800df70:	1064      	asrs	r4, r4, #1
 800df72:	3508      	adds	r5, #8
 800df74:	e762      	b.n	800de3c <_dtoa_r+0x39c>
 800df76:	2602      	movs	r6, #2
 800df78:	e765      	b.n	800de46 <_dtoa_r+0x3a6>
 800df7a:	9c03      	ldr	r4, [sp, #12]
 800df7c:	46b8      	mov	r8, r7
 800df7e:	e784      	b.n	800de8a <_dtoa_r+0x3ea>
 800df80:	4b27      	ldr	r3, [pc, #156]	@ (800e020 <_dtoa_r+0x580>)
 800df82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df8c:	4454      	add	r4, sl
 800df8e:	2900      	cmp	r1, #0
 800df90:	d054      	beq.n	800e03c <_dtoa_r+0x59c>
 800df92:	4929      	ldr	r1, [pc, #164]	@ (800e038 <_dtoa_r+0x598>)
 800df94:	2000      	movs	r0, #0
 800df96:	f7f2 fc81 	bl	800089c <__aeabi_ddiv>
 800df9a:	4633      	mov	r3, r6
 800df9c:	462a      	mov	r2, r5
 800df9e:	f7f2 f99b 	bl	80002d8 <__aeabi_dsub>
 800dfa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dfa6:	4656      	mov	r6, sl
 800dfa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfac:	f7f2 fdfc 	bl	8000ba8 <__aeabi_d2iz>
 800dfb0:	4605      	mov	r5, r0
 800dfb2:	f7f2 fadf 	bl	8000574 <__aeabi_i2d>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfbe:	f7f2 f98b 	bl	80002d8 <__aeabi_dsub>
 800dfc2:	3530      	adds	r5, #48	@ 0x30
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dfcc:	f806 5b01 	strb.w	r5, [r6], #1
 800dfd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dfd4:	f7f2 fdaa 	bl	8000b2c <__aeabi_dcmplt>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d172      	bne.n	800e0c2 <_dtoa_r+0x622>
 800dfdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfe0:	4911      	ldr	r1, [pc, #68]	@ (800e028 <_dtoa_r+0x588>)
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	f7f2 f978 	bl	80002d8 <__aeabi_dsub>
 800dfe8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dfec:	f7f2 fd9e 	bl	8000b2c <__aeabi_dcmplt>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	f040 80b4 	bne.w	800e15e <_dtoa_r+0x6be>
 800dff6:	42a6      	cmp	r6, r4
 800dff8:	f43f af70 	beq.w	800dedc <_dtoa_r+0x43c>
 800dffc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e000:	4b0a      	ldr	r3, [pc, #40]	@ (800e02c <_dtoa_r+0x58c>)
 800e002:	2200      	movs	r2, #0
 800e004:	f7f2 fb20 	bl	8000648 <__aeabi_dmul>
 800e008:	4b08      	ldr	r3, [pc, #32]	@ (800e02c <_dtoa_r+0x58c>)
 800e00a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e00e:	2200      	movs	r2, #0
 800e010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e014:	f7f2 fb18 	bl	8000648 <__aeabi_dmul>
 800e018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e01c:	e7c4      	b.n	800dfa8 <_dtoa_r+0x508>
 800e01e:	bf00      	nop
 800e020:	08011dc0 	.word	0x08011dc0
 800e024:	08011d98 	.word	0x08011d98
 800e028:	3ff00000 	.word	0x3ff00000
 800e02c:	40240000 	.word	0x40240000
 800e030:	401c0000 	.word	0x401c0000
 800e034:	40140000 	.word	0x40140000
 800e038:	3fe00000 	.word	0x3fe00000
 800e03c:	4631      	mov	r1, r6
 800e03e:	4628      	mov	r0, r5
 800e040:	f7f2 fb02 	bl	8000648 <__aeabi_dmul>
 800e044:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e048:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e04a:	4656      	mov	r6, sl
 800e04c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e050:	f7f2 fdaa 	bl	8000ba8 <__aeabi_d2iz>
 800e054:	4605      	mov	r5, r0
 800e056:	f7f2 fa8d 	bl	8000574 <__aeabi_i2d>
 800e05a:	4602      	mov	r2, r0
 800e05c:	460b      	mov	r3, r1
 800e05e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e062:	f7f2 f939 	bl	80002d8 <__aeabi_dsub>
 800e066:	3530      	adds	r5, #48	@ 0x30
 800e068:	f806 5b01 	strb.w	r5, [r6], #1
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	42a6      	cmp	r6, r4
 800e072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e076:	f04f 0200 	mov.w	r2, #0
 800e07a:	d124      	bne.n	800e0c6 <_dtoa_r+0x626>
 800e07c:	4baf      	ldr	r3, [pc, #700]	@ (800e33c <_dtoa_r+0x89c>)
 800e07e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e082:	f7f2 f92b 	bl	80002dc <__adddf3>
 800e086:	4602      	mov	r2, r0
 800e088:	460b      	mov	r3, r1
 800e08a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e08e:	f7f2 fd6b 	bl	8000b68 <__aeabi_dcmpgt>
 800e092:	2800      	cmp	r0, #0
 800e094:	d163      	bne.n	800e15e <_dtoa_r+0x6be>
 800e096:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e09a:	49a8      	ldr	r1, [pc, #672]	@ (800e33c <_dtoa_r+0x89c>)
 800e09c:	2000      	movs	r0, #0
 800e09e:	f7f2 f91b 	bl	80002d8 <__aeabi_dsub>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0aa:	f7f2 fd3f 	bl	8000b2c <__aeabi_dcmplt>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f43f af14 	beq.w	800dedc <_dtoa_r+0x43c>
 800e0b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e0b6:	1e73      	subs	r3, r6, #1
 800e0b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e0ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e0be:	2b30      	cmp	r3, #48	@ 0x30
 800e0c0:	d0f8      	beq.n	800e0b4 <_dtoa_r+0x614>
 800e0c2:	4647      	mov	r7, r8
 800e0c4:	e03b      	b.n	800e13e <_dtoa_r+0x69e>
 800e0c6:	4b9e      	ldr	r3, [pc, #632]	@ (800e340 <_dtoa_r+0x8a0>)
 800e0c8:	f7f2 fabe 	bl	8000648 <__aeabi_dmul>
 800e0cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0d0:	e7bc      	b.n	800e04c <_dtoa_r+0x5ac>
 800e0d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e0d6:	4656      	mov	r6, sl
 800e0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0dc:	4620      	mov	r0, r4
 800e0de:	4629      	mov	r1, r5
 800e0e0:	f7f2 fbdc 	bl	800089c <__aeabi_ddiv>
 800e0e4:	f7f2 fd60 	bl	8000ba8 <__aeabi_d2iz>
 800e0e8:	4680      	mov	r8, r0
 800e0ea:	f7f2 fa43 	bl	8000574 <__aeabi_i2d>
 800e0ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0f2:	f7f2 faa9 	bl	8000648 <__aeabi_dmul>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e102:	f7f2 f8e9 	bl	80002d8 <__aeabi_dsub>
 800e106:	f806 4b01 	strb.w	r4, [r6], #1
 800e10a:	9d03      	ldr	r5, [sp, #12]
 800e10c:	eba6 040a 	sub.w	r4, r6, sl
 800e110:	42a5      	cmp	r5, r4
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	d133      	bne.n	800e180 <_dtoa_r+0x6e0>
 800e118:	f7f2 f8e0 	bl	80002dc <__adddf3>
 800e11c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e120:	4604      	mov	r4, r0
 800e122:	460d      	mov	r5, r1
 800e124:	f7f2 fd20 	bl	8000b68 <__aeabi_dcmpgt>
 800e128:	b9c0      	cbnz	r0, 800e15c <_dtoa_r+0x6bc>
 800e12a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e12e:	4620      	mov	r0, r4
 800e130:	4629      	mov	r1, r5
 800e132:	f7f2 fcf1 	bl	8000b18 <__aeabi_dcmpeq>
 800e136:	b110      	cbz	r0, 800e13e <_dtoa_r+0x69e>
 800e138:	f018 0f01 	tst.w	r8, #1
 800e13c:	d10e      	bne.n	800e15c <_dtoa_r+0x6bc>
 800e13e:	9902      	ldr	r1, [sp, #8]
 800e140:	4648      	mov	r0, r9
 800e142:	f000 fbbd 	bl	800e8c0 <_Bfree>
 800e146:	2300      	movs	r3, #0
 800e148:	7033      	strb	r3, [r6, #0]
 800e14a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e14c:	3701      	adds	r7, #1
 800e14e:	601f      	str	r7, [r3, #0]
 800e150:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e152:	2b00      	cmp	r3, #0
 800e154:	f000 824b 	beq.w	800e5ee <_dtoa_r+0xb4e>
 800e158:	601e      	str	r6, [r3, #0]
 800e15a:	e248      	b.n	800e5ee <_dtoa_r+0xb4e>
 800e15c:	46b8      	mov	r8, r7
 800e15e:	4633      	mov	r3, r6
 800e160:	461e      	mov	r6, r3
 800e162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e166:	2a39      	cmp	r2, #57	@ 0x39
 800e168:	d106      	bne.n	800e178 <_dtoa_r+0x6d8>
 800e16a:	459a      	cmp	sl, r3
 800e16c:	d1f8      	bne.n	800e160 <_dtoa_r+0x6c0>
 800e16e:	2230      	movs	r2, #48	@ 0x30
 800e170:	f108 0801 	add.w	r8, r8, #1
 800e174:	f88a 2000 	strb.w	r2, [sl]
 800e178:	781a      	ldrb	r2, [r3, #0]
 800e17a:	3201      	adds	r2, #1
 800e17c:	701a      	strb	r2, [r3, #0]
 800e17e:	e7a0      	b.n	800e0c2 <_dtoa_r+0x622>
 800e180:	4b6f      	ldr	r3, [pc, #444]	@ (800e340 <_dtoa_r+0x8a0>)
 800e182:	2200      	movs	r2, #0
 800e184:	f7f2 fa60 	bl	8000648 <__aeabi_dmul>
 800e188:	2200      	movs	r2, #0
 800e18a:	2300      	movs	r3, #0
 800e18c:	4604      	mov	r4, r0
 800e18e:	460d      	mov	r5, r1
 800e190:	f7f2 fcc2 	bl	8000b18 <__aeabi_dcmpeq>
 800e194:	2800      	cmp	r0, #0
 800e196:	d09f      	beq.n	800e0d8 <_dtoa_r+0x638>
 800e198:	e7d1      	b.n	800e13e <_dtoa_r+0x69e>
 800e19a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e19c:	2a00      	cmp	r2, #0
 800e19e:	f000 80ea 	beq.w	800e376 <_dtoa_r+0x8d6>
 800e1a2:	9a07      	ldr	r2, [sp, #28]
 800e1a4:	2a01      	cmp	r2, #1
 800e1a6:	f300 80cd 	bgt.w	800e344 <_dtoa_r+0x8a4>
 800e1aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e1ac:	2a00      	cmp	r2, #0
 800e1ae:	f000 80c1 	beq.w	800e334 <_dtoa_r+0x894>
 800e1b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e1b6:	9c08      	ldr	r4, [sp, #32]
 800e1b8:	9e00      	ldr	r6, [sp, #0]
 800e1ba:	9a00      	ldr	r2, [sp, #0]
 800e1bc:	441a      	add	r2, r3
 800e1be:	9200      	str	r2, [sp, #0]
 800e1c0:	9a06      	ldr	r2, [sp, #24]
 800e1c2:	2101      	movs	r1, #1
 800e1c4:	441a      	add	r2, r3
 800e1c6:	4648      	mov	r0, r9
 800e1c8:	9206      	str	r2, [sp, #24]
 800e1ca:	f000 fc77 	bl	800eabc <__i2b>
 800e1ce:	4605      	mov	r5, r0
 800e1d0:	b166      	cbz	r6, 800e1ec <_dtoa_r+0x74c>
 800e1d2:	9b06      	ldr	r3, [sp, #24]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	dd09      	ble.n	800e1ec <_dtoa_r+0x74c>
 800e1d8:	42b3      	cmp	r3, r6
 800e1da:	9a00      	ldr	r2, [sp, #0]
 800e1dc:	bfa8      	it	ge
 800e1de:	4633      	movge	r3, r6
 800e1e0:	1ad2      	subs	r2, r2, r3
 800e1e2:	9200      	str	r2, [sp, #0]
 800e1e4:	9a06      	ldr	r2, [sp, #24]
 800e1e6:	1af6      	subs	r6, r6, r3
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	9306      	str	r3, [sp, #24]
 800e1ec:	9b08      	ldr	r3, [sp, #32]
 800e1ee:	b30b      	cbz	r3, 800e234 <_dtoa_r+0x794>
 800e1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f000 80c6 	beq.w	800e384 <_dtoa_r+0x8e4>
 800e1f8:	2c00      	cmp	r4, #0
 800e1fa:	f000 80c0 	beq.w	800e37e <_dtoa_r+0x8de>
 800e1fe:	4629      	mov	r1, r5
 800e200:	4622      	mov	r2, r4
 800e202:	4648      	mov	r0, r9
 800e204:	f000 fd12 	bl	800ec2c <__pow5mult>
 800e208:	9a02      	ldr	r2, [sp, #8]
 800e20a:	4601      	mov	r1, r0
 800e20c:	4605      	mov	r5, r0
 800e20e:	4648      	mov	r0, r9
 800e210:	f000 fc6a 	bl	800eae8 <__multiply>
 800e214:	9902      	ldr	r1, [sp, #8]
 800e216:	4680      	mov	r8, r0
 800e218:	4648      	mov	r0, r9
 800e21a:	f000 fb51 	bl	800e8c0 <_Bfree>
 800e21e:	9b08      	ldr	r3, [sp, #32]
 800e220:	1b1b      	subs	r3, r3, r4
 800e222:	9308      	str	r3, [sp, #32]
 800e224:	f000 80b1 	beq.w	800e38a <_dtoa_r+0x8ea>
 800e228:	9a08      	ldr	r2, [sp, #32]
 800e22a:	4641      	mov	r1, r8
 800e22c:	4648      	mov	r0, r9
 800e22e:	f000 fcfd 	bl	800ec2c <__pow5mult>
 800e232:	9002      	str	r0, [sp, #8]
 800e234:	2101      	movs	r1, #1
 800e236:	4648      	mov	r0, r9
 800e238:	f000 fc40 	bl	800eabc <__i2b>
 800e23c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e23e:	4604      	mov	r4, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	f000 81d8 	beq.w	800e5f6 <_dtoa_r+0xb56>
 800e246:	461a      	mov	r2, r3
 800e248:	4601      	mov	r1, r0
 800e24a:	4648      	mov	r0, r9
 800e24c:	f000 fcee 	bl	800ec2c <__pow5mult>
 800e250:	9b07      	ldr	r3, [sp, #28]
 800e252:	2b01      	cmp	r3, #1
 800e254:	4604      	mov	r4, r0
 800e256:	f300 809f 	bgt.w	800e398 <_dtoa_r+0x8f8>
 800e25a:	9b04      	ldr	r3, [sp, #16]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f040 8097 	bne.w	800e390 <_dtoa_r+0x8f0>
 800e262:	9b05      	ldr	r3, [sp, #20]
 800e264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f040 8093 	bne.w	800e394 <_dtoa_r+0x8f4>
 800e26e:	9b05      	ldr	r3, [sp, #20]
 800e270:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e274:	0d1b      	lsrs	r3, r3, #20
 800e276:	051b      	lsls	r3, r3, #20
 800e278:	b133      	cbz	r3, 800e288 <_dtoa_r+0x7e8>
 800e27a:	9b00      	ldr	r3, [sp, #0]
 800e27c:	3301      	adds	r3, #1
 800e27e:	9300      	str	r3, [sp, #0]
 800e280:	9b06      	ldr	r3, [sp, #24]
 800e282:	3301      	adds	r3, #1
 800e284:	9306      	str	r3, [sp, #24]
 800e286:	2301      	movs	r3, #1
 800e288:	9308      	str	r3, [sp, #32]
 800e28a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 81b8 	beq.w	800e602 <_dtoa_r+0xb62>
 800e292:	6923      	ldr	r3, [r4, #16]
 800e294:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e298:	6918      	ldr	r0, [r3, #16]
 800e29a:	f000 fbc3 	bl	800ea24 <__hi0bits>
 800e29e:	f1c0 0020 	rsb	r0, r0, #32
 800e2a2:	9b06      	ldr	r3, [sp, #24]
 800e2a4:	4418      	add	r0, r3
 800e2a6:	f010 001f 	ands.w	r0, r0, #31
 800e2aa:	f000 8082 	beq.w	800e3b2 <_dtoa_r+0x912>
 800e2ae:	f1c0 0320 	rsb	r3, r0, #32
 800e2b2:	2b04      	cmp	r3, #4
 800e2b4:	dd73      	ble.n	800e39e <_dtoa_r+0x8fe>
 800e2b6:	9b00      	ldr	r3, [sp, #0]
 800e2b8:	f1c0 001c 	rsb	r0, r0, #28
 800e2bc:	4403      	add	r3, r0
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	9b06      	ldr	r3, [sp, #24]
 800e2c2:	4403      	add	r3, r0
 800e2c4:	4406      	add	r6, r0
 800e2c6:	9306      	str	r3, [sp, #24]
 800e2c8:	9b00      	ldr	r3, [sp, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	dd05      	ble.n	800e2da <_dtoa_r+0x83a>
 800e2ce:	9902      	ldr	r1, [sp, #8]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	4648      	mov	r0, r9
 800e2d4:	f000 fd04 	bl	800ece0 <__lshift>
 800e2d8:	9002      	str	r0, [sp, #8]
 800e2da:	9b06      	ldr	r3, [sp, #24]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	dd05      	ble.n	800e2ec <_dtoa_r+0x84c>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	4648      	mov	r0, r9
 800e2e6:	f000 fcfb 	bl	800ece0 <__lshift>
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d061      	beq.n	800e3b6 <_dtoa_r+0x916>
 800e2f2:	9802      	ldr	r0, [sp, #8]
 800e2f4:	4621      	mov	r1, r4
 800e2f6:	f000 fd5f 	bl	800edb8 <__mcmp>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	da5b      	bge.n	800e3b6 <_dtoa_r+0x916>
 800e2fe:	2300      	movs	r3, #0
 800e300:	9902      	ldr	r1, [sp, #8]
 800e302:	220a      	movs	r2, #10
 800e304:	4648      	mov	r0, r9
 800e306:	f000 fafd 	bl	800e904 <__multadd>
 800e30a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e30c:	9002      	str	r0, [sp, #8]
 800e30e:	f107 38ff 	add.w	r8, r7, #4294967295
 800e312:	2b00      	cmp	r3, #0
 800e314:	f000 8177 	beq.w	800e606 <_dtoa_r+0xb66>
 800e318:	4629      	mov	r1, r5
 800e31a:	2300      	movs	r3, #0
 800e31c:	220a      	movs	r2, #10
 800e31e:	4648      	mov	r0, r9
 800e320:	f000 faf0 	bl	800e904 <__multadd>
 800e324:	f1bb 0f00 	cmp.w	fp, #0
 800e328:	4605      	mov	r5, r0
 800e32a:	dc6f      	bgt.n	800e40c <_dtoa_r+0x96c>
 800e32c:	9b07      	ldr	r3, [sp, #28]
 800e32e:	2b02      	cmp	r3, #2
 800e330:	dc49      	bgt.n	800e3c6 <_dtoa_r+0x926>
 800e332:	e06b      	b.n	800e40c <_dtoa_r+0x96c>
 800e334:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e336:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e33a:	e73c      	b.n	800e1b6 <_dtoa_r+0x716>
 800e33c:	3fe00000 	.word	0x3fe00000
 800e340:	40240000 	.word	0x40240000
 800e344:	9b03      	ldr	r3, [sp, #12]
 800e346:	1e5c      	subs	r4, r3, #1
 800e348:	9b08      	ldr	r3, [sp, #32]
 800e34a:	42a3      	cmp	r3, r4
 800e34c:	db09      	blt.n	800e362 <_dtoa_r+0x8c2>
 800e34e:	1b1c      	subs	r4, r3, r4
 800e350:	9b03      	ldr	r3, [sp, #12]
 800e352:	2b00      	cmp	r3, #0
 800e354:	f6bf af30 	bge.w	800e1b8 <_dtoa_r+0x718>
 800e358:	9b00      	ldr	r3, [sp, #0]
 800e35a:	9a03      	ldr	r2, [sp, #12]
 800e35c:	1a9e      	subs	r6, r3, r2
 800e35e:	2300      	movs	r3, #0
 800e360:	e72b      	b.n	800e1ba <_dtoa_r+0x71a>
 800e362:	9b08      	ldr	r3, [sp, #32]
 800e364:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e366:	9408      	str	r4, [sp, #32]
 800e368:	1ae3      	subs	r3, r4, r3
 800e36a:	441a      	add	r2, r3
 800e36c:	9e00      	ldr	r6, [sp, #0]
 800e36e:	9b03      	ldr	r3, [sp, #12]
 800e370:	920d      	str	r2, [sp, #52]	@ 0x34
 800e372:	2400      	movs	r4, #0
 800e374:	e721      	b.n	800e1ba <_dtoa_r+0x71a>
 800e376:	9c08      	ldr	r4, [sp, #32]
 800e378:	9e00      	ldr	r6, [sp, #0]
 800e37a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e37c:	e728      	b.n	800e1d0 <_dtoa_r+0x730>
 800e37e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e382:	e751      	b.n	800e228 <_dtoa_r+0x788>
 800e384:	9a08      	ldr	r2, [sp, #32]
 800e386:	9902      	ldr	r1, [sp, #8]
 800e388:	e750      	b.n	800e22c <_dtoa_r+0x78c>
 800e38a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e38e:	e751      	b.n	800e234 <_dtoa_r+0x794>
 800e390:	2300      	movs	r3, #0
 800e392:	e779      	b.n	800e288 <_dtoa_r+0x7e8>
 800e394:	9b04      	ldr	r3, [sp, #16]
 800e396:	e777      	b.n	800e288 <_dtoa_r+0x7e8>
 800e398:	2300      	movs	r3, #0
 800e39a:	9308      	str	r3, [sp, #32]
 800e39c:	e779      	b.n	800e292 <_dtoa_r+0x7f2>
 800e39e:	d093      	beq.n	800e2c8 <_dtoa_r+0x828>
 800e3a0:	9a00      	ldr	r2, [sp, #0]
 800e3a2:	331c      	adds	r3, #28
 800e3a4:	441a      	add	r2, r3
 800e3a6:	9200      	str	r2, [sp, #0]
 800e3a8:	9a06      	ldr	r2, [sp, #24]
 800e3aa:	441a      	add	r2, r3
 800e3ac:	441e      	add	r6, r3
 800e3ae:	9206      	str	r2, [sp, #24]
 800e3b0:	e78a      	b.n	800e2c8 <_dtoa_r+0x828>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	e7f4      	b.n	800e3a0 <_dtoa_r+0x900>
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	46b8      	mov	r8, r7
 800e3bc:	dc20      	bgt.n	800e400 <_dtoa_r+0x960>
 800e3be:	469b      	mov	fp, r3
 800e3c0:	9b07      	ldr	r3, [sp, #28]
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	dd1e      	ble.n	800e404 <_dtoa_r+0x964>
 800e3c6:	f1bb 0f00 	cmp.w	fp, #0
 800e3ca:	f47f adb1 	bne.w	800df30 <_dtoa_r+0x490>
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	465b      	mov	r3, fp
 800e3d2:	2205      	movs	r2, #5
 800e3d4:	4648      	mov	r0, r9
 800e3d6:	f000 fa95 	bl	800e904 <__multadd>
 800e3da:	4601      	mov	r1, r0
 800e3dc:	4604      	mov	r4, r0
 800e3de:	9802      	ldr	r0, [sp, #8]
 800e3e0:	f000 fcea 	bl	800edb8 <__mcmp>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f77f ada3 	ble.w	800df30 <_dtoa_r+0x490>
 800e3ea:	4656      	mov	r6, sl
 800e3ec:	2331      	movs	r3, #49	@ 0x31
 800e3ee:	f806 3b01 	strb.w	r3, [r6], #1
 800e3f2:	f108 0801 	add.w	r8, r8, #1
 800e3f6:	e59f      	b.n	800df38 <_dtoa_r+0x498>
 800e3f8:	9c03      	ldr	r4, [sp, #12]
 800e3fa:	46b8      	mov	r8, r7
 800e3fc:	4625      	mov	r5, r4
 800e3fe:	e7f4      	b.n	800e3ea <_dtoa_r+0x94a>
 800e400:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e406:	2b00      	cmp	r3, #0
 800e408:	f000 8101 	beq.w	800e60e <_dtoa_r+0xb6e>
 800e40c:	2e00      	cmp	r6, #0
 800e40e:	dd05      	ble.n	800e41c <_dtoa_r+0x97c>
 800e410:	4629      	mov	r1, r5
 800e412:	4632      	mov	r2, r6
 800e414:	4648      	mov	r0, r9
 800e416:	f000 fc63 	bl	800ece0 <__lshift>
 800e41a:	4605      	mov	r5, r0
 800e41c:	9b08      	ldr	r3, [sp, #32]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d05c      	beq.n	800e4dc <_dtoa_r+0xa3c>
 800e422:	6869      	ldr	r1, [r5, #4]
 800e424:	4648      	mov	r0, r9
 800e426:	f000 fa0b 	bl	800e840 <_Balloc>
 800e42a:	4606      	mov	r6, r0
 800e42c:	b928      	cbnz	r0, 800e43a <_dtoa_r+0x99a>
 800e42e:	4b82      	ldr	r3, [pc, #520]	@ (800e638 <_dtoa_r+0xb98>)
 800e430:	4602      	mov	r2, r0
 800e432:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e436:	f7ff bb4a 	b.w	800dace <_dtoa_r+0x2e>
 800e43a:	692a      	ldr	r2, [r5, #16]
 800e43c:	3202      	adds	r2, #2
 800e43e:	0092      	lsls	r2, r2, #2
 800e440:	f105 010c 	add.w	r1, r5, #12
 800e444:	300c      	adds	r0, #12
 800e446:	f7ff fa8c 	bl	800d962 <memcpy>
 800e44a:	2201      	movs	r2, #1
 800e44c:	4631      	mov	r1, r6
 800e44e:	4648      	mov	r0, r9
 800e450:	f000 fc46 	bl	800ece0 <__lshift>
 800e454:	f10a 0301 	add.w	r3, sl, #1
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	eb0a 030b 	add.w	r3, sl, fp
 800e45e:	9308      	str	r3, [sp, #32]
 800e460:	9b04      	ldr	r3, [sp, #16]
 800e462:	f003 0301 	and.w	r3, r3, #1
 800e466:	462f      	mov	r7, r5
 800e468:	9306      	str	r3, [sp, #24]
 800e46a:	4605      	mov	r5, r0
 800e46c:	9b00      	ldr	r3, [sp, #0]
 800e46e:	9802      	ldr	r0, [sp, #8]
 800e470:	4621      	mov	r1, r4
 800e472:	f103 3bff 	add.w	fp, r3, #4294967295
 800e476:	f7ff fa89 	bl	800d98c <quorem>
 800e47a:	4603      	mov	r3, r0
 800e47c:	3330      	adds	r3, #48	@ 0x30
 800e47e:	9003      	str	r0, [sp, #12]
 800e480:	4639      	mov	r1, r7
 800e482:	9802      	ldr	r0, [sp, #8]
 800e484:	9309      	str	r3, [sp, #36]	@ 0x24
 800e486:	f000 fc97 	bl	800edb8 <__mcmp>
 800e48a:	462a      	mov	r2, r5
 800e48c:	9004      	str	r0, [sp, #16]
 800e48e:	4621      	mov	r1, r4
 800e490:	4648      	mov	r0, r9
 800e492:	f000 fcad 	bl	800edf0 <__mdiff>
 800e496:	68c2      	ldr	r2, [r0, #12]
 800e498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e49a:	4606      	mov	r6, r0
 800e49c:	bb02      	cbnz	r2, 800e4e0 <_dtoa_r+0xa40>
 800e49e:	4601      	mov	r1, r0
 800e4a0:	9802      	ldr	r0, [sp, #8]
 800e4a2:	f000 fc89 	bl	800edb8 <__mcmp>
 800e4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	4648      	mov	r0, r9
 800e4ae:	920c      	str	r2, [sp, #48]	@ 0x30
 800e4b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4b2:	f000 fa05 	bl	800e8c0 <_Bfree>
 800e4b6:	9b07      	ldr	r3, [sp, #28]
 800e4b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e4ba:	9e00      	ldr	r6, [sp, #0]
 800e4bc:	ea42 0103 	orr.w	r1, r2, r3
 800e4c0:	9b06      	ldr	r3, [sp, #24]
 800e4c2:	4319      	orrs	r1, r3
 800e4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4c6:	d10d      	bne.n	800e4e4 <_dtoa_r+0xa44>
 800e4c8:	2b39      	cmp	r3, #57	@ 0x39
 800e4ca:	d027      	beq.n	800e51c <_dtoa_r+0xa7c>
 800e4cc:	9a04      	ldr	r2, [sp, #16]
 800e4ce:	2a00      	cmp	r2, #0
 800e4d0:	dd01      	ble.n	800e4d6 <_dtoa_r+0xa36>
 800e4d2:	9b03      	ldr	r3, [sp, #12]
 800e4d4:	3331      	adds	r3, #49	@ 0x31
 800e4d6:	f88b 3000 	strb.w	r3, [fp]
 800e4da:	e52e      	b.n	800df3a <_dtoa_r+0x49a>
 800e4dc:	4628      	mov	r0, r5
 800e4de:	e7b9      	b.n	800e454 <_dtoa_r+0x9b4>
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	e7e2      	b.n	800e4aa <_dtoa_r+0xa0a>
 800e4e4:	9904      	ldr	r1, [sp, #16]
 800e4e6:	2900      	cmp	r1, #0
 800e4e8:	db04      	blt.n	800e4f4 <_dtoa_r+0xa54>
 800e4ea:	9807      	ldr	r0, [sp, #28]
 800e4ec:	4301      	orrs	r1, r0
 800e4ee:	9806      	ldr	r0, [sp, #24]
 800e4f0:	4301      	orrs	r1, r0
 800e4f2:	d120      	bne.n	800e536 <_dtoa_r+0xa96>
 800e4f4:	2a00      	cmp	r2, #0
 800e4f6:	ddee      	ble.n	800e4d6 <_dtoa_r+0xa36>
 800e4f8:	9902      	ldr	r1, [sp, #8]
 800e4fa:	9300      	str	r3, [sp, #0]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	4648      	mov	r0, r9
 800e500:	f000 fbee 	bl	800ece0 <__lshift>
 800e504:	4621      	mov	r1, r4
 800e506:	9002      	str	r0, [sp, #8]
 800e508:	f000 fc56 	bl	800edb8 <__mcmp>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	9b00      	ldr	r3, [sp, #0]
 800e510:	dc02      	bgt.n	800e518 <_dtoa_r+0xa78>
 800e512:	d1e0      	bne.n	800e4d6 <_dtoa_r+0xa36>
 800e514:	07da      	lsls	r2, r3, #31
 800e516:	d5de      	bpl.n	800e4d6 <_dtoa_r+0xa36>
 800e518:	2b39      	cmp	r3, #57	@ 0x39
 800e51a:	d1da      	bne.n	800e4d2 <_dtoa_r+0xa32>
 800e51c:	2339      	movs	r3, #57	@ 0x39
 800e51e:	f88b 3000 	strb.w	r3, [fp]
 800e522:	4633      	mov	r3, r6
 800e524:	461e      	mov	r6, r3
 800e526:	3b01      	subs	r3, #1
 800e528:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e52c:	2a39      	cmp	r2, #57	@ 0x39
 800e52e:	d04e      	beq.n	800e5ce <_dtoa_r+0xb2e>
 800e530:	3201      	adds	r2, #1
 800e532:	701a      	strb	r2, [r3, #0]
 800e534:	e501      	b.n	800df3a <_dtoa_r+0x49a>
 800e536:	2a00      	cmp	r2, #0
 800e538:	dd03      	ble.n	800e542 <_dtoa_r+0xaa2>
 800e53a:	2b39      	cmp	r3, #57	@ 0x39
 800e53c:	d0ee      	beq.n	800e51c <_dtoa_r+0xa7c>
 800e53e:	3301      	adds	r3, #1
 800e540:	e7c9      	b.n	800e4d6 <_dtoa_r+0xa36>
 800e542:	9a00      	ldr	r2, [sp, #0]
 800e544:	9908      	ldr	r1, [sp, #32]
 800e546:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e54a:	428a      	cmp	r2, r1
 800e54c:	d028      	beq.n	800e5a0 <_dtoa_r+0xb00>
 800e54e:	9902      	ldr	r1, [sp, #8]
 800e550:	2300      	movs	r3, #0
 800e552:	220a      	movs	r2, #10
 800e554:	4648      	mov	r0, r9
 800e556:	f000 f9d5 	bl	800e904 <__multadd>
 800e55a:	42af      	cmp	r7, r5
 800e55c:	9002      	str	r0, [sp, #8]
 800e55e:	f04f 0300 	mov.w	r3, #0
 800e562:	f04f 020a 	mov.w	r2, #10
 800e566:	4639      	mov	r1, r7
 800e568:	4648      	mov	r0, r9
 800e56a:	d107      	bne.n	800e57c <_dtoa_r+0xadc>
 800e56c:	f000 f9ca 	bl	800e904 <__multadd>
 800e570:	4607      	mov	r7, r0
 800e572:	4605      	mov	r5, r0
 800e574:	9b00      	ldr	r3, [sp, #0]
 800e576:	3301      	adds	r3, #1
 800e578:	9300      	str	r3, [sp, #0]
 800e57a:	e777      	b.n	800e46c <_dtoa_r+0x9cc>
 800e57c:	f000 f9c2 	bl	800e904 <__multadd>
 800e580:	4629      	mov	r1, r5
 800e582:	4607      	mov	r7, r0
 800e584:	2300      	movs	r3, #0
 800e586:	220a      	movs	r2, #10
 800e588:	4648      	mov	r0, r9
 800e58a:	f000 f9bb 	bl	800e904 <__multadd>
 800e58e:	4605      	mov	r5, r0
 800e590:	e7f0      	b.n	800e574 <_dtoa_r+0xad4>
 800e592:	f1bb 0f00 	cmp.w	fp, #0
 800e596:	bfcc      	ite	gt
 800e598:	465e      	movgt	r6, fp
 800e59a:	2601      	movle	r6, #1
 800e59c:	4456      	add	r6, sl
 800e59e:	2700      	movs	r7, #0
 800e5a0:	9902      	ldr	r1, [sp, #8]
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	4648      	mov	r0, r9
 800e5a8:	f000 fb9a 	bl	800ece0 <__lshift>
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	9002      	str	r0, [sp, #8]
 800e5b0:	f000 fc02 	bl	800edb8 <__mcmp>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	dcb4      	bgt.n	800e522 <_dtoa_r+0xa82>
 800e5b8:	d102      	bne.n	800e5c0 <_dtoa_r+0xb20>
 800e5ba:	9b00      	ldr	r3, [sp, #0]
 800e5bc:	07db      	lsls	r3, r3, #31
 800e5be:	d4b0      	bmi.n	800e522 <_dtoa_r+0xa82>
 800e5c0:	4633      	mov	r3, r6
 800e5c2:	461e      	mov	r6, r3
 800e5c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5c8:	2a30      	cmp	r2, #48	@ 0x30
 800e5ca:	d0fa      	beq.n	800e5c2 <_dtoa_r+0xb22>
 800e5cc:	e4b5      	b.n	800df3a <_dtoa_r+0x49a>
 800e5ce:	459a      	cmp	sl, r3
 800e5d0:	d1a8      	bne.n	800e524 <_dtoa_r+0xa84>
 800e5d2:	2331      	movs	r3, #49	@ 0x31
 800e5d4:	f108 0801 	add.w	r8, r8, #1
 800e5d8:	f88a 3000 	strb.w	r3, [sl]
 800e5dc:	e4ad      	b.n	800df3a <_dtoa_r+0x49a>
 800e5de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e5e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e63c <_dtoa_r+0xb9c>
 800e5e4:	b11b      	cbz	r3, 800e5ee <_dtoa_r+0xb4e>
 800e5e6:	f10a 0308 	add.w	r3, sl, #8
 800e5ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e5ec:	6013      	str	r3, [r2, #0]
 800e5ee:	4650      	mov	r0, sl
 800e5f0:	b017      	add	sp, #92	@ 0x5c
 800e5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f6:	9b07      	ldr	r3, [sp, #28]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	f77f ae2e 	ble.w	800e25a <_dtoa_r+0x7ba>
 800e5fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e600:	9308      	str	r3, [sp, #32]
 800e602:	2001      	movs	r0, #1
 800e604:	e64d      	b.n	800e2a2 <_dtoa_r+0x802>
 800e606:	f1bb 0f00 	cmp.w	fp, #0
 800e60a:	f77f aed9 	ble.w	800e3c0 <_dtoa_r+0x920>
 800e60e:	4656      	mov	r6, sl
 800e610:	9802      	ldr	r0, [sp, #8]
 800e612:	4621      	mov	r1, r4
 800e614:	f7ff f9ba 	bl	800d98c <quorem>
 800e618:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e61c:	f806 3b01 	strb.w	r3, [r6], #1
 800e620:	eba6 020a 	sub.w	r2, r6, sl
 800e624:	4593      	cmp	fp, r2
 800e626:	ddb4      	ble.n	800e592 <_dtoa_r+0xaf2>
 800e628:	9902      	ldr	r1, [sp, #8]
 800e62a:	2300      	movs	r3, #0
 800e62c:	220a      	movs	r2, #10
 800e62e:	4648      	mov	r0, r9
 800e630:	f000 f968 	bl	800e904 <__multadd>
 800e634:	9002      	str	r0, [sp, #8]
 800e636:	e7eb      	b.n	800e610 <_dtoa_r+0xb70>
 800e638:	08011c65 	.word	0x08011c65
 800e63c:	08011be9 	.word	0x08011be9

0800e640 <_free_r>:
 800e640:	b538      	push	{r3, r4, r5, lr}
 800e642:	4605      	mov	r5, r0
 800e644:	2900      	cmp	r1, #0
 800e646:	d041      	beq.n	800e6cc <_free_r+0x8c>
 800e648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e64c:	1f0c      	subs	r4, r1, #4
 800e64e:	2b00      	cmp	r3, #0
 800e650:	bfb8      	it	lt
 800e652:	18e4      	addlt	r4, r4, r3
 800e654:	f000 f8e8 	bl	800e828 <__malloc_lock>
 800e658:	4a1d      	ldr	r2, [pc, #116]	@ (800e6d0 <_free_r+0x90>)
 800e65a:	6813      	ldr	r3, [r2, #0]
 800e65c:	b933      	cbnz	r3, 800e66c <_free_r+0x2c>
 800e65e:	6063      	str	r3, [r4, #4]
 800e660:	6014      	str	r4, [r2, #0]
 800e662:	4628      	mov	r0, r5
 800e664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e668:	f000 b8e4 	b.w	800e834 <__malloc_unlock>
 800e66c:	42a3      	cmp	r3, r4
 800e66e:	d908      	bls.n	800e682 <_free_r+0x42>
 800e670:	6820      	ldr	r0, [r4, #0]
 800e672:	1821      	adds	r1, r4, r0
 800e674:	428b      	cmp	r3, r1
 800e676:	bf01      	itttt	eq
 800e678:	6819      	ldreq	r1, [r3, #0]
 800e67a:	685b      	ldreq	r3, [r3, #4]
 800e67c:	1809      	addeq	r1, r1, r0
 800e67e:	6021      	streq	r1, [r4, #0]
 800e680:	e7ed      	b.n	800e65e <_free_r+0x1e>
 800e682:	461a      	mov	r2, r3
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	b10b      	cbz	r3, 800e68c <_free_r+0x4c>
 800e688:	42a3      	cmp	r3, r4
 800e68a:	d9fa      	bls.n	800e682 <_free_r+0x42>
 800e68c:	6811      	ldr	r1, [r2, #0]
 800e68e:	1850      	adds	r0, r2, r1
 800e690:	42a0      	cmp	r0, r4
 800e692:	d10b      	bne.n	800e6ac <_free_r+0x6c>
 800e694:	6820      	ldr	r0, [r4, #0]
 800e696:	4401      	add	r1, r0
 800e698:	1850      	adds	r0, r2, r1
 800e69a:	4283      	cmp	r3, r0
 800e69c:	6011      	str	r1, [r2, #0]
 800e69e:	d1e0      	bne.n	800e662 <_free_r+0x22>
 800e6a0:	6818      	ldr	r0, [r3, #0]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	6053      	str	r3, [r2, #4]
 800e6a6:	4408      	add	r0, r1
 800e6a8:	6010      	str	r0, [r2, #0]
 800e6aa:	e7da      	b.n	800e662 <_free_r+0x22>
 800e6ac:	d902      	bls.n	800e6b4 <_free_r+0x74>
 800e6ae:	230c      	movs	r3, #12
 800e6b0:	602b      	str	r3, [r5, #0]
 800e6b2:	e7d6      	b.n	800e662 <_free_r+0x22>
 800e6b4:	6820      	ldr	r0, [r4, #0]
 800e6b6:	1821      	adds	r1, r4, r0
 800e6b8:	428b      	cmp	r3, r1
 800e6ba:	bf04      	itt	eq
 800e6bc:	6819      	ldreq	r1, [r3, #0]
 800e6be:	685b      	ldreq	r3, [r3, #4]
 800e6c0:	6063      	str	r3, [r4, #4]
 800e6c2:	bf04      	itt	eq
 800e6c4:	1809      	addeq	r1, r1, r0
 800e6c6:	6021      	streq	r1, [r4, #0]
 800e6c8:	6054      	str	r4, [r2, #4]
 800e6ca:	e7ca      	b.n	800e662 <_free_r+0x22>
 800e6cc:	bd38      	pop	{r3, r4, r5, pc}
 800e6ce:	bf00      	nop
 800e6d0:	20003288 	.word	0x20003288

0800e6d4 <malloc>:
 800e6d4:	4b02      	ldr	r3, [pc, #8]	@ (800e6e0 <malloc+0xc>)
 800e6d6:	4601      	mov	r1, r0
 800e6d8:	6818      	ldr	r0, [r3, #0]
 800e6da:	f000 b825 	b.w	800e728 <_malloc_r>
 800e6de:	bf00      	nop
 800e6e0:	2000003c 	.word	0x2000003c

0800e6e4 <sbrk_aligned>:
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	4e0f      	ldr	r6, [pc, #60]	@ (800e724 <sbrk_aligned+0x40>)
 800e6e8:	460c      	mov	r4, r1
 800e6ea:	6831      	ldr	r1, [r6, #0]
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	b911      	cbnz	r1, 800e6f6 <sbrk_aligned+0x12>
 800e6f0:	f001 fe04 	bl	80102fc <_sbrk_r>
 800e6f4:	6030      	str	r0, [r6, #0]
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	f001 fdff 	bl	80102fc <_sbrk_r>
 800e6fe:	1c43      	adds	r3, r0, #1
 800e700:	d103      	bne.n	800e70a <sbrk_aligned+0x26>
 800e702:	f04f 34ff 	mov.w	r4, #4294967295
 800e706:	4620      	mov	r0, r4
 800e708:	bd70      	pop	{r4, r5, r6, pc}
 800e70a:	1cc4      	adds	r4, r0, #3
 800e70c:	f024 0403 	bic.w	r4, r4, #3
 800e710:	42a0      	cmp	r0, r4
 800e712:	d0f8      	beq.n	800e706 <sbrk_aligned+0x22>
 800e714:	1a21      	subs	r1, r4, r0
 800e716:	4628      	mov	r0, r5
 800e718:	f001 fdf0 	bl	80102fc <_sbrk_r>
 800e71c:	3001      	adds	r0, #1
 800e71e:	d1f2      	bne.n	800e706 <sbrk_aligned+0x22>
 800e720:	e7ef      	b.n	800e702 <sbrk_aligned+0x1e>
 800e722:	bf00      	nop
 800e724:	20003284 	.word	0x20003284

0800e728 <_malloc_r>:
 800e728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e72c:	1ccd      	adds	r5, r1, #3
 800e72e:	f025 0503 	bic.w	r5, r5, #3
 800e732:	3508      	adds	r5, #8
 800e734:	2d0c      	cmp	r5, #12
 800e736:	bf38      	it	cc
 800e738:	250c      	movcc	r5, #12
 800e73a:	2d00      	cmp	r5, #0
 800e73c:	4606      	mov	r6, r0
 800e73e:	db01      	blt.n	800e744 <_malloc_r+0x1c>
 800e740:	42a9      	cmp	r1, r5
 800e742:	d904      	bls.n	800e74e <_malloc_r+0x26>
 800e744:	230c      	movs	r3, #12
 800e746:	6033      	str	r3, [r6, #0]
 800e748:	2000      	movs	r0, #0
 800e74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e74e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e824 <_malloc_r+0xfc>
 800e752:	f000 f869 	bl	800e828 <__malloc_lock>
 800e756:	f8d8 3000 	ldr.w	r3, [r8]
 800e75a:	461c      	mov	r4, r3
 800e75c:	bb44      	cbnz	r4, 800e7b0 <_malloc_r+0x88>
 800e75e:	4629      	mov	r1, r5
 800e760:	4630      	mov	r0, r6
 800e762:	f7ff ffbf 	bl	800e6e4 <sbrk_aligned>
 800e766:	1c43      	adds	r3, r0, #1
 800e768:	4604      	mov	r4, r0
 800e76a:	d158      	bne.n	800e81e <_malloc_r+0xf6>
 800e76c:	f8d8 4000 	ldr.w	r4, [r8]
 800e770:	4627      	mov	r7, r4
 800e772:	2f00      	cmp	r7, #0
 800e774:	d143      	bne.n	800e7fe <_malloc_r+0xd6>
 800e776:	2c00      	cmp	r4, #0
 800e778:	d04b      	beq.n	800e812 <_malloc_r+0xea>
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	4639      	mov	r1, r7
 800e77e:	4630      	mov	r0, r6
 800e780:	eb04 0903 	add.w	r9, r4, r3
 800e784:	f001 fdba 	bl	80102fc <_sbrk_r>
 800e788:	4581      	cmp	r9, r0
 800e78a:	d142      	bne.n	800e812 <_malloc_r+0xea>
 800e78c:	6821      	ldr	r1, [r4, #0]
 800e78e:	1a6d      	subs	r5, r5, r1
 800e790:	4629      	mov	r1, r5
 800e792:	4630      	mov	r0, r6
 800e794:	f7ff ffa6 	bl	800e6e4 <sbrk_aligned>
 800e798:	3001      	adds	r0, #1
 800e79a:	d03a      	beq.n	800e812 <_malloc_r+0xea>
 800e79c:	6823      	ldr	r3, [r4, #0]
 800e79e:	442b      	add	r3, r5
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a6:	685a      	ldr	r2, [r3, #4]
 800e7a8:	bb62      	cbnz	r2, 800e804 <_malloc_r+0xdc>
 800e7aa:	f8c8 7000 	str.w	r7, [r8]
 800e7ae:	e00f      	b.n	800e7d0 <_malloc_r+0xa8>
 800e7b0:	6822      	ldr	r2, [r4, #0]
 800e7b2:	1b52      	subs	r2, r2, r5
 800e7b4:	d420      	bmi.n	800e7f8 <_malloc_r+0xd0>
 800e7b6:	2a0b      	cmp	r2, #11
 800e7b8:	d917      	bls.n	800e7ea <_malloc_r+0xc2>
 800e7ba:	1961      	adds	r1, r4, r5
 800e7bc:	42a3      	cmp	r3, r4
 800e7be:	6025      	str	r5, [r4, #0]
 800e7c0:	bf18      	it	ne
 800e7c2:	6059      	strne	r1, [r3, #4]
 800e7c4:	6863      	ldr	r3, [r4, #4]
 800e7c6:	bf08      	it	eq
 800e7c8:	f8c8 1000 	streq.w	r1, [r8]
 800e7cc:	5162      	str	r2, [r4, r5]
 800e7ce:	604b      	str	r3, [r1, #4]
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f000 f82f 	bl	800e834 <__malloc_unlock>
 800e7d6:	f104 000b 	add.w	r0, r4, #11
 800e7da:	1d23      	adds	r3, r4, #4
 800e7dc:	f020 0007 	bic.w	r0, r0, #7
 800e7e0:	1ac2      	subs	r2, r0, r3
 800e7e2:	bf1c      	itt	ne
 800e7e4:	1a1b      	subne	r3, r3, r0
 800e7e6:	50a3      	strne	r3, [r4, r2]
 800e7e8:	e7af      	b.n	800e74a <_malloc_r+0x22>
 800e7ea:	6862      	ldr	r2, [r4, #4]
 800e7ec:	42a3      	cmp	r3, r4
 800e7ee:	bf0c      	ite	eq
 800e7f0:	f8c8 2000 	streq.w	r2, [r8]
 800e7f4:	605a      	strne	r2, [r3, #4]
 800e7f6:	e7eb      	b.n	800e7d0 <_malloc_r+0xa8>
 800e7f8:	4623      	mov	r3, r4
 800e7fa:	6864      	ldr	r4, [r4, #4]
 800e7fc:	e7ae      	b.n	800e75c <_malloc_r+0x34>
 800e7fe:	463c      	mov	r4, r7
 800e800:	687f      	ldr	r7, [r7, #4]
 800e802:	e7b6      	b.n	800e772 <_malloc_r+0x4a>
 800e804:	461a      	mov	r2, r3
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	42a3      	cmp	r3, r4
 800e80a:	d1fb      	bne.n	800e804 <_malloc_r+0xdc>
 800e80c:	2300      	movs	r3, #0
 800e80e:	6053      	str	r3, [r2, #4]
 800e810:	e7de      	b.n	800e7d0 <_malloc_r+0xa8>
 800e812:	230c      	movs	r3, #12
 800e814:	6033      	str	r3, [r6, #0]
 800e816:	4630      	mov	r0, r6
 800e818:	f000 f80c 	bl	800e834 <__malloc_unlock>
 800e81c:	e794      	b.n	800e748 <_malloc_r+0x20>
 800e81e:	6005      	str	r5, [r0, #0]
 800e820:	e7d6      	b.n	800e7d0 <_malloc_r+0xa8>
 800e822:	bf00      	nop
 800e824:	20003288 	.word	0x20003288

0800e828 <__malloc_lock>:
 800e828:	4801      	ldr	r0, [pc, #4]	@ (800e830 <__malloc_lock+0x8>)
 800e82a:	f7ff b898 	b.w	800d95e <__retarget_lock_acquire_recursive>
 800e82e:	bf00      	nop
 800e830:	20003280 	.word	0x20003280

0800e834 <__malloc_unlock>:
 800e834:	4801      	ldr	r0, [pc, #4]	@ (800e83c <__malloc_unlock+0x8>)
 800e836:	f7ff b893 	b.w	800d960 <__retarget_lock_release_recursive>
 800e83a:	bf00      	nop
 800e83c:	20003280 	.word	0x20003280

0800e840 <_Balloc>:
 800e840:	b570      	push	{r4, r5, r6, lr}
 800e842:	69c6      	ldr	r6, [r0, #28]
 800e844:	4604      	mov	r4, r0
 800e846:	460d      	mov	r5, r1
 800e848:	b976      	cbnz	r6, 800e868 <_Balloc+0x28>
 800e84a:	2010      	movs	r0, #16
 800e84c:	f7ff ff42 	bl	800e6d4 <malloc>
 800e850:	4602      	mov	r2, r0
 800e852:	61e0      	str	r0, [r4, #28]
 800e854:	b920      	cbnz	r0, 800e860 <_Balloc+0x20>
 800e856:	4b18      	ldr	r3, [pc, #96]	@ (800e8b8 <_Balloc+0x78>)
 800e858:	4818      	ldr	r0, [pc, #96]	@ (800e8bc <_Balloc+0x7c>)
 800e85a:	216b      	movs	r1, #107	@ 0x6b
 800e85c:	f001 fd68 	bl	8010330 <__assert_func>
 800e860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e864:	6006      	str	r6, [r0, #0]
 800e866:	60c6      	str	r6, [r0, #12]
 800e868:	69e6      	ldr	r6, [r4, #28]
 800e86a:	68f3      	ldr	r3, [r6, #12]
 800e86c:	b183      	cbz	r3, 800e890 <_Balloc+0x50>
 800e86e:	69e3      	ldr	r3, [r4, #28]
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e876:	b9b8      	cbnz	r0, 800e8a8 <_Balloc+0x68>
 800e878:	2101      	movs	r1, #1
 800e87a:	fa01 f605 	lsl.w	r6, r1, r5
 800e87e:	1d72      	adds	r2, r6, #5
 800e880:	0092      	lsls	r2, r2, #2
 800e882:	4620      	mov	r0, r4
 800e884:	f001 fd72 	bl	801036c <_calloc_r>
 800e888:	b160      	cbz	r0, 800e8a4 <_Balloc+0x64>
 800e88a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e88e:	e00e      	b.n	800e8ae <_Balloc+0x6e>
 800e890:	2221      	movs	r2, #33	@ 0x21
 800e892:	2104      	movs	r1, #4
 800e894:	4620      	mov	r0, r4
 800e896:	f001 fd69 	bl	801036c <_calloc_r>
 800e89a:	69e3      	ldr	r3, [r4, #28]
 800e89c:	60f0      	str	r0, [r6, #12]
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1e4      	bne.n	800e86e <_Balloc+0x2e>
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	bd70      	pop	{r4, r5, r6, pc}
 800e8a8:	6802      	ldr	r2, [r0, #0]
 800e8aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8b4:	e7f7      	b.n	800e8a6 <_Balloc+0x66>
 800e8b6:	bf00      	nop
 800e8b8:	08011bf6 	.word	0x08011bf6
 800e8bc:	08011c76 	.word	0x08011c76

0800e8c0 <_Bfree>:
 800e8c0:	b570      	push	{r4, r5, r6, lr}
 800e8c2:	69c6      	ldr	r6, [r0, #28]
 800e8c4:	4605      	mov	r5, r0
 800e8c6:	460c      	mov	r4, r1
 800e8c8:	b976      	cbnz	r6, 800e8e8 <_Bfree+0x28>
 800e8ca:	2010      	movs	r0, #16
 800e8cc:	f7ff ff02 	bl	800e6d4 <malloc>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	61e8      	str	r0, [r5, #28]
 800e8d4:	b920      	cbnz	r0, 800e8e0 <_Bfree+0x20>
 800e8d6:	4b09      	ldr	r3, [pc, #36]	@ (800e8fc <_Bfree+0x3c>)
 800e8d8:	4809      	ldr	r0, [pc, #36]	@ (800e900 <_Bfree+0x40>)
 800e8da:	218f      	movs	r1, #143	@ 0x8f
 800e8dc:	f001 fd28 	bl	8010330 <__assert_func>
 800e8e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8e4:	6006      	str	r6, [r0, #0]
 800e8e6:	60c6      	str	r6, [r0, #12]
 800e8e8:	b13c      	cbz	r4, 800e8fa <_Bfree+0x3a>
 800e8ea:	69eb      	ldr	r3, [r5, #28]
 800e8ec:	6862      	ldr	r2, [r4, #4]
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8f4:	6021      	str	r1, [r4, #0]
 800e8f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8fa:	bd70      	pop	{r4, r5, r6, pc}
 800e8fc:	08011bf6 	.word	0x08011bf6
 800e900:	08011c76 	.word	0x08011c76

0800e904 <__multadd>:
 800e904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e908:	690d      	ldr	r5, [r1, #16]
 800e90a:	4607      	mov	r7, r0
 800e90c:	460c      	mov	r4, r1
 800e90e:	461e      	mov	r6, r3
 800e910:	f101 0c14 	add.w	ip, r1, #20
 800e914:	2000      	movs	r0, #0
 800e916:	f8dc 3000 	ldr.w	r3, [ip]
 800e91a:	b299      	uxth	r1, r3
 800e91c:	fb02 6101 	mla	r1, r2, r1, r6
 800e920:	0c1e      	lsrs	r6, r3, #16
 800e922:	0c0b      	lsrs	r3, r1, #16
 800e924:	fb02 3306 	mla	r3, r2, r6, r3
 800e928:	b289      	uxth	r1, r1
 800e92a:	3001      	adds	r0, #1
 800e92c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e930:	4285      	cmp	r5, r0
 800e932:	f84c 1b04 	str.w	r1, [ip], #4
 800e936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e93a:	dcec      	bgt.n	800e916 <__multadd+0x12>
 800e93c:	b30e      	cbz	r6, 800e982 <__multadd+0x7e>
 800e93e:	68a3      	ldr	r3, [r4, #8]
 800e940:	42ab      	cmp	r3, r5
 800e942:	dc19      	bgt.n	800e978 <__multadd+0x74>
 800e944:	6861      	ldr	r1, [r4, #4]
 800e946:	4638      	mov	r0, r7
 800e948:	3101      	adds	r1, #1
 800e94a:	f7ff ff79 	bl	800e840 <_Balloc>
 800e94e:	4680      	mov	r8, r0
 800e950:	b928      	cbnz	r0, 800e95e <__multadd+0x5a>
 800e952:	4602      	mov	r2, r0
 800e954:	4b0c      	ldr	r3, [pc, #48]	@ (800e988 <__multadd+0x84>)
 800e956:	480d      	ldr	r0, [pc, #52]	@ (800e98c <__multadd+0x88>)
 800e958:	21ba      	movs	r1, #186	@ 0xba
 800e95a:	f001 fce9 	bl	8010330 <__assert_func>
 800e95e:	6922      	ldr	r2, [r4, #16]
 800e960:	3202      	adds	r2, #2
 800e962:	f104 010c 	add.w	r1, r4, #12
 800e966:	0092      	lsls	r2, r2, #2
 800e968:	300c      	adds	r0, #12
 800e96a:	f7fe fffa 	bl	800d962 <memcpy>
 800e96e:	4621      	mov	r1, r4
 800e970:	4638      	mov	r0, r7
 800e972:	f7ff ffa5 	bl	800e8c0 <_Bfree>
 800e976:	4644      	mov	r4, r8
 800e978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e97c:	3501      	adds	r5, #1
 800e97e:	615e      	str	r6, [r3, #20]
 800e980:	6125      	str	r5, [r4, #16]
 800e982:	4620      	mov	r0, r4
 800e984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e988:	08011c65 	.word	0x08011c65
 800e98c:	08011c76 	.word	0x08011c76

0800e990 <__s2b>:
 800e990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e994:	460c      	mov	r4, r1
 800e996:	4615      	mov	r5, r2
 800e998:	461f      	mov	r7, r3
 800e99a:	2209      	movs	r2, #9
 800e99c:	3308      	adds	r3, #8
 800e99e:	4606      	mov	r6, r0
 800e9a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	db09      	blt.n	800e9c0 <__s2b+0x30>
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	f7ff ff47 	bl	800e840 <_Balloc>
 800e9b2:	b940      	cbnz	r0, 800e9c6 <__s2b+0x36>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	4b19      	ldr	r3, [pc, #100]	@ (800ea1c <__s2b+0x8c>)
 800e9b8:	4819      	ldr	r0, [pc, #100]	@ (800ea20 <__s2b+0x90>)
 800e9ba:	21d3      	movs	r1, #211	@ 0xd3
 800e9bc:	f001 fcb8 	bl	8010330 <__assert_func>
 800e9c0:	0052      	lsls	r2, r2, #1
 800e9c2:	3101      	adds	r1, #1
 800e9c4:	e7f0      	b.n	800e9a8 <__s2b+0x18>
 800e9c6:	9b08      	ldr	r3, [sp, #32]
 800e9c8:	6143      	str	r3, [r0, #20]
 800e9ca:	2d09      	cmp	r5, #9
 800e9cc:	f04f 0301 	mov.w	r3, #1
 800e9d0:	6103      	str	r3, [r0, #16]
 800e9d2:	dd16      	ble.n	800ea02 <__s2b+0x72>
 800e9d4:	f104 0909 	add.w	r9, r4, #9
 800e9d8:	46c8      	mov	r8, r9
 800e9da:	442c      	add	r4, r5
 800e9dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e9e0:	4601      	mov	r1, r0
 800e9e2:	3b30      	subs	r3, #48	@ 0x30
 800e9e4:	220a      	movs	r2, #10
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f7ff ff8c 	bl	800e904 <__multadd>
 800e9ec:	45a0      	cmp	r8, r4
 800e9ee:	d1f5      	bne.n	800e9dc <__s2b+0x4c>
 800e9f0:	f1a5 0408 	sub.w	r4, r5, #8
 800e9f4:	444c      	add	r4, r9
 800e9f6:	1b2d      	subs	r5, r5, r4
 800e9f8:	1963      	adds	r3, r4, r5
 800e9fa:	42bb      	cmp	r3, r7
 800e9fc:	db04      	blt.n	800ea08 <__s2b+0x78>
 800e9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea02:	340a      	adds	r4, #10
 800ea04:	2509      	movs	r5, #9
 800ea06:	e7f6      	b.n	800e9f6 <__s2b+0x66>
 800ea08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea0c:	4601      	mov	r1, r0
 800ea0e:	3b30      	subs	r3, #48	@ 0x30
 800ea10:	220a      	movs	r2, #10
 800ea12:	4630      	mov	r0, r6
 800ea14:	f7ff ff76 	bl	800e904 <__multadd>
 800ea18:	e7ee      	b.n	800e9f8 <__s2b+0x68>
 800ea1a:	bf00      	nop
 800ea1c:	08011c65 	.word	0x08011c65
 800ea20:	08011c76 	.word	0x08011c76

0800ea24 <__hi0bits>:
 800ea24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ea28:	4603      	mov	r3, r0
 800ea2a:	bf36      	itet	cc
 800ea2c:	0403      	lslcc	r3, r0, #16
 800ea2e:	2000      	movcs	r0, #0
 800ea30:	2010      	movcc	r0, #16
 800ea32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea36:	bf3c      	itt	cc
 800ea38:	021b      	lslcc	r3, r3, #8
 800ea3a:	3008      	addcc	r0, #8
 800ea3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea40:	bf3c      	itt	cc
 800ea42:	011b      	lslcc	r3, r3, #4
 800ea44:	3004      	addcc	r0, #4
 800ea46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea4a:	bf3c      	itt	cc
 800ea4c:	009b      	lslcc	r3, r3, #2
 800ea4e:	3002      	addcc	r0, #2
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	db05      	blt.n	800ea60 <__hi0bits+0x3c>
 800ea54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ea58:	f100 0001 	add.w	r0, r0, #1
 800ea5c:	bf08      	it	eq
 800ea5e:	2020      	moveq	r0, #32
 800ea60:	4770      	bx	lr

0800ea62 <__lo0bits>:
 800ea62:	6803      	ldr	r3, [r0, #0]
 800ea64:	4602      	mov	r2, r0
 800ea66:	f013 0007 	ands.w	r0, r3, #7
 800ea6a:	d00b      	beq.n	800ea84 <__lo0bits+0x22>
 800ea6c:	07d9      	lsls	r1, r3, #31
 800ea6e:	d421      	bmi.n	800eab4 <__lo0bits+0x52>
 800ea70:	0798      	lsls	r0, r3, #30
 800ea72:	bf49      	itett	mi
 800ea74:	085b      	lsrmi	r3, r3, #1
 800ea76:	089b      	lsrpl	r3, r3, #2
 800ea78:	2001      	movmi	r0, #1
 800ea7a:	6013      	strmi	r3, [r2, #0]
 800ea7c:	bf5c      	itt	pl
 800ea7e:	6013      	strpl	r3, [r2, #0]
 800ea80:	2002      	movpl	r0, #2
 800ea82:	4770      	bx	lr
 800ea84:	b299      	uxth	r1, r3
 800ea86:	b909      	cbnz	r1, 800ea8c <__lo0bits+0x2a>
 800ea88:	0c1b      	lsrs	r3, r3, #16
 800ea8a:	2010      	movs	r0, #16
 800ea8c:	b2d9      	uxtb	r1, r3
 800ea8e:	b909      	cbnz	r1, 800ea94 <__lo0bits+0x32>
 800ea90:	3008      	adds	r0, #8
 800ea92:	0a1b      	lsrs	r3, r3, #8
 800ea94:	0719      	lsls	r1, r3, #28
 800ea96:	bf04      	itt	eq
 800ea98:	091b      	lsreq	r3, r3, #4
 800ea9a:	3004      	addeq	r0, #4
 800ea9c:	0799      	lsls	r1, r3, #30
 800ea9e:	bf04      	itt	eq
 800eaa0:	089b      	lsreq	r3, r3, #2
 800eaa2:	3002      	addeq	r0, #2
 800eaa4:	07d9      	lsls	r1, r3, #31
 800eaa6:	d403      	bmi.n	800eab0 <__lo0bits+0x4e>
 800eaa8:	085b      	lsrs	r3, r3, #1
 800eaaa:	f100 0001 	add.w	r0, r0, #1
 800eaae:	d003      	beq.n	800eab8 <__lo0bits+0x56>
 800eab0:	6013      	str	r3, [r2, #0]
 800eab2:	4770      	bx	lr
 800eab4:	2000      	movs	r0, #0
 800eab6:	4770      	bx	lr
 800eab8:	2020      	movs	r0, #32
 800eaba:	4770      	bx	lr

0800eabc <__i2b>:
 800eabc:	b510      	push	{r4, lr}
 800eabe:	460c      	mov	r4, r1
 800eac0:	2101      	movs	r1, #1
 800eac2:	f7ff febd 	bl	800e840 <_Balloc>
 800eac6:	4602      	mov	r2, r0
 800eac8:	b928      	cbnz	r0, 800ead6 <__i2b+0x1a>
 800eaca:	4b05      	ldr	r3, [pc, #20]	@ (800eae0 <__i2b+0x24>)
 800eacc:	4805      	ldr	r0, [pc, #20]	@ (800eae4 <__i2b+0x28>)
 800eace:	f240 1145 	movw	r1, #325	@ 0x145
 800ead2:	f001 fc2d 	bl	8010330 <__assert_func>
 800ead6:	2301      	movs	r3, #1
 800ead8:	6144      	str	r4, [r0, #20]
 800eada:	6103      	str	r3, [r0, #16]
 800eadc:	bd10      	pop	{r4, pc}
 800eade:	bf00      	nop
 800eae0:	08011c65 	.word	0x08011c65
 800eae4:	08011c76 	.word	0x08011c76

0800eae8 <__multiply>:
 800eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaec:	4617      	mov	r7, r2
 800eaee:	690a      	ldr	r2, [r1, #16]
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	bfa8      	it	ge
 800eaf6:	463b      	movge	r3, r7
 800eaf8:	4689      	mov	r9, r1
 800eafa:	bfa4      	itt	ge
 800eafc:	460f      	movge	r7, r1
 800eafe:	4699      	movge	r9, r3
 800eb00:	693d      	ldr	r5, [r7, #16]
 800eb02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	6879      	ldr	r1, [r7, #4]
 800eb0a:	eb05 060a 	add.w	r6, r5, sl
 800eb0e:	42b3      	cmp	r3, r6
 800eb10:	b085      	sub	sp, #20
 800eb12:	bfb8      	it	lt
 800eb14:	3101      	addlt	r1, #1
 800eb16:	f7ff fe93 	bl	800e840 <_Balloc>
 800eb1a:	b930      	cbnz	r0, 800eb2a <__multiply+0x42>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	4b41      	ldr	r3, [pc, #260]	@ (800ec24 <__multiply+0x13c>)
 800eb20:	4841      	ldr	r0, [pc, #260]	@ (800ec28 <__multiply+0x140>)
 800eb22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eb26:	f001 fc03 	bl	8010330 <__assert_func>
 800eb2a:	f100 0414 	add.w	r4, r0, #20
 800eb2e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800eb32:	4623      	mov	r3, r4
 800eb34:	2200      	movs	r2, #0
 800eb36:	4573      	cmp	r3, lr
 800eb38:	d320      	bcc.n	800eb7c <__multiply+0x94>
 800eb3a:	f107 0814 	add.w	r8, r7, #20
 800eb3e:	f109 0114 	add.w	r1, r9, #20
 800eb42:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800eb46:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800eb4a:	9302      	str	r3, [sp, #8]
 800eb4c:	1beb      	subs	r3, r5, r7
 800eb4e:	3b15      	subs	r3, #21
 800eb50:	f023 0303 	bic.w	r3, r3, #3
 800eb54:	3304      	adds	r3, #4
 800eb56:	3715      	adds	r7, #21
 800eb58:	42bd      	cmp	r5, r7
 800eb5a:	bf38      	it	cc
 800eb5c:	2304      	movcc	r3, #4
 800eb5e:	9301      	str	r3, [sp, #4]
 800eb60:	9b02      	ldr	r3, [sp, #8]
 800eb62:	9103      	str	r1, [sp, #12]
 800eb64:	428b      	cmp	r3, r1
 800eb66:	d80c      	bhi.n	800eb82 <__multiply+0x9a>
 800eb68:	2e00      	cmp	r6, #0
 800eb6a:	dd03      	ble.n	800eb74 <__multiply+0x8c>
 800eb6c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d055      	beq.n	800ec20 <__multiply+0x138>
 800eb74:	6106      	str	r6, [r0, #16]
 800eb76:	b005      	add	sp, #20
 800eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7c:	f843 2b04 	str.w	r2, [r3], #4
 800eb80:	e7d9      	b.n	800eb36 <__multiply+0x4e>
 800eb82:	f8b1 a000 	ldrh.w	sl, [r1]
 800eb86:	f1ba 0f00 	cmp.w	sl, #0
 800eb8a:	d01f      	beq.n	800ebcc <__multiply+0xe4>
 800eb8c:	46c4      	mov	ip, r8
 800eb8e:	46a1      	mov	r9, r4
 800eb90:	2700      	movs	r7, #0
 800eb92:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb96:	f8d9 3000 	ldr.w	r3, [r9]
 800eb9a:	fa1f fb82 	uxth.w	fp, r2
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	fb0a 330b 	mla	r3, sl, fp, r3
 800eba4:	443b      	add	r3, r7
 800eba6:	f8d9 7000 	ldr.w	r7, [r9]
 800ebaa:	0c12      	lsrs	r2, r2, #16
 800ebac:	0c3f      	lsrs	r7, r7, #16
 800ebae:	fb0a 7202 	mla	r2, sl, r2, r7
 800ebb2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebbc:	4565      	cmp	r5, ip
 800ebbe:	f849 3b04 	str.w	r3, [r9], #4
 800ebc2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ebc6:	d8e4      	bhi.n	800eb92 <__multiply+0xaa>
 800ebc8:	9b01      	ldr	r3, [sp, #4]
 800ebca:	50e7      	str	r7, [r4, r3]
 800ebcc:	9b03      	ldr	r3, [sp, #12]
 800ebce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ebd2:	3104      	adds	r1, #4
 800ebd4:	f1b9 0f00 	cmp.w	r9, #0
 800ebd8:	d020      	beq.n	800ec1c <__multiply+0x134>
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	4647      	mov	r7, r8
 800ebde:	46a4      	mov	ip, r4
 800ebe0:	f04f 0a00 	mov.w	sl, #0
 800ebe4:	f8b7 b000 	ldrh.w	fp, [r7]
 800ebe8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ebec:	fb09 220b 	mla	r2, r9, fp, r2
 800ebf0:	4452      	add	r2, sl
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebf8:	f84c 3b04 	str.w	r3, [ip], #4
 800ebfc:	f857 3b04 	ldr.w	r3, [r7], #4
 800ec00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec04:	f8bc 3000 	ldrh.w	r3, [ip]
 800ec08:	fb09 330a 	mla	r3, r9, sl, r3
 800ec0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ec10:	42bd      	cmp	r5, r7
 800ec12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec16:	d8e5      	bhi.n	800ebe4 <__multiply+0xfc>
 800ec18:	9a01      	ldr	r2, [sp, #4]
 800ec1a:	50a3      	str	r3, [r4, r2]
 800ec1c:	3404      	adds	r4, #4
 800ec1e:	e79f      	b.n	800eb60 <__multiply+0x78>
 800ec20:	3e01      	subs	r6, #1
 800ec22:	e7a1      	b.n	800eb68 <__multiply+0x80>
 800ec24:	08011c65 	.word	0x08011c65
 800ec28:	08011c76 	.word	0x08011c76

0800ec2c <__pow5mult>:
 800ec2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec30:	4615      	mov	r5, r2
 800ec32:	f012 0203 	ands.w	r2, r2, #3
 800ec36:	4607      	mov	r7, r0
 800ec38:	460e      	mov	r6, r1
 800ec3a:	d007      	beq.n	800ec4c <__pow5mult+0x20>
 800ec3c:	4c25      	ldr	r4, [pc, #148]	@ (800ecd4 <__pow5mult+0xa8>)
 800ec3e:	3a01      	subs	r2, #1
 800ec40:	2300      	movs	r3, #0
 800ec42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec46:	f7ff fe5d 	bl	800e904 <__multadd>
 800ec4a:	4606      	mov	r6, r0
 800ec4c:	10ad      	asrs	r5, r5, #2
 800ec4e:	d03d      	beq.n	800eccc <__pow5mult+0xa0>
 800ec50:	69fc      	ldr	r4, [r7, #28]
 800ec52:	b97c      	cbnz	r4, 800ec74 <__pow5mult+0x48>
 800ec54:	2010      	movs	r0, #16
 800ec56:	f7ff fd3d 	bl	800e6d4 <malloc>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	61f8      	str	r0, [r7, #28]
 800ec5e:	b928      	cbnz	r0, 800ec6c <__pow5mult+0x40>
 800ec60:	4b1d      	ldr	r3, [pc, #116]	@ (800ecd8 <__pow5mult+0xac>)
 800ec62:	481e      	ldr	r0, [pc, #120]	@ (800ecdc <__pow5mult+0xb0>)
 800ec64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ec68:	f001 fb62 	bl	8010330 <__assert_func>
 800ec6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec70:	6004      	str	r4, [r0, #0]
 800ec72:	60c4      	str	r4, [r0, #12]
 800ec74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ec78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec7c:	b94c      	cbnz	r4, 800ec92 <__pow5mult+0x66>
 800ec7e:	f240 2171 	movw	r1, #625	@ 0x271
 800ec82:	4638      	mov	r0, r7
 800ec84:	f7ff ff1a 	bl	800eabc <__i2b>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec8e:	4604      	mov	r4, r0
 800ec90:	6003      	str	r3, [r0, #0]
 800ec92:	f04f 0900 	mov.w	r9, #0
 800ec96:	07eb      	lsls	r3, r5, #31
 800ec98:	d50a      	bpl.n	800ecb0 <__pow5mult+0x84>
 800ec9a:	4631      	mov	r1, r6
 800ec9c:	4622      	mov	r2, r4
 800ec9e:	4638      	mov	r0, r7
 800eca0:	f7ff ff22 	bl	800eae8 <__multiply>
 800eca4:	4631      	mov	r1, r6
 800eca6:	4680      	mov	r8, r0
 800eca8:	4638      	mov	r0, r7
 800ecaa:	f7ff fe09 	bl	800e8c0 <_Bfree>
 800ecae:	4646      	mov	r6, r8
 800ecb0:	106d      	asrs	r5, r5, #1
 800ecb2:	d00b      	beq.n	800eccc <__pow5mult+0xa0>
 800ecb4:	6820      	ldr	r0, [r4, #0]
 800ecb6:	b938      	cbnz	r0, 800ecc8 <__pow5mult+0x9c>
 800ecb8:	4622      	mov	r2, r4
 800ecba:	4621      	mov	r1, r4
 800ecbc:	4638      	mov	r0, r7
 800ecbe:	f7ff ff13 	bl	800eae8 <__multiply>
 800ecc2:	6020      	str	r0, [r4, #0]
 800ecc4:	f8c0 9000 	str.w	r9, [r0]
 800ecc8:	4604      	mov	r4, r0
 800ecca:	e7e4      	b.n	800ec96 <__pow5mult+0x6a>
 800eccc:	4630      	mov	r0, r6
 800ecce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecd2:	bf00      	nop
 800ecd4:	08011d88 	.word	0x08011d88
 800ecd8:	08011bf6 	.word	0x08011bf6
 800ecdc:	08011c76 	.word	0x08011c76

0800ece0 <__lshift>:
 800ece0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ece4:	460c      	mov	r4, r1
 800ece6:	6849      	ldr	r1, [r1, #4]
 800ece8:	6923      	ldr	r3, [r4, #16]
 800ecea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ecee:	68a3      	ldr	r3, [r4, #8]
 800ecf0:	4607      	mov	r7, r0
 800ecf2:	4691      	mov	r9, r2
 800ecf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ecf8:	f108 0601 	add.w	r6, r8, #1
 800ecfc:	42b3      	cmp	r3, r6
 800ecfe:	db0b      	blt.n	800ed18 <__lshift+0x38>
 800ed00:	4638      	mov	r0, r7
 800ed02:	f7ff fd9d 	bl	800e840 <_Balloc>
 800ed06:	4605      	mov	r5, r0
 800ed08:	b948      	cbnz	r0, 800ed1e <__lshift+0x3e>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	4b28      	ldr	r3, [pc, #160]	@ (800edb0 <__lshift+0xd0>)
 800ed0e:	4829      	ldr	r0, [pc, #164]	@ (800edb4 <__lshift+0xd4>)
 800ed10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ed14:	f001 fb0c 	bl	8010330 <__assert_func>
 800ed18:	3101      	adds	r1, #1
 800ed1a:	005b      	lsls	r3, r3, #1
 800ed1c:	e7ee      	b.n	800ecfc <__lshift+0x1c>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	f100 0114 	add.w	r1, r0, #20
 800ed24:	f100 0210 	add.w	r2, r0, #16
 800ed28:	4618      	mov	r0, r3
 800ed2a:	4553      	cmp	r3, sl
 800ed2c:	db33      	blt.n	800ed96 <__lshift+0xb6>
 800ed2e:	6920      	ldr	r0, [r4, #16]
 800ed30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed34:	f104 0314 	add.w	r3, r4, #20
 800ed38:	f019 091f 	ands.w	r9, r9, #31
 800ed3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed44:	d02b      	beq.n	800ed9e <__lshift+0xbe>
 800ed46:	f1c9 0e20 	rsb	lr, r9, #32
 800ed4a:	468a      	mov	sl, r1
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	6818      	ldr	r0, [r3, #0]
 800ed50:	fa00 f009 	lsl.w	r0, r0, r9
 800ed54:	4310      	orrs	r0, r2
 800ed56:	f84a 0b04 	str.w	r0, [sl], #4
 800ed5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed5e:	459c      	cmp	ip, r3
 800ed60:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed64:	d8f3      	bhi.n	800ed4e <__lshift+0x6e>
 800ed66:	ebac 0304 	sub.w	r3, ip, r4
 800ed6a:	3b15      	subs	r3, #21
 800ed6c:	f023 0303 	bic.w	r3, r3, #3
 800ed70:	3304      	adds	r3, #4
 800ed72:	f104 0015 	add.w	r0, r4, #21
 800ed76:	4560      	cmp	r0, ip
 800ed78:	bf88      	it	hi
 800ed7a:	2304      	movhi	r3, #4
 800ed7c:	50ca      	str	r2, [r1, r3]
 800ed7e:	b10a      	cbz	r2, 800ed84 <__lshift+0xa4>
 800ed80:	f108 0602 	add.w	r6, r8, #2
 800ed84:	3e01      	subs	r6, #1
 800ed86:	4638      	mov	r0, r7
 800ed88:	612e      	str	r6, [r5, #16]
 800ed8a:	4621      	mov	r1, r4
 800ed8c:	f7ff fd98 	bl	800e8c0 <_Bfree>
 800ed90:	4628      	mov	r0, r5
 800ed92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed96:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	e7c5      	b.n	800ed2a <__lshift+0x4a>
 800ed9e:	3904      	subs	r1, #4
 800eda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eda4:	f841 2f04 	str.w	r2, [r1, #4]!
 800eda8:	459c      	cmp	ip, r3
 800edaa:	d8f9      	bhi.n	800eda0 <__lshift+0xc0>
 800edac:	e7ea      	b.n	800ed84 <__lshift+0xa4>
 800edae:	bf00      	nop
 800edb0:	08011c65 	.word	0x08011c65
 800edb4:	08011c76 	.word	0x08011c76

0800edb8 <__mcmp>:
 800edb8:	690a      	ldr	r2, [r1, #16]
 800edba:	4603      	mov	r3, r0
 800edbc:	6900      	ldr	r0, [r0, #16]
 800edbe:	1a80      	subs	r0, r0, r2
 800edc0:	b530      	push	{r4, r5, lr}
 800edc2:	d10e      	bne.n	800ede2 <__mcmp+0x2a>
 800edc4:	3314      	adds	r3, #20
 800edc6:	3114      	adds	r1, #20
 800edc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800edcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800edd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800edd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800edd8:	4295      	cmp	r5, r2
 800edda:	d003      	beq.n	800ede4 <__mcmp+0x2c>
 800eddc:	d205      	bcs.n	800edea <__mcmp+0x32>
 800edde:	f04f 30ff 	mov.w	r0, #4294967295
 800ede2:	bd30      	pop	{r4, r5, pc}
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	d3f3      	bcc.n	800edd0 <__mcmp+0x18>
 800ede8:	e7fb      	b.n	800ede2 <__mcmp+0x2a>
 800edea:	2001      	movs	r0, #1
 800edec:	e7f9      	b.n	800ede2 <__mcmp+0x2a>
	...

0800edf0 <__mdiff>:
 800edf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf4:	4689      	mov	r9, r1
 800edf6:	4606      	mov	r6, r0
 800edf8:	4611      	mov	r1, r2
 800edfa:	4648      	mov	r0, r9
 800edfc:	4614      	mov	r4, r2
 800edfe:	f7ff ffdb 	bl	800edb8 <__mcmp>
 800ee02:	1e05      	subs	r5, r0, #0
 800ee04:	d112      	bne.n	800ee2c <__mdiff+0x3c>
 800ee06:	4629      	mov	r1, r5
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f7ff fd19 	bl	800e840 <_Balloc>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	b928      	cbnz	r0, 800ee1e <__mdiff+0x2e>
 800ee12:	4b3f      	ldr	r3, [pc, #252]	@ (800ef10 <__mdiff+0x120>)
 800ee14:	f240 2137 	movw	r1, #567	@ 0x237
 800ee18:	483e      	ldr	r0, [pc, #248]	@ (800ef14 <__mdiff+0x124>)
 800ee1a:	f001 fa89 	bl	8010330 <__assert_func>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee24:	4610      	mov	r0, r2
 800ee26:	b003      	add	sp, #12
 800ee28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee2c:	bfbc      	itt	lt
 800ee2e:	464b      	movlt	r3, r9
 800ee30:	46a1      	movlt	r9, r4
 800ee32:	4630      	mov	r0, r6
 800ee34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ee38:	bfba      	itte	lt
 800ee3a:	461c      	movlt	r4, r3
 800ee3c:	2501      	movlt	r5, #1
 800ee3e:	2500      	movge	r5, #0
 800ee40:	f7ff fcfe 	bl	800e840 <_Balloc>
 800ee44:	4602      	mov	r2, r0
 800ee46:	b918      	cbnz	r0, 800ee50 <__mdiff+0x60>
 800ee48:	4b31      	ldr	r3, [pc, #196]	@ (800ef10 <__mdiff+0x120>)
 800ee4a:	f240 2145 	movw	r1, #581	@ 0x245
 800ee4e:	e7e3      	b.n	800ee18 <__mdiff+0x28>
 800ee50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ee54:	6926      	ldr	r6, [r4, #16]
 800ee56:	60c5      	str	r5, [r0, #12]
 800ee58:	f109 0310 	add.w	r3, r9, #16
 800ee5c:	f109 0514 	add.w	r5, r9, #20
 800ee60:	f104 0e14 	add.w	lr, r4, #20
 800ee64:	f100 0b14 	add.w	fp, r0, #20
 800ee68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ee6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ee70:	9301      	str	r3, [sp, #4]
 800ee72:	46d9      	mov	r9, fp
 800ee74:	f04f 0c00 	mov.w	ip, #0
 800ee78:	9b01      	ldr	r3, [sp, #4]
 800ee7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ee7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ee82:	9301      	str	r3, [sp, #4]
 800ee84:	fa1f f38a 	uxth.w	r3, sl
 800ee88:	4619      	mov	r1, r3
 800ee8a:	b283      	uxth	r3, r0
 800ee8c:	1acb      	subs	r3, r1, r3
 800ee8e:	0c00      	lsrs	r0, r0, #16
 800ee90:	4463      	add	r3, ip
 800ee92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ee96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eea0:	4576      	cmp	r6, lr
 800eea2:	f849 3b04 	str.w	r3, [r9], #4
 800eea6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eeaa:	d8e5      	bhi.n	800ee78 <__mdiff+0x88>
 800eeac:	1b33      	subs	r3, r6, r4
 800eeae:	3b15      	subs	r3, #21
 800eeb0:	f023 0303 	bic.w	r3, r3, #3
 800eeb4:	3415      	adds	r4, #21
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	42a6      	cmp	r6, r4
 800eeba:	bf38      	it	cc
 800eebc:	2304      	movcc	r3, #4
 800eebe:	441d      	add	r5, r3
 800eec0:	445b      	add	r3, fp
 800eec2:	461e      	mov	r6, r3
 800eec4:	462c      	mov	r4, r5
 800eec6:	4544      	cmp	r4, r8
 800eec8:	d30e      	bcc.n	800eee8 <__mdiff+0xf8>
 800eeca:	f108 0103 	add.w	r1, r8, #3
 800eece:	1b49      	subs	r1, r1, r5
 800eed0:	f021 0103 	bic.w	r1, r1, #3
 800eed4:	3d03      	subs	r5, #3
 800eed6:	45a8      	cmp	r8, r5
 800eed8:	bf38      	it	cc
 800eeda:	2100      	movcc	r1, #0
 800eedc:	440b      	add	r3, r1
 800eede:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eee2:	b191      	cbz	r1, 800ef0a <__mdiff+0x11a>
 800eee4:	6117      	str	r7, [r2, #16]
 800eee6:	e79d      	b.n	800ee24 <__mdiff+0x34>
 800eee8:	f854 1b04 	ldr.w	r1, [r4], #4
 800eeec:	46e6      	mov	lr, ip
 800eeee:	0c08      	lsrs	r0, r1, #16
 800eef0:	fa1c fc81 	uxtah	ip, ip, r1
 800eef4:	4471      	add	r1, lr
 800eef6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eefa:	b289      	uxth	r1, r1
 800eefc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ef00:	f846 1b04 	str.w	r1, [r6], #4
 800ef04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef08:	e7dd      	b.n	800eec6 <__mdiff+0xd6>
 800ef0a:	3f01      	subs	r7, #1
 800ef0c:	e7e7      	b.n	800eede <__mdiff+0xee>
 800ef0e:	bf00      	nop
 800ef10:	08011c65 	.word	0x08011c65
 800ef14:	08011c76 	.word	0x08011c76

0800ef18 <__ulp>:
 800ef18:	b082      	sub	sp, #8
 800ef1a:	ed8d 0b00 	vstr	d0, [sp]
 800ef1e:	9a01      	ldr	r2, [sp, #4]
 800ef20:	4b0f      	ldr	r3, [pc, #60]	@ (800ef60 <__ulp+0x48>)
 800ef22:	4013      	ands	r3, r2
 800ef24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	dc08      	bgt.n	800ef3e <__ulp+0x26>
 800ef2c:	425b      	negs	r3, r3
 800ef2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ef32:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ef36:	da04      	bge.n	800ef42 <__ulp+0x2a>
 800ef38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ef3c:	4113      	asrs	r3, r2
 800ef3e:	2200      	movs	r2, #0
 800ef40:	e008      	b.n	800ef54 <__ulp+0x3c>
 800ef42:	f1a2 0314 	sub.w	r3, r2, #20
 800ef46:	2b1e      	cmp	r3, #30
 800ef48:	bfda      	itte	le
 800ef4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ef4e:	40da      	lsrle	r2, r3
 800ef50:	2201      	movgt	r2, #1
 800ef52:	2300      	movs	r3, #0
 800ef54:	4619      	mov	r1, r3
 800ef56:	4610      	mov	r0, r2
 800ef58:	ec41 0b10 	vmov	d0, r0, r1
 800ef5c:	b002      	add	sp, #8
 800ef5e:	4770      	bx	lr
 800ef60:	7ff00000 	.word	0x7ff00000

0800ef64 <__b2d>:
 800ef64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef68:	6906      	ldr	r6, [r0, #16]
 800ef6a:	f100 0814 	add.w	r8, r0, #20
 800ef6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ef72:	1f37      	subs	r7, r6, #4
 800ef74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ef78:	4610      	mov	r0, r2
 800ef7a:	f7ff fd53 	bl	800ea24 <__hi0bits>
 800ef7e:	f1c0 0320 	rsb	r3, r0, #32
 800ef82:	280a      	cmp	r0, #10
 800ef84:	600b      	str	r3, [r1, #0]
 800ef86:	491b      	ldr	r1, [pc, #108]	@ (800eff4 <__b2d+0x90>)
 800ef88:	dc15      	bgt.n	800efb6 <__b2d+0x52>
 800ef8a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ef8e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ef92:	45b8      	cmp	r8, r7
 800ef94:	ea43 0501 	orr.w	r5, r3, r1
 800ef98:	bf34      	ite	cc
 800ef9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef9e:	2300      	movcs	r3, #0
 800efa0:	3015      	adds	r0, #21
 800efa2:	fa02 f000 	lsl.w	r0, r2, r0
 800efa6:	fa23 f30c 	lsr.w	r3, r3, ip
 800efaa:	4303      	orrs	r3, r0
 800efac:	461c      	mov	r4, r3
 800efae:	ec45 4b10 	vmov	d0, r4, r5
 800efb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb6:	45b8      	cmp	r8, r7
 800efb8:	bf3a      	itte	cc
 800efba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800efbe:	f1a6 0708 	subcc.w	r7, r6, #8
 800efc2:	2300      	movcs	r3, #0
 800efc4:	380b      	subs	r0, #11
 800efc6:	d012      	beq.n	800efee <__b2d+0x8a>
 800efc8:	f1c0 0120 	rsb	r1, r0, #32
 800efcc:	fa23 f401 	lsr.w	r4, r3, r1
 800efd0:	4082      	lsls	r2, r0
 800efd2:	4322      	orrs	r2, r4
 800efd4:	4547      	cmp	r7, r8
 800efd6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800efda:	bf8c      	ite	hi
 800efdc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800efe0:	2200      	movls	r2, #0
 800efe2:	4083      	lsls	r3, r0
 800efe4:	40ca      	lsrs	r2, r1
 800efe6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800efea:	4313      	orrs	r3, r2
 800efec:	e7de      	b.n	800efac <__b2d+0x48>
 800efee:	ea42 0501 	orr.w	r5, r2, r1
 800eff2:	e7db      	b.n	800efac <__b2d+0x48>
 800eff4:	3ff00000 	.word	0x3ff00000

0800eff8 <__d2b>:
 800eff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800effc:	460f      	mov	r7, r1
 800effe:	2101      	movs	r1, #1
 800f000:	ec59 8b10 	vmov	r8, r9, d0
 800f004:	4616      	mov	r6, r2
 800f006:	f7ff fc1b 	bl	800e840 <_Balloc>
 800f00a:	4604      	mov	r4, r0
 800f00c:	b930      	cbnz	r0, 800f01c <__d2b+0x24>
 800f00e:	4602      	mov	r2, r0
 800f010:	4b23      	ldr	r3, [pc, #140]	@ (800f0a0 <__d2b+0xa8>)
 800f012:	4824      	ldr	r0, [pc, #144]	@ (800f0a4 <__d2b+0xac>)
 800f014:	f240 310f 	movw	r1, #783	@ 0x30f
 800f018:	f001 f98a 	bl	8010330 <__assert_func>
 800f01c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f024:	b10d      	cbz	r5, 800f02a <__d2b+0x32>
 800f026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f02a:	9301      	str	r3, [sp, #4]
 800f02c:	f1b8 0300 	subs.w	r3, r8, #0
 800f030:	d023      	beq.n	800f07a <__d2b+0x82>
 800f032:	4668      	mov	r0, sp
 800f034:	9300      	str	r3, [sp, #0]
 800f036:	f7ff fd14 	bl	800ea62 <__lo0bits>
 800f03a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f03e:	b1d0      	cbz	r0, 800f076 <__d2b+0x7e>
 800f040:	f1c0 0320 	rsb	r3, r0, #32
 800f044:	fa02 f303 	lsl.w	r3, r2, r3
 800f048:	430b      	orrs	r3, r1
 800f04a:	40c2      	lsrs	r2, r0
 800f04c:	6163      	str	r3, [r4, #20]
 800f04e:	9201      	str	r2, [sp, #4]
 800f050:	9b01      	ldr	r3, [sp, #4]
 800f052:	61a3      	str	r3, [r4, #24]
 800f054:	2b00      	cmp	r3, #0
 800f056:	bf0c      	ite	eq
 800f058:	2201      	moveq	r2, #1
 800f05a:	2202      	movne	r2, #2
 800f05c:	6122      	str	r2, [r4, #16]
 800f05e:	b1a5      	cbz	r5, 800f08a <__d2b+0x92>
 800f060:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f064:	4405      	add	r5, r0
 800f066:	603d      	str	r5, [r7, #0]
 800f068:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f06c:	6030      	str	r0, [r6, #0]
 800f06e:	4620      	mov	r0, r4
 800f070:	b003      	add	sp, #12
 800f072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f076:	6161      	str	r1, [r4, #20]
 800f078:	e7ea      	b.n	800f050 <__d2b+0x58>
 800f07a:	a801      	add	r0, sp, #4
 800f07c:	f7ff fcf1 	bl	800ea62 <__lo0bits>
 800f080:	9b01      	ldr	r3, [sp, #4]
 800f082:	6163      	str	r3, [r4, #20]
 800f084:	3020      	adds	r0, #32
 800f086:	2201      	movs	r2, #1
 800f088:	e7e8      	b.n	800f05c <__d2b+0x64>
 800f08a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f08e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f092:	6038      	str	r0, [r7, #0]
 800f094:	6918      	ldr	r0, [r3, #16]
 800f096:	f7ff fcc5 	bl	800ea24 <__hi0bits>
 800f09a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f09e:	e7e5      	b.n	800f06c <__d2b+0x74>
 800f0a0:	08011c65 	.word	0x08011c65
 800f0a4:	08011c76 	.word	0x08011c76

0800f0a8 <__ratio>:
 800f0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ac:	b085      	sub	sp, #20
 800f0ae:	e9cd 1000 	strd	r1, r0, [sp]
 800f0b2:	a902      	add	r1, sp, #8
 800f0b4:	f7ff ff56 	bl	800ef64 <__b2d>
 800f0b8:	9800      	ldr	r0, [sp, #0]
 800f0ba:	a903      	add	r1, sp, #12
 800f0bc:	ec55 4b10 	vmov	r4, r5, d0
 800f0c0:	f7ff ff50 	bl	800ef64 <__b2d>
 800f0c4:	9b01      	ldr	r3, [sp, #4]
 800f0c6:	6919      	ldr	r1, [r3, #16]
 800f0c8:	9b00      	ldr	r3, [sp, #0]
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	1ac9      	subs	r1, r1, r3
 800f0ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f0d2:	1a9b      	subs	r3, r3, r2
 800f0d4:	ec5b ab10 	vmov	sl, fp, d0
 800f0d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	bfce      	itee	gt
 800f0e0:	462a      	movgt	r2, r5
 800f0e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f0e6:	465a      	movle	r2, fp
 800f0e8:	462f      	mov	r7, r5
 800f0ea:	46d9      	mov	r9, fp
 800f0ec:	bfcc      	ite	gt
 800f0ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f0f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f0f6:	464b      	mov	r3, r9
 800f0f8:	4652      	mov	r2, sl
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	4639      	mov	r1, r7
 800f0fe:	f7f1 fbcd 	bl	800089c <__aeabi_ddiv>
 800f102:	ec41 0b10 	vmov	d0, r0, r1
 800f106:	b005      	add	sp, #20
 800f108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f10c <__copybits>:
 800f10c:	3901      	subs	r1, #1
 800f10e:	b570      	push	{r4, r5, r6, lr}
 800f110:	1149      	asrs	r1, r1, #5
 800f112:	6914      	ldr	r4, [r2, #16]
 800f114:	3101      	adds	r1, #1
 800f116:	f102 0314 	add.w	r3, r2, #20
 800f11a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f11e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f122:	1f05      	subs	r5, r0, #4
 800f124:	42a3      	cmp	r3, r4
 800f126:	d30c      	bcc.n	800f142 <__copybits+0x36>
 800f128:	1aa3      	subs	r3, r4, r2
 800f12a:	3b11      	subs	r3, #17
 800f12c:	f023 0303 	bic.w	r3, r3, #3
 800f130:	3211      	adds	r2, #17
 800f132:	42a2      	cmp	r2, r4
 800f134:	bf88      	it	hi
 800f136:	2300      	movhi	r3, #0
 800f138:	4418      	add	r0, r3
 800f13a:	2300      	movs	r3, #0
 800f13c:	4288      	cmp	r0, r1
 800f13e:	d305      	bcc.n	800f14c <__copybits+0x40>
 800f140:	bd70      	pop	{r4, r5, r6, pc}
 800f142:	f853 6b04 	ldr.w	r6, [r3], #4
 800f146:	f845 6f04 	str.w	r6, [r5, #4]!
 800f14a:	e7eb      	b.n	800f124 <__copybits+0x18>
 800f14c:	f840 3b04 	str.w	r3, [r0], #4
 800f150:	e7f4      	b.n	800f13c <__copybits+0x30>

0800f152 <__any_on>:
 800f152:	f100 0214 	add.w	r2, r0, #20
 800f156:	6900      	ldr	r0, [r0, #16]
 800f158:	114b      	asrs	r3, r1, #5
 800f15a:	4298      	cmp	r0, r3
 800f15c:	b510      	push	{r4, lr}
 800f15e:	db11      	blt.n	800f184 <__any_on+0x32>
 800f160:	dd0a      	ble.n	800f178 <__any_on+0x26>
 800f162:	f011 011f 	ands.w	r1, r1, #31
 800f166:	d007      	beq.n	800f178 <__any_on+0x26>
 800f168:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f16c:	fa24 f001 	lsr.w	r0, r4, r1
 800f170:	fa00 f101 	lsl.w	r1, r0, r1
 800f174:	428c      	cmp	r4, r1
 800f176:	d10b      	bne.n	800f190 <__any_on+0x3e>
 800f178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d803      	bhi.n	800f188 <__any_on+0x36>
 800f180:	2000      	movs	r0, #0
 800f182:	bd10      	pop	{r4, pc}
 800f184:	4603      	mov	r3, r0
 800f186:	e7f7      	b.n	800f178 <__any_on+0x26>
 800f188:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f18c:	2900      	cmp	r1, #0
 800f18e:	d0f5      	beq.n	800f17c <__any_on+0x2a>
 800f190:	2001      	movs	r0, #1
 800f192:	e7f6      	b.n	800f182 <__any_on+0x30>

0800f194 <sulp>:
 800f194:	b570      	push	{r4, r5, r6, lr}
 800f196:	4604      	mov	r4, r0
 800f198:	460d      	mov	r5, r1
 800f19a:	ec45 4b10 	vmov	d0, r4, r5
 800f19e:	4616      	mov	r6, r2
 800f1a0:	f7ff feba 	bl	800ef18 <__ulp>
 800f1a4:	ec51 0b10 	vmov	r0, r1, d0
 800f1a8:	b17e      	cbz	r6, 800f1ca <sulp+0x36>
 800f1aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f1ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	dd09      	ble.n	800f1ca <sulp+0x36>
 800f1b6:	051b      	lsls	r3, r3, #20
 800f1b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f1bc:	2400      	movs	r4, #0
 800f1be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f1c2:	4622      	mov	r2, r4
 800f1c4:	462b      	mov	r3, r5
 800f1c6:	f7f1 fa3f 	bl	8000648 <__aeabi_dmul>
 800f1ca:	ec41 0b10 	vmov	d0, r0, r1
 800f1ce:	bd70      	pop	{r4, r5, r6, pc}

0800f1d0 <_strtod_l>:
 800f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	b09f      	sub	sp, #124	@ 0x7c
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f1da:	2200      	movs	r2, #0
 800f1dc:	921a      	str	r2, [sp, #104]	@ 0x68
 800f1de:	9005      	str	r0, [sp, #20]
 800f1e0:	f04f 0a00 	mov.w	sl, #0
 800f1e4:	f04f 0b00 	mov.w	fp, #0
 800f1e8:	460a      	mov	r2, r1
 800f1ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800f1ec:	7811      	ldrb	r1, [r2, #0]
 800f1ee:	292b      	cmp	r1, #43	@ 0x2b
 800f1f0:	d04a      	beq.n	800f288 <_strtod_l+0xb8>
 800f1f2:	d838      	bhi.n	800f266 <_strtod_l+0x96>
 800f1f4:	290d      	cmp	r1, #13
 800f1f6:	d832      	bhi.n	800f25e <_strtod_l+0x8e>
 800f1f8:	2908      	cmp	r1, #8
 800f1fa:	d832      	bhi.n	800f262 <_strtod_l+0x92>
 800f1fc:	2900      	cmp	r1, #0
 800f1fe:	d03b      	beq.n	800f278 <_strtod_l+0xa8>
 800f200:	2200      	movs	r2, #0
 800f202:	920e      	str	r2, [sp, #56]	@ 0x38
 800f204:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f206:	782a      	ldrb	r2, [r5, #0]
 800f208:	2a30      	cmp	r2, #48	@ 0x30
 800f20a:	f040 80b2 	bne.w	800f372 <_strtod_l+0x1a2>
 800f20e:	786a      	ldrb	r2, [r5, #1]
 800f210:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f214:	2a58      	cmp	r2, #88	@ 0x58
 800f216:	d16e      	bne.n	800f2f6 <_strtod_l+0x126>
 800f218:	9302      	str	r3, [sp, #8]
 800f21a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f220:	9300      	str	r3, [sp, #0]
 800f222:	4a8f      	ldr	r2, [pc, #572]	@ (800f460 <_strtod_l+0x290>)
 800f224:	9805      	ldr	r0, [sp, #20]
 800f226:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f228:	a919      	add	r1, sp, #100	@ 0x64
 800f22a:	f001 f91b 	bl	8010464 <__gethex>
 800f22e:	f010 060f 	ands.w	r6, r0, #15
 800f232:	4604      	mov	r4, r0
 800f234:	d005      	beq.n	800f242 <_strtod_l+0x72>
 800f236:	2e06      	cmp	r6, #6
 800f238:	d128      	bne.n	800f28c <_strtod_l+0xbc>
 800f23a:	3501      	adds	r5, #1
 800f23c:	2300      	movs	r3, #0
 800f23e:	9519      	str	r5, [sp, #100]	@ 0x64
 800f240:	930e      	str	r3, [sp, #56]	@ 0x38
 800f242:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f244:	2b00      	cmp	r3, #0
 800f246:	f040 858e 	bne.w	800fd66 <_strtod_l+0xb96>
 800f24a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f24c:	b1cb      	cbz	r3, 800f282 <_strtod_l+0xb2>
 800f24e:	4652      	mov	r2, sl
 800f250:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f254:	ec43 2b10 	vmov	d0, r2, r3
 800f258:	b01f      	add	sp, #124	@ 0x7c
 800f25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25e:	2920      	cmp	r1, #32
 800f260:	d1ce      	bne.n	800f200 <_strtod_l+0x30>
 800f262:	3201      	adds	r2, #1
 800f264:	e7c1      	b.n	800f1ea <_strtod_l+0x1a>
 800f266:	292d      	cmp	r1, #45	@ 0x2d
 800f268:	d1ca      	bne.n	800f200 <_strtod_l+0x30>
 800f26a:	2101      	movs	r1, #1
 800f26c:	910e      	str	r1, [sp, #56]	@ 0x38
 800f26e:	1c51      	adds	r1, r2, #1
 800f270:	9119      	str	r1, [sp, #100]	@ 0x64
 800f272:	7852      	ldrb	r2, [r2, #1]
 800f274:	2a00      	cmp	r2, #0
 800f276:	d1c5      	bne.n	800f204 <_strtod_l+0x34>
 800f278:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f27a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f040 8570 	bne.w	800fd62 <_strtod_l+0xb92>
 800f282:	4652      	mov	r2, sl
 800f284:	465b      	mov	r3, fp
 800f286:	e7e5      	b.n	800f254 <_strtod_l+0x84>
 800f288:	2100      	movs	r1, #0
 800f28a:	e7ef      	b.n	800f26c <_strtod_l+0x9c>
 800f28c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f28e:	b13a      	cbz	r2, 800f2a0 <_strtod_l+0xd0>
 800f290:	2135      	movs	r1, #53	@ 0x35
 800f292:	a81c      	add	r0, sp, #112	@ 0x70
 800f294:	f7ff ff3a 	bl	800f10c <__copybits>
 800f298:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f29a:	9805      	ldr	r0, [sp, #20]
 800f29c:	f7ff fb10 	bl	800e8c0 <_Bfree>
 800f2a0:	3e01      	subs	r6, #1
 800f2a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f2a4:	2e04      	cmp	r6, #4
 800f2a6:	d806      	bhi.n	800f2b6 <_strtod_l+0xe6>
 800f2a8:	e8df f006 	tbb	[pc, r6]
 800f2ac:	201d0314 	.word	0x201d0314
 800f2b0:	14          	.byte	0x14
 800f2b1:	00          	.byte	0x00
 800f2b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f2b6:	05e1      	lsls	r1, r4, #23
 800f2b8:	bf48      	it	mi
 800f2ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f2be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f2c2:	0d1b      	lsrs	r3, r3, #20
 800f2c4:	051b      	lsls	r3, r3, #20
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d1bb      	bne.n	800f242 <_strtod_l+0x72>
 800f2ca:	f7fe fb1d 	bl	800d908 <__errno>
 800f2ce:	2322      	movs	r3, #34	@ 0x22
 800f2d0:	6003      	str	r3, [r0, #0]
 800f2d2:	e7b6      	b.n	800f242 <_strtod_l+0x72>
 800f2d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f2d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f2dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f2e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f2e4:	e7e7      	b.n	800f2b6 <_strtod_l+0xe6>
 800f2e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f468 <_strtod_l+0x298>
 800f2ea:	e7e4      	b.n	800f2b6 <_strtod_l+0xe6>
 800f2ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f2f0:	f04f 3aff 	mov.w	sl, #4294967295
 800f2f4:	e7df      	b.n	800f2b6 <_strtod_l+0xe6>
 800f2f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2f8:	1c5a      	adds	r2, r3, #1
 800f2fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2fc:	785b      	ldrb	r3, [r3, #1]
 800f2fe:	2b30      	cmp	r3, #48	@ 0x30
 800f300:	d0f9      	beq.n	800f2f6 <_strtod_l+0x126>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d09d      	beq.n	800f242 <_strtod_l+0x72>
 800f306:	2301      	movs	r3, #1
 800f308:	2700      	movs	r7, #0
 800f30a:	9308      	str	r3, [sp, #32]
 800f30c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f30e:	930c      	str	r3, [sp, #48]	@ 0x30
 800f310:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f312:	46b9      	mov	r9, r7
 800f314:	220a      	movs	r2, #10
 800f316:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f318:	7805      	ldrb	r5, [r0, #0]
 800f31a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f31e:	b2d9      	uxtb	r1, r3
 800f320:	2909      	cmp	r1, #9
 800f322:	d928      	bls.n	800f376 <_strtod_l+0x1a6>
 800f324:	494f      	ldr	r1, [pc, #316]	@ (800f464 <_strtod_l+0x294>)
 800f326:	2201      	movs	r2, #1
 800f328:	f000 ffd6 	bl	80102d8 <strncmp>
 800f32c:	2800      	cmp	r0, #0
 800f32e:	d032      	beq.n	800f396 <_strtod_l+0x1c6>
 800f330:	2000      	movs	r0, #0
 800f332:	462a      	mov	r2, r5
 800f334:	900a      	str	r0, [sp, #40]	@ 0x28
 800f336:	464d      	mov	r5, r9
 800f338:	4603      	mov	r3, r0
 800f33a:	2a65      	cmp	r2, #101	@ 0x65
 800f33c:	d001      	beq.n	800f342 <_strtod_l+0x172>
 800f33e:	2a45      	cmp	r2, #69	@ 0x45
 800f340:	d114      	bne.n	800f36c <_strtod_l+0x19c>
 800f342:	b91d      	cbnz	r5, 800f34c <_strtod_l+0x17c>
 800f344:	9a08      	ldr	r2, [sp, #32]
 800f346:	4302      	orrs	r2, r0
 800f348:	d096      	beq.n	800f278 <_strtod_l+0xa8>
 800f34a:	2500      	movs	r5, #0
 800f34c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f34e:	1c62      	adds	r2, r4, #1
 800f350:	9219      	str	r2, [sp, #100]	@ 0x64
 800f352:	7862      	ldrb	r2, [r4, #1]
 800f354:	2a2b      	cmp	r2, #43	@ 0x2b
 800f356:	d07a      	beq.n	800f44e <_strtod_l+0x27e>
 800f358:	2a2d      	cmp	r2, #45	@ 0x2d
 800f35a:	d07e      	beq.n	800f45a <_strtod_l+0x28a>
 800f35c:	f04f 0c00 	mov.w	ip, #0
 800f360:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f364:	2909      	cmp	r1, #9
 800f366:	f240 8085 	bls.w	800f474 <_strtod_l+0x2a4>
 800f36a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f36c:	f04f 0800 	mov.w	r8, #0
 800f370:	e0a5      	b.n	800f4be <_strtod_l+0x2ee>
 800f372:	2300      	movs	r3, #0
 800f374:	e7c8      	b.n	800f308 <_strtod_l+0x138>
 800f376:	f1b9 0f08 	cmp.w	r9, #8
 800f37a:	bfd8      	it	le
 800f37c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f37e:	f100 0001 	add.w	r0, r0, #1
 800f382:	bfda      	itte	le
 800f384:	fb02 3301 	mlale	r3, r2, r1, r3
 800f388:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f38a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f38e:	f109 0901 	add.w	r9, r9, #1
 800f392:	9019      	str	r0, [sp, #100]	@ 0x64
 800f394:	e7bf      	b.n	800f316 <_strtod_l+0x146>
 800f396:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f39c:	785a      	ldrb	r2, [r3, #1]
 800f39e:	f1b9 0f00 	cmp.w	r9, #0
 800f3a2:	d03b      	beq.n	800f41c <_strtod_l+0x24c>
 800f3a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f3a6:	464d      	mov	r5, r9
 800f3a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f3ac:	2b09      	cmp	r3, #9
 800f3ae:	d912      	bls.n	800f3d6 <_strtod_l+0x206>
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	e7c2      	b.n	800f33a <_strtod_l+0x16a>
 800f3b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3b6:	1c5a      	adds	r2, r3, #1
 800f3b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800f3ba:	785a      	ldrb	r2, [r3, #1]
 800f3bc:	3001      	adds	r0, #1
 800f3be:	2a30      	cmp	r2, #48	@ 0x30
 800f3c0:	d0f8      	beq.n	800f3b4 <_strtod_l+0x1e4>
 800f3c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f3c6:	2b08      	cmp	r3, #8
 800f3c8:	f200 84d2 	bhi.w	800fd70 <_strtod_l+0xba0>
 800f3cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f3ce:	900a      	str	r0, [sp, #40]	@ 0x28
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f3d4:	4605      	mov	r5, r0
 800f3d6:	3a30      	subs	r2, #48	@ 0x30
 800f3d8:	f100 0301 	add.w	r3, r0, #1
 800f3dc:	d018      	beq.n	800f410 <_strtod_l+0x240>
 800f3de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f3e0:	4419      	add	r1, r3
 800f3e2:	910a      	str	r1, [sp, #40]	@ 0x28
 800f3e4:	462e      	mov	r6, r5
 800f3e6:	f04f 0e0a 	mov.w	lr, #10
 800f3ea:	1c71      	adds	r1, r6, #1
 800f3ec:	eba1 0c05 	sub.w	ip, r1, r5
 800f3f0:	4563      	cmp	r3, ip
 800f3f2:	dc15      	bgt.n	800f420 <_strtod_l+0x250>
 800f3f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f3f8:	182b      	adds	r3, r5, r0
 800f3fa:	2b08      	cmp	r3, #8
 800f3fc:	f105 0501 	add.w	r5, r5, #1
 800f400:	4405      	add	r5, r0
 800f402:	dc1a      	bgt.n	800f43a <_strtod_l+0x26a>
 800f404:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f406:	230a      	movs	r3, #10
 800f408:	fb03 2301 	mla	r3, r3, r1, r2
 800f40c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f40e:	2300      	movs	r3, #0
 800f410:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f412:	1c51      	adds	r1, r2, #1
 800f414:	9119      	str	r1, [sp, #100]	@ 0x64
 800f416:	7852      	ldrb	r2, [r2, #1]
 800f418:	4618      	mov	r0, r3
 800f41a:	e7c5      	b.n	800f3a8 <_strtod_l+0x1d8>
 800f41c:	4648      	mov	r0, r9
 800f41e:	e7ce      	b.n	800f3be <_strtod_l+0x1ee>
 800f420:	2e08      	cmp	r6, #8
 800f422:	dc05      	bgt.n	800f430 <_strtod_l+0x260>
 800f424:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f426:	fb0e f606 	mul.w	r6, lr, r6
 800f42a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f42c:	460e      	mov	r6, r1
 800f42e:	e7dc      	b.n	800f3ea <_strtod_l+0x21a>
 800f430:	2910      	cmp	r1, #16
 800f432:	bfd8      	it	le
 800f434:	fb0e f707 	mulle.w	r7, lr, r7
 800f438:	e7f8      	b.n	800f42c <_strtod_l+0x25c>
 800f43a:	2b0f      	cmp	r3, #15
 800f43c:	bfdc      	itt	le
 800f43e:	230a      	movle	r3, #10
 800f440:	fb03 2707 	mlale	r7, r3, r7, r2
 800f444:	e7e3      	b.n	800f40e <_strtod_l+0x23e>
 800f446:	2300      	movs	r3, #0
 800f448:	930a      	str	r3, [sp, #40]	@ 0x28
 800f44a:	2301      	movs	r3, #1
 800f44c:	e77a      	b.n	800f344 <_strtod_l+0x174>
 800f44e:	f04f 0c00 	mov.w	ip, #0
 800f452:	1ca2      	adds	r2, r4, #2
 800f454:	9219      	str	r2, [sp, #100]	@ 0x64
 800f456:	78a2      	ldrb	r2, [r4, #2]
 800f458:	e782      	b.n	800f360 <_strtod_l+0x190>
 800f45a:	f04f 0c01 	mov.w	ip, #1
 800f45e:	e7f8      	b.n	800f452 <_strtod_l+0x282>
 800f460:	08011e9c 	.word	0x08011e9c
 800f464:	08011ccf 	.word	0x08011ccf
 800f468:	7ff00000 	.word	0x7ff00000
 800f46c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f46e:	1c51      	adds	r1, r2, #1
 800f470:	9119      	str	r1, [sp, #100]	@ 0x64
 800f472:	7852      	ldrb	r2, [r2, #1]
 800f474:	2a30      	cmp	r2, #48	@ 0x30
 800f476:	d0f9      	beq.n	800f46c <_strtod_l+0x29c>
 800f478:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f47c:	2908      	cmp	r1, #8
 800f47e:	f63f af75 	bhi.w	800f36c <_strtod_l+0x19c>
 800f482:	3a30      	subs	r2, #48	@ 0x30
 800f484:	9209      	str	r2, [sp, #36]	@ 0x24
 800f486:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f488:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f48a:	f04f 080a 	mov.w	r8, #10
 800f48e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f490:	1c56      	adds	r6, r2, #1
 800f492:	9619      	str	r6, [sp, #100]	@ 0x64
 800f494:	7852      	ldrb	r2, [r2, #1]
 800f496:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f49a:	f1be 0f09 	cmp.w	lr, #9
 800f49e:	d939      	bls.n	800f514 <_strtod_l+0x344>
 800f4a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f4a2:	1a76      	subs	r6, r6, r1
 800f4a4:	2e08      	cmp	r6, #8
 800f4a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f4aa:	dc03      	bgt.n	800f4b4 <_strtod_l+0x2e4>
 800f4ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f4ae:	4588      	cmp	r8, r1
 800f4b0:	bfa8      	it	ge
 800f4b2:	4688      	movge	r8, r1
 800f4b4:	f1bc 0f00 	cmp.w	ip, #0
 800f4b8:	d001      	beq.n	800f4be <_strtod_l+0x2ee>
 800f4ba:	f1c8 0800 	rsb	r8, r8, #0
 800f4be:	2d00      	cmp	r5, #0
 800f4c0:	d14e      	bne.n	800f560 <_strtod_l+0x390>
 800f4c2:	9908      	ldr	r1, [sp, #32]
 800f4c4:	4308      	orrs	r0, r1
 800f4c6:	f47f aebc 	bne.w	800f242 <_strtod_l+0x72>
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	f47f aed4 	bne.w	800f278 <_strtod_l+0xa8>
 800f4d0:	2a69      	cmp	r2, #105	@ 0x69
 800f4d2:	d028      	beq.n	800f526 <_strtod_l+0x356>
 800f4d4:	dc25      	bgt.n	800f522 <_strtod_l+0x352>
 800f4d6:	2a49      	cmp	r2, #73	@ 0x49
 800f4d8:	d025      	beq.n	800f526 <_strtod_l+0x356>
 800f4da:	2a4e      	cmp	r2, #78	@ 0x4e
 800f4dc:	f47f aecc 	bne.w	800f278 <_strtod_l+0xa8>
 800f4e0:	499a      	ldr	r1, [pc, #616]	@ (800f74c <_strtod_l+0x57c>)
 800f4e2:	a819      	add	r0, sp, #100	@ 0x64
 800f4e4:	f001 f9e0 	bl	80108a8 <__match>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	f43f aec5 	beq.w	800f278 <_strtod_l+0xa8>
 800f4ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	2b28      	cmp	r3, #40	@ 0x28
 800f4f4:	d12e      	bne.n	800f554 <_strtod_l+0x384>
 800f4f6:	4996      	ldr	r1, [pc, #600]	@ (800f750 <_strtod_l+0x580>)
 800f4f8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f4fa:	a819      	add	r0, sp, #100	@ 0x64
 800f4fc:	f001 f9e8 	bl	80108d0 <__hexnan>
 800f500:	2805      	cmp	r0, #5
 800f502:	d127      	bne.n	800f554 <_strtod_l+0x384>
 800f504:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f506:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f50a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f50e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f512:	e696      	b.n	800f242 <_strtod_l+0x72>
 800f514:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f516:	fb08 2101 	mla	r1, r8, r1, r2
 800f51a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f51e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f520:	e7b5      	b.n	800f48e <_strtod_l+0x2be>
 800f522:	2a6e      	cmp	r2, #110	@ 0x6e
 800f524:	e7da      	b.n	800f4dc <_strtod_l+0x30c>
 800f526:	498b      	ldr	r1, [pc, #556]	@ (800f754 <_strtod_l+0x584>)
 800f528:	a819      	add	r0, sp, #100	@ 0x64
 800f52a:	f001 f9bd 	bl	80108a8 <__match>
 800f52e:	2800      	cmp	r0, #0
 800f530:	f43f aea2 	beq.w	800f278 <_strtod_l+0xa8>
 800f534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f536:	4988      	ldr	r1, [pc, #544]	@ (800f758 <_strtod_l+0x588>)
 800f538:	3b01      	subs	r3, #1
 800f53a:	a819      	add	r0, sp, #100	@ 0x64
 800f53c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f53e:	f001 f9b3 	bl	80108a8 <__match>
 800f542:	b910      	cbnz	r0, 800f54a <_strtod_l+0x37a>
 800f544:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f546:	3301      	adds	r3, #1
 800f548:	9319      	str	r3, [sp, #100]	@ 0x64
 800f54a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f768 <_strtod_l+0x598>
 800f54e:	f04f 0a00 	mov.w	sl, #0
 800f552:	e676      	b.n	800f242 <_strtod_l+0x72>
 800f554:	4881      	ldr	r0, [pc, #516]	@ (800f75c <_strtod_l+0x58c>)
 800f556:	f000 fee3 	bl	8010320 <nan>
 800f55a:	ec5b ab10 	vmov	sl, fp, d0
 800f55e:	e670      	b.n	800f242 <_strtod_l+0x72>
 800f560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f562:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f564:	eba8 0303 	sub.w	r3, r8, r3
 800f568:	f1b9 0f00 	cmp.w	r9, #0
 800f56c:	bf08      	it	eq
 800f56e:	46a9      	moveq	r9, r5
 800f570:	2d10      	cmp	r5, #16
 800f572:	9309      	str	r3, [sp, #36]	@ 0x24
 800f574:	462c      	mov	r4, r5
 800f576:	bfa8      	it	ge
 800f578:	2410      	movge	r4, #16
 800f57a:	f7f0 ffeb 	bl	8000554 <__aeabi_ui2d>
 800f57e:	2d09      	cmp	r5, #9
 800f580:	4682      	mov	sl, r0
 800f582:	468b      	mov	fp, r1
 800f584:	dc13      	bgt.n	800f5ae <_strtod_l+0x3de>
 800f586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f43f ae5a 	beq.w	800f242 <_strtod_l+0x72>
 800f58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f590:	dd78      	ble.n	800f684 <_strtod_l+0x4b4>
 800f592:	2b16      	cmp	r3, #22
 800f594:	dc5f      	bgt.n	800f656 <_strtod_l+0x486>
 800f596:	4972      	ldr	r1, [pc, #456]	@ (800f760 <_strtod_l+0x590>)
 800f598:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5a0:	4652      	mov	r2, sl
 800f5a2:	465b      	mov	r3, fp
 800f5a4:	f7f1 f850 	bl	8000648 <__aeabi_dmul>
 800f5a8:	4682      	mov	sl, r0
 800f5aa:	468b      	mov	fp, r1
 800f5ac:	e649      	b.n	800f242 <_strtod_l+0x72>
 800f5ae:	4b6c      	ldr	r3, [pc, #432]	@ (800f760 <_strtod_l+0x590>)
 800f5b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f5b8:	f7f1 f846 	bl	8000648 <__aeabi_dmul>
 800f5bc:	4682      	mov	sl, r0
 800f5be:	4638      	mov	r0, r7
 800f5c0:	468b      	mov	fp, r1
 800f5c2:	f7f0 ffc7 	bl	8000554 <__aeabi_ui2d>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	4650      	mov	r0, sl
 800f5cc:	4659      	mov	r1, fp
 800f5ce:	f7f0 fe85 	bl	80002dc <__adddf3>
 800f5d2:	2d0f      	cmp	r5, #15
 800f5d4:	4682      	mov	sl, r0
 800f5d6:	468b      	mov	fp, r1
 800f5d8:	ddd5      	ble.n	800f586 <_strtod_l+0x3b6>
 800f5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5dc:	1b2c      	subs	r4, r5, r4
 800f5de:	441c      	add	r4, r3
 800f5e0:	2c00      	cmp	r4, #0
 800f5e2:	f340 8093 	ble.w	800f70c <_strtod_l+0x53c>
 800f5e6:	f014 030f 	ands.w	r3, r4, #15
 800f5ea:	d00a      	beq.n	800f602 <_strtod_l+0x432>
 800f5ec:	495c      	ldr	r1, [pc, #368]	@ (800f760 <_strtod_l+0x590>)
 800f5ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f5f2:	4652      	mov	r2, sl
 800f5f4:	465b      	mov	r3, fp
 800f5f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5fa:	f7f1 f825 	bl	8000648 <__aeabi_dmul>
 800f5fe:	4682      	mov	sl, r0
 800f600:	468b      	mov	fp, r1
 800f602:	f034 040f 	bics.w	r4, r4, #15
 800f606:	d073      	beq.n	800f6f0 <_strtod_l+0x520>
 800f608:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f60c:	dd49      	ble.n	800f6a2 <_strtod_l+0x4d2>
 800f60e:	2400      	movs	r4, #0
 800f610:	46a0      	mov	r8, r4
 800f612:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f614:	46a1      	mov	r9, r4
 800f616:	9a05      	ldr	r2, [sp, #20]
 800f618:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f768 <_strtod_l+0x598>
 800f61c:	2322      	movs	r3, #34	@ 0x22
 800f61e:	6013      	str	r3, [r2, #0]
 800f620:	f04f 0a00 	mov.w	sl, #0
 800f624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f626:	2b00      	cmp	r3, #0
 800f628:	f43f ae0b 	beq.w	800f242 <_strtod_l+0x72>
 800f62c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f62e:	9805      	ldr	r0, [sp, #20]
 800f630:	f7ff f946 	bl	800e8c0 <_Bfree>
 800f634:	9805      	ldr	r0, [sp, #20]
 800f636:	4649      	mov	r1, r9
 800f638:	f7ff f942 	bl	800e8c0 <_Bfree>
 800f63c:	9805      	ldr	r0, [sp, #20]
 800f63e:	4641      	mov	r1, r8
 800f640:	f7ff f93e 	bl	800e8c0 <_Bfree>
 800f644:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f646:	9805      	ldr	r0, [sp, #20]
 800f648:	f7ff f93a 	bl	800e8c0 <_Bfree>
 800f64c:	9805      	ldr	r0, [sp, #20]
 800f64e:	4621      	mov	r1, r4
 800f650:	f7ff f936 	bl	800e8c0 <_Bfree>
 800f654:	e5f5      	b.n	800f242 <_strtod_l+0x72>
 800f656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f658:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f65c:	4293      	cmp	r3, r2
 800f65e:	dbbc      	blt.n	800f5da <_strtod_l+0x40a>
 800f660:	4c3f      	ldr	r4, [pc, #252]	@ (800f760 <_strtod_l+0x590>)
 800f662:	f1c5 050f 	rsb	r5, r5, #15
 800f666:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f66a:	4652      	mov	r2, sl
 800f66c:	465b      	mov	r3, fp
 800f66e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f672:	f7f0 ffe9 	bl	8000648 <__aeabi_dmul>
 800f676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f678:	1b5d      	subs	r5, r3, r5
 800f67a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f67e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f682:	e78f      	b.n	800f5a4 <_strtod_l+0x3d4>
 800f684:	3316      	adds	r3, #22
 800f686:	dba8      	blt.n	800f5da <_strtod_l+0x40a>
 800f688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f68a:	eba3 0808 	sub.w	r8, r3, r8
 800f68e:	4b34      	ldr	r3, [pc, #208]	@ (800f760 <_strtod_l+0x590>)
 800f690:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f694:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f698:	4650      	mov	r0, sl
 800f69a:	4659      	mov	r1, fp
 800f69c:	f7f1 f8fe 	bl	800089c <__aeabi_ddiv>
 800f6a0:	e782      	b.n	800f5a8 <_strtod_l+0x3d8>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	4f2f      	ldr	r7, [pc, #188]	@ (800f764 <_strtod_l+0x594>)
 800f6a6:	1124      	asrs	r4, r4, #4
 800f6a8:	4650      	mov	r0, sl
 800f6aa:	4659      	mov	r1, fp
 800f6ac:	461e      	mov	r6, r3
 800f6ae:	2c01      	cmp	r4, #1
 800f6b0:	dc21      	bgt.n	800f6f6 <_strtod_l+0x526>
 800f6b2:	b10b      	cbz	r3, 800f6b8 <_strtod_l+0x4e8>
 800f6b4:	4682      	mov	sl, r0
 800f6b6:	468b      	mov	fp, r1
 800f6b8:	492a      	ldr	r1, [pc, #168]	@ (800f764 <_strtod_l+0x594>)
 800f6ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f6be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f6c2:	4652      	mov	r2, sl
 800f6c4:	465b      	mov	r3, fp
 800f6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6ca:	f7f0 ffbd 	bl	8000648 <__aeabi_dmul>
 800f6ce:	4b26      	ldr	r3, [pc, #152]	@ (800f768 <_strtod_l+0x598>)
 800f6d0:	460a      	mov	r2, r1
 800f6d2:	400b      	ands	r3, r1
 800f6d4:	4925      	ldr	r1, [pc, #148]	@ (800f76c <_strtod_l+0x59c>)
 800f6d6:	428b      	cmp	r3, r1
 800f6d8:	4682      	mov	sl, r0
 800f6da:	d898      	bhi.n	800f60e <_strtod_l+0x43e>
 800f6dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f6e0:	428b      	cmp	r3, r1
 800f6e2:	bf86      	itte	hi
 800f6e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f770 <_strtod_l+0x5a0>
 800f6e8:	f04f 3aff 	movhi.w	sl, #4294967295
 800f6ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9308      	str	r3, [sp, #32]
 800f6f4:	e076      	b.n	800f7e4 <_strtod_l+0x614>
 800f6f6:	07e2      	lsls	r2, r4, #31
 800f6f8:	d504      	bpl.n	800f704 <_strtod_l+0x534>
 800f6fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6fe:	f7f0 ffa3 	bl	8000648 <__aeabi_dmul>
 800f702:	2301      	movs	r3, #1
 800f704:	3601      	adds	r6, #1
 800f706:	1064      	asrs	r4, r4, #1
 800f708:	3708      	adds	r7, #8
 800f70a:	e7d0      	b.n	800f6ae <_strtod_l+0x4de>
 800f70c:	d0f0      	beq.n	800f6f0 <_strtod_l+0x520>
 800f70e:	4264      	negs	r4, r4
 800f710:	f014 020f 	ands.w	r2, r4, #15
 800f714:	d00a      	beq.n	800f72c <_strtod_l+0x55c>
 800f716:	4b12      	ldr	r3, [pc, #72]	@ (800f760 <_strtod_l+0x590>)
 800f718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f71c:	4650      	mov	r0, sl
 800f71e:	4659      	mov	r1, fp
 800f720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f724:	f7f1 f8ba 	bl	800089c <__aeabi_ddiv>
 800f728:	4682      	mov	sl, r0
 800f72a:	468b      	mov	fp, r1
 800f72c:	1124      	asrs	r4, r4, #4
 800f72e:	d0df      	beq.n	800f6f0 <_strtod_l+0x520>
 800f730:	2c1f      	cmp	r4, #31
 800f732:	dd1f      	ble.n	800f774 <_strtod_l+0x5a4>
 800f734:	2400      	movs	r4, #0
 800f736:	46a0      	mov	r8, r4
 800f738:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f73a:	46a1      	mov	r9, r4
 800f73c:	9a05      	ldr	r2, [sp, #20]
 800f73e:	2322      	movs	r3, #34	@ 0x22
 800f740:	f04f 0a00 	mov.w	sl, #0
 800f744:	f04f 0b00 	mov.w	fp, #0
 800f748:	6013      	str	r3, [r2, #0]
 800f74a:	e76b      	b.n	800f624 <_strtod_l+0x454>
 800f74c:	08011bbd 	.word	0x08011bbd
 800f750:	08011e88 	.word	0x08011e88
 800f754:	08011bb5 	.word	0x08011bb5
 800f758:	08011bec 	.word	0x08011bec
 800f75c:	08011d25 	.word	0x08011d25
 800f760:	08011dc0 	.word	0x08011dc0
 800f764:	08011d98 	.word	0x08011d98
 800f768:	7ff00000 	.word	0x7ff00000
 800f76c:	7ca00000 	.word	0x7ca00000
 800f770:	7fefffff 	.word	0x7fefffff
 800f774:	f014 0310 	ands.w	r3, r4, #16
 800f778:	bf18      	it	ne
 800f77a:	236a      	movne	r3, #106	@ 0x6a
 800f77c:	4ea9      	ldr	r6, [pc, #676]	@ (800fa24 <_strtod_l+0x854>)
 800f77e:	9308      	str	r3, [sp, #32]
 800f780:	4650      	mov	r0, sl
 800f782:	4659      	mov	r1, fp
 800f784:	2300      	movs	r3, #0
 800f786:	07e7      	lsls	r7, r4, #31
 800f788:	d504      	bpl.n	800f794 <_strtod_l+0x5c4>
 800f78a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f78e:	f7f0 ff5b 	bl	8000648 <__aeabi_dmul>
 800f792:	2301      	movs	r3, #1
 800f794:	1064      	asrs	r4, r4, #1
 800f796:	f106 0608 	add.w	r6, r6, #8
 800f79a:	d1f4      	bne.n	800f786 <_strtod_l+0x5b6>
 800f79c:	b10b      	cbz	r3, 800f7a2 <_strtod_l+0x5d2>
 800f79e:	4682      	mov	sl, r0
 800f7a0:	468b      	mov	fp, r1
 800f7a2:	9b08      	ldr	r3, [sp, #32]
 800f7a4:	b1b3      	cbz	r3, 800f7d4 <_strtod_l+0x604>
 800f7a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f7aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	4659      	mov	r1, fp
 800f7b2:	dd0f      	ble.n	800f7d4 <_strtod_l+0x604>
 800f7b4:	2b1f      	cmp	r3, #31
 800f7b6:	dd56      	ble.n	800f866 <_strtod_l+0x696>
 800f7b8:	2b34      	cmp	r3, #52	@ 0x34
 800f7ba:	bfde      	ittt	le
 800f7bc:	f04f 33ff 	movle.w	r3, #4294967295
 800f7c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f7c4:	4093      	lslle	r3, r2
 800f7c6:	f04f 0a00 	mov.w	sl, #0
 800f7ca:	bfcc      	ite	gt
 800f7cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f7d0:	ea03 0b01 	andle.w	fp, r3, r1
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	4650      	mov	r0, sl
 800f7da:	4659      	mov	r1, fp
 800f7dc:	f7f1 f99c 	bl	8000b18 <__aeabi_dcmpeq>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d1a7      	bne.n	800f734 <_strtod_l+0x564>
 800f7e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f7ea:	9805      	ldr	r0, [sp, #20]
 800f7ec:	462b      	mov	r3, r5
 800f7ee:	464a      	mov	r2, r9
 800f7f0:	f7ff f8ce 	bl	800e990 <__s2b>
 800f7f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	f43f af09 	beq.w	800f60e <_strtod_l+0x43e>
 800f7fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f800:	2a00      	cmp	r2, #0
 800f802:	eba3 0308 	sub.w	r3, r3, r8
 800f806:	bfa8      	it	ge
 800f808:	2300      	movge	r3, #0
 800f80a:	9312      	str	r3, [sp, #72]	@ 0x48
 800f80c:	2400      	movs	r4, #0
 800f80e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f812:	9316      	str	r3, [sp, #88]	@ 0x58
 800f814:	46a0      	mov	r8, r4
 800f816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f818:	9805      	ldr	r0, [sp, #20]
 800f81a:	6859      	ldr	r1, [r3, #4]
 800f81c:	f7ff f810 	bl	800e840 <_Balloc>
 800f820:	4681      	mov	r9, r0
 800f822:	2800      	cmp	r0, #0
 800f824:	f43f aef7 	beq.w	800f616 <_strtod_l+0x446>
 800f828:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f82a:	691a      	ldr	r2, [r3, #16]
 800f82c:	3202      	adds	r2, #2
 800f82e:	f103 010c 	add.w	r1, r3, #12
 800f832:	0092      	lsls	r2, r2, #2
 800f834:	300c      	adds	r0, #12
 800f836:	f7fe f894 	bl	800d962 <memcpy>
 800f83a:	ec4b ab10 	vmov	d0, sl, fp
 800f83e:	9805      	ldr	r0, [sp, #20]
 800f840:	aa1c      	add	r2, sp, #112	@ 0x70
 800f842:	a91b      	add	r1, sp, #108	@ 0x6c
 800f844:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f848:	f7ff fbd6 	bl	800eff8 <__d2b>
 800f84c:	901a      	str	r0, [sp, #104]	@ 0x68
 800f84e:	2800      	cmp	r0, #0
 800f850:	f43f aee1 	beq.w	800f616 <_strtod_l+0x446>
 800f854:	9805      	ldr	r0, [sp, #20]
 800f856:	2101      	movs	r1, #1
 800f858:	f7ff f930 	bl	800eabc <__i2b>
 800f85c:	4680      	mov	r8, r0
 800f85e:	b948      	cbnz	r0, 800f874 <_strtod_l+0x6a4>
 800f860:	f04f 0800 	mov.w	r8, #0
 800f864:	e6d7      	b.n	800f616 <_strtod_l+0x446>
 800f866:	f04f 32ff 	mov.w	r2, #4294967295
 800f86a:	fa02 f303 	lsl.w	r3, r2, r3
 800f86e:	ea03 0a0a 	and.w	sl, r3, sl
 800f872:	e7af      	b.n	800f7d4 <_strtod_l+0x604>
 800f874:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f876:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f878:	2d00      	cmp	r5, #0
 800f87a:	bfab      	itete	ge
 800f87c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f87e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f880:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f882:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f884:	bfac      	ite	ge
 800f886:	18ef      	addge	r7, r5, r3
 800f888:	1b5e      	sublt	r6, r3, r5
 800f88a:	9b08      	ldr	r3, [sp, #32]
 800f88c:	1aed      	subs	r5, r5, r3
 800f88e:	4415      	add	r5, r2
 800f890:	4b65      	ldr	r3, [pc, #404]	@ (800fa28 <_strtod_l+0x858>)
 800f892:	3d01      	subs	r5, #1
 800f894:	429d      	cmp	r5, r3
 800f896:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f89a:	da50      	bge.n	800f93e <_strtod_l+0x76e>
 800f89c:	1b5b      	subs	r3, r3, r5
 800f89e:	2b1f      	cmp	r3, #31
 800f8a0:	eba2 0203 	sub.w	r2, r2, r3
 800f8a4:	f04f 0101 	mov.w	r1, #1
 800f8a8:	dc3d      	bgt.n	800f926 <_strtod_l+0x756>
 800f8aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f8ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	9310      	str	r3, [sp, #64]	@ 0x40
 800f8b4:	18bd      	adds	r5, r7, r2
 800f8b6:	9b08      	ldr	r3, [sp, #32]
 800f8b8:	42af      	cmp	r7, r5
 800f8ba:	4416      	add	r6, r2
 800f8bc:	441e      	add	r6, r3
 800f8be:	463b      	mov	r3, r7
 800f8c0:	bfa8      	it	ge
 800f8c2:	462b      	movge	r3, r5
 800f8c4:	42b3      	cmp	r3, r6
 800f8c6:	bfa8      	it	ge
 800f8c8:	4633      	movge	r3, r6
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	bfc2      	ittt	gt
 800f8ce:	1aed      	subgt	r5, r5, r3
 800f8d0:	1af6      	subgt	r6, r6, r3
 800f8d2:	1aff      	subgt	r7, r7, r3
 800f8d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	dd16      	ble.n	800f908 <_strtod_l+0x738>
 800f8da:	4641      	mov	r1, r8
 800f8dc:	9805      	ldr	r0, [sp, #20]
 800f8de:	461a      	mov	r2, r3
 800f8e0:	f7ff f9a4 	bl	800ec2c <__pow5mult>
 800f8e4:	4680      	mov	r8, r0
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d0ba      	beq.n	800f860 <_strtod_l+0x690>
 800f8ea:	4601      	mov	r1, r0
 800f8ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f8ee:	9805      	ldr	r0, [sp, #20]
 800f8f0:	f7ff f8fa 	bl	800eae8 <__multiply>
 800f8f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	f43f ae8d 	beq.w	800f616 <_strtod_l+0x446>
 800f8fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8fe:	9805      	ldr	r0, [sp, #20]
 800f900:	f7fe ffde 	bl	800e8c0 <_Bfree>
 800f904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f906:	931a      	str	r3, [sp, #104]	@ 0x68
 800f908:	2d00      	cmp	r5, #0
 800f90a:	dc1d      	bgt.n	800f948 <_strtod_l+0x778>
 800f90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f90e:	2b00      	cmp	r3, #0
 800f910:	dd23      	ble.n	800f95a <_strtod_l+0x78a>
 800f912:	4649      	mov	r1, r9
 800f914:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f916:	9805      	ldr	r0, [sp, #20]
 800f918:	f7ff f988 	bl	800ec2c <__pow5mult>
 800f91c:	4681      	mov	r9, r0
 800f91e:	b9e0      	cbnz	r0, 800f95a <_strtod_l+0x78a>
 800f920:	f04f 0900 	mov.w	r9, #0
 800f924:	e677      	b.n	800f616 <_strtod_l+0x446>
 800f926:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f92a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f92e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f932:	35e2      	adds	r5, #226	@ 0xe2
 800f934:	fa01 f305 	lsl.w	r3, r1, r5
 800f938:	9310      	str	r3, [sp, #64]	@ 0x40
 800f93a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f93c:	e7ba      	b.n	800f8b4 <_strtod_l+0x6e4>
 800f93e:	2300      	movs	r3, #0
 800f940:	9310      	str	r3, [sp, #64]	@ 0x40
 800f942:	2301      	movs	r3, #1
 800f944:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f946:	e7b5      	b.n	800f8b4 <_strtod_l+0x6e4>
 800f948:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f94a:	9805      	ldr	r0, [sp, #20]
 800f94c:	462a      	mov	r2, r5
 800f94e:	f7ff f9c7 	bl	800ece0 <__lshift>
 800f952:	901a      	str	r0, [sp, #104]	@ 0x68
 800f954:	2800      	cmp	r0, #0
 800f956:	d1d9      	bne.n	800f90c <_strtod_l+0x73c>
 800f958:	e65d      	b.n	800f616 <_strtod_l+0x446>
 800f95a:	2e00      	cmp	r6, #0
 800f95c:	dd07      	ble.n	800f96e <_strtod_l+0x79e>
 800f95e:	4649      	mov	r1, r9
 800f960:	9805      	ldr	r0, [sp, #20]
 800f962:	4632      	mov	r2, r6
 800f964:	f7ff f9bc 	bl	800ece0 <__lshift>
 800f968:	4681      	mov	r9, r0
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d0d8      	beq.n	800f920 <_strtod_l+0x750>
 800f96e:	2f00      	cmp	r7, #0
 800f970:	dd08      	ble.n	800f984 <_strtod_l+0x7b4>
 800f972:	4641      	mov	r1, r8
 800f974:	9805      	ldr	r0, [sp, #20]
 800f976:	463a      	mov	r2, r7
 800f978:	f7ff f9b2 	bl	800ece0 <__lshift>
 800f97c:	4680      	mov	r8, r0
 800f97e:	2800      	cmp	r0, #0
 800f980:	f43f ae49 	beq.w	800f616 <_strtod_l+0x446>
 800f984:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f986:	9805      	ldr	r0, [sp, #20]
 800f988:	464a      	mov	r2, r9
 800f98a:	f7ff fa31 	bl	800edf0 <__mdiff>
 800f98e:	4604      	mov	r4, r0
 800f990:	2800      	cmp	r0, #0
 800f992:	f43f ae40 	beq.w	800f616 <_strtod_l+0x446>
 800f996:	68c3      	ldr	r3, [r0, #12]
 800f998:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f99a:	2300      	movs	r3, #0
 800f99c:	60c3      	str	r3, [r0, #12]
 800f99e:	4641      	mov	r1, r8
 800f9a0:	f7ff fa0a 	bl	800edb8 <__mcmp>
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	da45      	bge.n	800fa34 <_strtod_l+0x864>
 800f9a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9aa:	ea53 030a 	orrs.w	r3, r3, sl
 800f9ae:	d16b      	bne.n	800fa88 <_strtod_l+0x8b8>
 800f9b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d167      	bne.n	800fa88 <_strtod_l+0x8b8>
 800f9b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f9bc:	0d1b      	lsrs	r3, r3, #20
 800f9be:	051b      	lsls	r3, r3, #20
 800f9c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f9c4:	d960      	bls.n	800fa88 <_strtod_l+0x8b8>
 800f9c6:	6963      	ldr	r3, [r4, #20]
 800f9c8:	b913      	cbnz	r3, 800f9d0 <_strtod_l+0x800>
 800f9ca:	6923      	ldr	r3, [r4, #16]
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	dd5b      	ble.n	800fa88 <_strtod_l+0x8b8>
 800f9d0:	4621      	mov	r1, r4
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	9805      	ldr	r0, [sp, #20]
 800f9d6:	f7ff f983 	bl	800ece0 <__lshift>
 800f9da:	4641      	mov	r1, r8
 800f9dc:	4604      	mov	r4, r0
 800f9de:	f7ff f9eb 	bl	800edb8 <__mcmp>
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	dd50      	ble.n	800fa88 <_strtod_l+0x8b8>
 800f9e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f9ea:	9a08      	ldr	r2, [sp, #32]
 800f9ec:	0d1b      	lsrs	r3, r3, #20
 800f9ee:	051b      	lsls	r3, r3, #20
 800f9f0:	2a00      	cmp	r2, #0
 800f9f2:	d06a      	beq.n	800faca <_strtod_l+0x8fa>
 800f9f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f9f8:	d867      	bhi.n	800faca <_strtod_l+0x8fa>
 800f9fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f9fe:	f67f ae9d 	bls.w	800f73c <_strtod_l+0x56c>
 800fa02:	4b0a      	ldr	r3, [pc, #40]	@ (800fa2c <_strtod_l+0x85c>)
 800fa04:	4650      	mov	r0, sl
 800fa06:	4659      	mov	r1, fp
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f7f0 fe1d 	bl	8000648 <__aeabi_dmul>
 800fa0e:	4b08      	ldr	r3, [pc, #32]	@ (800fa30 <_strtod_l+0x860>)
 800fa10:	400b      	ands	r3, r1
 800fa12:	4682      	mov	sl, r0
 800fa14:	468b      	mov	fp, r1
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f47f ae08 	bne.w	800f62c <_strtod_l+0x45c>
 800fa1c:	9a05      	ldr	r2, [sp, #20]
 800fa1e:	2322      	movs	r3, #34	@ 0x22
 800fa20:	6013      	str	r3, [r2, #0]
 800fa22:	e603      	b.n	800f62c <_strtod_l+0x45c>
 800fa24:	08011eb0 	.word	0x08011eb0
 800fa28:	fffffc02 	.word	0xfffffc02
 800fa2c:	39500000 	.word	0x39500000
 800fa30:	7ff00000 	.word	0x7ff00000
 800fa34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fa38:	d165      	bne.n	800fb06 <_strtod_l+0x936>
 800fa3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fa3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa40:	b35a      	cbz	r2, 800fa9a <_strtod_l+0x8ca>
 800fa42:	4a9f      	ldr	r2, [pc, #636]	@ (800fcc0 <_strtod_l+0xaf0>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d12b      	bne.n	800faa0 <_strtod_l+0x8d0>
 800fa48:	9b08      	ldr	r3, [sp, #32]
 800fa4a:	4651      	mov	r1, sl
 800fa4c:	b303      	cbz	r3, 800fa90 <_strtod_l+0x8c0>
 800fa4e:	4b9d      	ldr	r3, [pc, #628]	@ (800fcc4 <_strtod_l+0xaf4>)
 800fa50:	465a      	mov	r2, fp
 800fa52:	4013      	ands	r3, r2
 800fa54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fa58:	f04f 32ff 	mov.w	r2, #4294967295
 800fa5c:	d81b      	bhi.n	800fa96 <_strtod_l+0x8c6>
 800fa5e:	0d1b      	lsrs	r3, r3, #20
 800fa60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fa64:	fa02 f303 	lsl.w	r3, r2, r3
 800fa68:	4299      	cmp	r1, r3
 800fa6a:	d119      	bne.n	800faa0 <_strtod_l+0x8d0>
 800fa6c:	4b96      	ldr	r3, [pc, #600]	@ (800fcc8 <_strtod_l+0xaf8>)
 800fa6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d102      	bne.n	800fa7a <_strtod_l+0x8aa>
 800fa74:	3101      	adds	r1, #1
 800fa76:	f43f adce 	beq.w	800f616 <_strtod_l+0x446>
 800fa7a:	4b92      	ldr	r3, [pc, #584]	@ (800fcc4 <_strtod_l+0xaf4>)
 800fa7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa7e:	401a      	ands	r2, r3
 800fa80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fa84:	f04f 0a00 	mov.w	sl, #0
 800fa88:	9b08      	ldr	r3, [sp, #32]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d1b9      	bne.n	800fa02 <_strtod_l+0x832>
 800fa8e:	e5cd      	b.n	800f62c <_strtod_l+0x45c>
 800fa90:	f04f 33ff 	mov.w	r3, #4294967295
 800fa94:	e7e8      	b.n	800fa68 <_strtod_l+0x898>
 800fa96:	4613      	mov	r3, r2
 800fa98:	e7e6      	b.n	800fa68 <_strtod_l+0x898>
 800fa9a:	ea53 030a 	orrs.w	r3, r3, sl
 800fa9e:	d0a2      	beq.n	800f9e6 <_strtod_l+0x816>
 800faa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800faa2:	b1db      	cbz	r3, 800fadc <_strtod_l+0x90c>
 800faa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800faa6:	4213      	tst	r3, r2
 800faa8:	d0ee      	beq.n	800fa88 <_strtod_l+0x8b8>
 800faaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800faac:	9a08      	ldr	r2, [sp, #32]
 800faae:	4650      	mov	r0, sl
 800fab0:	4659      	mov	r1, fp
 800fab2:	b1bb      	cbz	r3, 800fae4 <_strtod_l+0x914>
 800fab4:	f7ff fb6e 	bl	800f194 <sulp>
 800fab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fabc:	ec53 2b10 	vmov	r2, r3, d0
 800fac0:	f7f0 fc0c 	bl	80002dc <__adddf3>
 800fac4:	4682      	mov	sl, r0
 800fac6:	468b      	mov	fp, r1
 800fac8:	e7de      	b.n	800fa88 <_strtod_l+0x8b8>
 800faca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800face:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fad2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fad6:	f04f 3aff 	mov.w	sl, #4294967295
 800fada:	e7d5      	b.n	800fa88 <_strtod_l+0x8b8>
 800fadc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fade:	ea13 0f0a 	tst.w	r3, sl
 800fae2:	e7e1      	b.n	800faa8 <_strtod_l+0x8d8>
 800fae4:	f7ff fb56 	bl	800f194 <sulp>
 800fae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800faec:	ec53 2b10 	vmov	r2, r3, d0
 800faf0:	f7f0 fbf2 	bl	80002d8 <__aeabi_dsub>
 800faf4:	2200      	movs	r2, #0
 800faf6:	2300      	movs	r3, #0
 800faf8:	4682      	mov	sl, r0
 800fafa:	468b      	mov	fp, r1
 800fafc:	f7f1 f80c 	bl	8000b18 <__aeabi_dcmpeq>
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d0c1      	beq.n	800fa88 <_strtod_l+0x8b8>
 800fb04:	e61a      	b.n	800f73c <_strtod_l+0x56c>
 800fb06:	4641      	mov	r1, r8
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f7ff facd 	bl	800f0a8 <__ratio>
 800fb0e:	ec57 6b10 	vmov	r6, r7, d0
 800fb12:	2200      	movs	r2, #0
 800fb14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fb18:	4630      	mov	r0, r6
 800fb1a:	4639      	mov	r1, r7
 800fb1c:	f7f1 f810 	bl	8000b40 <__aeabi_dcmple>
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d06f      	beq.n	800fc04 <_strtod_l+0xa34>
 800fb24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d17a      	bne.n	800fc20 <_strtod_l+0xa50>
 800fb2a:	f1ba 0f00 	cmp.w	sl, #0
 800fb2e:	d158      	bne.n	800fbe2 <_strtod_l+0xa12>
 800fb30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d15a      	bne.n	800fbf0 <_strtod_l+0xa20>
 800fb3a:	4b64      	ldr	r3, [pc, #400]	@ (800fccc <_strtod_l+0xafc>)
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	4630      	mov	r0, r6
 800fb40:	4639      	mov	r1, r7
 800fb42:	f7f0 fff3 	bl	8000b2c <__aeabi_dcmplt>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d159      	bne.n	800fbfe <_strtod_l+0xa2e>
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	4639      	mov	r1, r7
 800fb4e:	4b60      	ldr	r3, [pc, #384]	@ (800fcd0 <_strtod_l+0xb00>)
 800fb50:	2200      	movs	r2, #0
 800fb52:	f7f0 fd79 	bl	8000648 <__aeabi_dmul>
 800fb56:	4606      	mov	r6, r0
 800fb58:	460f      	mov	r7, r1
 800fb5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fb5e:	9606      	str	r6, [sp, #24]
 800fb60:	9307      	str	r3, [sp, #28]
 800fb62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb66:	4d57      	ldr	r5, [pc, #348]	@ (800fcc4 <_strtod_l+0xaf4>)
 800fb68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fb6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb6e:	401d      	ands	r5, r3
 800fb70:	4b58      	ldr	r3, [pc, #352]	@ (800fcd4 <_strtod_l+0xb04>)
 800fb72:	429d      	cmp	r5, r3
 800fb74:	f040 80b2 	bne.w	800fcdc <_strtod_l+0xb0c>
 800fb78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fb7e:	ec4b ab10 	vmov	d0, sl, fp
 800fb82:	f7ff f9c9 	bl	800ef18 <__ulp>
 800fb86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb8a:	ec51 0b10 	vmov	r0, r1, d0
 800fb8e:	f7f0 fd5b 	bl	8000648 <__aeabi_dmul>
 800fb92:	4652      	mov	r2, sl
 800fb94:	465b      	mov	r3, fp
 800fb96:	f7f0 fba1 	bl	80002dc <__adddf3>
 800fb9a:	460b      	mov	r3, r1
 800fb9c:	4949      	ldr	r1, [pc, #292]	@ (800fcc4 <_strtod_l+0xaf4>)
 800fb9e:	4a4e      	ldr	r2, [pc, #312]	@ (800fcd8 <_strtod_l+0xb08>)
 800fba0:	4019      	ands	r1, r3
 800fba2:	4291      	cmp	r1, r2
 800fba4:	4682      	mov	sl, r0
 800fba6:	d942      	bls.n	800fc2e <_strtod_l+0xa5e>
 800fba8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fbaa:	4b47      	ldr	r3, [pc, #284]	@ (800fcc8 <_strtod_l+0xaf8>)
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d103      	bne.n	800fbb8 <_strtod_l+0x9e8>
 800fbb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	f43f ad2f 	beq.w	800f616 <_strtod_l+0x446>
 800fbb8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fcc8 <_strtod_l+0xaf8>
 800fbbc:	f04f 3aff 	mov.w	sl, #4294967295
 800fbc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fbc2:	9805      	ldr	r0, [sp, #20]
 800fbc4:	f7fe fe7c 	bl	800e8c0 <_Bfree>
 800fbc8:	9805      	ldr	r0, [sp, #20]
 800fbca:	4649      	mov	r1, r9
 800fbcc:	f7fe fe78 	bl	800e8c0 <_Bfree>
 800fbd0:	9805      	ldr	r0, [sp, #20]
 800fbd2:	4641      	mov	r1, r8
 800fbd4:	f7fe fe74 	bl	800e8c0 <_Bfree>
 800fbd8:	9805      	ldr	r0, [sp, #20]
 800fbda:	4621      	mov	r1, r4
 800fbdc:	f7fe fe70 	bl	800e8c0 <_Bfree>
 800fbe0:	e619      	b.n	800f816 <_strtod_l+0x646>
 800fbe2:	f1ba 0f01 	cmp.w	sl, #1
 800fbe6:	d103      	bne.n	800fbf0 <_strtod_l+0xa20>
 800fbe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	f43f ada6 	beq.w	800f73c <_strtod_l+0x56c>
 800fbf0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fca0 <_strtod_l+0xad0>
 800fbf4:	4f35      	ldr	r7, [pc, #212]	@ (800fccc <_strtod_l+0xafc>)
 800fbf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fbfa:	2600      	movs	r6, #0
 800fbfc:	e7b1      	b.n	800fb62 <_strtod_l+0x992>
 800fbfe:	4f34      	ldr	r7, [pc, #208]	@ (800fcd0 <_strtod_l+0xb00>)
 800fc00:	2600      	movs	r6, #0
 800fc02:	e7aa      	b.n	800fb5a <_strtod_l+0x98a>
 800fc04:	4b32      	ldr	r3, [pc, #200]	@ (800fcd0 <_strtod_l+0xb00>)
 800fc06:	4630      	mov	r0, r6
 800fc08:	4639      	mov	r1, r7
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f7f0 fd1c 	bl	8000648 <__aeabi_dmul>
 800fc10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc12:	4606      	mov	r6, r0
 800fc14:	460f      	mov	r7, r1
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d09f      	beq.n	800fb5a <_strtod_l+0x98a>
 800fc1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fc1e:	e7a0      	b.n	800fb62 <_strtod_l+0x992>
 800fc20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fca8 <_strtod_l+0xad8>
 800fc24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fc28:	ec57 6b17 	vmov	r6, r7, d7
 800fc2c:	e799      	b.n	800fb62 <_strtod_l+0x992>
 800fc2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fc32:	9b08      	ldr	r3, [sp, #32]
 800fc34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1c1      	bne.n	800fbc0 <_strtod_l+0x9f0>
 800fc3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fc40:	0d1b      	lsrs	r3, r3, #20
 800fc42:	051b      	lsls	r3, r3, #20
 800fc44:	429d      	cmp	r5, r3
 800fc46:	d1bb      	bne.n	800fbc0 <_strtod_l+0x9f0>
 800fc48:	4630      	mov	r0, r6
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	f7f1 f85c 	bl	8000d08 <__aeabi_d2lz>
 800fc50:	f7f0 fccc 	bl	80005ec <__aeabi_l2d>
 800fc54:	4602      	mov	r2, r0
 800fc56:	460b      	mov	r3, r1
 800fc58:	4630      	mov	r0, r6
 800fc5a:	4639      	mov	r1, r7
 800fc5c:	f7f0 fb3c 	bl	80002d8 <__aeabi_dsub>
 800fc60:	460b      	mov	r3, r1
 800fc62:	4602      	mov	r2, r0
 800fc64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fc68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fc6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc6e:	ea46 060a 	orr.w	r6, r6, sl
 800fc72:	431e      	orrs	r6, r3
 800fc74:	d06f      	beq.n	800fd56 <_strtod_l+0xb86>
 800fc76:	a30e      	add	r3, pc, #56	@ (adr r3, 800fcb0 <_strtod_l+0xae0>)
 800fc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7c:	f7f0 ff56 	bl	8000b2c <__aeabi_dcmplt>
 800fc80:	2800      	cmp	r0, #0
 800fc82:	f47f acd3 	bne.w	800f62c <_strtod_l+0x45c>
 800fc86:	a30c      	add	r3, pc, #48	@ (adr r3, 800fcb8 <_strtod_l+0xae8>)
 800fc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc90:	f7f0 ff6a 	bl	8000b68 <__aeabi_dcmpgt>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d093      	beq.n	800fbc0 <_strtod_l+0x9f0>
 800fc98:	e4c8      	b.n	800f62c <_strtod_l+0x45c>
 800fc9a:	bf00      	nop
 800fc9c:	f3af 8000 	nop.w
 800fca0:	00000000 	.word	0x00000000
 800fca4:	bff00000 	.word	0xbff00000
 800fca8:	00000000 	.word	0x00000000
 800fcac:	3ff00000 	.word	0x3ff00000
 800fcb0:	94a03595 	.word	0x94a03595
 800fcb4:	3fdfffff 	.word	0x3fdfffff
 800fcb8:	35afe535 	.word	0x35afe535
 800fcbc:	3fe00000 	.word	0x3fe00000
 800fcc0:	000fffff 	.word	0x000fffff
 800fcc4:	7ff00000 	.word	0x7ff00000
 800fcc8:	7fefffff 	.word	0x7fefffff
 800fccc:	3ff00000 	.word	0x3ff00000
 800fcd0:	3fe00000 	.word	0x3fe00000
 800fcd4:	7fe00000 	.word	0x7fe00000
 800fcd8:	7c9fffff 	.word	0x7c9fffff
 800fcdc:	9b08      	ldr	r3, [sp, #32]
 800fcde:	b323      	cbz	r3, 800fd2a <_strtod_l+0xb5a>
 800fce0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fce4:	d821      	bhi.n	800fd2a <_strtod_l+0xb5a>
 800fce6:	a328      	add	r3, pc, #160	@ (adr r3, 800fd88 <_strtod_l+0xbb8>)
 800fce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcec:	4630      	mov	r0, r6
 800fcee:	4639      	mov	r1, r7
 800fcf0:	f7f0 ff26 	bl	8000b40 <__aeabi_dcmple>
 800fcf4:	b1a0      	cbz	r0, 800fd20 <_strtod_l+0xb50>
 800fcf6:	4639      	mov	r1, r7
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	f7f0 ff7d 	bl	8000bf8 <__aeabi_d2uiz>
 800fcfe:	2801      	cmp	r0, #1
 800fd00:	bf38      	it	cc
 800fd02:	2001      	movcc	r0, #1
 800fd04:	f7f0 fc26 	bl	8000554 <__aeabi_ui2d>
 800fd08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd0a:	4606      	mov	r6, r0
 800fd0c:	460f      	mov	r7, r1
 800fd0e:	b9fb      	cbnz	r3, 800fd50 <_strtod_l+0xb80>
 800fd10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fd14:	9014      	str	r0, [sp, #80]	@ 0x50
 800fd16:	9315      	str	r3, [sp, #84]	@ 0x54
 800fd18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fd1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fd20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fd22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fd26:	1b5b      	subs	r3, r3, r5
 800fd28:	9311      	str	r3, [sp, #68]	@ 0x44
 800fd2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fd2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fd32:	f7ff f8f1 	bl	800ef18 <__ulp>
 800fd36:	4650      	mov	r0, sl
 800fd38:	ec53 2b10 	vmov	r2, r3, d0
 800fd3c:	4659      	mov	r1, fp
 800fd3e:	f7f0 fc83 	bl	8000648 <__aeabi_dmul>
 800fd42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fd46:	f7f0 fac9 	bl	80002dc <__adddf3>
 800fd4a:	4682      	mov	sl, r0
 800fd4c:	468b      	mov	fp, r1
 800fd4e:	e770      	b.n	800fc32 <_strtod_l+0xa62>
 800fd50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fd54:	e7e0      	b.n	800fd18 <_strtod_l+0xb48>
 800fd56:	a30e      	add	r3, pc, #56	@ (adr r3, 800fd90 <_strtod_l+0xbc0>)
 800fd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5c:	f7f0 fee6 	bl	8000b2c <__aeabi_dcmplt>
 800fd60:	e798      	b.n	800fc94 <_strtod_l+0xac4>
 800fd62:	2300      	movs	r3, #0
 800fd64:	930e      	str	r3, [sp, #56]	@ 0x38
 800fd66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fd68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd6a:	6013      	str	r3, [r2, #0]
 800fd6c:	f7ff ba6d 	b.w	800f24a <_strtod_l+0x7a>
 800fd70:	2a65      	cmp	r2, #101	@ 0x65
 800fd72:	f43f ab68 	beq.w	800f446 <_strtod_l+0x276>
 800fd76:	2a45      	cmp	r2, #69	@ 0x45
 800fd78:	f43f ab65 	beq.w	800f446 <_strtod_l+0x276>
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	f7ff bba0 	b.w	800f4c2 <_strtod_l+0x2f2>
 800fd82:	bf00      	nop
 800fd84:	f3af 8000 	nop.w
 800fd88:	ffc00000 	.word	0xffc00000
 800fd8c:	41dfffff 	.word	0x41dfffff
 800fd90:	94a03595 	.word	0x94a03595
 800fd94:	3fcfffff 	.word	0x3fcfffff

0800fd98 <_strtod_r>:
 800fd98:	4b01      	ldr	r3, [pc, #4]	@ (800fda0 <_strtod_r+0x8>)
 800fd9a:	f7ff ba19 	b.w	800f1d0 <_strtod_l>
 800fd9e:	bf00      	nop
 800fda0:	2000008c 	.word	0x2000008c

0800fda4 <_strtol_l.isra.0>:
 800fda4:	2b24      	cmp	r3, #36	@ 0x24
 800fda6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdaa:	4686      	mov	lr, r0
 800fdac:	4690      	mov	r8, r2
 800fdae:	d801      	bhi.n	800fdb4 <_strtol_l.isra.0+0x10>
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d106      	bne.n	800fdc2 <_strtol_l.isra.0+0x1e>
 800fdb4:	f7fd fda8 	bl	800d908 <__errno>
 800fdb8:	2316      	movs	r3, #22
 800fdba:	6003      	str	r3, [r0, #0]
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdc2:	4834      	ldr	r0, [pc, #208]	@ (800fe94 <_strtol_l.isra.0+0xf0>)
 800fdc4:	460d      	mov	r5, r1
 800fdc6:	462a      	mov	r2, r5
 800fdc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdcc:	5d06      	ldrb	r6, [r0, r4]
 800fdce:	f016 0608 	ands.w	r6, r6, #8
 800fdd2:	d1f8      	bne.n	800fdc6 <_strtol_l.isra.0+0x22>
 800fdd4:	2c2d      	cmp	r4, #45	@ 0x2d
 800fdd6:	d110      	bne.n	800fdfa <_strtol_l.isra.0+0x56>
 800fdd8:	782c      	ldrb	r4, [r5, #0]
 800fdda:	2601      	movs	r6, #1
 800fddc:	1c95      	adds	r5, r2, #2
 800fdde:	f033 0210 	bics.w	r2, r3, #16
 800fde2:	d115      	bne.n	800fe10 <_strtol_l.isra.0+0x6c>
 800fde4:	2c30      	cmp	r4, #48	@ 0x30
 800fde6:	d10d      	bne.n	800fe04 <_strtol_l.isra.0+0x60>
 800fde8:	782a      	ldrb	r2, [r5, #0]
 800fdea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fdee:	2a58      	cmp	r2, #88	@ 0x58
 800fdf0:	d108      	bne.n	800fe04 <_strtol_l.isra.0+0x60>
 800fdf2:	786c      	ldrb	r4, [r5, #1]
 800fdf4:	3502      	adds	r5, #2
 800fdf6:	2310      	movs	r3, #16
 800fdf8:	e00a      	b.n	800fe10 <_strtol_l.isra.0+0x6c>
 800fdfa:	2c2b      	cmp	r4, #43	@ 0x2b
 800fdfc:	bf04      	itt	eq
 800fdfe:	782c      	ldrbeq	r4, [r5, #0]
 800fe00:	1c95      	addeq	r5, r2, #2
 800fe02:	e7ec      	b.n	800fdde <_strtol_l.isra.0+0x3a>
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d1f6      	bne.n	800fdf6 <_strtol_l.isra.0+0x52>
 800fe08:	2c30      	cmp	r4, #48	@ 0x30
 800fe0a:	bf14      	ite	ne
 800fe0c:	230a      	movne	r3, #10
 800fe0e:	2308      	moveq	r3, #8
 800fe10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fe14:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fe18:	2200      	movs	r2, #0
 800fe1a:	fbbc f9f3 	udiv	r9, ip, r3
 800fe1e:	4610      	mov	r0, r2
 800fe20:	fb03 ca19 	mls	sl, r3, r9, ip
 800fe24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fe28:	2f09      	cmp	r7, #9
 800fe2a:	d80f      	bhi.n	800fe4c <_strtol_l.isra.0+0xa8>
 800fe2c:	463c      	mov	r4, r7
 800fe2e:	42a3      	cmp	r3, r4
 800fe30:	dd1b      	ble.n	800fe6a <_strtol_l.isra.0+0xc6>
 800fe32:	1c57      	adds	r7, r2, #1
 800fe34:	d007      	beq.n	800fe46 <_strtol_l.isra.0+0xa2>
 800fe36:	4581      	cmp	r9, r0
 800fe38:	d314      	bcc.n	800fe64 <_strtol_l.isra.0+0xc0>
 800fe3a:	d101      	bne.n	800fe40 <_strtol_l.isra.0+0x9c>
 800fe3c:	45a2      	cmp	sl, r4
 800fe3e:	db11      	blt.n	800fe64 <_strtol_l.isra.0+0xc0>
 800fe40:	fb00 4003 	mla	r0, r0, r3, r4
 800fe44:	2201      	movs	r2, #1
 800fe46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe4a:	e7eb      	b.n	800fe24 <_strtol_l.isra.0+0x80>
 800fe4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fe50:	2f19      	cmp	r7, #25
 800fe52:	d801      	bhi.n	800fe58 <_strtol_l.isra.0+0xb4>
 800fe54:	3c37      	subs	r4, #55	@ 0x37
 800fe56:	e7ea      	b.n	800fe2e <_strtol_l.isra.0+0x8a>
 800fe58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fe5c:	2f19      	cmp	r7, #25
 800fe5e:	d804      	bhi.n	800fe6a <_strtol_l.isra.0+0xc6>
 800fe60:	3c57      	subs	r4, #87	@ 0x57
 800fe62:	e7e4      	b.n	800fe2e <_strtol_l.isra.0+0x8a>
 800fe64:	f04f 32ff 	mov.w	r2, #4294967295
 800fe68:	e7ed      	b.n	800fe46 <_strtol_l.isra.0+0xa2>
 800fe6a:	1c53      	adds	r3, r2, #1
 800fe6c:	d108      	bne.n	800fe80 <_strtol_l.isra.0+0xdc>
 800fe6e:	2322      	movs	r3, #34	@ 0x22
 800fe70:	f8ce 3000 	str.w	r3, [lr]
 800fe74:	4660      	mov	r0, ip
 800fe76:	f1b8 0f00 	cmp.w	r8, #0
 800fe7a:	d0a0      	beq.n	800fdbe <_strtol_l.isra.0+0x1a>
 800fe7c:	1e69      	subs	r1, r5, #1
 800fe7e:	e006      	b.n	800fe8e <_strtol_l.isra.0+0xea>
 800fe80:	b106      	cbz	r6, 800fe84 <_strtol_l.isra.0+0xe0>
 800fe82:	4240      	negs	r0, r0
 800fe84:	f1b8 0f00 	cmp.w	r8, #0
 800fe88:	d099      	beq.n	800fdbe <_strtol_l.isra.0+0x1a>
 800fe8a:	2a00      	cmp	r2, #0
 800fe8c:	d1f6      	bne.n	800fe7c <_strtol_l.isra.0+0xd8>
 800fe8e:	f8c8 1000 	str.w	r1, [r8]
 800fe92:	e794      	b.n	800fdbe <_strtol_l.isra.0+0x1a>
 800fe94:	08011ed9 	.word	0x08011ed9

0800fe98 <_strtol_r>:
 800fe98:	f7ff bf84 	b.w	800fda4 <_strtol_l.isra.0>

0800fe9c <__ssputs_r>:
 800fe9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fea0:	688e      	ldr	r6, [r1, #8]
 800fea2:	461f      	mov	r7, r3
 800fea4:	42be      	cmp	r6, r7
 800fea6:	680b      	ldr	r3, [r1, #0]
 800fea8:	4682      	mov	sl, r0
 800feaa:	460c      	mov	r4, r1
 800feac:	4690      	mov	r8, r2
 800feae:	d82d      	bhi.n	800ff0c <__ssputs_r+0x70>
 800feb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800feb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800feb8:	d026      	beq.n	800ff08 <__ssputs_r+0x6c>
 800feba:	6965      	ldr	r5, [r4, #20]
 800febc:	6909      	ldr	r1, [r1, #16]
 800febe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fec2:	eba3 0901 	sub.w	r9, r3, r1
 800fec6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800feca:	1c7b      	adds	r3, r7, #1
 800fecc:	444b      	add	r3, r9
 800fece:	106d      	asrs	r5, r5, #1
 800fed0:	429d      	cmp	r5, r3
 800fed2:	bf38      	it	cc
 800fed4:	461d      	movcc	r5, r3
 800fed6:	0553      	lsls	r3, r2, #21
 800fed8:	d527      	bpl.n	800ff2a <__ssputs_r+0x8e>
 800feda:	4629      	mov	r1, r5
 800fedc:	f7fe fc24 	bl	800e728 <_malloc_r>
 800fee0:	4606      	mov	r6, r0
 800fee2:	b360      	cbz	r0, 800ff3e <__ssputs_r+0xa2>
 800fee4:	6921      	ldr	r1, [r4, #16]
 800fee6:	464a      	mov	r2, r9
 800fee8:	f7fd fd3b 	bl	800d962 <memcpy>
 800feec:	89a3      	ldrh	r3, [r4, #12]
 800feee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fef6:	81a3      	strh	r3, [r4, #12]
 800fef8:	6126      	str	r6, [r4, #16]
 800fefa:	6165      	str	r5, [r4, #20]
 800fefc:	444e      	add	r6, r9
 800fefe:	eba5 0509 	sub.w	r5, r5, r9
 800ff02:	6026      	str	r6, [r4, #0]
 800ff04:	60a5      	str	r5, [r4, #8]
 800ff06:	463e      	mov	r6, r7
 800ff08:	42be      	cmp	r6, r7
 800ff0a:	d900      	bls.n	800ff0e <__ssputs_r+0x72>
 800ff0c:	463e      	mov	r6, r7
 800ff0e:	6820      	ldr	r0, [r4, #0]
 800ff10:	4632      	mov	r2, r6
 800ff12:	4641      	mov	r1, r8
 800ff14:	f000 f9c6 	bl	80102a4 <memmove>
 800ff18:	68a3      	ldr	r3, [r4, #8]
 800ff1a:	1b9b      	subs	r3, r3, r6
 800ff1c:	60a3      	str	r3, [r4, #8]
 800ff1e:	6823      	ldr	r3, [r4, #0]
 800ff20:	4433      	add	r3, r6
 800ff22:	6023      	str	r3, [r4, #0]
 800ff24:	2000      	movs	r0, #0
 800ff26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2a:	462a      	mov	r2, r5
 800ff2c:	f000 fd7d 	bl	8010a2a <_realloc_r>
 800ff30:	4606      	mov	r6, r0
 800ff32:	2800      	cmp	r0, #0
 800ff34:	d1e0      	bne.n	800fef8 <__ssputs_r+0x5c>
 800ff36:	6921      	ldr	r1, [r4, #16]
 800ff38:	4650      	mov	r0, sl
 800ff3a:	f7fe fb81 	bl	800e640 <_free_r>
 800ff3e:	230c      	movs	r3, #12
 800ff40:	f8ca 3000 	str.w	r3, [sl]
 800ff44:	89a3      	ldrh	r3, [r4, #12]
 800ff46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff4a:	81a3      	strh	r3, [r4, #12]
 800ff4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff50:	e7e9      	b.n	800ff26 <__ssputs_r+0x8a>
	...

0800ff54 <_svfiprintf_r>:
 800ff54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff58:	4698      	mov	r8, r3
 800ff5a:	898b      	ldrh	r3, [r1, #12]
 800ff5c:	061b      	lsls	r3, r3, #24
 800ff5e:	b09d      	sub	sp, #116	@ 0x74
 800ff60:	4607      	mov	r7, r0
 800ff62:	460d      	mov	r5, r1
 800ff64:	4614      	mov	r4, r2
 800ff66:	d510      	bpl.n	800ff8a <_svfiprintf_r+0x36>
 800ff68:	690b      	ldr	r3, [r1, #16]
 800ff6a:	b973      	cbnz	r3, 800ff8a <_svfiprintf_r+0x36>
 800ff6c:	2140      	movs	r1, #64	@ 0x40
 800ff6e:	f7fe fbdb 	bl	800e728 <_malloc_r>
 800ff72:	6028      	str	r0, [r5, #0]
 800ff74:	6128      	str	r0, [r5, #16]
 800ff76:	b930      	cbnz	r0, 800ff86 <_svfiprintf_r+0x32>
 800ff78:	230c      	movs	r3, #12
 800ff7a:	603b      	str	r3, [r7, #0]
 800ff7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff80:	b01d      	add	sp, #116	@ 0x74
 800ff82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff86:	2340      	movs	r3, #64	@ 0x40
 800ff88:	616b      	str	r3, [r5, #20]
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff8e:	2320      	movs	r3, #32
 800ff90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff98:	2330      	movs	r3, #48	@ 0x30
 800ff9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010138 <_svfiprintf_r+0x1e4>
 800ff9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ffa2:	f04f 0901 	mov.w	r9, #1
 800ffa6:	4623      	mov	r3, r4
 800ffa8:	469a      	mov	sl, r3
 800ffaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffae:	b10a      	cbz	r2, 800ffb4 <_svfiprintf_r+0x60>
 800ffb0:	2a25      	cmp	r2, #37	@ 0x25
 800ffb2:	d1f9      	bne.n	800ffa8 <_svfiprintf_r+0x54>
 800ffb4:	ebba 0b04 	subs.w	fp, sl, r4
 800ffb8:	d00b      	beq.n	800ffd2 <_svfiprintf_r+0x7e>
 800ffba:	465b      	mov	r3, fp
 800ffbc:	4622      	mov	r2, r4
 800ffbe:	4629      	mov	r1, r5
 800ffc0:	4638      	mov	r0, r7
 800ffc2:	f7ff ff6b 	bl	800fe9c <__ssputs_r>
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	f000 80a7 	beq.w	801011a <_svfiprintf_r+0x1c6>
 800ffcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffce:	445a      	add	r2, fp
 800ffd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffd2:	f89a 3000 	ldrb.w	r3, [sl]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	f000 809f 	beq.w	801011a <_svfiprintf_r+0x1c6>
 800ffdc:	2300      	movs	r3, #0
 800ffde:	f04f 32ff 	mov.w	r2, #4294967295
 800ffe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffe6:	f10a 0a01 	add.w	sl, sl, #1
 800ffea:	9304      	str	r3, [sp, #16]
 800ffec:	9307      	str	r3, [sp, #28]
 800ffee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fff2:	931a      	str	r3, [sp, #104]	@ 0x68
 800fff4:	4654      	mov	r4, sl
 800fff6:	2205      	movs	r2, #5
 800fff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fffc:	484e      	ldr	r0, [pc, #312]	@ (8010138 <_svfiprintf_r+0x1e4>)
 800fffe:	f7f0 f90f 	bl	8000220 <memchr>
 8010002:	9a04      	ldr	r2, [sp, #16]
 8010004:	b9d8      	cbnz	r0, 801003e <_svfiprintf_r+0xea>
 8010006:	06d0      	lsls	r0, r2, #27
 8010008:	bf44      	itt	mi
 801000a:	2320      	movmi	r3, #32
 801000c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010010:	0711      	lsls	r1, r2, #28
 8010012:	bf44      	itt	mi
 8010014:	232b      	movmi	r3, #43	@ 0x2b
 8010016:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801001a:	f89a 3000 	ldrb.w	r3, [sl]
 801001e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010020:	d015      	beq.n	801004e <_svfiprintf_r+0xfa>
 8010022:	9a07      	ldr	r2, [sp, #28]
 8010024:	4654      	mov	r4, sl
 8010026:	2000      	movs	r0, #0
 8010028:	f04f 0c0a 	mov.w	ip, #10
 801002c:	4621      	mov	r1, r4
 801002e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010032:	3b30      	subs	r3, #48	@ 0x30
 8010034:	2b09      	cmp	r3, #9
 8010036:	d94b      	bls.n	80100d0 <_svfiprintf_r+0x17c>
 8010038:	b1b0      	cbz	r0, 8010068 <_svfiprintf_r+0x114>
 801003a:	9207      	str	r2, [sp, #28]
 801003c:	e014      	b.n	8010068 <_svfiprintf_r+0x114>
 801003e:	eba0 0308 	sub.w	r3, r0, r8
 8010042:	fa09 f303 	lsl.w	r3, r9, r3
 8010046:	4313      	orrs	r3, r2
 8010048:	9304      	str	r3, [sp, #16]
 801004a:	46a2      	mov	sl, r4
 801004c:	e7d2      	b.n	800fff4 <_svfiprintf_r+0xa0>
 801004e:	9b03      	ldr	r3, [sp, #12]
 8010050:	1d19      	adds	r1, r3, #4
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	9103      	str	r1, [sp, #12]
 8010056:	2b00      	cmp	r3, #0
 8010058:	bfbb      	ittet	lt
 801005a:	425b      	neglt	r3, r3
 801005c:	f042 0202 	orrlt.w	r2, r2, #2
 8010060:	9307      	strge	r3, [sp, #28]
 8010062:	9307      	strlt	r3, [sp, #28]
 8010064:	bfb8      	it	lt
 8010066:	9204      	strlt	r2, [sp, #16]
 8010068:	7823      	ldrb	r3, [r4, #0]
 801006a:	2b2e      	cmp	r3, #46	@ 0x2e
 801006c:	d10a      	bne.n	8010084 <_svfiprintf_r+0x130>
 801006e:	7863      	ldrb	r3, [r4, #1]
 8010070:	2b2a      	cmp	r3, #42	@ 0x2a
 8010072:	d132      	bne.n	80100da <_svfiprintf_r+0x186>
 8010074:	9b03      	ldr	r3, [sp, #12]
 8010076:	1d1a      	adds	r2, r3, #4
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	9203      	str	r2, [sp, #12]
 801007c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010080:	3402      	adds	r4, #2
 8010082:	9305      	str	r3, [sp, #20]
 8010084:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010148 <_svfiprintf_r+0x1f4>
 8010088:	7821      	ldrb	r1, [r4, #0]
 801008a:	2203      	movs	r2, #3
 801008c:	4650      	mov	r0, sl
 801008e:	f7f0 f8c7 	bl	8000220 <memchr>
 8010092:	b138      	cbz	r0, 80100a4 <_svfiprintf_r+0x150>
 8010094:	9b04      	ldr	r3, [sp, #16]
 8010096:	eba0 000a 	sub.w	r0, r0, sl
 801009a:	2240      	movs	r2, #64	@ 0x40
 801009c:	4082      	lsls	r2, r0
 801009e:	4313      	orrs	r3, r2
 80100a0:	3401      	adds	r4, #1
 80100a2:	9304      	str	r3, [sp, #16]
 80100a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100a8:	4824      	ldr	r0, [pc, #144]	@ (801013c <_svfiprintf_r+0x1e8>)
 80100aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80100ae:	2206      	movs	r2, #6
 80100b0:	f7f0 f8b6 	bl	8000220 <memchr>
 80100b4:	2800      	cmp	r0, #0
 80100b6:	d036      	beq.n	8010126 <_svfiprintf_r+0x1d2>
 80100b8:	4b21      	ldr	r3, [pc, #132]	@ (8010140 <_svfiprintf_r+0x1ec>)
 80100ba:	bb1b      	cbnz	r3, 8010104 <_svfiprintf_r+0x1b0>
 80100bc:	9b03      	ldr	r3, [sp, #12]
 80100be:	3307      	adds	r3, #7
 80100c0:	f023 0307 	bic.w	r3, r3, #7
 80100c4:	3308      	adds	r3, #8
 80100c6:	9303      	str	r3, [sp, #12]
 80100c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100ca:	4433      	add	r3, r6
 80100cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80100ce:	e76a      	b.n	800ffa6 <_svfiprintf_r+0x52>
 80100d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80100d4:	460c      	mov	r4, r1
 80100d6:	2001      	movs	r0, #1
 80100d8:	e7a8      	b.n	801002c <_svfiprintf_r+0xd8>
 80100da:	2300      	movs	r3, #0
 80100dc:	3401      	adds	r4, #1
 80100de:	9305      	str	r3, [sp, #20]
 80100e0:	4619      	mov	r1, r3
 80100e2:	f04f 0c0a 	mov.w	ip, #10
 80100e6:	4620      	mov	r0, r4
 80100e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100ec:	3a30      	subs	r2, #48	@ 0x30
 80100ee:	2a09      	cmp	r2, #9
 80100f0:	d903      	bls.n	80100fa <_svfiprintf_r+0x1a6>
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d0c6      	beq.n	8010084 <_svfiprintf_r+0x130>
 80100f6:	9105      	str	r1, [sp, #20]
 80100f8:	e7c4      	b.n	8010084 <_svfiprintf_r+0x130>
 80100fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80100fe:	4604      	mov	r4, r0
 8010100:	2301      	movs	r3, #1
 8010102:	e7f0      	b.n	80100e6 <_svfiprintf_r+0x192>
 8010104:	ab03      	add	r3, sp, #12
 8010106:	9300      	str	r3, [sp, #0]
 8010108:	462a      	mov	r2, r5
 801010a:	4b0e      	ldr	r3, [pc, #56]	@ (8010144 <_svfiprintf_r+0x1f0>)
 801010c:	a904      	add	r1, sp, #16
 801010e:	4638      	mov	r0, r7
 8010110:	f7fc fcbc 	bl	800ca8c <_printf_float>
 8010114:	1c42      	adds	r2, r0, #1
 8010116:	4606      	mov	r6, r0
 8010118:	d1d6      	bne.n	80100c8 <_svfiprintf_r+0x174>
 801011a:	89ab      	ldrh	r3, [r5, #12]
 801011c:	065b      	lsls	r3, r3, #25
 801011e:	f53f af2d 	bmi.w	800ff7c <_svfiprintf_r+0x28>
 8010122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010124:	e72c      	b.n	800ff80 <_svfiprintf_r+0x2c>
 8010126:	ab03      	add	r3, sp, #12
 8010128:	9300      	str	r3, [sp, #0]
 801012a:	462a      	mov	r2, r5
 801012c:	4b05      	ldr	r3, [pc, #20]	@ (8010144 <_svfiprintf_r+0x1f0>)
 801012e:	a904      	add	r1, sp, #16
 8010130:	4638      	mov	r0, r7
 8010132:	f7fc ff43 	bl	800cfbc <_printf_i>
 8010136:	e7ed      	b.n	8010114 <_svfiprintf_r+0x1c0>
 8010138:	08011cd1 	.word	0x08011cd1
 801013c:	08011cdb 	.word	0x08011cdb
 8010140:	0800ca8d 	.word	0x0800ca8d
 8010144:	0800fe9d 	.word	0x0800fe9d
 8010148:	08011cd7 	.word	0x08011cd7

0801014c <__sflush_r>:
 801014c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010154:	0716      	lsls	r6, r2, #28
 8010156:	4605      	mov	r5, r0
 8010158:	460c      	mov	r4, r1
 801015a:	d454      	bmi.n	8010206 <__sflush_r+0xba>
 801015c:	684b      	ldr	r3, [r1, #4]
 801015e:	2b00      	cmp	r3, #0
 8010160:	dc02      	bgt.n	8010168 <__sflush_r+0x1c>
 8010162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010164:	2b00      	cmp	r3, #0
 8010166:	dd48      	ble.n	80101fa <__sflush_r+0xae>
 8010168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801016a:	2e00      	cmp	r6, #0
 801016c:	d045      	beq.n	80101fa <__sflush_r+0xae>
 801016e:	2300      	movs	r3, #0
 8010170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010174:	682f      	ldr	r7, [r5, #0]
 8010176:	6a21      	ldr	r1, [r4, #32]
 8010178:	602b      	str	r3, [r5, #0]
 801017a:	d030      	beq.n	80101de <__sflush_r+0x92>
 801017c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801017e:	89a3      	ldrh	r3, [r4, #12]
 8010180:	0759      	lsls	r1, r3, #29
 8010182:	d505      	bpl.n	8010190 <__sflush_r+0x44>
 8010184:	6863      	ldr	r3, [r4, #4]
 8010186:	1ad2      	subs	r2, r2, r3
 8010188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801018a:	b10b      	cbz	r3, 8010190 <__sflush_r+0x44>
 801018c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801018e:	1ad2      	subs	r2, r2, r3
 8010190:	2300      	movs	r3, #0
 8010192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010194:	6a21      	ldr	r1, [r4, #32]
 8010196:	4628      	mov	r0, r5
 8010198:	47b0      	blx	r6
 801019a:	1c43      	adds	r3, r0, #1
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	d106      	bne.n	80101ae <__sflush_r+0x62>
 80101a0:	6829      	ldr	r1, [r5, #0]
 80101a2:	291d      	cmp	r1, #29
 80101a4:	d82b      	bhi.n	80101fe <__sflush_r+0xb2>
 80101a6:	4a2a      	ldr	r2, [pc, #168]	@ (8010250 <__sflush_r+0x104>)
 80101a8:	40ca      	lsrs	r2, r1
 80101aa:	07d6      	lsls	r6, r2, #31
 80101ac:	d527      	bpl.n	80101fe <__sflush_r+0xb2>
 80101ae:	2200      	movs	r2, #0
 80101b0:	6062      	str	r2, [r4, #4]
 80101b2:	04d9      	lsls	r1, r3, #19
 80101b4:	6922      	ldr	r2, [r4, #16]
 80101b6:	6022      	str	r2, [r4, #0]
 80101b8:	d504      	bpl.n	80101c4 <__sflush_r+0x78>
 80101ba:	1c42      	adds	r2, r0, #1
 80101bc:	d101      	bne.n	80101c2 <__sflush_r+0x76>
 80101be:	682b      	ldr	r3, [r5, #0]
 80101c0:	b903      	cbnz	r3, 80101c4 <__sflush_r+0x78>
 80101c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80101c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101c6:	602f      	str	r7, [r5, #0]
 80101c8:	b1b9      	cbz	r1, 80101fa <__sflush_r+0xae>
 80101ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101ce:	4299      	cmp	r1, r3
 80101d0:	d002      	beq.n	80101d8 <__sflush_r+0x8c>
 80101d2:	4628      	mov	r0, r5
 80101d4:	f7fe fa34 	bl	800e640 <_free_r>
 80101d8:	2300      	movs	r3, #0
 80101da:	6363      	str	r3, [r4, #52]	@ 0x34
 80101dc:	e00d      	b.n	80101fa <__sflush_r+0xae>
 80101de:	2301      	movs	r3, #1
 80101e0:	4628      	mov	r0, r5
 80101e2:	47b0      	blx	r6
 80101e4:	4602      	mov	r2, r0
 80101e6:	1c50      	adds	r0, r2, #1
 80101e8:	d1c9      	bne.n	801017e <__sflush_r+0x32>
 80101ea:	682b      	ldr	r3, [r5, #0]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d0c6      	beq.n	801017e <__sflush_r+0x32>
 80101f0:	2b1d      	cmp	r3, #29
 80101f2:	d001      	beq.n	80101f8 <__sflush_r+0xac>
 80101f4:	2b16      	cmp	r3, #22
 80101f6:	d11e      	bne.n	8010236 <__sflush_r+0xea>
 80101f8:	602f      	str	r7, [r5, #0]
 80101fa:	2000      	movs	r0, #0
 80101fc:	e022      	b.n	8010244 <__sflush_r+0xf8>
 80101fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010202:	b21b      	sxth	r3, r3
 8010204:	e01b      	b.n	801023e <__sflush_r+0xf2>
 8010206:	690f      	ldr	r7, [r1, #16]
 8010208:	2f00      	cmp	r7, #0
 801020a:	d0f6      	beq.n	80101fa <__sflush_r+0xae>
 801020c:	0793      	lsls	r3, r2, #30
 801020e:	680e      	ldr	r6, [r1, #0]
 8010210:	bf08      	it	eq
 8010212:	694b      	ldreq	r3, [r1, #20]
 8010214:	600f      	str	r7, [r1, #0]
 8010216:	bf18      	it	ne
 8010218:	2300      	movne	r3, #0
 801021a:	eba6 0807 	sub.w	r8, r6, r7
 801021e:	608b      	str	r3, [r1, #8]
 8010220:	f1b8 0f00 	cmp.w	r8, #0
 8010224:	dde9      	ble.n	80101fa <__sflush_r+0xae>
 8010226:	6a21      	ldr	r1, [r4, #32]
 8010228:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801022a:	4643      	mov	r3, r8
 801022c:	463a      	mov	r2, r7
 801022e:	4628      	mov	r0, r5
 8010230:	47b0      	blx	r6
 8010232:	2800      	cmp	r0, #0
 8010234:	dc08      	bgt.n	8010248 <__sflush_r+0xfc>
 8010236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801023a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801023e:	81a3      	strh	r3, [r4, #12]
 8010240:	f04f 30ff 	mov.w	r0, #4294967295
 8010244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010248:	4407      	add	r7, r0
 801024a:	eba8 0800 	sub.w	r8, r8, r0
 801024e:	e7e7      	b.n	8010220 <__sflush_r+0xd4>
 8010250:	20400001 	.word	0x20400001

08010254 <_fflush_r>:
 8010254:	b538      	push	{r3, r4, r5, lr}
 8010256:	690b      	ldr	r3, [r1, #16]
 8010258:	4605      	mov	r5, r0
 801025a:	460c      	mov	r4, r1
 801025c:	b913      	cbnz	r3, 8010264 <_fflush_r+0x10>
 801025e:	2500      	movs	r5, #0
 8010260:	4628      	mov	r0, r5
 8010262:	bd38      	pop	{r3, r4, r5, pc}
 8010264:	b118      	cbz	r0, 801026e <_fflush_r+0x1a>
 8010266:	6a03      	ldr	r3, [r0, #32]
 8010268:	b90b      	cbnz	r3, 801026e <_fflush_r+0x1a>
 801026a:	f7fd fa5f 	bl	800d72c <__sinit>
 801026e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d0f3      	beq.n	801025e <_fflush_r+0xa>
 8010276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010278:	07d0      	lsls	r0, r2, #31
 801027a:	d404      	bmi.n	8010286 <_fflush_r+0x32>
 801027c:	0599      	lsls	r1, r3, #22
 801027e:	d402      	bmi.n	8010286 <_fflush_r+0x32>
 8010280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010282:	f7fd fb6c 	bl	800d95e <__retarget_lock_acquire_recursive>
 8010286:	4628      	mov	r0, r5
 8010288:	4621      	mov	r1, r4
 801028a:	f7ff ff5f 	bl	801014c <__sflush_r>
 801028e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010290:	07da      	lsls	r2, r3, #31
 8010292:	4605      	mov	r5, r0
 8010294:	d4e4      	bmi.n	8010260 <_fflush_r+0xc>
 8010296:	89a3      	ldrh	r3, [r4, #12]
 8010298:	059b      	lsls	r3, r3, #22
 801029a:	d4e1      	bmi.n	8010260 <_fflush_r+0xc>
 801029c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801029e:	f7fd fb5f 	bl	800d960 <__retarget_lock_release_recursive>
 80102a2:	e7dd      	b.n	8010260 <_fflush_r+0xc>

080102a4 <memmove>:
 80102a4:	4288      	cmp	r0, r1
 80102a6:	b510      	push	{r4, lr}
 80102a8:	eb01 0402 	add.w	r4, r1, r2
 80102ac:	d902      	bls.n	80102b4 <memmove+0x10>
 80102ae:	4284      	cmp	r4, r0
 80102b0:	4623      	mov	r3, r4
 80102b2:	d807      	bhi.n	80102c4 <memmove+0x20>
 80102b4:	1e43      	subs	r3, r0, #1
 80102b6:	42a1      	cmp	r1, r4
 80102b8:	d008      	beq.n	80102cc <memmove+0x28>
 80102ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102c2:	e7f8      	b.n	80102b6 <memmove+0x12>
 80102c4:	4402      	add	r2, r0
 80102c6:	4601      	mov	r1, r0
 80102c8:	428a      	cmp	r2, r1
 80102ca:	d100      	bne.n	80102ce <memmove+0x2a>
 80102cc:	bd10      	pop	{r4, pc}
 80102ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102d6:	e7f7      	b.n	80102c8 <memmove+0x24>

080102d8 <strncmp>:
 80102d8:	b510      	push	{r4, lr}
 80102da:	b16a      	cbz	r2, 80102f8 <strncmp+0x20>
 80102dc:	3901      	subs	r1, #1
 80102de:	1884      	adds	r4, r0, r2
 80102e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d103      	bne.n	80102f4 <strncmp+0x1c>
 80102ec:	42a0      	cmp	r0, r4
 80102ee:	d001      	beq.n	80102f4 <strncmp+0x1c>
 80102f0:	2a00      	cmp	r2, #0
 80102f2:	d1f5      	bne.n	80102e0 <strncmp+0x8>
 80102f4:	1ad0      	subs	r0, r2, r3
 80102f6:	bd10      	pop	{r4, pc}
 80102f8:	4610      	mov	r0, r2
 80102fa:	e7fc      	b.n	80102f6 <strncmp+0x1e>

080102fc <_sbrk_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4d06      	ldr	r5, [pc, #24]	@ (8010318 <_sbrk_r+0x1c>)
 8010300:	2300      	movs	r3, #0
 8010302:	4604      	mov	r4, r0
 8010304:	4608      	mov	r0, r1
 8010306:	602b      	str	r3, [r5, #0]
 8010308:	f7f2 f926 	bl	8002558 <_sbrk>
 801030c:	1c43      	adds	r3, r0, #1
 801030e:	d102      	bne.n	8010316 <_sbrk_r+0x1a>
 8010310:	682b      	ldr	r3, [r5, #0]
 8010312:	b103      	cbz	r3, 8010316 <_sbrk_r+0x1a>
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	bd38      	pop	{r3, r4, r5, pc}
 8010318:	2000327c 	.word	0x2000327c
 801031c:	00000000 	.word	0x00000000

08010320 <nan>:
 8010320:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010328 <nan+0x8>
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	00000000 	.word	0x00000000
 801032c:	7ff80000 	.word	0x7ff80000

08010330 <__assert_func>:
 8010330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010332:	4614      	mov	r4, r2
 8010334:	461a      	mov	r2, r3
 8010336:	4b09      	ldr	r3, [pc, #36]	@ (801035c <__assert_func+0x2c>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4605      	mov	r5, r0
 801033c:	68d8      	ldr	r0, [r3, #12]
 801033e:	b14c      	cbz	r4, 8010354 <__assert_func+0x24>
 8010340:	4b07      	ldr	r3, [pc, #28]	@ (8010360 <__assert_func+0x30>)
 8010342:	9100      	str	r1, [sp, #0]
 8010344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010348:	4906      	ldr	r1, [pc, #24]	@ (8010364 <__assert_func+0x34>)
 801034a:	462b      	mov	r3, r5
 801034c:	f000 fba8 	bl	8010aa0 <fiprintf>
 8010350:	f000 fbb8 	bl	8010ac4 <abort>
 8010354:	4b04      	ldr	r3, [pc, #16]	@ (8010368 <__assert_func+0x38>)
 8010356:	461c      	mov	r4, r3
 8010358:	e7f3      	b.n	8010342 <__assert_func+0x12>
 801035a:	bf00      	nop
 801035c:	2000003c 	.word	0x2000003c
 8010360:	08011cea 	.word	0x08011cea
 8010364:	08011cf7 	.word	0x08011cf7
 8010368:	08011d25 	.word	0x08011d25

0801036c <_calloc_r>:
 801036c:	b570      	push	{r4, r5, r6, lr}
 801036e:	fba1 5402 	umull	r5, r4, r1, r2
 8010372:	b934      	cbnz	r4, 8010382 <_calloc_r+0x16>
 8010374:	4629      	mov	r1, r5
 8010376:	f7fe f9d7 	bl	800e728 <_malloc_r>
 801037a:	4606      	mov	r6, r0
 801037c:	b928      	cbnz	r0, 801038a <_calloc_r+0x1e>
 801037e:	4630      	mov	r0, r6
 8010380:	bd70      	pop	{r4, r5, r6, pc}
 8010382:	220c      	movs	r2, #12
 8010384:	6002      	str	r2, [r0, #0]
 8010386:	2600      	movs	r6, #0
 8010388:	e7f9      	b.n	801037e <_calloc_r+0x12>
 801038a:	462a      	mov	r2, r5
 801038c:	4621      	mov	r1, r4
 801038e:	f7fd fa68 	bl	800d862 <memset>
 8010392:	e7f4      	b.n	801037e <_calloc_r+0x12>

08010394 <rshift>:
 8010394:	6903      	ldr	r3, [r0, #16]
 8010396:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801039a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801039e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80103a2:	f100 0414 	add.w	r4, r0, #20
 80103a6:	dd45      	ble.n	8010434 <rshift+0xa0>
 80103a8:	f011 011f 	ands.w	r1, r1, #31
 80103ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80103b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103b4:	d10c      	bne.n	80103d0 <rshift+0x3c>
 80103b6:	f100 0710 	add.w	r7, r0, #16
 80103ba:	4629      	mov	r1, r5
 80103bc:	42b1      	cmp	r1, r6
 80103be:	d334      	bcc.n	801042a <rshift+0x96>
 80103c0:	1a9b      	subs	r3, r3, r2
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	1eea      	subs	r2, r5, #3
 80103c6:	4296      	cmp	r6, r2
 80103c8:	bf38      	it	cc
 80103ca:	2300      	movcc	r3, #0
 80103cc:	4423      	add	r3, r4
 80103ce:	e015      	b.n	80103fc <rshift+0x68>
 80103d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80103d4:	f1c1 0820 	rsb	r8, r1, #32
 80103d8:	40cf      	lsrs	r7, r1
 80103da:	f105 0e04 	add.w	lr, r5, #4
 80103de:	46a1      	mov	r9, r4
 80103e0:	4576      	cmp	r6, lr
 80103e2:	46f4      	mov	ip, lr
 80103e4:	d815      	bhi.n	8010412 <rshift+0x7e>
 80103e6:	1a9a      	subs	r2, r3, r2
 80103e8:	0092      	lsls	r2, r2, #2
 80103ea:	3a04      	subs	r2, #4
 80103ec:	3501      	adds	r5, #1
 80103ee:	42ae      	cmp	r6, r5
 80103f0:	bf38      	it	cc
 80103f2:	2200      	movcc	r2, #0
 80103f4:	18a3      	adds	r3, r4, r2
 80103f6:	50a7      	str	r7, [r4, r2]
 80103f8:	b107      	cbz	r7, 80103fc <rshift+0x68>
 80103fa:	3304      	adds	r3, #4
 80103fc:	1b1a      	subs	r2, r3, r4
 80103fe:	42a3      	cmp	r3, r4
 8010400:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010404:	bf08      	it	eq
 8010406:	2300      	moveq	r3, #0
 8010408:	6102      	str	r2, [r0, #16]
 801040a:	bf08      	it	eq
 801040c:	6143      	streq	r3, [r0, #20]
 801040e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010412:	f8dc c000 	ldr.w	ip, [ip]
 8010416:	fa0c fc08 	lsl.w	ip, ip, r8
 801041a:	ea4c 0707 	orr.w	r7, ip, r7
 801041e:	f849 7b04 	str.w	r7, [r9], #4
 8010422:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010426:	40cf      	lsrs	r7, r1
 8010428:	e7da      	b.n	80103e0 <rshift+0x4c>
 801042a:	f851 cb04 	ldr.w	ip, [r1], #4
 801042e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010432:	e7c3      	b.n	80103bc <rshift+0x28>
 8010434:	4623      	mov	r3, r4
 8010436:	e7e1      	b.n	80103fc <rshift+0x68>

08010438 <__hexdig_fun>:
 8010438:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801043c:	2b09      	cmp	r3, #9
 801043e:	d802      	bhi.n	8010446 <__hexdig_fun+0xe>
 8010440:	3820      	subs	r0, #32
 8010442:	b2c0      	uxtb	r0, r0
 8010444:	4770      	bx	lr
 8010446:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801044a:	2b05      	cmp	r3, #5
 801044c:	d801      	bhi.n	8010452 <__hexdig_fun+0x1a>
 801044e:	3847      	subs	r0, #71	@ 0x47
 8010450:	e7f7      	b.n	8010442 <__hexdig_fun+0xa>
 8010452:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010456:	2b05      	cmp	r3, #5
 8010458:	d801      	bhi.n	801045e <__hexdig_fun+0x26>
 801045a:	3827      	subs	r0, #39	@ 0x27
 801045c:	e7f1      	b.n	8010442 <__hexdig_fun+0xa>
 801045e:	2000      	movs	r0, #0
 8010460:	4770      	bx	lr
	...

08010464 <__gethex>:
 8010464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010468:	b085      	sub	sp, #20
 801046a:	468a      	mov	sl, r1
 801046c:	9302      	str	r3, [sp, #8]
 801046e:	680b      	ldr	r3, [r1, #0]
 8010470:	9001      	str	r0, [sp, #4]
 8010472:	4690      	mov	r8, r2
 8010474:	1c9c      	adds	r4, r3, #2
 8010476:	46a1      	mov	r9, r4
 8010478:	f814 0b01 	ldrb.w	r0, [r4], #1
 801047c:	2830      	cmp	r0, #48	@ 0x30
 801047e:	d0fa      	beq.n	8010476 <__gethex+0x12>
 8010480:	eba9 0303 	sub.w	r3, r9, r3
 8010484:	f1a3 0b02 	sub.w	fp, r3, #2
 8010488:	f7ff ffd6 	bl	8010438 <__hexdig_fun>
 801048c:	4605      	mov	r5, r0
 801048e:	2800      	cmp	r0, #0
 8010490:	d168      	bne.n	8010564 <__gethex+0x100>
 8010492:	49a0      	ldr	r1, [pc, #640]	@ (8010714 <__gethex+0x2b0>)
 8010494:	2201      	movs	r2, #1
 8010496:	4648      	mov	r0, r9
 8010498:	f7ff ff1e 	bl	80102d8 <strncmp>
 801049c:	4607      	mov	r7, r0
 801049e:	2800      	cmp	r0, #0
 80104a0:	d167      	bne.n	8010572 <__gethex+0x10e>
 80104a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80104a6:	4626      	mov	r6, r4
 80104a8:	f7ff ffc6 	bl	8010438 <__hexdig_fun>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d062      	beq.n	8010576 <__gethex+0x112>
 80104b0:	4623      	mov	r3, r4
 80104b2:	7818      	ldrb	r0, [r3, #0]
 80104b4:	2830      	cmp	r0, #48	@ 0x30
 80104b6:	4699      	mov	r9, r3
 80104b8:	f103 0301 	add.w	r3, r3, #1
 80104bc:	d0f9      	beq.n	80104b2 <__gethex+0x4e>
 80104be:	f7ff ffbb 	bl	8010438 <__hexdig_fun>
 80104c2:	fab0 f580 	clz	r5, r0
 80104c6:	096d      	lsrs	r5, r5, #5
 80104c8:	f04f 0b01 	mov.w	fp, #1
 80104cc:	464a      	mov	r2, r9
 80104ce:	4616      	mov	r6, r2
 80104d0:	3201      	adds	r2, #1
 80104d2:	7830      	ldrb	r0, [r6, #0]
 80104d4:	f7ff ffb0 	bl	8010438 <__hexdig_fun>
 80104d8:	2800      	cmp	r0, #0
 80104da:	d1f8      	bne.n	80104ce <__gethex+0x6a>
 80104dc:	498d      	ldr	r1, [pc, #564]	@ (8010714 <__gethex+0x2b0>)
 80104de:	2201      	movs	r2, #1
 80104e0:	4630      	mov	r0, r6
 80104e2:	f7ff fef9 	bl	80102d8 <strncmp>
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d13f      	bne.n	801056a <__gethex+0x106>
 80104ea:	b944      	cbnz	r4, 80104fe <__gethex+0x9a>
 80104ec:	1c74      	adds	r4, r6, #1
 80104ee:	4622      	mov	r2, r4
 80104f0:	4616      	mov	r6, r2
 80104f2:	3201      	adds	r2, #1
 80104f4:	7830      	ldrb	r0, [r6, #0]
 80104f6:	f7ff ff9f 	bl	8010438 <__hexdig_fun>
 80104fa:	2800      	cmp	r0, #0
 80104fc:	d1f8      	bne.n	80104f0 <__gethex+0x8c>
 80104fe:	1ba4      	subs	r4, r4, r6
 8010500:	00a7      	lsls	r7, r4, #2
 8010502:	7833      	ldrb	r3, [r6, #0]
 8010504:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010508:	2b50      	cmp	r3, #80	@ 0x50
 801050a:	d13e      	bne.n	801058a <__gethex+0x126>
 801050c:	7873      	ldrb	r3, [r6, #1]
 801050e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010510:	d033      	beq.n	801057a <__gethex+0x116>
 8010512:	2b2d      	cmp	r3, #45	@ 0x2d
 8010514:	d034      	beq.n	8010580 <__gethex+0x11c>
 8010516:	1c71      	adds	r1, r6, #1
 8010518:	2400      	movs	r4, #0
 801051a:	7808      	ldrb	r0, [r1, #0]
 801051c:	f7ff ff8c 	bl	8010438 <__hexdig_fun>
 8010520:	1e43      	subs	r3, r0, #1
 8010522:	b2db      	uxtb	r3, r3
 8010524:	2b18      	cmp	r3, #24
 8010526:	d830      	bhi.n	801058a <__gethex+0x126>
 8010528:	f1a0 0210 	sub.w	r2, r0, #16
 801052c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010530:	f7ff ff82 	bl	8010438 <__hexdig_fun>
 8010534:	f100 3cff 	add.w	ip, r0, #4294967295
 8010538:	fa5f fc8c 	uxtb.w	ip, ip
 801053c:	f1bc 0f18 	cmp.w	ip, #24
 8010540:	f04f 030a 	mov.w	r3, #10
 8010544:	d91e      	bls.n	8010584 <__gethex+0x120>
 8010546:	b104      	cbz	r4, 801054a <__gethex+0xe6>
 8010548:	4252      	negs	r2, r2
 801054a:	4417      	add	r7, r2
 801054c:	f8ca 1000 	str.w	r1, [sl]
 8010550:	b1ed      	cbz	r5, 801058e <__gethex+0x12a>
 8010552:	f1bb 0f00 	cmp.w	fp, #0
 8010556:	bf0c      	ite	eq
 8010558:	2506      	moveq	r5, #6
 801055a:	2500      	movne	r5, #0
 801055c:	4628      	mov	r0, r5
 801055e:	b005      	add	sp, #20
 8010560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010564:	2500      	movs	r5, #0
 8010566:	462c      	mov	r4, r5
 8010568:	e7b0      	b.n	80104cc <__gethex+0x68>
 801056a:	2c00      	cmp	r4, #0
 801056c:	d1c7      	bne.n	80104fe <__gethex+0x9a>
 801056e:	4627      	mov	r7, r4
 8010570:	e7c7      	b.n	8010502 <__gethex+0x9e>
 8010572:	464e      	mov	r6, r9
 8010574:	462f      	mov	r7, r5
 8010576:	2501      	movs	r5, #1
 8010578:	e7c3      	b.n	8010502 <__gethex+0x9e>
 801057a:	2400      	movs	r4, #0
 801057c:	1cb1      	adds	r1, r6, #2
 801057e:	e7cc      	b.n	801051a <__gethex+0xb6>
 8010580:	2401      	movs	r4, #1
 8010582:	e7fb      	b.n	801057c <__gethex+0x118>
 8010584:	fb03 0002 	mla	r0, r3, r2, r0
 8010588:	e7ce      	b.n	8010528 <__gethex+0xc4>
 801058a:	4631      	mov	r1, r6
 801058c:	e7de      	b.n	801054c <__gethex+0xe8>
 801058e:	eba6 0309 	sub.w	r3, r6, r9
 8010592:	3b01      	subs	r3, #1
 8010594:	4629      	mov	r1, r5
 8010596:	2b07      	cmp	r3, #7
 8010598:	dc0a      	bgt.n	80105b0 <__gethex+0x14c>
 801059a:	9801      	ldr	r0, [sp, #4]
 801059c:	f7fe f950 	bl	800e840 <_Balloc>
 80105a0:	4604      	mov	r4, r0
 80105a2:	b940      	cbnz	r0, 80105b6 <__gethex+0x152>
 80105a4:	4b5c      	ldr	r3, [pc, #368]	@ (8010718 <__gethex+0x2b4>)
 80105a6:	4602      	mov	r2, r0
 80105a8:	21e4      	movs	r1, #228	@ 0xe4
 80105aa:	485c      	ldr	r0, [pc, #368]	@ (801071c <__gethex+0x2b8>)
 80105ac:	f7ff fec0 	bl	8010330 <__assert_func>
 80105b0:	3101      	adds	r1, #1
 80105b2:	105b      	asrs	r3, r3, #1
 80105b4:	e7ef      	b.n	8010596 <__gethex+0x132>
 80105b6:	f100 0a14 	add.w	sl, r0, #20
 80105ba:	2300      	movs	r3, #0
 80105bc:	4655      	mov	r5, sl
 80105be:	469b      	mov	fp, r3
 80105c0:	45b1      	cmp	r9, r6
 80105c2:	d337      	bcc.n	8010634 <__gethex+0x1d0>
 80105c4:	f845 bb04 	str.w	fp, [r5], #4
 80105c8:	eba5 050a 	sub.w	r5, r5, sl
 80105cc:	10ad      	asrs	r5, r5, #2
 80105ce:	6125      	str	r5, [r4, #16]
 80105d0:	4658      	mov	r0, fp
 80105d2:	f7fe fa27 	bl	800ea24 <__hi0bits>
 80105d6:	016d      	lsls	r5, r5, #5
 80105d8:	f8d8 6000 	ldr.w	r6, [r8]
 80105dc:	1a2d      	subs	r5, r5, r0
 80105de:	42b5      	cmp	r5, r6
 80105e0:	dd54      	ble.n	801068c <__gethex+0x228>
 80105e2:	1bad      	subs	r5, r5, r6
 80105e4:	4629      	mov	r1, r5
 80105e6:	4620      	mov	r0, r4
 80105e8:	f7fe fdb3 	bl	800f152 <__any_on>
 80105ec:	4681      	mov	r9, r0
 80105ee:	b178      	cbz	r0, 8010610 <__gethex+0x1ac>
 80105f0:	1e6b      	subs	r3, r5, #1
 80105f2:	1159      	asrs	r1, r3, #5
 80105f4:	f003 021f 	and.w	r2, r3, #31
 80105f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80105fc:	f04f 0901 	mov.w	r9, #1
 8010600:	fa09 f202 	lsl.w	r2, r9, r2
 8010604:	420a      	tst	r2, r1
 8010606:	d003      	beq.n	8010610 <__gethex+0x1ac>
 8010608:	454b      	cmp	r3, r9
 801060a:	dc36      	bgt.n	801067a <__gethex+0x216>
 801060c:	f04f 0902 	mov.w	r9, #2
 8010610:	4629      	mov	r1, r5
 8010612:	4620      	mov	r0, r4
 8010614:	f7ff febe 	bl	8010394 <rshift>
 8010618:	442f      	add	r7, r5
 801061a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801061e:	42bb      	cmp	r3, r7
 8010620:	da42      	bge.n	80106a8 <__gethex+0x244>
 8010622:	9801      	ldr	r0, [sp, #4]
 8010624:	4621      	mov	r1, r4
 8010626:	f7fe f94b 	bl	800e8c0 <_Bfree>
 801062a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801062c:	2300      	movs	r3, #0
 801062e:	6013      	str	r3, [r2, #0]
 8010630:	25a3      	movs	r5, #163	@ 0xa3
 8010632:	e793      	b.n	801055c <__gethex+0xf8>
 8010634:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010638:	2a2e      	cmp	r2, #46	@ 0x2e
 801063a:	d012      	beq.n	8010662 <__gethex+0x1fe>
 801063c:	2b20      	cmp	r3, #32
 801063e:	d104      	bne.n	801064a <__gethex+0x1e6>
 8010640:	f845 bb04 	str.w	fp, [r5], #4
 8010644:	f04f 0b00 	mov.w	fp, #0
 8010648:	465b      	mov	r3, fp
 801064a:	7830      	ldrb	r0, [r6, #0]
 801064c:	9303      	str	r3, [sp, #12]
 801064e:	f7ff fef3 	bl	8010438 <__hexdig_fun>
 8010652:	9b03      	ldr	r3, [sp, #12]
 8010654:	f000 000f 	and.w	r0, r0, #15
 8010658:	4098      	lsls	r0, r3
 801065a:	ea4b 0b00 	orr.w	fp, fp, r0
 801065e:	3304      	adds	r3, #4
 8010660:	e7ae      	b.n	80105c0 <__gethex+0x15c>
 8010662:	45b1      	cmp	r9, r6
 8010664:	d8ea      	bhi.n	801063c <__gethex+0x1d8>
 8010666:	492b      	ldr	r1, [pc, #172]	@ (8010714 <__gethex+0x2b0>)
 8010668:	9303      	str	r3, [sp, #12]
 801066a:	2201      	movs	r2, #1
 801066c:	4630      	mov	r0, r6
 801066e:	f7ff fe33 	bl	80102d8 <strncmp>
 8010672:	9b03      	ldr	r3, [sp, #12]
 8010674:	2800      	cmp	r0, #0
 8010676:	d1e1      	bne.n	801063c <__gethex+0x1d8>
 8010678:	e7a2      	b.n	80105c0 <__gethex+0x15c>
 801067a:	1ea9      	subs	r1, r5, #2
 801067c:	4620      	mov	r0, r4
 801067e:	f7fe fd68 	bl	800f152 <__any_on>
 8010682:	2800      	cmp	r0, #0
 8010684:	d0c2      	beq.n	801060c <__gethex+0x1a8>
 8010686:	f04f 0903 	mov.w	r9, #3
 801068a:	e7c1      	b.n	8010610 <__gethex+0x1ac>
 801068c:	da09      	bge.n	80106a2 <__gethex+0x23e>
 801068e:	1b75      	subs	r5, r6, r5
 8010690:	4621      	mov	r1, r4
 8010692:	9801      	ldr	r0, [sp, #4]
 8010694:	462a      	mov	r2, r5
 8010696:	f7fe fb23 	bl	800ece0 <__lshift>
 801069a:	1b7f      	subs	r7, r7, r5
 801069c:	4604      	mov	r4, r0
 801069e:	f100 0a14 	add.w	sl, r0, #20
 80106a2:	f04f 0900 	mov.w	r9, #0
 80106a6:	e7b8      	b.n	801061a <__gethex+0x1b6>
 80106a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80106ac:	42bd      	cmp	r5, r7
 80106ae:	dd6f      	ble.n	8010790 <__gethex+0x32c>
 80106b0:	1bed      	subs	r5, r5, r7
 80106b2:	42ae      	cmp	r6, r5
 80106b4:	dc34      	bgt.n	8010720 <__gethex+0x2bc>
 80106b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80106ba:	2b02      	cmp	r3, #2
 80106bc:	d022      	beq.n	8010704 <__gethex+0x2a0>
 80106be:	2b03      	cmp	r3, #3
 80106c0:	d024      	beq.n	801070c <__gethex+0x2a8>
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d115      	bne.n	80106f2 <__gethex+0x28e>
 80106c6:	42ae      	cmp	r6, r5
 80106c8:	d113      	bne.n	80106f2 <__gethex+0x28e>
 80106ca:	2e01      	cmp	r6, #1
 80106cc:	d10b      	bne.n	80106e6 <__gethex+0x282>
 80106ce:	9a02      	ldr	r2, [sp, #8]
 80106d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80106d4:	6013      	str	r3, [r2, #0]
 80106d6:	2301      	movs	r3, #1
 80106d8:	6123      	str	r3, [r4, #16]
 80106da:	f8ca 3000 	str.w	r3, [sl]
 80106de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106e0:	2562      	movs	r5, #98	@ 0x62
 80106e2:	601c      	str	r4, [r3, #0]
 80106e4:	e73a      	b.n	801055c <__gethex+0xf8>
 80106e6:	1e71      	subs	r1, r6, #1
 80106e8:	4620      	mov	r0, r4
 80106ea:	f7fe fd32 	bl	800f152 <__any_on>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d1ed      	bne.n	80106ce <__gethex+0x26a>
 80106f2:	9801      	ldr	r0, [sp, #4]
 80106f4:	4621      	mov	r1, r4
 80106f6:	f7fe f8e3 	bl	800e8c0 <_Bfree>
 80106fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106fc:	2300      	movs	r3, #0
 80106fe:	6013      	str	r3, [r2, #0]
 8010700:	2550      	movs	r5, #80	@ 0x50
 8010702:	e72b      	b.n	801055c <__gethex+0xf8>
 8010704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010706:	2b00      	cmp	r3, #0
 8010708:	d1f3      	bne.n	80106f2 <__gethex+0x28e>
 801070a:	e7e0      	b.n	80106ce <__gethex+0x26a>
 801070c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1dd      	bne.n	80106ce <__gethex+0x26a>
 8010712:	e7ee      	b.n	80106f2 <__gethex+0x28e>
 8010714:	08011ccf 	.word	0x08011ccf
 8010718:	08011c65 	.word	0x08011c65
 801071c:	08011d26 	.word	0x08011d26
 8010720:	1e6f      	subs	r7, r5, #1
 8010722:	f1b9 0f00 	cmp.w	r9, #0
 8010726:	d130      	bne.n	801078a <__gethex+0x326>
 8010728:	b127      	cbz	r7, 8010734 <__gethex+0x2d0>
 801072a:	4639      	mov	r1, r7
 801072c:	4620      	mov	r0, r4
 801072e:	f7fe fd10 	bl	800f152 <__any_on>
 8010732:	4681      	mov	r9, r0
 8010734:	117a      	asrs	r2, r7, #5
 8010736:	2301      	movs	r3, #1
 8010738:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801073c:	f007 071f 	and.w	r7, r7, #31
 8010740:	40bb      	lsls	r3, r7
 8010742:	4213      	tst	r3, r2
 8010744:	4629      	mov	r1, r5
 8010746:	4620      	mov	r0, r4
 8010748:	bf18      	it	ne
 801074a:	f049 0902 	orrne.w	r9, r9, #2
 801074e:	f7ff fe21 	bl	8010394 <rshift>
 8010752:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010756:	1b76      	subs	r6, r6, r5
 8010758:	2502      	movs	r5, #2
 801075a:	f1b9 0f00 	cmp.w	r9, #0
 801075e:	d047      	beq.n	80107f0 <__gethex+0x38c>
 8010760:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010764:	2b02      	cmp	r3, #2
 8010766:	d015      	beq.n	8010794 <__gethex+0x330>
 8010768:	2b03      	cmp	r3, #3
 801076a:	d017      	beq.n	801079c <__gethex+0x338>
 801076c:	2b01      	cmp	r3, #1
 801076e:	d109      	bne.n	8010784 <__gethex+0x320>
 8010770:	f019 0f02 	tst.w	r9, #2
 8010774:	d006      	beq.n	8010784 <__gethex+0x320>
 8010776:	f8da 3000 	ldr.w	r3, [sl]
 801077a:	ea49 0903 	orr.w	r9, r9, r3
 801077e:	f019 0f01 	tst.w	r9, #1
 8010782:	d10e      	bne.n	80107a2 <__gethex+0x33e>
 8010784:	f045 0510 	orr.w	r5, r5, #16
 8010788:	e032      	b.n	80107f0 <__gethex+0x38c>
 801078a:	f04f 0901 	mov.w	r9, #1
 801078e:	e7d1      	b.n	8010734 <__gethex+0x2d0>
 8010790:	2501      	movs	r5, #1
 8010792:	e7e2      	b.n	801075a <__gethex+0x2f6>
 8010794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010796:	f1c3 0301 	rsb	r3, r3, #1
 801079a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801079c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d0f0      	beq.n	8010784 <__gethex+0x320>
 80107a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80107a6:	f104 0314 	add.w	r3, r4, #20
 80107aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80107ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80107b2:	f04f 0c00 	mov.w	ip, #0
 80107b6:	4618      	mov	r0, r3
 80107b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80107bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80107c0:	d01b      	beq.n	80107fa <__gethex+0x396>
 80107c2:	3201      	adds	r2, #1
 80107c4:	6002      	str	r2, [r0, #0]
 80107c6:	2d02      	cmp	r5, #2
 80107c8:	f104 0314 	add.w	r3, r4, #20
 80107cc:	d13c      	bne.n	8010848 <__gethex+0x3e4>
 80107ce:	f8d8 2000 	ldr.w	r2, [r8]
 80107d2:	3a01      	subs	r2, #1
 80107d4:	42b2      	cmp	r2, r6
 80107d6:	d109      	bne.n	80107ec <__gethex+0x388>
 80107d8:	1171      	asrs	r1, r6, #5
 80107da:	2201      	movs	r2, #1
 80107dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80107e0:	f006 061f 	and.w	r6, r6, #31
 80107e4:	fa02 f606 	lsl.w	r6, r2, r6
 80107e8:	421e      	tst	r6, r3
 80107ea:	d13a      	bne.n	8010862 <__gethex+0x3fe>
 80107ec:	f045 0520 	orr.w	r5, r5, #32
 80107f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107f2:	601c      	str	r4, [r3, #0]
 80107f4:	9b02      	ldr	r3, [sp, #8]
 80107f6:	601f      	str	r7, [r3, #0]
 80107f8:	e6b0      	b.n	801055c <__gethex+0xf8>
 80107fa:	4299      	cmp	r1, r3
 80107fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8010800:	d8d9      	bhi.n	80107b6 <__gethex+0x352>
 8010802:	68a3      	ldr	r3, [r4, #8]
 8010804:	459b      	cmp	fp, r3
 8010806:	db17      	blt.n	8010838 <__gethex+0x3d4>
 8010808:	6861      	ldr	r1, [r4, #4]
 801080a:	9801      	ldr	r0, [sp, #4]
 801080c:	3101      	adds	r1, #1
 801080e:	f7fe f817 	bl	800e840 <_Balloc>
 8010812:	4681      	mov	r9, r0
 8010814:	b918      	cbnz	r0, 801081e <__gethex+0x3ba>
 8010816:	4b1a      	ldr	r3, [pc, #104]	@ (8010880 <__gethex+0x41c>)
 8010818:	4602      	mov	r2, r0
 801081a:	2184      	movs	r1, #132	@ 0x84
 801081c:	e6c5      	b.n	80105aa <__gethex+0x146>
 801081e:	6922      	ldr	r2, [r4, #16]
 8010820:	3202      	adds	r2, #2
 8010822:	f104 010c 	add.w	r1, r4, #12
 8010826:	0092      	lsls	r2, r2, #2
 8010828:	300c      	adds	r0, #12
 801082a:	f7fd f89a 	bl	800d962 <memcpy>
 801082e:	4621      	mov	r1, r4
 8010830:	9801      	ldr	r0, [sp, #4]
 8010832:	f7fe f845 	bl	800e8c0 <_Bfree>
 8010836:	464c      	mov	r4, r9
 8010838:	6923      	ldr	r3, [r4, #16]
 801083a:	1c5a      	adds	r2, r3, #1
 801083c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010840:	6122      	str	r2, [r4, #16]
 8010842:	2201      	movs	r2, #1
 8010844:	615a      	str	r2, [r3, #20]
 8010846:	e7be      	b.n	80107c6 <__gethex+0x362>
 8010848:	6922      	ldr	r2, [r4, #16]
 801084a:	455a      	cmp	r2, fp
 801084c:	dd0b      	ble.n	8010866 <__gethex+0x402>
 801084e:	2101      	movs	r1, #1
 8010850:	4620      	mov	r0, r4
 8010852:	f7ff fd9f 	bl	8010394 <rshift>
 8010856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801085a:	3701      	adds	r7, #1
 801085c:	42bb      	cmp	r3, r7
 801085e:	f6ff aee0 	blt.w	8010622 <__gethex+0x1be>
 8010862:	2501      	movs	r5, #1
 8010864:	e7c2      	b.n	80107ec <__gethex+0x388>
 8010866:	f016 061f 	ands.w	r6, r6, #31
 801086a:	d0fa      	beq.n	8010862 <__gethex+0x3fe>
 801086c:	4453      	add	r3, sl
 801086e:	f1c6 0620 	rsb	r6, r6, #32
 8010872:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010876:	f7fe f8d5 	bl	800ea24 <__hi0bits>
 801087a:	42b0      	cmp	r0, r6
 801087c:	dbe7      	blt.n	801084e <__gethex+0x3ea>
 801087e:	e7f0      	b.n	8010862 <__gethex+0x3fe>
 8010880:	08011c65 	.word	0x08011c65

08010884 <L_shift>:
 8010884:	f1c2 0208 	rsb	r2, r2, #8
 8010888:	0092      	lsls	r2, r2, #2
 801088a:	b570      	push	{r4, r5, r6, lr}
 801088c:	f1c2 0620 	rsb	r6, r2, #32
 8010890:	6843      	ldr	r3, [r0, #4]
 8010892:	6804      	ldr	r4, [r0, #0]
 8010894:	fa03 f506 	lsl.w	r5, r3, r6
 8010898:	432c      	orrs	r4, r5
 801089a:	40d3      	lsrs	r3, r2
 801089c:	6004      	str	r4, [r0, #0]
 801089e:	f840 3f04 	str.w	r3, [r0, #4]!
 80108a2:	4288      	cmp	r0, r1
 80108a4:	d3f4      	bcc.n	8010890 <L_shift+0xc>
 80108a6:	bd70      	pop	{r4, r5, r6, pc}

080108a8 <__match>:
 80108a8:	b530      	push	{r4, r5, lr}
 80108aa:	6803      	ldr	r3, [r0, #0]
 80108ac:	3301      	adds	r3, #1
 80108ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108b2:	b914      	cbnz	r4, 80108ba <__match+0x12>
 80108b4:	6003      	str	r3, [r0, #0]
 80108b6:	2001      	movs	r0, #1
 80108b8:	bd30      	pop	{r4, r5, pc}
 80108ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80108c2:	2d19      	cmp	r5, #25
 80108c4:	bf98      	it	ls
 80108c6:	3220      	addls	r2, #32
 80108c8:	42a2      	cmp	r2, r4
 80108ca:	d0f0      	beq.n	80108ae <__match+0x6>
 80108cc:	2000      	movs	r0, #0
 80108ce:	e7f3      	b.n	80108b8 <__match+0x10>

080108d0 <__hexnan>:
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	680b      	ldr	r3, [r1, #0]
 80108d6:	6801      	ldr	r1, [r0, #0]
 80108d8:	115e      	asrs	r6, r3, #5
 80108da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80108de:	f013 031f 	ands.w	r3, r3, #31
 80108e2:	b087      	sub	sp, #28
 80108e4:	bf18      	it	ne
 80108e6:	3604      	addne	r6, #4
 80108e8:	2500      	movs	r5, #0
 80108ea:	1f37      	subs	r7, r6, #4
 80108ec:	4682      	mov	sl, r0
 80108ee:	4690      	mov	r8, r2
 80108f0:	9301      	str	r3, [sp, #4]
 80108f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80108f6:	46b9      	mov	r9, r7
 80108f8:	463c      	mov	r4, r7
 80108fa:	9502      	str	r5, [sp, #8]
 80108fc:	46ab      	mov	fp, r5
 80108fe:	784a      	ldrb	r2, [r1, #1]
 8010900:	1c4b      	adds	r3, r1, #1
 8010902:	9303      	str	r3, [sp, #12]
 8010904:	b342      	cbz	r2, 8010958 <__hexnan+0x88>
 8010906:	4610      	mov	r0, r2
 8010908:	9105      	str	r1, [sp, #20]
 801090a:	9204      	str	r2, [sp, #16]
 801090c:	f7ff fd94 	bl	8010438 <__hexdig_fun>
 8010910:	2800      	cmp	r0, #0
 8010912:	d151      	bne.n	80109b8 <__hexnan+0xe8>
 8010914:	9a04      	ldr	r2, [sp, #16]
 8010916:	9905      	ldr	r1, [sp, #20]
 8010918:	2a20      	cmp	r2, #32
 801091a:	d818      	bhi.n	801094e <__hexnan+0x7e>
 801091c:	9b02      	ldr	r3, [sp, #8]
 801091e:	459b      	cmp	fp, r3
 8010920:	dd13      	ble.n	801094a <__hexnan+0x7a>
 8010922:	454c      	cmp	r4, r9
 8010924:	d206      	bcs.n	8010934 <__hexnan+0x64>
 8010926:	2d07      	cmp	r5, #7
 8010928:	dc04      	bgt.n	8010934 <__hexnan+0x64>
 801092a:	462a      	mov	r2, r5
 801092c:	4649      	mov	r1, r9
 801092e:	4620      	mov	r0, r4
 8010930:	f7ff ffa8 	bl	8010884 <L_shift>
 8010934:	4544      	cmp	r4, r8
 8010936:	d952      	bls.n	80109de <__hexnan+0x10e>
 8010938:	2300      	movs	r3, #0
 801093a:	f1a4 0904 	sub.w	r9, r4, #4
 801093e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010942:	f8cd b008 	str.w	fp, [sp, #8]
 8010946:	464c      	mov	r4, r9
 8010948:	461d      	mov	r5, r3
 801094a:	9903      	ldr	r1, [sp, #12]
 801094c:	e7d7      	b.n	80108fe <__hexnan+0x2e>
 801094e:	2a29      	cmp	r2, #41	@ 0x29
 8010950:	d157      	bne.n	8010a02 <__hexnan+0x132>
 8010952:	3102      	adds	r1, #2
 8010954:	f8ca 1000 	str.w	r1, [sl]
 8010958:	f1bb 0f00 	cmp.w	fp, #0
 801095c:	d051      	beq.n	8010a02 <__hexnan+0x132>
 801095e:	454c      	cmp	r4, r9
 8010960:	d206      	bcs.n	8010970 <__hexnan+0xa0>
 8010962:	2d07      	cmp	r5, #7
 8010964:	dc04      	bgt.n	8010970 <__hexnan+0xa0>
 8010966:	462a      	mov	r2, r5
 8010968:	4649      	mov	r1, r9
 801096a:	4620      	mov	r0, r4
 801096c:	f7ff ff8a 	bl	8010884 <L_shift>
 8010970:	4544      	cmp	r4, r8
 8010972:	d936      	bls.n	80109e2 <__hexnan+0x112>
 8010974:	f1a8 0204 	sub.w	r2, r8, #4
 8010978:	4623      	mov	r3, r4
 801097a:	f853 1b04 	ldr.w	r1, [r3], #4
 801097e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010982:	429f      	cmp	r7, r3
 8010984:	d2f9      	bcs.n	801097a <__hexnan+0xaa>
 8010986:	1b3b      	subs	r3, r7, r4
 8010988:	f023 0303 	bic.w	r3, r3, #3
 801098c:	3304      	adds	r3, #4
 801098e:	3401      	adds	r4, #1
 8010990:	3e03      	subs	r6, #3
 8010992:	42b4      	cmp	r4, r6
 8010994:	bf88      	it	hi
 8010996:	2304      	movhi	r3, #4
 8010998:	4443      	add	r3, r8
 801099a:	2200      	movs	r2, #0
 801099c:	f843 2b04 	str.w	r2, [r3], #4
 80109a0:	429f      	cmp	r7, r3
 80109a2:	d2fb      	bcs.n	801099c <__hexnan+0xcc>
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	b91b      	cbnz	r3, 80109b0 <__hexnan+0xe0>
 80109a8:	4547      	cmp	r7, r8
 80109aa:	d128      	bne.n	80109fe <__hexnan+0x12e>
 80109ac:	2301      	movs	r3, #1
 80109ae:	603b      	str	r3, [r7, #0]
 80109b0:	2005      	movs	r0, #5
 80109b2:	b007      	add	sp, #28
 80109b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b8:	3501      	adds	r5, #1
 80109ba:	2d08      	cmp	r5, #8
 80109bc:	f10b 0b01 	add.w	fp, fp, #1
 80109c0:	dd06      	ble.n	80109d0 <__hexnan+0x100>
 80109c2:	4544      	cmp	r4, r8
 80109c4:	d9c1      	bls.n	801094a <__hexnan+0x7a>
 80109c6:	2300      	movs	r3, #0
 80109c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80109cc:	2501      	movs	r5, #1
 80109ce:	3c04      	subs	r4, #4
 80109d0:	6822      	ldr	r2, [r4, #0]
 80109d2:	f000 000f 	and.w	r0, r0, #15
 80109d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80109da:	6020      	str	r0, [r4, #0]
 80109dc:	e7b5      	b.n	801094a <__hexnan+0x7a>
 80109de:	2508      	movs	r5, #8
 80109e0:	e7b3      	b.n	801094a <__hexnan+0x7a>
 80109e2:	9b01      	ldr	r3, [sp, #4]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d0dd      	beq.n	80109a4 <__hexnan+0xd4>
 80109e8:	f1c3 0320 	rsb	r3, r3, #32
 80109ec:	f04f 32ff 	mov.w	r2, #4294967295
 80109f0:	40da      	lsrs	r2, r3
 80109f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80109f6:	4013      	ands	r3, r2
 80109f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80109fc:	e7d2      	b.n	80109a4 <__hexnan+0xd4>
 80109fe:	3f04      	subs	r7, #4
 8010a00:	e7d0      	b.n	80109a4 <__hexnan+0xd4>
 8010a02:	2004      	movs	r0, #4
 8010a04:	e7d5      	b.n	80109b2 <__hexnan+0xe2>

08010a06 <__ascii_mbtowc>:
 8010a06:	b082      	sub	sp, #8
 8010a08:	b901      	cbnz	r1, 8010a0c <__ascii_mbtowc+0x6>
 8010a0a:	a901      	add	r1, sp, #4
 8010a0c:	b142      	cbz	r2, 8010a20 <__ascii_mbtowc+0x1a>
 8010a0e:	b14b      	cbz	r3, 8010a24 <__ascii_mbtowc+0x1e>
 8010a10:	7813      	ldrb	r3, [r2, #0]
 8010a12:	600b      	str	r3, [r1, #0]
 8010a14:	7812      	ldrb	r2, [r2, #0]
 8010a16:	1e10      	subs	r0, r2, #0
 8010a18:	bf18      	it	ne
 8010a1a:	2001      	movne	r0, #1
 8010a1c:	b002      	add	sp, #8
 8010a1e:	4770      	bx	lr
 8010a20:	4610      	mov	r0, r2
 8010a22:	e7fb      	b.n	8010a1c <__ascii_mbtowc+0x16>
 8010a24:	f06f 0001 	mvn.w	r0, #1
 8010a28:	e7f8      	b.n	8010a1c <__ascii_mbtowc+0x16>

08010a2a <_realloc_r>:
 8010a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a2e:	4607      	mov	r7, r0
 8010a30:	4614      	mov	r4, r2
 8010a32:	460d      	mov	r5, r1
 8010a34:	b921      	cbnz	r1, 8010a40 <_realloc_r+0x16>
 8010a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a3a:	4611      	mov	r1, r2
 8010a3c:	f7fd be74 	b.w	800e728 <_malloc_r>
 8010a40:	b92a      	cbnz	r2, 8010a4e <_realloc_r+0x24>
 8010a42:	f7fd fdfd 	bl	800e640 <_free_r>
 8010a46:	4625      	mov	r5, r4
 8010a48:	4628      	mov	r0, r5
 8010a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a4e:	f000 f840 	bl	8010ad2 <_malloc_usable_size_r>
 8010a52:	4284      	cmp	r4, r0
 8010a54:	4606      	mov	r6, r0
 8010a56:	d802      	bhi.n	8010a5e <_realloc_r+0x34>
 8010a58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010a5c:	d8f4      	bhi.n	8010a48 <_realloc_r+0x1e>
 8010a5e:	4621      	mov	r1, r4
 8010a60:	4638      	mov	r0, r7
 8010a62:	f7fd fe61 	bl	800e728 <_malloc_r>
 8010a66:	4680      	mov	r8, r0
 8010a68:	b908      	cbnz	r0, 8010a6e <_realloc_r+0x44>
 8010a6a:	4645      	mov	r5, r8
 8010a6c:	e7ec      	b.n	8010a48 <_realloc_r+0x1e>
 8010a6e:	42b4      	cmp	r4, r6
 8010a70:	4622      	mov	r2, r4
 8010a72:	4629      	mov	r1, r5
 8010a74:	bf28      	it	cs
 8010a76:	4632      	movcs	r2, r6
 8010a78:	f7fc ff73 	bl	800d962 <memcpy>
 8010a7c:	4629      	mov	r1, r5
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7fd fdde 	bl	800e640 <_free_r>
 8010a84:	e7f1      	b.n	8010a6a <_realloc_r+0x40>

08010a86 <__ascii_wctomb>:
 8010a86:	4603      	mov	r3, r0
 8010a88:	4608      	mov	r0, r1
 8010a8a:	b141      	cbz	r1, 8010a9e <__ascii_wctomb+0x18>
 8010a8c:	2aff      	cmp	r2, #255	@ 0xff
 8010a8e:	d904      	bls.n	8010a9a <__ascii_wctomb+0x14>
 8010a90:	228a      	movs	r2, #138	@ 0x8a
 8010a92:	601a      	str	r2, [r3, #0]
 8010a94:	f04f 30ff 	mov.w	r0, #4294967295
 8010a98:	4770      	bx	lr
 8010a9a:	700a      	strb	r2, [r1, #0]
 8010a9c:	2001      	movs	r0, #1
 8010a9e:	4770      	bx	lr

08010aa0 <fiprintf>:
 8010aa0:	b40e      	push	{r1, r2, r3}
 8010aa2:	b503      	push	{r0, r1, lr}
 8010aa4:	4601      	mov	r1, r0
 8010aa6:	ab03      	add	r3, sp, #12
 8010aa8:	4805      	ldr	r0, [pc, #20]	@ (8010ac0 <fiprintf+0x20>)
 8010aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aae:	6800      	ldr	r0, [r0, #0]
 8010ab0:	9301      	str	r3, [sp, #4]
 8010ab2:	f000 f83f 	bl	8010b34 <_vfiprintf_r>
 8010ab6:	b002      	add	sp, #8
 8010ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010abc:	b003      	add	sp, #12
 8010abe:	4770      	bx	lr
 8010ac0:	2000003c 	.word	0x2000003c

08010ac4 <abort>:
 8010ac4:	b508      	push	{r3, lr}
 8010ac6:	2006      	movs	r0, #6
 8010ac8:	f000 fa08 	bl	8010edc <raise>
 8010acc:	2001      	movs	r0, #1
 8010ace:	f7f1 fccb 	bl	8002468 <_exit>

08010ad2 <_malloc_usable_size_r>:
 8010ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ad6:	1f18      	subs	r0, r3, #4
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	bfbc      	itt	lt
 8010adc:	580b      	ldrlt	r3, [r1, r0]
 8010ade:	18c0      	addlt	r0, r0, r3
 8010ae0:	4770      	bx	lr

08010ae2 <__sfputc_r>:
 8010ae2:	6893      	ldr	r3, [r2, #8]
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	b410      	push	{r4}
 8010aea:	6093      	str	r3, [r2, #8]
 8010aec:	da08      	bge.n	8010b00 <__sfputc_r+0x1e>
 8010aee:	6994      	ldr	r4, [r2, #24]
 8010af0:	42a3      	cmp	r3, r4
 8010af2:	db01      	blt.n	8010af8 <__sfputc_r+0x16>
 8010af4:	290a      	cmp	r1, #10
 8010af6:	d103      	bne.n	8010b00 <__sfputc_r+0x1e>
 8010af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010afc:	f000 b932 	b.w	8010d64 <__swbuf_r>
 8010b00:	6813      	ldr	r3, [r2, #0]
 8010b02:	1c58      	adds	r0, r3, #1
 8010b04:	6010      	str	r0, [r2, #0]
 8010b06:	7019      	strb	r1, [r3, #0]
 8010b08:	4608      	mov	r0, r1
 8010b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b0e:	4770      	bx	lr

08010b10 <__sfputs_r>:
 8010b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b12:	4606      	mov	r6, r0
 8010b14:	460f      	mov	r7, r1
 8010b16:	4614      	mov	r4, r2
 8010b18:	18d5      	adds	r5, r2, r3
 8010b1a:	42ac      	cmp	r4, r5
 8010b1c:	d101      	bne.n	8010b22 <__sfputs_r+0x12>
 8010b1e:	2000      	movs	r0, #0
 8010b20:	e007      	b.n	8010b32 <__sfputs_r+0x22>
 8010b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b26:	463a      	mov	r2, r7
 8010b28:	4630      	mov	r0, r6
 8010b2a:	f7ff ffda 	bl	8010ae2 <__sfputc_r>
 8010b2e:	1c43      	adds	r3, r0, #1
 8010b30:	d1f3      	bne.n	8010b1a <__sfputs_r+0xa>
 8010b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b34 <_vfiprintf_r>:
 8010b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b38:	460d      	mov	r5, r1
 8010b3a:	b09d      	sub	sp, #116	@ 0x74
 8010b3c:	4614      	mov	r4, r2
 8010b3e:	4698      	mov	r8, r3
 8010b40:	4606      	mov	r6, r0
 8010b42:	b118      	cbz	r0, 8010b4c <_vfiprintf_r+0x18>
 8010b44:	6a03      	ldr	r3, [r0, #32]
 8010b46:	b90b      	cbnz	r3, 8010b4c <_vfiprintf_r+0x18>
 8010b48:	f7fc fdf0 	bl	800d72c <__sinit>
 8010b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b4e:	07d9      	lsls	r1, r3, #31
 8010b50:	d405      	bmi.n	8010b5e <_vfiprintf_r+0x2a>
 8010b52:	89ab      	ldrh	r3, [r5, #12]
 8010b54:	059a      	lsls	r2, r3, #22
 8010b56:	d402      	bmi.n	8010b5e <_vfiprintf_r+0x2a>
 8010b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b5a:	f7fc ff00 	bl	800d95e <__retarget_lock_acquire_recursive>
 8010b5e:	89ab      	ldrh	r3, [r5, #12]
 8010b60:	071b      	lsls	r3, r3, #28
 8010b62:	d501      	bpl.n	8010b68 <_vfiprintf_r+0x34>
 8010b64:	692b      	ldr	r3, [r5, #16]
 8010b66:	b99b      	cbnz	r3, 8010b90 <_vfiprintf_r+0x5c>
 8010b68:	4629      	mov	r1, r5
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	f000 f938 	bl	8010de0 <__swsetup_r>
 8010b70:	b170      	cbz	r0, 8010b90 <_vfiprintf_r+0x5c>
 8010b72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b74:	07dc      	lsls	r4, r3, #31
 8010b76:	d504      	bpl.n	8010b82 <_vfiprintf_r+0x4e>
 8010b78:	f04f 30ff 	mov.w	r0, #4294967295
 8010b7c:	b01d      	add	sp, #116	@ 0x74
 8010b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b82:	89ab      	ldrh	r3, [r5, #12]
 8010b84:	0598      	lsls	r0, r3, #22
 8010b86:	d4f7      	bmi.n	8010b78 <_vfiprintf_r+0x44>
 8010b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b8a:	f7fc fee9 	bl	800d960 <__retarget_lock_release_recursive>
 8010b8e:	e7f3      	b.n	8010b78 <_vfiprintf_r+0x44>
 8010b90:	2300      	movs	r3, #0
 8010b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b94:	2320      	movs	r3, #32
 8010b96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b9e:	2330      	movs	r3, #48	@ 0x30
 8010ba0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010d50 <_vfiprintf_r+0x21c>
 8010ba4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ba8:	f04f 0901 	mov.w	r9, #1
 8010bac:	4623      	mov	r3, r4
 8010bae:	469a      	mov	sl, r3
 8010bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bb4:	b10a      	cbz	r2, 8010bba <_vfiprintf_r+0x86>
 8010bb6:	2a25      	cmp	r2, #37	@ 0x25
 8010bb8:	d1f9      	bne.n	8010bae <_vfiprintf_r+0x7a>
 8010bba:	ebba 0b04 	subs.w	fp, sl, r4
 8010bbe:	d00b      	beq.n	8010bd8 <_vfiprintf_r+0xa4>
 8010bc0:	465b      	mov	r3, fp
 8010bc2:	4622      	mov	r2, r4
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	f7ff ffa2 	bl	8010b10 <__sfputs_r>
 8010bcc:	3001      	adds	r0, #1
 8010bce:	f000 80a7 	beq.w	8010d20 <_vfiprintf_r+0x1ec>
 8010bd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010bd4:	445a      	add	r2, fp
 8010bd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	f000 809f 	beq.w	8010d20 <_vfiprintf_r+0x1ec>
 8010be2:	2300      	movs	r3, #0
 8010be4:	f04f 32ff 	mov.w	r2, #4294967295
 8010be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bec:	f10a 0a01 	add.w	sl, sl, #1
 8010bf0:	9304      	str	r3, [sp, #16]
 8010bf2:	9307      	str	r3, [sp, #28]
 8010bf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010bf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8010bfa:	4654      	mov	r4, sl
 8010bfc:	2205      	movs	r2, #5
 8010bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c02:	4853      	ldr	r0, [pc, #332]	@ (8010d50 <_vfiprintf_r+0x21c>)
 8010c04:	f7ef fb0c 	bl	8000220 <memchr>
 8010c08:	9a04      	ldr	r2, [sp, #16]
 8010c0a:	b9d8      	cbnz	r0, 8010c44 <_vfiprintf_r+0x110>
 8010c0c:	06d1      	lsls	r1, r2, #27
 8010c0e:	bf44      	itt	mi
 8010c10:	2320      	movmi	r3, #32
 8010c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c16:	0713      	lsls	r3, r2, #28
 8010c18:	bf44      	itt	mi
 8010c1a:	232b      	movmi	r3, #43	@ 0x2b
 8010c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c20:	f89a 3000 	ldrb.w	r3, [sl]
 8010c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c26:	d015      	beq.n	8010c54 <_vfiprintf_r+0x120>
 8010c28:	9a07      	ldr	r2, [sp, #28]
 8010c2a:	4654      	mov	r4, sl
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	f04f 0c0a 	mov.w	ip, #10
 8010c32:	4621      	mov	r1, r4
 8010c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c38:	3b30      	subs	r3, #48	@ 0x30
 8010c3a:	2b09      	cmp	r3, #9
 8010c3c:	d94b      	bls.n	8010cd6 <_vfiprintf_r+0x1a2>
 8010c3e:	b1b0      	cbz	r0, 8010c6e <_vfiprintf_r+0x13a>
 8010c40:	9207      	str	r2, [sp, #28]
 8010c42:	e014      	b.n	8010c6e <_vfiprintf_r+0x13a>
 8010c44:	eba0 0308 	sub.w	r3, r0, r8
 8010c48:	fa09 f303 	lsl.w	r3, r9, r3
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	9304      	str	r3, [sp, #16]
 8010c50:	46a2      	mov	sl, r4
 8010c52:	e7d2      	b.n	8010bfa <_vfiprintf_r+0xc6>
 8010c54:	9b03      	ldr	r3, [sp, #12]
 8010c56:	1d19      	adds	r1, r3, #4
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	9103      	str	r1, [sp, #12]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	bfbb      	ittet	lt
 8010c60:	425b      	neglt	r3, r3
 8010c62:	f042 0202 	orrlt.w	r2, r2, #2
 8010c66:	9307      	strge	r3, [sp, #28]
 8010c68:	9307      	strlt	r3, [sp, #28]
 8010c6a:	bfb8      	it	lt
 8010c6c:	9204      	strlt	r2, [sp, #16]
 8010c6e:	7823      	ldrb	r3, [r4, #0]
 8010c70:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c72:	d10a      	bne.n	8010c8a <_vfiprintf_r+0x156>
 8010c74:	7863      	ldrb	r3, [r4, #1]
 8010c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c78:	d132      	bne.n	8010ce0 <_vfiprintf_r+0x1ac>
 8010c7a:	9b03      	ldr	r3, [sp, #12]
 8010c7c:	1d1a      	adds	r2, r3, #4
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	9203      	str	r2, [sp, #12]
 8010c82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c86:	3402      	adds	r4, #2
 8010c88:	9305      	str	r3, [sp, #20]
 8010c8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010d60 <_vfiprintf_r+0x22c>
 8010c8e:	7821      	ldrb	r1, [r4, #0]
 8010c90:	2203      	movs	r2, #3
 8010c92:	4650      	mov	r0, sl
 8010c94:	f7ef fac4 	bl	8000220 <memchr>
 8010c98:	b138      	cbz	r0, 8010caa <_vfiprintf_r+0x176>
 8010c9a:	9b04      	ldr	r3, [sp, #16]
 8010c9c:	eba0 000a 	sub.w	r0, r0, sl
 8010ca0:	2240      	movs	r2, #64	@ 0x40
 8010ca2:	4082      	lsls	r2, r0
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	3401      	adds	r4, #1
 8010ca8:	9304      	str	r3, [sp, #16]
 8010caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cae:	4829      	ldr	r0, [pc, #164]	@ (8010d54 <_vfiprintf_r+0x220>)
 8010cb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010cb4:	2206      	movs	r2, #6
 8010cb6:	f7ef fab3 	bl	8000220 <memchr>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d03f      	beq.n	8010d3e <_vfiprintf_r+0x20a>
 8010cbe:	4b26      	ldr	r3, [pc, #152]	@ (8010d58 <_vfiprintf_r+0x224>)
 8010cc0:	bb1b      	cbnz	r3, 8010d0a <_vfiprintf_r+0x1d6>
 8010cc2:	9b03      	ldr	r3, [sp, #12]
 8010cc4:	3307      	adds	r3, #7
 8010cc6:	f023 0307 	bic.w	r3, r3, #7
 8010cca:	3308      	adds	r3, #8
 8010ccc:	9303      	str	r3, [sp, #12]
 8010cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cd0:	443b      	add	r3, r7
 8010cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cd4:	e76a      	b.n	8010bac <_vfiprintf_r+0x78>
 8010cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cda:	460c      	mov	r4, r1
 8010cdc:	2001      	movs	r0, #1
 8010cde:	e7a8      	b.n	8010c32 <_vfiprintf_r+0xfe>
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	3401      	adds	r4, #1
 8010ce4:	9305      	str	r3, [sp, #20]
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	f04f 0c0a 	mov.w	ip, #10
 8010cec:	4620      	mov	r0, r4
 8010cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cf2:	3a30      	subs	r2, #48	@ 0x30
 8010cf4:	2a09      	cmp	r2, #9
 8010cf6:	d903      	bls.n	8010d00 <_vfiprintf_r+0x1cc>
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d0c6      	beq.n	8010c8a <_vfiprintf_r+0x156>
 8010cfc:	9105      	str	r1, [sp, #20]
 8010cfe:	e7c4      	b.n	8010c8a <_vfiprintf_r+0x156>
 8010d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d04:	4604      	mov	r4, r0
 8010d06:	2301      	movs	r3, #1
 8010d08:	e7f0      	b.n	8010cec <_vfiprintf_r+0x1b8>
 8010d0a:	ab03      	add	r3, sp, #12
 8010d0c:	9300      	str	r3, [sp, #0]
 8010d0e:	462a      	mov	r2, r5
 8010d10:	4b12      	ldr	r3, [pc, #72]	@ (8010d5c <_vfiprintf_r+0x228>)
 8010d12:	a904      	add	r1, sp, #16
 8010d14:	4630      	mov	r0, r6
 8010d16:	f7fb feb9 	bl	800ca8c <_printf_float>
 8010d1a:	4607      	mov	r7, r0
 8010d1c:	1c78      	adds	r0, r7, #1
 8010d1e:	d1d6      	bne.n	8010cce <_vfiprintf_r+0x19a>
 8010d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d22:	07d9      	lsls	r1, r3, #31
 8010d24:	d405      	bmi.n	8010d32 <_vfiprintf_r+0x1fe>
 8010d26:	89ab      	ldrh	r3, [r5, #12]
 8010d28:	059a      	lsls	r2, r3, #22
 8010d2a:	d402      	bmi.n	8010d32 <_vfiprintf_r+0x1fe>
 8010d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d2e:	f7fc fe17 	bl	800d960 <__retarget_lock_release_recursive>
 8010d32:	89ab      	ldrh	r3, [r5, #12]
 8010d34:	065b      	lsls	r3, r3, #25
 8010d36:	f53f af1f 	bmi.w	8010b78 <_vfiprintf_r+0x44>
 8010d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d3c:	e71e      	b.n	8010b7c <_vfiprintf_r+0x48>
 8010d3e:	ab03      	add	r3, sp, #12
 8010d40:	9300      	str	r3, [sp, #0]
 8010d42:	462a      	mov	r2, r5
 8010d44:	4b05      	ldr	r3, [pc, #20]	@ (8010d5c <_vfiprintf_r+0x228>)
 8010d46:	a904      	add	r1, sp, #16
 8010d48:	4630      	mov	r0, r6
 8010d4a:	f7fc f937 	bl	800cfbc <_printf_i>
 8010d4e:	e7e4      	b.n	8010d1a <_vfiprintf_r+0x1e6>
 8010d50:	08011cd1 	.word	0x08011cd1
 8010d54:	08011cdb 	.word	0x08011cdb
 8010d58:	0800ca8d 	.word	0x0800ca8d
 8010d5c:	08010b11 	.word	0x08010b11
 8010d60:	08011cd7 	.word	0x08011cd7

08010d64 <__swbuf_r>:
 8010d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d66:	460e      	mov	r6, r1
 8010d68:	4614      	mov	r4, r2
 8010d6a:	4605      	mov	r5, r0
 8010d6c:	b118      	cbz	r0, 8010d76 <__swbuf_r+0x12>
 8010d6e:	6a03      	ldr	r3, [r0, #32]
 8010d70:	b90b      	cbnz	r3, 8010d76 <__swbuf_r+0x12>
 8010d72:	f7fc fcdb 	bl	800d72c <__sinit>
 8010d76:	69a3      	ldr	r3, [r4, #24]
 8010d78:	60a3      	str	r3, [r4, #8]
 8010d7a:	89a3      	ldrh	r3, [r4, #12]
 8010d7c:	071a      	lsls	r2, r3, #28
 8010d7e:	d501      	bpl.n	8010d84 <__swbuf_r+0x20>
 8010d80:	6923      	ldr	r3, [r4, #16]
 8010d82:	b943      	cbnz	r3, 8010d96 <__swbuf_r+0x32>
 8010d84:	4621      	mov	r1, r4
 8010d86:	4628      	mov	r0, r5
 8010d88:	f000 f82a 	bl	8010de0 <__swsetup_r>
 8010d8c:	b118      	cbz	r0, 8010d96 <__swbuf_r+0x32>
 8010d8e:	f04f 37ff 	mov.w	r7, #4294967295
 8010d92:	4638      	mov	r0, r7
 8010d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d96:	6823      	ldr	r3, [r4, #0]
 8010d98:	6922      	ldr	r2, [r4, #16]
 8010d9a:	1a98      	subs	r0, r3, r2
 8010d9c:	6963      	ldr	r3, [r4, #20]
 8010d9e:	b2f6      	uxtb	r6, r6
 8010da0:	4283      	cmp	r3, r0
 8010da2:	4637      	mov	r7, r6
 8010da4:	dc05      	bgt.n	8010db2 <__swbuf_r+0x4e>
 8010da6:	4621      	mov	r1, r4
 8010da8:	4628      	mov	r0, r5
 8010daa:	f7ff fa53 	bl	8010254 <_fflush_r>
 8010dae:	2800      	cmp	r0, #0
 8010db0:	d1ed      	bne.n	8010d8e <__swbuf_r+0x2a>
 8010db2:	68a3      	ldr	r3, [r4, #8]
 8010db4:	3b01      	subs	r3, #1
 8010db6:	60a3      	str	r3, [r4, #8]
 8010db8:	6823      	ldr	r3, [r4, #0]
 8010dba:	1c5a      	adds	r2, r3, #1
 8010dbc:	6022      	str	r2, [r4, #0]
 8010dbe:	701e      	strb	r6, [r3, #0]
 8010dc0:	6962      	ldr	r2, [r4, #20]
 8010dc2:	1c43      	adds	r3, r0, #1
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d004      	beq.n	8010dd2 <__swbuf_r+0x6e>
 8010dc8:	89a3      	ldrh	r3, [r4, #12]
 8010dca:	07db      	lsls	r3, r3, #31
 8010dcc:	d5e1      	bpl.n	8010d92 <__swbuf_r+0x2e>
 8010dce:	2e0a      	cmp	r6, #10
 8010dd0:	d1df      	bne.n	8010d92 <__swbuf_r+0x2e>
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	f7ff fa3d 	bl	8010254 <_fflush_r>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d0d9      	beq.n	8010d92 <__swbuf_r+0x2e>
 8010dde:	e7d6      	b.n	8010d8e <__swbuf_r+0x2a>

08010de0 <__swsetup_r>:
 8010de0:	b538      	push	{r3, r4, r5, lr}
 8010de2:	4b29      	ldr	r3, [pc, #164]	@ (8010e88 <__swsetup_r+0xa8>)
 8010de4:	4605      	mov	r5, r0
 8010de6:	6818      	ldr	r0, [r3, #0]
 8010de8:	460c      	mov	r4, r1
 8010dea:	b118      	cbz	r0, 8010df4 <__swsetup_r+0x14>
 8010dec:	6a03      	ldr	r3, [r0, #32]
 8010dee:	b90b      	cbnz	r3, 8010df4 <__swsetup_r+0x14>
 8010df0:	f7fc fc9c 	bl	800d72c <__sinit>
 8010df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010df8:	0719      	lsls	r1, r3, #28
 8010dfa:	d422      	bmi.n	8010e42 <__swsetup_r+0x62>
 8010dfc:	06da      	lsls	r2, r3, #27
 8010dfe:	d407      	bmi.n	8010e10 <__swsetup_r+0x30>
 8010e00:	2209      	movs	r2, #9
 8010e02:	602a      	str	r2, [r5, #0]
 8010e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e08:	81a3      	strh	r3, [r4, #12]
 8010e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e0e:	e033      	b.n	8010e78 <__swsetup_r+0x98>
 8010e10:	0758      	lsls	r0, r3, #29
 8010e12:	d512      	bpl.n	8010e3a <__swsetup_r+0x5a>
 8010e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e16:	b141      	cbz	r1, 8010e2a <__swsetup_r+0x4a>
 8010e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e1c:	4299      	cmp	r1, r3
 8010e1e:	d002      	beq.n	8010e26 <__swsetup_r+0x46>
 8010e20:	4628      	mov	r0, r5
 8010e22:	f7fd fc0d 	bl	800e640 <_free_r>
 8010e26:	2300      	movs	r3, #0
 8010e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e2a:	89a3      	ldrh	r3, [r4, #12]
 8010e2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e30:	81a3      	strh	r3, [r4, #12]
 8010e32:	2300      	movs	r3, #0
 8010e34:	6063      	str	r3, [r4, #4]
 8010e36:	6923      	ldr	r3, [r4, #16]
 8010e38:	6023      	str	r3, [r4, #0]
 8010e3a:	89a3      	ldrh	r3, [r4, #12]
 8010e3c:	f043 0308 	orr.w	r3, r3, #8
 8010e40:	81a3      	strh	r3, [r4, #12]
 8010e42:	6923      	ldr	r3, [r4, #16]
 8010e44:	b94b      	cbnz	r3, 8010e5a <__swsetup_r+0x7a>
 8010e46:	89a3      	ldrh	r3, [r4, #12]
 8010e48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e50:	d003      	beq.n	8010e5a <__swsetup_r+0x7a>
 8010e52:	4621      	mov	r1, r4
 8010e54:	4628      	mov	r0, r5
 8010e56:	f000 f883 	bl	8010f60 <__smakebuf_r>
 8010e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e5e:	f013 0201 	ands.w	r2, r3, #1
 8010e62:	d00a      	beq.n	8010e7a <__swsetup_r+0x9a>
 8010e64:	2200      	movs	r2, #0
 8010e66:	60a2      	str	r2, [r4, #8]
 8010e68:	6962      	ldr	r2, [r4, #20]
 8010e6a:	4252      	negs	r2, r2
 8010e6c:	61a2      	str	r2, [r4, #24]
 8010e6e:	6922      	ldr	r2, [r4, #16]
 8010e70:	b942      	cbnz	r2, 8010e84 <__swsetup_r+0xa4>
 8010e72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010e76:	d1c5      	bne.n	8010e04 <__swsetup_r+0x24>
 8010e78:	bd38      	pop	{r3, r4, r5, pc}
 8010e7a:	0799      	lsls	r1, r3, #30
 8010e7c:	bf58      	it	pl
 8010e7e:	6962      	ldrpl	r2, [r4, #20]
 8010e80:	60a2      	str	r2, [r4, #8]
 8010e82:	e7f4      	b.n	8010e6e <__swsetup_r+0x8e>
 8010e84:	2000      	movs	r0, #0
 8010e86:	e7f7      	b.n	8010e78 <__swsetup_r+0x98>
 8010e88:	2000003c 	.word	0x2000003c

08010e8c <_raise_r>:
 8010e8c:	291f      	cmp	r1, #31
 8010e8e:	b538      	push	{r3, r4, r5, lr}
 8010e90:	4605      	mov	r5, r0
 8010e92:	460c      	mov	r4, r1
 8010e94:	d904      	bls.n	8010ea0 <_raise_r+0x14>
 8010e96:	2316      	movs	r3, #22
 8010e98:	6003      	str	r3, [r0, #0]
 8010e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ea0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ea2:	b112      	cbz	r2, 8010eaa <_raise_r+0x1e>
 8010ea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ea8:	b94b      	cbnz	r3, 8010ebe <_raise_r+0x32>
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f000 f830 	bl	8010f10 <_getpid_r>
 8010eb0:	4622      	mov	r2, r4
 8010eb2:	4601      	mov	r1, r0
 8010eb4:	4628      	mov	r0, r5
 8010eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010eba:	f000 b817 	b.w	8010eec <_kill_r>
 8010ebe:	2b01      	cmp	r3, #1
 8010ec0:	d00a      	beq.n	8010ed8 <_raise_r+0x4c>
 8010ec2:	1c59      	adds	r1, r3, #1
 8010ec4:	d103      	bne.n	8010ece <_raise_r+0x42>
 8010ec6:	2316      	movs	r3, #22
 8010ec8:	6003      	str	r3, [r0, #0]
 8010eca:	2001      	movs	r0, #1
 8010ecc:	e7e7      	b.n	8010e9e <_raise_r+0x12>
 8010ece:	2100      	movs	r1, #0
 8010ed0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	4798      	blx	r3
 8010ed8:	2000      	movs	r0, #0
 8010eda:	e7e0      	b.n	8010e9e <_raise_r+0x12>

08010edc <raise>:
 8010edc:	4b02      	ldr	r3, [pc, #8]	@ (8010ee8 <raise+0xc>)
 8010ede:	4601      	mov	r1, r0
 8010ee0:	6818      	ldr	r0, [r3, #0]
 8010ee2:	f7ff bfd3 	b.w	8010e8c <_raise_r>
 8010ee6:	bf00      	nop
 8010ee8:	2000003c 	.word	0x2000003c

08010eec <_kill_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	4d07      	ldr	r5, [pc, #28]	@ (8010f0c <_kill_r+0x20>)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4608      	mov	r0, r1
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	602b      	str	r3, [r5, #0]
 8010efa:	f7f1 faa5 	bl	8002448 <_kill>
 8010efe:	1c43      	adds	r3, r0, #1
 8010f00:	d102      	bne.n	8010f08 <_kill_r+0x1c>
 8010f02:	682b      	ldr	r3, [r5, #0]
 8010f04:	b103      	cbz	r3, 8010f08 <_kill_r+0x1c>
 8010f06:	6023      	str	r3, [r4, #0]
 8010f08:	bd38      	pop	{r3, r4, r5, pc}
 8010f0a:	bf00      	nop
 8010f0c:	2000327c 	.word	0x2000327c

08010f10 <_getpid_r>:
 8010f10:	f7f1 ba92 	b.w	8002438 <_getpid>

08010f14 <__swhatbuf_r>:
 8010f14:	b570      	push	{r4, r5, r6, lr}
 8010f16:	460c      	mov	r4, r1
 8010f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f1c:	2900      	cmp	r1, #0
 8010f1e:	b096      	sub	sp, #88	@ 0x58
 8010f20:	4615      	mov	r5, r2
 8010f22:	461e      	mov	r6, r3
 8010f24:	da0d      	bge.n	8010f42 <__swhatbuf_r+0x2e>
 8010f26:	89a3      	ldrh	r3, [r4, #12]
 8010f28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010f2c:	f04f 0100 	mov.w	r1, #0
 8010f30:	bf14      	ite	ne
 8010f32:	2340      	movne	r3, #64	@ 0x40
 8010f34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010f38:	2000      	movs	r0, #0
 8010f3a:	6031      	str	r1, [r6, #0]
 8010f3c:	602b      	str	r3, [r5, #0]
 8010f3e:	b016      	add	sp, #88	@ 0x58
 8010f40:	bd70      	pop	{r4, r5, r6, pc}
 8010f42:	466a      	mov	r2, sp
 8010f44:	f000 f848 	bl	8010fd8 <_fstat_r>
 8010f48:	2800      	cmp	r0, #0
 8010f4a:	dbec      	blt.n	8010f26 <__swhatbuf_r+0x12>
 8010f4c:	9901      	ldr	r1, [sp, #4]
 8010f4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010f52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010f56:	4259      	negs	r1, r3
 8010f58:	4159      	adcs	r1, r3
 8010f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f5e:	e7eb      	b.n	8010f38 <__swhatbuf_r+0x24>

08010f60 <__smakebuf_r>:
 8010f60:	898b      	ldrh	r3, [r1, #12]
 8010f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f64:	079d      	lsls	r5, r3, #30
 8010f66:	4606      	mov	r6, r0
 8010f68:	460c      	mov	r4, r1
 8010f6a:	d507      	bpl.n	8010f7c <__smakebuf_r+0x1c>
 8010f6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010f70:	6023      	str	r3, [r4, #0]
 8010f72:	6123      	str	r3, [r4, #16]
 8010f74:	2301      	movs	r3, #1
 8010f76:	6163      	str	r3, [r4, #20]
 8010f78:	b003      	add	sp, #12
 8010f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f7c:	ab01      	add	r3, sp, #4
 8010f7e:	466a      	mov	r2, sp
 8010f80:	f7ff ffc8 	bl	8010f14 <__swhatbuf_r>
 8010f84:	9f00      	ldr	r7, [sp, #0]
 8010f86:	4605      	mov	r5, r0
 8010f88:	4639      	mov	r1, r7
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f7fd fbcc 	bl	800e728 <_malloc_r>
 8010f90:	b948      	cbnz	r0, 8010fa6 <__smakebuf_r+0x46>
 8010f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f96:	059a      	lsls	r2, r3, #22
 8010f98:	d4ee      	bmi.n	8010f78 <__smakebuf_r+0x18>
 8010f9a:	f023 0303 	bic.w	r3, r3, #3
 8010f9e:	f043 0302 	orr.w	r3, r3, #2
 8010fa2:	81a3      	strh	r3, [r4, #12]
 8010fa4:	e7e2      	b.n	8010f6c <__smakebuf_r+0xc>
 8010fa6:	89a3      	ldrh	r3, [r4, #12]
 8010fa8:	6020      	str	r0, [r4, #0]
 8010faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fae:	81a3      	strh	r3, [r4, #12]
 8010fb0:	9b01      	ldr	r3, [sp, #4]
 8010fb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010fb6:	b15b      	cbz	r3, 8010fd0 <__smakebuf_r+0x70>
 8010fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f000 f81d 	bl	8010ffc <_isatty_r>
 8010fc2:	b128      	cbz	r0, 8010fd0 <__smakebuf_r+0x70>
 8010fc4:	89a3      	ldrh	r3, [r4, #12]
 8010fc6:	f023 0303 	bic.w	r3, r3, #3
 8010fca:	f043 0301 	orr.w	r3, r3, #1
 8010fce:	81a3      	strh	r3, [r4, #12]
 8010fd0:	89a3      	ldrh	r3, [r4, #12]
 8010fd2:	431d      	orrs	r5, r3
 8010fd4:	81a5      	strh	r5, [r4, #12]
 8010fd6:	e7cf      	b.n	8010f78 <__smakebuf_r+0x18>

08010fd8 <_fstat_r>:
 8010fd8:	b538      	push	{r3, r4, r5, lr}
 8010fda:	4d07      	ldr	r5, [pc, #28]	@ (8010ff8 <_fstat_r+0x20>)
 8010fdc:	2300      	movs	r3, #0
 8010fde:	4604      	mov	r4, r0
 8010fe0:	4608      	mov	r0, r1
 8010fe2:	4611      	mov	r1, r2
 8010fe4:	602b      	str	r3, [r5, #0]
 8010fe6:	f7f1 fa8f 	bl	8002508 <_fstat>
 8010fea:	1c43      	adds	r3, r0, #1
 8010fec:	d102      	bne.n	8010ff4 <_fstat_r+0x1c>
 8010fee:	682b      	ldr	r3, [r5, #0]
 8010ff0:	b103      	cbz	r3, 8010ff4 <_fstat_r+0x1c>
 8010ff2:	6023      	str	r3, [r4, #0]
 8010ff4:	bd38      	pop	{r3, r4, r5, pc}
 8010ff6:	bf00      	nop
 8010ff8:	2000327c 	.word	0x2000327c

08010ffc <_isatty_r>:
 8010ffc:	b538      	push	{r3, r4, r5, lr}
 8010ffe:	4d06      	ldr	r5, [pc, #24]	@ (8011018 <_isatty_r+0x1c>)
 8011000:	2300      	movs	r3, #0
 8011002:	4604      	mov	r4, r0
 8011004:	4608      	mov	r0, r1
 8011006:	602b      	str	r3, [r5, #0]
 8011008:	f7f1 fa8e 	bl	8002528 <_isatty>
 801100c:	1c43      	adds	r3, r0, #1
 801100e:	d102      	bne.n	8011016 <_isatty_r+0x1a>
 8011010:	682b      	ldr	r3, [r5, #0]
 8011012:	b103      	cbz	r3, 8011016 <_isatty_r+0x1a>
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	bd38      	pop	{r3, r4, r5, pc}
 8011018:	2000327c 	.word	0x2000327c

0801101c <cosf>:
 801101c:	ee10 3a10 	vmov	r3, s0
 8011020:	b507      	push	{r0, r1, r2, lr}
 8011022:	4a1e      	ldr	r2, [pc, #120]	@ (801109c <cosf+0x80>)
 8011024:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011028:	4293      	cmp	r3, r2
 801102a:	d806      	bhi.n	801103a <cosf+0x1e>
 801102c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80110a0 <cosf+0x84>
 8011030:	b003      	add	sp, #12
 8011032:	f85d eb04 	ldr.w	lr, [sp], #4
 8011036:	f000 b835 	b.w	80110a4 <__kernel_cosf>
 801103a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801103e:	d304      	bcc.n	801104a <cosf+0x2e>
 8011040:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011044:	b003      	add	sp, #12
 8011046:	f85d fb04 	ldr.w	pc, [sp], #4
 801104a:	4668      	mov	r0, sp
 801104c:	f000 f8ca 	bl	80111e4 <__ieee754_rem_pio2f>
 8011050:	f000 0003 	and.w	r0, r0, #3
 8011054:	2801      	cmp	r0, #1
 8011056:	d009      	beq.n	801106c <cosf+0x50>
 8011058:	2802      	cmp	r0, #2
 801105a:	d010      	beq.n	801107e <cosf+0x62>
 801105c:	b9b0      	cbnz	r0, 801108c <cosf+0x70>
 801105e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011062:	ed9d 0a00 	vldr	s0, [sp]
 8011066:	f000 f81d 	bl	80110a4 <__kernel_cosf>
 801106a:	e7eb      	b.n	8011044 <cosf+0x28>
 801106c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011070:	ed9d 0a00 	vldr	s0, [sp]
 8011074:	f000 f86e 	bl	8011154 <__kernel_sinf>
 8011078:	eeb1 0a40 	vneg.f32	s0, s0
 801107c:	e7e2      	b.n	8011044 <cosf+0x28>
 801107e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011082:	ed9d 0a00 	vldr	s0, [sp]
 8011086:	f000 f80d 	bl	80110a4 <__kernel_cosf>
 801108a:	e7f5      	b.n	8011078 <cosf+0x5c>
 801108c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011090:	ed9d 0a00 	vldr	s0, [sp]
 8011094:	2001      	movs	r0, #1
 8011096:	f000 f85d 	bl	8011154 <__kernel_sinf>
 801109a:	e7d3      	b.n	8011044 <cosf+0x28>
 801109c:	3f490fd8 	.word	0x3f490fd8
 80110a0:	00000000 	.word	0x00000000

080110a4 <__kernel_cosf>:
 80110a4:	ee10 3a10 	vmov	r3, s0
 80110a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80110ac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80110b0:	eef0 6a40 	vmov.f32	s13, s0
 80110b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80110b8:	d204      	bcs.n	80110c4 <__kernel_cosf+0x20>
 80110ba:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80110be:	ee17 2a90 	vmov	r2, s15
 80110c2:	b342      	cbz	r2, 8011116 <__kernel_cosf+0x72>
 80110c4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80110c8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8011134 <__kernel_cosf+0x90>
 80110cc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8011138 <__kernel_cosf+0x94>
 80110d0:	4a1a      	ldr	r2, [pc, #104]	@ (801113c <__kernel_cosf+0x98>)
 80110d2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80110d6:	4293      	cmp	r3, r2
 80110d8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011140 <__kernel_cosf+0x9c>
 80110dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80110e0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011144 <__kernel_cosf+0xa0>
 80110e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80110e8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8011148 <__kernel_cosf+0xa4>
 80110ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80110f0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801114c <__kernel_cosf+0xa8>
 80110f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80110f8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80110fc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011100:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011104:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011108:	ee67 7a27 	vmul.f32	s15, s14, s15
 801110c:	d804      	bhi.n	8011118 <__kernel_cosf+0x74>
 801110e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011112:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011116:	4770      	bx	lr
 8011118:	4a0d      	ldr	r2, [pc, #52]	@ (8011150 <__kernel_cosf+0xac>)
 801111a:	4293      	cmp	r3, r2
 801111c:	bf9a      	itte	ls
 801111e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8011122:	ee07 3a10 	vmovls	s14, r3
 8011126:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801112a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801112e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011132:	e7ec      	b.n	801110e <__kernel_cosf+0x6a>
 8011134:	ad47d74e 	.word	0xad47d74e
 8011138:	310f74f6 	.word	0x310f74f6
 801113c:	3e999999 	.word	0x3e999999
 8011140:	b493f27c 	.word	0xb493f27c
 8011144:	37d00d01 	.word	0x37d00d01
 8011148:	bab60b61 	.word	0xbab60b61
 801114c:	3d2aaaab 	.word	0x3d2aaaab
 8011150:	3f480000 	.word	0x3f480000

08011154 <__kernel_sinf>:
 8011154:	ee10 3a10 	vmov	r3, s0
 8011158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801115c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011160:	d204      	bcs.n	801116c <__kernel_sinf+0x18>
 8011162:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011166:	ee17 3a90 	vmov	r3, s15
 801116a:	b35b      	cbz	r3, 80111c4 <__kernel_sinf+0x70>
 801116c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011170:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80111c8 <__kernel_sinf+0x74>
 8011174:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80111cc <__kernel_sinf+0x78>
 8011178:	eea7 6a27 	vfma.f32	s12, s14, s15
 801117c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80111d0 <__kernel_sinf+0x7c>
 8011180:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011184:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80111d4 <__kernel_sinf+0x80>
 8011188:	eea7 6a87 	vfma.f32	s12, s15, s14
 801118c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80111d8 <__kernel_sinf+0x84>
 8011190:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011194:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011198:	b930      	cbnz	r0, 80111a8 <__kernel_sinf+0x54>
 801119a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80111dc <__kernel_sinf+0x88>
 801119e:	eea7 6a27 	vfma.f32	s12, s14, s15
 80111a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80111a6:	4770      	bx	lr
 80111a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80111ac:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80111b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80111b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80111b8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80111e0 <__kernel_sinf+0x8c>
 80111bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80111c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80111c4:	4770      	bx	lr
 80111c6:	bf00      	nop
 80111c8:	2f2ec9d3 	.word	0x2f2ec9d3
 80111cc:	b2d72f34 	.word	0xb2d72f34
 80111d0:	3638ef1b 	.word	0x3638ef1b
 80111d4:	b9500d01 	.word	0xb9500d01
 80111d8:	3c088889 	.word	0x3c088889
 80111dc:	be2aaaab 	.word	0xbe2aaaab
 80111e0:	3e2aaaab 	.word	0x3e2aaaab

080111e4 <__ieee754_rem_pio2f>:
 80111e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111e6:	ee10 6a10 	vmov	r6, s0
 80111ea:	4b88      	ldr	r3, [pc, #544]	@ (801140c <__ieee754_rem_pio2f+0x228>)
 80111ec:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80111f0:	429d      	cmp	r5, r3
 80111f2:	b087      	sub	sp, #28
 80111f4:	4604      	mov	r4, r0
 80111f6:	d805      	bhi.n	8011204 <__ieee754_rem_pio2f+0x20>
 80111f8:	2300      	movs	r3, #0
 80111fa:	ed80 0a00 	vstr	s0, [r0]
 80111fe:	6043      	str	r3, [r0, #4]
 8011200:	2000      	movs	r0, #0
 8011202:	e022      	b.n	801124a <__ieee754_rem_pio2f+0x66>
 8011204:	4b82      	ldr	r3, [pc, #520]	@ (8011410 <__ieee754_rem_pio2f+0x22c>)
 8011206:	429d      	cmp	r5, r3
 8011208:	d83a      	bhi.n	8011280 <__ieee754_rem_pio2f+0x9c>
 801120a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801120e:	2e00      	cmp	r6, #0
 8011210:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011414 <__ieee754_rem_pio2f+0x230>
 8011214:	4a80      	ldr	r2, [pc, #512]	@ (8011418 <__ieee754_rem_pio2f+0x234>)
 8011216:	f023 030f 	bic.w	r3, r3, #15
 801121a:	dd18      	ble.n	801124e <__ieee754_rem_pio2f+0x6a>
 801121c:	4293      	cmp	r3, r2
 801121e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011222:	bf09      	itett	eq
 8011224:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801141c <__ieee754_rem_pio2f+0x238>
 8011228:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011420 <__ieee754_rem_pio2f+0x23c>
 801122c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011424 <__ieee754_rem_pio2f+0x240>
 8011230:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011234:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801123c:	ed80 7a00 	vstr	s14, [r0]
 8011240:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011244:	edc0 7a01 	vstr	s15, [r0, #4]
 8011248:	2001      	movs	r0, #1
 801124a:	b007      	add	sp, #28
 801124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801124e:	4293      	cmp	r3, r2
 8011250:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011254:	bf09      	itett	eq
 8011256:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801141c <__ieee754_rem_pio2f+0x238>
 801125a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011420 <__ieee754_rem_pio2f+0x23c>
 801125e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011424 <__ieee754_rem_pio2f+0x240>
 8011262:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011266:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801126a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801126e:	ed80 7a00 	vstr	s14, [r0]
 8011272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011276:	edc0 7a01 	vstr	s15, [r0, #4]
 801127a:	f04f 30ff 	mov.w	r0, #4294967295
 801127e:	e7e4      	b.n	801124a <__ieee754_rem_pio2f+0x66>
 8011280:	4b69      	ldr	r3, [pc, #420]	@ (8011428 <__ieee754_rem_pio2f+0x244>)
 8011282:	429d      	cmp	r5, r3
 8011284:	d873      	bhi.n	801136e <__ieee754_rem_pio2f+0x18a>
 8011286:	f000 f8dd 	bl	8011444 <fabsf>
 801128a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801142c <__ieee754_rem_pio2f+0x248>
 801128e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011292:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801129a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801129e:	ee17 0a90 	vmov	r0, s15
 80112a2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011414 <__ieee754_rem_pio2f+0x230>
 80112a6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80112aa:	281f      	cmp	r0, #31
 80112ac:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011420 <__ieee754_rem_pio2f+0x23c>
 80112b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112b4:	eeb1 6a47 	vneg.f32	s12, s14
 80112b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80112bc:	ee16 1a90 	vmov	r1, s13
 80112c0:	dc09      	bgt.n	80112d6 <__ieee754_rem_pio2f+0xf2>
 80112c2:	4a5b      	ldr	r2, [pc, #364]	@ (8011430 <__ieee754_rem_pio2f+0x24c>)
 80112c4:	1e47      	subs	r7, r0, #1
 80112c6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80112ca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80112ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d107      	bne.n	80112e6 <__ieee754_rem_pio2f+0x102>
 80112d6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80112da:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80112de:	2a08      	cmp	r2, #8
 80112e0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80112e4:	dc14      	bgt.n	8011310 <__ieee754_rem_pio2f+0x12c>
 80112e6:	6021      	str	r1, [r4, #0]
 80112e8:	ed94 7a00 	vldr	s14, [r4]
 80112ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 80112f0:	2e00      	cmp	r6, #0
 80112f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80112f6:	ed84 0a01 	vstr	s0, [r4, #4]
 80112fa:	daa6      	bge.n	801124a <__ieee754_rem_pio2f+0x66>
 80112fc:	eeb1 7a47 	vneg.f32	s14, s14
 8011300:	eeb1 0a40 	vneg.f32	s0, s0
 8011304:	ed84 7a00 	vstr	s14, [r4]
 8011308:	ed84 0a01 	vstr	s0, [r4, #4]
 801130c:	4240      	negs	r0, r0
 801130e:	e79c      	b.n	801124a <__ieee754_rem_pio2f+0x66>
 8011310:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801141c <__ieee754_rem_pio2f+0x238>
 8011314:	eef0 6a40 	vmov.f32	s13, s0
 8011318:	eee6 6a25 	vfma.f32	s13, s12, s11
 801131c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011320:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011324:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011424 <__ieee754_rem_pio2f+0x240>
 8011328:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801132c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011330:	ee15 2a90 	vmov	r2, s11
 8011334:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011338:	1a5b      	subs	r3, r3, r1
 801133a:	2b19      	cmp	r3, #25
 801133c:	dc04      	bgt.n	8011348 <__ieee754_rem_pio2f+0x164>
 801133e:	edc4 5a00 	vstr	s11, [r4]
 8011342:	eeb0 0a66 	vmov.f32	s0, s13
 8011346:	e7cf      	b.n	80112e8 <__ieee754_rem_pio2f+0x104>
 8011348:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011434 <__ieee754_rem_pio2f+0x250>
 801134c:	eeb0 0a66 	vmov.f32	s0, s13
 8011350:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011354:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011358:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011438 <__ieee754_rem_pio2f+0x254>
 801135c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011360:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011364:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011368:	ed84 7a00 	vstr	s14, [r4]
 801136c:	e7bc      	b.n	80112e8 <__ieee754_rem_pio2f+0x104>
 801136e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011372:	d306      	bcc.n	8011382 <__ieee754_rem_pio2f+0x19e>
 8011374:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011378:	edc0 7a01 	vstr	s15, [r0, #4]
 801137c:	edc0 7a00 	vstr	s15, [r0]
 8011380:	e73e      	b.n	8011200 <__ieee754_rem_pio2f+0x1c>
 8011382:	15ea      	asrs	r2, r5, #23
 8011384:	3a86      	subs	r2, #134	@ 0x86
 8011386:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801138a:	ee07 3a90 	vmov	s15, r3
 801138e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011392:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801143c <__ieee754_rem_pio2f+0x258>
 8011396:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801139a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801139e:	ed8d 7a03 	vstr	s14, [sp, #12]
 80113a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80113a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80113aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80113ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80113b2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80113b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80113ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80113be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c2:	edcd 7a05 	vstr	s15, [sp, #20]
 80113c6:	d11e      	bne.n	8011406 <__ieee754_rem_pio2f+0x222>
 80113c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80113cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d0:	bf0c      	ite	eq
 80113d2:	2301      	moveq	r3, #1
 80113d4:	2302      	movne	r3, #2
 80113d6:	491a      	ldr	r1, [pc, #104]	@ (8011440 <__ieee754_rem_pio2f+0x25c>)
 80113d8:	9101      	str	r1, [sp, #4]
 80113da:	2102      	movs	r1, #2
 80113dc:	9100      	str	r1, [sp, #0]
 80113de:	a803      	add	r0, sp, #12
 80113e0:	4621      	mov	r1, r4
 80113e2:	f000 f837 	bl	8011454 <__kernel_rem_pio2f>
 80113e6:	2e00      	cmp	r6, #0
 80113e8:	f6bf af2f 	bge.w	801124a <__ieee754_rem_pio2f+0x66>
 80113ec:	edd4 7a00 	vldr	s15, [r4]
 80113f0:	eef1 7a67 	vneg.f32	s15, s15
 80113f4:	edc4 7a00 	vstr	s15, [r4]
 80113f8:	edd4 7a01 	vldr	s15, [r4, #4]
 80113fc:	eef1 7a67 	vneg.f32	s15, s15
 8011400:	edc4 7a01 	vstr	s15, [r4, #4]
 8011404:	e782      	b.n	801130c <__ieee754_rem_pio2f+0x128>
 8011406:	2303      	movs	r3, #3
 8011408:	e7e5      	b.n	80113d6 <__ieee754_rem_pio2f+0x1f2>
 801140a:	bf00      	nop
 801140c:	3f490fd8 	.word	0x3f490fd8
 8011410:	4016cbe3 	.word	0x4016cbe3
 8011414:	3fc90f80 	.word	0x3fc90f80
 8011418:	3fc90fd0 	.word	0x3fc90fd0
 801141c:	37354400 	.word	0x37354400
 8011420:	37354443 	.word	0x37354443
 8011424:	2e85a308 	.word	0x2e85a308
 8011428:	43490f80 	.word	0x43490f80
 801142c:	3f22f984 	.word	0x3f22f984
 8011430:	08011fdc 	.word	0x08011fdc
 8011434:	2e85a300 	.word	0x2e85a300
 8011438:	248d3132 	.word	0x248d3132
 801143c:	43800000 	.word	0x43800000
 8011440:	0801205c 	.word	0x0801205c

08011444 <fabsf>:
 8011444:	ee10 3a10 	vmov	r3, s0
 8011448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801144c:	ee00 3a10 	vmov	s0, r3
 8011450:	4770      	bx	lr
	...

08011454 <__kernel_rem_pio2f>:
 8011454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011458:	ed2d 8b04 	vpush	{d8-d9}
 801145c:	b0d9      	sub	sp, #356	@ 0x164
 801145e:	4690      	mov	r8, r2
 8011460:	9001      	str	r0, [sp, #4]
 8011462:	4ab6      	ldr	r2, [pc, #728]	@ (801173c <__kernel_rem_pio2f+0x2e8>)
 8011464:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8011466:	f118 0f04 	cmn.w	r8, #4
 801146a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801146e:	460f      	mov	r7, r1
 8011470:	f103 3bff 	add.w	fp, r3, #4294967295
 8011474:	db26      	blt.n	80114c4 <__kernel_rem_pio2f+0x70>
 8011476:	f1b8 0203 	subs.w	r2, r8, #3
 801147a:	bf48      	it	mi
 801147c:	f108 0204 	addmi.w	r2, r8, #4
 8011480:	10d2      	asrs	r2, r2, #3
 8011482:	1c55      	adds	r5, r2, #1
 8011484:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011486:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801174c <__kernel_rem_pio2f+0x2f8>
 801148a:	00e8      	lsls	r0, r5, #3
 801148c:	eba2 060b 	sub.w	r6, r2, fp
 8011490:	9002      	str	r0, [sp, #8]
 8011492:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8011496:	eb0a 0c0b 	add.w	ip, sl, fp
 801149a:	ac1c      	add	r4, sp, #112	@ 0x70
 801149c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80114a0:	2000      	movs	r0, #0
 80114a2:	4560      	cmp	r0, ip
 80114a4:	dd10      	ble.n	80114c8 <__kernel_rem_pio2f+0x74>
 80114a6:	a91c      	add	r1, sp, #112	@ 0x70
 80114a8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80114ac:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80114b0:	2600      	movs	r6, #0
 80114b2:	4556      	cmp	r6, sl
 80114b4:	dc24      	bgt.n	8011500 <__kernel_rem_pio2f+0xac>
 80114b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80114ba:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801174c <__kernel_rem_pio2f+0x2f8>
 80114be:	4684      	mov	ip, r0
 80114c0:	2400      	movs	r4, #0
 80114c2:	e016      	b.n	80114f2 <__kernel_rem_pio2f+0x9e>
 80114c4:	2200      	movs	r2, #0
 80114c6:	e7dc      	b.n	8011482 <__kernel_rem_pio2f+0x2e>
 80114c8:	42c6      	cmn	r6, r0
 80114ca:	bf5d      	ittte	pl
 80114cc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80114d0:	ee07 1a90 	vmovpl	s15, r1
 80114d4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80114d8:	eef0 7a47 	vmovmi.f32	s15, s14
 80114dc:	ece4 7a01 	vstmia	r4!, {s15}
 80114e0:	3001      	adds	r0, #1
 80114e2:	e7de      	b.n	80114a2 <__kernel_rem_pio2f+0x4e>
 80114e4:	ecfe 6a01 	vldmia	lr!, {s13}
 80114e8:	ed3c 7a01 	vldmdb	ip!, {s14}
 80114ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80114f0:	3401      	adds	r4, #1
 80114f2:	455c      	cmp	r4, fp
 80114f4:	ddf6      	ble.n	80114e4 <__kernel_rem_pio2f+0x90>
 80114f6:	ece9 7a01 	vstmia	r9!, {s15}
 80114fa:	3601      	adds	r6, #1
 80114fc:	3004      	adds	r0, #4
 80114fe:	e7d8      	b.n	80114b2 <__kernel_rem_pio2f+0x5e>
 8011500:	a908      	add	r1, sp, #32
 8011502:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011506:	9104      	str	r1, [sp, #16]
 8011508:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801150a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8011748 <__kernel_rem_pio2f+0x2f4>
 801150e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8011744 <__kernel_rem_pio2f+0x2f0>
 8011512:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011516:	9203      	str	r2, [sp, #12]
 8011518:	4654      	mov	r4, sl
 801151a:	00a2      	lsls	r2, r4, #2
 801151c:	9205      	str	r2, [sp, #20]
 801151e:	aa58      	add	r2, sp, #352	@ 0x160
 8011520:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011524:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011528:	a944      	add	r1, sp, #272	@ 0x110
 801152a:	aa08      	add	r2, sp, #32
 801152c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011530:	4694      	mov	ip, r2
 8011532:	4626      	mov	r6, r4
 8011534:	2e00      	cmp	r6, #0
 8011536:	dc4c      	bgt.n	80115d2 <__kernel_rem_pio2f+0x17e>
 8011538:	4628      	mov	r0, r5
 801153a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801153e:	f000 f9f1 	bl	8011924 <scalbnf>
 8011542:	eeb0 8a40 	vmov.f32	s16, s0
 8011546:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801154a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801154e:	f000 fa4f 	bl	80119f0 <floorf>
 8011552:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8011556:	eea0 8a67 	vfms.f32	s16, s0, s15
 801155a:	2d00      	cmp	r5, #0
 801155c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011560:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011564:	ee17 9a90 	vmov	r9, s15
 8011568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801156c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011570:	dd41      	ble.n	80115f6 <__kernel_rem_pio2f+0x1a2>
 8011572:	f104 3cff 	add.w	ip, r4, #4294967295
 8011576:	a908      	add	r1, sp, #32
 8011578:	f1c5 0e08 	rsb	lr, r5, #8
 801157c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8011580:	fa46 f00e 	asr.w	r0, r6, lr
 8011584:	4481      	add	r9, r0
 8011586:	fa00 f00e 	lsl.w	r0, r0, lr
 801158a:	1a36      	subs	r6, r6, r0
 801158c:	f1c5 0007 	rsb	r0, r5, #7
 8011590:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8011594:	4106      	asrs	r6, r0
 8011596:	2e00      	cmp	r6, #0
 8011598:	dd3c      	ble.n	8011614 <__kernel_rem_pio2f+0x1c0>
 801159a:	f04f 0e00 	mov.w	lr, #0
 801159e:	f109 0901 	add.w	r9, r9, #1
 80115a2:	4670      	mov	r0, lr
 80115a4:	4574      	cmp	r4, lr
 80115a6:	dc68      	bgt.n	801167a <__kernel_rem_pio2f+0x226>
 80115a8:	2d00      	cmp	r5, #0
 80115aa:	dd03      	ble.n	80115b4 <__kernel_rem_pio2f+0x160>
 80115ac:	2d01      	cmp	r5, #1
 80115ae:	d074      	beq.n	801169a <__kernel_rem_pio2f+0x246>
 80115b0:	2d02      	cmp	r5, #2
 80115b2:	d07d      	beq.n	80116b0 <__kernel_rem_pio2f+0x25c>
 80115b4:	2e02      	cmp	r6, #2
 80115b6:	d12d      	bne.n	8011614 <__kernel_rem_pio2f+0x1c0>
 80115b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80115bc:	ee30 8a48 	vsub.f32	s16, s0, s16
 80115c0:	b340      	cbz	r0, 8011614 <__kernel_rem_pio2f+0x1c0>
 80115c2:	4628      	mov	r0, r5
 80115c4:	9306      	str	r3, [sp, #24]
 80115c6:	f000 f9ad 	bl	8011924 <scalbnf>
 80115ca:	9b06      	ldr	r3, [sp, #24]
 80115cc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80115d0:	e020      	b.n	8011614 <__kernel_rem_pio2f+0x1c0>
 80115d2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80115d6:	3e01      	subs	r6, #1
 80115d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115e0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80115e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80115e8:	ecac 0a01 	vstmia	ip!, {s0}
 80115ec:	ed30 0a01 	vldmdb	r0!, {s0}
 80115f0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80115f4:	e79e      	b.n	8011534 <__kernel_rem_pio2f+0xe0>
 80115f6:	d105      	bne.n	8011604 <__kernel_rem_pio2f+0x1b0>
 80115f8:	1e60      	subs	r0, r4, #1
 80115fa:	a908      	add	r1, sp, #32
 80115fc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8011600:	11f6      	asrs	r6, r6, #7
 8011602:	e7c8      	b.n	8011596 <__kernel_rem_pio2f+0x142>
 8011604:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011608:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011610:	da31      	bge.n	8011676 <__kernel_rem_pio2f+0x222>
 8011612:	2600      	movs	r6, #0
 8011614:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801161c:	f040 8098 	bne.w	8011750 <__kernel_rem_pio2f+0x2fc>
 8011620:	1e60      	subs	r0, r4, #1
 8011622:	2200      	movs	r2, #0
 8011624:	4550      	cmp	r0, sl
 8011626:	da4b      	bge.n	80116c0 <__kernel_rem_pio2f+0x26c>
 8011628:	2a00      	cmp	r2, #0
 801162a:	d065      	beq.n	80116f8 <__kernel_rem_pio2f+0x2a4>
 801162c:	3c01      	subs	r4, #1
 801162e:	ab08      	add	r3, sp, #32
 8011630:	3d08      	subs	r5, #8
 8011632:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d0f8      	beq.n	801162c <__kernel_rem_pio2f+0x1d8>
 801163a:	4628      	mov	r0, r5
 801163c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011640:	f000 f970 	bl	8011924 <scalbnf>
 8011644:	1c63      	adds	r3, r4, #1
 8011646:	aa44      	add	r2, sp, #272	@ 0x110
 8011648:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011748 <__kernel_rem_pio2f+0x2f4>
 801164c:	0099      	lsls	r1, r3, #2
 801164e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011652:	4623      	mov	r3, r4
 8011654:	2b00      	cmp	r3, #0
 8011656:	f280 80a9 	bge.w	80117ac <__kernel_rem_pio2f+0x358>
 801165a:	4623      	mov	r3, r4
 801165c:	2b00      	cmp	r3, #0
 801165e:	f2c0 80c7 	blt.w	80117f0 <__kernel_rem_pio2f+0x39c>
 8011662:	aa44      	add	r2, sp, #272	@ 0x110
 8011664:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011668:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011740 <__kernel_rem_pio2f+0x2ec>
 801166c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801174c <__kernel_rem_pio2f+0x2f8>
 8011670:	2000      	movs	r0, #0
 8011672:	1ae2      	subs	r2, r4, r3
 8011674:	e0b1      	b.n	80117da <__kernel_rem_pio2f+0x386>
 8011676:	2602      	movs	r6, #2
 8011678:	e78f      	b.n	801159a <__kernel_rem_pio2f+0x146>
 801167a:	f852 1b04 	ldr.w	r1, [r2], #4
 801167e:	b948      	cbnz	r0, 8011694 <__kernel_rem_pio2f+0x240>
 8011680:	b121      	cbz	r1, 801168c <__kernel_rem_pio2f+0x238>
 8011682:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8011686:	f842 1c04 	str.w	r1, [r2, #-4]
 801168a:	2101      	movs	r1, #1
 801168c:	f10e 0e01 	add.w	lr, lr, #1
 8011690:	4608      	mov	r0, r1
 8011692:	e787      	b.n	80115a4 <__kernel_rem_pio2f+0x150>
 8011694:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8011698:	e7f5      	b.n	8011686 <__kernel_rem_pio2f+0x232>
 801169a:	f104 3cff 	add.w	ip, r4, #4294967295
 801169e:	aa08      	add	r2, sp, #32
 80116a0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80116a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80116a8:	a908      	add	r1, sp, #32
 80116aa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80116ae:	e781      	b.n	80115b4 <__kernel_rem_pio2f+0x160>
 80116b0:	f104 3cff 	add.w	ip, r4, #4294967295
 80116b4:	aa08      	add	r2, sp, #32
 80116b6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80116ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80116be:	e7f3      	b.n	80116a8 <__kernel_rem_pio2f+0x254>
 80116c0:	a908      	add	r1, sp, #32
 80116c2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80116c6:	3801      	subs	r0, #1
 80116c8:	430a      	orrs	r2, r1
 80116ca:	e7ab      	b.n	8011624 <__kernel_rem_pio2f+0x1d0>
 80116cc:	3201      	adds	r2, #1
 80116ce:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80116d2:	2e00      	cmp	r6, #0
 80116d4:	d0fa      	beq.n	80116cc <__kernel_rem_pio2f+0x278>
 80116d6:	9905      	ldr	r1, [sp, #20]
 80116d8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80116dc:	eb0d 0001 	add.w	r0, sp, r1
 80116e0:	18e6      	adds	r6, r4, r3
 80116e2:	a91c      	add	r1, sp, #112	@ 0x70
 80116e4:	f104 0c01 	add.w	ip, r4, #1
 80116e8:	384c      	subs	r0, #76	@ 0x4c
 80116ea:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80116ee:	4422      	add	r2, r4
 80116f0:	4562      	cmp	r2, ip
 80116f2:	da04      	bge.n	80116fe <__kernel_rem_pio2f+0x2aa>
 80116f4:	4614      	mov	r4, r2
 80116f6:	e710      	b.n	801151a <__kernel_rem_pio2f+0xc6>
 80116f8:	9804      	ldr	r0, [sp, #16]
 80116fa:	2201      	movs	r2, #1
 80116fc:	e7e7      	b.n	80116ce <__kernel_rem_pio2f+0x27a>
 80116fe:	9903      	ldr	r1, [sp, #12]
 8011700:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011704:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011708:	9105      	str	r1, [sp, #20]
 801170a:	ee07 1a90 	vmov	s15, r1
 801170e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011712:	2400      	movs	r4, #0
 8011714:	ece6 7a01 	vstmia	r6!, {s15}
 8011718:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801174c <__kernel_rem_pio2f+0x2f8>
 801171c:	46b1      	mov	r9, r6
 801171e:	455c      	cmp	r4, fp
 8011720:	dd04      	ble.n	801172c <__kernel_rem_pio2f+0x2d8>
 8011722:	ece0 7a01 	vstmia	r0!, {s15}
 8011726:	f10c 0c01 	add.w	ip, ip, #1
 801172a:	e7e1      	b.n	80116f0 <__kernel_rem_pio2f+0x29c>
 801172c:	ecfe 6a01 	vldmia	lr!, {s13}
 8011730:	ed39 7a01 	vldmdb	r9!, {s14}
 8011734:	3401      	adds	r4, #1
 8011736:	eee6 7a87 	vfma.f32	s15, s13, s14
 801173a:	e7f0      	b.n	801171e <__kernel_rem_pio2f+0x2ca>
 801173c:	080123a0 	.word	0x080123a0
 8011740:	08012374 	.word	0x08012374
 8011744:	43800000 	.word	0x43800000
 8011748:	3b800000 	.word	0x3b800000
 801174c:	00000000 	.word	0x00000000
 8011750:	9b02      	ldr	r3, [sp, #8]
 8011752:	eeb0 0a48 	vmov.f32	s0, s16
 8011756:	eba3 0008 	sub.w	r0, r3, r8
 801175a:	f000 f8e3 	bl	8011924 <scalbnf>
 801175e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8011744 <__kernel_rem_pio2f+0x2f0>
 8011762:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801176a:	db19      	blt.n	80117a0 <__kernel_rem_pio2f+0x34c>
 801176c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011748 <__kernel_rem_pio2f+0x2f4>
 8011770:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011774:	aa08      	add	r2, sp, #32
 8011776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801177a:	3508      	adds	r5, #8
 801177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011780:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011788:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801178c:	ee10 3a10 	vmov	r3, s0
 8011790:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011794:	ee17 3a90 	vmov	r3, s15
 8011798:	3401      	adds	r4, #1
 801179a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801179e:	e74c      	b.n	801163a <__kernel_rem_pio2f+0x1e6>
 80117a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80117a4:	aa08      	add	r2, sp, #32
 80117a6:	ee10 3a10 	vmov	r3, s0
 80117aa:	e7f6      	b.n	801179a <__kernel_rem_pio2f+0x346>
 80117ac:	a808      	add	r0, sp, #32
 80117ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80117b2:	9001      	str	r0, [sp, #4]
 80117b4:	ee07 0a90 	vmov	s15, r0
 80117b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117bc:	3b01      	subs	r3, #1
 80117be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80117c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80117c6:	ed62 7a01 	vstmdb	r2!, {s15}
 80117ca:	e743      	b.n	8011654 <__kernel_rem_pio2f+0x200>
 80117cc:	ecfc 6a01 	vldmia	ip!, {s13}
 80117d0:	ecb5 7a01 	vldmia	r5!, {s14}
 80117d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80117d8:	3001      	adds	r0, #1
 80117da:	4550      	cmp	r0, sl
 80117dc:	dc01      	bgt.n	80117e2 <__kernel_rem_pio2f+0x38e>
 80117de:	4290      	cmp	r0, r2
 80117e0:	ddf4      	ble.n	80117cc <__kernel_rem_pio2f+0x378>
 80117e2:	a858      	add	r0, sp, #352	@ 0x160
 80117e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80117e8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80117ec:	3b01      	subs	r3, #1
 80117ee:	e735      	b.n	801165c <__kernel_rem_pio2f+0x208>
 80117f0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80117f2:	2b02      	cmp	r3, #2
 80117f4:	dc09      	bgt.n	801180a <__kernel_rem_pio2f+0x3b6>
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	dc27      	bgt.n	801184a <__kernel_rem_pio2f+0x3f6>
 80117fa:	d040      	beq.n	801187e <__kernel_rem_pio2f+0x42a>
 80117fc:	f009 0007 	and.w	r0, r9, #7
 8011800:	b059      	add	sp, #356	@ 0x164
 8011802:	ecbd 8b04 	vpop	{d8-d9}
 8011806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801180a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801180c:	2b03      	cmp	r3, #3
 801180e:	d1f5      	bne.n	80117fc <__kernel_rem_pio2f+0x3a8>
 8011810:	aa30      	add	r2, sp, #192	@ 0xc0
 8011812:	1f0b      	subs	r3, r1, #4
 8011814:	4413      	add	r3, r2
 8011816:	461a      	mov	r2, r3
 8011818:	4620      	mov	r0, r4
 801181a:	2800      	cmp	r0, #0
 801181c:	dc50      	bgt.n	80118c0 <__kernel_rem_pio2f+0x46c>
 801181e:	4622      	mov	r2, r4
 8011820:	2a01      	cmp	r2, #1
 8011822:	dc5d      	bgt.n	80118e0 <__kernel_rem_pio2f+0x48c>
 8011824:	ab30      	add	r3, sp, #192	@ 0xc0
 8011826:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801174c <__kernel_rem_pio2f+0x2f8>
 801182a:	440b      	add	r3, r1
 801182c:	2c01      	cmp	r4, #1
 801182e:	dc67      	bgt.n	8011900 <__kernel_rem_pio2f+0x4ac>
 8011830:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011834:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011838:	2e00      	cmp	r6, #0
 801183a:	d167      	bne.n	801190c <__kernel_rem_pio2f+0x4b8>
 801183c:	edc7 6a00 	vstr	s13, [r7]
 8011840:	ed87 7a01 	vstr	s14, [r7, #4]
 8011844:	edc7 7a02 	vstr	s15, [r7, #8]
 8011848:	e7d8      	b.n	80117fc <__kernel_rem_pio2f+0x3a8>
 801184a:	ab30      	add	r3, sp, #192	@ 0xc0
 801184c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801174c <__kernel_rem_pio2f+0x2f8>
 8011850:	440b      	add	r3, r1
 8011852:	4622      	mov	r2, r4
 8011854:	2a00      	cmp	r2, #0
 8011856:	da24      	bge.n	80118a2 <__kernel_rem_pio2f+0x44e>
 8011858:	b34e      	cbz	r6, 80118ae <__kernel_rem_pio2f+0x45a>
 801185a:	eef1 7a47 	vneg.f32	s15, s14
 801185e:	edc7 7a00 	vstr	s15, [r7]
 8011862:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8011866:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801186a:	aa31      	add	r2, sp, #196	@ 0xc4
 801186c:	2301      	movs	r3, #1
 801186e:	429c      	cmp	r4, r3
 8011870:	da20      	bge.n	80118b4 <__kernel_rem_pio2f+0x460>
 8011872:	b10e      	cbz	r6, 8011878 <__kernel_rem_pio2f+0x424>
 8011874:	eef1 7a67 	vneg.f32	s15, s15
 8011878:	edc7 7a01 	vstr	s15, [r7, #4]
 801187c:	e7be      	b.n	80117fc <__kernel_rem_pio2f+0x3a8>
 801187e:	ab30      	add	r3, sp, #192	@ 0xc0
 8011880:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801174c <__kernel_rem_pio2f+0x2f8>
 8011884:	440b      	add	r3, r1
 8011886:	2c00      	cmp	r4, #0
 8011888:	da05      	bge.n	8011896 <__kernel_rem_pio2f+0x442>
 801188a:	b10e      	cbz	r6, 8011890 <__kernel_rem_pio2f+0x43c>
 801188c:	eef1 7a67 	vneg.f32	s15, s15
 8011890:	edc7 7a00 	vstr	s15, [r7]
 8011894:	e7b2      	b.n	80117fc <__kernel_rem_pio2f+0x3a8>
 8011896:	ed33 7a01 	vldmdb	r3!, {s14}
 801189a:	3c01      	subs	r4, #1
 801189c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80118a0:	e7f1      	b.n	8011886 <__kernel_rem_pio2f+0x432>
 80118a2:	ed73 7a01 	vldmdb	r3!, {s15}
 80118a6:	3a01      	subs	r2, #1
 80118a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80118ac:	e7d2      	b.n	8011854 <__kernel_rem_pio2f+0x400>
 80118ae:	eef0 7a47 	vmov.f32	s15, s14
 80118b2:	e7d4      	b.n	801185e <__kernel_rem_pio2f+0x40a>
 80118b4:	ecb2 7a01 	vldmia	r2!, {s14}
 80118b8:	3301      	adds	r3, #1
 80118ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80118be:	e7d6      	b.n	801186e <__kernel_rem_pio2f+0x41a>
 80118c0:	ed72 7a01 	vldmdb	r2!, {s15}
 80118c4:	edd2 6a01 	vldr	s13, [r2, #4]
 80118c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80118cc:	3801      	subs	r0, #1
 80118ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118d2:	ed82 7a00 	vstr	s14, [r2]
 80118d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80118da:	edc2 7a01 	vstr	s15, [r2, #4]
 80118de:	e79c      	b.n	801181a <__kernel_rem_pio2f+0x3c6>
 80118e0:	ed73 7a01 	vldmdb	r3!, {s15}
 80118e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80118e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80118ec:	3a01      	subs	r2, #1
 80118ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118f2:	ed83 7a00 	vstr	s14, [r3]
 80118f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80118fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80118fe:	e78f      	b.n	8011820 <__kernel_rem_pio2f+0x3cc>
 8011900:	ed33 7a01 	vldmdb	r3!, {s14}
 8011904:	3c01      	subs	r4, #1
 8011906:	ee77 7a87 	vadd.f32	s15, s15, s14
 801190a:	e78f      	b.n	801182c <__kernel_rem_pio2f+0x3d8>
 801190c:	eef1 6a66 	vneg.f32	s13, s13
 8011910:	eeb1 7a47 	vneg.f32	s14, s14
 8011914:	edc7 6a00 	vstr	s13, [r7]
 8011918:	ed87 7a01 	vstr	s14, [r7, #4]
 801191c:	eef1 7a67 	vneg.f32	s15, s15
 8011920:	e790      	b.n	8011844 <__kernel_rem_pio2f+0x3f0>
 8011922:	bf00      	nop

08011924 <scalbnf>:
 8011924:	ee10 3a10 	vmov	r3, s0
 8011928:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801192c:	d02b      	beq.n	8011986 <scalbnf+0x62>
 801192e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011932:	d302      	bcc.n	801193a <scalbnf+0x16>
 8011934:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011938:	4770      	bx	lr
 801193a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801193e:	d123      	bne.n	8011988 <scalbnf+0x64>
 8011940:	4b24      	ldr	r3, [pc, #144]	@ (80119d4 <scalbnf+0xb0>)
 8011942:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80119d8 <scalbnf+0xb4>
 8011946:	4298      	cmp	r0, r3
 8011948:	ee20 0a27 	vmul.f32	s0, s0, s15
 801194c:	db17      	blt.n	801197e <scalbnf+0x5a>
 801194e:	ee10 3a10 	vmov	r3, s0
 8011952:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011956:	3a19      	subs	r2, #25
 8011958:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801195c:	4288      	cmp	r0, r1
 801195e:	dd15      	ble.n	801198c <scalbnf+0x68>
 8011960:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80119dc <scalbnf+0xb8>
 8011964:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80119e0 <scalbnf+0xbc>
 8011968:	ee10 3a10 	vmov	r3, s0
 801196c:	eeb0 7a67 	vmov.f32	s14, s15
 8011970:	2b00      	cmp	r3, #0
 8011972:	bfb8      	it	lt
 8011974:	eef0 7a66 	vmovlt.f32	s15, s13
 8011978:	ee27 0a87 	vmul.f32	s0, s15, s14
 801197c:	4770      	bx	lr
 801197e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80119e4 <scalbnf+0xc0>
 8011982:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011986:	4770      	bx	lr
 8011988:	0dd2      	lsrs	r2, r2, #23
 801198a:	e7e5      	b.n	8011958 <scalbnf+0x34>
 801198c:	4410      	add	r0, r2
 801198e:	28fe      	cmp	r0, #254	@ 0xfe
 8011990:	dce6      	bgt.n	8011960 <scalbnf+0x3c>
 8011992:	2800      	cmp	r0, #0
 8011994:	dd06      	ble.n	80119a4 <scalbnf+0x80>
 8011996:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801199a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801199e:	ee00 3a10 	vmov	s0, r3
 80119a2:	4770      	bx	lr
 80119a4:	f110 0f16 	cmn.w	r0, #22
 80119a8:	da09      	bge.n	80119be <scalbnf+0x9a>
 80119aa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80119e4 <scalbnf+0xc0>
 80119ae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80119e8 <scalbnf+0xc4>
 80119b2:	ee10 3a10 	vmov	r3, s0
 80119b6:	eeb0 7a67 	vmov.f32	s14, s15
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	e7d9      	b.n	8011972 <scalbnf+0x4e>
 80119be:	3019      	adds	r0, #25
 80119c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80119c4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80119c8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80119ec <scalbnf+0xc8>
 80119cc:	ee07 3a90 	vmov	s15, r3
 80119d0:	e7d7      	b.n	8011982 <scalbnf+0x5e>
 80119d2:	bf00      	nop
 80119d4:	ffff3cb0 	.word	0xffff3cb0
 80119d8:	4c000000 	.word	0x4c000000
 80119dc:	7149f2ca 	.word	0x7149f2ca
 80119e0:	f149f2ca 	.word	0xf149f2ca
 80119e4:	0da24260 	.word	0x0da24260
 80119e8:	8da24260 	.word	0x8da24260
 80119ec:	33000000 	.word	0x33000000

080119f0 <floorf>:
 80119f0:	ee10 3a10 	vmov	r3, s0
 80119f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80119f8:	3a7f      	subs	r2, #127	@ 0x7f
 80119fa:	2a16      	cmp	r2, #22
 80119fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011a00:	dc2b      	bgt.n	8011a5a <floorf+0x6a>
 8011a02:	2a00      	cmp	r2, #0
 8011a04:	da12      	bge.n	8011a2c <floorf+0x3c>
 8011a06:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011a6c <floorf+0x7c>
 8011a0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011a0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a16:	dd06      	ble.n	8011a26 <floorf+0x36>
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	da24      	bge.n	8011a66 <floorf+0x76>
 8011a1c:	2900      	cmp	r1, #0
 8011a1e:	4b14      	ldr	r3, [pc, #80]	@ (8011a70 <floorf+0x80>)
 8011a20:	bf08      	it	eq
 8011a22:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011a26:	ee00 3a10 	vmov	s0, r3
 8011a2a:	4770      	bx	lr
 8011a2c:	4911      	ldr	r1, [pc, #68]	@ (8011a74 <floorf+0x84>)
 8011a2e:	4111      	asrs	r1, r2
 8011a30:	420b      	tst	r3, r1
 8011a32:	d0fa      	beq.n	8011a2a <floorf+0x3a>
 8011a34:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011a6c <floorf+0x7c>
 8011a38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011a3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a44:	ddef      	ble.n	8011a26 <floorf+0x36>
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	bfbe      	ittt	lt
 8011a4a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8011a4e:	fa40 f202 	asrlt.w	r2, r0, r2
 8011a52:	189b      	addlt	r3, r3, r2
 8011a54:	ea23 0301 	bic.w	r3, r3, r1
 8011a58:	e7e5      	b.n	8011a26 <floorf+0x36>
 8011a5a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011a5e:	d3e4      	bcc.n	8011a2a <floorf+0x3a>
 8011a60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011a64:	4770      	bx	lr
 8011a66:	2300      	movs	r3, #0
 8011a68:	e7dd      	b.n	8011a26 <floorf+0x36>
 8011a6a:	bf00      	nop
 8011a6c:	7149f2ca 	.word	0x7149f2ca
 8011a70:	bf800000 	.word	0xbf800000
 8011a74:	007fffff 	.word	0x007fffff

08011a78 <_init>:
 8011a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a7a:	bf00      	nop
 8011a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a7e:	bc08      	pop	{r3}
 8011a80:	469e      	mov	lr, r3
 8011a82:	4770      	bx	lr

08011a84 <_fini>:
 8011a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a86:	bf00      	nop
 8011a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a8a:	bc08      	pop	{r3}
 8011a8c:	469e      	mov	lr, r3
 8011a8e:	4770      	bx	lr
