
code_propre_cansat_Freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001478c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001214  08014970  08014970  00015970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b84  08015b84  00017208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015b84  08015b84  00016b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b8c  08015b8c  00017208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b8c  08015b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015b90  08015b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08015b94  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000387c  20000208  08015d9c  00017208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003a84  08015d9c  00017a84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000303da  00000000  00000000  00017238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c77  00000000  00000000  00047612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024c8  00000000  00000000  0004e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c48  00000000  00000000  00050758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283d7  00000000  00000000  000523a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030fb3  00000000  00000000  0007a777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed834  00000000  00000000  000ab72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00198f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b360  00000000  00000000  00198fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001a4304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014954 	.word	0x08014954

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	08014954 	.word	0x08014954

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Init_HighPerf_Mode_6_axis>:
    }
}

// Fonction d'initialisation du capteur en mode haute performance
void Init_HighPerf_Mode_6_axis(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800107a:	2354      	movs	r3, #84	@ 0x54
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2210      	movs	r2, #16
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4838      	ldr	r0, [pc, #224]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f005 ff42 	bl	8006f1c <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 8001098:	234c      	movs	r3, #76	@ 0x4c
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2211      	movs	r2, #17
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4830      	ldr	r0, [pc, #192]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f005 ff33 	bl	8006f1c <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2212      	movs	r2, #18
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	4829      	ldr	r0, [pc, #164]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f005 ff24 	bl	8006f1c <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2215      	movs	r2, #21
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4821      	ldr	r0, [pc, #132]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f005 ff15 	bl	8006f1c <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2216      	movs	r2, #22
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	481a      	ldr	r0, [pc, #104]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f005 ff06 	bl	8006f1c <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 8001110:	2300      	movs	r3, #0
 8001112:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c3, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2217      	movs	r2, #23
 8001126:	21d6      	movs	r1, #214	@ 0xd6
 8001128:	4812      	ldr	r0, [pc, #72]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 800112a:	f005 fef7 	bl	8006f1c <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c3, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	221e      	movs	r2, #30
 8001144:	21d6      	movs	r1, #214	@ 0xd6
 8001146:	480b      	ldr	r0, [pc, #44]	@ (8001174 <Init_HighPerf_Mode_6_axis+0x104>)
 8001148:	f005 fffc 	bl	8007144 <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes. q\r\n");
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <Init_HighPerf_Mode_6_axis+0x108>)
 8001158:	f00e fb3c 	bl	800f7d4 <puts>
        }
        if (status & 0x02) {
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <Init_HighPerf_Mode_6_axis+0x10c>)
 8001168:	f00e fb34 	bl	800f7d4 <puts>
        }

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000390 	.word	0x20000390
 8001178:	080149ac 	.word	0x080149ac
 800117c:	080149e0 	.word	0x080149e0

08001180 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	if (GNSS->uartWorkingBuffer[0] == 0xB5 && GNSS->uartWorkingBuffer[1] == 0x62) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7a1b      	ldrb	r3, [r3, #8]
 800118c:	2bb5      	cmp	r3, #181	@ 0xb5
 800118e:	f040 81a6 	bne.w	80014de <GNSS_ParsePVTData+0x35e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7a5b      	ldrb	r3, [r3, #9]
 8001196:	2b62      	cmp	r3, #98	@ 0x62
 8001198:	f040 81a1 	bne.w	80014de <GNSS_ParsePVTData+0x35e>
	uShort.bytes[0] = GNSS->uartWorkingBuffer[10];
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7c9a      	ldrb	r2, [r3, #18]
 80011a0:	4b9f      	ldr	r3, [pc, #636]	@ (8001420 <GNSS_ParsePVTData+0x2a0>)
 80011a2:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS->uartWorkingBuffer[10];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7c9a      	ldrb	r2, [r3, #18]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	uShort.bytes[1] = GNSS->uartWorkingBuffer[11];
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7cda      	ldrb	r2, [r3, #19]
 80011b2:	4b9b      	ldr	r3, [pc, #620]	@ (8001420 <GNSS_ParsePVTData+0x2a0>)
 80011b4:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS->uartWorkingBuffer[11];
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7cda      	ldrb	r2, [r3, #19]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	GNSS->year = uShort.uShort;
 80011c0:	4b97      	ldr	r3, [pc, #604]	@ (8001420 <GNSS_ParsePVTData+0x2a0>)
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
	GNSS->month = GNSS->uartWorkingBuffer[12];
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7d1a      	ldrb	r2, [r3, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	GNSS->day = GNSS->uartWorkingBuffer[13];
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7d5a      	ldrb	r2, [r3, #21]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	GNSS->hour = GNSS->uartWorkingBuffer[14];
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7d9a      	ldrb	r2, [r3, #22]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	GNSS->min = GNSS->uartWorkingBuffer[15];
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7dda      	ldrb	r2, [r3, #23]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	GNSS->sec = GNSS->uartWorkingBuffer[16];
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7e1a      	ldrb	r2, [r3, #24]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	GNSS->fixType = GNSS->uartWorkingBuffer[26];
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	GNSS->numSV = GNSS->uartWorkingBuffer[29];
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

	for (int var = 0; var < 4; ++var) {
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
 8001218:	e017      	b.n	800124a <GNSS_ParsePVTData+0xca>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 30];
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	331e      	adds	r3, #30
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	7a19      	ldrb	r1, [r3, #8]
 8001224:	4a7f      	ldr	r2, [pc, #508]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	4413      	add	r3, r2
 800122a:	460a      	mov	r2, r1
 800122c:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS->uartWorkingBuffer[var + 30];
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	331e      	adds	r3, #30
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	7a19      	ldrb	r1, [r3, #8]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	4413      	add	r3, r2
 800123e:	3380      	adds	r3, #128	@ 0x80
 8001240:	460a      	mov	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	3301      	adds	r3, #1
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	2b03      	cmp	r3, #3
 800124e:	dde4      	ble.n	800121a <GNSS_ParsePVTData+0x9a>
	}
	GNSS->lon = iLong.iLong;
 8001250:	4b74      	ldr	r3, [pc, #464]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	67da      	str	r2, [r3, #124]	@ 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8001258:	4b72      	ldr	r3, [pc, #456]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001264:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001428 <GNSS_ParsePVTData+0x2a8>
 8001268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

	for (int var = 0; var < 4; ++var) {
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	e017      	b.n	80012a8 <GNSS_ParsePVTData+0x128>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 34];
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	3322      	adds	r3, #34	@ 0x22
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	4413      	add	r3, r2
 8001280:	7a19      	ldrb	r1, [r3, #8]
 8001282:	4a68      	ldr	r2, [pc, #416]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	4413      	add	r3, r2
 8001288:	460a      	mov	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS->uartWorkingBuffer[var + 34];
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	3322      	adds	r3, #34	@ 0x22
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	7a19      	ldrb	r1, [r3, #8]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	4413      	add	r3, r2
 800129c:	3388      	adds	r3, #136	@ 0x88
 800129e:	460a      	mov	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	3301      	adds	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	dde4      	ble.n	8001278 <GNSS_ParsePVTData+0xf8>
	}
	GNSS->lat = iLong.iLong;
 80012ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80012b8:	4b5a      	ldr	r3, [pc, #360]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001428 <GNSS_ParsePVTData+0x2a8>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90

	for (int var = 0; var < 4; ++var) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e00c      	b.n	80012f2 <GNSS_ParsePVTData+0x172>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 38];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	3326      	adds	r3, #38	@ 0x26
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	7a19      	ldrb	r1, [r3, #8]
 80012e2:	4a50      	ldr	r2, [pc, #320]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	4413      	add	r3, r2
 80012e8:	460a      	mov	r2, r1
 80012ea:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	3301      	adds	r3, #1
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	ddef      	ble.n	80012d8 <GNSS_ParsePVTData+0x158>
	}
	GNSS->height = iLong.iLong;
 80012f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	GNSS->fheight=(float)GNSS->height/1000.0;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001308:	ee07 3a90 	vmov	s15, r3
 800130c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001310:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800142c <GNSS_ParsePVTData+0x2ac>
 8001314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edc3 7a26 	vstr	s15, [r3, #152]	@ 0x98


	for (int var = 0; var < 4; ++var) {
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	e017      	b.n	8001354 <GNSS_ParsePVTData+0x1d4>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 42];
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	332a      	adds	r3, #42	@ 0x2a
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	7a19      	ldrb	r1, [r3, #8]
 800132e:	4a3d      	ldr	r2, [pc, #244]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	4413      	add	r3, r2
 8001334:	460a      	mov	r2, r1
 8001336:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS->uartWorkingBuffer[var + 42];
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	332a      	adds	r3, #42	@ 0x2a
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	7a19      	ldrb	r1, [r3, #8]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	4413      	add	r3, r2
 8001348:	33a0      	adds	r3, #160	@ 0xa0
 800134a:	460a      	mov	r2, r1
 800134c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	3301      	adds	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2b03      	cmp	r3, #3
 8001358:	dde4      	ble.n	8001324 <GNSS_ParsePVTData+0x1a4>
	}
	GNSS->hMSL = iLong.iLong;
 800135a:	4b32      	ldr	r3, [pc, #200]	@ (8001424 <GNSS_ParsePVTData+0x2a4>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	GNSS->fhMSL=(float)GNSS->hMSL/1000.0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001372:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 800142c <GNSS_ParsePVTData+0x2ac>
 8001376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4

	for (int var = 0; var < 4; ++var) {
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e00c      	b.n	80013a0 <GNSS_ParsePVTData+0x220>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 46];
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	332e      	adds	r3, #46	@ 0x2e
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	7a19      	ldrb	r1, [r3, #8]
 8001390:	4a27      	ldr	r2, [pc, #156]	@ (8001430 <GNSS_ParsePVTData+0x2b0>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4413      	add	r3, r2
 8001396:	460a      	mov	r2, r1
 8001398:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	ddef      	ble.n	8001386 <GNSS_ParsePVTData+0x206>
	}
	GNSS->hAcc = uLong.uLong;
 80013a6:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <GNSS_ParsePVTData+0x2b0>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	GNSS->fhACC=(float)GNSS->hAcc/1000.0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013be:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800142c <GNSS_ParsePVTData+0x2ac>
 80013c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac

	for (int var = 0; var < 4; ++var) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	e00c      	b.n	80013ec <GNSS_ParsePVTData+0x26c>
		uLong.bytes[var] = GNSS->uartWorkingBuffer[var + 50];
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	3332      	adds	r3, #50	@ 0x32
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	7a19      	ldrb	r1, [r3, #8]
 80013dc:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <GNSS_ParsePVTData+0x2b0>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4413      	add	r3, r2
 80013e2:	460a      	mov	r2, r1
 80013e4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	3301      	adds	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	ddef      	ble.n	80013d2 <GNSS_ParsePVTData+0x252>
	}
	GNSS->vAcc = uLong.uLong;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <GNSS_ParsePVTData+0x2b0>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	GNSS->fvACC=(float)GNSS->vAcc/1000.0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800140a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800142c <GNSS_ParsePVTData+0x2ac>
 800140e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4

	for (int var = 0; var < 4; ++var) {
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e022      	b.n	8001464 <GNSS_ParsePVTData+0x2e4>
 800141e:	bf00      	nop
 8001420:	20000224 	.word	0x20000224
 8001424:	2000022c 	.word	0x2000022c
 8001428:	4b189680 	.word	0x4b189680
 800142c:	447a0000 	.word	0x447a0000
 8001430:	20000228 	.word	0x20000228
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 66];
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3342      	adds	r3, #66	@ 0x42
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	7a19      	ldrb	r1, [r3, #8]
 800143e:	4a2c      	ldr	r2, [pc, #176]	@ (80014f0 <GNSS_ParsePVTData+0x370>)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	460a      	mov	r2, r1
 8001446:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS->uartWorkingBuffer[var + 66];
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3342      	adds	r3, #66	@ 0x42
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	7a19      	ldrb	r1, [r3, #8]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	33bc      	adds	r3, #188	@ 0xbc
 800145a:	460a      	mov	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3301      	adds	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b03      	cmp	r3, #3
 8001468:	dde4      	ble.n	8001434 <GNSS_ParsePVTData+0x2b4>
	}
	GNSS->gSpeed = iLong.iLong;
 800146a:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <GNSS_ParsePVTData+0x370>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	GNSS->fgSpeed=(float)GNSS->gSpeed/1000.0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001482:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014f4 <GNSS_ParsePVTData+0x374>
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

	for (int var = 0; var < 4; ++var) {
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	e00c      	b.n	80014b0 <GNSS_ParsePVTData+0x330>
		iLong.bytes[var] = GNSS->uartWorkingBuffer[var + 70];
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3346      	adds	r3, #70	@ 0x46
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	7a19      	ldrb	r1, [r3, #8]
 80014a0:	4a13      	ldr	r2, [pc, #76]	@ (80014f0 <GNSS_ParsePVTData+0x370>)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	4413      	add	r3, r2
 80014a6:	460a      	mov	r2, r1
 80014a8:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	ddef      	ble.n	8001496 <GNSS_ParsePVTData+0x316>
	}
	GNSS->headMot = iLong.iLong * 1e-5;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <GNSS_ParsePVTData+0x370>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f85a 	bl	8000574 <__aeabi_i2d>
 80014c0:	a309      	add	r3, pc, #36	@ (adr r3, 80014e8 <GNSS_ParsePVTData+0x368>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f8bf 	bl	8000648 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb69 	bl	8000ba8 <__aeabi_d2iz>
 80014d6:	4602      	mov	r2, r0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	}
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	@ 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	88e368f1 	.word	0x88e368f1
 80014ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80014f0:	2000022c 	.word	0x2000022c
 80014f4:	447a0000 	.word	0x447a0000

080014f8 <distancecalc>:
//		manual.
	return 0;
}


float distancecalc(float lat1, float lat2, float long1, float long2,float alt1, float alt2){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	ed2d 8b02 	vpush	{d8}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	ed87 0a05 	vstr	s0, [r7, #20]
 8001506:	edc7 0a04 	vstr	s1, [r7, #16]
 800150a:	ed87 1a03 	vstr	s2, [r7, #12]
 800150e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001512:	ed87 2a01 	vstr	s4, [r7, #4]
 8001516:	edc7 2a00 	vstr	s5, [r7]
	float distanceplat=0.0;
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
	float distance=0.0;
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
	distanceplat=(float) 6371000.0*acosf(fminf(1.0,sinf(lat1*(M_PI/180.0))*sinf(lat2*(M_PI/180.0))+cosf(lat1*(M_PI/180.0))*cosf(lat2*(M_PI/180.0))*cosf((long2-long1)*(M_PI/180.0))));
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff f836 	bl	8000598 <__aeabi_f2d>
 800152c:	a357      	add	r3, pc, #348	@ (adr r3, 800168c <distancecalc+0x194>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f889 	bl	8000648 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb7b 	bl	8000c38 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	ee00 3a10 	vmov	s0, r3
 8001548:	f011 fef2 	bl	8013330 <sinf>
 800154c:	eeb0 8a40 	vmov.f32	s16, s0
 8001550:	6938      	ldr	r0, [r7, #16]
 8001552:	f7ff f821 	bl	8000598 <__aeabi_f2d>
 8001556:	a34d      	add	r3, pc, #308	@ (adr r3, 800168c <distancecalc+0x194>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f874 	bl	8000648 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fb66 	bl	8000c38 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	ee00 3a10 	vmov	s0, r3
 8001572:	f011 fedd 	bl	8013330 <sinf>
 8001576:	eef0 7a40 	vmov.f32	s15, s0
 800157a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff f80a 	bl	8000598 <__aeabi_f2d>
 8001584:	a341      	add	r3, pc, #260	@ (adr r3, 800168c <distancecalc+0x194>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	ee00 3a10 	vmov	s0, r3
 80015a0:	f011 fe7a 	bl	8013298 <cosf>
 80015a4:	eef0 8a40 	vmov.f32	s17, s0
 80015a8:	6938      	ldr	r0, [r7, #16]
 80015aa:	f7fe fff5 	bl	8000598 <__aeabi_f2d>
 80015ae:	a337      	add	r3, pc, #220	@ (adr r3, 800168c <distancecalc+0x194>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f848 	bl	8000648 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb3a 	bl	8000c38 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	ee00 3a10 	vmov	s0, r3
 80015ca:	f011 fe65 	bl	8013298 <cosf>
 80015ce:	eef0 7a40 	vmov.f32	s15, s0
 80015d2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80015d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80015da:	edd7 7a03 	vldr	s15, [r7, #12]
 80015de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e2:	ee17 0a90 	vmov	r0, s15
 80015e6:	f7fe ffd7 	bl	8000598 <__aeabi_f2d>
 80015ea:	a328      	add	r3, pc, #160	@ (adr r3, 800168c <distancecalc+0x194>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f82a 	bl	8000648 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fb1c 	bl	8000c38 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	ee00 3a10 	vmov	s0, r3
 8001606:	f011 fe47 	bl	8013298 <cosf>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001612:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001616:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	f011 fed7 	bl	80133d0 <fminf>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	f011 fd93 	bl	8013154 <acosf>
 800162e:	eef0 7a40 	vmov.f32	s15, s0
 8001632:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001688 <distancecalc+0x190>
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	edc7 7a07 	vstr	s15, [r7, #28]

	distance=sqrtf(((alt2-alt1)*(alt2-alt1))+(distanceplat*distanceplat));
 800163e:	ed97 7a00 	vldr	s14, [r7]
 8001642:	edd7 7a01 	vldr	s15, [r7, #4]
 8001646:	ee37 7a67 	vsub.f32	s14, s14, s15
 800164a:	edd7 6a00 	vldr	s13, [r7]
 800164e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001652:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165a:	edd7 7a07 	vldr	s15, [r7, #28]
 800165e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	f011 fdf7 	bl	801325c <sqrtf>
 800166e:	ed87 0a06 	vstr	s0, [r7, #24]
	return distance;
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	ee07 3a90 	vmov	s15, r3
}
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	ecbd 8b02 	vpop	{d8}
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	4ac26d70 	.word	0x4ac26d70
 800168c:	a2529d39 	.word	0xa2529d39
 8001690:	3f91df46 	.word	0x3f91df46

08001694 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	@ 0x30
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800169a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2220      	movs	r2, #32
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00e f9c9 	bl	800fa44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016b2:	4b40      	ldr	r3, [pc, #256]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016ba:	4b3e      	ldr	r3, [pc, #248]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016c2:	4b3c      	ldr	r3, [pc, #240]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016c8:	4b3a      	ldr	r3, [pc, #232]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016ce:	4b39      	ldr	r3, [pc, #228]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016d4:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016da:	4b36      	ldr	r3, [pc, #216]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016dc:	2208      	movs	r2, #8
 80016de:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016e0:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016e6:	4b33      	ldr	r3, [pc, #204]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80016ec:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016ee:	2203      	movs	r2, #3
 80016f0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f2:	4b30      	ldr	r3, [pc, #192]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016fa:	4b2e      	ldr	r3, [pc, #184]	@ (80017b4 <MX_ADC1_Init+0x120>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001700:	4b2c      	ldr	r3, [pc, #176]	@ (80017b4 <MX_ADC1_Init+0x120>)
 8001702:	2200      	movs	r2, #0
 8001704:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001706:	4b2b      	ldr	r3, [pc, #172]	@ (80017b4 <MX_ADC1_Init+0x120>)
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800170e:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <MX_ADC1_Init+0x120>)
 8001710:	2200      	movs	r2, #0
 8001712:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001714:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <MX_ADC1_Init+0x120>)
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800171c:	4825      	ldr	r0, [pc, #148]	@ (80017b4 <MX_ADC1_Init+0x120>)
 800171e:	f003 fae9 	bl	8004cf4 <HAL_ADC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001728:	f001 fa90 	bl	8002c4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	481f      	ldr	r0, [pc, #124]	@ (80017b4 <MX_ADC1_Init+0x120>)
 8001738:	f004 fcae 	bl	8006098 <HAL_ADCEx_MultiModeConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001742:	f001 fa83 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001746:	4b1c      	ldr	r3, [pc, #112]	@ (80017b8 <MX_ADC1_Init+0x124>)
 8001748:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800174a:	2306      	movs	r3, #6
 800174c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800174e:	2307      	movs	r3, #7
 8001750:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001752:	237f      	movs	r3, #127	@ 0x7f
 8001754:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001756:	2304      	movs	r3, #4
 8001758:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4814      	ldr	r0, [pc, #80]	@ (80017b4 <MX_ADC1_Init+0x120>)
 8001764:	f003 ff36 	bl	80055d4 <HAL_ADC_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800176e:	f001 fa6d 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001772:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <MX_ADC1_Init+0x128>)
 8001774:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001776:	230c      	movs	r3, #12
 8001778:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	4619      	mov	r1, r3
 800177e:	480d      	ldr	r0, [pc, #52]	@ (80017b4 <MX_ADC1_Init+0x120>)
 8001780:	f003 ff28 	bl	80055d4 <HAL_ADC_ConfigChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800178a:	f001 fa5f 	bl	8002c4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_ADC1_Init+0x12c>)
 8001790:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001792:	2312      	movs	r3, #18
 8001794:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <MX_ADC1_Init+0x120>)
 800179c:	f003 ff1a 	bl	80055d4 <HAL_ADC_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80017a6:	f001 fa51 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	@ 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000230 	.word	0x20000230
 80017b8:	cb840000 	.word	0xcb840000
 80017bc:	c3210000 	.word	0xc3210000
 80017c0:	0c900008 	.word	0x0c900008

080017c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09a      	sub	sp, #104	@ 0x68
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2244      	movs	r2, #68	@ 0x44
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00e f92d 	bl	800fa44 <memset>
  if(adcHandle->Instance==ADC1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f2:	d167      	bne.n	80018c4 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80017fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4618      	mov	r0, r3
 8001806:	f006 ff21 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001810:	f001 fa1c 	bl	8002c4c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001814:	4b2d      	ldr	r3, [pc, #180]	@ (80018cc <HAL_ADC_MspInit+0x108>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001818:	4a2c      	ldr	r2, [pc, #176]	@ (80018cc <HAL_ADC_MspInit+0x108>)
 800181a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800181e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001820:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <HAL_ADC_MspInit+0x108>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <HAL_ADC_MspInit+0x108>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001830:	4a26      	ldr	r2, [pc, #152]	@ (80018cc <HAL_ADC_MspInit+0x108>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001838:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <HAL_ADC_MspInit+0x108>)
 800183a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001844:	2304      	movs	r3, #4
 8001846:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001848:	2303      	movs	r3, #3
 800184a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001854:	4619      	mov	r1, r3
 8001856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800185a:	f005 f8df 	bl	8006a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800185e:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 8001860:	4a1c      	ldr	r2, [pc, #112]	@ (80018d4 <HAL_ADC_MspInit+0x110>)
 8001862:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 8001866:	2205      	movs	r2, #5
 8001868:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001870:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001876:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 8001878:	2280      	movs	r2, #128	@ 0x80
 800187a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 800187e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001882:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 8001886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800188a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800188c:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 800188e:	2220      	movs	r2, #32
 8001890:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001898:	480d      	ldr	r0, [pc, #52]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 800189a:	f004 fd81 	bl	80063a0 <HAL_DMA_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80018a4:	f001 f9d2 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a09      	ldr	r2, [pc, #36]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 80018ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_ADC_MspInit+0x10c>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2105      	movs	r1, #5
 80018b8:	2012      	movs	r0, #18
 80018ba:	f004 fd49 	bl	8006350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80018be:	2012      	movs	r0, #18
 80018c0:	f004 fd60 	bl	8006384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018c4:	bf00      	nop
 80018c6:	3768      	adds	r7, #104	@ 0x68
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	2000029c 	.word	0x2000029c
 80018d4:	4002001c 	.word	0x4002001c

080018d8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80018d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ea:	f040 8097 	bne.w	8001a1c <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80018ee:	4b52      	ldr	r3, [pc, #328]	@ (8001a38 <HAL_ADC_ConvCpltCallback+0x160>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe3e 	bl	8000574 <__aeabi_i2d>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	a14a      	add	r1, pc, #296	@ (adr r1, 8001a28 <HAL_ADC_ConvCpltCallback+0x150>)
 80018fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001902:	f7fe ffcb 	bl	800089c <__aeabi_ddiv>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f7ff f993 	bl	8000c38 <__aeabi_d2f>
 8001912:	4603      	mov	r3, r0
 8001914:	4a49      	ldr	r2, [pc, #292]	@ (8001a3c <HAL_ADC_ConvCpltCallback+0x164>)
 8001916:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001918:	4b49      	ldr	r3, [pc, #292]	@ (8001a40 <HAL_ADC_ConvCpltCallback+0x168>)
 800191a:	ed93 7a00 	vldr	s14, [r3]
 800191e:	4b49      	ldr	r3, [pc, #292]	@ (8001a44 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fe34 	bl	8000598 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	f04f 0000 	mov.w	r0, #0
 8001938:	4943      	ldr	r1, [pc, #268]	@ (8001a48 <HAL_ADC_ConvCpltCallback+0x170>)
 800193a:	f7fe ffaf 	bl	800089c <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4690      	mov	r8, r2
 8001944:	4699      	mov	r9, r3
 8001946:	4b3c      	ldr	r3, [pc, #240]	@ (8001a38 <HAL_ADC_ConvCpltCallback+0x160>)
 8001948:	885b      	ldrh	r3, [r3, #2]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe12 	bl	8000574 <__aeabi_i2d>
 8001950:	4604      	mov	r4, r0
 8001952:	460d      	mov	r5, r1
 8001954:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <HAL_ADC_ConvCpltCallback+0x164>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fe1d 	bl	8000598 <__aeabi_f2d>
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b3a      	ldr	r3, [pc, #232]	@ (8001a4c <HAL_ADC_ConvCpltCallback+0x174>)
 8001964:	f7fe ff9a 	bl	800089c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4620      	mov	r0, r4
 800196e:	4629      	mov	r1, r5
 8001970:	f7fe fe6a 	bl	8000648 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <HAL_ADC_ConvCpltCallback+0x16c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fe09 	bl	8000598 <__aeabi_f2d>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4620      	mov	r0, r4
 800198c:	4629      	mov	r1, r5
 800198e:	f7fe fca3 	bl	80002d8 <__aeabi_dsub>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4640      	mov	r0, r8
 8001998:	4649      	mov	r1, r9
 800199a:	f7fe fe55 	bl	8000648 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f7ff f947 	bl	8000c38 <__aeabi_d2f>
 80019aa:	ee07 0a10 	vmov	s14, r0
 80019ae:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	4b26      	ldr	r3, [pc, #152]	@ (8001a50 <HAL_ADC_ConvCpltCallback+0x178>)
 80019b8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 80019bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a38 <HAL_ADC_ConvCpltCallback+0x160>)
 80019be:	88db      	ldrh	r3, [r3, #6]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdd7 	bl	8000574 <__aeabi_i2d>
 80019c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001a30 <HAL_ADC_ConvCpltCallback+0x158>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe ff66 	bl	800089c <__aeabi_ddiv>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_ADC_ConvCpltCallback+0x174>)
 80019de:	f7fe fe33 	bl	8000648 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4614      	mov	r4, r2
 80019e8:	461d      	mov	r5, r3
 80019ea:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <HAL_ADC_ConvCpltCallback+0x164>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdd2 	bl	8000598 <__aeabi_f2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fe24 	bl	8000648 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff f916 	bl	8000c38 <__aeabi_d2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001a10:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 8001a12:	2203      	movs	r2, #3
 8001a14:	4908      	ldr	r1, [pc, #32]	@ (8001a38 <HAL_ADC_ConvCpltCallback+0x160>)
 8001a16:	4810      	ldr	r0, [pc, #64]	@ (8001a58 <HAL_ADC_ConvCpltCallback+0x180>)
 8001a18:	f003 faf0 	bl	8004ffc <HAL_ADC_Start_DMA>

	}

}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a26:	bf00      	nop
 8001a28:	d70a3d70 	.word	0xd70a3d70
 8001a2c:	40b36323 	.word	0x40b36323
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40affe00 	.word	0x40affe00
 8001a38:	200003e8 	.word	0x200003e8
 8001a3c:	200003f4 	.word	0x200003f4
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004
 8001a48:	40590000 	.word	0x40590000
 8001a4c:	40080000 	.word	0x40080000
 8001a50:	200003f0 	.word	0x200003f0
 8001a54:	200003f8 	.word	0x200003f8
 8001a58:	20000230 	.word	0x20000230

08001a5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b09e      	sub	sp, #120	@ 0x78
 8001a60:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityNormal, 0, 256);
 8001a62:	4b36      	ldr	r3, [pc, #216]	@ (8001b3c <MX_FREERTOS_Init+0xe0>)
 8001a64:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001a68:	461d      	mov	r5, r3
 8001a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6e:	682b      	ldr	r3, [r5, #0]
 8001a70:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 8001a72:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00b fd0d 	bl	800d498 <osThreadCreate>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a2f      	ldr	r2, [pc, #188]	@ (8001b40 <MX_FREERTOS_Init+0xe4>)
 8001a82:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSSParse */
  osThreadDef(GNSSParse, StartGNSSParse, osPriorityAboveNormal, 0, 256);
 8001a84:	4b2f      	ldr	r3, [pc, #188]	@ (8001b44 <MX_FREERTOS_Init+0xe8>)
 8001a86:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a90:	682b      	ldr	r3, [r5, #0]
 8001a92:	6023      	str	r3, [r4, #0]
  GNSSParseHandle = osThreadCreate(osThread(GNSSParse), NULL);
 8001a94:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00b fcfc 	bl	800d498 <osThreadCreate>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a29      	ldr	r2, [pc, #164]	@ (8001b48 <MX_FREERTOS_Init+0xec>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 256);
 8001aa6:	4b29      	ldr	r3, [pc, #164]	@ (8001b4c <MX_FREERTOS_Init+0xf0>)
 8001aa8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001aac:	461d      	mov	r5, r3
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab2:	682b      	ldr	r3, [r5, #0]
 8001ab4:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 8001ab6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00b fceb 	bl	800d498 <osThreadCreate>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a22      	ldr	r2, [pc, #136]	@ (8001b50 <MX_FREERTOS_Init+0xf4>)
 8001ac6:	6013      	str	r3, [r2, #0]

  /* definition and creation of servo */
  osThreadDef(servo, Startservo, osPriorityHigh, 0, 256);
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <MX_FREERTOS_Init+0xf8>)
 8001aca:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001ace:	461d      	mov	r5, r3
 8001ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	6023      	str	r3, [r4, #0]
  servoHandle = osThreadCreate(osThread(servo), NULL);
 8001ad8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f00b fcda 	bl	800d498 <osThreadCreate>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b58 <MX_FREERTOS_Init+0xfc>)
 8001ae8:	6013      	str	r3, [r2, #0]

  /* definition and creation of distancecalc */
  osThreadDef(distancecalc, Startdistancecalc, osPriorityNormal, 0, 256);
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <MX_FREERTOS_Init+0x100>)
 8001aec:	f107 0414 	add.w	r4, r7, #20
 8001af0:	461d      	mov	r5, r3
 8001af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af6:	682b      	ldr	r3, [r5, #0]
 8001af8:	6023      	str	r3, [r4, #0]
  distancecalcHandle = osThreadCreate(osThread(distancecalc), NULL);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00b fcc9 	bl	800d498 <osThreadCreate>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a15      	ldr	r2, [pc, #84]	@ (8001b60 <MX_FREERTOS_Init+0x104>)
 8001b0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityHigh, 0, 256);
 8001b0c:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <MX_FREERTOS_Init+0x108>)
 8001b0e:	463c      	mov	r4, r7
 8001b10:	461d      	mov	r5, r3
 8001b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b16:	682b      	ldr	r3, [r5, #0]
 8001b18:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00b fcba 	bl	800d498 <osThreadCreate>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4a10      	ldr	r2, [pc, #64]	@ (8001b68 <MX_FREERTOS_Init+0x10c>)
 8001b28:	6013      	str	r3, [r2, #0]


#endif
#ifdef PARTIE_BAS

  osThreadSuspend(servoHandle);
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <MX_FREERTOS_Init+0xfc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00b fced 	bl	800d50e <osThreadSuspend>

#endif
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001b34:	bf00      	nop
 8001b36:	3778      	adds	r7, #120	@ 0x78
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	08014a1c 	.word	0x08014a1c
 8001b40:	20000304 	.word	0x20000304
 8001b44:	08014a3c 	.word	0x08014a3c
 8001b48:	20000308 	.word	0x20000308
 8001b4c:	08014a5c 	.word	0x08014a5c
 8001b50:	2000030c 	.word	0x2000030c
 8001b54:	08014a78 	.word	0x08014a78
 8001b58:	20000310 	.word	0x20000310
 8001b5c:	08014a9c 	.word	0x08014a9c
 8001b60:	20000314 	.word	0x20000314
 8001b64:	08014ac0 	.word	0x08014ac0
 8001b68:	20000318 	.word	0x20000318

08001b6c <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
  /* Infinite loop */
  for(;;)
  {
	  statemachine();
 8001b74:	f001 fb4a 	bl	800320c <statemachine>
	  ssd1306_UpdateScreen();
 8001b78:	f001 f9d4 	bl	8002f24 <ssd1306_UpdateScreen>
    osDelay(100);
 8001b7c:	2064      	movs	r0, #100	@ 0x64
 8001b7e:	f00b fcb2 	bl	800d4e6 <osDelay>
  {
 8001b82:	bf00      	nop
 8001b84:	e7f6      	b.n	8001b74 <Startstatemachine+0x8>
	...

08001b88 <StartGNSSParse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGNSSParse */
void StartGNSSParse(void const * argument)
{
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGNSSParse */
  /* Infinite loop */
  for(;;)
  {
	  GNSS_ParsePVTData(&GNSSData);
 8001b90:	4828      	ldr	r0, [pc, #160]	@ (8001c34 <StartGNSSParse+0xac>)
 8001b92:	f7ff faf5 	bl	8001180 <GNSS_ParsePVTData>
	  bmp581_read_precise_normal(&myDatabmp581);
 8001b96:	4828      	ldr	r0, [pc, #160]	@ (8001c38 <StartGNSSParse+0xb0>)
 8001b98:	f000 f9c6 	bl	8001f28 <bmp581_read_precise_normal>

	  if(counterrecalib>=20){
 8001b9c:	4b27      	ldr	r3, [pc, #156]	@ (8001c3c <StartGNSSParse+0xb4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b13      	cmp	r3, #19
 8001ba2:	dd2f      	ble.n	8001c04 <StartGNSSParse+0x7c>
		  if(GNSSData.fixType>=3){
 8001ba4:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <StartGNSSParse+0xac>)
 8001ba6:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d927      	bls.n	8001bfe <StartGNSSParse+0x76>
			  P0 =(double) myDatabmp581.press / powf((1 - (GNSSData.fhMSL / 44330.0f)), 5.255f);
 8001bae:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <StartGNSSParse+0xb0>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fcf0 	bl	8000598 <__aeabi_f2d>
 8001bb8:	4604      	mov	r4, r0
 8001bba:	460d      	mov	r5, r1
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <StartGNSSParse+0xac>)
 8001bbe:	ed93 7a29 	vldr	s14, [r3, #164]	@ 0xa4
 8001bc2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001c40 <StartGNSSParse+0xb8>
 8001bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd2:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001c44 <StartGNSSParse+0xbc>
 8001bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bda:	f011 fae7 	bl	80131ac <powf>
 8001bde:	ee10 3a10 	vmov	r3, s0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcd8 	bl	8000598 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4620      	mov	r0, r4
 8001bee:	4629      	mov	r1, r5
 8001bf0:	f7fe fe54 	bl	800089c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4913      	ldr	r1, [pc, #76]	@ (8001c48 <StartGNSSParse+0xc0>)
 8001bfa:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  counterrecalib=0;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <StartGNSSParse+0xb4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
	  }

	  if(flag_calib){
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <StartGNSSParse+0xc4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <StartGNSSParse+0x9a>

		  hauteur_servo=(float)(myDatabmp581.altitude-hauteur_Initiale);
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <StartGNSSParse+0xb0>)
 8001c0e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c12:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <StartGNSSParse+0xc8>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <StartGNSSParse+0xcc>)
 8001c1e:	edc3 7a00 	vstr	s15, [r3]

	  }
	  counterrecalib++;
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <StartGNSSParse+0xb4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a04      	ldr	r2, [pc, #16]	@ (8001c3c <StartGNSSParse+0xb4>)
 8001c2a:	6013      	str	r3, [r2, #0]


    osDelay(100);
 8001c2c:	2064      	movs	r0, #100	@ 0x64
 8001c2e:	f00b fc5a 	bl	800d4e6 <osDelay>
	  GNSS_ParsePVTData(&GNSSData);
 8001c32:	e7ad      	b.n	8001b90 <StartGNSSParse+0x8>
 8001c34:	2000064c 	.word	0x2000064c
 8001c38:	2000056c 	.word	0x2000056c
 8001c3c:	200002fc 	.word	0x200002fc
 8001c40:	472d2a00 	.word	0x472d2a00
 8001c44:	40a828f6 	.word	0x40a828f6
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000860 	.word	0x20000860
 8001c50:	20000870 	.word	0x20000870
 8001c54:	20000874 	.word	0x20000874

08001c58 <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET){
 8001c60:	2104      	movs	r1, #4
 8001c62:	4808      	ldr	r0, [pc, #32]	@ (8001c84 <StartSdcard+0x2c>)
 8001c64:	f005 f85c 	bl	8006d20 <HAL_GPIO_ReadPin>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <StartSdcard+0x1e>
		  sd_detect_flag=1;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <StartSdcard+0x30>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e002      	b.n	8001c7c <StartSdcard+0x24>




	  }
	  else{sd_detect_flag=0;}
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <StartSdcard+0x30>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]





    osDelay(100);
 8001c7c:	2064      	movs	r0, #100	@ 0x64
 8001c7e:	f00b fc32 	bl	800d4e6 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)==GPIO_PIN_RESET){
 8001c82:	e7ed      	b.n	8001c60 <StartSdcard+0x8>
 8001c84:	48000400 	.word	0x48000400
 8001c88:	2000086c 	.word	0x2000086c

08001c8c <Startservo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startservo */
void Startservo(void const * argument)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startservo */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_servo_started==1){
 8001c94:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <Startservo+0x88>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d104      	bne.n	8001ca6 <Startservo+0x1a>
		  stop_servo();
 8001c9c:	f000 fffc 	bl	8002c98 <stop_servo>
		  flag_servo_started=0;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <Startservo+0x88>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

	  }
	  if(flag_bouton_servo==1){
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <Startservo+0x8c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <Startservo+0x32>
		  release_mecanism();
 8001cae:	f000 ffd3 	bl	8002c58 <release_mecanism>
		  flag_bouton_servo=2;
 8001cb2:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <Startservo+0x8c>)
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	601a      	str	r2, [r3, #0]
		  flag_servo_started=1;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <Startservo+0x88>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
	  }
	  if(flag_bouton_servo==0){
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <Startservo+0x8c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d107      	bne.n	8001cd6 <Startservo+0x4a>
		  lock_mecanism();
 8001cc6:	f000 ffd7 	bl	8002c78 <lock_mecanism>
		  flag_bouton_servo=2;
 8001cca:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <Startservo+0x8c>)
 8001ccc:	2202      	movs	r2, #2
 8001cce:	601a      	str	r2, [r3, #0]
		  flag_servo_started=1;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <Startservo+0x88>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
	  }

	  if((flag_drop==1) && (flag_calib==1)){
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <Startservo+0x90>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d115      	bne.n	8001d0a <Startservo+0x7e>
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <Startservo+0x94>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d111      	bne.n	8001d0a <Startservo+0x7e>
		  if(hauteur_servo<=60.0){
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <Startservo+0x98>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001d28 <Startservo+0x9c>
 8001cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	d807      	bhi.n	8001d0a <Startservo+0x7e>
			  release_mecanism();
 8001cfa:	f000 ffad 	bl	8002c58 <release_mecanism>
			  flag_separation=1;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <Startservo+0xa0>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
			  flag_servo_started=1;
 8001d04:	4b03      	ldr	r3, [pc, #12]	@ (8001d14 <Startservo+0x88>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]


		  }
	  }

    osDelay(200);
 8001d0a:	20c8      	movs	r0, #200	@ 0xc8
 8001d0c:	f00b fbeb 	bl	800d4e6 <osDelay>
	  if(flag_servo_started==1){
 8001d10:	e7c0      	b.n	8001c94 <Startservo+0x8>
 8001d12:	bf00      	nop
 8001d14:	20000868 	.word	0x20000868
 8001d18:	20000864 	.word	0x20000864
 8001d1c:	20000858 	.word	0x20000858
 8001d20:	20000860 	.word	0x20000860
 8001d24:	20000874 	.word	0x20000874
 8001d28:	42700000 	.word	0x42700000
 8001d2c:	2000085c 	.word	0x2000085c

08001d30 <Startdistancecalc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startdistancecalc */
void Startdistancecalc(void const * argument)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startdistancecalc */
  /* Infinite loop */
  for(;;)
  {

	  if(flag_separation==1){
 8001d38:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <Startdistancecalc+0xa4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d144      	bne.n	8001dca <Startdistancecalc+0x9a>

		  if(GNSSData.fixType>=3){
 8001d40:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <Startdistancecalc+0xa8>)
 8001d42:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d93f      	bls.n	8001dca <Startdistancecalc+0x9a>
#ifdef PARTIE_BAS
			  distance_entre_module=distancecalc(GNSSData.fLat,OTHERData.latitude, GNSSData.fLon,TOPData.longitude,myDatabmp581.altitude,TOPData.altitude);
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <Startdistancecalc+0xa8>)
 8001d4c:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001d50:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <Startdistancecalc+0xac>)
 8001d52:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <Startdistancecalc+0xa8>)
 8001d58:	edd3 6a23 	vldr	s13, [r3, #140]	@ 0x8c
 8001d5c:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <Startdistancecalc+0xb0>)
 8001d5e:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8001d62:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <Startdistancecalc+0xb4>)
 8001d64:	edd3 5a05 	vldr	s11, [r3, #20]
 8001d68:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <Startdistancecalc+0xb0>)
 8001d6a:	ed93 5a13 	vldr	s10, [r3, #76]	@ 0x4c
 8001d6e:	eef0 2a45 	vmov.f32	s5, s10
 8001d72:	eeb0 2a65 	vmov.f32	s4, s11
 8001d76:	eef0 1a46 	vmov.f32	s3, s12
 8001d7a:	eeb0 1a66 	vmov.f32	s2, s13
 8001d7e:	eef0 0a47 	vmov.f32	s1, s14
 8001d82:	eeb0 0a67 	vmov.f32	s0, s15
 8001d86:	f7ff fbb7 	bl	80014f8 <distancecalc>
 8001d8a:	eef0 7a40 	vmov.f32	s15, s0
 8001d8e:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <Startdistancecalc+0xb8>)
 8001d90:	edc3 7a00 	vstr	s15, [r3]
			  create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x10,0,0,0.0,0.0,0.0,0.0,0.0,distance_entre_module,0);
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <Startdistancecalc+0xb8>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2300      	movs	r3, #0
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	eef0 2a67 	vmov.f32	s5, s15
 8001daa:	ed9f 2a10 	vldr	s4, [pc, #64]	@ 8001dec <Startdistancecalc+0xbc>
 8001dae:	eddf 1a0f 	vldr	s3, [pc, #60]	@ 8001dec <Startdistancecalc+0xbc>
 8001db2:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8001dec <Startdistancecalc+0xbc>
 8001db6:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8001dec <Startdistancecalc+0xbc>
 8001dba:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001dec <Startdistancecalc+0xbc>
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2182      	movs	r1, #130	@ 0x82
 8001dc4:	480a      	ldr	r0, [pc, #40]	@ (8001df0 <Startdistancecalc+0xc0>)
 8001dc6:	f001 ff79 	bl	8003cbc <create_and_send_payload>





    osDelay(100);
 8001dca:	2064      	movs	r0, #100	@ 0x64
 8001dcc:	f00b fb8b 	bl	800d4e6 <osDelay>
	  if(flag_separation==1){
 8001dd0:	e7b2      	b.n	8001d38 <Startdistancecalc+0x8>
 8001dd2:	bf00      	nop
 8001dd4:	2000085c 	.word	0x2000085c
 8001dd8:	2000064c 	.word	0x2000064c
 8001ddc:	200005e8 	.word	0x200005e8
 8001de0:	20000584 	.word	0x20000584
 8001de4:	2000056c 	.word	0x2000056c
 8001de8:	20000300 	.word	0x20000300
 8001dec:	00000000 	.word	0x00000000
 8001df0:	200003fc 	.word	0x200003fc

08001df4 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(trameready==1){
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <startTarvosDecode+0x3c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d110      	bne.n	8001e26 <startTarvosDecode+0x32>

		  switch(tarvos_DATA[3]){
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <startTarvosDecode+0x40>)
 8001e06:	78db      	ldrb	r3, [r3, #3]
 8001e08:	2b15      	cmp	r3, #21
 8001e0a:	d104      	bne.n	8001e16 <startTarvosDecode+0x22>
#ifdef PARTIE_BAS
		  case TOP_ADDR:
			  decode_payload(&TOPData,(uint8_t *) tarvos_DATA);
 8001e0c:	4909      	ldr	r1, [pc, #36]	@ (8001e34 <startTarvosDecode+0x40>)
 8001e0e:	480a      	ldr	r0, [pc, #40]	@ (8001e38 <startTarvosDecode+0x44>)
 8001e10:	f001 ff9e 	bl	8003d50 <decode_payload>
			  break;
 8001e14:	e004      	b.n	8001e20 <startTarvosDecode+0x2c>
#endif
		  default:
			  decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 8001e16:	4907      	ldr	r1, [pc, #28]	@ (8001e34 <startTarvosDecode+0x40>)
 8001e18:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <startTarvosDecode+0x48>)
 8001e1a:	f001 ff99 	bl	8003d50 <decode_payload>

			  break;
 8001e1e:	bf00      	nop
		  }
		  trameready=0;
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <startTarvosDecode+0x3c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
	  }


    osDelay(100);
 8001e26:	2064      	movs	r0, #100	@ 0x64
 8001e28:	f00b fb5d 	bl	800d4e6 <osDelay>
	  if(trameready==1){
 8001e2c:	e7e6      	b.n	8001dfc <startTarvosDecode+0x8>
 8001e2e:	bf00      	nop
 8001e30:	20000880 	.word	0x20000880
 8001e34:	2000047c 	.word	0x2000047c
 8001e38:	20000584 	.word	0x20000584
 8001e3c:	200005e8 	.word	0x200005e8

08001e40 <bmp581_init_precise_normal>:
uint8_t odrcheck=0;
double P0=101325.0;

//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af04      	add	r7, sp, #16
 8001e46:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 8001e48:	237b      	movs	r3, #123	@ 0x7b
 8001e4a:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 8001e4c:	2369      	movs	r3, #105	@ 0x69
 8001e4e:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 8001e50:	232b      	movs	r3, #43	@ 0x2b
 8001e52:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 8001e54:	2312      	movs	r3, #18
 8001e56:	723b      	strb	r3, [r7, #8]
	int check=0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 8001e5c:	2364      	movs	r3, #100	@ 0x64
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	2301      	movs	r3, #1
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	f107 030b 	add.w	r3, r7, #11
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	2236      	movs	r2, #54	@ 0x36
 8001e6e:	218e      	movs	r1, #142	@ 0x8e
 8001e70:	482a      	ldr	r0, [pc, #168]	@ (8001f1c <bmp581_init_precise_normal+0xdc>)
 8001e72:	f005 f853 	bl	8006f1c <HAL_I2C_Mem_Write>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <bmp581_init_precise_normal+0x40>
			check=1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 8001e80:	2364      	movs	r3, #100	@ 0x64
 8001e82:	9302      	str	r3, [sp, #8]
 8001e84:	2301      	movs	r3, #1
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	f107 030a 	add.w	r3, r7, #10
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	2237      	movs	r2, #55	@ 0x37
 8001e92:	218e      	movs	r1, #142	@ 0x8e
 8001e94:	4821      	ldr	r0, [pc, #132]	@ (8001f1c <bmp581_init_precise_normal+0xdc>)
 8001e96:	f005 f841 	bl	8006f1c <HAL_I2C_Mem_Write>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <bmp581_init_precise_normal+0x64>
					check=1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 8001ea4:	2364      	movs	r3, #100	@ 0x64
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	f107 0309 	add.w	r3, r7, #9
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	2230      	movs	r2, #48	@ 0x30
 8001eb6:	218e      	movs	r1, #142	@ 0x8e
 8001eb8:	4818      	ldr	r0, [pc, #96]	@ (8001f1c <bmp581_init_precise_normal+0xdc>)
 8001eba:	f005 f82f 	bl	8006f1c <HAL_I2C_Mem_Write>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <bmp581_init_precise_normal+0x88>
				check=1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 8001ec8:	2364      	movs	r3, #100	@ 0x64
 8001eca:	9302      	str	r3, [sp, #8]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	f107 0308 	add.w	r3, r7, #8
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	2230      	movs	r2, #48	@ 0x30
 8001eda:	218e      	movs	r1, #142	@ 0x8e
 8001edc:	480f      	ldr	r0, [pc, #60]	@ (8001f1c <bmp581_init_precise_normal+0xdc>)
 8001ede:	f005 f81d 	bl	8006f1c <HAL_I2C_Mem_Write>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <bmp581_init_precise_normal+0xac>
					check=1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
 8001eec:	2364      	movs	r3, #100	@ 0x64
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <bmp581_init_precise_normal+0xe0>)
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	2238      	movs	r2, #56	@ 0x38
 8001efc:	218f      	movs	r1, #143	@ 0x8f
 8001efe:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <bmp581_init_precise_normal+0xdc>)
 8001f00:	f005 f920 	bl	8007144 <HAL_I2C_Mem_Read>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <bmp581_init_precise_normal+0xce>
					check=1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
				}


	return check;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	b2db      	uxtb	r3, r3

}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000033c 	.word	0x2000033c
 8001f20:	20000338 	.word	0x20000338
 8001f24:	00000000 	.word	0x00000000

08001f28 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	@ 0x30
 8001f2c:	af04      	add	r7, sp, #16
 8001f2e:	6078      	str	r0, [r7, #4]
		int check=0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
		int32_t intbufferpres=0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
//			check=1;
//		}
//		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_MSB, 1, &recarray[5], 1, 100)!=HAL_OK){
//			check=1;
//		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 8001f3c:	2364      	movs	r3, #100	@ 0x64
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	2306      	movs	r3, #6
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	221d      	movs	r2, #29
 8001f4e:	218f      	movs	r1, #143	@ 0x8f
 8001f50:	483d      	ldr	r0, [pc, #244]	@ (8002048 <bmp581_read_precise_normal+0x120>)
 8001f52:	f005 f8f7 	bl	8007144 <HAL_I2C_Mem_Read>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <bmp581_read_precise_normal+0x38>
					check=1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
				}


		if(check==0){
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d165      	bne.n	8002032 <bmp581_read_precise_normal+0x10a>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 8001f66:	7bbb      	ldrb	r3, [r7, #14]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	7b7b      	ldrb	r3, [r7, #13]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	7b3a      	ldrb	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 8001f76:	7c7b      	ldrb	r3, [r7, #17]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	7c3b      	ldrb	r3, [r7, #16]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
		bmptemp=(double)intbuffertemp/65536.0;
 8001f86:	69b8      	ldr	r0, [r7, #24]
 8001f88:	f7fe faf4 	bl	8000574 <__aeabi_i2d>
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <bmp581_read_precise_normal+0x124>)
 8001f92:	f7fe fc83 	bl	800089c <__aeabi_ddiv>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	492d      	ldr	r1, [pc, #180]	@ (8002050 <bmp581_read_precise_normal+0x128>)
 8001f9c:	e9c1 2300 	strd	r2, r3, [r1]
		bmppress=(double) intbufferpres/64.0;
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f7fe fae7 	bl	8000574 <__aeabi_i2d>
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <bmp581_read_precise_normal+0x12c>)
 8001fac:	f7fe fc76 	bl	800089c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4928      	ldr	r1, [pc, #160]	@ (8002058 <bmp581_read_precise_normal+0x130>)
 8001fb6:	e9c1 2300 	strd	r2, r3, [r1]
		bmpalt=(double) ((8.314*298.15)/(9.80665*0.028964))*log(P0/(bmppress));
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <bmp581_read_precise_normal+0x134>)
 8001fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc0:	4b25      	ldr	r3, [pc, #148]	@ (8002058 <bmp581_read_precise_normal+0x130>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fc69 	bl	800089c <__aeabi_ddiv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	ec43 2b17 	vmov	d7, r2, r3
 8001fd2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fd6:	eef0 0a67 	vmov.f32	s1, s15
 8001fda:	f011 f87d 	bl	80130d8 <log>
 8001fde:	ec51 0b10 	vmov	r0, r1, d0
 8001fe2:	a317      	add	r3, pc, #92	@ (adr r3, 8002040 <bmp581_read_precise_normal+0x118>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb2e 	bl	8000648 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	491b      	ldr	r1, [pc, #108]	@ (8002060 <bmp581_read_precise_normal+0x138>)
 8001ff2:	e9c1 2300 	strd	r2, r3, [r1]
		bmp581->press=(float) bmppress;
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <bmp581_read_precise_normal+0x130>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fe1a 	bl	8000c38 <__aeabi_d2f>
 8002004:	4602      	mov	r2, r0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60da      	str	r2, [r3, #12]
		bmp581->altitude=(float)bmpalt;
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <bmp581_read_precise_normal+0x138>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f7fe fe10 	bl	8000c38 <__aeabi_d2f>
 8002018:	4602      	mov	r2, r0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	615a      	str	r2, [r3, #20]
		bmp581->temps=(float)bmptemp;
 800201e:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <bmp581_read_precise_normal+0x128>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fe06 	bl	8000c38 <__aeabi_d2f>
 800202c:	4602      	mov	r2, r0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]

		}

		return check;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	b2db      	uxtb	r3, r3
}
 8002036:	4618      	mov	r0, r3
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	a7b85a1b 	.word	0xa7b85a1b
 8002044:	40c10b81 	.word	0x40c10b81
 8002048:	2000033c 	.word	0x2000033c
 800204c:	40f00000 	.word	0x40f00000
 8002050:	20000320 	.word	0x20000320
 8002054:	40500000 	.word	0x40500000
 8002058:	20000328 	.word	0x20000328
 800205c:	20000008 	.word	0x20000008
 8002060:	20000330 	.word	0x20000330

08002064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800206a:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <MX_DMA_Init+0x80>)
 800206c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206e:	4a1d      	ldr	r2, [pc, #116]	@ (80020e4 <MX_DMA_Init+0x80>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	6493      	str	r3, [r2, #72]	@ 0x48
 8002076:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <MX_DMA_Init+0x80>)
 8002078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <MX_DMA_Init+0x80>)
 8002084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002086:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <MX_DMA_Init+0x80>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6493      	str	r3, [r2, #72]	@ 0x48
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <MX_DMA_Init+0x80>)
 8002090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2105      	movs	r1, #5
 800209e:	200b      	movs	r0, #11
 80020a0:	f004 f956 	bl	8006350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020a4:	200b      	movs	r0, #11
 80020a6:	f004 f96d 	bl	8006384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2105      	movs	r1, #5
 80020ae:	200c      	movs	r0, #12
 80020b0:	f004 f94e 	bl	8006350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020b4:	200c      	movs	r0, #12
 80020b6:	f004 f965 	bl	8006384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2105      	movs	r1, #5
 80020be:	200d      	movs	r0, #13
 80020c0:	f004 f946 	bl	8006350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80020c4:	200d      	movs	r0, #13
 80020c6:	f004 f95d 	bl	8006384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2105      	movs	r1, #5
 80020ce:	200f      	movs	r0, #15
 80020d0:	f004 f93e 	bl	8006350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80020d4:	200f      	movs	r0, #15
 80020d6:	f004 f955 	bl	8006384 <HAL_NVIC_EnableIRQ>

}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000

080020e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020fe:	4b49      	ldr	r3, [pc, #292]	@ (8002224 <MX_GPIO_Init+0x13c>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4a48      	ldr	r2, [pc, #288]	@ (8002224 <MX_GPIO_Init+0x13c>)
 8002104:	f043 0320 	orr.w	r3, r3, #32
 8002108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210a:	4b46      	ldr	r3, [pc, #280]	@ (8002224 <MX_GPIO_Init+0x13c>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	4b43      	ldr	r3, [pc, #268]	@ (8002224 <MX_GPIO_Init+0x13c>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	4a42      	ldr	r2, [pc, #264]	@ (8002224 <MX_GPIO_Init+0x13c>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002122:	4b40      	ldr	r3, [pc, #256]	@ (8002224 <MX_GPIO_Init+0x13c>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <MX_GPIO_Init+0x13c>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	4a3c      	ldr	r2, [pc, #240]	@ (8002224 <MX_GPIO_Init+0x13c>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213a:	4b3a      	ldr	r3, [pc, #232]	@ (8002224 <MX_GPIO_Init+0x13c>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	4b37      	ldr	r3, [pc, #220]	@ (8002224 <MX_GPIO_Init+0x13c>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	4a36      	ldr	r2, [pc, #216]	@ (8002224 <MX_GPIO_Init+0x13c>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002152:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <MX_GPIO_Init+0x13c>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	2110      	movs	r1, #16
 8002162:	4831      	ldr	r0, [pc, #196]	@ (8002228 <MX_GPIO_Init+0x140>)
 8002164:	f004 fdf4 	bl	8006d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800216e:	482f      	ldr	r0, [pc, #188]	@ (800222c <MX_GPIO_Init+0x144>)
 8002170:	f004 fdee 	bl	8006d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002174:	2310      	movs	r3, #16
 8002176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002178:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800217c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800218c:	f004 fc46 	bl	8006a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002190:	2310      	movs	r3, #16
 8002192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	4820      	ldr	r0, [pc, #128]	@ (8002228 <MX_GPIO_Init+0x140>)
 80021a8:	f004 fc38 	bl	8006a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021ac:	2302      	movs	r3, #2
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	481a      	ldr	r0, [pc, #104]	@ (800222c <MX_GPIO_Init+0x144>)
 80021c2:	f004 fc2b 	bl	8006a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021c6:	2304      	movs	r3, #4
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4814      	ldr	r0, [pc, #80]	@ (800222c <MX_GPIO_Init+0x144>)
 80021da:	f004 fc1f 	bl	8006a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 80021de:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80021e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e4:	2301      	movs	r3, #1
 80021e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	480d      	ldr	r0, [pc, #52]	@ (800222c <MX_GPIO_Init+0x144>)
 80021f8:	f004 fc10 	bl	8006a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2105      	movs	r1, #5
 8002200:	2007      	movs	r0, #7
 8002202:	f004 f8a5 	bl	8006350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002206:	2007      	movs	r0, #7
 8002208:	f004 f8bc 	bl	8006384 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2105      	movs	r1, #5
 8002210:	200a      	movs	r0, #10
 8002212:	f004 f89d 	bl	8006350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002216:	200a      	movs	r0, #10
 8002218:	f004 f8b4 	bl	8006384 <HAL_NVIC_EnableIRQ>

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	@ 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	48000800 	.word	0x48000800
 800222c:	48000400 	.word	0x48000400

08002230 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <MX_I2C1_Init+0x74>)
 8002236:	4a1c      	ldr	r2, [pc, #112]	@ (80022a8 <MX_I2C1_Init+0x78>)
 8002238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B182BE;
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <MX_I2C1_Init+0x74>)
 800223c:	4a1b      	ldr	r2, [pc, #108]	@ (80022ac <MX_I2C1_Init+0x7c>)
 800223e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002240:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <MX_I2C1_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002246:	4b17      	ldr	r3, [pc, #92]	@ (80022a4 <MX_I2C1_Init+0x74>)
 8002248:	2201      	movs	r2, #1
 800224a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800224c:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <MX_I2C1_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002252:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <MX_I2C1_Init+0x74>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <MX_I2C1_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <MX_I2C1_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002264:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <MX_I2C1_Init+0x74>)
 8002266:	2200      	movs	r2, #0
 8002268:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800226a:	480e      	ldr	r0, [pc, #56]	@ (80022a4 <MX_I2C1_Init+0x74>)
 800226c:	f004 fdba 	bl	8006de4 <HAL_I2C_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002276:	f000 fce9 	bl	8002c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800227a:	2100      	movs	r1, #0
 800227c:	4809      	ldr	r0, [pc, #36]	@ (80022a4 <MX_I2C1_Init+0x74>)
 800227e:	f005 fb3d 	bl	80078fc <HAL_I2CEx_ConfigAnalogFilter>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002288:	f000 fce0 	bl	8002c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800228c:	2100      	movs	r1, #0
 800228e:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <MX_I2C1_Init+0x74>)
 8002290:	f005 fb7f 	bl	8007992 <HAL_I2CEx_ConfigDigitalFilter>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800229a:	f000 fcd7 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000033c 	.word	0x2000033c
 80022a8:	40005400 	.word	0x40005400
 80022ac:	20b182be 	.word	0x20b182be

080022b0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <MX_I2C3_Init+0x78>)
 80022b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B182BE;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022bc:	4a1b      	ldr	r2, [pc, #108]	@ (800232c <MX_I2C3_Init+0x7c>)
 80022be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80022c0:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022cc:	4b15      	ldr	r3, [pc, #84]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80022d2:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d8:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80022ea:	480e      	ldr	r0, [pc, #56]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022ec:	f004 fd7a 	bl	8006de4 <HAL_I2C_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80022f6:	f000 fca9 	bl	8002c4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022fa:	2100      	movs	r1, #0
 80022fc:	4809      	ldr	r0, [pc, #36]	@ (8002324 <MX_I2C3_Init+0x74>)
 80022fe:	f005 fafd 	bl	80078fc <HAL_I2CEx_ConfigAnalogFilter>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002308:	f000 fca0 	bl	8002c4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800230c:	2100      	movs	r1, #0
 800230e:	4805      	ldr	r0, [pc, #20]	@ (8002324 <MX_I2C3_Init+0x74>)
 8002310:	f005 fb3f 	bl	8007992 <HAL_I2CEx_ConfigDigitalFilter>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800231a:	f000 fc97 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000390 	.word	0x20000390
 8002328:	40007800 	.word	0x40007800
 800232c:	20b182be 	.word	0x20b182be

08002330 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b09e      	sub	sp, #120	@ 0x78
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002348:	f107 0320 	add.w	r3, r7, #32
 800234c:	2244      	movs	r2, #68	@ 0x44
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f00d fb77 	bl	800fa44 <memset>
  if(i2cHandle->Instance==I2C1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5c      	ldr	r2, [pc, #368]	@ (80024cc <HAL_I2C_MspInit+0x19c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d155      	bne.n	800240c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002360:	2340      	movs	r3, #64	@ 0x40
 8002362:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002364:	2300      	movs	r3, #0
 8002366:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002368:	f107 0320 	add.w	r3, r7, #32
 800236c:	4618      	mov	r0, r3
 800236e:	f006 f96d 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002378:	f000 fc68 	bl	8002c4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237c:	4b54      	ldr	r3, [pc, #336]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002380:	4a53      	ldr	r2, [pc, #332]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002388:	4b51      	ldr	r3, [pc, #324]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 800238a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002394:	4b4e      	ldr	r3, [pc, #312]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 8002396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002398:	4a4d      	ldr	r2, [pc, #308]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a0:	4b4b      	ldr	r3, [pc, #300]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 80023a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b2:	2312      	movs	r3, #18
 80023b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023be:	2304      	movs	r3, #4
 80023c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023cc:	f004 fb26 	bl	8006a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d6:	2312      	movs	r3, #18
 80023d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023e2:	2304      	movs	r3, #4
 80023e4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023ea:	4619      	mov	r1, r3
 80023ec:	4839      	ldr	r0, [pc, #228]	@ (80024d4 <HAL_I2C_MspInit+0x1a4>)
 80023ee:	f004 fb15 	bl	8006a1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f2:	4b37      	ldr	r3, [pc, #220]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	4a36      	ldr	r2, [pc, #216]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 80023f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80023fe:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800240a:	e05a      	b.n	80024c2 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a31      	ldr	r2, [pc, #196]	@ (80024d8 <HAL_I2C_MspInit+0x1a8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d155      	bne.n	80024c2 <HAL_I2C_MspInit+0x192>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002416:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800241a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800241c:	2300      	movs	r3, #0
 800241e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002420:	f107 0320 	add.w	r3, r7, #32
 8002424:	4618      	mov	r0, r3
 8002426:	f006 f911 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_MspInit+0x104>
      Error_Handler();
 8002430:	f000 fc0c 	bl	8002c4c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002434:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002438:	4a25      	ldr	r2, [pc, #148]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002440:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800244c:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	4a1f      	ldr	r2, [pc, #124]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002458:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002468:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246a:	2312      	movs	r3, #18
 800246c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002476:	2302      	movs	r3, #2
 8002478:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800247e:	4619      	mov	r1, r3
 8002480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002484:	f004 faca 	bl	8006a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002488:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800248c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800248e:	2312      	movs	r3, #18
 8002490:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800249a:	2308      	movs	r3, #8
 800249c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024a2:	4619      	mov	r1, r3
 80024a4:	480d      	ldr	r0, [pc, #52]	@ (80024dc <HAL_I2C_MspInit+0x1ac>)
 80024a6:	f004 fab9 	bl	8006a1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	4a08      	ldr	r2, [pc, #32]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 80024b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_I2C_MspInit+0x1a0>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
}
 80024c2:	bf00      	nop
 80024c4:	3778      	adds	r7, #120	@ 0x78
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40005400 	.word	0x40005400
 80024d0:	40021000 	.word	0x40021000
 80024d4:	48000400 	.word	0x48000400
 80024d8:	40007800 	.word	0x40007800
 80024dc:	48000800 	.word	0x48000800

080024e0 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 80024e6:	480d      	ldr	r0, [pc, #52]	@ (800251c <LED_Init+0x3c>)
 80024e8:	f006 fc0c 	bl	8008d04 <HAL_TIM_PWM_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 80024f0:	2300      	movs	r3, #0
 80024f2:	80fb      	strh	r3, [r7, #6]
 80024f4:	e006      	b.n	8002504 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	4a09      	ldr	r2, [pc, #36]	@ (8002520 <LED_Init+0x40>)
 80024fa:	2100      	movs	r1, #0
 80024fc:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	3301      	adds	r3, #1
 8002502:	80fb      	strh	r3, [r7, #6]
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800250a:	d9f4      	bls.n	80024f6 <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <LED_Init+0x44>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8002512:	797b      	ldrb	r3, [r7, #5]




}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000d88 	.word	0x20000d88
 8002520:	20000714 	.word	0x20000714
 8002524:	2000084d 	.word	0x2000084d

08002528 <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8002528:	b490      	push	{r4, r7}
 800252a:	b08a      	sub	sp, #40	@ 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	4604      	mov	r4, r0
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4623      	mov	r3, r4
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	4603      	mov	r3, r0
 800253c:	71bb      	strb	r3, [r7, #6]
 800253e:	460b      	mov	r3, r1
 8002540:	717b      	strb	r3, [r7, #5]
 8002542:	4613      	mov	r3, r2
 8002544:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8002546:	2300      	movs	r3, #0
 8002548:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 800254a:	79bb      	ldrb	r3, [r7, #6]
 800254c:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8002552:	797b      	ldrb	r3, [r7, #5]
 8002554:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8002556:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800255a:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 800255c:	793b      	ldrb	r3, [r7, #4]
 800255e:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8002560:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002564:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
 800256a:	e007      	b.n	800257c <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 800256c:	4a35      	ldr	r2, [pc, #212]	@ (8002644 <LED_Setcolour+0x11c>)
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	4413      	add	r3, r2
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	3301      	adds	r3, #1
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002582:	ddf3      	ble.n	800256c <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8002584:	2300      	movs	r3, #0
 8002586:	77fb      	strb	r3, [r7, #31]
 8002588:	e032      	b.n	80025f0 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 800258a:	2300      	movs	r3, #0
 800258c:	77bb      	strb	r3, [r7, #30]
 800258e:	e029      	b.n	80025e4 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	e020      	b.n	80025d8 <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8002596:	7ffa      	ldrb	r2, [r7, #31]
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	441a      	add	r2, r3
 800259e:	7fbb      	ldrb	r3, [r7, #30]
 80025a0:	4413      	add	r3, r2
 80025a2:	3328      	adds	r3, #40	@ 0x28
 80025a4:	443b      	add	r3, r7
 80025a6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80025aa:	461a      	mov	r2, r3
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa42 f303 	asr.w	r3, r2, r3
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 80025ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80025bc:	4a21      	ldr	r2, [pc, #132]	@ (8002644 <LED_Setcolour+0x11c>)
 80025be:	215a      	movs	r1, #90	@ 0x5a
 80025c0:	54d1      	strb	r1, [r2, r3]
 80025c2:	e003      	b.n	80025cc <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 80025c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80025c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002644 <LED_Setcolour+0x11c>)
 80025c8:	211e      	movs	r1, #30
 80025ca:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 80025cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80025ce:	3301      	adds	r3, #1
 80025d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	3301      	adds	r3, #1
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b07      	cmp	r3, #7
 80025dc:	dddb      	ble.n	8002596 <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 80025de:	7fbb      	ldrb	r3, [r7, #30]
 80025e0:	3301      	adds	r3, #1
 80025e2:	77bb      	strb	r3, [r7, #30]
 80025e4:	7fbb      	ldrb	r3, [r7, #30]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d9d2      	bls.n	8002590 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 80025ea:	7ffb      	ldrb	r3, [r7, #31]
 80025ec:	3301      	adds	r3, #1
 80025ee:	77fb      	strb	r3, [r7, #31]
 80025f0:	7ffb      	ldrb	r3, [r7, #31]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d9c9      	bls.n	800258a <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	e009      	b.n	8002610 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 80025fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80025fe:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <LED_Setcolour+0x11c>)
 8002600:	2100      	movs	r1, #0
 8002602:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8002604:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002606:	3301      	adds	r3, #1
 8002608:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3301      	adds	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002616:	dbf1      	blt.n	80025fc <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	e009      	b.n	8002632 <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 800261e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002620:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <LED_Setcolour+0x11c>)
 8002622:	2100      	movs	r1, #0
 8002624:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 8002626:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002628:	3301      	adds	r3, #1
 800262a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	3301      	adds	r3, #1
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b04      	cmp	r3, #4
 8002636:	ddf2      	ble.n	800261e <LED_Setcolour+0xf6>
		}

}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3728      	adds	r7, #40	@ 0x28
 800263e:	46bd      	mov	sp, r7
 8002640:	bc90      	pop	{r4, r7}
 8002642:	4770      	bx	lr
 8002644:	20000714 	.word	0x20000714

08002648 <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 800264e:	f240 1339 	movw	r3, #313	@ 0x139
 8002652:	4a07      	ldr	r2, [pc, #28]	@ (8002670 <LED_Update+0x28>)
 8002654:	2104      	movs	r1, #4
 8002656:	4807      	ldr	r0, [pc, #28]	@ (8002674 <LED_Update+0x2c>)
 8002658:	f006 fd4c 	bl	80090f4 <HAL_TIM_PWM_Start_DMA>
 800265c:	4603      	mov	r3, r0
 800265e:	71fb      	strb	r3, [r7, #7]

	if(halStatus=HAL_OK){
 8002660:	2300      	movs	r3, #0
 8002662:	71fb      	strb	r3, [r7, #7]
		DMA_COMPLETE_FLAG=0;
	}


	return halStatus;
 8002664:	79fb      	ldrb	r3, [r7, #7]

}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000714 	.word	0x20000714
 8002674:	20000d88 	.word	0x20000d88

08002678 <LED_Callback>:



void LED_Callback(){
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 800267c:	2104      	movs	r1, #4
 800267e:	4804      	ldr	r0, [pc, #16]	@ (8002690 <LED_Callback+0x18>)
 8002680:	f006 ff50 	bl	8009524 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <LED_Callback+0x1c>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]


}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000d88 	.word	0x20000d88
 8002694:	2000084d 	.word	0x2000084d

08002698 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_4){
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d133      	bne.n	8002710 <HAL_GPIO_EXTI_Callback+0x78>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)== GPIO_PIN_SET){
 80026a8:	2110      	movs	r1, #16
 80026aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ae:	f004 fb37 	bl	8006d20 <HAL_GPIO_ReadPin>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d109      	bne.n	80026cc <HAL_GPIO_EXTI_Callback+0x34>

						gros_btn_time=0;
 80026b8:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <HAL_GPIO_EXTI_Callback+0x80>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
						tbtn1=HAL_GetTick();
 80026be:	f002 f8ab 	bl	8004818 <HAL_GetTick>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_GPIO_EXTI_Callback+0x84>)
 80026c8:	601a      	str	r2, [r3, #0]
//	if(GPIO_Pin==GPIO_PIN_0){
//		flag_drop=1;
//
//		}

	}
 80026ca:	e021      	b.n	8002710 <HAL_GPIO_EXTI_Callback+0x78>
						gros_btn_time=(HAL_GetTick()-tbtn1);
 80026cc:	f002 f8a4 	bl	8004818 <HAL_GetTick>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4a12      	ldr	r2, [pc, #72]	@ (800271c <HAL_GPIO_EXTI_Callback+0x84>)
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	461a      	mov	r2, r3
 80026da:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <HAL_GPIO_EXTI_Callback+0x80>)
 80026dc:	601a      	str	r2, [r3, #0]
					if(gros_btn_time>=400 && gros_btn_time<=2000){
 80026de:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <HAL_GPIO_EXTI_Callback+0x80>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
					if(gros_btn_time>=2500 && gros_btn_time<=3500){
 80026e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <HAL_GPIO_EXTI_Callback+0x80>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80026ee:	4293      	cmp	r3, r2
					if(gros_btn_time>=4000){
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <HAL_GPIO_EXTI_Callback+0x80>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80026f8:	db07      	blt.n	800270a <HAL_GPIO_EXTI_Callback+0x72>
											HAL_GPIO_TogglePin(PWEN_GPIO_Port,PWEN_Pin);
 80026fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026fe:	4808      	ldr	r0, [pc, #32]	@ (8002720 <HAL_GPIO_EXTI_Callback+0x88>)
 8002700:	f004 fb3e 	bl	8006d80 <HAL_GPIO_TogglePin>
											gros_btn_time=0;
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <HAL_GPIO_EXTI_Callback+0x80>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
					gros_btn_time=0;
 800270a:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_GPIO_EXTI_Callback+0x80>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
	}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000850 	.word	0x20000850
 800271c:	200003e4 	.word	0x200003e4
 8002720:	48000400 	.word	0x48000400

08002724 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

	LED_Callback();
 800272c:	f7ff ffa4 	bl	8002678 <LED_Callback>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800273e:	f002 f840 	bl	80047c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002742:	f000 fa27 	bl	8002b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002746:	f7ff fccf 	bl	80020e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800274a:	f7ff fc8b 	bl	8002064 <MX_DMA_Init>
  MX_ADC1_Init();
 800274e:	f7fe ffa1 	bl	8001694 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002752:	f7ff fd6d 	bl	8002230 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002756:	f7ff fdab 	bl	80022b0 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800275a:	f001 fdb9 	bl	80042d0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800275e:	f001 fe01 	bl	8004364 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002762:	f001 fc13 	bl	8003f8c <MX_TIM3_Init>
  MX_TIM2_Init();
 8002766:	f001 fb9b 	bl	8003ea0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800276a:	f000 fa9f 	bl	8002cac <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800276e:	f00a fda9 	bl	800d2c4 <MX_FATFS_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <main+0x44>
    Error_Handler();
 8002778:	f000 fa68 	bl	8002c4c <Error_Handler>
  }
  MX_TIM4_Init();
 800277c:	f001 fc7e 	bl	800407c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8002780:	f000 fb4e 	bl	8002e20 <ssd1306_Init>
  ssd1306_Fill(Black);
 8002784:	2000      	movs	r0, #0
 8002786:	f000 fbb5 	bl	8002ef4 <ssd1306_Fill>
  ssd1306_SetCursor(32, 40);
 800278a:	2128      	movs	r1, #40	@ 0x28
 800278c:	2020      	movs	r0, #32
 800278e:	f000 fcf3 	bl	8003178 <ssd1306_SetCursor>
  ssd1306_WriteString("Init...", Font_7x10, White);
 8002792:	4acd      	ldr	r2, [pc, #820]	@ (8002ac8 <main+0x390>)
 8002794:	2301      	movs	r3, #1
 8002796:	ca06      	ldmia	r2, {r1, r2}
 8002798:	48cc      	ldr	r0, [pc, #816]	@ (8002acc <main+0x394>)
 800279a:	f000 fcc7 	bl	800312c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800279e:	f000 fbc1 	bl	8002f24 <ssd1306_UpdateScreen>

  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 80027a2:	2201      	movs	r2, #1
 80027a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027a8:	48c9      	ldr	r0, [pc, #804]	@ (8002ad0 <main+0x398>)
 80027aa:	f004 fad1 	bl	8006d50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027b4:	48c6      	ldr	r0, [pc, #792]	@ (8002ad0 <main+0x398>)
 80027b6:	f004 facb 	bl	8006d50 <HAL_GPIO_WritePin>

#endif



  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 80027ba:	2203      	movs	r2, #3
 80027bc:	49c5      	ldr	r1, [pc, #788]	@ (8002ad4 <main+0x39c>)
 80027be:	48c6      	ldr	r0, [pc, #792]	@ (8002ad8 <main+0x3a0>)
 80027c0:	f002 fc1c 	bl	8004ffc <HAL_ADC_Start_DMA>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d015      	beq.n	80027f6 <main+0xbe>
	  ssd1306_SetCursor(32, 40);
 80027ca:	2128      	movs	r1, #40	@ 0x28
 80027cc:	2020      	movs	r0, #32
 80027ce:	f000 fcd3 	bl	8003178 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 80027d2:	2000      	movs	r0, #0
 80027d4:	f000 fb8e 	bl	8002ef4 <ssd1306_Fill>
 	  ssd1306_WriteString("adcpbm", Font_7x10, White);
 80027d8:	4abb      	ldr	r2, [pc, #748]	@ (8002ac8 <main+0x390>)
 80027da:	2301      	movs	r3, #1
 80027dc:	ca06      	ldmia	r2, {r1, r2}
 80027de:	48bf      	ldr	r0, [pc, #764]	@ (8002adc <main+0x3a4>)
 80027e0:	f000 fca4 	bl	800312c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 80027e4:	f000 fb9e 	bl	8002f24 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 80027e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027ec:	f002 f820 	bl	8004830 <HAL_Delay>
 	 pbmseeker=1;
 80027f0:	4bbb      	ldr	r3, [pc, #748]	@ (8002ae0 <main+0x3a8>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]


   }

   HAL_Delay(100);
 80027f6:	2064      	movs	r0, #100	@ 0x64
 80027f8:	f002 f81a 	bl	8004830 <HAL_Delay>
   HAL_UART_Abort(&huart1);
 80027fc:	48b9      	ldr	r0, [pc, #740]	@ (8002ae4 <main+0x3ac>)
 80027fe:	f008 fa7d 	bl	800acfc <HAL_UART_Abort>
   if( HAL_UART_Receive_DMA(&huart1, (uint8_t *)workingbuffer, 100)!=HAL_OK){
 8002802:	2264      	movs	r2, #100	@ 0x64
 8002804:	49b8      	ldr	r1, [pc, #736]	@ (8002ae8 <main+0x3b0>)
 8002806:	48b7      	ldr	r0, [pc, #732]	@ (8002ae4 <main+0x3ac>)
 8002808:	f008 fa2c 	bl	800ac64 <HAL_UART_Receive_DMA>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <main+0x106>
	   ssd1306_SetCursor(32, 40);
 8002812:	2128      	movs	r1, #40	@ 0x28
 8002814:	2020      	movs	r0, #32
 8002816:	f000 fcaf 	bl	8003178 <ssd1306_SetCursor>
  	  ssd1306_Fill(Black);
 800281a:	2000      	movs	r0, #0
 800281c:	f000 fb6a 	bl	8002ef4 <ssd1306_Fill>
  	  ssd1306_WriteString("gpspbm", Font_7x10, White);
 8002820:	4aa9      	ldr	r2, [pc, #676]	@ (8002ac8 <main+0x390>)
 8002822:	2301      	movs	r3, #1
 8002824:	ca06      	ldmia	r2, {r1, r2}
 8002826:	48b1      	ldr	r0, [pc, #708]	@ (8002aec <main+0x3b4>)
 8002828:	f000 fc80 	bl	800312c <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 800282c:	f000 fb7a 	bl	8002f24 <ssd1306_UpdateScreen>
  	  HAL_Delay(500);
 8002830:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002834:	f001 fffc 	bl	8004830 <HAL_Delay>
  	pbmseeker=1;
 8002838:	4ba9      	ldr	r3, [pc, #676]	@ (8002ae0 <main+0x3a8>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]


    }


  if(  LED_Init()!=HAL_OK){
 800283e:	f7ff fe4f 	bl	80024e0 <LED_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <main+0x13c>
	  ssd1306_SetCursor(32, 40);
 8002848:	2128      	movs	r1, #40	@ 0x28
 800284a:	2020      	movs	r0, #32
 800284c:	f000 fc94 	bl	8003178 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 8002850:	2000      	movs	r0, #0
 8002852:	f000 fb4f 	bl	8002ef4 <ssd1306_Fill>
 	  ssd1306_WriteString("ledpbm", Font_7x10, White);
 8002856:	4a9c      	ldr	r2, [pc, #624]	@ (8002ac8 <main+0x390>)
 8002858:	2301      	movs	r3, #1
 800285a:	ca06      	ldmia	r2, {r1, r2}
 800285c:	48a4      	ldr	r0, [pc, #656]	@ (8002af0 <main+0x3b8>)
 800285e:	f000 fc65 	bl	800312c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002862:	f000 fb5f 	bl	8002f24 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002866:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800286a:	f001 ffe1 	bl	8004830 <HAL_Delay>
 	 pbmseeker=1;
 800286e:	4b9c      	ldr	r3, [pc, #624]	@ (8002ae0 <main+0x3a8>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]


   }
  Init_HighPerf_Mode_6_axis();
 8002874:	f7fe fbfc 	bl	8001070 <Init_HighPerf_Mode_6_axis>



  if(bmp581_init_precise_normal(&myDatabmp581)!=HAL_OK){
 8002878:	489e      	ldr	r0, [pc, #632]	@ (8002af4 <main+0x3bc>)
 800287a:	f7ff fae1 	bl	8001e40 <bmp581_init_precise_normal>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <main+0x178>
	  ssd1306_SetCursor(32, 40);
 8002884:	2128      	movs	r1, #40	@ 0x28
 8002886:	2020      	movs	r0, #32
 8002888:	f000 fc76 	bl	8003178 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 800288c:	2000      	movs	r0, #0
 800288e:	f000 fb31 	bl	8002ef4 <ssd1306_Fill>
 	  ssd1306_WriteString("bmp pbm", Font_7x10, White);
 8002892:	4a8d      	ldr	r2, [pc, #564]	@ (8002ac8 <main+0x390>)
 8002894:	2301      	movs	r3, #1
 8002896:	ca06      	ldmia	r2, {r1, r2}
 8002898:	4897      	ldr	r0, [pc, #604]	@ (8002af8 <main+0x3c0>)
 800289a:	f000 fc47 	bl	800312c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 800289e:	f000 fb41 	bl	8002f24 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 80028a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028a6:	f001 ffc3 	bl	8004830 <HAL_Delay>
 	 pbmseeker=1;
 80028aa:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae0 <main+0x3a8>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

   }

  //mon adresse est 1° et on envoit à 2°
#ifdef PARTIE_BAS
  if( INIT_PERM_TARVOS(BOTTOM_ADDR, GROUND_ADDR)!=HAL_OK){
 80028b0:	2101      	movs	r1, #1
 80028b2:	2016      	movs	r0, #22
 80028b4:	f001 f866 	bl	8003984 <INIT_PERM_TARVOS>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <main+0x1b2>
	  ssd1306_SetCursor(32, 40);
 80028be:	2128      	movs	r1, #40	@ 0x28
 80028c0:	2020      	movs	r0, #32
 80028c2:	f000 fc59 	bl	8003178 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f000 fb14 	bl	8002ef4 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsaddrpbm", Font_7x10, White);
 80028cc:	4a7e      	ldr	r2, [pc, #504]	@ (8002ac8 <main+0x390>)
 80028ce:	2301      	movs	r3, #1
 80028d0:	ca06      	ldmia	r2, {r1, r2}
 80028d2:	488a      	ldr	r0, [pc, #552]	@ (8002afc <main+0x3c4>)
 80028d4:	f000 fc2a 	bl	800312c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 80028d8:	f000 fb24 	bl	8002f24 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 80028dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028e0:	f001 ffa6 	bl	8004830 <HAL_Delay>
 	 pbmseeker=1;
 80028e4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ae0 <main+0x3a8>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]


   }
#endif

  HAL_Delay(100);
 80028ea:	2064      	movs	r0, #100	@ 0x64
 80028ec:	f001 ffa0 	bl	8004830 <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 80028f0:	4883      	ldr	r0, [pc, #524]	@ (8002b00 <main+0x3c8>)
 80028f2:	f008 fa03 	bl	800acfc <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5)!=HAL_OK){
 80028f6:	2205      	movs	r2, #5
 80028f8:	4982      	ldr	r1, [pc, #520]	@ (8002b04 <main+0x3cc>)
 80028fa:	4881      	ldr	r0, [pc, #516]	@ (8002b00 <main+0x3c8>)
 80028fc:	f008 f9b2 	bl	800ac64 <HAL_UART_Receive_DMA>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d015      	beq.n	8002932 <main+0x1fa>
	   ssd1306_SetCursor(32, 40);
 8002906:	2128      	movs	r1, #40	@ 0x28
 8002908:	2020      	movs	r0, #32
 800290a:	f000 fc35 	bl	8003178 <ssd1306_SetCursor>
 	  ssd1306_Fill(Black);
 800290e:	2000      	movs	r0, #0
 8002910:	f000 faf0 	bl	8002ef4 <ssd1306_Fill>
 	  ssd1306_WriteString("tvsrxpbm", Font_7x10, White);
 8002914:	4a6c      	ldr	r2, [pc, #432]	@ (8002ac8 <main+0x390>)
 8002916:	2301      	movs	r3, #1
 8002918:	ca06      	ldmia	r2, {r1, r2}
 800291a:	487b      	ldr	r0, [pc, #492]	@ (8002b08 <main+0x3d0>)
 800291c:	f000 fc06 	bl	800312c <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 8002920:	f000 fb00 	bl	8002f24 <ssd1306_UpdateScreen>
 	  HAL_Delay(500);
 8002924:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002928:	f001 ff82 	bl	8004830 <HAL_Delay>
 	pbmseeker=1;
 800292c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae0 <main+0x3a8>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]
//
//     f_close(&fil);
//     f_mount(NULL, "", 1);
//

  if(pbmseeker==0){
 8002932:	4b6b      	ldr	r3, [pc, #428]	@ (8002ae0 <main+0x3a8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d112      	bne.n	8002960 <main+0x228>
	  ssd1306_SetCursor(32, 40);
 800293a:	2128      	movs	r1, #40	@ 0x28
 800293c:	2020      	movs	r0, #32
 800293e:	f000 fc1b 	bl	8003178 <ssd1306_SetCursor>

	  ssd1306_Fill(Black);
 8002942:	2000      	movs	r0, #0
 8002944:	f000 fad6 	bl	8002ef4 <ssd1306_Fill>
	  ssd1306_WriteString("done!", Font_7x10, White);
 8002948:	4a5f      	ldr	r2, [pc, #380]	@ (8002ac8 <main+0x390>)
 800294a:	2301      	movs	r3, #1
 800294c:	ca06      	ldmia	r2, {r1, r2}
 800294e:	486f      	ldr	r0, [pc, #444]	@ (8002b0c <main+0x3d4>)
 8002950:	f000 fbec 	bl	800312c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8002954:	f000 fae6 	bl	8002f24 <ssd1306_UpdateScreen>
	  HAL_Delay(500);
 8002958:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800295c:	f001 ff68 	bl	8004830 <HAL_Delay>


  }
  if(pbmseeker==1){
 8002960:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae0 <main+0x3a8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d112      	bne.n	800298e <main+0x256>

	  ssd1306_SetCursor(32, 40);
 8002968:	2128      	movs	r1, #40	@ 0x28
 800296a:	2020      	movs	r0, #32
 800296c:	f000 fc04 	bl	8003178 <ssd1306_SetCursor>

	  ssd1306_Fill(Black);
 8002970:	2000      	movs	r0, #0
 8002972:	f000 fabf 	bl	8002ef4 <ssd1306_Fill>
	  ssd1306_WriteString("PROBLEM", Font_7x10, White);
 8002976:	4a54      	ldr	r2, [pc, #336]	@ (8002ac8 <main+0x390>)
 8002978:	2301      	movs	r3, #1
 800297a:	ca06      	ldmia	r2, {r1, r2}
 800297c:	4864      	ldr	r0, [pc, #400]	@ (8002b10 <main+0x3d8>)
 800297e:	f000 fbd5 	bl	800312c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8002982:	f000 facf 	bl	8002f24 <ssd1306_UpdateScreen>
	  HAL_Delay(2000);
 8002986:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800298a:	f001 ff51 	bl	8004830 <HAL_Delay>


  }
  int r=0;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
  int g=0;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
  int b=0;
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
  int t=0;
 800299a:	2300      	movs	r3, #0
 800299c:	603b      	str	r3, [r7, #0]


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800299e:	f7ff f85d 	bl	8001a5c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80029a2:	f00a fd72 	bl	800d48a <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LED_Setcolour(r, g, b,r, g, b);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	b2d8      	uxtb	r0, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	b2d9      	uxtb	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	b2dc      	uxtb	r4, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	b2dd      	uxtb	r5, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	9201      	str	r2, [sp, #4]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	462b      	mov	r3, r5
 80029c4:	4622      	mov	r2, r4
 80029c6:	f7ff fdaf 	bl	8002528 <LED_Setcolour>
	  r=floor(abs(255*cosf((2*M_PI/255)*t)));
 80029ca:	6838      	ldr	r0, [r7, #0]
 80029cc:	f7fd fdd2 	bl	8000574 <__aeabi_i2d>
 80029d0:	a339      	add	r3, pc, #228	@ (adr r3, 8002ab8 <main+0x380>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f7fd fe37 	bl	8000648 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	f7fe f929 	bl	8000c38 <__aeabi_d2f>
 80029e6:	4603      	mov	r3, r0
 80029e8:	ee00 3a10 	vmov	s0, r3
 80029ec:	f010 fc54 	bl	8013298 <cosf>
 80029f0:	eef0 7a40 	vmov.f32	s15, s0
 80029f4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002b14 <main+0x3dc>
 80029f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fc:	ee17 0a90 	vmov	r0, s15
 8002a00:	f7fd fdca 	bl	8000598 <__aeabi_f2d>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	ec43 2b10 	vmov	d0, r2, r3
 8002a0c:	f00b ff62 	bl	800e8d4 <abs>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fdae 	bl	8000574 <__aeabi_i2d>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f7fe f8c2 	bl	8000ba8 <__aeabi_d2iz>
 8002a24:	4603      	mov	r3, r0
 8002a26:	60fb      	str	r3, [r7, #12]
	  g=floor(abs(255*cosf((2*M_PI/255)*t+(180/M_PI))));
 8002a28:	6838      	ldr	r0, [r7, #0]
 8002a2a:	f7fd fda3 	bl	8000574 <__aeabi_i2d>
 8002a2e:	a322      	add	r3, pc, #136	@ (adr r3, 8002ab8 <main+0x380>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd fe08 	bl	8000648 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	a31f      	add	r3, pc, #124	@ (adr r3, 8002ac0 <main+0x388>)
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f7fd fc49 	bl	80002dc <__adddf3>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	f7fe f8f1 	bl	8000c38 <__aeabi_d2f>
 8002a56:	4603      	mov	r3, r0
 8002a58:	ee00 3a10 	vmov	s0, r3
 8002a5c:	f010 fc1c 	bl	8013298 <cosf>
 8002a60:	eef0 7a40 	vmov.f32	s15, s0
 8002a64:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002b14 <main+0x3dc>
 8002a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a6c:	ee17 0a90 	vmov	r0, s15
 8002a70:	f7fd fd92 	bl	8000598 <__aeabi_f2d>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	ec43 2b10 	vmov	d0, r2, r3
 8002a7c:	f00b ff2a 	bl	800e8d4 <abs>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd76 	bl	8000574 <__aeabi_i2d>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7fe f88a 	bl	8000ba8 <__aeabi_d2iz>
 8002a94:	4603      	mov	r3, r0
 8002a96:	60bb      	str	r3, [r7, #8]
	  b=floor(abs(255*cosf((2*M_PI/255)*t+(270/M_PI))));
 8002a98:	6838      	ldr	r0, [r7, #0]
 8002a9a:	f7fd fd6b 	bl	8000574 <__aeabi_i2d>
 8002a9e:	a306      	add	r3, pc, #24	@ (adr r3, 8002ab8 <main+0x380>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f7fd fdd0 	bl	8000648 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	e032      	b.n	8002b18 <main+0x3e0>
 8002ab2:	bf00      	nop
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	8acefc14 	.word	0x8acefc14
 8002abc:	3f993b36 	.word	0x3f993b36
 8002ac0:	1a63c1f8 	.word	0x1a63c1f8
 8002ac4:	404ca5dc 	.word	0x404ca5dc
 8002ac8:	20000010 	.word	0x20000010
 8002acc:	08014ad4 	.word	0x08014ad4
 8002ad0:	48000400 	.word	0x48000400
 8002ad4:	200003e8 	.word	0x200003e8
 8002ad8:	20000230 	.word	0x20000230
 8002adc:	08014adc 	.word	0x08014adc
 8002ae0:	20000878 	.word	0x20000878
 8002ae4:	20000f68 	.word	0x20000f68
 8002ae8:	200004fc 	.word	0x200004fc
 8002aec:	08014ae4 	.word	0x08014ae4
 8002af0:	08014aec 	.word	0x08014aec
 8002af4:	2000056c 	.word	0x2000056c
 8002af8:	08014af4 	.word	0x08014af4
 8002afc:	08014afc 	.word	0x08014afc
 8002b00:	20000ed4 	.word	0x20000ed4
 8002b04:	200004bc 	.word	0x200004bc
 8002b08:	08014b08 	.word	0x08014b08
 8002b0c:	08014b14 	.word	0x08014b14
 8002b10:	08014b1c 	.word	0x08014b1c
 8002b14:	437f0000 	.word	0x437f0000
 8002b18:	a31c      	add	r3, pc, #112	@ (adr r3, 8002b8c <main+0x454>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fbdd 	bl	80002dc <__adddf3>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f7fe f885 	bl	8000c38 <__aeabi_d2f>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	ee00 3a10 	vmov	s0, r3
 8002b34:	f010 fbb0 	bl	8013298 <cosf>
 8002b38:	eef0 7a40 	vmov.f32	s15, s0
 8002b3c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002b88 <main+0x450>
 8002b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b44:	ee17 0a90 	vmov	r0, s15
 8002b48:	f7fd fd26 	bl	8000598 <__aeabi_f2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	ec43 2b10 	vmov	d0, r2, r3
 8002b54:	f00b febe 	bl	800e8d4 <abs>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fd0a 	bl	8000574 <__aeabi_i2d>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fe f81e 	bl	8000ba8 <__aeabi_d2iz>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	607b      	str	r3, [r7, #4]

	  if(t>=255){
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2bfe      	cmp	r3, #254	@ 0xfe
 8002b74:	dd01      	ble.n	8002b7a <main+0x442>
		  t=0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	603b      	str	r3, [r7, #0]
	  }
	  t++;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	603b      	str	r3, [r7, #0]

	  LED_Update();
 8002b80:	f7ff fd62 	bl	8002648 <LED_Update>
  {
 8002b84:	e70f      	b.n	80029a6 <main+0x26e>
 8002b86:	bf00      	nop
 8002b88:	437f0000 	.word	0x437f0000
 8002b8c:	13cad17a 	.word	0x13cad17a
 8002b90:	40557c65 	.word	0x40557c65

08002b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b094      	sub	sp, #80	@ 0x50
 8002b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b9a:	f107 0318 	add.w	r3, r7, #24
 8002b9e:	2238      	movs	r2, #56	@ 0x38
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f00c ff4e 	bl	800fa44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002bba:	f004 ff37 	bl	8007a2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002bd4:	2319      	movs	r3, #25
 8002bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002be0:	2302      	movs	r3, #2
 8002be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be4:	f107 0318 	add.w	r3, r7, #24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f004 ffd3 	bl	8007b94 <HAL_RCC_OscConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8002bf4:	f000 f82a 	bl	8002c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	2103      	movs	r1, #3
 8002c10:	4618      	mov	r0, r3
 8002c12:	f005 fad1 	bl	80081b8 <HAL_RCC_ClockConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c1c:	f000 f816 	bl	8002c4c <Error_Handler>
  }
}
 8002c20:	bf00      	nop
 8002c22:	3750      	adds	r7, #80	@ 0x50
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002c3a:	f001 fddb 	bl	80047f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40012c00 	.word	0x40012c00

08002c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c50:	b672      	cpsid	i
}
 8002c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <Error_Handler+0x8>

08002c58 <release_mecanism>:




}
HAL_StatusTypeDef release_mecanism(void){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,OPEN_HIGH_TIME);
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <release_mecanism+0x1c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 8002c64:	635a      	str	r2, [r3, #52]	@ 0x34
	 return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002c66:	2100      	movs	r1, #0
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <release_mecanism+0x1c>)
 8002c6a:	f006 f8ad 	bl	8008dc8 <HAL_TIM_PWM_Start>
 8002c6e:	4603      	mov	r3, r0


}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000dd4 	.word	0x20000dd4

08002c78 <lock_mecanism>:
HAL_StatusTypeDef lock_mecanism(void){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,CLOSED_HIGH_TIME);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <lock_mecanism+0x1c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34
	return HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002c86:	2100      	movs	r1, #0
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <lock_mecanism+0x1c>)
 8002c8a:	f006 f89d 	bl	8008dc8 <HAL_TIM_PWM_Start>
 8002c8e:	4603      	mov	r3, r0


}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000dd4 	.word	0x20000dd4

08002c98 <stop_servo>:
void stop_servo(void){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4802      	ldr	r0, [pc, #8]	@ (8002ca8 <stop_servo+0x10>)
 8002ca0:	f006 f992 	bl	8008fc8 <HAL_TIM_PWM_Stop>

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000dd4 	.word	0x20000dd4

08002cac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d24 <MX_SPI1_Init+0x78>)
 8002cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cbe:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cc4:	4b16      	ldr	r3, [pc, #88]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cc6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002cca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ccc:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cd2:	4b13      	ldr	r3, [pc, #76]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002ce2:	2218      	movs	r2, #24
 8002ce4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cfe:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002d06:	2208      	movs	r2, #8
 8002d08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d0a:	4805      	ldr	r0, [pc, #20]	@ (8002d20 <MX_SPI1_Init+0x74>)
 8002d0c:	f005 fe8e 	bl	8008a2c <HAL_SPI_Init>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d16:	f7ff ff99 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000884 	.word	0x20000884
 8002d24:	40013000 	.word	0x40013000

08002d28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a17      	ldr	r2, [pc, #92]	@ (8002da4 <HAL_SPI_MspInit+0x7c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d128      	bne.n	8002d9c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d4a:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <HAL_SPI_MspInit+0x80>)
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	4a16      	ldr	r2, [pc, #88]	@ (8002da8 <HAL_SPI_MspInit+0x80>)
 8002d50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d56:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <HAL_SPI_MspInit+0x80>)
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d62:	4b11      	ldr	r3, [pc, #68]	@ (8002da8 <HAL_SPI_MspInit+0x80>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	4a10      	ldr	r2, [pc, #64]	@ (8002da8 <HAL_SPI_MspInit+0x80>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002da8 <HAL_SPI_MspInit+0x80>)
 8002d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d7a:	23e0      	movs	r3, #224	@ 0xe0
 8002d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d82:	2301      	movs	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d8a:	2305      	movs	r3, #5
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	4619      	mov	r1, r3
 8002d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d98:	f003 fe40 	bl	8006a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3728      	adds	r7, #40	@ 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40013000 	.word	0x40013000
 8002da8:	40021000 	.word	0x40021000

08002dac <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af04      	add	r7, sp, #16
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2178      	movs	r1, #120	@ 0x78
 8002dda:	4803      	ldr	r0, [pc, #12]	@ (8002de8 <ssd1306_WriteCommand+0x2c>)
 8002ddc:	f004 f89e 	bl	8006f1c <HAL_I2C_Mem_Write>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000390 	.word	0x20000390

08002dec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af04      	add	r7, sp, #16
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2301      	movs	r3, #1
 8002e08:	2240      	movs	r2, #64	@ 0x40
 8002e0a:	2178      	movs	r1, #120	@ 0x78
 8002e0c:	4803      	ldr	r0, [pc, #12]	@ (8002e1c <ssd1306_WriteData+0x30>)
 8002e0e:	f004 f885 	bl	8006f1c <HAL_I2C_Mem_Write>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000390 	.word	0x20000390

08002e20 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002e24:	f7ff ffc2 	bl	8002dac <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002e28:	2064      	movs	r0, #100	@ 0x64
 8002e2a:	f001 fd01 	bl	8004830 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f000 f9ce 	bl	80031d0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002e34:	2020      	movs	r0, #32
 8002e36:	f7ff ffc1 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7ff ffbe 	bl	8002dbc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e40:	20b0      	movs	r0, #176	@ 0xb0
 8002e42:	f7ff ffbb 	bl	8002dbc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002e46:	20c8      	movs	r0, #200	@ 0xc8
 8002e48:	f7ff ffb8 	bl	8002dbc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7ff ffb5 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002e52:	2010      	movs	r0, #16
 8002e54:	f7ff ffb2 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002e58:	2040      	movs	r0, #64	@ 0x40
 8002e5a:	f7ff ffaf 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002e5e:	20ff      	movs	r0, #255	@ 0xff
 8002e60:	f000 f9a2 	bl	80031a8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002e64:	20a1      	movs	r0, #161	@ 0xa1
 8002e66:	f7ff ffa9 	bl	8002dbc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002e6a:	20a6      	movs	r0, #166	@ 0xa6
 8002e6c:	f7ff ffa6 	bl	8002dbc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002e70:	20a8      	movs	r0, #168	@ 0xa8
 8002e72:	f7ff ffa3 	bl	8002dbc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002e76:	203f      	movs	r0, #63	@ 0x3f
 8002e78:	f7ff ffa0 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e7c:	20a4      	movs	r0, #164	@ 0xa4
 8002e7e:	f7ff ff9d 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002e82:	20d3      	movs	r0, #211	@ 0xd3
 8002e84:	f7ff ff9a 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7ff ff97 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e8e:	20d5      	movs	r0, #213	@ 0xd5
 8002e90:	f7ff ff94 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002e94:	20f0      	movs	r0, #240	@ 0xf0
 8002e96:	f7ff ff91 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002e9a:	20d9      	movs	r0, #217	@ 0xd9
 8002e9c:	f7ff ff8e 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002ea0:	2022      	movs	r0, #34	@ 0x22
 8002ea2:	f7ff ff8b 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002ea6:	20da      	movs	r0, #218	@ 0xda
 8002ea8:	f7ff ff88 	bl	8002dbc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002eac:	2012      	movs	r0, #18
 8002eae:	f7ff ff85 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002eb2:	20db      	movs	r0, #219	@ 0xdb
 8002eb4:	f7ff ff82 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002eb8:	2020      	movs	r0, #32
 8002eba:	f7ff ff7f 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002ebe:	208d      	movs	r0, #141	@ 0x8d
 8002ec0:	f7ff ff7c 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002ec4:	2014      	movs	r0, #20
 8002ec6:	f7ff ff79 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f000 f980 	bl	80031d0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f000 f80f 	bl	8002ef4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002ed6:	f000 f825 	bl	8002f24 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002eda:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <ssd1306_Init+0xd0>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <ssd1306_Init+0xd0>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002ee6:	4b02      	ldr	r3, [pc, #8]	@ (8002ef0 <ssd1306_Init+0xd0>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	711a      	strb	r2, [r3, #4]
}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000ce8 	.word	0x20000ce8

08002ef4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <ssd1306_Fill+0x14>
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <ssd1306_Fill+0x16>
 8002f08:	23ff      	movs	r3, #255	@ 0xff
 8002f0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4803      	ldr	r0, [pc, #12]	@ (8002f20 <ssd1306_Fill+0x2c>)
 8002f12:	f00c fd97 	bl	800fa44 <memset>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200008e8 	.word	0x200008e8

08002f24 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	71fb      	strb	r3, [r7, #7]
 8002f2e:	e016      	b.n	8002f5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	3b50      	subs	r3, #80	@ 0x50
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ff40 	bl	8002dbc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff ff3d 	bl	8002dbc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002f42:	2010      	movs	r0, #16
 8002f44:	f7ff ff3a 	bl	8002dbc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	01db      	lsls	r3, r3, #7
 8002f4c:	4a08      	ldr	r2, [pc, #32]	@ (8002f70 <ssd1306_UpdateScreen+0x4c>)
 8002f4e:	4413      	add	r3, r2
 8002f50:	2180      	movs	r1, #128	@ 0x80
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff4a 	bl	8002dec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	71fb      	strb	r3, [r7, #7]
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	d9e5      	bls.n	8002f30 <ssd1306_UpdateScreen+0xc>
    }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200008e8 	.word	0x200008e8

08002f74 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	71bb      	strb	r3, [r7, #6]
 8002f82:	4613      	mov	r3, r2
 8002f84:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db3d      	blt.n	800300a <ssd1306_DrawPixel+0x96>
 8002f8e:	79bb      	ldrb	r3, [r7, #6]
 8002f90:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f92:	d83a      	bhi.n	800300a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002f94:	797b      	ldrb	r3, [r7, #5]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d11a      	bne.n	8002fd0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	79bb      	ldrb	r3, [r7, #6]
 8002f9e:	08db      	lsrs	r3, r3, #3
 8002fa0:	b2d8      	uxtb	r0, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	01db      	lsls	r3, r3, #7
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8003018 <ssd1306_DrawPixel+0xa4>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	b25a      	sxtb	r2, r3
 8002fae:	79bb      	ldrb	r3, [r7, #6]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	b25b      	sxtb	r3, r3
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b259      	sxtb	r1, r3
 8002fc0:	79fa      	ldrb	r2, [r7, #7]
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	01db      	lsls	r3, r3, #7
 8002fc6:	4413      	add	r3, r2
 8002fc8:	b2c9      	uxtb	r1, r1
 8002fca:	4a13      	ldr	r2, [pc, #76]	@ (8003018 <ssd1306_DrawPixel+0xa4>)
 8002fcc:	54d1      	strb	r1, [r2, r3]
 8002fce:	e01d      	b.n	800300c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002fd0:	79fa      	ldrb	r2, [r7, #7]
 8002fd2:	79bb      	ldrb	r3, [r7, #6]
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	b2d8      	uxtb	r0, r3
 8002fd8:	4603      	mov	r3, r0
 8002fda:	01db      	lsls	r3, r3, #7
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a0e      	ldr	r2, [pc, #56]	@ (8003018 <ssd1306_DrawPixel+0xa4>)
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
 8002fe2:	b25a      	sxtb	r2, r3
 8002fe4:	79bb      	ldrb	r3, [r7, #6]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	b259      	sxtb	r1, r3
 8002ffa:	79fa      	ldrb	r2, [r7, #7]
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	01db      	lsls	r3, r3, #7
 8003000:	4413      	add	r3, r2
 8003002:	b2c9      	uxtb	r1, r1
 8003004:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <ssd1306_DrawPixel+0xa4>)
 8003006:	54d1      	strb	r1, [r2, r3]
 8003008:	e000      	b.n	800300c <ssd1306_DrawPixel+0x98>
        return;
 800300a:	bf00      	nop
    }
}
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	200008e8 	.word	0x200008e8

0800301c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	4604      	mov	r4, r0
 8003024:	1d38      	adds	r0, r7, #4
 8003026:	e880 0006 	stmia.w	r0, {r1, r2}
 800302a:	461a      	mov	r2, r3
 800302c:	4623      	mov	r3, r4
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	4613      	mov	r3, r2
 8003032:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b1f      	cmp	r3, #31
 8003038:	d902      	bls.n	8003040 <ssd1306_WriteChar+0x24>
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b7e      	cmp	r3, #126	@ 0x7e
 800303e:	d901      	bls.n	8003044 <ssd1306_WriteChar+0x28>
        return 0;
 8003040:	2300      	movs	r3, #0
 8003042:	e06c      	b.n	800311e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003044:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	793b      	ldrb	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	2b80      	cmp	r3, #128	@ 0x80
 8003050:	dc06      	bgt.n	8003060 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003052:	4b35      	ldr	r3, [pc, #212]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 8003054:	885b      	ldrh	r3, [r3, #2]
 8003056:	461a      	mov	r2, r3
 8003058:	797b      	ldrb	r3, [r7, #5]
 800305a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800305c:	2b40      	cmp	r3, #64	@ 0x40
 800305e:	dd01      	ble.n	8003064 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003060:	2300      	movs	r3, #0
 8003062:	e05c      	b.n	800311e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e04c      	b.n	8003104 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	3b20      	subs	r3, #32
 8003070:	7979      	ldrb	r1, [r7, #5]
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4619      	mov	r1, r3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	440b      	add	r3, r1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4413      	add	r3, r2
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e034      	b.n	80030f4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800309a:	4b23      	ldr	r3, [pc, #140]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	b2d8      	uxtb	r0, r3
 80030a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 80030aa:	885b      	ldrh	r3, [r3, #2]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	7bba      	ldrb	r2, [r7, #14]
 80030b8:	4619      	mov	r1, r3
 80030ba:	f7ff ff5b 	bl	8002f74 <ssd1306_DrawPixel>
 80030be:	e016      	b.n	80030ee <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	b2d8      	uxtb	r0, r3
 80030ce:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 80030d0:	885b      	ldrh	r3, [r3, #2]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4413      	add	r3, r2
 80030da:	b2d9      	uxtb	r1, r3
 80030dc:	7bbb      	ldrb	r3, [r7, #14]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	f7ff ff43 	bl	8002f74 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	793b      	ldrb	r3, [r7, #4]
 80030f6:	461a      	mov	r2, r3
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d3c5      	bcc.n	800308a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	797b      	ldrb	r3, [r7, #5]
 8003106:	461a      	mov	r2, r3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4293      	cmp	r3, r2
 800310c:	d3ad      	bcc.n	800306a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	793a      	ldrb	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 800311a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	@ 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	bf00      	nop
 8003128:	20000ce8 	.word	0x20000ce8

0800312c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	1d38      	adds	r0, r7, #4
 8003136:	e880 0006 	stmia.w	r0, {r1, r2}
 800313a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800313c:	e012      	b.n	8003164 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	7818      	ldrb	r0, [r3, #0]
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	1d3a      	adds	r2, r7, #4
 8003146:	ca06      	ldmia	r2, {r1, r2}
 8003148:	f7ff ff68 	bl	800301c <ssd1306_WriteChar>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d002      	beq.n	800315e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	e008      	b.n	8003170 <ssd1306_WriteString+0x44>
        }
        str++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3301      	adds	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e8      	bne.n	800313e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	781b      	ldrb	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	460a      	mov	r2, r1
 8003182:	71fb      	strb	r3, [r7, #7]
 8003184:	4613      	mov	r3, r2
 8003186:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <ssd1306_SetCursor+0x2c>)
 800318e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003190:	79bb      	ldrb	r3, [r7, #6]
 8003192:	b29a      	uxth	r2, r3
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <ssd1306_SetCursor+0x2c>)
 8003196:	805a      	strh	r2, [r3, #2]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000ce8 	.word	0x20000ce8

080031a8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80031b2:	2381      	movs	r3, #129	@ 0x81
 80031b4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fdff 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fdfb 	bl	8002dbc <ssd1306_WriteCommand>
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80031e0:	23af      	movs	r3, #175	@ 0xaf
 80031e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80031e4:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <ssd1306_SetDisplayOn+0x38>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	715a      	strb	r2, [r3, #5]
 80031ea:	e004      	b.n	80031f6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80031ec:	23ae      	movs	r3, #174	@ 0xae
 80031ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80031f0:	4b05      	ldr	r3, [pc, #20]	@ (8003208 <ssd1306_SetDisplayOn+0x38>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fddf 	bl	8002dbc <ssd1306_WriteCommand>
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000ce8 	.word	0x20000ce8

0800320c <statemachine>:
int datascreenindex=0;




void statemachine(void){
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af04      	add	r7, sp, #16

	switch(state){
 8003212:	4ba1      	ldr	r3, [pc, #644]	@ (8003498 <statemachine+0x28c>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b02      	cmp	r3, #2
 8003218:	f000 8137 	beq.w	800348a <statemachine+0x27e>
 800321c:	2b02      	cmp	r3, #2
 800321e:	f300 8137 	bgt.w	8003490 <statemachine+0x284>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <statemachine+0x1e>
 8003226:	2b01      	cmp	r3, #1

#endif



		break;
 8003228:	e132      	b.n	8003490 <statemachine+0x284>
		ssd1306_Fill(Black);
 800322a:	2000      	movs	r0, #0
 800322c:	f7ff fe62 	bl	8002ef4 <ssd1306_Fill>
		ssd1306_SetCursor(32, 32);
 8003230:	2120      	movs	r1, #32
 8003232:	2020      	movs	r0, #32
 8003234:	f7ff ffa0 	bl	8003178 <ssd1306_SetCursor>
switch(screenindex){
 8003238:	4b98      	ldr	r3, [pc, #608]	@ (800349c <statemachine+0x290>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b03      	cmp	r3, #3
 800323e:	f200 808e 	bhi.w	800335e <statemachine+0x152>
 8003242:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <statemachine+0x3c>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	08003259 	.word	0x08003259
 800324c:	080032ad 	.word	0x080032ad
 8003250:	080032f3 	.word	0x080032f3
 8003254:	0800333b 	.word	0x0800333b
	if (vbat <= 7){
 8003258:	4b91      	ldr	r3, [pc, #580]	@ (80034a0 <statemachine+0x294>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8003262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	d900      	bls.n	800326e <statemachine+0x62>
	break;
 800326c:	e077      	b.n	800335e <statemachine+0x152>
					ssd1306_WriteString("bat_low", Font_7x10, White);
 800326e:	4a8d      	ldr	r2, [pc, #564]	@ (80034a4 <statemachine+0x298>)
 8003270:	2301      	movs	r3, #1
 8003272:	ca06      	ldmia	r2, {r1, r2}
 8003274:	488c      	ldr	r0, [pc, #560]	@ (80034a8 <statemachine+0x29c>)
 8003276:	f7ff ff59 	bl	800312c <ssd1306_WriteString>
					create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x30,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 800327a:	2300      	movs	r3, #0
 800327c:	9302      	str	r3, [sp, #8]
 800327e:	2300      	movs	r3, #0
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	2300      	movs	r3, #0
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	eddf 2a89 	vldr	s5, [pc, #548]	@ 80034ac <statemachine+0x2a0>
 800328a:	ed9f 2a88 	vldr	s4, [pc, #544]	@ 80034ac <statemachine+0x2a0>
 800328e:	eddf 1a87 	vldr	s3, [pc, #540]	@ 80034ac <statemachine+0x2a0>
 8003292:	ed9f 1a86 	vldr	s2, [pc, #536]	@ 80034ac <statemachine+0x2a0>
 8003296:	eddf 0a85 	vldr	s1, [pc, #532]	@ 80034ac <statemachine+0x2a0>
 800329a:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 80034ac <statemachine+0x2a0>
 800329e:	2330      	movs	r3, #48	@ 0x30
 80032a0:	2201      	movs	r2, #1
 80032a2:	2182      	movs	r1, #130	@ 0x82
 80032a4:	4882      	ldr	r0, [pc, #520]	@ (80034b0 <statemachine+0x2a4>)
 80032a6:	f000 fd09 	bl	8003cbc <create_and_send_payload>
	break;
 80032aa:	e058      	b.n	800335e <statemachine+0x152>
	if(flag_calib==0){
 80032ac:	4b81      	ldr	r3, [pc, #516]	@ (80034b4 <statemachine+0x2a8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d151      	bne.n	8003358 <statemachine+0x14c>
					ssd1306_WriteString("alt_calib", Font_7x10, White);
 80032b4:	4a7b      	ldr	r2, [pc, #492]	@ (80034a4 <statemachine+0x298>)
 80032b6:	2301      	movs	r3, #1
 80032b8:	ca06      	ldmia	r2, {r1, r2}
 80032ba:	487f      	ldr	r0, [pc, #508]	@ (80034b8 <statemachine+0x2ac>)
 80032bc:	f7ff ff36 	bl	800312c <ssd1306_WriteString>
					create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x30,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 80032c0:	2300      	movs	r3, #0
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	2300      	movs	r3, #0
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	2300      	movs	r3, #0
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	eddf 2a77 	vldr	s5, [pc, #476]	@ 80034ac <statemachine+0x2a0>
 80032d0:	ed9f 2a76 	vldr	s4, [pc, #472]	@ 80034ac <statemachine+0x2a0>
 80032d4:	eddf 1a75 	vldr	s3, [pc, #468]	@ 80034ac <statemachine+0x2a0>
 80032d8:	ed9f 1a74 	vldr	s2, [pc, #464]	@ 80034ac <statemachine+0x2a0>
 80032dc:	eddf 0a73 	vldr	s1, [pc, #460]	@ 80034ac <statemachine+0x2a0>
 80032e0:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 80034ac <statemachine+0x2a0>
 80032e4:	2330      	movs	r3, #48	@ 0x30
 80032e6:	2201      	movs	r2, #1
 80032e8:	2182      	movs	r1, #130	@ 0x82
 80032ea:	4871      	ldr	r0, [pc, #452]	@ (80034b0 <statemachine+0x2a4>)
 80032ec:	f000 fce6 	bl	8003cbc <create_and_send_payload>
	break;
 80032f0:	e032      	b.n	8003358 <statemachine+0x14c>
	if (GNSSData.fixType <= 2){
 80032f2:	4b72      	ldr	r3, [pc, #456]	@ (80034bc <statemachine+0x2b0>)
 80032f4:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d82f      	bhi.n	800335c <statemachine+0x150>
		ssd1306_WriteString("gps_fix", Font_7x10, White);
 80032fc:	4a69      	ldr	r2, [pc, #420]	@ (80034a4 <statemachine+0x298>)
 80032fe:	2301      	movs	r3, #1
 8003300:	ca06      	ldmia	r2, {r1, r2}
 8003302:	486f      	ldr	r0, [pc, #444]	@ (80034c0 <statemachine+0x2b4>)
 8003304:	f7ff ff12 	bl	800312c <ssd1306_WriteString>
		create_and_send_payload((uint8_t *) tarvos_TX_Buffer,0x82,GROUND_ADDR,0x30,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0);
 8003308:	2300      	movs	r3, #0
 800330a:	9302      	str	r3, [sp, #8]
 800330c:	2300      	movs	r3, #0
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2300      	movs	r3, #0
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	eddf 2a65 	vldr	s5, [pc, #404]	@ 80034ac <statemachine+0x2a0>
 8003318:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 80034ac <statemachine+0x2a0>
 800331c:	eddf 1a63 	vldr	s3, [pc, #396]	@ 80034ac <statemachine+0x2a0>
 8003320:	ed9f 1a62 	vldr	s2, [pc, #392]	@ 80034ac <statemachine+0x2a0>
 8003324:	eddf 0a61 	vldr	s1, [pc, #388]	@ 80034ac <statemachine+0x2a0>
 8003328:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 80034ac <statemachine+0x2a0>
 800332c:	2330      	movs	r3, #48	@ 0x30
 800332e:	2201      	movs	r2, #1
 8003330:	2182      	movs	r1, #130	@ 0x82
 8003332:	485f      	ldr	r0, [pc, #380]	@ (80034b0 <statemachine+0x2a4>)
 8003334:	f000 fcc2 	bl	8003cbc <create_and_send_payload>
	break;
 8003338:	e010      	b.n	800335c <statemachine+0x150>
	if(HAL_GPIO_ReadPin(PWEN_GPIO_Port,PWEN_Pin)==0){//marche pas encore
 800333a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800333e:	4861      	ldr	r0, [pc, #388]	@ (80034c4 <statemachine+0x2b8>)
 8003340:	f003 fcee 	bl	8006d20 <HAL_GPIO_ReadPin>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <statemachine+0x152>
		ssd1306_WriteString("TELEPWR", Font_7x10, White);
 800334a:	4a56      	ldr	r2, [pc, #344]	@ (80034a4 <statemachine+0x298>)
 800334c:	2301      	movs	r3, #1
 800334e:	ca06      	ldmia	r2, {r1, r2}
 8003350:	485d      	ldr	r0, [pc, #372]	@ (80034c8 <statemachine+0x2bc>)
 8003352:	f7ff feeb 	bl	800312c <ssd1306_WriteString>
 8003356:	e002      	b.n	800335e <statemachine+0x152>
	break;
 8003358:	bf00      	nop
 800335a:	e000      	b.n	800335e <statemachine+0x152>
	break;
 800335c:	bf00      	nop
ssd1306_SetCursor(32, 42);
 800335e:	212a      	movs	r1, #42	@ 0x2a
 8003360:	2020      	movs	r0, #32
 8003362:	f7ff ff09 	bl	8003178 <ssd1306_SetCursor>
if(datascreenindex<=10){
 8003366:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <statemachine+0x2c0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b0a      	cmp	r3, #10
 800336c:	dc1e      	bgt.n	80033ac <statemachine+0x1a0>
	ssd1306_WriteString("bmpalt:", Font_7x10, White);
 800336e:	4a4d      	ldr	r2, [pc, #308]	@ (80034a4 <statemachine+0x298>)
 8003370:	2301      	movs	r3, #1
 8003372:	ca06      	ldmia	r2, {r1, r2}
 8003374:	4856      	ldr	r0, [pc, #344]	@ (80034d0 <statemachine+0x2c4>)
 8003376:	f7ff fed9 	bl	800312c <ssd1306_WriteString>
	ssd1306_SetCursor(32, 52);
 800337a:	2134      	movs	r1, #52	@ 0x34
 800337c:	2020      	movs	r0, #32
 800337e:	f7ff fefb 	bl	8003178 <ssd1306_SetCursor>
    	snprintf((char *)screenbuffer,50,"%0.3f",myDatabmp581.altitude);
 8003382:	4b54      	ldr	r3, [pc, #336]	@ (80034d4 <statemachine+0x2c8>)
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f906 	bl	8000598 <__aeabi_f2d>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	e9cd 2300 	strd	r2, r3, [sp]
 8003394:	4a50      	ldr	r2, [pc, #320]	@ (80034d8 <statemachine+0x2cc>)
 8003396:	2132      	movs	r1, #50	@ 0x32
 8003398:	4850      	ldr	r0, [pc, #320]	@ (80034dc <statemachine+0x2d0>)
 800339a:	f00c fa23 	bl	800f7e4 <sniprintf>
    	ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 800339e:	4a41      	ldr	r2, [pc, #260]	@ (80034a4 <statemachine+0x298>)
 80033a0:	2301      	movs	r3, #1
 80033a2:	ca06      	ldmia	r2, {r1, r2}
 80033a4:	484d      	ldr	r0, [pc, #308]	@ (80034dc <statemachine+0x2d0>)
 80033a6:	f7ff fec1 	bl	800312c <ssd1306_WriteString>
 80033aa:	e047      	b.n	800343c <statemachine+0x230>
else if(datascreenindex>10 && datascreenindex<=20){
 80033ac:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <statemachine+0x2c0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b0a      	cmp	r3, #10
 80033b2:	dd26      	ble.n	8003402 <statemachine+0x1f6>
 80033b4:	4b45      	ldr	r3, [pc, #276]	@ (80034cc <statemachine+0x2c0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b14      	cmp	r3, #20
 80033ba:	dc22      	bgt.n	8003402 <statemachine+0x1f6>
		if(flag_calib){
 80033bc:	4b3d      	ldr	r3, [pc, #244]	@ (80034b4 <statemachine+0x2a8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03b      	beq.n	800343c <statemachine+0x230>
			ssd1306_WriteString("h_init:", Font_7x10, White);
 80033c4:	4a37      	ldr	r2, [pc, #220]	@ (80034a4 <statemachine+0x298>)
 80033c6:	2301      	movs	r3, #1
 80033c8:	ca06      	ldmia	r2, {r1, r2}
 80033ca:	4845      	ldr	r0, [pc, #276]	@ (80034e0 <statemachine+0x2d4>)
 80033cc:	f7ff feae 	bl	800312c <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 80033d0:	2134      	movs	r1, #52	@ 0x34
 80033d2:	2020      	movs	r0, #32
 80033d4:	f7ff fed0 	bl	8003178 <ssd1306_SetCursor>
			snprintf((char *)screenbuffer,50,"%0.1f",hauteur_Initiale);
 80033d8:	4b42      	ldr	r3, [pc, #264]	@ (80034e4 <statemachine+0x2d8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f8db 	bl	8000598 <__aeabi_f2d>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	e9cd 2300 	strd	r2, r3, [sp]
 80033ea:	4a3f      	ldr	r2, [pc, #252]	@ (80034e8 <statemachine+0x2dc>)
 80033ec:	2132      	movs	r1, #50	@ 0x32
 80033ee:	483b      	ldr	r0, [pc, #236]	@ (80034dc <statemachine+0x2d0>)
 80033f0:	f00c f9f8 	bl	800f7e4 <sniprintf>
			ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 80033f4:	4a2b      	ldr	r2, [pc, #172]	@ (80034a4 <statemachine+0x298>)
 80033f6:	2301      	movs	r3, #1
 80033f8:	ca06      	ldmia	r2, {r1, r2}
 80033fa:	4838      	ldr	r0, [pc, #224]	@ (80034dc <statemachine+0x2d0>)
 80033fc:	f7ff fe96 	bl	800312c <ssd1306_WriteString>
		if(flag_calib){
 8003400:	e01c      	b.n	800343c <statemachine+0x230>
    	if(GNSSData.fixType>=3){
 8003402:	4b2e      	ldr	r3, [pc, #184]	@ (80034bc <statemachine+0x2b0>)
 8003404:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8003408:	2b02      	cmp	r3, #2
 800340a:	d917      	bls.n	800343c <statemachine+0x230>
    		ssd1306_WriteString("sat:", Font_7x10, White);
 800340c:	4a25      	ldr	r2, [pc, #148]	@ (80034a4 <statemachine+0x298>)
 800340e:	2301      	movs	r3, #1
 8003410:	ca06      	ldmia	r2, {r1, r2}
 8003412:	4836      	ldr	r0, [pc, #216]	@ (80034ec <statemachine+0x2e0>)
 8003414:	f7ff fe8a 	bl	800312c <ssd1306_WriteString>
    			ssd1306_SetCursor(32, 52);
 8003418:	2134      	movs	r1, #52	@ 0x34
 800341a:	2020      	movs	r0, #32
 800341c:	f7ff feac 	bl	8003178 <ssd1306_SetCursor>
    		snprintf((char *)screenbuffer,50,"%d",GNSSData.numSV);
 8003420:	4b26      	ldr	r3, [pc, #152]	@ (80034bc <statemachine+0x2b0>)
 8003422:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8003426:	4a32      	ldr	r2, [pc, #200]	@ (80034f0 <statemachine+0x2e4>)
 8003428:	2132      	movs	r1, #50	@ 0x32
 800342a:	482c      	ldr	r0, [pc, #176]	@ (80034dc <statemachine+0x2d0>)
 800342c:	f00c f9da 	bl	800f7e4 <sniprintf>
    		ssd1306_WriteString((char *) screenbuffer, Font_7x10, White);
 8003430:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <statemachine+0x298>)
 8003432:	2301      	movs	r3, #1
 8003434:	ca06      	ldmia	r2, {r1, r2}
 8003436:	4829      	ldr	r0, [pc, #164]	@ (80034dc <statemachine+0x2d0>)
 8003438:	f7ff fe78 	bl	800312c <ssd1306_WriteString>
			if((flag_drop==1) && (flag_calib==1)){
 800343c:	4b2d      	ldr	r3, [pc, #180]	@ (80034f4 <statemachine+0x2e8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d109      	bne.n	8003458 <statemachine+0x24c>
 8003444:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <statemachine+0x2a8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <statemachine+0x24c>
				state++;
 800344c:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <statemachine+0x28c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3301      	adds	r3, #1
 8003452:	b2da      	uxtb	r2, r3
 8003454:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <statemachine+0x28c>)
 8003456:	701a      	strb	r2, [r3, #0]
			screenindex++;
 8003458:	4b10      	ldr	r3, [pc, #64]	@ (800349c <statemachine+0x290>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	4a0f      	ldr	r2, [pc, #60]	@ (800349c <statemachine+0x290>)
 8003460:	6013      	str	r3, [r2, #0]
			if(screenindex>3){
 8003462:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <statemachine+0x290>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b03      	cmp	r3, #3
 8003468:	dd02      	ble.n	8003470 <statemachine+0x264>
				screenindex=0;
 800346a:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <statemachine+0x290>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
			datascreenindex++;
 8003470:	4b16      	ldr	r3, [pc, #88]	@ (80034cc <statemachine+0x2c0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	4a15      	ldr	r2, [pc, #84]	@ (80034cc <statemachine+0x2c0>)
 8003478:	6013      	str	r3, [r2, #0]
			if(datascreenindex>=30){
 800347a:	4b14      	ldr	r3, [pc, #80]	@ (80034cc <statemachine+0x2c0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b1d      	cmp	r3, #29
 8003480:	dd05      	ble.n	800348e <statemachine+0x282>
				datascreenindex=0;
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <statemachine+0x2c0>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
		break;
 8003488:	e001      	b.n	800348e <statemachine+0x282>


#endif


		break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <statemachine+0x284>
		break;
 800348e:	bf00      	nop


	}


}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000854 	.word	0x20000854
 800349c:	20000d24 	.word	0x20000d24
 80034a0:	200003f8 	.word	0x200003f8
 80034a4:	20000010 	.word	0x20000010
 80034a8:	08014b24 	.word	0x08014b24
 80034ac:	00000000 	.word	0x00000000
 80034b0:	200003fc 	.word	0x200003fc
 80034b4:	20000860 	.word	0x20000860
 80034b8:	08014b2c 	.word	0x08014b2c
 80034bc:	2000064c 	.word	0x2000064c
 80034c0:	08014b38 	.word	0x08014b38
 80034c4:	48000400 	.word	0x48000400
 80034c8:	08014b40 	.word	0x08014b40
 80034cc:	20000d28 	.word	0x20000d28
 80034d0:	08014b48 	.word	0x08014b48
 80034d4:	2000056c 	.word	0x2000056c
 80034d8:	08014b50 	.word	0x08014b50
 80034dc:	20000cf0 	.word	0x20000cf0
 80034e0:	08014b58 	.word	0x08014b58
 80034e4:	20000870 	.word	0x20000870
 80034e8:	08014b60 	.word	0x08014b60
 80034ec:	08014b68 	.word	0x08014b68
 80034f0:	08014b70 	.word	0x08014b70
 80034f4:	20000858 	.word	0x20000858

080034f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_MspInit+0x50>)
 8003500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003502:	4a11      	ldr	r2, [pc, #68]	@ (8003548 <HAL_MspInit+0x50>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6613      	str	r3, [r2, #96]	@ 0x60
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <HAL_MspInit+0x50>)
 800350c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <HAL_MspInit+0x50>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	4a0b      	ldr	r2, [pc, #44]	@ (8003548 <HAL_MspInit+0x50>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	@ 0x58
 8003522:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <HAL_MspInit+0x50>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	210f      	movs	r1, #15
 8003532:	f06f 0001 	mvn.w	r0, #1
 8003536:	f002 ff0b 	bl	8006350 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800353a:	f004 fb1b 	bl	8007b74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40021000 	.word	0x40021000

0800354c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	@ 0x30
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800355c:	4b2c      	ldr	r3, [pc, #176]	@ (8003610 <HAL_InitTick+0xc4>)
 800355e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003560:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <HAL_InitTick+0xc4>)
 8003562:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003566:	6613      	str	r3, [r2, #96]	@ 0x60
 8003568:	4b29      	ldr	r3, [pc, #164]	@ (8003610 <HAL_InitTick+0xc4>)
 800356a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003574:	f107 020c 	add.w	r2, r7, #12
 8003578:	f107 0310 	add.w	r3, r7, #16
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f004 ffee 	bl	8008560 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003584:	f004 ffd6 	bl	8008534 <HAL_RCC_GetPCLK2Freq>
 8003588:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	4a21      	ldr	r2, [pc, #132]	@ (8003614 <HAL_InitTick+0xc8>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0c9b      	lsrs	r3, r3, #18
 8003594:	3b01      	subs	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003598:	4b1f      	ldr	r3, [pc, #124]	@ (8003618 <HAL_InitTick+0xcc>)
 800359a:	4a20      	ldr	r2, [pc, #128]	@ (800361c <HAL_InitTick+0xd0>)
 800359c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800359e:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <HAL_InitTick+0xcc>)
 80035a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80035a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80035a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003618 <HAL_InitTick+0xcc>)
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80035ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <HAL_InitTick+0xcc>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b2:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <HAL_InitTick+0xcc>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80035b8:	4817      	ldr	r0, [pc, #92]	@ (8003618 <HAL_InitTick+0xcc>)
 80035ba:	f005 fae2 	bl	8008b82 <HAL_TIM_Base_Init>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80035c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d11b      	bne.n	8003604 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80035cc:	4812      	ldr	r0, [pc, #72]	@ (8003618 <HAL_InitTick+0xcc>)
 80035ce:	f005 fb2f 	bl	8008c30 <HAL_TIM_Base_Start_IT>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80035d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d111      	bne.n	8003604 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80035e0:	2019      	movs	r0, #25
 80035e2:	f002 fecf 	bl	8006384 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b0f      	cmp	r3, #15
 80035ea:	d808      	bhi.n	80035fe <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80035ec:	2200      	movs	r2, #0
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	2019      	movs	r0, #25
 80035f2:	f002 fead 	bl	8006350 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <HAL_InitTick+0xd4>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e002      	b.n	8003604 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003608:	4618      	mov	r0, r3
 800360a:	3730      	adds	r7, #48	@ 0x30
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000
 8003614:	431bde83 	.word	0x431bde83
 8003618:	20000d2c 	.word	0x20000d2c
 800361c:	40012c00 	.word	0x40012c00
 8003620:	2000001c 	.word	0x2000001c

08003624 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003628:	4b0e      	ldr	r3, [pc, #56]	@ (8003664 <SDTimer_Handler+0x40>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d006      	beq.n	8003640 <SDTimer_Handler+0x1c>
    Timer1--;
 8003632:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <SDTimer_Handler+0x40>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <SDTimer_Handler+0x40>)
 800363e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003640:	4b09      	ldr	r3, [pc, #36]	@ (8003668 <SDTimer_Handler+0x44>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d006      	beq.n	8003658 <SDTimer_Handler+0x34>
    Timer2--;
 800364a:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <SDTimer_Handler+0x44>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <SDTimer_Handler+0x44>)
 8003656:	701a      	strb	r2, [r3, #0]
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000339 	.word	0x20000339
 8003668:	2000033a 	.word	0x2000033a

0800366c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <NMI_Handler+0x4>

08003674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 32);
 8003678:	2120      	movs	r1, #32
 800367a:	2020      	movs	r0, #32
 800367c:	f7ff fd7c 	bl	8003178 <ssd1306_SetCursor>
	 	  ssd1306_Fill(Black);
 8003680:	2000      	movs	r0, #0
 8003682:	f7ff fc37 	bl	8002ef4 <ssd1306_Fill>
	 	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8003686:	4a05      	ldr	r2, [pc, #20]	@ (800369c <HardFault_Handler+0x28>)
 8003688:	2301      	movs	r3, #1
 800368a:	ca06      	ldmia	r2, {r1, r2}
 800368c:	4804      	ldr	r0, [pc, #16]	@ (80036a0 <HardFault_Handler+0x2c>)
 800368e:	f7ff fd4d 	bl	800312c <ssd1306_WriteString>
	 	  ssd1306_UpdateScreen();
 8003692:	f7ff fc47 	bl	8002f24 <ssd1306_UpdateScreen>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003696:	bf00      	nop
 8003698:	e7fd      	b.n	8003696 <HardFault_Handler+0x22>
 800369a:	bf00      	nop
 800369c:	20000010 	.word	0x20000010
 80036a0:	08014b74 	.word	0x08014b74

080036a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <MemManage_Handler+0x4>

080036ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <BusFault_Handler+0x4>

080036b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <UsageFault_Handler+0x4>

080036bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80036ce:	2002      	movs	r0, #2
 80036d0:	f003 fb70 	bl	8006db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80036dc:	2010      	movs	r0, #16
 80036de:	f003 fb69 	bl	8006db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 80036ec:	4802      	ldr	r0, [pc, #8]	@ (80036f8 <DMA1_Channel1_IRQHandler+0x10>)
 80036ee:	f003 f83a 	bl	8006766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000e6c 	.word	0x20000e6c

080036fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003700:	4802      	ldr	r0, [pc, #8]	@ (800370c <DMA1_Channel2_IRQHandler+0x10>)
 8003702:	f003 f830 	bl	8006766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2000029c 	.word	0x2000029c

08003710 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003714:	4802      	ldr	r0, [pc, #8]	@ (8003720 <DMA1_Channel3_IRQHandler+0x10>)
 8003716:	f003 f826 	bl	8006766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000ffc 	.word	0x20000ffc

08003724 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003728:	4802      	ldr	r0, [pc, #8]	@ (8003734 <DMA1_Channel5_IRQHandler+0x10>)
 800372a:	f003 f81c 	bl	8006766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2000105c 	.word	0x2000105c

08003738 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800373c:	4802      	ldr	r0, [pc, #8]	@ (8003748 <ADC1_2_IRQHandler+0x10>)
 800373e:	f001 fd11 	bl	8005164 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000230 	.word	0x20000230

0800374c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003750:	4802      	ldr	r0, [pc, #8]	@ (800375c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003752:	f005 ffdf 	bl	8009714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000d2c 	.word	0x20000d2c

08003760 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003764:	4802      	ldr	r0, [pc, #8]	@ (8003770 <TIM3_IRQHandler+0x10>)
 8003766:	f005 ffd5 	bl	8009714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000dd4 	.word	0x20000dd4

08003774 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	FatFsCnt++;
 8003778:	4b0a      	ldr	r3, [pc, #40]	@ (80037a4 <TIM4_IRQHandler+0x30>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	3301      	adds	r3, #1
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <TIM4_IRQHandler+0x30>)
 8003784:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <TIM4_IRQHandler+0x30>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b09      	cmp	r3, #9
 800378e:	d904      	bls.n	800379a <TIM4_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8003790:	4b04      	ldr	r3, [pc, #16]	@ (80037a4 <TIM4_IRQHandler+0x30>)
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8003796:	f7ff ff45 	bl	8003624 <SDTimer_Handler>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800379a:	4803      	ldr	r0, [pc, #12]	@ (80037a8 <TIM4_IRQHandler+0x34>)
 800379c:	f005 ffba 	bl	8009714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000d78 	.word	0x20000d78
 80037a8:	20000e20 	.word	0x20000e20

080037ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037b0:	4802      	ldr	r0, [pc, #8]	@ (80037bc <USART1_IRQHandler+0x10>)
 80037b2:	f007 fbb1 	bl	800af18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000f68 	.word	0x20000f68

080037c0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80037c4:	4802      	ldr	r0, [pc, #8]	@ (80037d0 <LPUART1_IRQHandler+0x10>)
 80037c6:	f007 fba7 	bl	800af18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000ed4 	.word	0x20000ed4

080037d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return 1;
 80037d8:	2301      	movs	r3, #1
}
 80037da:	4618      	mov	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <_kill>:

int _kill(int pid, int sig)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037ee:	f00c f97b 	bl	800fae8 <__errno>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2216      	movs	r2, #22
 80037f6:	601a      	str	r2, [r3, #0]
  return -1;
 80037f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <_exit>:

void _exit (int status)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800380c:	f04f 31ff 	mov.w	r1, #4294967295
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ffe7 	bl	80037e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <_exit+0x12>

0800381a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e00a      	b.n	8003842 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800382c:	f3af 8000 	nop.w
 8003830:	4601      	mov	r1, r0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	60ba      	str	r2, [r7, #8]
 8003838:	b2ca      	uxtb	r2, r1
 800383a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	3301      	adds	r3, #1
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	dbf0      	blt.n	800382c <_read+0x12>
  }

  return len;
 800384a:	687b      	ldr	r3, [r7, #4]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e009      	b.n	800387a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	60ba      	str	r2, [r7, #8]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3301      	adds	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	429a      	cmp	r2, r3
 8003880:	dbf1      	blt.n	8003866 <_write+0x12>
  }
  return len;
 8003882:	687b      	ldr	r3, [r7, #4]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_close>:

int _close(int file)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038b4:	605a      	str	r2, [r3, #4]
  return 0;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <_isatty>:

int _isatty(int file)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038cc:	2301      	movs	r3, #1
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038da:	b480      	push	{r7}
 80038dc:	b085      	sub	sp, #20
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038fc:	4a14      	ldr	r2, [pc, #80]	@ (8003950 <_sbrk+0x5c>)
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <_sbrk+0x60>)
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003908:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <_sbrk+0x64>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003910:	4b11      	ldr	r3, [pc, #68]	@ (8003958 <_sbrk+0x64>)
 8003912:	4a12      	ldr	r2, [pc, #72]	@ (800395c <_sbrk+0x68>)
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003916:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <_sbrk+0x64>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d207      	bcs.n	8003934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003924:	f00c f8e0 	bl	800fae8 <__errno>
 8003928:	4603      	mov	r3, r0
 800392a:	220c      	movs	r2, #12
 800392c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	e009      	b.n	8003948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003934:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <_sbrk+0x64>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800393a:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <_sbrk+0x64>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	4a05      	ldr	r2, [pc, #20]	@ (8003958 <_sbrk+0x64>)
 8003944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003946:	68fb      	ldr	r3, [r7, #12]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20008000 	.word	0x20008000
 8003954:	00000400 	.word	0x00000400
 8003958:	20000d7c 	.word	0x20000d7c
 800395c:	20003a88 	.word	0x20003a88

08003960 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003964:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <SystemInit+0x20>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	4a05      	ldr	r2, [pc, #20]	@ (8003980 <SystemInit+0x20>)
 800396c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b08e      	sub	sp, #56	@ 0x38
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	460a      	mov	r2, r1
 800398e:	71fb      	strb	r3, [r7, #7]
 8003990:	4613      	mov	r3, r2
 8003992:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 8003994:	2306      	movs	r3, #6
 8003996:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 800399a:	2304      	movs	r3, #4
 800399c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 80039a6:	4a6f      	ldr	r2, [pc, #444]	@ (8003b64 <INIT_PERM_TARVOS+0x1e0>)
 80039a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039b0:	6018      	str	r0, [r3, #0]
 80039b2:	3304      	adds	r3, #4
 80039b4:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 80039b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b68 <INIT_PERM_TARVOS+0x1e4>)
 80039b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039c0:	6018      	str	r0, [r3, #0]
 80039c2:	3304      	adds	r3, #4
 80039c4:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 80039c6:	4a69      	ldr	r2, [pc, #420]	@ (8003b6c <INIT_PERM_TARVOS+0x1e8>)
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039d0:	6018      	str	r0, [r3, #0]
 80039d2:	3304      	adds	r3, #4
 80039d4:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 80039d6:	2302      	movs	r3, #2
 80039d8:	753b      	strb	r3, [r7, #20]
 80039da:	2309      	movs	r3, #9
 80039dc:	757b      	strb	r3, [r7, #21]
 80039de:	2302      	movs	r3, #2
 80039e0:	75bb      	strb	r3, [r7, #22]
 80039e2:	230b      	movs	r3, #11
 80039e4:	75fb      	strb	r3, [r7, #23]
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	763b      	strb	r3, [r7, #24]
 80039ea:	2300      	movs	r3, #0
 80039ec:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 80039ee:	2302      	movs	r3, #2
 80039f0:	733b      	strb	r3, [r7, #12]
 80039f2:	2309      	movs	r3, #9
 80039f4:	737b      	strb	r3, [r7, #13]
 80039f6:	2302      	movs	r3, #2
 80039f8:	73bb      	strb	r3, [r7, #14]
 80039fa:	2308      	movs	r3, #8
 80039fc:	73fb      	strb	r3, [r7, #15]
 80039fe:	79bb      	ldrb	r3, [r7, #6]
 8003a00:	743b      	strb	r3, [r7, #16]
 8003a02:	2300      	movs	r3, #0
 8003a04:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8003a06:	4b5a      	ldr	r3, [pc, #360]	@ (8003b70 <INIT_PERM_TARVOS+0x1ec>)
 8003a08:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 8003a0a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f8ac 	bl	8003b78 <Get_CRC8>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 8003a26:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003a30:	2364      	movs	r3, #100	@ 0x64
 8003a32:	4850      	ldr	r0, [pc, #320]	@ (8003b74 <INIT_PERM_TARVOS+0x1f0>)
 8003a34:	f007 f83c 	bl	800aab0 <HAL_UART_Transmit>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 8003a44:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f88f 	bl	8003b78 <Get_CRC8>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 8003a60:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003a6a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003a6e:	4841      	ldr	r0, [pc, #260]	@ (8003b74 <INIT_PERM_TARVOS+0x1f0>)
 8003a70:	f007 f81e 	bl	800aab0 <HAL_UART_Transmit>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 8003a80:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f871 	bl	8003b78 <Get_CRC8>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 8003a9c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	f107 011c 	add.w	r1, r7, #28
 8003aa6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003aaa:	4832      	ldr	r0, [pc, #200]	@ (8003b74 <INIT_PERM_TARVOS+0x1f0>)
 8003aac:	f007 f800 	bl	800aab0 <HAL_UART_Transmit>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 8003abc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f853 	bl	8003b78 <Get_CRC8>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 8003ad6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	f107 0114 	add.w	r1, r7, #20
 8003ae0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ae4:	4823      	ldr	r0, [pc, #140]	@ (8003b74 <INIT_PERM_TARVOS+0x1f0>)
 8003ae6:	f006 ffe3 	bl	800aab0 <HAL_UART_Transmit>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 8003af6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f836 	bl	8003b78 <Get_CRC8>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8003b10:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	f107 010c 	add.w	r1, r7, #12
 8003b1a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003b1e:	4815      	ldr	r0, [pc, #84]	@ (8003b74 <INIT_PERM_TARVOS+0x1f0>)
 8003b20:	f006 ffc6 	bl	800aab0 <HAL_UART_Transmit>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8003b30:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	f107 0108 	add.w	r1, r7, #8
 8003b3a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003b3e:	480d      	ldr	r0, [pc, #52]	@ (8003b74 <INIT_PERM_TARVOS+0x1f0>)
 8003b40:	f006 ffb6 	bl	800aab0 <HAL_UART_Transmit>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 8003b50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b54:	f000 fe6c 	bl	8004830 <HAL_Delay>
    return status;
 8003b58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3738      	adds	r7, #56	@ 0x38
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08014ba4 	.word	0x08014ba4
 8003b68:	08014bac 	.word	0x08014bac
 8003b6c:	08014bb4 	.word	0x08014bb4
 8003b70:	07000502 	.word	0x07000502
 8003b74:	20000ed4 	.word	0x20000ed4

08003b78 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8003b88:	2300      	movs	r3, #0
 8003b8a:	81bb      	strh	r3, [r7, #12]
 8003b8c:	e009      	b.n	8003ba2 <Get_CRC8+0x2a>
		crc ^= bufP[i];
 8003b8e:	89bb      	ldrh	r3, [r7, #12]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	4053      	eors	r3, r2
 8003b9a:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8003b9c:	89bb      	ldrh	r3, [r7, #12]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	81bb      	strh	r3, [r7, #12]
 8003ba2:	89ba      	ldrh	r2, [r7, #12]
 8003ba4:	887b      	ldrh	r3, [r7, #2]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3f1      	bcc.n	8003b8e <Get_CRC8+0x16>
	}
	return crc;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <SEND_DATA_NETW1>:

    return status;

}

void SEND_DATA_NETW1(uint8_t *data, uint8_t channel, uint8_t dest_adress, int length) {
 8003bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	b08a      	sub	sp, #40	@ 0x28
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	72fb      	strb	r3, [r7, #11]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	72bb      	strb	r3, [r7, #10]
 8003bcc:	466b      	mov	r3, sp
 8003bce:	469a      	mov	sl, r3
    // Longueur totale de la trame : en-tête (5 octets) + données + CRC
    uint8_t trame[5 + length + 1]; // +1 pour le CRC
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1d9e      	adds	r6, r3, #6
 8003bd4:	1e73      	subs	r3, r6, #1
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	4632      	mov	r2, r6
 8003bda:	2300      	movs	r3, #0
 8003bdc:	4690      	mov	r8, r2
 8003bde:	4699      	mov	r9, r3
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bf4:	4632      	mov	r2, r6
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	461d      	mov	r5, r3
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	00eb      	lsls	r3, r5, #3
 8003c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0a:	00e2      	lsls	r2, r4, #3
 8003c0c:	4633      	mov	r3, r6
 8003c0e:	3307      	adds	r3, #7
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	ebad 0d03 	sub.w	sp, sp, r3
 8003c18:	466b      	mov	r3, sp
 8003c1a:	3300      	adds	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]

    // Initialisation de l'en-tête
    trame[0] = 0x02;            // Start byte
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	2202      	movs	r2, #2
 8003c22:	701a      	strb	r2, [r3, #0]
    trame[1] = 0x01;            // Command identifier
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2201      	movs	r2, #1
 8003c28:	705a      	strb	r2, [r3, #1]
    trame[2] = length + 2;      // Longueur totale (length + channel + dest_adress)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	3302      	adds	r3, #2
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	709a      	strb	r2, [r3, #2]
    trame[3] = channel;         // Canal
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	7afa      	ldrb	r2, [r7, #11]
 8003c3a:	70da      	strb	r2, [r3, #3]
    trame[4] = dest_adress;     // Adresse de destination
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	7aba      	ldrb	r2, [r7, #10]
 8003c40:	711a      	strb	r2, [r3, #4]

    // Copie des données dans la trame
    for (uint8_t i = 0; i < length; i++) {
 8003c42:	2300      	movs	r3, #0
 8003c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c48:	e00e      	b.n	8003c68 <SEND_DATA_NETW1+0xb0>
        trame[5 + i] = data[i];
 8003c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	441a      	add	r2, r3
 8003c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c56:	3305      	adds	r3, #5
 8003c58:	7811      	ldrb	r1, [r2, #0]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8003c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c62:	3301      	adds	r3, #1
 8003c64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	dceb      	bgt.n	8003c4a <SEND_DATA_NETW1+0x92>
    }

    // Calcul du CRC (sur tout sauf le CRC lui-même)
    trame[5 + length] = Get_CRC8(trame, 5 + length);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3305      	adds	r3, #5
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1d5c      	adds	r4, r3, #5
 8003c7e:	4611      	mov	r1, r2
 8003c80:	69f8      	ldr	r0, [r7, #28]
 8003c82:	f7ff ff79 	bl	8003b78 <Get_CRC8>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	551a      	strb	r2, [r3, r4]

    // Transmission de la trame
    HAL_UART_Transmit(&hlpuart1, trame, sizeof(trame), 500);
 8003c8e:	b2b2      	uxth	r2, r6
 8003c90:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003c94:	69f9      	ldr	r1, [r7, #28]
 8003c96:	4808      	ldr	r0, [pc, #32]	@ (8003cb8 <SEND_DATA_NETW1+0x100>)
 8003c98:	f006 ff0a 	bl	800aab0 <HAL_UART_Transmit>
    uint8_t bufferreceivetest[10];
    HAL_UART_Receive_IT(&hlpuart1,(uint8_t *)bufferreceivetest,5);
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	2205      	movs	r2, #5
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4804      	ldr	r0, [pc, #16]	@ (8003cb8 <SEND_DATA_NETW1+0x100>)
 8003ca6:	f006 ff91 	bl	800abcc <HAL_UART_Receive_IT>
 8003caa:	46d5      	mov	sp, sl

}
 8003cac:	bf00      	nop
 8003cae:	3728      	adds	r7, #40	@ 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000ed4 	.word	0x20000ed4

08003cbc <create_and_send_payload>:
	return status;

}

//payload size==32
void create_and_send_payload(uint8_t* buffer,uint8_t channel,uint8_t dest_adress,uint16_t header_code,uint8_t flag1,uint8_t flag2,float latitude,float longitude,float altitude,float altitude_baro,float extra1,float extra2,int32_t extra_int){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b092      	sub	sp, #72	@ 0x48
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	61f8      	str	r0, [r7, #28]
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	ed87 0a05 	vstr	s0, [r7, #20]
 8003cce:	edc7 0a04 	vstr	s1, [r7, #16]
 8003cd2:	ed87 1a03 	vstr	s2, [r7, #12]
 8003cd6:	edc7 1a02 	vstr	s3, [r7, #8]
 8003cda:	ed87 2a01 	vstr	s4, [r7, #4]
 8003cde:	edc7 2a00 	vstr	s5, [r7]
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	76fb      	strb	r3, [r7, #27]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	76bb      	strb	r3, [r7, #26]
 8003cea:	4613      	mov	r3, r2
 8003cec:	833b      	strh	r3, [r7, #24]
    uint8_t buffdonnee[34];
    buffdonnee[0] = (header_code >> 8) & 0xFF;
 8003cee:	8b3b      	ldrh	r3, [r7, #24]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    buffdonnee[1] = header_code & 0xFF;
 8003cfa:	8b3b      	ldrh	r3, [r7, #24]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    buffdonnee[2] = flag1;
 8003d02:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8003d06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    buffdonnee[3] = flag2;
 8003d0a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8003d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    memcpy(&buffdonnee[4],  &latitude,      sizeof(float));
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    memcpy(&buffdonnee[8],  &longitude,     sizeof(float));
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    memcpy(&buffdonnee[12], &altitude,      sizeof(float));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	633b      	str	r3, [r7, #48]	@ 0x30
    memcpy(&buffdonnee[16], &altitude_baro, sizeof(float));
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	637b      	str	r3, [r7, #52]	@ 0x34
    memcpy(&buffdonnee[20], &extra1,        sizeof(float));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	63bb      	str	r3, [r7, #56]	@ 0x38
    memcpy(&buffdonnee[24], &extra2,        sizeof(float));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memcpy(&buffdonnee[28], &extra_int,     sizeof(int32_t));
 8003d2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d2c:	643b      	str	r3, [r7, #64]	@ 0x40
    buffdonnee[33]=0x00;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    buffdonnee[34]=0x00;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 32);
 8003d3a:	7eba      	ldrb	r2, [r7, #26]
 8003d3c:	7ef9      	ldrb	r1, [r7, #27]
 8003d3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d42:	2320      	movs	r3, #32
 8003d44:	f7ff ff38 	bl	8003bb8 <SEND_DATA_NETW1>

}
 8003d48:	bf00      	nop
 8003d4a:	3748      	adds	r7, #72	@ 0x48
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <decode_payload>:

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	f040 808c 	bne.w	8003e7c <decode_payload+0x12c>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	3301      	adds	r3, #1
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b81      	cmp	r3, #129	@ 0x81
 8003d6c:	f040 8086 	bne.w	8003e7c <decode_payload+0x12c>
		return;
	}
	if(receivingbuffer[2]!=34){
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	3302      	adds	r3, #2
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b22      	cmp	r3, #34	@ 0x22
 8003d78:	f040 8082 	bne.w	8003e80 <decode_payload+0x130>
		return;
	}

	out->senderadress=receivingbuffer[3];
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	78da      	ldrb	r2, [r3, #3]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b21b      	sxth	r3, r3
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	b21a      	sxth	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	3305      	adds	r3, #5
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b21b      	sxth	r3, r3
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	b21b      	sxth	r3, r3
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag1 = receivingbuffer[6];
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	799a      	ldrb	r2, [r3, #6]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag2 = receivingbuffer[7];
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	79da      	ldrb	r2, [r3, #7]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
#ifdef PARTIE_BAS
    if((out->header_code)==0x20){
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d10d      	bne.n	8003de0 <decode_payload+0x90>

    	memcpy(&out->altitude_baro, &receivingbuffer[20], sizeof(float));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3350      	adds	r3, #80	@ 0x50
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	3214      	adds	r2, #20
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	601a      	str	r2, [r3, #0]

    	hauteur_Initiale=out->altitude_baro;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8003e88 <decode_payload+0x138>)
 8003dd6:	6013      	str	r3, [r2, #0]
    	flag_calib=1;
 8003dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e8c <decode_payload+0x13c>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e029      	b.n	8003e34 <decode_payload+0xe4>
 }
    else{
    memcpy(&out->latitude,      &receivingbuffer[8],  sizeof(float));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3344      	adds	r3, #68	@ 0x44
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	3208      	adds	r2, #8
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[12],  sizeof(float));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3348      	adds	r3, #72	@ 0x48
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	320c      	adds	r2, #12
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude,      &receivingbuffer[16], sizeof(float));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	334c      	adds	r3, #76	@ 0x4c
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	3210      	adds	r2, #16
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[20], sizeof(float));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3350      	adds	r3, #80	@ 0x50
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	3214      	adds	r2, #20
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	601a      	str	r2, [r3, #0]
    memcpy(&out->extra1,        &receivingbuffer[24], sizeof(float));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3354      	adds	r3, #84	@ 0x54
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	3218      	adds	r2, #24
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	601a      	str	r2, [r3, #0]
    memcpy(&out->extra2,        &receivingbuffer[28], sizeof(float));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3358      	adds	r3, #88	@ 0x58
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	321c      	adds	r2, #28
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	601a      	str	r2, [r3, #0]
    memcpy(&out->extra_int,     &receivingbuffer[32], sizeof(int32_t));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	335c      	adds	r3, #92	@ 0x5c
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	3220      	adds	r2, #32
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	601a      	str	r2, [r3, #0]

#endif


#ifdef PARTIE_BAS
    if(noreturn_flag1==0){
 8003e34:	4b16      	ldr	r3, [pc, #88]	@ (8003e90 <decode_payload+0x140>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <decode_payload+0x102>
    if(receivingbuffer[6]==1){
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	3306      	adds	r3, #6
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d102      	bne.n	8003e4c <decode_payload+0xfc>
    	flag_drop=1;
 8003e46:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <decode_payload+0x144>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
    }
    noreturn_flag1=1;
 8003e4c:	4b10      	ldr	r3, [pc, #64]	@ (8003e90 <decode_payload+0x140>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    }
    if(noreturn_flag2==0){
 8003e52:	4b11      	ldr	r3, [pc, #68]	@ (8003e98 <decode_payload+0x148>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <decode_payload+0x120>
    if(receivingbuffer[7]==1){
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	3307      	adds	r3, #7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d102      	bne.n	8003e6a <decode_payload+0x11a>
    	flag_separation=1;
 8003e64:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <decode_payload+0x14c>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    }
    noreturn_flag2=1;
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <decode_payload+0x148>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
    }

#endif

    memset((uint8_t *)receivingbuffer,0,64);
 8003e70:	2240      	movs	r2, #64	@ 0x40
 8003e72:	2100      	movs	r1, #0
 8003e74:	6838      	ldr	r0, [r7, #0]
 8003e76:	f00b fde5 	bl	800fa44 <memset>
 8003e7a:	e002      	b.n	8003e82 <decode_payload+0x132>
		return;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <decode_payload+0x132>
		return;
 8003e80:	bf00      	nop
}
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000870 	.word	0x20000870
 8003e8c:	20000860 	.word	0x20000860
 8003e90:	20000d80 	.word	0x20000d80
 8003e94:	20000858 	.word	0x20000858
 8003e98:	20000d84 	.word	0x20000d84
 8003e9c:	2000085c 	.word	0x2000085c

08003ea0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	@ 0x38
 8003ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ea6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eb4:	f107 031c 	add.w	r3, r7, #28
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	611a      	str	r2, [r3, #16]
 8003ece:	615a      	str	r2, [r3, #20]
 8003ed0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003ed4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ed8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003eda:	4b2b      	ldr	r3, [pc, #172]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee0:	4b29      	ldr	r3, [pc, #164]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 8003ee6:	4b28      	ldr	r3, [pc, #160]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003ee8:	227c      	movs	r2, #124	@ 0x7c
 8003eea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eec:	4b26      	ldr	r3, [pc, #152]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef2:	4b25      	ldr	r3, [pc, #148]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ef8:	4823      	ldr	r0, [pc, #140]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003efa:	f004 fe42 	bl	8008b82 <HAL_TIM_Base_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003f04:	f7fe fea2 	bl	8002c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f12:	4619      	mov	r1, r3
 8003f14:	481c      	ldr	r0, [pc, #112]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003f16:	f005 fe61 	bl	8009bdc <HAL_TIM_ConfigClockSource>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003f20:	f7fe fe94 	bl	8002c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003f24:	4818      	ldr	r0, [pc, #96]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003f26:	f004 feed 	bl	8008d04 <HAL_TIM_PWM_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003f30:	f7fe fe8c 	bl	8002c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f3c:	f107 031c 	add.w	r3, r7, #28
 8003f40:	4619      	mov	r1, r3
 8003f42:	4811      	ldr	r0, [pc, #68]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003f44:	f006 fc9c 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003f4e:	f7fe fe7d 	bl	8002c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f52:	2360      	movs	r3, #96	@ 0x60
 8003f54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f62:	463b      	mov	r3, r7
 8003f64:	2204      	movs	r2, #4
 8003f66:	4619      	mov	r1, r3
 8003f68:	4807      	ldr	r0, [pc, #28]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003f6a:	f005 fd23 	bl	80099b4 <HAL_TIM_PWM_ConfigChannel>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003f74:	f7fe fe6a 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003f78:	4803      	ldr	r0, [pc, #12]	@ (8003f88 <MX_TIM2_Init+0xe8>)
 8003f7a:	f000 f94f 	bl	800421c <HAL_TIM_MspPostInit>

}
 8003f7e:	bf00      	nop
 8003f80:	3738      	adds	r7, #56	@ 0x38
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000d88 	.word	0x20000d88

08003f8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08e      	sub	sp, #56	@ 0x38
 8003f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa0:	f107 031c 	add.w	r3, r7, #28
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fac:	463b      	mov	r3, r7
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	611a      	str	r2, [r3, #16]
 8003fba:	615a      	str	r2, [r3, #20]
 8003fbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8003fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004078 <MX_TIM3_Init+0xec>)
 8003fc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8003fc6:	2263      	movs	r2, #99	@ 0x63
 8003fc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fca:	4b2a      	ldr	r3, [pc, #168]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003fd0:	4b28      	ldr	r3, [pc, #160]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8003fd2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003fd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd8:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fde:	4b25      	ldr	r3, [pc, #148]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8003fe0:	2280      	movs	r2, #128	@ 0x80
 8003fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003fe4:	4823      	ldr	r0, [pc, #140]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8003fe6:	f004 fdcc 	bl	8008b82 <HAL_TIM_Base_Init>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003ff0:	f7fe fe2c 	bl	8002c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ffe:	4619      	mov	r1, r3
 8004000:	481c      	ldr	r0, [pc, #112]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8004002:	f005 fdeb 	bl	8009bdc <HAL_TIM_ConfigClockSource>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800400c:	f7fe fe1e 	bl	8002c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004010:	4818      	ldr	r0, [pc, #96]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8004012:	f004 fe77 	bl	8008d04 <HAL_TIM_PWM_Init>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800401c:	f7fe fe16 	bl	8002c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004028:	f107 031c 	add.w	r3, r7, #28
 800402c:	4619      	mov	r1, r3
 800402e:	4811      	ldr	r0, [pc, #68]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8004030:	f006 fc26 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800403a:	f7fe fe07 	bl	8002c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800403e:	2360      	movs	r3, #96	@ 0x60
 8004040:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800404e:	463b      	mov	r3, r7
 8004050:	2200      	movs	r2, #0
 8004052:	4619      	mov	r1, r3
 8004054:	4807      	ldr	r0, [pc, #28]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8004056:	f005 fcad 	bl	80099b4 <HAL_TIM_PWM_ConfigChannel>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004060:	f7fe fdf4 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004064:	4803      	ldr	r0, [pc, #12]	@ (8004074 <MX_TIM3_Init+0xe8>)
 8004066:	f000 f8d9 	bl	800421c <HAL_TIM_MspPostInit>

}
 800406a:	bf00      	nop
 800406c:	3738      	adds	r7, #56	@ 0x38
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000dd4 	.word	0x20000dd4
 8004078:	40000400 	.word	0x40000400

0800407c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004082:	f107 0310 	add.w	r3, r7, #16
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	609a      	str	r2, [r3, #8]
 800408e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800409a:	4b1d      	ldr	r3, [pc, #116]	@ (8004110 <MX_TIM4_Init+0x94>)
 800409c:	4a1d      	ldr	r2, [pc, #116]	@ (8004114 <MX_TIM4_Init+0x98>)
 800409e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80040a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <MX_TIM4_Init+0x94>)
 80040a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80040a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a8:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <MX_TIM4_Init+0x94>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 80040ae:	4b18      	ldr	r3, [pc, #96]	@ (8004110 <MX_TIM4_Init+0x94>)
 80040b0:	2209      	movs	r2, #9
 80040b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040b4:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <MX_TIM4_Init+0x94>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ba:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <MX_TIM4_Init+0x94>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80040c0:	4813      	ldr	r0, [pc, #76]	@ (8004110 <MX_TIM4_Init+0x94>)
 80040c2:	f004 fd5e 	bl	8008b82 <HAL_TIM_Base_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80040cc:	f7fe fdbe 	bl	8002c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80040d6:	f107 0310 	add.w	r3, r7, #16
 80040da:	4619      	mov	r1, r3
 80040dc:	480c      	ldr	r0, [pc, #48]	@ (8004110 <MX_TIM4_Init+0x94>)
 80040de:	f005 fd7d 	bl	8009bdc <HAL_TIM_ConfigClockSource>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80040e8:	f7fe fdb0 	bl	8002c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ec:	2300      	movs	r3, #0
 80040ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	4619      	mov	r1, r3
 80040f8:	4805      	ldr	r0, [pc, #20]	@ (8004110 <MX_TIM4_Init+0x94>)
 80040fa:	f006 fbc1 	bl	800a880 <HAL_TIMEx_MasterConfigSynchronization>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004104:	f7fe fda2 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004108:	bf00      	nop
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000e20 	.word	0x20000e20
 8004114:	40000800 	.word	0x40000800

08004118 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004128:	d136      	bne.n	8004198 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800412a:	4b37      	ldr	r3, [pc, #220]	@ (8004208 <HAL_TIM_Base_MspInit+0xf0>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412e:	4a36      	ldr	r2, [pc, #216]	@ (8004208 <HAL_TIM_Base_MspInit+0xf0>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6593      	str	r3, [r2, #88]	@ 0x58
 8004136:	4b34      	ldr	r3, [pc, #208]	@ (8004208 <HAL_TIM_Base_MspInit+0xf0>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8004142:	4b32      	ldr	r3, [pc, #200]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 8004144:	4a32      	ldr	r2, [pc, #200]	@ (8004210 <HAL_TIM_Base_MspInit+0xf8>)
 8004146:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8004148:	4b30      	ldr	r3, [pc, #192]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 800414a:	2239      	movs	r2, #57	@ 0x39
 800414c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800414e:	4b2f      	ldr	r3, [pc, #188]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 8004150:	2210      	movs	r2, #16
 8004152:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004154:	4b2d      	ldr	r3, [pc, #180]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 8004156:	2200      	movs	r2, #0
 8004158:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800415a:	4b2c      	ldr	r3, [pc, #176]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 800415c:	2280      	movs	r2, #128	@ 0x80
 800415e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004160:	4b2a      	ldr	r3, [pc, #168]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 8004162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004166:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004168:	4b28      	ldr	r3, [pc, #160]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 800416a:	2200      	movs	r2, #0
 800416c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 800416e:	4b27      	ldr	r3, [pc, #156]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 8004170:	2220      	movs	r2, #32
 8004172:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004174:	4b25      	ldr	r3, [pc, #148]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 8004176:	2200      	movs	r2, #0
 8004178:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 800417a:	4824      	ldr	r0, [pc, #144]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 800417c:	f002 f910 	bl	80063a0 <HAL_DMA_Init>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8004186:	f7fe fd61 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1f      	ldr	r2, [pc, #124]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 800418e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004190:	4a1e      	ldr	r2, [pc, #120]	@ (800420c <HAL_TIM_Base_MspInit+0xf4>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004196:	e032      	b.n	80041fe <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1d      	ldr	r2, [pc, #116]	@ (8004214 <HAL_TIM_Base_MspInit+0xfc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d114      	bne.n	80041cc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041a2:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <HAL_TIM_Base_MspInit+0xf0>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	4a18      	ldr	r2, [pc, #96]	@ (8004208 <HAL_TIM_Base_MspInit+0xf0>)
 80041a8:	f043 0302 	orr.w	r3, r3, #2
 80041ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ae:	4b16      	ldr	r3, [pc, #88]	@ (8004208 <HAL_TIM_Base_MspInit+0xf0>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80041ba:	2200      	movs	r2, #0
 80041bc:	2105      	movs	r1, #5
 80041be:	201d      	movs	r0, #29
 80041c0:	f002 f8c6 	bl	8006350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041c4:	201d      	movs	r0, #29
 80041c6:	f002 f8dd 	bl	8006384 <HAL_NVIC_EnableIRQ>
}
 80041ca:	e018      	b.n	80041fe <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a11      	ldr	r2, [pc, #68]	@ (8004218 <HAL_TIM_Base_MspInit+0x100>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d113      	bne.n	80041fe <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004208 <HAL_TIM_Base_MspInit+0xf0>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041da:	4a0b      	ldr	r2, [pc, #44]	@ (8004208 <HAL_TIM_Base_MspInit+0xf0>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e2:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_TIM_Base_MspInit+0xf0>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 80041ee:	2200      	movs	r2, #0
 80041f0:	2106      	movs	r1, #6
 80041f2:	201e      	movs	r0, #30
 80041f4:	f002 f8ac 	bl	8006350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80041f8:	201e      	movs	r0, #30
 80041fa:	f002 f8c3 	bl	8006384 <HAL_NVIC_EnableIRQ>
}
 80041fe:	bf00      	nop
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	20000e6c 	.word	0x20000e6c
 8004210:	40020008 	.word	0x40020008
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800

0800421c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	@ 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423c:	d11d      	bne.n	800427a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800423e:	4b21      	ldr	r3, [pc, #132]	@ (80042c4 <HAL_TIM_MspPostInit+0xa8>)
 8004240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004242:	4a20      	ldr	r2, [pc, #128]	@ (80042c4 <HAL_TIM_MspPostInit+0xa8>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800424a:	4b1e      	ldr	r3, [pc, #120]	@ (80042c4 <HAL_TIM_MspPostInit+0xa8>)
 800424c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004256:	2302      	movs	r3, #2
 8004258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004262:	2300      	movs	r3, #0
 8004264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004266:	2301      	movs	r3, #1
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	4619      	mov	r1, r3
 8004270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004274:	f002 fbd2 	bl	8006a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004278:	e020      	b.n	80042bc <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a12      	ldr	r2, [pc, #72]	@ (80042c8 <HAL_TIM_MspPostInit+0xac>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004284:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <HAL_TIM_MspPostInit+0xa8>)
 8004286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004288:	4a0e      	ldr	r2, [pc, #56]	@ (80042c4 <HAL_TIM_MspPostInit+0xa8>)
 800428a:	f043 0304 	orr.w	r3, r3, #4
 800428e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004290:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <HAL_TIM_MspPostInit+0xa8>)
 8004292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800429c:	2340      	movs	r3, #64	@ 0x40
 800429e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	2302      	movs	r3, #2
 80042a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a8:	2300      	movs	r3, #0
 80042aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042ac:	2302      	movs	r3, #2
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	4619      	mov	r1, r3
 80042b6:	4805      	ldr	r0, [pc, #20]	@ (80042cc <HAL_TIM_MspPostInit+0xb0>)
 80042b8:	f002 fbb0 	bl	8006a1c <HAL_GPIO_Init>
}
 80042bc:	bf00      	nop
 80042be:	3728      	adds	r7, #40	@ 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40000400 	.word	0x40000400
 80042cc:	48000800 	.word	0x48000800

080042d0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80042d4:	4b21      	ldr	r3, [pc, #132]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 80042d6:	4a22      	ldr	r2, [pc, #136]	@ (8004360 <MX_LPUART1_UART_Init+0x90>)
 80042d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80042da:	4b20      	ldr	r3, [pc, #128]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 80042dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042e2:	4b1e      	ldr	r3, [pc, #120]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80042e8:	4b1c      	ldr	r3, [pc, #112]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80042ee:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80042f4:	4b19      	ldr	r3, [pc, #100]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 80042f6:	220c      	movs	r2, #12
 80042f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042fa:	4b18      	ldr	r3, [pc, #96]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004300:	4b16      	ldr	r3, [pc, #88]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 8004302:	2200      	movs	r2, #0
 8004304:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004306:	4b15      	ldr	r3, [pc, #84]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 8004308:	2200      	movs	r2, #0
 800430a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800430c:	4b13      	ldr	r3, [pc, #76]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 800430e:	2200      	movs	r2, #0
 8004310:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004312:	4812      	ldr	r0, [pc, #72]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 8004314:	f006 fb7c 	bl	800aa10 <HAL_UART_Init>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800431e:	f7fe fc95 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004322:	2100      	movs	r1, #0
 8004324:	480d      	ldr	r0, [pc, #52]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 8004326:	f008 ff02 	bl	800d12e <HAL_UARTEx_SetTxFifoThreshold>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8004330:	f7fe fc8c 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004334:	2100      	movs	r1, #0
 8004336:	4809      	ldr	r0, [pc, #36]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 8004338:	f008 ff37 	bl	800d1aa <HAL_UARTEx_SetRxFifoThreshold>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8004342:	f7fe fc83 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004346:	4805      	ldr	r0, [pc, #20]	@ (800435c <MX_LPUART1_UART_Init+0x8c>)
 8004348:	f008 feb8 	bl	800d0bc <HAL_UARTEx_DisableFifoMode>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8004352:	f7fe fc7b 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000ed4 	.word	0x20000ed4
 8004360:	40008000 	.word	0x40008000

08004364 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004368:	4b22      	ldr	r3, [pc, #136]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 800436a:	4a23      	ldr	r2, [pc, #140]	@ (80043f8 <MX_USART1_UART_Init+0x94>)
 800436c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800436e:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 8004370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004376:	4b1f      	ldr	r3, [pc, #124]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 8004378:	2200      	movs	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800437c:	4b1d      	ldr	r3, [pc, #116]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 800437e:	2200      	movs	r2, #0
 8004380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004382:	4b1c      	ldr	r3, [pc, #112]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004388:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 800438a:	220c      	movs	r2, #12
 800438c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800438e:	4b19      	ldr	r3, [pc, #100]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004394:	4b17      	ldr	r3, [pc, #92]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 8004396:	2200      	movs	r2, #0
 8004398:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800439a:	4b16      	ldr	r3, [pc, #88]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 800439c:	2200      	movs	r2, #0
 800439e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043a0:	4b14      	ldr	r3, [pc, #80]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043a6:	4b13      	ldr	r3, [pc, #76]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043ac:	4811      	ldr	r0, [pc, #68]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 80043ae:	f006 fb2f 	bl	800aa10 <HAL_UART_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80043b8:	f7fe fc48 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043bc:	2100      	movs	r1, #0
 80043be:	480d      	ldr	r0, [pc, #52]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 80043c0:	f008 feb5 	bl	800d12e <HAL_UARTEx_SetTxFifoThreshold>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80043ca:	f7fe fc3f 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043ce:	2100      	movs	r1, #0
 80043d0:	4808      	ldr	r0, [pc, #32]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 80043d2:	f008 feea 	bl	800d1aa <HAL_UARTEx_SetRxFifoThreshold>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80043dc:	f7fe fc36 	bl	8002c4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80043e0:	4804      	ldr	r0, [pc, #16]	@ (80043f4 <MX_USART1_UART_Init+0x90>)
 80043e2:	f008 fe6b 	bl	800d0bc <HAL_UARTEx_DisableFifoMode>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80043ec:	f7fe fc2e 	bl	8002c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000f68 	.word	0x20000f68
 80043f8:	40013800 	.word	0x40013800

080043fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b09e      	sub	sp, #120	@ 0x78
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004404:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004414:	f107 0320 	add.w	r3, r7, #32
 8004418:	2244      	movs	r2, #68	@ 0x44
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f00b fb11 	bl	800fa44 <memset>
  if(uartHandle->Instance==LPUART1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a7e      	ldr	r2, [pc, #504]	@ (8004620 <HAL_UART_MspInit+0x224>)
 8004428:	4293      	cmp	r3, r2
 800442a:	f040 8087 	bne.w	800453c <HAL_UART_MspInit+0x140>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800442e:	2320      	movs	r3, #32
 8004430:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004432:	2300      	movs	r3, #0
 8004434:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004436:	f107 0320 	add.w	r3, r7, #32
 800443a:	4618      	mov	r0, r3
 800443c:	f004 f906 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004446:	f7fe fc01 	bl	8002c4c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800444a:	4b76      	ldr	r3, [pc, #472]	@ (8004624 <HAL_UART_MspInit+0x228>)
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	4a75      	ldr	r2, [pc, #468]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004456:	4b73      	ldr	r3, [pc, #460]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004462:	4b70      	ldr	r3, [pc, #448]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004466:	4a6f      	ldr	r2, [pc, #444]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800446e:	4b6d      	ldr	r3, [pc, #436]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800447a:	4b6a      	ldr	r3, [pc, #424]	@ (8004624 <HAL_UART_MspInit+0x228>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	4a69      	ldr	r2, [pc, #420]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004486:	4b67      	ldr	r3, [pc, #412]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004492:	2308      	movs	r3, #8
 8004494:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
 8004498:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449e:	2300      	movs	r3, #0
 80044a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80044a2:	230c      	movs	r3, #12
 80044a4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80044aa:	4619      	mov	r1, r3
 80044ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044b0:	f002 fab4 	bl	8006a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80044b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ba:	2302      	movs	r3, #2
 80044bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c2:	2300      	movs	r3, #0
 80044c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80044c6:	2308      	movs	r3, #8
 80044c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80044ce:	4619      	mov	r1, r3
 80044d0:	4855      	ldr	r0, [pc, #340]	@ (8004628 <HAL_UART_MspInit+0x22c>)
 80044d2:	f002 faa3 	bl	8006a1c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 80044d6:	4b55      	ldr	r3, [pc, #340]	@ (800462c <HAL_UART_MspInit+0x230>)
 80044d8:	4a55      	ldr	r2, [pc, #340]	@ (8004630 <HAL_UART_MspInit+0x234>)
 80044da:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80044dc:	4b53      	ldr	r3, [pc, #332]	@ (800462c <HAL_UART_MspInit+0x230>)
 80044de:	2222      	movs	r2, #34	@ 0x22
 80044e0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044e2:	4b52      	ldr	r3, [pc, #328]	@ (800462c <HAL_UART_MspInit+0x230>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044e8:	4b50      	ldr	r3, [pc, #320]	@ (800462c <HAL_UART_MspInit+0x230>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044ee:	4b4f      	ldr	r3, [pc, #316]	@ (800462c <HAL_UART_MspInit+0x230>)
 80044f0:	2280      	movs	r2, #128	@ 0x80
 80044f2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044f4:	4b4d      	ldr	r3, [pc, #308]	@ (800462c <HAL_UART_MspInit+0x230>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044fa:	4b4c      	ldr	r3, [pc, #304]	@ (800462c <HAL_UART_MspInit+0x230>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004500:	4b4a      	ldr	r3, [pc, #296]	@ (800462c <HAL_UART_MspInit+0x230>)
 8004502:	2220      	movs	r2, #32
 8004504:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004506:	4b49      	ldr	r3, [pc, #292]	@ (800462c <HAL_UART_MspInit+0x230>)
 8004508:	2200      	movs	r2, #0
 800450a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800450c:	4847      	ldr	r0, [pc, #284]	@ (800462c <HAL_UART_MspInit+0x230>)
 800450e:	f001 ff47 	bl	80063a0 <HAL_DMA_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8004518:	f7fe fb98 	bl	8002c4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a43      	ldr	r2, [pc, #268]	@ (800462c <HAL_UART_MspInit+0x230>)
 8004520:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004524:	4a41      	ldr	r2, [pc, #260]	@ (800462c <HAL_UART_MspInit+0x230>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800452a:	2200      	movs	r2, #0
 800452c:	2105      	movs	r1, #5
 800452e:	205b      	movs	r0, #91	@ 0x5b
 8004530:	f001 ff0e 	bl	8006350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004534:	205b      	movs	r0, #91	@ 0x5b
 8004536:	f001 ff25 	bl	8006384 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800453a:	e06c      	b.n	8004616 <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==USART1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a3c      	ldr	r2, [pc, #240]	@ (8004634 <HAL_UART_MspInit+0x238>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d167      	bne.n	8004616 <HAL_UART_MspInit+0x21a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004546:	2301      	movs	r3, #1
 8004548:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800454e:	f107 0320 	add.w	r3, r7, #32
 8004552:	4618      	mov	r0, r3
 8004554:	f004 f87a 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_UART_MspInit+0x166>
      Error_Handler();
 800455e:	f7fe fb75 	bl	8002c4c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004562:	4b30      	ldr	r3, [pc, #192]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004566:	4a2f      	ldr	r2, [pc, #188]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800456c:	6613      	str	r3, [r2, #96]	@ 0x60
 800456e:	4b2d      	ldr	r3, [pc, #180]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800457a:	4b2a      	ldr	r3, [pc, #168]	@ (8004624 <HAL_UART_MspInit+0x228>)
 800457c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457e:	4a29      	ldr	r2, [pc, #164]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004586:	4b27      	ldr	r3, [pc, #156]	@ (8004624 <HAL_UART_MspInit+0x228>)
 8004588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004592:	23c0      	movs	r3, #192	@ 0xc0
 8004594:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004596:	2302      	movs	r3, #2
 8004598:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	2300      	movs	r3, #0
 800459c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459e:	2300      	movs	r3, #0
 80045a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045a2:	2307      	movs	r3, #7
 80045a4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80045aa:	4619      	mov	r1, r3
 80045ac:	481e      	ldr	r0, [pc, #120]	@ (8004628 <HAL_UART_MspInit+0x22c>)
 80045ae:	f002 fa35 	bl	8006a1c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80045b2:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045b4:	4a21      	ldr	r2, [pc, #132]	@ (800463c <HAL_UART_MspInit+0x240>)
 80045b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80045b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045ba:	2218      	movs	r2, #24
 80045bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045be:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045cc:	2280      	movs	r2, #128	@ 0x80
 80045ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045d6:	4b18      	ldr	r3, [pc, #96]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045d8:	2200      	movs	r2, #0
 80045da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80045dc:	4b16      	ldr	r3, [pc, #88]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045de:	2220      	movs	r2, #32
 80045e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045e2:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80045e8:	4813      	ldr	r0, [pc, #76]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045ea:	f001 fed9 	bl	80063a0 <HAL_DMA_Init>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80045f4:	f7fe fb2a 	bl	8002c4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 80045fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004600:	4a0d      	ldr	r2, [pc, #52]	@ (8004638 <HAL_UART_MspInit+0x23c>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004606:	2200      	movs	r2, #0
 8004608:	2105      	movs	r1, #5
 800460a:	2025      	movs	r0, #37	@ 0x25
 800460c:	f001 fea0 	bl	8006350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004610:	2025      	movs	r0, #37	@ 0x25
 8004612:	f001 feb7 	bl	8006384 <HAL_NVIC_EnableIRQ>
}
 8004616:	bf00      	nop
 8004618:	3778      	adds	r7, #120	@ 0x78
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40008000 	.word	0x40008000
 8004624:	40021000 	.word	0x40021000
 8004628:	48000400 	.word	0x48000400
 800462c:	20000ffc 	.word	0x20000ffc
 8004630:	40020030 	.word	0x40020030
 8004634:	40013800 	.word	0x40013800
 8004638:	2000105c 	.word	0x2000105c
 800463c:	40020058 	.word	0x40020058

08004640 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a3b      	ldr	r2, [pc, #236]	@ (800473c <HAL_UART_RxCpltCallback+0xfc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d114      	bne.n	800467c <HAL_UART_RxCpltCallback+0x3c>

		received_flag=1;
 8004652:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <HAL_UART_RxCpltCallback+0x100>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]
		memcpy((uint8_t*)GNSSData.uartWorkingBuffer,(uint8_t *) workingbuffer,100);
 8004658:	2264      	movs	r2, #100	@ 0x64
 800465a:	493a      	ldr	r1, [pc, #232]	@ (8004744 <HAL_UART_RxCpltCallback+0x104>)
 800465c:	483a      	ldr	r0, [pc, #232]	@ (8004748 <HAL_UART_RxCpltCallback+0x108>)
 800465e:	f00b fa70 	bl	800fb42 <memcpy>
		HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)workingbuffer, 100);
 8004662:	2264      	movs	r2, #100	@ 0x64
 8004664:	4937      	ldr	r1, [pc, #220]	@ (8004744 <HAL_UART_RxCpltCallback+0x104>)
 8004666:	4839      	ldr	r0, [pc, #228]	@ (800474c <HAL_UART_RxCpltCallback+0x10c>)
 8004668:	f006 fafc 	bl	800ac64 <HAL_UART_Receive_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800466c:	4b38      	ldr	r3, [pc, #224]	@ (8004750 <HAL_UART_RxCpltCallback+0x110>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b37      	ldr	r3, [pc, #220]	@ (8004750 <HAL_UART_RxCpltCallback+0x110>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0204 	bic.w	r2, r2, #4
 800467a:	601a      	str	r2, [r3, #0]

	}
	if(huart->Instance==LPUART1){
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a34      	ldr	r2, [pc, #208]	@ (8004754 <HAL_UART_RxCpltCallback+0x114>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d156      	bne.n	8004734 <HAL_UART_RxCpltCallback+0xf4>



		if(receivingflag==0){
 8004686:	4b34      	ldr	r3, [pc, #208]	@ (8004758 <HAL_UART_RxCpltCallback+0x118>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d122      	bne.n	80046d4 <HAL_UART_RxCpltCallback+0x94>
		if(tarvos_RX_Buffer[1]==0x81 && tarvos_RX_Buffer[0]==0x02){
 800468e:	4b33      	ldr	r3, [pc, #204]	@ (800475c <HAL_UART_RxCpltCallback+0x11c>)
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	2b81      	cmp	r3, #129	@ 0x81
 8004694:	d110      	bne.n	80046b8 <HAL_UART_RxCpltCallback+0x78>
 8004696:	4b31      	ldr	r3, [pc, #196]	@ (800475c <HAL_UART_RxCpltCallback+0x11c>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d10c      	bne.n	80046b8 <HAL_UART_RxCpltCallback+0x78>

			memcpy((uint8_t *) tarvos_DATA,(uint8_t *)tarvos_RX_Buffer,5);
 800469e:	2205      	movs	r2, #5
 80046a0:	492e      	ldr	r1, [pc, #184]	@ (800475c <HAL_UART_RxCpltCallback+0x11c>)
 80046a2:	482f      	ldr	r0, [pc, #188]	@ (8004760 <HAL_UART_RxCpltCallback+0x120>)
 80046a4:	f00b fa4d 	bl	800fb42 <memcpy>




			receivingflag=1;
 80046a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004758 <HAL_UART_RxCpltCallback+0x118>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
			receivingindex++;
 80046ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004764 <HAL_UART_RxCpltCallback+0x124>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004764 <HAL_UART_RxCpltCallback+0x124>)
 80046b6:	6013      	str	r3, [r2, #0]
		}

		if(tarvos_RX_Buffer[1]==0x40 && tarvos_RX_Buffer[0]==0x02){
 80046b8:	4b28      	ldr	r3, [pc, #160]	@ (800475c <HAL_UART_RxCpltCallback+0x11c>)
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b40      	cmp	r3, #64	@ 0x40
 80046be:	d11f      	bne.n	8004700 <HAL_UART_RxCpltCallback+0xc0>
 80046c0:	4b26      	ldr	r3, [pc, #152]	@ (800475c <HAL_UART_RxCpltCallback+0x11c>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d11b      	bne.n	8004700 <HAL_UART_RxCpltCallback+0xc0>
					memset((uint8_t *)tarvos_RX_Buffer,0,5);
 80046c8:	2205      	movs	r2, #5
 80046ca:	2100      	movs	r1, #0
 80046cc:	4823      	ldr	r0, [pc, #140]	@ (800475c <HAL_UART_RxCpltCallback+0x11c>)
 80046ce:	f00b f9b9 	bl	800fa44 <memset>
 80046d2:	e015      	b.n	8004700 <HAL_UART_RxCpltCallback+0xc0>
				}


		}
		else{
			if(receivingindex!=0){
 80046d4:	4b23      	ldr	r3, [pc, #140]	@ (8004764 <HAL_UART_RxCpltCallback+0x124>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d011      	beq.n	8004700 <HAL_UART_RxCpltCallback+0xc0>
				memcpy((uint8_t *) tarvos_DATA+(5*receivingindex),(uint8_t *)tarvos_RX_Buffer,5);
 80046dc:	4b21      	ldr	r3, [pc, #132]	@ (8004764 <HAL_UART_RxCpltCallback+0x124>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	461a      	mov	r2, r3
 80046e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <HAL_UART_RxCpltCallback+0x120>)
 80046ea:	4413      	add	r3, r2
 80046ec:	2205      	movs	r2, #5
 80046ee:	491b      	ldr	r1, [pc, #108]	@ (800475c <HAL_UART_RxCpltCallback+0x11c>)
 80046f0:	4618      	mov	r0, r3
 80046f2:	f00b fa26 	bl	800fb42 <memcpy>
				receivingindex++;
 80046f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <HAL_UART_RxCpltCallback+0x124>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	4a19      	ldr	r2, [pc, #100]	@ (8004764 <HAL_UART_RxCpltCallback+0x124>)
 80046fe:	6013      	str	r3, [r2, #0]
			}
		}

		if(receivingindex==8){
 8004700:	4b18      	ldr	r3, [pc, #96]	@ (8004764 <HAL_UART_RxCpltCallback+0x124>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d108      	bne.n	800471a <HAL_UART_RxCpltCallback+0xda>
			receivingindex=0;
 8004708:	4b16      	ldr	r3, [pc, #88]	@ (8004764 <HAL_UART_RxCpltCallback+0x124>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
			receivingflag=0;
 800470e:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <HAL_UART_RxCpltCallback+0x118>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
			trameready=1;
 8004714:	4b14      	ldr	r3, [pc, #80]	@ (8004768 <HAL_UART_RxCpltCallback+0x128>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]
		}
						HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Buffer,5);//on recoit par dma à nouveau 64 caractères
 800471a:	2205      	movs	r2, #5
 800471c:	490f      	ldr	r1, [pc, #60]	@ (800475c <HAL_UART_RxCpltCallback+0x11c>)
 800471e:	480b      	ldr	r0, [pc, #44]	@ (800474c <HAL_UART_RxCpltCallback+0x10c>)
 8004720:	f006 faa0 	bl	800ac64 <HAL_UART_Receive_DMA>
						__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 8004724:	4b11      	ldr	r3, [pc, #68]	@ (800476c <HAL_UART_RxCpltCallback+0x12c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b10      	ldr	r3, [pc, #64]	@ (800476c <HAL_UART_RxCpltCallback+0x12c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0204 	bic.w	r2, r2, #4
 8004732:	601a      	str	r2, [r3, #0]

		}


}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40013800 	.word	0x40013800
 8004740:	2000087c 	.word	0x2000087c
 8004744:	200004fc 	.word	0x200004fc
 8004748:	20000654 	.word	0x20000654
 800474c:	20000ed4 	.word	0x20000ed4
 8004750:	2000105c 	.word	0x2000105c
 8004754:	40008000 	.word	0x40008000
 8004758:	20000ecc 	.word	0x20000ecc
 800475c:	200004bc 	.word	0x200004bc
 8004760:	2000047c 	.word	0x2000047c
 8004764:	20000ed0 	.word	0x20000ed0
 8004768:	20000880 	.word	0x20000880
 800476c:	20000ffc 	.word	0x20000ffc

08004770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004770:	480d      	ldr	r0, [pc, #52]	@ (80047a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004772:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004774:	f7ff f8f4 	bl	8003960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004778:	480c      	ldr	r0, [pc, #48]	@ (80047ac <LoopForever+0x6>)
  ldr r1, =_edata
 800477a:	490d      	ldr	r1, [pc, #52]	@ (80047b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800477c:	4a0d      	ldr	r2, [pc, #52]	@ (80047b4 <LoopForever+0xe>)
  movs r3, #0
 800477e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004780:	e002      	b.n	8004788 <LoopCopyDataInit>

08004782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004786:	3304      	adds	r3, #4

08004788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800478a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800478c:	d3f9      	bcc.n	8004782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800478e:	4a0a      	ldr	r2, [pc, #40]	@ (80047b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004790:	4c0a      	ldr	r4, [pc, #40]	@ (80047bc <LoopForever+0x16>)
  movs r3, #0
 8004792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004794:	e001      	b.n	800479a <LoopFillZerobss>

08004796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004798:	3204      	adds	r2, #4

0800479a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800479a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800479c:	d3fb      	bcc.n	8004796 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800479e:	f00b f9a9 	bl	800faf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80047a2:	f7fd ffc9 	bl	8002738 <main>

080047a6 <LoopForever>:

LoopForever:
    b LoopForever
 80047a6:	e7fe      	b.n	80047a6 <LoopForever>
  ldr   r0, =_estack
 80047a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80047ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047b0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80047b4:	08015b94 	.word	0x08015b94
  ldr r2, =_sbss
 80047b8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80047bc:	20003a84 	.word	0x20003a84

080047c0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047c0:	e7fe      	b.n	80047c0 <COMP1_2_3_IRQHandler>

080047c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047cc:	2003      	movs	r0, #3
 80047ce:	f001 fdb4 	bl	800633a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047d2:	200f      	movs	r0, #15
 80047d4:	f7fe feba 	bl	800354c <HAL_InitTick>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	71fb      	strb	r3, [r7, #7]
 80047e2:	e001      	b.n	80047e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047e4:	f7fe fe88 	bl	80034f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047e8:	79fb      	ldrb	r3, [r7, #7]

}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047f8:	4b05      	ldr	r3, [pc, #20]	@ (8004810 <HAL_IncTick+0x1c>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b05      	ldr	r3, [pc, #20]	@ (8004814 <HAL_IncTick+0x20>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4413      	add	r3, r2
 8004802:	4a03      	ldr	r2, [pc, #12]	@ (8004810 <HAL_IncTick+0x1c>)
 8004804:	6013      	str	r3, [r2, #0]
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	200010bc 	.word	0x200010bc
 8004814:	20000020 	.word	0x20000020

08004818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return uwTick;
 800481c:	4b03      	ldr	r3, [pc, #12]	@ (800482c <HAL_GetTick+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	200010bc 	.word	0x200010bc

08004830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004838:	f7ff ffee 	bl	8004818 <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d004      	beq.n	8004854 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800484a:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <HAL_Delay+0x40>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004854:	bf00      	nop
 8004856:	f7ff ffdf 	bl	8004818 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	429a      	cmp	r2, r3
 8004864:	d8f7      	bhi.n	8004856 <HAL_Delay+0x26>
  {
  }
}
 8004866:	bf00      	nop
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000020 	.word	0x20000020

08004874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	609a      	str	r2, [r3, #8]
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	609a      	str	r2, [r3, #8]
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3360      	adds	r3, #96	@ 0x60
 80048ee:	461a      	mov	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b08      	ldr	r3, [pc, #32]	@ (8004920 <LL_ADC_SetOffset+0x44>)
 80048fe:	4013      	ands	r3, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	4313      	orrs	r3, r2
 800490c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	03fff000 	.word	0x03fff000

08004924 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3360      	adds	r3, #96	@ 0x60
 8004932:	461a      	mov	r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3360      	adds	r3, #96	@ 0x60
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	431a      	orrs	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004986:	b480      	push	{r7}
 8004988:	b087      	sub	sp, #28
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3360      	adds	r3, #96	@ 0x60
 8004996:	461a      	mov	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3360      	adds	r3, #96	@ 0x60
 80049cc:	461a      	mov	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	615a      	str	r2, [r3, #20]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b087      	sub	sp, #28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3330      	adds	r3, #48	@ 0x30
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	4413      	add	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	211f      	movs	r1, #31
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	401a      	ands	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0e9b      	lsrs	r3, r3, #26
 8004a76:	f003 011f 	and.w	r1, r3, #31
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	fa01 f303 	lsl.w	r3, r1, r3
 8004a84:	431a      	orrs	r2, r3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3314      	adds	r3, #20
 8004acc:	461a      	mov	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	0e5b      	lsrs	r3, r3, #25
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	4413      	add	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	0d1b      	lsrs	r3, r3, #20
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	2107      	movs	r1, #7
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	401a      	ands	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	0d1b      	lsrs	r3, r3, #20
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	401a      	ands	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0318 	and.w	r3, r3, #24
 8004b36:	4908      	ldr	r1, [pc, #32]	@ (8004b58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004b38:	40d9      	lsrs	r1, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	400b      	ands	r3, r1
 8004b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	0007ffff 	.word	0x0007ffff

08004b5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 031f 	and.w	r3, r3, #31
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004ba4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6093      	str	r3, [r2, #8]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bcc:	d101      	bne.n	8004bd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bf4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c1c:	d101      	bne.n	8004c22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c44:	f043 0201 	orr.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <LL_ADC_IsEnabled+0x18>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <LL_ADC_IsEnabled+0x1a>
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c8e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c92:	f043 0204 	orr.w	r2, r3, #4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d101      	bne.n	8004cbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d101      	bne.n	8004ce4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b089      	sub	sp, #36	@ 0x24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e167      	b.n	8004fde <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fc fd51 	bl	80017c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff3f 	bl	8004bb8 <LL_ADC_IsDeepPowerDownEnabled>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d004      	beq.n	8004d4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff25 	bl	8004b94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff5a 	bl	8004c08 <LL_ADC_IsInternalRegulatorEnabled>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d115      	bne.n	8004d86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ff3e 	bl	8004be0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d64:	4ba0      	ldr	r3, [pc, #640]	@ (8004fe8 <HAL_ADC_Init+0x2f4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	4aa0      	ldr	r2, [pc, #640]	@ (8004fec <HAL_ADC_Init+0x2f8>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	099b      	lsrs	r3, r3, #6
 8004d72:	3301      	adds	r3, #1
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d78:	e002      	b.n	8004d80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f9      	bne.n	8004d7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff ff3c 	bl	8004c08 <LL_ADC_IsInternalRegulatorEnabled>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10d      	bne.n	8004db2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9a:	f043 0210 	orr.w	r2, r3, #16
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da6:	f043 0201 	orr.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff ff75 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 8004dbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f040 8100 	bne.w	8004fcc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 80fc 	bne.w	8004fcc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004ddc:	f043 0202 	orr.w	r2, r3, #2
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff35 	bl	8004c58 <LL_ADC_IsEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d111      	bne.n	8004e18 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004df4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004df8:	f7ff ff2e 	bl	8004c58 <LL_ADC_IsEnabled>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	487c      	ldr	r0, [pc, #496]	@ (8004ff0 <HAL_ADC_Init+0x2fc>)
 8004e00:	f7ff ff2a 	bl	8004c58 <LL_ADC_IsEnabled>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4323      	orrs	r3, r4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d105      	bne.n	8004e18 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4619      	mov	r1, r3
 8004e12:	4878      	ldr	r0, [pc, #480]	@ (8004ff4 <HAL_ADC_Init+0x300>)
 8004e14:	f7ff fd2e 	bl	8004874 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	7f5b      	ldrb	r3, [r3, #29]
 8004e1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d106      	bne.n	8004e54 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	045b      	lsls	r3, r3, #17
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	4b60      	ldr	r3, [pc, #384]	@ (8004ff8 <HAL_ADC_Init+0x304>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	69b9      	ldr	r1, [r7, #24]
 8004e80:	430b      	orrs	r3, r1
 8004e82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff ff14 	bl	8004ccc <LL_ADC_INJ_IsConversionOngoing>
 8004ea4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d16d      	bne.n	8004f88 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d16a      	bne.n	8004f88 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004eb6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ebe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ece:	f023 0302 	bic.w	r3, r3, #2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	69b9      	ldr	r1, [r7, #24]
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d017      	beq.n	8004f14 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ef2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004efc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6911      	ldr	r1, [r2, #16]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004f12:	e013      	b.n	8004f3c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f38:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d118      	bne.n	8004f78 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f50:	f023 0304 	bic.w	r3, r3, #4
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f5c:	4311      	orrs	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f62:	4311      	orrs	r1, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0201 	orr.w	r2, r2, #1
 8004f74:	611a      	str	r2, [r3, #16]
 8004f76:	e007      	b.n	8004f88 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10c      	bne.n	8004faa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	f023 010f 	bic.w	r1, r3, #15
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	1e5a      	subs	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fa8:	e007      	b.n	8004fba <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 020f 	bic.w	r2, r2, #15
 8004fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fbe:	f023 0303 	bic.w	r3, r3, #3
 8004fc2:	f043 0201 	orr.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fca:	e007      	b.n	8004fdc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd0:	f043 0210 	orr.w	r2, r3, #16
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3724      	adds	r7, #36	@ 0x24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd90      	pop	{r4, r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000018 	.word	0x20000018
 8004fec:	053e2d63 	.word	0x053e2d63
 8004ff0:	50000100 	.word	0x50000100
 8004ff4:	50000300 	.word	0x50000300
 8004ff8:	fff04007 	.word	0xfff04007

08004ffc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005008:	4851      	ldr	r0, [pc, #324]	@ (8005150 <HAL_ADC_Start_DMA+0x154>)
 800500a:	f7ff fda7 	bl	8004b5c <LL_ADC_GetMultimode>
 800500e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fe46 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	f040 808f 	bne.w	8005140 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_ADC_Start_DMA+0x34>
 800502c:	2302      	movs	r3, #2
 800502e:	e08a      	b.n	8005146 <HAL_ADC_Start_DMA+0x14a>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b05      	cmp	r3, #5
 8005042:	d002      	beq.n	800504a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b09      	cmp	r3, #9
 8005048:	d173      	bne.n	8005132 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 feb2 	bl	8005db4 <ADC_Enable>
 8005050:	4603      	mov	r3, r0
 8005052:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d166      	bne.n	8005128 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a38      	ldr	r2, [pc, #224]	@ (8005154 <HAL_ADC_Start_DMA+0x158>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d002      	beq.n	800507e <HAL_ADC_Start_DMA+0x82>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	e001      	b.n	8005082 <HAL_ADC_Start_DMA+0x86>
 800507e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	4293      	cmp	r3, r2
 8005088:	d002      	beq.n	8005090 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005094:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d006      	beq.n	80050b6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ac:	f023 0206 	bic.w	r2, r3, #6
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80050b4:	e002      	b.n	80050bc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c0:	4a25      	ldr	r2, [pc, #148]	@ (8005158 <HAL_ADC_Start_DMA+0x15c>)
 80050c2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c8:	4a24      	ldr	r2, [pc, #144]	@ (800515c <HAL_ADC_Start_DMA+0x160>)
 80050ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d0:	4a23      	ldr	r2, [pc, #140]	@ (8005160 <HAL_ADC_Start_DMA+0x164>)
 80050d2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	221c      	movs	r2, #28
 80050da:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0210 	orr.w	r2, r2, #16
 80050f2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3340      	adds	r3, #64	@ 0x40
 800510e:	4619      	mov	r1, r3
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f001 f9ec 	bl	80064f0 <HAL_DMA_Start_IT>
 8005118:	4603      	mov	r3, r0
 800511a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fdac 	bl	8004c7e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005126:	e00d      	b.n	8005144 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005130:	e008      	b.n	8005144 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800513e:	e001      	b.n	8005144 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005140:	2302      	movs	r3, #2
 8005142:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	50000300 	.word	0x50000300
 8005154:	50000100 	.word	0x50000100
 8005158:	08005ec1 	.word	0x08005ec1
 800515c:	08005f99 	.word	0x08005f99
 8005160:	08005fb5 	.word	0x08005fb5

08005164 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	@ 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800516c:	2300      	movs	r3, #0
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005180:	4883      	ldr	r0, [pc, #524]	@ (8005390 <HAL_ADC_IRQHandler+0x22c>)
 8005182:	f7ff fceb 	bl	8004b5c <LL_ADC_GetMultimode>
 8005186:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d017      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x5e>
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d012      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d105      	bne.n	80051b4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ac:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 ff65 	bl	8006084 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2202      	movs	r2, #2
 80051c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_ADC_IRQHandler+0x72>
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8085 	beq.w	80052ec <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d07f      	beq.n	80052ec <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff fc05 	bl	8004a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d064      	beq.n	80052de <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a5e      	ldr	r2, [pc, #376]	@ (8005394 <HAL_ADC_IRQHandler+0x230>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d002      	beq.n	8005224 <HAL_ADC_IRQHandler+0xc0>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	e001      	b.n	8005228 <HAL_ADC_IRQHandler+0xc4>
 8005224:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	4293      	cmp	r3, r2
 800522e:	d008      	beq.n	8005242 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b05      	cmp	r3, #5
 800523a:	d002      	beq.n	8005242 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b09      	cmp	r3, #9
 8005240:	d104      	bne.n	800524c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	e00d      	b.n	8005268 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a50      	ldr	r2, [pc, #320]	@ (8005394 <HAL_ADC_IRQHandler+0x230>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d002      	beq.n	800525c <HAL_ADC_IRQHandler+0xf8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	e001      	b.n	8005260 <HAL_ADC_IRQHandler+0xfc>
 800525c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005260:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d135      	bne.n	80052de <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b08      	cmp	r3, #8
 800527e:	d12e      	bne.n	80052de <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fd0e 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d11a      	bne.n	80052c6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 020c 	bic.w	r2, r2, #12
 800529e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d112      	bne.n	80052de <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052c4:	e00b      	b.n	80052de <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ca:	f043 0210 	orr.w	r2, r3, #16
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d6:	f043 0201 	orr.w	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc fafa 	bl	80018d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	220c      	movs	r2, #12
 80052ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <HAL_ADC_IRQHandler+0x19c>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 809e 	beq.w	8005448 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8098 	beq.w	8005448 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d105      	bne.n	8005330 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005328:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fbae 	bl	8004a96 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800533a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fb69 	bl	8004a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005346:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a11      	ldr	r2, [pc, #68]	@ (8005394 <HAL_ADC_IRQHandler+0x230>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d002      	beq.n	8005358 <HAL_ADC_IRQHandler+0x1f4>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	e001      	b.n	800535c <HAL_ADC_IRQHandler+0x1f8>
 8005358:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	4293      	cmp	r3, r2
 8005362:	d008      	beq.n	8005376 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b06      	cmp	r3, #6
 800536e:	d002      	beq.n	8005376 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b07      	cmp	r3, #7
 8005374:	d104      	bne.n	8005380 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	623b      	str	r3, [r7, #32]
 800537e:	e011      	b.n	80053a4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a03      	ldr	r2, [pc, #12]	@ (8005394 <HAL_ADC_IRQHandler+0x230>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d006      	beq.n	8005398 <HAL_ADC_IRQHandler+0x234>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	e005      	b.n	800539c <HAL_ADC_IRQHandler+0x238>
 8005390:	50000300 	.word	0x50000300
 8005394:	50000100 	.word	0x50000100
 8005398:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800539c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d047      	beq.n	800543a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <HAL_ADC_IRQHandler+0x260>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d03f      	beq.n	800543a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d13a      	bne.n	800543a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ce:	2b40      	cmp	r3, #64	@ 0x40
 80053d0:	d133      	bne.n	800543a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d12e      	bne.n	800543a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff fc73 	bl	8004ccc <LL_ADC_INJ_IsConversionOngoing>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d11a      	bne.n	8005422 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053fa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005400:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d112      	bne.n	800543a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005420:	e00b      	b.n	800543a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005426:	f043 0210 	orr.w	r2, r3, #16
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005432:	f043 0201 	orr.w	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fdfa 	bl	8006034 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2260      	movs	r2, #96	@ 0x60
 8005446:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d011      	beq.n	8005476 <HAL_ADC_IRQHandler+0x312>
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00c      	beq.n	8005476 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f89f 	bl	80055ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2280      	movs	r2, #128	@ 0x80
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <HAL_ADC_IRQHandler+0x342>
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fde0 	bl	800605c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d012      	beq.n	80054d6 <HAL_ADC_IRQHandler+0x372>
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fdd2 	bl	8006070 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d036      	beq.n	800554e <HAL_ADC_IRQHandler+0x3ea>
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d031      	beq.n	800554e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80054f2:	2301      	movs	r3, #1
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f6:	e014      	b.n	8005522 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80054fe:	4825      	ldr	r0, [pc, #148]	@ (8005594 <HAL_ADC_IRQHandler+0x430>)
 8005500:	f7ff fb3a 	bl	8004b78 <LL_ADC_GetMultiDMATransfer>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800550a:	2301      	movs	r3, #1
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
 800550e:	e008      	b.n	8005522 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800551e:	2301      	movs	r3, #1
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	2b01      	cmp	r3, #1
 8005526:	d10e      	bne.n	8005546 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005538:	f043 0202 	orr.w	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f83d 	bl	80055c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2210      	movs	r2, #16
 800554c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005554:	2b00      	cmp	r3, #0
 8005556:	d018      	beq.n	800558a <HAL_ADC_IRQHandler+0x426>
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555e:	2b00      	cmp	r3, #0
 8005560:	d013      	beq.n	800558a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005566:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005572:	f043 0208 	orr.w	r2, r3, #8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005582:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fd5f 	bl	8006048 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800558a:	bf00      	nop
 800558c:	3728      	adds	r7, #40	@ 0x28
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	50000300 	.word	0x50000300

08005598 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b0b6      	sub	sp, #216	@ 0xd8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x22>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e3c8      	b.n	8005d88 <HAL_ADC_ConfigChannel+0x7b4>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fb4f 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 83ad 	bne.w	8005d6a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6859      	ldr	r1, [r3, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	f7ff fa0e 	bl	8004a3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fb3d 	bl	8004ca6 <LL_ADC_REG_IsConversionOngoing>
 800562c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fb49 	bl	8004ccc <LL_ADC_INJ_IsConversionOngoing>
 800563a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800563e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005642:	2b00      	cmp	r3, #0
 8005644:	f040 81d9 	bne.w	80059fa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800564c:	2b00      	cmp	r3, #0
 800564e:	f040 81d4 	bne.w	80059fa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800565a:	d10f      	bne.n	800567c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2200      	movs	r2, #0
 8005666:	4619      	mov	r1, r3
 8005668:	f7ff fa28 	bl	8004abc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff f9bc 	bl	80049f2 <LL_ADC_SetSamplingTimeCommonConfig>
 800567a:	e00e      	b.n	800569a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6819      	ldr	r1, [r3, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	461a      	mov	r2, r3
 800568a:	f7ff fa17 	bl	8004abc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2100      	movs	r1, #0
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff f9ac 	bl	80049f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	08db      	lsrs	r3, r3, #3
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d022      	beq.n	8005702 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	6919      	ldr	r1, [r3, #16]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80056cc:	f7ff f906 	bl	80048dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	6919      	ldr	r1, [r3, #16]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	461a      	mov	r2, r3
 80056de:	f7ff f952 	bl	8004986 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d102      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x124>
 80056f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056f6:	e000      	b.n	80056fa <HAL_ADC_ConfigChannel+0x126>
 80056f8:	2300      	movs	r3, #0
 80056fa:	461a      	mov	r2, r3
 80056fc:	f7ff f95e 	bl	80049bc <LL_ADC_SetOffsetSaturation>
 8005700:	e17b      	b.n	80059fa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2100      	movs	r1, #0
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff f90b 	bl	8004924 <LL_ADC_GetOffsetChannel>
 800570e:	4603      	mov	r3, r0
 8005710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <HAL_ADC_ConfigChannel+0x15a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2100      	movs	r1, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff f900 	bl	8004924 <LL_ADC_GetOffsetChannel>
 8005724:	4603      	mov	r3, r0
 8005726:	0e9b      	lsrs	r3, r3, #26
 8005728:	f003 021f 	and.w	r2, r3, #31
 800572c:	e01e      	b.n	800576c <HAL_ADC_ConfigChannel+0x198>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2100      	movs	r1, #0
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff f8f5 	bl	8004924 <LL_ADC_GetOffsetChannel>
 800573a:	4603      	mov	r3, r0
 800573c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005740:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005744:	fa93 f3a3 	rbit	r3, r3
 8005748:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800574c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800575c:	2320      	movs	r3, #32
 800575e:	e004      	b.n	800576a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8005760:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x1b0>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	0e9b      	lsrs	r3, r3, #26
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	e018      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x1e2>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005790:	fa93 f3a3 	rbit	r3, r3
 8005794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800579c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80057a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80057a8:	2320      	movs	r3, #32
 80057aa:	e004      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80057ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057b0:	fab3 f383 	clz	r3, r3
 80057b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d106      	bne.n	80057c8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	2100      	movs	r1, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff f8c4 	bl	8004950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2101      	movs	r1, #1
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff f8a8 	bl	8004924 <LL_ADC_GetOffsetChannel>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x220>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2101      	movs	r1, #1
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff f89d 	bl	8004924 <LL_ADC_GetOffsetChannel>
 80057ea:	4603      	mov	r3, r0
 80057ec:	0e9b      	lsrs	r3, r3, #26
 80057ee:	f003 021f 	and.w	r2, r3, #31
 80057f2:	e01e      	b.n	8005832 <HAL_ADC_ConfigChannel+0x25e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2101      	movs	r1, #1
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff f892 	bl	8004924 <LL_ADC_GetOffsetChannel>
 8005800:	4603      	mov	r3, r0
 8005802:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800580a:	fa93 f3a3 	rbit	r3, r3
 800580e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800581a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005822:	2320      	movs	r3, #32
 8005824:	e004      	b.n	8005830 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800582a:	fab3 f383 	clz	r3, r3
 800582e:	b2db      	uxtb	r3, r3
 8005830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800583a:	2b00      	cmp	r3, #0
 800583c:	d105      	bne.n	800584a <HAL_ADC_ConfigChannel+0x276>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	0e9b      	lsrs	r3, r3, #26
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	e018      	b.n	800587c <HAL_ADC_ConfigChannel+0x2a8>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005852:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800585e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005866:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800586e:	2320      	movs	r3, #32
 8005870:	e004      	b.n	800587c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8005872:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005876:	fab3 f383 	clz	r3, r3
 800587a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800587c:	429a      	cmp	r2, r3
 800587e:	d106      	bne.n	800588e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2200      	movs	r2, #0
 8005886:	2101      	movs	r1, #1
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff f861 	bl	8004950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2102      	movs	r1, #2
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff f845 	bl	8004924 <LL_ADC_GetOffsetChannel>
 800589a:	4603      	mov	r3, r0
 800589c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x2e6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2102      	movs	r1, #2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff f83a 	bl	8004924 <LL_ADC_GetOffsetChannel>
 80058b0:	4603      	mov	r3, r0
 80058b2:	0e9b      	lsrs	r3, r3, #26
 80058b4:	f003 021f 	and.w	r2, r3, #31
 80058b8:	e01e      	b.n	80058f8 <HAL_ADC_ConfigChannel+0x324>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2102      	movs	r1, #2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff f82f 	bl	8004924 <LL_ADC_GetOffsetChannel>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058d0:	fa93 f3a3 	rbit	r3, r3
 80058d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80058d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80058e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80058e8:	2320      	movs	r3, #32
 80058ea:	e004      	b.n	80058f6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80058ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80058f0:	fab3 f383 	clz	r3, r3
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <HAL_ADC_ConfigChannel+0x33c>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	0e9b      	lsrs	r3, r3, #26
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	e016      	b.n	800593e <HAL_ADC_ConfigChannel+0x36a>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005918:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800591c:	fa93 f3a3 	rbit	r3, r3
 8005920:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005922:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005930:	2320      	movs	r3, #32
 8005932:	e004      	b.n	800593e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005938:	fab3 f383 	clz	r3, r3
 800593c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800593e:	429a      	cmp	r2, r3
 8005940:	d106      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	2102      	movs	r1, #2
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff f800 	bl	8004950 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2103      	movs	r1, #3
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe ffe4 	bl	8004924 <LL_ADC_GetOffsetChannel>
 800595c:	4603      	mov	r3, r0
 800595e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <HAL_ADC_ConfigChannel+0x3a8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2103      	movs	r1, #3
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe ffd9 	bl	8004924 <LL_ADC_GetOffsetChannel>
 8005972:	4603      	mov	r3, r0
 8005974:	0e9b      	lsrs	r3, r3, #26
 8005976:	f003 021f 	and.w	r2, r3, #31
 800597a:	e017      	b.n	80059ac <HAL_ADC_ConfigChannel+0x3d8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2103      	movs	r1, #3
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe ffce 	bl	8004924 <LL_ADC_GetOffsetChannel>
 8005988:	4603      	mov	r3, r0
 800598a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005994:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005996:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800599e:	2320      	movs	r3, #32
 80059a0:	e003      	b.n	80059aa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80059a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059a4:	fab3 f383 	clz	r3, r3
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d105      	bne.n	80059c4 <HAL_ADC_ConfigChannel+0x3f0>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	0e9b      	lsrs	r3, r3, #26
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	e011      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x414>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059cc:	fa93 f3a3 	rbit	r3, r3
 80059d0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80059d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80059d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80059dc:	2320      	movs	r3, #32
 80059de:	e003      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80059e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d106      	bne.n	80059fa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2200      	movs	r2, #0
 80059f2:	2103      	movs	r1, #3
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe ffab 	bl	8004950 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff f92a 	bl	8004c58 <LL_ADC_IsEnabled>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f040 8140 	bne.w	8005c8c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6819      	ldr	r1, [r3, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f7ff f87b 	bl	8004b14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	4a8f      	ldr	r2, [pc, #572]	@ (8005c60 <HAL_ADC_ConfigChannel+0x68c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	f040 8131 	bne.w	8005c8c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0x47e>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	0e9b      	lsrs	r3, r3, #26
 8005a40:	3301      	adds	r3, #1
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2b09      	cmp	r3, #9
 8005a48:	bf94      	ite	ls
 8005a4a:	2301      	movls	r3, #1
 8005a4c:	2300      	movhi	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	e019      	b.n	8005a86 <HAL_ADC_ConfigChannel+0x4b2>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a5a:	fa93 f3a3 	rbit	r3, r3
 8005a5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a62:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005a64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8005a6a:	2320      	movs	r3, #32
 8005a6c:	e003      	b.n	8005a76 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8005a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a70:	fab3 f383 	clz	r3, r3
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	3301      	adds	r3, #1
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	bf94      	ite	ls
 8005a80:	2301      	movls	r3, #1
 8005a82:	2300      	movhi	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d079      	beq.n	8005b7e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d107      	bne.n	8005aa6 <HAL_ADC_ConfigChannel+0x4d2>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	0e9b      	lsrs	r3, r3, #26
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	069b      	lsls	r3, r3, #26
 8005aa0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005aa4:	e015      	b.n	8005ad2 <HAL_ADC_ConfigChannel+0x4fe>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aae:	fa93 f3a3 	rbit	r3, r3
 8005ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005abe:	2320      	movs	r3, #32
 8005ac0:	e003      	b.n	8005aca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac4:	fab3 f383 	clz	r3, r3
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	3301      	adds	r3, #1
 8005acc:	069b      	lsls	r3, r3, #26
 8005ace:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x51e>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	0e9b      	lsrs	r3, r3, #26
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	2101      	movs	r1, #1
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	e017      	b.n	8005b22 <HAL_ADC_ConfigChannel+0x54e>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005afa:	fa93 f3a3 	rbit	r3, r3
 8005afe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005b0a:	2320      	movs	r3, #32
 8005b0c:	e003      	b.n	8005b16 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b10:	fab3 f383 	clz	r3, r3
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	3301      	adds	r3, #1
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b22:	ea42 0103 	orr.w	r1, r2, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <HAL_ADC_ConfigChannel+0x574>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	0e9b      	lsrs	r3, r3, #26
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f003 021f 	and.w	r2, r3, #31
 8005b3e:	4613      	mov	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	051b      	lsls	r3, r3, #20
 8005b46:	e018      	b.n	8005b7a <HAL_ADC_ConfigChannel+0x5a6>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	fa93 f3a3 	rbit	r3, r3
 8005b54:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005b60:	2320      	movs	r3, #32
 8005b62:	e003      	b.n	8005b6c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b66:	fab3 f383 	clz	r3, r3
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	f003 021f 	and.w	r2, r3, #31
 8005b72:	4613      	mov	r3, r2
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	4413      	add	r3, r2
 8005b78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	e081      	b.n	8005c82 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d107      	bne.n	8005b9a <HAL_ADC_ConfigChannel+0x5c6>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	0e9b      	lsrs	r3, r3, #26
 8005b90:	3301      	adds	r3, #1
 8005b92:	069b      	lsls	r3, r3, #26
 8005b94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b98:	e015      	b.n	8005bc6 <HAL_ADC_ConfigChannel+0x5f2>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	fa93 f3a3 	rbit	r3, r3
 8005ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005bb2:	2320      	movs	r3, #32
 8005bb4:	e003      	b.n	8005bbe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	fab3 f383 	clz	r3, r3
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	069b      	lsls	r3, r3, #26
 8005bc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_ADC_ConfigChannel+0x612>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	0e9b      	lsrs	r3, r3, #26
 8005bd8:	3301      	adds	r3, #1
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2101      	movs	r1, #1
 8005be0:	fa01 f303 	lsl.w	r3, r1, r3
 8005be4:	e017      	b.n	8005c16 <HAL_ADC_ConfigChannel+0x642>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	fa93 f3a3 	rbit	r3, r3
 8005bf2:	61fb      	str	r3, [r7, #28]
  return result;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005bfe:	2320      	movs	r3, #32
 8005c00:	e003      	b.n	8005c0a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	fab3 f383 	clz	r3, r3
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	2101      	movs	r1, #1
 8005c12:	fa01 f303 	lsl.w	r3, r1, r3
 8005c16:	ea42 0103 	orr.w	r1, r2, r3
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10d      	bne.n	8005c42 <HAL_ADC_ConfigChannel+0x66e>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	0e9b      	lsrs	r3, r3, #26
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f003 021f 	and.w	r2, r3, #31
 8005c32:	4613      	mov	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4413      	add	r3, r2
 8005c38:	3b1e      	subs	r3, #30
 8005c3a:	051b      	lsls	r3, r3, #20
 8005c3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c40:	e01e      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x6ac>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	613b      	str	r3, [r7, #16]
  return result;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005c5a:	2320      	movs	r3, #32
 8005c5c:	e006      	b.n	8005c6c <HAL_ADC_ConfigChannel+0x698>
 8005c5e:	bf00      	nop
 8005c60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	fab3 f383 	clz	r3, r3
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	f003 021f 	and.w	r2, r3, #31
 8005c72:	4613      	mov	r3, r2
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	4413      	add	r3, r2
 8005c78:	3b1e      	subs	r3, #30
 8005c7a:	051b      	lsls	r3, r3, #20
 8005c7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c86:	4619      	mov	r1, r3
 8005c88:	f7fe ff18 	bl	8004abc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4b3f      	ldr	r3, [pc, #252]	@ (8005d90 <HAL_ADC_ConfigChannel+0x7bc>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d071      	beq.n	8005d7c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c98:	483e      	ldr	r0, [pc, #248]	@ (8005d94 <HAL_ADC_ConfigChannel+0x7c0>)
 8005c9a:	f7fe fe11 	bl	80048c0 <LL_ADC_GetCommonPathInternalCh>
 8005c9e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a3c      	ldr	r2, [pc, #240]	@ (8005d98 <HAL_ADC_ConfigChannel+0x7c4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_ADC_ConfigChannel+0x6e2>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8005d9c <HAL_ADC_ConfigChannel+0x7c8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d127      	bne.n	8005d06 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d121      	bne.n	8005d06 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cca:	d157      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	482f      	ldr	r0, [pc, #188]	@ (8005d94 <HAL_ADC_ConfigChannel+0x7c0>)
 8005cd8:	f7fe fddf 	bl	800489a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cdc:	4b30      	ldr	r3, [pc, #192]	@ (8005da0 <HAL_ADC_ConfigChannel+0x7cc>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	099b      	lsrs	r3, r3, #6
 8005ce2:	4a30      	ldr	r2, [pc, #192]	@ (8005da4 <HAL_ADC_ConfigChannel+0x7d0>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	099b      	lsrs	r3, r3, #6
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005cf6:	e002      	b.n	8005cfe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f9      	bne.n	8005cf8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d04:	e03a      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a27      	ldr	r2, [pc, #156]	@ (8005da8 <HAL_ADC_ConfigChannel+0x7d4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d113      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10d      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a22      	ldr	r2, [pc, #136]	@ (8005dac <HAL_ADC_ConfigChannel+0x7d8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d02a      	beq.n	8005d7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4818      	ldr	r0, [pc, #96]	@ (8005d94 <HAL_ADC_ConfigChannel+0x7c0>)
 8005d32:	f7fe fdb2 	bl	800489a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d36:	e021      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d11c      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d116      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a16      	ldr	r2, [pc, #88]	@ (8005dac <HAL_ADC_ConfigChannel+0x7d8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d011      	beq.n	8005d7c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d60:	4619      	mov	r1, r3
 8005d62:	480c      	ldr	r0, [pc, #48]	@ (8005d94 <HAL_ADC_ConfigChannel+0x7c0>)
 8005d64:	f7fe fd99 	bl	800489a <LL_ADC_SetCommonPathInternalCh>
 8005d68:	e008      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6e:	f043 0220 	orr.w	r2, r3, #32
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d84:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	37d8      	adds	r7, #216	@ 0xd8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	80080000 	.word	0x80080000
 8005d94:	50000300 	.word	0x50000300
 8005d98:	c3210000 	.word	0xc3210000
 8005d9c:	90c00010 	.word	0x90c00010
 8005da0:	20000018 	.word	0x20000018
 8005da4:	053e2d63 	.word	0x053e2d63
 8005da8:	c7520000 	.word	0xc7520000
 8005dac:	50000100 	.word	0x50000100
 8005db0:	cb840000 	.word	0xcb840000

08005db4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fe ff47 	bl	8004c58 <LL_ADC_IsEnabled>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d169      	bne.n	8005ea4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	4b36      	ldr	r3, [pc, #216]	@ (8005eb0 <ADC_Enable+0xfc>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00d      	beq.n	8005dfa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de2:	f043 0210 	orr.w	r2, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e055      	b.n	8005ea6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe ff16 	bl	8004c30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005e04:	482b      	ldr	r0, [pc, #172]	@ (8005eb4 <ADC_Enable+0x100>)
 8005e06:	f7fe fd5b 	bl	80048c0 <LL_ADC_GetCommonPathInternalCh>
 8005e0a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005e0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d013      	beq.n	8005e3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e14:	4b28      	ldr	r3, [pc, #160]	@ (8005eb8 <ADC_Enable+0x104>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	099b      	lsrs	r3, r3, #6
 8005e1a:	4a28      	ldr	r2, [pc, #160]	@ (8005ebc <ADC_Enable+0x108>)
 8005e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e20:	099b      	lsrs	r3, r3, #6
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e2e:	e002      	b.n	8005e36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f9      	bne.n	8005e30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005e3c:	f7fe fcec 	bl	8004818 <HAL_GetTick>
 8005e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e42:	e028      	b.n	8005e96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe ff05 	bl	8004c58 <LL_ADC_IsEnabled>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d104      	bne.n	8005e5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fee9 	bl	8004c30 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e5e:	f7fe fcdb 	bl	8004818 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d914      	bls.n	8005e96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d00d      	beq.n	8005e96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e7e:	f043 0210 	orr.w	r2, r3, #16
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8a:	f043 0201 	orr.w	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e007      	b.n	8005ea6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d1cf      	bne.n	8005e44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	8000003f 	.word	0x8000003f
 8005eb4:	50000300 	.word	0x50000300
 8005eb8:	20000018 	.word	0x20000018
 8005ebc:	053e2d63 	.word	0x053e2d63

08005ec0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d14b      	bne.n	8005f72 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ede:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d021      	beq.n	8005f38 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fd8d 	bl	8004a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d032      	beq.n	8005f6a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d12b      	bne.n	8005f6a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d11f      	bne.n	8005f6a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f2e:	f043 0201 	orr.w	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f36:	e018      	b.n	8005f6a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d111      	bne.n	8005f6a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d105      	bne.n	8005f6a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f62:	f043 0201 	orr.w	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7fb fcb4 	bl	80018d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005f70:	e00e      	b.n	8005f90 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff fb1e 	bl	80055c0 <HAL_ADC_ErrorCallback>
}
 8005f84:	e004      	b.n	8005f90 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f7ff faf6 	bl	8005598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd2:	f043 0204 	orr.w	r2, r3, #4
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7ff faf0 	bl	80055c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <LL_ADC_IsEnabled>:
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <LL_ADC_IsEnabled+0x18>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <LL_ADC_IsEnabled+0x1a>
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <LL_ADC_REG_IsConversionOngoing>:
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d101      	bne.n	8006026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b0a1      	sub	sp, #132	@ 0x84
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e08b      	b.n	80061ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80060be:	2300      	movs	r3, #0
 80060c0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80060c2:	2300      	movs	r3, #0
 80060c4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ce:	d102      	bne.n	80060d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80060d0:	4b41      	ldr	r3, [pc, #260]	@ (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	e001      	b.n	80060da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e06a      	b.n	80061ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff ff87 	bl	800600e <LL_ADC_REG_IsConversionOngoing>
 8006100:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff ff81 	bl	800600e <LL_ADC_REG_IsConversionOngoing>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d14c      	bne.n	80061ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006112:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006114:	2b00      	cmp	r3, #0
 8006116:	d149      	bne.n	80061ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006118:	4b30      	ldr	r3, [pc, #192]	@ (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800611a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d028      	beq.n	8006176 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	6859      	ldr	r1, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006136:	035b      	lsls	r3, r3, #13
 8006138:	430b      	orrs	r3, r1
 800613a:	431a      	orrs	r2, r3
 800613c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800613e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006140:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006144:	f7ff ff50 	bl	8005fe8 <LL_ADC_IsEnabled>
 8006148:	4604      	mov	r4, r0
 800614a:	4823      	ldr	r0, [pc, #140]	@ (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800614c:	f7ff ff4c 	bl	8005fe8 <LL_ADC_IsEnabled>
 8006150:	4603      	mov	r3, r0
 8006152:	4323      	orrs	r3, r4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d133      	bne.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006160:	f023 030f 	bic.w	r3, r3, #15
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	6811      	ldr	r1, [r2, #0]
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	6892      	ldr	r2, [r2, #8]
 800616c:	430a      	orrs	r2, r1
 800616e:	431a      	orrs	r2, r3
 8006170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006172:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006174:	e024      	b.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800617e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006180:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006182:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006186:	f7ff ff2f 	bl	8005fe8 <LL_ADC_IsEnabled>
 800618a:	4604      	mov	r4, r0
 800618c:	4812      	ldr	r0, [pc, #72]	@ (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800618e:	f7ff ff2b 	bl	8005fe8 <LL_ADC_IsEnabled>
 8006192:	4603      	mov	r3, r0
 8006194:	4323      	orrs	r3, r4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d112      	bne.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800619a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80061a2:	f023 030f 	bic.w	r3, r3, #15
 80061a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80061a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80061aa:	e009      	b.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80061be:	e000      	b.n	80061c2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80061c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80061ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3784      	adds	r7, #132	@ 0x84
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd90      	pop	{r4, r7, pc}
 80061d6:	bf00      	nop
 80061d8:	50000100 	.word	0x50000100
 80061dc:	50000300 	.word	0x50000300

080061e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006224 <__NVIC_SetPriorityGrouping+0x44>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80061fc:	4013      	ands	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800620c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006212:	4a04      	ldr	r2, [pc, #16]	@ (8006224 <__NVIC_SetPriorityGrouping+0x44>)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	60d3      	str	r3, [r2, #12]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	e000ed00 	.word	0xe000ed00

08006228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800622c:	4b04      	ldr	r3, [pc, #16]	@ (8006240 <__NVIC_GetPriorityGrouping+0x18>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	0a1b      	lsrs	r3, r3, #8
 8006232:	f003 0307 	and.w	r3, r3, #7
}
 8006236:	4618      	mov	r0, r3
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	e000ed00 	.word	0xe000ed00

08006244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800624e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006252:	2b00      	cmp	r3, #0
 8006254:	db0b      	blt.n	800626e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	f003 021f 	and.w	r2, r3, #31
 800625c:	4907      	ldr	r1, [pc, #28]	@ (800627c <__NVIC_EnableIRQ+0x38>)
 800625e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	2001      	movs	r0, #1
 8006266:	fa00 f202 	lsl.w	r2, r0, r2
 800626a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800626e:	bf00      	nop
 8006270:	370c      	adds	r7, #12
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	e000e100 	.word	0xe000e100

08006280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	6039      	str	r1, [r7, #0]
 800628a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800628c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006290:	2b00      	cmp	r3, #0
 8006292:	db0a      	blt.n	80062aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	490c      	ldr	r1, [pc, #48]	@ (80062cc <__NVIC_SetPriority+0x4c>)
 800629a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629e:	0112      	lsls	r2, r2, #4
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	440b      	add	r3, r1
 80062a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062a8:	e00a      	b.n	80062c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	4908      	ldr	r1, [pc, #32]	@ (80062d0 <__NVIC_SetPriority+0x50>)
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	3b04      	subs	r3, #4
 80062b8:	0112      	lsls	r2, r2, #4
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	440b      	add	r3, r1
 80062be:	761a      	strb	r2, [r3, #24]
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	e000e100 	.word	0xe000e100
 80062d0:	e000ed00 	.word	0xe000ed00

080062d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b089      	sub	sp, #36	@ 0x24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f1c3 0307 	rsb	r3, r3, #7
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	bf28      	it	cs
 80062f2:	2304      	movcs	r3, #4
 80062f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	3304      	adds	r3, #4
 80062fa:	2b06      	cmp	r3, #6
 80062fc:	d902      	bls.n	8006304 <NVIC_EncodePriority+0x30>
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	3b03      	subs	r3, #3
 8006302:	e000      	b.n	8006306 <NVIC_EncodePriority+0x32>
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006308:	f04f 32ff 	mov.w	r2, #4294967295
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43da      	mvns	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	401a      	ands	r2, r3
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800631c:	f04f 31ff 	mov.w	r1, #4294967295
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	fa01 f303 	lsl.w	r3, r1, r3
 8006326:	43d9      	mvns	r1, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800632c:	4313      	orrs	r3, r2
         );
}
 800632e:	4618      	mov	r0, r3
 8006330:	3724      	adds	r7, #36	@ 0x24
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff ff4c 	bl	80061e0 <__NVIC_SetPriorityGrouping>
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800635e:	f7ff ff63 	bl	8006228 <__NVIC_GetPriorityGrouping>
 8006362:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	6978      	ldr	r0, [r7, #20]
 800636a:	f7ff ffb3 	bl	80062d4 <NVIC_EncodePriority>
 800636e:	4602      	mov	r2, r0
 8006370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006374:	4611      	mov	r1, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff ff82 	bl	8006280 <__NVIC_SetPriority>
}
 800637c:	bf00      	nop
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800638e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff ff56 	bl	8006244 <__NVIC_EnableIRQ>
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e08d      	b.n	80064ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	4b47      	ldr	r3, [pc, #284]	@ (80064d8 <HAL_DMA_Init+0x138>)
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d80f      	bhi.n	80063de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	4b45      	ldr	r3, [pc, #276]	@ (80064dc <HAL_DMA_Init+0x13c>)
 80063c6:	4413      	add	r3, r2
 80063c8:	4a45      	ldr	r2, [pc, #276]	@ (80064e0 <HAL_DMA_Init+0x140>)
 80063ca:	fba2 2303 	umull	r2, r3, r2, r3
 80063ce:	091b      	lsrs	r3, r3, #4
 80063d0:	009a      	lsls	r2, r3, #2
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a42      	ldr	r2, [pc, #264]	@ (80064e4 <HAL_DMA_Init+0x144>)
 80063da:	641a      	str	r2, [r3, #64]	@ 0x40
 80063dc:	e00e      	b.n	80063fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	4b40      	ldr	r3, [pc, #256]	@ (80064e8 <HAL_DMA_Init+0x148>)
 80063e6:	4413      	add	r3, r2
 80063e8:	4a3d      	ldr	r2, [pc, #244]	@ (80064e0 <HAL_DMA_Init+0x140>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	009a      	lsls	r2, r3, #2
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a3c      	ldr	r2, [pc, #240]	@ (80064ec <HAL_DMA_Init+0x14c>)
 80063fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006416:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800642c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa82 	bl	8006958 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800645c:	d102      	bne.n	8006464 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006478:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d010      	beq.n	80064a4 <HAL_DMA_Init+0x104>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b04      	cmp	r3, #4
 8006488:	d80c      	bhi.n	80064a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 faa2 	bl	80069d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064a0:	605a      	str	r2, [r3, #4]
 80064a2:	e008      	b.n	80064b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40020407 	.word	0x40020407
 80064dc:	bffdfff8 	.word	0xbffdfff8
 80064e0:	cccccccd 	.word	0xcccccccd
 80064e4:	40020000 	.word	0x40020000
 80064e8:	bffdfbf8 	.word	0xbffdfbf8
 80064ec:	40020400 	.word	0x40020400

080064f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_DMA_Start_IT+0x20>
 800650c:	2302      	movs	r3, #2
 800650e:	e066      	b.n	80065de <HAL_DMA_Start_IT+0xee>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	d155      	bne.n	80065d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 f9c7 	bl	80068dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006552:	2b00      	cmp	r3, #0
 8006554:	d008      	beq.n	8006568 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 020e 	orr.w	r2, r2, #14
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	e00f      	b.n	8006588 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0204 	bic.w	r2, r2, #4
 8006576:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 020a 	orr.w	r2, r2, #10
 8006586:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0201 	orr.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e005      	b.n	80065dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80065d8:	2302      	movs	r3, #2
 80065da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d005      	beq.n	800660a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2204      	movs	r2, #4
 8006602:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
 8006608:	e037      	b.n	800667a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 020e 	bic.w	r2, r2, #14
 8006618:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006628:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	f003 021f 	and.w	r2, r3, #31
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	2101      	movs	r1, #1
 8006648:	fa01 f202 	lsl.w	r2, r1, r2
 800664c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006656:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00c      	beq.n	800667a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800666e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006678:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d00d      	beq.n	80066cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2204      	movs	r2, #4
 80066b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	73fb      	strb	r3, [r7, #15]
 80066ca:	e047      	b.n	800675c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 020e 	bic.w	r2, r2, #14
 80066da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006700:	f003 021f 	and.w	r2, r3, #31
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006708:	2101      	movs	r1, #1
 800670a:	fa01 f202 	lsl.w	r2, r1, r2
 800670e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006718:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00c      	beq.n	800673c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006730:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800673a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
    }
  }
  return status;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	2204      	movs	r2, #4
 8006788:	409a      	lsls	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4013      	ands	r3, r2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d026      	beq.n	80067e0 <HAL_DMA_IRQHandler+0x7a>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d021      	beq.n	80067e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d107      	bne.n	80067ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0204 	bic.w	r2, r2, #4
 80067b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067be:	f003 021f 	and.w	r2, r3, #31
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	2104      	movs	r1, #4
 80067c8:	fa01 f202 	lsl.w	r2, r1, r2
 80067cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d071      	beq.n	80068ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80067de:	e06c      	b.n	80068ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e4:	f003 031f 	and.w	r3, r3, #31
 80067e8:	2202      	movs	r2, #2
 80067ea:	409a      	lsls	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d02e      	beq.n	8006852 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d029      	beq.n	8006852 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 020a 	bic.w	r2, r2, #10
 800681a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006828:	f003 021f 	and.w	r2, r3, #31
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006830:	2102      	movs	r1, #2
 8006832:	fa01 f202 	lsl.w	r2, r1, r2
 8006836:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d038      	beq.n	80068ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006850:	e033      	b.n	80068ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	2208      	movs	r2, #8
 800685c:	409a      	lsls	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4013      	ands	r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d02a      	beq.n	80068bc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d025      	beq.n	80068bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 020e 	bic.w	r2, r2, #14
 800687e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006884:	f003 021f 	and.w	r2, r3, #31
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688c:	2101      	movs	r1, #1
 800688e:	fa01 f202 	lsl.w	r2, r1, r2
 8006892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
}
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80068f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006904:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690a:	f003 021f 	and.w	r2, r3, #31
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	2101      	movs	r1, #1
 8006914:	fa01 f202 	lsl.w	r2, r1, r2
 8006918:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	2b10      	cmp	r3, #16
 8006928:	d108      	bne.n	800693c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800693a:	e007      	b.n	800694c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]
}
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	4b16      	ldr	r3, [pc, #88]	@ (80069c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006968:	429a      	cmp	r2, r3
 800696a:	d802      	bhi.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800696c:	4b15      	ldr	r3, [pc, #84]	@ (80069c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	e001      	b.n	8006976 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006972:	4b15      	ldr	r3, [pc, #84]	@ (80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006974:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	3b08      	subs	r3, #8
 8006982:	4a12      	ldr	r2, [pc, #72]	@ (80069cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006984:	fba2 2303 	umull	r2, r3, r2, r3
 8006988:	091b      	lsrs	r3, r3, #4
 800698a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006990:	089b      	lsrs	r3, r3, #2
 8006992:	009a      	lsls	r2, r3, #2
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	4413      	add	r3, r2
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a0b      	ldr	r2, [pc, #44]	@ (80069d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80069a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	2201      	movs	r2, #1
 80069ac:	409a      	lsls	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40020407 	.word	0x40020407
 80069c4:	40020800 	.word	0x40020800
 80069c8:	40020820 	.word	0x40020820
 80069cc:	cccccccd 	.word	0xcccccccd
 80069d0:	40020880 	.word	0x40020880

080069d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	461a      	mov	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a08      	ldr	r2, [pc, #32]	@ (8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80069f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	2201      	movs	r2, #1
 8006a02:	409a      	lsls	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	1000823f 	.word	0x1000823f
 8006a18:	40020940 	.word	0x40020940

08006a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a2a:	e15a      	b.n	8006ce2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	2101      	movs	r1, #1
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	fa01 f303 	lsl.w	r3, r1, r3
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 814c 	beq.w	8006cdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d005      	beq.n	8006a5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d130      	bne.n	8006abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	2203      	movs	r2, #3
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4013      	ands	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a92:	2201      	movs	r2, #1
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	091b      	lsrs	r3, r3, #4
 8006aa8:	f003 0201 	and.w	r2, r3, #1
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d017      	beq.n	8006afa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	43db      	mvns	r3, r3
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d123      	bne.n	8006b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	08da      	lsrs	r2, r3, #3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3208      	adds	r2, #8
 8006b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	220f      	movs	r2, #15
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43db      	mvns	r3, r3
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4013      	ands	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	691a      	ldr	r2, [r3, #16]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	08da      	lsrs	r2, r3, #3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3208      	adds	r2, #8
 8006b48:	6939      	ldr	r1, [r7, #16]
 8006b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	2203      	movs	r2, #3
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	43db      	mvns	r3, r3
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4013      	ands	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f003 0203 	and.w	r2, r3, #3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 80a6 	beq.w	8006cdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b90:	4b5b      	ldr	r3, [pc, #364]	@ (8006d00 <HAL_GPIO_Init+0x2e4>)
 8006b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b94:	4a5a      	ldr	r2, [pc, #360]	@ (8006d00 <HAL_GPIO_Init+0x2e4>)
 8006b96:	f043 0301 	orr.w	r3, r3, #1
 8006b9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b9c:	4b58      	ldr	r3, [pc, #352]	@ (8006d00 <HAL_GPIO_Init+0x2e4>)
 8006b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ba8:	4a56      	ldr	r2, [pc, #344]	@ (8006d04 <HAL_GPIO_Init+0x2e8>)
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	089b      	lsrs	r3, r3, #2
 8006bae:	3302      	adds	r3, #2
 8006bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	220f      	movs	r2, #15
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006bd2:	d01f      	beq.n	8006c14 <HAL_GPIO_Init+0x1f8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a4c      	ldr	r2, [pc, #304]	@ (8006d08 <HAL_GPIO_Init+0x2ec>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d019      	beq.n	8006c10 <HAL_GPIO_Init+0x1f4>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a4b      	ldr	r2, [pc, #300]	@ (8006d0c <HAL_GPIO_Init+0x2f0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <HAL_GPIO_Init+0x1f0>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a4a      	ldr	r2, [pc, #296]	@ (8006d10 <HAL_GPIO_Init+0x2f4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00d      	beq.n	8006c08 <HAL_GPIO_Init+0x1ec>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a49      	ldr	r2, [pc, #292]	@ (8006d14 <HAL_GPIO_Init+0x2f8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d007      	beq.n	8006c04 <HAL_GPIO_Init+0x1e8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a48      	ldr	r2, [pc, #288]	@ (8006d18 <HAL_GPIO_Init+0x2fc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d101      	bne.n	8006c00 <HAL_GPIO_Init+0x1e4>
 8006bfc:	2305      	movs	r3, #5
 8006bfe:	e00a      	b.n	8006c16 <HAL_GPIO_Init+0x1fa>
 8006c00:	2306      	movs	r3, #6
 8006c02:	e008      	b.n	8006c16 <HAL_GPIO_Init+0x1fa>
 8006c04:	2304      	movs	r3, #4
 8006c06:	e006      	b.n	8006c16 <HAL_GPIO_Init+0x1fa>
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e004      	b.n	8006c16 <HAL_GPIO_Init+0x1fa>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e002      	b.n	8006c16 <HAL_GPIO_Init+0x1fa>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <HAL_GPIO_Init+0x1fa>
 8006c14:	2300      	movs	r3, #0
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	f002 0203 	and.w	r2, r2, #3
 8006c1c:	0092      	lsls	r2, r2, #2
 8006c1e:	4093      	lsls	r3, r2
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c26:	4937      	ldr	r1, [pc, #220]	@ (8006d04 <HAL_GPIO_Init+0x2e8>)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	089b      	lsrs	r3, r3, #2
 8006c2c:	3302      	adds	r3, #2
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c34:	4b39      	ldr	r3, [pc, #228]	@ (8006d1c <HAL_GPIO_Init+0x300>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4013      	ands	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c58:	4a30      	ldr	r2, [pc, #192]	@ (8006d1c <HAL_GPIO_Init+0x300>)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006d1c <HAL_GPIO_Init+0x300>)
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	43db      	mvns	r3, r3
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c82:	4a26      	ldr	r2, [pc, #152]	@ (8006d1c <HAL_GPIO_Init+0x300>)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006c88:	4b24      	ldr	r3, [pc, #144]	@ (8006d1c <HAL_GPIO_Init+0x300>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	43db      	mvns	r3, r3
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4013      	ands	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006cac:	4a1b      	ldr	r2, [pc, #108]	@ (8006d1c <HAL_GPIO_Init+0x300>)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d1c <HAL_GPIO_Init+0x300>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006cd6:	4a11      	ldr	r2, [pc, #68]	@ (8006d1c <HAL_GPIO_Init+0x300>)
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f47f ae9d 	bne.w	8006a2c <HAL_GPIO_Init+0x10>
  }
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	40021000 	.word	0x40021000
 8006d04:	40010000 	.word	0x40010000
 8006d08:	48000400 	.word	0x48000400
 8006d0c:	48000800 	.word	0x48000800
 8006d10:	48000c00 	.word	0x48000c00
 8006d14:	48001000 	.word	0x48001000
 8006d18:	48001400 	.word	0x48001400
 8006d1c:	40010400 	.word	0x40010400

08006d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	887b      	ldrh	r3, [r7, #2]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	e001      	b.n	8006d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	807b      	strh	r3, [r7, #2]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d60:	787b      	ldrb	r3, [r7, #1]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d66:	887a      	ldrh	r2, [r7, #2]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d6c:	e002      	b.n	8006d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d6e:	887a      	ldrh	r2, [r7, #2]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d92:	887a      	ldrh	r2, [r7, #2]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4013      	ands	r3, r2
 8006d98:	041a      	lsls	r2, r3, #16
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	43d9      	mvns	r1, r3
 8006d9e:	887b      	ldrh	r3, [r7, #2]
 8006da0:	400b      	ands	r3, r1
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	619a      	str	r2, [r3, #24]
}
 8006da8:	bf00      	nop
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006dbe:	4b08      	ldr	r3, [pc, #32]	@ (8006de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	88fb      	ldrh	r3, [r7, #6]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d006      	beq.n	8006dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006dca:	4a05      	ldr	r2, [pc, #20]	@ (8006de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006dd0:	88fb      	ldrh	r3, [r7, #6]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fb fc60 	bl	8002698 <HAL_GPIO_EXTI_Callback>
  }
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	40010400 	.word	0x40010400

08006de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e08d      	b.n	8006f12 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fb fa90 	bl	8002330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2224      	movs	r2, #36	@ 0x24
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d107      	bne.n	8006e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e5a:	609a      	str	r2, [r3, #8]
 8006e5c:	e006      	b.n	8006e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d108      	bne.n	8006e86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e82:	605a      	str	r2, [r3, #4]
 8006e84:	e007      	b.n	8006e96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6812      	ldr	r2, [r2, #0]
 8006ea0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ea8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006eb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69d9      	ldr	r1, [r3, #28]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1a      	ldr	r2, [r3, #32]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	4608      	mov	r0, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	461a      	mov	r2, r3
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	817b      	strh	r3, [r7, #10]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	813b      	strh	r3, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	f040 80f9 	bne.w	8007136 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_I2C_Mem_Write+0x34>
 8006f4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0ed      	b.n	8007138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <HAL_I2C_Mem_Write+0x4e>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e0e6      	b.n	8007138 <HAL_I2C_Mem_Write+0x21c>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f72:	f7fd fc51 	bl	8004818 <HAL_GetTick>
 8006f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	2319      	movs	r3, #25
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fac3 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0d1      	b.n	8007138 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2221      	movs	r2, #33	@ 0x21
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2240      	movs	r2, #64	@ 0x40
 8006fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a3a      	ldr	r2, [r7, #32]
 8006fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fbc:	88f8      	ldrh	r0, [r7, #6]
 8006fbe:	893a      	ldrh	r2, [r7, #8]
 8006fc0:	8979      	ldrh	r1, [r7, #10]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	4603      	mov	r3, r0
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f9d3 	bl	8007378 <I2C_RequestMemoryWrite>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e0a9      	b.n	8007138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2bff      	cmp	r3, #255	@ 0xff
 8006fec:	d90e      	bls.n	800700c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	22ff      	movs	r2, #255	@ 0xff
 8006ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	8979      	ldrh	r1, [r7, #10]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 fc47 	bl	8007898 <I2C_TransferConfig>
 800700a:	e00f      	b.n	800702c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800701a:	b2da      	uxtb	r2, r3
 800701c:	8979      	ldrh	r1, [r7, #10]
 800701e:	2300      	movs	r3, #0
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 fc36 	bl	8007898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fac6 	bl	80075c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e07b      	b.n	8007138 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007044:	781a      	ldrb	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d034      	beq.n	80070e4 <HAL_I2C_Mem_Write+0x1c8>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800707e:	2b00      	cmp	r3, #0
 8007080:	d130      	bne.n	80070e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007088:	2200      	movs	r2, #0
 800708a:	2180      	movs	r1, #128	@ 0x80
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 fa3f 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e04d      	b.n	8007138 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2bff      	cmp	r3, #255	@ 0xff
 80070a4:	d90e      	bls.n	80070c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	22ff      	movs	r2, #255	@ 0xff
 80070aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	8979      	ldrh	r1, [r7, #10]
 80070b4:	2300      	movs	r3, #0
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 fbeb 	bl	8007898 <I2C_TransferConfig>
 80070c2:	e00f      	b.n	80070e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	8979      	ldrh	r1, [r7, #10]
 80070d6:	2300      	movs	r3, #0
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fbda 	bl	8007898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d19e      	bne.n	800702c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 faac 	bl	8007650 <I2C_WaitOnSTOPFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e01a      	b.n	8007138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2220      	movs	r2, #32
 8007108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6859      	ldr	r1, [r3, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b0a      	ldr	r3, [pc, #40]	@ (8007140 <HAL_I2C_Mem_Write+0x224>)
 8007116:	400b      	ands	r3, r1
 8007118:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	e000      	b.n	8007138 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007136:	2302      	movs	r3, #2
  }
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	fe00e800 	.word	0xfe00e800

08007144 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af02      	add	r7, sp, #8
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	4608      	mov	r0, r1
 800714e:	4611      	mov	r1, r2
 8007150:	461a      	mov	r2, r3
 8007152:	4603      	mov	r3, r0
 8007154:	817b      	strh	r3, [r7, #10]
 8007156:	460b      	mov	r3, r1
 8007158:	813b      	strh	r3, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b20      	cmp	r3, #32
 8007168:	f040 80fd 	bne.w	8007366 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_I2C_Mem_Read+0x34>
 8007172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800717e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0f1      	b.n	8007368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_I2C_Mem_Read+0x4e>
 800718e:	2302      	movs	r3, #2
 8007190:	e0ea      	b.n	8007368 <HAL_I2C_Mem_Read+0x224>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800719a:	f7fd fb3d 	bl	8004818 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	2319      	movs	r3, #25
 80071a6:	2201      	movs	r2, #1
 80071a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f9af 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0d5      	b.n	8007368 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2222      	movs	r2, #34	@ 0x22
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2240      	movs	r2, #64	@ 0x40
 80071c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a3a      	ldr	r2, [r7, #32]
 80071d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071e4:	88f8      	ldrh	r0, [r7, #6]
 80071e6:	893a      	ldrh	r2, [r7, #8]
 80071e8:	8979      	ldrh	r1, [r7, #10]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	4603      	mov	r3, r0
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f913 	bl	8007420 <I2C_RequestMemoryRead>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e0ad      	b.n	8007368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007210:	b29b      	uxth	r3, r3
 8007212:	2bff      	cmp	r3, #255	@ 0xff
 8007214:	d90e      	bls.n	8007234 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	22ff      	movs	r2, #255	@ 0xff
 800721a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007220:	b2da      	uxtb	r2, r3
 8007222:	8979      	ldrh	r1, [r7, #10]
 8007224:	4b52      	ldr	r3, [pc, #328]	@ (8007370 <HAL_I2C_Mem_Read+0x22c>)
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fb33 	bl	8007898 <I2C_TransferConfig>
 8007232:	e00f      	b.n	8007254 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007242:	b2da      	uxtb	r2, r3
 8007244:	8979      	ldrh	r1, [r7, #10]
 8007246:	4b4a      	ldr	r3, [pc, #296]	@ (8007370 <HAL_I2C_Mem_Read+0x22c>)
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 fb22 	bl	8007898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725a:	2200      	movs	r2, #0
 800725c:	2104      	movs	r1, #4
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f956 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e07c      	b.n	8007368 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800728a:	3b01      	subs	r3, #1
 800728c:	b29a      	uxth	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d034      	beq.n	8007314 <HAL_I2C_Mem_Read+0x1d0>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d130      	bne.n	8007314 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	2200      	movs	r2, #0
 80072ba:	2180      	movs	r1, #128	@ 0x80
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f927 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e04d      	b.n	8007368 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2bff      	cmp	r3, #255	@ 0xff
 80072d4:	d90e      	bls.n	80072f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	22ff      	movs	r2, #255	@ 0xff
 80072da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	8979      	ldrh	r1, [r7, #10]
 80072e4:	2300      	movs	r3, #0
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fad3 	bl	8007898 <I2C_TransferConfig>
 80072f2:	e00f      	b.n	8007314 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007302:	b2da      	uxtb	r2, r3
 8007304:	8979      	ldrh	r1, [r7, #10]
 8007306:	2300      	movs	r3, #0
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fac2 	bl	8007898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007318:	b29b      	uxth	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d19a      	bne.n	8007254 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 f994 	bl	8007650 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e01a      	b.n	8007368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2220      	movs	r2, #32
 8007338:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6859      	ldr	r1, [r3, #4]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	4b0b      	ldr	r3, [pc, #44]	@ (8007374 <HAL_I2C_Mem_Read+0x230>)
 8007346:	400b      	ands	r3, r1
 8007348:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007366:	2302      	movs	r3, #2
  }
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	80002400 	.word	0x80002400
 8007374:	fe00e800 	.word	0xfe00e800

08007378 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af02      	add	r7, sp, #8
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	4608      	mov	r0, r1
 8007382:	4611      	mov	r1, r2
 8007384:	461a      	mov	r2, r3
 8007386:	4603      	mov	r3, r0
 8007388:	817b      	strh	r3, [r7, #10]
 800738a:	460b      	mov	r3, r1
 800738c:	813b      	strh	r3, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	b2da      	uxtb	r2, r3
 8007396:	8979      	ldrh	r1, [r7, #10]
 8007398:	4b20      	ldr	r3, [pc, #128]	@ (800741c <I2C_RequestMemoryWrite+0xa4>)
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 fa79 	bl	8007898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	69b9      	ldr	r1, [r7, #24]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f909 	bl	80075c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e02c      	b.n	8007414 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d105      	bne.n	80073cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073c0:	893b      	ldrh	r3, [r7, #8]
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80073ca:	e015      	b.n	80073f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80073cc:	893b      	ldrh	r3, [r7, #8]
 80073ce:	0a1b      	lsrs	r3, r3, #8
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	69b9      	ldr	r1, [r7, #24]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 f8ef 	bl	80075c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e012      	b.n	8007414 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073ee:	893b      	ldrh	r3, [r7, #8]
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2200      	movs	r2, #0
 8007400:	2180      	movs	r1, #128	@ 0x80
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f884 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	80002000 	.word	0x80002000

08007420 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af02      	add	r7, sp, #8
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	4608      	mov	r0, r1
 800742a:	4611      	mov	r1, r2
 800742c:	461a      	mov	r2, r3
 800742e:	4603      	mov	r3, r0
 8007430:	817b      	strh	r3, [r7, #10]
 8007432:	460b      	mov	r3, r1
 8007434:	813b      	strh	r3, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	b2da      	uxtb	r2, r3
 800743e:	8979      	ldrh	r1, [r7, #10]
 8007440:	4b20      	ldr	r3, [pc, #128]	@ (80074c4 <I2C_RequestMemoryRead+0xa4>)
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	2300      	movs	r3, #0
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fa26 	bl	8007898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	69b9      	ldr	r1, [r7, #24]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f8b6 	bl	80075c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e02c      	b.n	80074ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d105      	bne.n	8007472 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007466:	893b      	ldrh	r3, [r7, #8]
 8007468:	b2da      	uxtb	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007470:	e015      	b.n	800749e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007472:	893b      	ldrh	r3, [r7, #8]
 8007474:	0a1b      	lsrs	r3, r3, #8
 8007476:	b29b      	uxth	r3, r3
 8007478:	b2da      	uxtb	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	69b9      	ldr	r1, [r7, #24]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f89c 	bl	80075c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e012      	b.n	80074ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007494:	893b      	ldrh	r3, [r7, #8]
 8007496:	b2da      	uxtb	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2200      	movs	r2, #0
 80074a6:	2140      	movs	r1, #64	@ 0x40
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f831 	bl	8007510 <I2C_WaitOnFlagUntilTimeout>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	80002000 	.word	0x80002000

080074c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d103      	bne.n	80074e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2200      	movs	r2, #0
 80074e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d007      	beq.n	8007504 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0201 	orr.w	r2, r2, #1
 8007502:	619a      	str	r2, [r3, #24]
  }
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	4613      	mov	r3, r2
 800751e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007520:	e03b      	b.n	800759a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 f8d6 	bl	80076d8 <I2C_IsErrorOccurred>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e041      	b.n	80075ba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753c:	d02d      	beq.n	800759a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753e:	f7fd f96b 	bl	8004818 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d302      	bcc.n	8007554 <I2C_WaitOnFlagUntilTimeout+0x44>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d122      	bne.n	800759a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	4013      	ands	r3, r2
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	429a      	cmp	r2, r3
 8007562:	bf0c      	ite	eq
 8007564:	2301      	moveq	r3, #1
 8007566:	2300      	movne	r3, #0
 8007568:	b2db      	uxtb	r3, r3
 800756a:	461a      	mov	r2, r3
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	429a      	cmp	r2, r3
 8007570:	d113      	bne.n	800759a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007576:	f043 0220 	orr.w	r2, r3, #32
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e00f      	b.n	80075ba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699a      	ldr	r2, [r3, #24]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4013      	ands	r3, r2
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	bf0c      	ite	eq
 80075aa:	2301      	moveq	r3, #1
 80075ac:	2300      	movne	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d0b4      	beq.n	8007522 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075ce:	e033      	b.n	8007638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f87f 	bl	80076d8 <I2C_IsErrorOccurred>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e031      	b.n	8007648 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ea:	d025      	beq.n	8007638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ec:	f7fd f914 	bl	8004818 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d302      	bcc.n	8007602 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d11a      	bne.n	8007638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b02      	cmp	r3, #2
 800760e:	d013      	beq.n	8007638 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e007      	b.n	8007648 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b02      	cmp	r3, #2
 8007644:	d1c4      	bne.n	80075d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800765c:	e02f      	b.n	80076be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f838 	bl	80076d8 <I2C_IsErrorOccurred>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e02d      	b.n	80076ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007672:	f7fd f8d1 	bl	8004818 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	429a      	cmp	r2, r3
 8007680:	d302      	bcc.n	8007688 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11a      	bne.n	80076be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b20      	cmp	r3, #32
 8007694:	d013      	beq.n	80076be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800769a:	f043 0220 	orr.w	r2, r3, #32
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e007      	b.n	80076ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	f003 0320 	and.w	r3, r3, #32
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d1c8      	bne.n	800765e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08a      	sub	sp, #40	@ 0x28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	2b00      	cmp	r3, #0
 8007702:	d068      	beq.n	80077d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2210      	movs	r2, #16
 800770a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800770c:	e049      	b.n	80077a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007714:	d045      	beq.n	80077a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007716:	f7fd f87f 	bl	8004818 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	429a      	cmp	r2, r3
 8007724:	d302      	bcc.n	800772c <I2C_IsErrorOccurred+0x54>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d13a      	bne.n	80077a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007736:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800773e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800774a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800774e:	d121      	bne.n	8007794 <I2C_IsErrorOccurred+0xbc>
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007756:	d01d      	beq.n	8007794 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007758:	7cfb      	ldrb	r3, [r7, #19]
 800775a:	2b20      	cmp	r3, #32
 800775c:	d01a      	beq.n	8007794 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800776c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800776e:	f7fd f853 	bl	8004818 <HAL_GetTick>
 8007772:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007774:	e00e      	b.n	8007794 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007776:	f7fd f84f 	bl	8004818 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b19      	cmp	r3, #25
 8007782:	d907      	bls.n	8007794 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	f043 0320 	orr.w	r3, r3, #32
 800778a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007792:	e006      	b.n	80077a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	f003 0320 	and.w	r3, r3, #32
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d1e9      	bne.n	8007776 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d003      	beq.n	80077b8 <I2C_IsErrorOccurred+0xe0>
 80077b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0aa      	beq.n	800770e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80077b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2220      	movs	r2, #32
 80077c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	f043 0304 	orr.w	r3, r3, #4
 80077ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	f043 0308 	orr.w	r3, r3, #8
 8007810:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800781a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	f043 0302 	orr.w	r3, r3, #2
 8007832:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800783c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007848:	2b00      	cmp	r3, #0
 800784a:	d01c      	beq.n	8007886 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f7ff fe3b 	bl	80074c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6859      	ldr	r1, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b0d      	ldr	r3, [pc, #52]	@ (8007894 <I2C_IsErrorOccurred+0x1bc>)
 800785e:	400b      	ands	r3, r1
 8007860:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	431a      	orrs	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800788a:	4618      	mov	r0, r3
 800788c:	3728      	adds	r7, #40	@ 0x28
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	fe00e800 	.word	0xfe00e800

08007898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	607b      	str	r3, [r7, #4]
 80078a2:	460b      	mov	r3, r1
 80078a4:	817b      	strh	r3, [r7, #10]
 80078a6:	4613      	mov	r3, r2
 80078a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078aa:	897b      	ldrh	r3, [r7, #10]
 80078ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078b0:	7a7b      	ldrb	r3, [r7, #9]
 80078b2:	041b      	lsls	r3, r3, #16
 80078b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	0d5b      	lsrs	r3, r3, #21
 80078d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80078d6:	4b08      	ldr	r3, [pc, #32]	@ (80078f8 <I2C_TransferConfig+0x60>)
 80078d8:	430b      	orrs	r3, r1
 80078da:	43db      	mvns	r3, r3
 80078dc:	ea02 0103 	and.w	r1, r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	03ff63ff 	.word	0x03ff63ff

080078fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b20      	cmp	r3, #32
 8007910:	d138      	bne.n	8007984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800791c:	2302      	movs	r3, #2
 800791e:	e032      	b.n	8007986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2224      	movs	r2, #36	@ 0x24
 800792c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0201 	bic.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800794e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6819      	ldr	r1, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b20      	cmp	r3, #32
 80079a6:	d139      	bne.n	8007a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e033      	b.n	8007a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2224      	movs	r2, #36	@ 0x24
 80079c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0201 	bic.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80079e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e000      	b.n	8007a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d141      	bne.n	8007abe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a46:	d131      	bne.n	8007aac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a48:	4b47      	ldr	r3, [pc, #284]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a4e:	4a46      	ldr	r2, [pc, #280]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a58:	4b43      	ldr	r3, [pc, #268]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007a60:	4a41      	ldr	r2, [pc, #260]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007a68:	4b40      	ldr	r3, [pc, #256]	@ (8007b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2232      	movs	r2, #50	@ 0x32
 8007a6e:	fb02 f303 	mul.w	r3, r2, r3
 8007a72:	4a3f      	ldr	r2, [pc, #252]	@ (8007b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a74:	fba2 2303 	umull	r2, r3, r2, r3
 8007a78:	0c9b      	lsrs	r3, r3, #18
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a7e:	e002      	b.n	8007a86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a86:	4b38      	ldr	r3, [pc, #224]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a92:	d102      	bne.n	8007a9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1f2      	bne.n	8007a80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a9a:	4b33      	ldr	r3, [pc, #204]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa6:	d158      	bne.n	8007b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e057      	b.n	8007b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007aac:	4b2e      	ldr	r3, [pc, #184]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ab8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007abc:	e04d      	b.n	8007b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ac4:	d141      	bne.n	8007b4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ac6:	4b28      	ldr	r3, [pc, #160]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ad2:	d131      	bne.n	8007b38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ad4:	4b24      	ldr	r3, [pc, #144]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ada:	4a23      	ldr	r2, [pc, #140]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ae0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ae4:	4b20      	ldr	r3, [pc, #128]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007aec:	4a1e      	ldr	r2, [pc, #120]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007af4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2232      	movs	r2, #50	@ 0x32
 8007afa:	fb02 f303 	mul.w	r3, r2, r3
 8007afe:	4a1c      	ldr	r2, [pc, #112]	@ (8007b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b00:	fba2 2303 	umull	r2, r3, r2, r3
 8007b04:	0c9b      	lsrs	r3, r3, #18
 8007b06:	3301      	adds	r3, #1
 8007b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b0a:	e002      	b.n	8007b12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b12:	4b15      	ldr	r3, [pc, #84]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1e:	d102      	bne.n	8007b26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1f2      	bne.n	8007b0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b26:	4b10      	ldr	r3, [pc, #64]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b32:	d112      	bne.n	8007b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e011      	b.n	8007b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b38:	4b0b      	ldr	r3, [pc, #44]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007b48:	e007      	b.n	8007b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b4a:	4b07      	ldr	r3, [pc, #28]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b52:	4a05      	ldr	r2, [pc, #20]	@ (8007b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	40007000 	.word	0x40007000
 8007b6c:	20000018 	.word	0x20000018
 8007b70:	431bde83 	.word	0x431bde83

08007b74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007b78:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	4a04      	ldr	r2, [pc, #16]	@ (8007b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007b7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b82:	6093      	str	r3, [r2, #8]
}
 8007b84:	bf00      	nop
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40007000 	.word	0x40007000

08007b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e2fe      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d075      	beq.n	8007c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bb2:	4b97      	ldr	r3, [pc, #604]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 030c 	and.w	r3, r3, #12
 8007bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bbc:	4b94      	ldr	r3, [pc, #592]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b0c      	cmp	r3, #12
 8007bca:	d102      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x3e>
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d002      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x44>
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d10b      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bd8:	4b8d      	ldr	r3, [pc, #564]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d05b      	beq.n	8007c9c <HAL_RCC_OscConfig+0x108>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d157      	bne.n	8007c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e2d9      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bf8:	d106      	bne.n	8007c08 <HAL_RCC_OscConfig+0x74>
 8007bfa:	4b85      	ldr	r3, [pc, #532]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a84      	ldr	r2, [pc, #528]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	e01d      	b.n	8007c44 <HAL_RCC_OscConfig+0xb0>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c10:	d10c      	bne.n	8007c2c <HAL_RCC_OscConfig+0x98>
 8007c12:	4b7f      	ldr	r3, [pc, #508]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a7e      	ldr	r2, [pc, #504]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a7b      	ldr	r2, [pc, #492]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	e00b      	b.n	8007c44 <HAL_RCC_OscConfig+0xb0>
 8007c2c:	4b78      	ldr	r3, [pc, #480]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a77      	ldr	r2, [pc, #476]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	4b75      	ldr	r3, [pc, #468]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a74      	ldr	r2, [pc, #464]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d013      	beq.n	8007c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c4c:	f7fc fde4 	bl	8004818 <HAL_GetTick>
 8007c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c52:	e008      	b.n	8007c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c54:	f7fc fde0 	bl	8004818 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b64      	cmp	r3, #100	@ 0x64
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e29e      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c66:	4b6a      	ldr	r3, [pc, #424]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f0      	beq.n	8007c54 <HAL_RCC_OscConfig+0xc0>
 8007c72:	e014      	b.n	8007c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c74:	f7fc fdd0 	bl	8004818 <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c7c:	f7fc fdcc 	bl	8004818 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b64      	cmp	r3, #100	@ 0x64
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e28a      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c8e:	4b60      	ldr	r3, [pc, #384]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f0      	bne.n	8007c7c <HAL_RCC_OscConfig+0xe8>
 8007c9a:	e000      	b.n	8007c9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d075      	beq.n	8007d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007caa:	4b59      	ldr	r3, [pc, #356]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 030c 	and.w	r3, r3, #12
 8007cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cb4:	4b56      	ldr	r3, [pc, #344]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b0c      	cmp	r3, #12
 8007cc2:	d102      	bne.n	8007cca <HAL_RCC_OscConfig+0x136>
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d002      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x13c>
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d11f      	bne.n	8007d10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x154>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e25d      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce8:	4b49      	ldr	r3, [pc, #292]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	061b      	lsls	r3, r3, #24
 8007cf6:	4946      	ldr	r1, [pc, #280]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007cfc:	4b45      	ldr	r3, [pc, #276]	@ (8007e14 <HAL_RCC_OscConfig+0x280>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fb fc23 	bl	800354c <HAL_InitTick>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d043      	beq.n	8007d94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e249      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d023      	beq.n	8007d60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d18:	4b3d      	ldr	r3, [pc, #244]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d24:	f7fc fd78 	bl	8004818 <HAL_GetTick>
 8007d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d2a:	e008      	b.n	8007d3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d2c:	f7fc fd74 	bl	8004818 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e232      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d3e:	4b34      	ldr	r3, [pc, #208]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0f0      	beq.n	8007d2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d4a:	4b31      	ldr	r3, [pc, #196]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	061b      	lsls	r3, r3, #24
 8007d58:	492d      	ldr	r1, [pc, #180]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	604b      	str	r3, [r1, #4]
 8007d5e:	e01a      	b.n	8007d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d60:	4b2b      	ldr	r3, [pc, #172]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a2a      	ldr	r2, [pc, #168]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007d66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6c:	f7fc fd54 	bl	8004818 <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d74:	f7fc fd50 	bl	8004818 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e20e      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d86:	4b22      	ldr	r3, [pc, #136]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <HAL_RCC_OscConfig+0x1e0>
 8007d92:	e000      	b.n	8007d96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0308 	and.w	r3, r3, #8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d041      	beq.n	8007e26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d01c      	beq.n	8007de4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007daa:	4b19      	ldr	r3, [pc, #100]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007db0:	4a17      	ldr	r2, [pc, #92]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dba:	f7fc fd2d 	bl	8004818 <HAL_GetTick>
 8007dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dc2:	f7fc fd29 	bl	8004818 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e1e7      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0ef      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x22e>
 8007de2:	e020      	b.n	8007e26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007de4:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dea:	4a09      	ldr	r2, [pc, #36]	@ (8007e10 <HAL_RCC_OscConfig+0x27c>)
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df4:	f7fc fd10 	bl	8004818 <HAL_GetTick>
 8007df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007dfa:	e00d      	b.n	8007e18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dfc:	f7fc fd0c 	bl	8004818 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d906      	bls.n	8007e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e1ca      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
 8007e0e:	bf00      	nop
 8007e10:	40021000 	.word	0x40021000
 8007e14:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e18:	4b8c      	ldr	r3, [pc, #560]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1ea      	bne.n	8007dfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0304 	and.w	r3, r3, #4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 80a6 	beq.w	8007f80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e34:	2300      	movs	r3, #0
 8007e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007e38:	4b84      	ldr	r3, [pc, #528]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <HAL_RCC_OscConfig+0x2b4>
 8007e44:	2301      	movs	r3, #1
 8007e46:	e000      	b.n	8007e4a <HAL_RCC_OscConfig+0x2b6>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00d      	beq.n	8007e6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e52:	4a7e      	ldr	r2, [pc, #504]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e66:	2301      	movs	r3, #1
 8007e68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e6a:	4b79      	ldr	r3, [pc, #484]	@ (8008050 <HAL_RCC_OscConfig+0x4bc>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d118      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e76:	4b76      	ldr	r3, [pc, #472]	@ (8008050 <HAL_RCC_OscConfig+0x4bc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a75      	ldr	r2, [pc, #468]	@ (8008050 <HAL_RCC_OscConfig+0x4bc>)
 8007e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e82:	f7fc fcc9 	bl	8004818 <HAL_GetTick>
 8007e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e88:	e008      	b.n	8007e9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e8a:	f7fc fcc5 	bl	8004818 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d901      	bls.n	8007e9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e183      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8008050 <HAL_RCC_OscConfig+0x4bc>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0f0      	beq.n	8007e8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d108      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x32e>
 8007eb0:	4b66      	ldr	r3, [pc, #408]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eb6:	4a65      	ldr	r2, [pc, #404]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ec0:	e024      	b.n	8007f0c <HAL_RCC_OscConfig+0x378>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	2b05      	cmp	r3, #5
 8007ec8:	d110      	bne.n	8007eec <HAL_RCC_OscConfig+0x358>
 8007eca:	4b60      	ldr	r3, [pc, #384]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007ed2:	f043 0304 	orr.w	r3, r3, #4
 8007ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007eda:	4b5c      	ldr	r3, [pc, #368]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007ee2:	f043 0301 	orr.w	r3, r3, #1
 8007ee6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007eea:	e00f      	b.n	8007f0c <HAL_RCC_OscConfig+0x378>
 8007eec:	4b57      	ldr	r3, [pc, #348]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef2:	4a56      	ldr	r2, [pc, #344]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007efc:	4b53      	ldr	r3, [pc, #332]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f02:	4a52      	ldr	r2, [pc, #328]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007f04:	f023 0304 	bic.w	r3, r3, #4
 8007f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d016      	beq.n	8007f42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f14:	f7fc fc80 	bl	8004818 <HAL_GetTick>
 8007f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f1a:	e00a      	b.n	8007f32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f1c:	f7fc fc7c 	bl	8004818 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e138      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f32:	4b46      	ldr	r3, [pc, #280]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0ed      	beq.n	8007f1c <HAL_RCC_OscConfig+0x388>
 8007f40:	e015      	b.n	8007f6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f42:	f7fc fc69 	bl	8004818 <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f48:	e00a      	b.n	8007f60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f4a:	f7fc fc65 	bl	8004818 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d901      	bls.n	8007f60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e121      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f60:	4b3a      	ldr	r3, [pc, #232]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1ed      	bne.n	8007f4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f6e:	7ffb      	ldrb	r3, [r7, #31]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d105      	bne.n	8007f80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f74:	4b35      	ldr	r3, [pc, #212]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f78:	4a34      	ldr	r2, [pc, #208]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d03c      	beq.n	8008006 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01c      	beq.n	8007fce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f94:	4b2d      	ldr	r3, [pc, #180]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007f9c:	f043 0301 	orr.w	r3, r3, #1
 8007fa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa4:	f7fc fc38 	bl	8004818 <HAL_GetTick>
 8007fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007faa:	e008      	b.n	8007fbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fac:	f7fc fc34 	bl	8004818 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e0f2      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007fbe:	4b23      	ldr	r3, [pc, #140]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0ef      	beq.n	8007fac <HAL_RCC_OscConfig+0x418>
 8007fcc:	e01b      	b.n	8008006 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fce:	4b1f      	ldr	r3, [pc, #124]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007fd6:	f023 0301 	bic.w	r3, r3, #1
 8007fda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fde:	f7fc fc1b 	bl	8004818 <HAL_GetTick>
 8007fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fe6:	f7fc fc17 	bl	8004818 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e0d5      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ff8:	4b14      	ldr	r3, [pc, #80]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8007ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1ef      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 80c9 	beq.w	80081a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008010:	4b0e      	ldr	r3, [pc, #56]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f003 030c 	and.w	r3, r3, #12
 8008018:	2b0c      	cmp	r3, #12
 800801a:	f000 8083 	beq.w	8008124 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d15e      	bne.n	80080e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008026:	4b09      	ldr	r3, [pc, #36]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a08      	ldr	r2, [pc, #32]	@ (800804c <HAL_RCC_OscConfig+0x4b8>)
 800802c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008032:	f7fc fbf1 	bl	8004818 <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008038:	e00c      	b.n	8008054 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800803a:	f7fc fbed 	bl	8004818 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d905      	bls.n	8008054 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e0ab      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
 800804c:	40021000 	.word	0x40021000
 8008050:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008054:	4b55      	ldr	r3, [pc, #340]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1ec      	bne.n	800803a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008060:	4b52      	ldr	r3, [pc, #328]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	4b52      	ldr	r3, [pc, #328]	@ (80081b0 <HAL_RCC_OscConfig+0x61c>)
 8008066:	4013      	ands	r3, r2
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6a11      	ldr	r1, [r2, #32]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008070:	3a01      	subs	r2, #1
 8008072:	0112      	lsls	r2, r2, #4
 8008074:	4311      	orrs	r1, r2
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800807a:	0212      	lsls	r2, r2, #8
 800807c:	4311      	orrs	r1, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008082:	0852      	lsrs	r2, r2, #1
 8008084:	3a01      	subs	r2, #1
 8008086:	0552      	lsls	r2, r2, #21
 8008088:	4311      	orrs	r1, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800808e:	0852      	lsrs	r2, r2, #1
 8008090:	3a01      	subs	r2, #1
 8008092:	0652      	lsls	r2, r2, #25
 8008094:	4311      	orrs	r1, r2
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800809a:	06d2      	lsls	r2, r2, #27
 800809c:	430a      	orrs	r2, r1
 800809e:	4943      	ldr	r1, [pc, #268]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080a4:	4b41      	ldr	r3, [pc, #260]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a40      	ldr	r2, [pc, #256]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 80080aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80080b0:	4b3e      	ldr	r3, [pc, #248]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	4a3d      	ldr	r2, [pc, #244]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 80080b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080bc:	f7fc fbac 	bl	8004818 <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080c4:	f7fc fba8 	bl	8004818 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e066      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080d6:	4b35      	ldr	r3, [pc, #212]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0f0      	beq.n	80080c4 <HAL_RCC_OscConfig+0x530>
 80080e2:	e05e      	b.n	80081a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e4:	4b31      	ldr	r3, [pc, #196]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a30      	ldr	r2, [pc, #192]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 80080ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f0:	f7fc fb92 	bl	8004818 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080f8:	f7fc fb8e 	bl	8004818 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e04c      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800810a:	4b28      	ldr	r3, [pc, #160]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f0      	bne.n	80080f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008116:	4b25      	ldr	r3, [pc, #148]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	4924      	ldr	r1, [pc, #144]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 800811c:	4b25      	ldr	r3, [pc, #148]	@ (80081b4 <HAL_RCC_OscConfig+0x620>)
 800811e:	4013      	ands	r3, r2
 8008120:	60cb      	str	r3, [r1, #12]
 8008122:	e03e      	b.n	80081a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e039      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008130:	4b1e      	ldr	r3, [pc, #120]	@ (80081ac <HAL_RCC_OscConfig+0x618>)
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f003 0203 	and.w	r2, r3, #3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	429a      	cmp	r2, r3
 8008142:	d12c      	bne.n	800819e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800814e:	3b01      	subs	r3, #1
 8008150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008152:	429a      	cmp	r2, r3
 8008154:	d123      	bne.n	800819e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008160:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008162:	429a      	cmp	r2, r3
 8008164:	d11b      	bne.n	800819e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008170:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008172:	429a      	cmp	r2, r3
 8008174:	d113      	bne.n	800819e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008180:	085b      	lsrs	r3, r3, #1
 8008182:	3b01      	subs	r3, #1
 8008184:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008186:	429a      	cmp	r2, r3
 8008188:	d109      	bne.n	800819e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008194:	085b      	lsrs	r3, r3, #1
 8008196:	3b01      	subs	r3, #1
 8008198:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800819a:	429a      	cmp	r2, r3
 800819c:	d001      	beq.n	80081a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3720      	adds	r7, #32
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40021000 	.word	0x40021000
 80081b0:	019f800c 	.word	0x019f800c
 80081b4:	feeefffc 	.word	0xfeeefffc

080081b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80081c2:	2300      	movs	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e11e      	b.n	800840e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081d0:	4b91      	ldr	r3, [pc, #580]	@ (8008418 <HAL_RCC_ClockConfig+0x260>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 030f 	and.w	r3, r3, #15
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d910      	bls.n	8008200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081de:	4b8e      	ldr	r3, [pc, #568]	@ (8008418 <HAL_RCC_ClockConfig+0x260>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f023 020f 	bic.w	r2, r3, #15
 80081e6:	498c      	ldr	r1, [pc, #560]	@ (8008418 <HAL_RCC_ClockConfig+0x260>)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ee:	4b8a      	ldr	r3, [pc, #552]	@ (8008418 <HAL_RCC_ClockConfig+0x260>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d001      	beq.n	8008200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e106      	b.n	800840e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d073      	beq.n	80082f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b03      	cmp	r3, #3
 8008212:	d129      	bne.n	8008268 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008214:	4b81      	ldr	r3, [pc, #516]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e0f4      	b.n	800840e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008224:	f000 f9ce 	bl	80085c4 <RCC_GetSysClockFreqFromPLLSource>
 8008228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	4a7c      	ldr	r2, [pc, #496]	@ (8008420 <HAL_RCC_ClockConfig+0x268>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d93f      	bls.n	80082b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008232:	4b7a      	ldr	r3, [pc, #488]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008246:	2b00      	cmp	r3, #0
 8008248:	d033      	beq.n	80082b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800824e:	2b00      	cmp	r3, #0
 8008250:	d12f      	bne.n	80082b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008252:	4b72      	ldr	r3, [pc, #456]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800825a:	4a70      	ldr	r2, [pc, #448]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 800825c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008260:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008262:	2380      	movs	r3, #128	@ 0x80
 8008264:	617b      	str	r3, [r7, #20]
 8008266:	e024      	b.n	80082b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	2b02      	cmp	r3, #2
 800826e:	d107      	bne.n	8008280 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008270:	4b6a      	ldr	r3, [pc, #424]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d109      	bne.n	8008290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e0c6      	b.n	800840e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008280:	4b66      	ldr	r3, [pc, #408]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e0be      	b.n	800840e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008290:	f000 f8ce 	bl	8008430 <HAL_RCC_GetSysClockFreq>
 8008294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	4a61      	ldr	r2, [pc, #388]	@ (8008420 <HAL_RCC_ClockConfig+0x268>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d909      	bls.n	80082b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800829e:	4b5f      	ldr	r3, [pc, #380]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082a6:	4a5d      	ldr	r2, [pc, #372]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80082a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80082ae:	2380      	movs	r3, #128	@ 0x80
 80082b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082b2:	4b5a      	ldr	r3, [pc, #360]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f023 0203 	bic.w	r2, r3, #3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4957      	ldr	r1, [pc, #348]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082c4:	f7fc faa8 	bl	8004818 <HAL_GetTick>
 80082c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ca:	e00a      	b.n	80082e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082cc:	f7fc faa4 	bl	8004818 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082da:	4293      	cmp	r3, r2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e095      	b.n	800840e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082e2:	4b4e      	ldr	r3, [pc, #312]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 020c 	and.w	r2, r3, #12
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d1eb      	bne.n	80082cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d023      	beq.n	8008348 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800830c:	4b43      	ldr	r3, [pc, #268]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	4a42      	ldr	r2, [pc, #264]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008312:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008316:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0308 	and.w	r3, r3, #8
 8008320:	2b00      	cmp	r3, #0
 8008322:	d007      	beq.n	8008334 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008324:	4b3d      	ldr	r3, [pc, #244]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800832c:	4a3b      	ldr	r2, [pc, #236]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 800832e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008334:	4b39      	ldr	r3, [pc, #228]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	4936      	ldr	r1, [pc, #216]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008342:	4313      	orrs	r3, r2
 8008344:	608b      	str	r3, [r1, #8]
 8008346:	e008      	b.n	800835a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2b80      	cmp	r3, #128	@ 0x80
 800834c:	d105      	bne.n	800835a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800834e:	4b33      	ldr	r3, [pc, #204]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	4a32      	ldr	r2, [pc, #200]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 8008354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008358:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800835a:	4b2f      	ldr	r3, [pc, #188]	@ (8008418 <HAL_RCC_ClockConfig+0x260>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d21d      	bcs.n	80083a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008368:	4b2b      	ldr	r3, [pc, #172]	@ (8008418 <HAL_RCC_ClockConfig+0x260>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f023 020f 	bic.w	r2, r3, #15
 8008370:	4929      	ldr	r1, [pc, #164]	@ (8008418 <HAL_RCC_ClockConfig+0x260>)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	4313      	orrs	r3, r2
 8008376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008378:	f7fc fa4e 	bl	8004818 <HAL_GetTick>
 800837c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800837e:	e00a      	b.n	8008396 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008380:	f7fc fa4a 	bl	8004818 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800838e:	4293      	cmp	r3, r2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e03b      	b.n	800840e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008396:	4b20      	ldr	r3, [pc, #128]	@ (8008418 <HAL_RCC_ClockConfig+0x260>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d1ed      	bne.n	8008380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d008      	beq.n	80083c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083b0:	4b1a      	ldr	r3, [pc, #104]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	4917      	ldr	r1, [pc, #92]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d009      	beq.n	80083e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083ce:	4b13      	ldr	r3, [pc, #76]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	490f      	ldr	r1, [pc, #60]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80083e2:	f000 f825 	bl	8008430 <HAL_RCC_GetSysClockFreq>
 80083e6:	4602      	mov	r2, r0
 80083e8:	4b0c      	ldr	r3, [pc, #48]	@ (800841c <HAL_RCC_ClockConfig+0x264>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	091b      	lsrs	r3, r3, #4
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	490c      	ldr	r1, [pc, #48]	@ (8008424 <HAL_RCC_ClockConfig+0x26c>)
 80083f4:	5ccb      	ldrb	r3, [r1, r3]
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	fa22 f303 	lsr.w	r3, r2, r3
 80083fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008428 <HAL_RCC_ClockConfig+0x270>)
 8008400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008402:	4b0a      	ldr	r3, [pc, #40]	@ (800842c <HAL_RCC_ClockConfig+0x274>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f7fb f8a0 	bl	800354c <HAL_InitTick>
 800840c:	4603      	mov	r3, r0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	40022000 	.word	0x40022000
 800841c:	40021000 	.word	0x40021000
 8008420:	04c4b400 	.word	0x04c4b400
 8008424:	08015330 	.word	0x08015330
 8008428:	20000018 	.word	0x20000018
 800842c:	2000001c 	.word	0x2000001c

08008430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008436:	4b2c      	ldr	r3, [pc, #176]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f003 030c 	and.w	r3, r3, #12
 800843e:	2b04      	cmp	r3, #4
 8008440:	d102      	bne.n	8008448 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008442:	4b2a      	ldr	r3, [pc, #168]	@ (80084ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	e047      	b.n	80084d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008448:	4b27      	ldr	r3, [pc, #156]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f003 030c 	and.w	r3, r3, #12
 8008450:	2b08      	cmp	r3, #8
 8008452:	d102      	bne.n	800845a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008454:	4b25      	ldr	r3, [pc, #148]	@ (80084ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	e03e      	b.n	80084d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800845a:	4b23      	ldr	r3, [pc, #140]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f003 030c 	and.w	r3, r3, #12
 8008462:	2b0c      	cmp	r3, #12
 8008464:	d136      	bne.n	80084d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008466:	4b20      	ldr	r3, [pc, #128]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008470:	4b1d      	ldr	r3, [pc, #116]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	091b      	lsrs	r3, r3, #4
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	3301      	adds	r3, #1
 800847c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b03      	cmp	r3, #3
 8008482:	d10c      	bne.n	800849e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008484:	4a19      	ldr	r2, [pc, #100]	@ (80084ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	fbb2 f3f3 	udiv	r3, r2, r3
 800848c:	4a16      	ldr	r2, [pc, #88]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800848e:	68d2      	ldr	r2, [r2, #12]
 8008490:	0a12      	lsrs	r2, r2, #8
 8008492:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008496:	fb02 f303 	mul.w	r3, r2, r3
 800849a:	617b      	str	r3, [r7, #20]
      break;
 800849c:	e00c      	b.n	80084b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800849e:	4a13      	ldr	r2, [pc, #76]	@ (80084ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a6:	4a10      	ldr	r2, [pc, #64]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084a8:	68d2      	ldr	r2, [r2, #12]
 80084aa:	0a12      	lsrs	r2, r2, #8
 80084ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80084b0:	fb02 f303 	mul.w	r3, r2, r3
 80084b4:	617b      	str	r3, [r7, #20]
      break;
 80084b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80084b8:	4b0b      	ldr	r3, [pc, #44]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	0e5b      	lsrs	r3, r3, #25
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	3301      	adds	r3, #1
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d0:	613b      	str	r3, [r7, #16]
 80084d2:	e001      	b.n	80084d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80084d8:	693b      	ldr	r3, [r7, #16]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40021000 	.word	0x40021000
 80084ec:	00f42400 	.word	0x00f42400

080084f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084f4:	4b03      	ldr	r3, [pc, #12]	@ (8008504 <HAL_RCC_GetHCLKFreq+0x14>)
 80084f6:	681b      	ldr	r3, [r3, #0]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	20000018 	.word	0x20000018

08008508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800850c:	f7ff fff0 	bl	80084f0 <HAL_RCC_GetHCLKFreq>
 8008510:	4602      	mov	r2, r0
 8008512:	4b06      	ldr	r3, [pc, #24]	@ (800852c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	4904      	ldr	r1, [pc, #16]	@ (8008530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800851e:	5ccb      	ldrb	r3, [r1, r3]
 8008520:	f003 031f 	and.w	r3, r3, #31
 8008524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008528:	4618      	mov	r0, r3
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40021000 	.word	0x40021000
 8008530:	08015340 	.word	0x08015340

08008534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008538:	f7ff ffda 	bl	80084f0 <HAL_RCC_GetHCLKFreq>
 800853c:	4602      	mov	r2, r0
 800853e:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	0adb      	lsrs	r3, r3, #11
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	4904      	ldr	r1, [pc, #16]	@ (800855c <HAL_RCC_GetPCLK2Freq+0x28>)
 800854a:	5ccb      	ldrb	r3, [r1, r3]
 800854c:	f003 031f 	and.w	r3, r3, #31
 8008550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008554:	4618      	mov	r0, r3
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40021000 	.word	0x40021000
 800855c:	08015340 	.word	0x08015340

08008560 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	220f      	movs	r2, #15
 800856e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008570:	4b12      	ldr	r3, [pc, #72]	@ (80085bc <HAL_RCC_GetClockConfig+0x5c>)
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 0203 	and.w	r2, r3, #3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800857c:	4b0f      	ldr	r3, [pc, #60]	@ (80085bc <HAL_RCC_GetClockConfig+0x5c>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008588:	4b0c      	ldr	r3, [pc, #48]	@ (80085bc <HAL_RCC_GetClockConfig+0x5c>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008594:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <HAL_RCC_GetClockConfig+0x5c>)
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	08db      	lsrs	r3, r3, #3
 800859a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80085a2:	4b07      	ldr	r3, [pc, #28]	@ (80085c0 <HAL_RCC_GetClockConfig+0x60>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 020f 	and.w	r2, r3, #15
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	601a      	str	r2, [r3, #0]
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40021000 	.word	0x40021000
 80085c0:	40022000 	.word	0x40022000

080085c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	091b      	lsrs	r3, r3, #4
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d10c      	bne.n	8008602 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085e8:	4a17      	ldr	r2, [pc, #92]	@ (8008648 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f0:	4a14      	ldr	r2, [pc, #80]	@ (8008644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80085f2:	68d2      	ldr	r2, [r2, #12]
 80085f4:	0a12      	lsrs	r2, r2, #8
 80085f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	617b      	str	r3, [r7, #20]
    break;
 8008600:	e00c      	b.n	800861c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008602:	4a11      	ldr	r2, [pc, #68]	@ (8008648 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	fbb2 f3f3 	udiv	r3, r2, r3
 800860a:	4a0e      	ldr	r2, [pc, #56]	@ (8008644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800860c:	68d2      	ldr	r2, [r2, #12]
 800860e:	0a12      	lsrs	r2, r2, #8
 8008610:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008614:	fb02 f303 	mul.w	r3, r2, r3
 8008618:	617b      	str	r3, [r7, #20]
    break;
 800861a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800861c:	4b09      	ldr	r3, [pc, #36]	@ (8008644 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	0e5b      	lsrs	r3, r3, #25
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	3301      	adds	r3, #1
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	fbb2 f3f3 	udiv	r3, r2, r3
 8008634:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008636:	687b      	ldr	r3, [r7, #4]
}
 8008638:	4618      	mov	r0, r3
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	40021000 	.word	0x40021000
 8008648:	00f42400 	.word	0x00f42400

0800864c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008654:	2300      	movs	r3, #0
 8008656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008658:	2300      	movs	r3, #0
 800865a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8098 	beq.w	800879a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800866a:	2300      	movs	r3, #0
 800866c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800866e:	4b43      	ldr	r3, [pc, #268]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10d      	bne.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800867a:	4b40      	ldr	r3, [pc, #256]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800867c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800867e:	4a3f      	ldr	r2, [pc, #252]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008684:	6593      	str	r3, [r2, #88]	@ 0x58
 8008686:	4b3d      	ldr	r3, [pc, #244]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800868a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800868e:	60bb      	str	r3, [r7, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008692:	2301      	movs	r3, #1
 8008694:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008696:	4b3a      	ldr	r3, [pc, #232]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a39      	ldr	r2, [pc, #228]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800869c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086a2:	f7fc f8b9 	bl	8004818 <HAL_GetTick>
 80086a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086a8:	e009      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086aa:	f7fc f8b5 	bl	8004818 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d902      	bls.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	74fb      	strb	r3, [r7, #19]
        break;
 80086bc:	e005      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086be:	4b30      	ldr	r3, [pc, #192]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0ef      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80086ca:	7cfb      	ldrb	r3, [r7, #19]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d159      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80086d0:	4b2a      	ldr	r3, [pc, #168]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d01e      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d019      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086ec:	4b23      	ldr	r3, [pc, #140]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086f8:	4b20      	ldr	r3, [pc, #128]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fe:	4a1f      	ldr	r2, [pc, #124]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008708:	4b1c      	ldr	r3, [pc, #112]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800870a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800870e:	4a1b      	ldr	r2, [pc, #108]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008718:	4a18      	ldr	r2, [pc, #96]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d016      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872a:	f7fc f875 	bl	8004818 <HAL_GetTick>
 800872e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008730:	e00b      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008732:	f7fc f871 	bl	8004818 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008740:	4293      	cmp	r3, r2
 8008742:	d902      	bls.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	74fb      	strb	r3, [r7, #19]
            break;
 8008748:	e006      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800874a:	4b0c      	ldr	r3, [pc, #48]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800874c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d0ec      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008758:	7cfb      	ldrb	r3, [r7, #19]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10b      	bne.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800875e:	4b07      	ldr	r3, [pc, #28]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800876c:	4903      	ldr	r1, [pc, #12]	@ (800877c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800876e:	4313      	orrs	r3, r2
 8008770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008774:	e008      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008776:	7cfb      	ldrb	r3, [r7, #19]
 8008778:	74bb      	strb	r3, [r7, #18]
 800877a:	e005      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800877c:	40021000 	.word	0x40021000
 8008780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008784:	7cfb      	ldrb	r3, [r7, #19]
 8008786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008788:	7c7b      	ldrb	r3, [r7, #17]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d105      	bne.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800878e:	4ba6      	ldr	r3, [pc, #664]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008792:	4aa5      	ldr	r2, [pc, #660]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008798:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087a6:	4ba0      	ldr	r3, [pc, #640]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ac:	f023 0203 	bic.w	r2, r3, #3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	499c      	ldr	r1, [pc, #624]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00a      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087c8:	4b97      	ldr	r3, [pc, #604]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ce:	f023 020c 	bic.w	r2, r3, #12
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	4994      	ldr	r1, [pc, #592]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087ea:	4b8f      	ldr	r3, [pc, #572]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	498b      	ldr	r1, [pc, #556]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0308 	and.w	r3, r3, #8
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800880c:	4b86      	ldr	r3, [pc, #536]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008812:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	4983      	ldr	r1, [pc, #524]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800881c:	4313      	orrs	r3, r2
 800881e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0320 	and.w	r3, r3, #32
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800882e:	4b7e      	ldr	r3, [pc, #504]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008834:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	497a      	ldr	r1, [pc, #488]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800883e:	4313      	orrs	r3, r2
 8008840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008850:	4b75      	ldr	r3, [pc, #468]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008856:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	4972      	ldr	r1, [pc, #456]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008860:	4313      	orrs	r3, r2
 8008862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00a      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008872:	4b6d      	ldr	r3, [pc, #436]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008878:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	4969      	ldr	r1, [pc, #420]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008882:	4313      	orrs	r3, r2
 8008884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008894:	4b64      	ldr	r3, [pc, #400]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800889a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	4961      	ldr	r1, [pc, #388]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088b6:	4b5c      	ldr	r3, [pc, #368]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c4:	4958      	ldr	r1, [pc, #352]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d015      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088d8:	4b53      	ldr	r3, [pc, #332]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e6:	4950      	ldr	r1, [pc, #320]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088f6:	d105      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088f8:	4b4b      	ldr	r3, [pc, #300]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	4a4a      	ldr	r2, [pc, #296]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80088fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008902:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800890c:	2b00      	cmp	r3, #0
 800890e:	d015      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008910:	4b45      	ldr	r3, [pc, #276]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008916:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891e:	4942      	ldr	r1, [pc, #264]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008920:	4313      	orrs	r3, r2
 8008922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800892e:	d105      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008930:	4b3d      	ldr	r3, [pc, #244]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	4a3c      	ldr	r2, [pc, #240]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800893a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d015      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008948:	4b37      	ldr	r3, [pc, #220]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800894a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800894e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008956:	4934      	ldr	r1, [pc, #208]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008958:	4313      	orrs	r3, r2
 800895a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008962:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008966:	d105      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008968:	4b2f      	ldr	r3, [pc, #188]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	4a2e      	ldr	r2, [pc, #184]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800896e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008972:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d015      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008980:	4b29      	ldr	r3, [pc, #164]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008986:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898e:	4926      	ldr	r1, [pc, #152]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008990:	4313      	orrs	r3, r2
 8008992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800899a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800899e:	d105      	bne.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089a0:	4b21      	ldr	r3, [pc, #132]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	4a20      	ldr	r2, [pc, #128]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d015      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c6:	4918      	ldr	r1, [pc, #96]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089d6:	d105      	bne.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089d8:	4b13      	ldr	r3, [pc, #76]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	4a12      	ldr	r2, [pc, #72]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d015      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80089f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fe:	490a      	ldr	r1, [pc, #40]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a0e:	d105      	bne.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008a10:	4b05      	ldr	r3, [pc, #20]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	4a04      	ldr	r2, [pc, #16]	@ (8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008a1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	40021000 	.word	0x40021000

08008a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e09d      	b.n	8008b7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d108      	bne.n	8008a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a4e:	d009      	beq.n	8008a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	61da      	str	r2, [r3, #28]
 8008a56:	e005      	b.n	8008a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7fa f952 	bl	8002d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008aa4:	d902      	bls.n	8008aac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	e002      	b.n	8008ab2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ab0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008aba:	d007      	beq.n	8008acc <HAL_SPI_Init+0xa0>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ac4:	d002      	beq.n	8008acc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	431a      	orrs	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b0e:	ea42 0103 	orr.w	r1, r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	f003 0204 	and.w	r2, r3, #4
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b48:	ea42 0103 	orr.w	r1, r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69da      	ldr	r2, [r3, #28]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e049      	b.n	8008c28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d106      	bne.n	8008bae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7fb fab5 	bl	8004118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f001 fa09 	bl	8009fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d001      	beq.n	8008c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e04a      	b.n	8008cde <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a21      	ldr	r2, [pc, #132]	@ (8008cec <HAL_TIM_Base_Start_IT+0xbc>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d018      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x6c>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c72:	d013      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x6c>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00e      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x6c>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1c      	ldr	r2, [pc, #112]	@ (8008cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d009      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x6c>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8008cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d004      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x6c>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a19      	ldr	r2, [pc, #100]	@ (8008cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d115      	bne.n	8008cc8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	4b17      	ldr	r3, [pc, #92]	@ (8008d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b06      	cmp	r3, #6
 8008cac:	d015      	beq.n	8008cda <HAL_TIM_Base_Start_IT+0xaa>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cb4:	d011      	beq.n	8008cda <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0201 	orr.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc6:	e008      	b.n	8008cda <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0201 	orr.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	e000      	b.n	8008cdc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40012c00 	.word	0x40012c00
 8008cf0:	40000400 	.word	0x40000400
 8008cf4:	40000800 	.word	0x40000800
 8008cf8:	40013400 	.word	0x40013400
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	00010007 	.word	0x00010007

08008d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e049      	b.n	8008daa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d106      	bne.n	8008d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f841 	bl	8008db2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4619      	mov	r1, r3
 8008d42:	4610      	mov	r0, r2
 8008d44:	f001 f948 	bl	8009fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008dba:	bf00      	nop
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
	...

08008dc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <HAL_TIM_PWM_Start+0x24>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	bf14      	ite	ne
 8008de4:	2301      	movne	r3, #1
 8008de6:	2300      	moveq	r3, #0
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	e03c      	b.n	8008e66 <HAL_TIM_PWM_Start+0x9e>
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	d109      	bne.n	8008e06 <HAL_TIM_PWM_Start+0x3e>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	bf14      	ite	ne
 8008dfe:	2301      	movne	r3, #1
 8008e00:	2300      	moveq	r3, #0
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	e02f      	b.n	8008e66 <HAL_TIM_PWM_Start+0x9e>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d109      	bne.n	8008e20 <HAL_TIM_PWM_Start+0x58>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	bf14      	ite	ne
 8008e18:	2301      	movne	r3, #1
 8008e1a:	2300      	moveq	r3, #0
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	e022      	b.n	8008e66 <HAL_TIM_PWM_Start+0x9e>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b0c      	cmp	r3, #12
 8008e24:	d109      	bne.n	8008e3a <HAL_TIM_PWM_Start+0x72>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	bf14      	ite	ne
 8008e32:	2301      	movne	r3, #1
 8008e34:	2300      	moveq	r3, #0
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	e015      	b.n	8008e66 <HAL_TIM_PWM_Start+0x9e>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b10      	cmp	r3, #16
 8008e3e:	d109      	bne.n	8008e54 <HAL_TIM_PWM_Start+0x8c>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	bf14      	ite	ne
 8008e4c:	2301      	movne	r3, #1
 8008e4e:	2300      	moveq	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	e008      	b.n	8008e66 <HAL_TIM_PWM_Start+0x9e>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	bf14      	ite	ne
 8008e60:	2301      	movne	r3, #1
 8008e62:	2300      	moveq	r3, #0
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e097      	b.n	8008f9e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d104      	bne.n	8008e7e <HAL_TIM_PWM_Start+0xb6>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e7c:	e023      	b.n	8008ec6 <HAL_TIM_PWM_Start+0xfe>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d104      	bne.n	8008e8e <HAL_TIM_PWM_Start+0xc6>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e8c:	e01b      	b.n	8008ec6 <HAL_TIM_PWM_Start+0xfe>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	d104      	bne.n	8008e9e <HAL_TIM_PWM_Start+0xd6>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2202      	movs	r2, #2
 8008e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e9c:	e013      	b.n	8008ec6 <HAL_TIM_PWM_Start+0xfe>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b0c      	cmp	r3, #12
 8008ea2:	d104      	bne.n	8008eae <HAL_TIM_PWM_Start+0xe6>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008eac:	e00b      	b.n	8008ec6 <HAL_TIM_PWM_Start+0xfe>
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b10      	cmp	r3, #16
 8008eb2:	d104      	bne.n	8008ebe <HAL_TIM_PWM_Start+0xf6>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ebc:	e003      	b.n	8008ec6 <HAL_TIM_PWM_Start+0xfe>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 fcb0 	bl	800a834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a33      	ldr	r2, [pc, #204]	@ (8008fa8 <HAL_TIM_PWM_Start+0x1e0>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d013      	beq.n	8008f06 <HAL_TIM_PWM_Start+0x13e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a32      	ldr	r2, [pc, #200]	@ (8008fac <HAL_TIM_PWM_Start+0x1e4>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d00e      	beq.n	8008f06 <HAL_TIM_PWM_Start+0x13e>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a30      	ldr	r2, [pc, #192]	@ (8008fb0 <HAL_TIM_PWM_Start+0x1e8>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d009      	beq.n	8008f06 <HAL_TIM_PWM_Start+0x13e>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8008fb4 <HAL_TIM_PWM_Start+0x1ec>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d004      	beq.n	8008f06 <HAL_TIM_PWM_Start+0x13e>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a2d      	ldr	r2, [pc, #180]	@ (8008fb8 <HAL_TIM_PWM_Start+0x1f0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d101      	bne.n	8008f0a <HAL_TIM_PWM_Start+0x142>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <HAL_TIM_PWM_Start+0x144>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d007      	beq.n	8008f20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a20      	ldr	r2, [pc, #128]	@ (8008fa8 <HAL_TIM_PWM_Start+0x1e0>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d018      	beq.n	8008f5c <HAL_TIM_PWM_Start+0x194>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f32:	d013      	beq.n	8008f5c <HAL_TIM_PWM_Start+0x194>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a20      	ldr	r2, [pc, #128]	@ (8008fbc <HAL_TIM_PWM_Start+0x1f4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d00e      	beq.n	8008f5c <HAL_TIM_PWM_Start+0x194>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1f      	ldr	r2, [pc, #124]	@ (8008fc0 <HAL_TIM_PWM_Start+0x1f8>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d009      	beq.n	8008f5c <HAL_TIM_PWM_Start+0x194>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a17      	ldr	r2, [pc, #92]	@ (8008fac <HAL_TIM_PWM_Start+0x1e4>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d004      	beq.n	8008f5c <HAL_TIM_PWM_Start+0x194>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a16      	ldr	r2, [pc, #88]	@ (8008fb0 <HAL_TIM_PWM_Start+0x1e8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d115      	bne.n	8008f88 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	4b18      	ldr	r3, [pc, #96]	@ (8008fc4 <HAL_TIM_PWM_Start+0x1fc>)
 8008f64:	4013      	ands	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b06      	cmp	r3, #6
 8008f6c:	d015      	beq.n	8008f9a <HAL_TIM_PWM_Start+0x1d2>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f74:	d011      	beq.n	8008f9a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f042 0201 	orr.w	r2, r2, #1
 8008f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f86:	e008      	b.n	8008f9a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0201 	orr.w	r2, r2, #1
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	e000      	b.n	8008f9c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	40012c00 	.word	0x40012c00
 8008fac:	40013400 	.word	0x40013400
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40014400 	.word	0x40014400
 8008fb8:	40014800 	.word	0x40014800
 8008fbc:	40000400 	.word	0x40000400
 8008fc0:	40000800 	.word	0x40000800
 8008fc4:	00010007 	.word	0x00010007

08008fc8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f001 fc2a 	bl	800a834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80090e0 <HAL_TIM_PWM_Stop+0x118>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d013      	beq.n	8009012 <HAL_TIM_PWM_Stop+0x4a>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a3d      	ldr	r2, [pc, #244]	@ (80090e4 <HAL_TIM_PWM_Stop+0x11c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d00e      	beq.n	8009012 <HAL_TIM_PWM_Stop+0x4a>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80090e8 <HAL_TIM_PWM_Stop+0x120>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d009      	beq.n	8009012 <HAL_TIM_PWM_Stop+0x4a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a3a      	ldr	r2, [pc, #232]	@ (80090ec <HAL_TIM_PWM_Stop+0x124>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d004      	beq.n	8009012 <HAL_TIM_PWM_Stop+0x4a>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a38      	ldr	r2, [pc, #224]	@ (80090f0 <HAL_TIM_PWM_Stop+0x128>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d101      	bne.n	8009016 <HAL_TIM_PWM_Stop+0x4e>
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <HAL_TIM_PWM_Stop+0x50>
 8009016:	2300      	movs	r3, #0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d017      	beq.n	800904c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6a1a      	ldr	r2, [r3, #32]
 8009022:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009026:	4013      	ands	r3, r2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10f      	bne.n	800904c <HAL_TIM_PWM_Stop+0x84>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6a1a      	ldr	r2, [r3, #32]
 8009032:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009036:	4013      	ands	r3, r2
 8009038:	2b00      	cmp	r3, #0
 800903a:	d107      	bne.n	800904c <HAL_TIM_PWM_Stop+0x84>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800904a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6a1a      	ldr	r2, [r3, #32]
 8009052:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009056:	4013      	ands	r3, r2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10f      	bne.n	800907c <HAL_TIM_PWM_Stop+0xb4>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6a1a      	ldr	r2, [r3, #32]
 8009062:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009066:	4013      	ands	r3, r2
 8009068:	2b00      	cmp	r3, #0
 800906a:	d107      	bne.n	800907c <HAL_TIM_PWM_Stop+0xb4>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0201 	bic.w	r2, r2, #1
 800907a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <HAL_TIM_PWM_Stop+0xc4>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800908a:	e023      	b.n	80090d4 <HAL_TIM_PWM_Stop+0x10c>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b04      	cmp	r3, #4
 8009090:	d104      	bne.n	800909c <HAL_TIM_PWM_Stop+0xd4>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800909a:	e01b      	b.n	80090d4 <HAL_TIM_PWM_Stop+0x10c>
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b08      	cmp	r3, #8
 80090a0:	d104      	bne.n	80090ac <HAL_TIM_PWM_Stop+0xe4>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090aa:	e013      	b.n	80090d4 <HAL_TIM_PWM_Stop+0x10c>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2b0c      	cmp	r3, #12
 80090b0:	d104      	bne.n	80090bc <HAL_TIM_PWM_Stop+0xf4>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80090ba:	e00b      	b.n	80090d4 <HAL_TIM_PWM_Stop+0x10c>
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b10      	cmp	r3, #16
 80090c0:	d104      	bne.n	80090cc <HAL_TIM_PWM_Stop+0x104>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090ca:	e003      	b.n	80090d4 <HAL_TIM_PWM_Stop+0x10c>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	40012c00 	.word	0x40012c00
 80090e4:	40013400 	.word	0x40013400
 80090e8:	40014000 	.word	0x40014000
 80090ec:	40014400 	.word	0x40014400
 80090f0:	40014800 	.word	0x40014800

080090f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d109      	bne.n	8009120 <HAL_TIM_PWM_Start_DMA+0x2c>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	bf0c      	ite	eq
 8009118:	2301      	moveq	r3, #1
 800911a:	2300      	movne	r3, #0
 800911c:	b2db      	uxtb	r3, r3
 800911e:	e03c      	b.n	800919a <HAL_TIM_PWM_Start_DMA+0xa6>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b04      	cmp	r3, #4
 8009124:	d109      	bne.n	800913a <HAL_TIM_PWM_Start_DMA+0x46>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b02      	cmp	r3, #2
 8009130:	bf0c      	ite	eq
 8009132:	2301      	moveq	r3, #1
 8009134:	2300      	movne	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	e02f      	b.n	800919a <HAL_TIM_PWM_Start_DMA+0xa6>
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b08      	cmp	r3, #8
 800913e:	d109      	bne.n	8009154 <HAL_TIM_PWM_Start_DMA+0x60>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b02      	cmp	r3, #2
 800914a:	bf0c      	ite	eq
 800914c:	2301      	moveq	r3, #1
 800914e:	2300      	movne	r3, #0
 8009150:	b2db      	uxtb	r3, r3
 8009152:	e022      	b.n	800919a <HAL_TIM_PWM_Start_DMA+0xa6>
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2b0c      	cmp	r3, #12
 8009158:	d109      	bne.n	800916e <HAL_TIM_PWM_Start_DMA+0x7a>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	bf0c      	ite	eq
 8009166:	2301      	moveq	r3, #1
 8009168:	2300      	movne	r3, #0
 800916a:	b2db      	uxtb	r3, r3
 800916c:	e015      	b.n	800919a <HAL_TIM_PWM_Start_DMA+0xa6>
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b10      	cmp	r3, #16
 8009172:	d109      	bne.n	8009188 <HAL_TIM_PWM_Start_DMA+0x94>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	bf0c      	ite	eq
 8009180:	2301      	moveq	r3, #1
 8009182:	2300      	movne	r3, #0
 8009184:	b2db      	uxtb	r3, r3
 8009186:	e008      	b.n	800919a <HAL_TIM_PWM_Start_DMA+0xa6>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b02      	cmp	r3, #2
 8009192:	bf0c      	ite	eq
 8009194:	2301      	moveq	r3, #1
 8009196:	2300      	movne	r3, #0
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800919e:	2302      	movs	r3, #2
 80091a0:	e1a6      	b.n	80094f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d109      	bne.n	80091bc <HAL_TIM_PWM_Start_DMA+0xc8>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	bf0c      	ite	eq
 80091b4:	2301      	moveq	r3, #1
 80091b6:	2300      	movne	r3, #0
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	e03c      	b.n	8009236 <HAL_TIM_PWM_Start_DMA+0x142>
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b04      	cmp	r3, #4
 80091c0:	d109      	bne.n	80091d6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	bf0c      	ite	eq
 80091ce:	2301      	moveq	r3, #1
 80091d0:	2300      	movne	r3, #0
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	e02f      	b.n	8009236 <HAL_TIM_PWM_Start_DMA+0x142>
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b08      	cmp	r3, #8
 80091da:	d109      	bne.n	80091f0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	bf0c      	ite	eq
 80091e8:	2301      	moveq	r3, #1
 80091ea:	2300      	movne	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	e022      	b.n	8009236 <HAL_TIM_PWM_Start_DMA+0x142>
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b0c      	cmp	r3, #12
 80091f4:	d109      	bne.n	800920a <HAL_TIM_PWM_Start_DMA+0x116>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b01      	cmp	r3, #1
 8009200:	bf0c      	ite	eq
 8009202:	2301      	moveq	r3, #1
 8009204:	2300      	movne	r3, #0
 8009206:	b2db      	uxtb	r3, r3
 8009208:	e015      	b.n	8009236 <HAL_TIM_PWM_Start_DMA+0x142>
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b10      	cmp	r3, #16
 800920e:	d109      	bne.n	8009224 <HAL_TIM_PWM_Start_DMA+0x130>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b01      	cmp	r3, #1
 800921a:	bf0c      	ite	eq
 800921c:	2301      	moveq	r3, #1
 800921e:	2300      	movne	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	e008      	b.n	8009236 <HAL_TIM_PWM_Start_DMA+0x142>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800922a:	b2db      	uxtb	r3, r3
 800922c:	2b01      	cmp	r3, #1
 800922e:	bf0c      	ite	eq
 8009230:	2301      	moveq	r3, #1
 8009232:	2300      	movne	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d034      	beq.n	80092a4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <HAL_TIM_PWM_Start_DMA+0x152>
 8009240:	887b      	ldrh	r3, [r7, #2]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e152      	b.n	80094f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d104      	bne.n	800925a <HAL_TIM_PWM_Start_DMA+0x166>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009258:	e026      	b.n	80092a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b04      	cmp	r3, #4
 800925e:	d104      	bne.n	800926a <HAL_TIM_PWM_Start_DMA+0x176>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2202      	movs	r2, #2
 8009264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009268:	e01e      	b.n	80092a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b08      	cmp	r3, #8
 800926e:	d104      	bne.n	800927a <HAL_TIM_PWM_Start_DMA+0x186>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009278:	e016      	b.n	80092a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b0c      	cmp	r3, #12
 800927e:	d104      	bne.n	800928a <HAL_TIM_PWM_Start_DMA+0x196>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009288:	e00e      	b.n	80092a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b10      	cmp	r3, #16
 800928e:	d104      	bne.n	800929a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009298:	e006      	b.n	80092a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2202      	movs	r2, #2
 800929e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092a2:	e001      	b.n	80092a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e123      	b.n	80094f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b0c      	cmp	r3, #12
 80092ac:	f200 80ae 	bhi.w	800940c <HAL_TIM_PWM_Start_DMA+0x318>
 80092b0:	a201      	add	r2, pc, #4	@ (adr r2, 80092b8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	080092ed 	.word	0x080092ed
 80092bc:	0800940d 	.word	0x0800940d
 80092c0:	0800940d 	.word	0x0800940d
 80092c4:	0800940d 	.word	0x0800940d
 80092c8:	08009335 	.word	0x08009335
 80092cc:	0800940d 	.word	0x0800940d
 80092d0:	0800940d 	.word	0x0800940d
 80092d4:	0800940d 	.word	0x0800940d
 80092d8:	0800937d 	.word	0x0800937d
 80092dc:	0800940d 	.word	0x0800940d
 80092e0:	0800940d 	.word	0x0800940d
 80092e4:	0800940d 	.word	0x0800940d
 80092e8:	080093c5 	.word	0x080093c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f0:	4a81      	ldr	r2, [pc, #516]	@ (80094f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 80092f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f8:	4a80      	ldr	r2, [pc, #512]	@ (80094fc <HAL_TIM_PWM_Start_DMA+0x408>)
 80092fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009300:	4a7f      	ldr	r2, [pc, #508]	@ (8009500 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8009302:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009308:	6879      	ldr	r1, [r7, #4]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3334      	adds	r3, #52	@ 0x34
 8009310:	461a      	mov	r2, r3
 8009312:	887b      	ldrh	r3, [r7, #2]
 8009314:	f7fd f8ec 	bl	80064f0 <HAL_DMA_Start_IT>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e0e6      	b.n	80094f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009330:	60da      	str	r2, [r3, #12]
      break;
 8009332:	e06e      	b.n	8009412 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009338:	4a6f      	ldr	r2, [pc, #444]	@ (80094f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 800933a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009340:	4a6e      	ldr	r2, [pc, #440]	@ (80094fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8009342:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009348:	4a6d      	ldr	r2, [pc, #436]	@ (8009500 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800934a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3338      	adds	r3, #56	@ 0x38
 8009358:	461a      	mov	r2, r3
 800935a:	887b      	ldrh	r3, [r7, #2]
 800935c:	f7fd f8c8 	bl	80064f0 <HAL_DMA_Start_IT>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e0c2      	b.n	80094f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68da      	ldr	r2, [r3, #12]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009378:	60da      	str	r2, [r3, #12]
      break;
 800937a:	e04a      	b.n	8009412 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009380:	4a5d      	ldr	r2, [pc, #372]	@ (80094f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8009382:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009388:	4a5c      	ldr	r2, [pc, #368]	@ (80094fc <HAL_TIM_PWM_Start_DMA+0x408>)
 800938a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009390:	4a5b      	ldr	r2, [pc, #364]	@ (8009500 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8009392:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	333c      	adds	r3, #60	@ 0x3c
 80093a0:	461a      	mov	r2, r3
 80093a2:	887b      	ldrh	r3, [r7, #2]
 80093a4:	f7fd f8a4 	bl	80064f0 <HAL_DMA_Start_IT>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e09e      	b.n	80094f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68da      	ldr	r2, [r3, #12]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093c0:	60da      	str	r2, [r3, #12]
      break;
 80093c2:	e026      	b.n	8009412 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c8:	4a4b      	ldr	r2, [pc, #300]	@ (80094f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 80093ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d0:	4a4a      	ldr	r2, [pc, #296]	@ (80094fc <HAL_TIM_PWM_Start_DMA+0x408>)
 80093d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d8:	4a49      	ldr	r2, [pc, #292]	@ (8009500 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80093da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3340      	adds	r3, #64	@ 0x40
 80093e8:	461a      	mov	r2, r3
 80093ea:	887b      	ldrh	r3, [r7, #2]
 80093ec:	f7fd f880 	bl	80064f0 <HAL_DMA_Start_IT>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e07a      	b.n	80094f0 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68da      	ldr	r2, [r3, #12]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009408:	60da      	str	r2, [r3, #12]
      break;
 800940a:	e002      	b.n	8009412 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	75fb      	strb	r3, [r7, #23]
      break;
 8009410:	bf00      	nop
  }

  if (status == HAL_OK)
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d16a      	bne.n	80094ee <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2201      	movs	r2, #1
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	4618      	mov	r0, r3
 8009422:	f001 fa07 	bl	800a834 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a36      	ldr	r2, [pc, #216]	@ (8009504 <HAL_TIM_PWM_Start_DMA+0x410>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d013      	beq.n	8009458 <HAL_TIM_PWM_Start_DMA+0x364>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a34      	ldr	r2, [pc, #208]	@ (8009508 <HAL_TIM_PWM_Start_DMA+0x414>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00e      	beq.n	8009458 <HAL_TIM_PWM_Start_DMA+0x364>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a33      	ldr	r2, [pc, #204]	@ (800950c <HAL_TIM_PWM_Start_DMA+0x418>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d009      	beq.n	8009458 <HAL_TIM_PWM_Start_DMA+0x364>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a31      	ldr	r2, [pc, #196]	@ (8009510 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d004      	beq.n	8009458 <HAL_TIM_PWM_Start_DMA+0x364>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a30      	ldr	r2, [pc, #192]	@ (8009514 <HAL_TIM_PWM_Start_DMA+0x420>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d101      	bne.n	800945c <HAL_TIM_PWM_Start_DMA+0x368>
 8009458:	2301      	movs	r3, #1
 800945a:	e000      	b.n	800945e <HAL_TIM_PWM_Start_DMA+0x36a>
 800945c:	2300      	movs	r3, #0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a23      	ldr	r2, [pc, #140]	@ (8009504 <HAL_TIM_PWM_Start_DMA+0x410>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d018      	beq.n	80094ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009484:	d013      	beq.n	80094ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a23      	ldr	r2, [pc, #140]	@ (8009518 <HAL_TIM_PWM_Start_DMA+0x424>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d00e      	beq.n	80094ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a21      	ldr	r2, [pc, #132]	@ (800951c <HAL_TIM_PWM_Start_DMA+0x428>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d009      	beq.n	80094ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a1a      	ldr	r2, [pc, #104]	@ (8009508 <HAL_TIM_PWM_Start_DMA+0x414>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d004      	beq.n	80094ae <HAL_TIM_PWM_Start_DMA+0x3ba>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a18      	ldr	r2, [pc, #96]	@ (800950c <HAL_TIM_PWM_Start_DMA+0x418>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d115      	bne.n	80094da <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009520 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b06      	cmp	r3, #6
 80094be:	d015      	beq.n	80094ec <HAL_TIM_PWM_Start_DMA+0x3f8>
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094c6:	d011      	beq.n	80094ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f042 0201 	orr.w	r2, r2, #1
 80094d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094d8:	e008      	b.n	80094ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f042 0201 	orr.w	r2, r2, #1
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	e000      	b.n	80094ee <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	08009ec7 	.word	0x08009ec7
 80094fc:	08009f6f 	.word	0x08009f6f
 8009500:	08009e35 	.word	0x08009e35
 8009504:	40012c00 	.word	0x40012c00
 8009508:	40013400 	.word	0x40013400
 800950c:	40014000 	.word	0x40014000
 8009510:	40014400 	.word	0x40014400
 8009514:	40014800 	.word	0x40014800
 8009518:	40000400 	.word	0x40000400
 800951c:	40000800 	.word	0x40000800
 8009520:	00010007 	.word	0x00010007

08009524 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b0c      	cmp	r3, #12
 8009536:	d855      	bhi.n	80095e4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8009538:	a201      	add	r2, pc, #4	@ (adr r2, 8009540 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	08009575 	.word	0x08009575
 8009544:	080095e5 	.word	0x080095e5
 8009548:	080095e5 	.word	0x080095e5
 800954c:	080095e5 	.word	0x080095e5
 8009550:	08009591 	.word	0x08009591
 8009554:	080095e5 	.word	0x080095e5
 8009558:	080095e5 	.word	0x080095e5
 800955c:	080095e5 	.word	0x080095e5
 8009560:	080095ad 	.word	0x080095ad
 8009564:	080095e5 	.word	0x080095e5
 8009568:	080095e5 	.word	0x080095e5
 800956c:	080095e5 	.word	0x080095e5
 8009570:	080095c9 	.word	0x080095c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68da      	ldr	r2, [r3, #12]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009582:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009588:	4618      	mov	r0, r3
 800958a:	f7fd f885 	bl	8006698 <HAL_DMA_Abort_IT>
      break;
 800958e:	e02c      	b.n	80095ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800959e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fd f877 	bl	8006698 <HAL_DMA_Abort_IT>
      break;
 80095aa:	e01e      	b.n	80095ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68da      	ldr	r2, [r3, #12]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fd f869 	bl	8006698 <HAL_DMA_Abort_IT>
      break;
 80095c6:	e010      	b.n	80095ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fd f85b 	bl	8006698 <HAL_DMA_Abort_IT>
      break;
 80095e2:	e002      	b.n	80095ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]
      break;
 80095e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f040 8081 	bne.w	80096f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2200      	movs	r2, #0
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 f91a 	bl	800a834 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a3e      	ldr	r2, [pc, #248]	@ (8009700 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d013      	beq.n	8009632 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a3d      	ldr	r2, [pc, #244]	@ (8009704 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d00e      	beq.n	8009632 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a3b      	ldr	r2, [pc, #236]	@ (8009708 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d009      	beq.n	8009632 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a3a      	ldr	r2, [pc, #232]	@ (800970c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d004      	beq.n	8009632 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a38      	ldr	r2, [pc, #224]	@ (8009710 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d101      	bne.n	8009636 <HAL_TIM_PWM_Stop_DMA+0x112>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <HAL_TIM_PWM_Stop_DMA+0x114>
 8009636:	2300      	movs	r3, #0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d017      	beq.n	800966c <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6a1a      	ldr	r2, [r3, #32]
 8009642:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009646:	4013      	ands	r3, r2
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10f      	bne.n	800966c <HAL_TIM_PWM_Stop_DMA+0x148>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6a1a      	ldr	r2, [r3, #32]
 8009652:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009656:	4013      	ands	r3, r2
 8009658:	2b00      	cmp	r3, #0
 800965a:	d107      	bne.n	800966c <HAL_TIM_PWM_Stop_DMA+0x148>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800966a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6a1a      	ldr	r2, [r3, #32]
 8009672:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009676:	4013      	ands	r3, r2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10f      	bne.n	800969c <HAL_TIM_PWM_Stop_DMA+0x178>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6a1a      	ldr	r2, [r3, #32]
 8009682:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009686:	4013      	ands	r3, r2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d107      	bne.n	800969c <HAL_TIM_PWM_Stop_DMA+0x178>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0201 	bic.w	r2, r2, #1
 800969a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d104      	bne.n	80096ac <HAL_TIM_PWM_Stop_DMA+0x188>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096aa:	e023      	b.n	80096f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d104      	bne.n	80096bc <HAL_TIM_PWM_Stop_DMA+0x198>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096ba:	e01b      	b.n	80096f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	2b08      	cmp	r3, #8
 80096c0:	d104      	bne.n	80096cc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096ca:	e013      	b.n	80096f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b0c      	cmp	r3, #12
 80096d0:	d104      	bne.n	80096dc <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096da:	e00b      	b.n	80096f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2b10      	cmp	r3, #16
 80096e0:	d104      	bne.n	80096ec <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096ea:	e003      	b.n	80096f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40012c00 	.word	0x40012c00
 8009704:	40013400 	.word	0x40013400
 8009708:	40014000 	.word	0x40014000
 800970c:	40014400 	.word	0x40014400
 8009710:	40014800 	.word	0x40014800

08009714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f003 0302 	and.w	r3, r3, #2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d020      	beq.n	8009778 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	2b00      	cmp	r3, #0
 800973e:	d01b      	beq.n	8009778 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f06f 0202 	mvn.w	r2, #2
 8009748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fb40 	bl	8009de4 <HAL_TIM_IC_CaptureCallback>
 8009764:	e005      	b.n	8009772 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fb32 	bl	8009dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7f8 ffd9 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b00      	cmp	r3, #0
 8009780:	d020      	beq.n	80097c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f003 0304 	and.w	r3, r3, #4
 8009788:	2b00      	cmp	r3, #0
 800978a:	d01b      	beq.n	80097c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f06f 0204 	mvn.w	r2, #4
 8009794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2202      	movs	r2, #2
 800979a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fb1a 	bl	8009de4 <HAL_TIM_IC_CaptureCallback>
 80097b0:	e005      	b.n	80097be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fb0c 	bl	8009dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7f8 ffb3 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d020      	beq.n	8009810 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f003 0308 	and.w	r3, r3, #8
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d01b      	beq.n	8009810 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f06f 0208 	mvn.w	r2, #8
 80097e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2204      	movs	r2, #4
 80097e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 faf4 	bl	8009de4 <HAL_TIM_IC_CaptureCallback>
 80097fc:	e005      	b.n	800980a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fae6 	bl	8009dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7f8 ff8d 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	f003 0310 	and.w	r3, r3, #16
 8009816:	2b00      	cmp	r3, #0
 8009818:	d020      	beq.n	800985c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f003 0310 	and.w	r3, r3, #16
 8009820:	2b00      	cmp	r3, #0
 8009822:	d01b      	beq.n	800985c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f06f 0210 	mvn.w	r2, #16
 800982c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2208      	movs	r2, #8
 8009832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 face 	bl	8009de4 <HAL_TIM_IC_CaptureCallback>
 8009848:	e005      	b.n	8009856 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fac0 	bl	8009dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7f8 ff67 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00c      	beq.n	8009880 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d007      	beq.n	8009880 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f06f 0201 	mvn.w	r2, #1
 8009878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7f9 f9d4 	bl	8002c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009886:	2b00      	cmp	r3, #0
 8009888:	d104      	bne.n	8009894 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00c      	beq.n	80098ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800989a:	2b00      	cmp	r3, #0
 800989c:	d007      	beq.n	80098ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80098a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 f875 	bl	800a998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00c      	beq.n	80098d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d007      	beq.n	80098d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80098ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 f86d 	bl	800a9ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00c      	beq.n	80098f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80098ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fa8b 	bl	8009e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	f003 0320 	and.w	r3, r3, #32
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00c      	beq.n	800991a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d007      	beq.n	800991a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f06f 0220 	mvn.w	r2, #32
 8009912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f835 	bl	800a984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00c      	beq.n	800993e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 f841 	bl	800a9c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00c      	beq.n	8009962 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d007      	beq.n	8009962 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800995a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 f839 	bl	800a9d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00c      	beq.n	8009986 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d007      	beq.n	8009986 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800997e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 f831 	bl	800a9e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00c      	beq.n	80099aa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d007      	beq.n	80099aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80099a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 f829 	bl	800a9fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d101      	bne.n	80099d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099ce:	2302      	movs	r3, #2
 80099d0:	e0ff      	b.n	8009bd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b14      	cmp	r3, #20
 80099de:	f200 80f0 	bhi.w	8009bc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80099e2:	a201      	add	r2, pc, #4	@ (adr r2, 80099e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e8:	08009a3d 	.word	0x08009a3d
 80099ec:	08009bc3 	.word	0x08009bc3
 80099f0:	08009bc3 	.word	0x08009bc3
 80099f4:	08009bc3 	.word	0x08009bc3
 80099f8:	08009a7d 	.word	0x08009a7d
 80099fc:	08009bc3 	.word	0x08009bc3
 8009a00:	08009bc3 	.word	0x08009bc3
 8009a04:	08009bc3 	.word	0x08009bc3
 8009a08:	08009abf 	.word	0x08009abf
 8009a0c:	08009bc3 	.word	0x08009bc3
 8009a10:	08009bc3 	.word	0x08009bc3
 8009a14:	08009bc3 	.word	0x08009bc3
 8009a18:	08009aff 	.word	0x08009aff
 8009a1c:	08009bc3 	.word	0x08009bc3
 8009a20:	08009bc3 	.word	0x08009bc3
 8009a24:	08009bc3 	.word	0x08009bc3
 8009a28:	08009b41 	.word	0x08009b41
 8009a2c:	08009bc3 	.word	0x08009bc3
 8009a30:	08009bc3 	.word	0x08009bc3
 8009a34:	08009bc3 	.word	0x08009bc3
 8009a38:	08009b81 	.word	0x08009b81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68b9      	ldr	r1, [r7, #8]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 fb64 	bl	800a110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	699a      	ldr	r2, [r3, #24]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f042 0208 	orr.w	r2, r2, #8
 8009a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699a      	ldr	r2, [r3, #24]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0204 	bic.w	r2, r2, #4
 8009a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6999      	ldr	r1, [r3, #24]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	691a      	ldr	r2, [r3, #16]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	619a      	str	r2, [r3, #24]
      break;
 8009a7a:	e0a5      	b.n	8009bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68b9      	ldr	r1, [r7, #8]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 fbd4 	bl	800a230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	699a      	ldr	r2, [r3, #24]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	699a      	ldr	r2, [r3, #24]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6999      	ldr	r1, [r3, #24]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	021a      	lsls	r2, r3, #8
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	619a      	str	r2, [r3, #24]
      break;
 8009abc:	e084      	b.n	8009bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fc3d 	bl	800a344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69da      	ldr	r2, [r3, #28]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f042 0208 	orr.w	r2, r2, #8
 8009ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	69da      	ldr	r2, [r3, #28]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0204 	bic.w	r2, r2, #4
 8009ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69d9      	ldr	r1, [r3, #28]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	691a      	ldr	r2, [r3, #16]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	61da      	str	r2, [r3, #28]
      break;
 8009afc:	e064      	b.n	8009bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 fca5 	bl	800a454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69da      	ldr	r2, [r3, #28]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69da      	ldr	r2, [r3, #28]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69d9      	ldr	r1, [r3, #28]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	021a      	lsls	r2, r3, #8
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	61da      	str	r2, [r3, #28]
      break;
 8009b3e:	e043      	b.n	8009bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68b9      	ldr	r1, [r7, #8]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fd0e 	bl	800a568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0208 	orr.w	r2, r2, #8
 8009b5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0204 	bic.w	r2, r2, #4
 8009b6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	691a      	ldr	r2, [r3, #16]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009b7e:	e023      	b.n	8009bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fd52 	bl	800a630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009baa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	021a      	lsls	r2, r3, #8
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009bc0:	e002      	b.n	8009bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop

08009bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d101      	bne.n	8009bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e0de      	b.n	8009db6 <HAL_TIM_ConfigClockSource+0x1da>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2202      	movs	r2, #2
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009c16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a63      	ldr	r2, [pc, #396]	@ (8009dc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	f000 80a9 	beq.w	8009d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8009c38:	4a61      	ldr	r2, [pc, #388]	@ (8009dc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	f200 80ae 	bhi.w	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009c40:	4a60      	ldr	r2, [pc, #384]	@ (8009dc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	f000 80a1 	beq.w	8009d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8009c48:	4a5e      	ldr	r2, [pc, #376]	@ (8009dc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	f200 80a6 	bhi.w	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009c50:	4a5d      	ldr	r2, [pc, #372]	@ (8009dc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	f000 8099 	beq.w	8009d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8009c58:	4a5b      	ldr	r2, [pc, #364]	@ (8009dc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	f200 809e 	bhi.w	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009c60:	4a5a      	ldr	r2, [pc, #360]	@ (8009dcc <HAL_TIM_ConfigClockSource+0x1f0>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	f000 8091 	beq.w	8009d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8009c68:	4a58      	ldr	r2, [pc, #352]	@ (8009dcc <HAL_TIM_ConfigClockSource+0x1f0>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	f200 8096 	bhi.w	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009c70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009c74:	f000 8089 	beq.w	8009d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8009c78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009c7c:	f200 808e 	bhi.w	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c84:	d03e      	beq.n	8009d04 <HAL_TIM_ConfigClockSource+0x128>
 8009c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c8a:	f200 8087 	bhi.w	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c92:	f000 8086 	beq.w	8009da2 <HAL_TIM_ConfigClockSource+0x1c6>
 8009c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c9a:	d87f      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009c9c:	2b70      	cmp	r3, #112	@ 0x70
 8009c9e:	d01a      	beq.n	8009cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8009ca0:	2b70      	cmp	r3, #112	@ 0x70
 8009ca2:	d87b      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009ca4:	2b60      	cmp	r3, #96	@ 0x60
 8009ca6:	d050      	beq.n	8009d4a <HAL_TIM_ConfigClockSource+0x16e>
 8009ca8:	2b60      	cmp	r3, #96	@ 0x60
 8009caa:	d877      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009cac:	2b50      	cmp	r3, #80	@ 0x50
 8009cae:	d03c      	beq.n	8009d2a <HAL_TIM_ConfigClockSource+0x14e>
 8009cb0:	2b50      	cmp	r3, #80	@ 0x50
 8009cb2:	d873      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009cb4:	2b40      	cmp	r3, #64	@ 0x40
 8009cb6:	d058      	beq.n	8009d6a <HAL_TIM_ConfigClockSource+0x18e>
 8009cb8:	2b40      	cmp	r3, #64	@ 0x40
 8009cba:	d86f      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009cbc:	2b30      	cmp	r3, #48	@ 0x30
 8009cbe:	d064      	beq.n	8009d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8009cc0:	2b30      	cmp	r3, #48	@ 0x30
 8009cc2:	d86b      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009cc4:	2b20      	cmp	r3, #32
 8009cc6:	d060      	beq.n	8009d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	d867      	bhi.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d05c      	beq.n	8009d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8009cd0:	2b10      	cmp	r3, #16
 8009cd2:	d05a      	beq.n	8009d8a <HAL_TIM_ConfigClockSource+0x1ae>
 8009cd4:	e062      	b.n	8009d9c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009ce6:	f000 fd85 	bl	800a7f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	609a      	str	r2, [r3, #8]
      break;
 8009d02:	e04f      	b.n	8009da4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d14:	f000 fd6e 	bl	800a7f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689a      	ldr	r2, [r3, #8]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d26:	609a      	str	r2, [r3, #8]
      break;
 8009d28:	e03c      	b.n	8009da4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d36:	461a      	mov	r2, r3
 8009d38:	f000 fce0 	bl	800a6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2150      	movs	r1, #80	@ 0x50
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fd39 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 8009d48:	e02c      	b.n	8009da4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d56:	461a      	mov	r2, r3
 8009d58:	f000 fcff 	bl	800a75a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2160      	movs	r1, #96	@ 0x60
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 fd29 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 8009d68:	e01c      	b.n	8009da4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d76:	461a      	mov	r2, r3
 8009d78:	f000 fcc0 	bl	800a6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2140      	movs	r1, #64	@ 0x40
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 fd19 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 8009d88:	e00c      	b.n	8009da4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4619      	mov	r1, r3
 8009d94:	4610      	mov	r0, r2
 8009d96:	f000 fd10 	bl	800a7ba <TIM_ITRx_SetConfig>
      break;
 8009d9a:	e003      	b.n	8009da4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009da0:	e000      	b.n	8009da4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	00100070 	.word	0x00100070
 8009dc4:	00100040 	.word	0x00100040
 8009dc8:	00100030 	.word	0x00100030
 8009dcc:	00100020 	.word	0x00100020

08009dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d107      	bne.n	8009e5c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e5a:	e02a      	b.n	8009eb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d107      	bne.n	8009e76 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e74:	e01d      	b.n	8009eb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d107      	bne.n	8009e90 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2204      	movs	r2, #4
 8009e84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e8e:	e010      	b.n	8009eb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d107      	bne.n	8009eaa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2208      	movs	r2, #8
 8009e9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ea8:	e003      	b.n	8009eb2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7ff ffb4 	bl	8009e20 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	771a      	strb	r2, [r3, #28]
}
 8009ebe:	bf00      	nop
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d10b      	bne.n	8009ef6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d136      	bne.n	8009f5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ef4:	e031      	b.n	8009f5a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d10b      	bne.n	8009f18 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2202      	movs	r2, #2
 8009f04:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d125      	bne.n	8009f5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f16:	e020      	b.n	8009f5a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d10b      	bne.n	8009f3a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2204      	movs	r2, #4
 8009f26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d114      	bne.n	8009f5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f38:	e00f      	b.n	8009f5a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d10a      	bne.n	8009f5a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2208      	movs	r2, #8
 8009f48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d103      	bne.n	8009f5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7f8 fbe2 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	771a      	strb	r2, [r3, #28]
}
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d103      	bne.n	8009f8e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	771a      	strb	r2, [r3, #28]
 8009f8c:	e019      	b.n	8009fc2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d103      	bne.n	8009fa0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	771a      	strb	r2, [r3, #28]
 8009f9e:	e010      	b.n	8009fc2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d103      	bne.n	8009fb2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2204      	movs	r2, #4
 8009fae:	771a      	strb	r2, [r3, #28]
 8009fb0:	e007      	b.n	8009fc2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d102      	bne.n	8009fc2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2208      	movs	r2, #8
 8009fc0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f7ff ff18 	bl	8009df8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	771a      	strb	r2, [r3, #28]
}
 8009fce:	bf00      	nop
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a42      	ldr	r2, [pc, #264]	@ (800a0f4 <TIM_Base_SetConfig+0x11c>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d00f      	beq.n	800a010 <TIM_Base_SetConfig+0x38>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ff6:	d00b      	beq.n	800a010 <TIM_Base_SetConfig+0x38>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a3f      	ldr	r2, [pc, #252]	@ (800a0f8 <TIM_Base_SetConfig+0x120>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d007      	beq.n	800a010 <TIM_Base_SetConfig+0x38>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a3e      	ldr	r2, [pc, #248]	@ (800a0fc <TIM_Base_SetConfig+0x124>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d003      	beq.n	800a010 <TIM_Base_SetConfig+0x38>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a3d      	ldr	r2, [pc, #244]	@ (800a100 <TIM_Base_SetConfig+0x128>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d108      	bne.n	800a022 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	4313      	orrs	r3, r2
 800a020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a33      	ldr	r2, [pc, #204]	@ (800a0f4 <TIM_Base_SetConfig+0x11c>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d01b      	beq.n	800a062 <TIM_Base_SetConfig+0x8a>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a030:	d017      	beq.n	800a062 <TIM_Base_SetConfig+0x8a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a30      	ldr	r2, [pc, #192]	@ (800a0f8 <TIM_Base_SetConfig+0x120>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d013      	beq.n	800a062 <TIM_Base_SetConfig+0x8a>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a2f      	ldr	r2, [pc, #188]	@ (800a0fc <TIM_Base_SetConfig+0x124>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d00f      	beq.n	800a062 <TIM_Base_SetConfig+0x8a>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a2e      	ldr	r2, [pc, #184]	@ (800a100 <TIM_Base_SetConfig+0x128>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00b      	beq.n	800a062 <TIM_Base_SetConfig+0x8a>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a2d      	ldr	r2, [pc, #180]	@ (800a104 <TIM_Base_SetConfig+0x12c>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d007      	beq.n	800a062 <TIM_Base_SetConfig+0x8a>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a2c      	ldr	r2, [pc, #176]	@ (800a108 <TIM_Base_SetConfig+0x130>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d003      	beq.n	800a062 <TIM_Base_SetConfig+0x8a>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a2b      	ldr	r2, [pc, #172]	@ (800a10c <TIM_Base_SetConfig+0x134>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d108      	bne.n	800a074 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	4313      	orrs	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	689a      	ldr	r2, [r3, #8]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a16      	ldr	r2, [pc, #88]	@ (800a0f4 <TIM_Base_SetConfig+0x11c>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d00f      	beq.n	800a0c0 <TIM_Base_SetConfig+0xe8>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a17      	ldr	r2, [pc, #92]	@ (800a100 <TIM_Base_SetConfig+0x128>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00b      	beq.n	800a0c0 <TIM_Base_SetConfig+0xe8>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a16      	ldr	r2, [pc, #88]	@ (800a104 <TIM_Base_SetConfig+0x12c>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d007      	beq.n	800a0c0 <TIM_Base_SetConfig+0xe8>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a15      	ldr	r2, [pc, #84]	@ (800a108 <TIM_Base_SetConfig+0x130>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d003      	beq.n	800a0c0 <TIM_Base_SetConfig+0xe8>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a14      	ldr	r2, [pc, #80]	@ (800a10c <TIM_Base_SetConfig+0x134>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d103      	bne.n	800a0c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d105      	bne.n	800a0e6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	f023 0201 	bic.w	r2, r3, #1
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	611a      	str	r2, [r3, #16]
  }
}
 800a0e6:	bf00      	nop
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	40012c00 	.word	0x40012c00
 800a0f8:	40000400 	.word	0x40000400
 800a0fc:	40000800 	.word	0x40000800
 800a100:	40013400 	.word	0x40013400
 800a104:	40014000 	.word	0x40014000
 800a108:	40014400 	.word	0x40014400
 800a10c:	40014800 	.word	0x40014800

0800a110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	f023 0201 	bic.w	r2, r3, #1
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a13e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0303 	bic.w	r3, r3, #3
 800a14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f023 0302 	bic.w	r3, r3, #2
 800a15c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	4313      	orrs	r3, r2
 800a166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a2c      	ldr	r2, [pc, #176]	@ (800a21c <TIM_OC1_SetConfig+0x10c>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d00f      	beq.n	800a190 <TIM_OC1_SetConfig+0x80>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a2b      	ldr	r2, [pc, #172]	@ (800a220 <TIM_OC1_SetConfig+0x110>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d00b      	beq.n	800a190 <TIM_OC1_SetConfig+0x80>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a2a      	ldr	r2, [pc, #168]	@ (800a224 <TIM_OC1_SetConfig+0x114>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d007      	beq.n	800a190 <TIM_OC1_SetConfig+0x80>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a29      	ldr	r2, [pc, #164]	@ (800a228 <TIM_OC1_SetConfig+0x118>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d003      	beq.n	800a190 <TIM_OC1_SetConfig+0x80>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a28      	ldr	r2, [pc, #160]	@ (800a22c <TIM_OC1_SetConfig+0x11c>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10c      	bne.n	800a1aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f023 0308 	bic.w	r3, r3, #8
 800a196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f023 0304 	bic.w	r3, r3, #4
 800a1a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a1b      	ldr	r2, [pc, #108]	@ (800a21c <TIM_OC1_SetConfig+0x10c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d00f      	beq.n	800a1d2 <TIM_OC1_SetConfig+0xc2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a1a      	ldr	r2, [pc, #104]	@ (800a220 <TIM_OC1_SetConfig+0x110>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d00b      	beq.n	800a1d2 <TIM_OC1_SetConfig+0xc2>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a19      	ldr	r2, [pc, #100]	@ (800a224 <TIM_OC1_SetConfig+0x114>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d007      	beq.n	800a1d2 <TIM_OC1_SetConfig+0xc2>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a18      	ldr	r2, [pc, #96]	@ (800a228 <TIM_OC1_SetConfig+0x118>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d003      	beq.n	800a1d2 <TIM_OC1_SetConfig+0xc2>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a17      	ldr	r2, [pc, #92]	@ (800a22c <TIM_OC1_SetConfig+0x11c>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d111      	bne.n	800a1f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	621a      	str	r2, [r3, #32]
}
 800a210:	bf00      	nop
 800a212:	371c      	adds	r7, #28
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	40012c00 	.word	0x40012c00
 800a220:	40013400 	.word	0x40013400
 800a224:	40014000 	.word	0x40014000
 800a228:	40014400 	.word	0x40014400
 800a22c:	40014800 	.word	0x40014800

0800a230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	f023 0210 	bic.w	r2, r3, #16
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a25e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	021b      	lsls	r3, r3, #8
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	4313      	orrs	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f023 0320 	bic.w	r3, r3, #32
 800a27e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	4313      	orrs	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a28      	ldr	r2, [pc, #160]	@ (800a330 <TIM_OC2_SetConfig+0x100>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d003      	beq.n	800a29c <TIM_OC2_SetConfig+0x6c>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a27      	ldr	r2, [pc, #156]	@ (800a334 <TIM_OC2_SetConfig+0x104>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d10d      	bne.n	800a2b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a1d      	ldr	r2, [pc, #116]	@ (800a330 <TIM_OC2_SetConfig+0x100>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d00f      	beq.n	800a2e0 <TIM_OC2_SetConfig+0xb0>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a1c      	ldr	r2, [pc, #112]	@ (800a334 <TIM_OC2_SetConfig+0x104>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d00b      	beq.n	800a2e0 <TIM_OC2_SetConfig+0xb0>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a1b      	ldr	r2, [pc, #108]	@ (800a338 <TIM_OC2_SetConfig+0x108>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d007      	beq.n	800a2e0 <TIM_OC2_SetConfig+0xb0>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a1a      	ldr	r2, [pc, #104]	@ (800a33c <TIM_OC2_SetConfig+0x10c>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d003      	beq.n	800a2e0 <TIM_OC2_SetConfig+0xb0>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a19      	ldr	r2, [pc, #100]	@ (800a340 <TIM_OC2_SetConfig+0x110>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d113      	bne.n	800a308 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a2e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a2ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	4313      	orrs	r3, r2
 800a306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	621a      	str	r2, [r3, #32]
}
 800a322:	bf00      	nop
 800a324:	371c      	adds	r7, #28
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	40012c00 	.word	0x40012c00
 800a334:	40013400 	.word	0x40013400
 800a338:	40014000 	.word	0x40014000
 800a33c:	40014400 	.word	0x40014400
 800a340:	40014800 	.word	0x40014800

0800a344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a1b      	ldr	r3, [r3, #32]
 800a358:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69db      	ldr	r3, [r3, #28]
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0303 	bic.w	r3, r3, #3
 800a37e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	4313      	orrs	r3, r2
 800a388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	021b      	lsls	r3, r3, #8
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a27      	ldr	r2, [pc, #156]	@ (800a440 <TIM_OC3_SetConfig+0xfc>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d003      	beq.n	800a3ae <TIM_OC3_SetConfig+0x6a>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a26      	ldr	r2, [pc, #152]	@ (800a444 <TIM_OC3_SetConfig+0x100>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d10d      	bne.n	800a3ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a3b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	021b      	lsls	r3, r3, #8
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a1c      	ldr	r2, [pc, #112]	@ (800a440 <TIM_OC3_SetConfig+0xfc>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d00f      	beq.n	800a3f2 <TIM_OC3_SetConfig+0xae>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a1b      	ldr	r2, [pc, #108]	@ (800a444 <TIM_OC3_SetConfig+0x100>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d00b      	beq.n	800a3f2 <TIM_OC3_SetConfig+0xae>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a1a      	ldr	r2, [pc, #104]	@ (800a448 <TIM_OC3_SetConfig+0x104>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d007      	beq.n	800a3f2 <TIM_OC3_SetConfig+0xae>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a19      	ldr	r2, [pc, #100]	@ (800a44c <TIM_OC3_SetConfig+0x108>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d003      	beq.n	800a3f2 <TIM_OC3_SetConfig+0xae>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a18      	ldr	r2, [pc, #96]	@ (800a450 <TIM_OC3_SetConfig+0x10c>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d113      	bne.n	800a41a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	695b      	ldr	r3, [r3, #20]
 800a406:	011b      	lsls	r3, r3, #4
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	4313      	orrs	r3, r2
 800a418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	621a      	str	r2, [r3, #32]
}
 800a434:	bf00      	nop
 800a436:	371c      	adds	r7, #28
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	40012c00 	.word	0x40012c00
 800a444:	40013400 	.word	0x40013400
 800a448:	40014000 	.word	0x40014000
 800a44c:	40014400 	.word	0x40014400
 800a450:	40014800 	.word	0x40014800

0800a454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	69db      	ldr	r3, [r3, #28]
 800a47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a48e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	021b      	lsls	r3, r3, #8
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	4313      	orrs	r3, r2
 800a49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a4a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	031b      	lsls	r3, r3, #12
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a28      	ldr	r2, [pc, #160]	@ (800a554 <TIM_OC4_SetConfig+0x100>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d003      	beq.n	800a4c0 <TIM_OC4_SetConfig+0x6c>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a27      	ldr	r2, [pc, #156]	@ (800a558 <TIM_OC4_SetConfig+0x104>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d10d      	bne.n	800a4dc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a4c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	031b      	lsls	r3, r3, #12
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a1d      	ldr	r2, [pc, #116]	@ (800a554 <TIM_OC4_SetConfig+0x100>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d00f      	beq.n	800a504 <TIM_OC4_SetConfig+0xb0>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a1c      	ldr	r2, [pc, #112]	@ (800a558 <TIM_OC4_SetConfig+0x104>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d00b      	beq.n	800a504 <TIM_OC4_SetConfig+0xb0>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a1b      	ldr	r2, [pc, #108]	@ (800a55c <TIM_OC4_SetConfig+0x108>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d007      	beq.n	800a504 <TIM_OC4_SetConfig+0xb0>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a1a      	ldr	r2, [pc, #104]	@ (800a560 <TIM_OC4_SetConfig+0x10c>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d003      	beq.n	800a504 <TIM_OC4_SetConfig+0xb0>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a19      	ldr	r2, [pc, #100]	@ (800a564 <TIM_OC4_SetConfig+0x110>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d113      	bne.n	800a52c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a50a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a512:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	019b      	lsls	r3, r3, #6
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	019b      	lsls	r3, r3, #6
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4313      	orrs	r3, r2
 800a52a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	621a      	str	r2, [r3, #32]
}
 800a546:	bf00      	nop
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	40012c00 	.word	0x40012c00
 800a558:	40013400 	.word	0x40013400
 800a55c:	40014000 	.word	0x40014000
 800a560:	40014400 	.word	0x40014400
 800a564:	40014800 	.word	0x40014800

0800a568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a5ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	041b      	lsls	r3, r3, #16
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a17      	ldr	r2, [pc, #92]	@ (800a61c <TIM_OC5_SetConfig+0xb4>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00f      	beq.n	800a5e2 <TIM_OC5_SetConfig+0x7a>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a16      	ldr	r2, [pc, #88]	@ (800a620 <TIM_OC5_SetConfig+0xb8>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00b      	beq.n	800a5e2 <TIM_OC5_SetConfig+0x7a>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a15      	ldr	r2, [pc, #84]	@ (800a624 <TIM_OC5_SetConfig+0xbc>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d007      	beq.n	800a5e2 <TIM_OC5_SetConfig+0x7a>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a14      	ldr	r2, [pc, #80]	@ (800a628 <TIM_OC5_SetConfig+0xc0>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d003      	beq.n	800a5e2 <TIM_OC5_SetConfig+0x7a>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a13      	ldr	r2, [pc, #76]	@ (800a62c <TIM_OC5_SetConfig+0xc4>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d109      	bne.n	800a5f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	021b      	lsls	r3, r3, #8
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	621a      	str	r2, [r3, #32]
}
 800a610:	bf00      	nop
 800a612:	371c      	adds	r7, #28
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	40012c00 	.word	0x40012c00
 800a620:	40013400 	.word	0x40013400
 800a624:	40014000 	.word	0x40014000
 800a628:	40014400 	.word	0x40014400
 800a62c:	40014800 	.word	0x40014800

0800a630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a1b      	ldr	r3, [r3, #32]
 800a644:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a65e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	021b      	lsls	r3, r3, #8
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	051b      	lsls	r3, r3, #20
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	4313      	orrs	r3, r2
 800a682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a18      	ldr	r2, [pc, #96]	@ (800a6e8 <TIM_OC6_SetConfig+0xb8>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d00f      	beq.n	800a6ac <TIM_OC6_SetConfig+0x7c>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a17      	ldr	r2, [pc, #92]	@ (800a6ec <TIM_OC6_SetConfig+0xbc>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d00b      	beq.n	800a6ac <TIM_OC6_SetConfig+0x7c>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a16      	ldr	r2, [pc, #88]	@ (800a6f0 <TIM_OC6_SetConfig+0xc0>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d007      	beq.n	800a6ac <TIM_OC6_SetConfig+0x7c>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a15      	ldr	r2, [pc, #84]	@ (800a6f4 <TIM_OC6_SetConfig+0xc4>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d003      	beq.n	800a6ac <TIM_OC6_SetConfig+0x7c>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a14      	ldr	r2, [pc, #80]	@ (800a6f8 <TIM_OC6_SetConfig+0xc8>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d109      	bne.n	800a6c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	029b      	lsls	r3, r3, #10
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	621a      	str	r2, [r3, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	40012c00 	.word	0x40012c00
 800a6ec:	40013400 	.word	0x40013400
 800a6f0:	40014000 	.word	0x40014000
 800a6f4:	40014400 	.word	0x40014400
 800a6f8:	40014800 	.word	0x40014800

0800a6fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0201 	bic.w	r2, r3, #1
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f023 030a 	bic.w	r3, r3, #10
 800a738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	621a      	str	r2, [r3, #32]
}
 800a74e:	bf00      	nop
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b087      	sub	sp, #28
 800a75e:	af00      	add	r7, sp, #0
 800a760:	60f8      	str	r0, [r7, #12]
 800a762:	60b9      	str	r1, [r7, #8]
 800a764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	f023 0210 	bic.w	r2, r3, #16
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	031b      	lsls	r3, r3, #12
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a796:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	621a      	str	r2, [r3, #32]
}
 800a7ae:	bf00      	nop
 800a7b0:	371c      	adds	r7, #28
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a7d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	f043 0307 	orr.w	r3, r3, #7
 800a7e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	609a      	str	r2, [r3, #8]
}
 800a7e8:	bf00      	nop
 800a7ea:	3714      	adds	r7, #20
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
 800a800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a80e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	021a      	lsls	r2, r3, #8
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	431a      	orrs	r2, r3
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	4313      	orrs	r3, r2
 800a820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	609a      	str	r2, [r3, #8]
}
 800a828:	bf00      	nop
 800a82a:	371c      	adds	r7, #28
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	f003 031f 	and.w	r3, r3, #31
 800a846:	2201      	movs	r2, #1
 800a848:	fa02 f303 	lsl.w	r3, r2, r3
 800a84c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a1a      	ldr	r2, [r3, #32]
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	43db      	mvns	r3, r3
 800a856:	401a      	ands	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6a1a      	ldr	r2, [r3, #32]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f003 031f 	and.w	r3, r3, #31
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	fa01 f303 	lsl.w	r3, r1, r3
 800a86c:	431a      	orrs	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	621a      	str	r2, [r3, #32]
}
 800a872:	bf00      	nop
 800a874:	371c      	adds	r7, #28
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
	...

0800a880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a890:	2b01      	cmp	r3, #1
 800a892:	d101      	bne.n	800a898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a894:	2302      	movs	r3, #2
 800a896:	e065      	b.n	800a964 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a2c      	ldr	r2, [pc, #176]	@ (800a970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d004      	beq.n	800a8cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a2b      	ldr	r2, [pc, #172]	@ (800a974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d108      	bne.n	800a8de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a8d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a8e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a1b      	ldr	r2, [pc, #108]	@ (800a970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d018      	beq.n	800a938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a90e:	d013      	beq.n	800a938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a18      	ldr	r2, [pc, #96]	@ (800a978 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d00e      	beq.n	800a938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a17      	ldr	r2, [pc, #92]	@ (800a97c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d009      	beq.n	800a938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a12      	ldr	r2, [pc, #72]	@ (800a974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d004      	beq.n	800a938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a13      	ldr	r2, [pc, #76]	@ (800a980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d10c      	bne.n	800a952 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a93e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	4313      	orrs	r3, r2
 800a948:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3714      	adds	r7, #20
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	40012c00 	.word	0x40012c00
 800a974:	40013400 	.word	0x40013400
 800a978:	40000400 	.word	0x40000400
 800a97c:	40000800 	.word	0x40000800
 800a980:	40014000 	.word	0x40014000

0800a984 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e042      	b.n	800aaa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d106      	bne.n	800aa3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7f9 fce1 	bl	80043fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2224      	movs	r2, #36	@ 0x24
 800aa3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f022 0201 	bic.w	r2, r2, #1
 800aa50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f001 f894 	bl	800bb88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fdc5 	bl	800b5f0 <UART_SetConfig>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e01b      	b.n	800aaa8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aa7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f042 0201 	orr.w	r2, r2, #1
 800aa9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f001 f913 	bl	800bccc <UART_CheckIdleState>
 800aaa6:	4603      	mov	r3, r0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08a      	sub	sp, #40	@ 0x28
 800aab4:	af02      	add	r7, sp, #8
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	4613      	mov	r3, r2
 800aabe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aac6:	2b20      	cmp	r3, #32
 800aac8:	d17b      	bne.n	800abc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <HAL_UART_Transmit+0x26>
 800aad0:	88fb      	ldrh	r3, [r7, #6]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e074      	b.n	800abc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2221      	movs	r2, #33	@ 0x21
 800aae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aaea:	f7f9 fe95 	bl	8004818 <HAL_GetTick>
 800aaee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	88fa      	ldrh	r2, [r7, #6]
 800aaf4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	88fa      	ldrh	r2, [r7, #6]
 800aafc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab08:	d108      	bne.n	800ab1c <HAL_UART_Transmit+0x6c>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d104      	bne.n	800ab1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	61bb      	str	r3, [r7, #24]
 800ab1a:	e003      	b.n	800ab24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab20:	2300      	movs	r3, #0
 800ab22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ab24:	e030      	b.n	800ab88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	2180      	movs	r1, #128	@ 0x80
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f001 f975 	bl	800be20 <UART_WaitOnFlagUntilTimeout>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d005      	beq.n	800ab48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e03d      	b.n	800abc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d10b      	bne.n	800ab66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	3302      	adds	r3, #2
 800ab62:	61bb      	str	r3, [r7, #24]
 800ab64:	e007      	b.n	800ab76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	781a      	ldrb	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	3301      	adds	r3, #1
 800ab74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1c8      	bne.n	800ab26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2140      	movs	r1, #64	@ 0x40
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f001 f93e 	bl	800be20 <UART_WaitOnFlagUntilTimeout>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d005      	beq.n	800abb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2220      	movs	r2, #32
 800abae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e006      	b.n	800abc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2220      	movs	r2, #32
 800abba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	e000      	b.n	800abc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800abc2:	2302      	movs	r3, #2
  }
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3720      	adds	r7, #32
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08a      	sub	sp, #40	@ 0x28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	4613      	mov	r3, r2
 800abd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d137      	bne.n	800ac54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <HAL_UART_Receive_IT+0x24>
 800abea:	88fb      	ldrh	r3, [r7, #6]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e030      	b.n	800ac56 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a18      	ldr	r2, [pc, #96]	@ (800ac60 <HAL_UART_Receive_IT+0x94>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d01f      	beq.n	800ac44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d018      	beq.n	800ac44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	e853 3f00 	ldrex	r3, [r3]
 800ac1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac26:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac30:	623b      	str	r3, [r7, #32]
 800ac32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac34:	69f9      	ldr	r1, [r7, #28]
 800ac36:	6a3a      	ldr	r2, [r7, #32]
 800ac38:	e841 2300 	strex	r3, r2, [r1]
 800ac3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1e6      	bne.n	800ac12 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac44:	88fb      	ldrh	r3, [r7, #6]
 800ac46:	461a      	mov	r2, r3
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f001 f956 	bl	800befc <UART_Start_Receive_IT>
 800ac50:	4603      	mov	r3, r0
 800ac52:	e000      	b.n	800ac56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac54:	2302      	movs	r3, #2
  }
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3728      	adds	r7, #40	@ 0x28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	40008000 	.word	0x40008000

0800ac64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08a      	sub	sp, #40	@ 0x28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d137      	bne.n	800acec <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <HAL_UART_Receive_DMA+0x24>
 800ac82:	88fb      	ldrh	r3, [r7, #6]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e030      	b.n	800acee <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a18      	ldr	r2, [pc, #96]	@ (800acf8 <HAL_UART_Receive_DMA+0x94>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d01f      	beq.n	800acdc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d018      	beq.n	800acdc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	613b      	str	r3, [r7, #16]
   return(result);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800acbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	623b      	str	r3, [r7, #32]
 800acca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	69f9      	ldr	r1, [r7, #28]
 800acce:	6a3a      	ldr	r2, [r7, #32]
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e6      	bne.n	800acaa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800acdc:	88fb      	ldrh	r3, [r7, #6]
 800acde:	461a      	mov	r2, r3
 800ace0:	68b9      	ldr	r1, [r7, #8]
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f001 fa2c 	bl	800c140 <UART_Start_Receive_DMA>
 800ace8:	4603      	mov	r3, r0
 800acea:	e000      	b.n	800acee <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800acec:	2302      	movs	r3, #2
  }
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3728      	adds	r7, #40	@ 0x28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	40008000 	.word	0x40008000

0800acfc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b0a0      	sub	sp, #128	@ 0x80
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ad12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad14:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800ad18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad22:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad24:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad26:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ad28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ad2a:	e841 2300 	strex	r3, r2, [r1]
 800ad2e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ad30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1e6      	bne.n	800ad04 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad40:	e853 3f00 	ldrex	r3, [r3]
 800ad44:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ad46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad48:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800ad4c:	f023 0301 	bic.w	r3, r3, #1
 800ad50:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3308      	adds	r3, #8
 800ad58:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ad5a:	657a      	str	r2, [r7, #84]	@ 0x54
 800ad5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ad60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ad62:	e841 2300 	strex	r3, r2, [r1]
 800ad66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ad68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e3      	bne.n	800ad36 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d118      	bne.n	800ada8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad86:	f023 0310 	bic.w	r3, r3, #16
 800ad8a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	461a      	mov	r2, r3
 800ad92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad94:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ada2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e6      	bne.n	800ad76 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adb2:	2b80      	cmp	r3, #128	@ 0x80
 800adb4:	d137      	bne.n	800ae26 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3308      	adds	r3, #8
 800adbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	6a3b      	ldr	r3, [r7, #32]
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	61fb      	str	r3, [r7, #28]
   return(result);
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adcc:	673b      	str	r3, [r7, #112]	@ 0x70
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3308      	adds	r3, #8
 800add4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800add6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800add8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800addc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ade4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e5      	bne.n	800adb6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d019      	beq.n	800ae26 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adf6:	2200      	movs	r2, #0
 800adf8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fb fbf1 	bl	80065e6 <HAL_DMA_Abort>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00d      	beq.n	800ae26 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fb fd58 	bl	80068c4 <HAL_DMA_GetError>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b20      	cmp	r3, #32
 800ae18:	d105      	bne.n	800ae26 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2210      	movs	r2, #16
 800ae1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ae22:	2303      	movs	r3, #3
 800ae24:	e073      	b.n	800af0e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae30:	2b40      	cmp	r3, #64	@ 0x40
 800ae32:	d13b      	bne.n	800aeac <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3308      	adds	r3, #8
 800ae3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	e853 3f00 	ldrex	r3, [r3]
 800ae42:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3308      	adds	r3, #8
 800ae52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae54:	61ba      	str	r2, [r7, #24]
 800ae56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae58:	6979      	ldr	r1, [r7, #20]
 800ae5a:	69ba      	ldr	r2, [r7, #24]
 800ae5c:	e841 2300 	strex	r3, r2, [r1]
 800ae60:	613b      	str	r3, [r7, #16]
   return(result);
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1e5      	bne.n	800ae34 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d01c      	beq.n	800aeac <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae78:	2200      	movs	r2, #0
 800ae7a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fb fbaf 	bl	80065e6 <HAL_DMA_Abort>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00e      	beq.n	800aeac <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fb fd15 	bl	80068c4 <HAL_DMA_GetError>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b20      	cmp	r3, #32
 800ae9e:	d105      	bne.n	800aeac <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2210      	movs	r2, #16
 800aea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e030      	b.n	800af0e <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	220f      	movs	r2, #15
 800aec2:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aecc:	d107      	bne.n	800aede <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	699a      	ldr	r2, [r3, #24]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f042 0210 	orr.w	r2, r2, #16
 800aedc:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	699a      	ldr	r2, [r3, #24]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f042 0208 	orr.w	r2, r2, #8
 800aeec:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2220      	movs	r2, #32
 800aef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3780      	adds	r7, #128	@ 0x80
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b0ba      	sub	sp, #232	@ 0xe8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800af42:	f640 030f 	movw	r3, #2063	@ 0x80f
 800af46:	4013      	ands	r3, r2
 800af48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800af4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af50:	2b00      	cmp	r3, #0
 800af52:	d11b      	bne.n	800af8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af58:	f003 0320 	and.w	r3, r3, #32
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d015      	beq.n	800af8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d105      	bne.n	800af78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af74:	2b00      	cmp	r3, #0
 800af76:	d009      	beq.n	800af8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 8300 	beq.w	800b582 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
      }
      return;
 800af8a:	e2fa      	b.n	800b582 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 8123 	beq.w	800b1dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800af9a:	4b8d      	ldr	r3, [pc, #564]	@ (800b1d0 <HAL_UART_IRQHandler+0x2b8>)
 800af9c:	4013      	ands	r3, r2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800afa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800afa6:	4b8b      	ldr	r3, [pc, #556]	@ (800b1d4 <HAL_UART_IRQHandler+0x2bc>)
 800afa8:	4013      	ands	r3, r2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 8116 	beq.w	800b1dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d011      	beq.n	800afe0 <HAL_UART_IRQHandler+0xc8>
 800afbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00b      	beq.n	800afe0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2201      	movs	r2, #1
 800afce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afd6:	f043 0201 	orr.w	r2, r3, #1
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afe4:	f003 0302 	and.w	r3, r3, #2
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d011      	beq.n	800b010 <HAL_UART_IRQHandler+0xf8>
 800afec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00b      	beq.n	800b010 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2202      	movs	r2, #2
 800affe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b006:	f043 0204 	orr.w	r2, r3, #4
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b014:	f003 0304 	and.w	r3, r3, #4
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d011      	beq.n	800b040 <HAL_UART_IRQHandler+0x128>
 800b01c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b020:	f003 0301 	and.w	r3, r3, #1
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00b      	beq.n	800b040 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2204      	movs	r2, #4
 800b02e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b036:	f043 0202 	orr.w	r2, r3, #2
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b044:	f003 0308 	and.w	r3, r3, #8
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d017      	beq.n	800b07c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b04c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b050:	f003 0320 	and.w	r3, r3, #32
 800b054:	2b00      	cmp	r3, #0
 800b056:	d105      	bne.n	800b064 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b058:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b05c:	4b5c      	ldr	r3, [pc, #368]	@ (800b1d0 <HAL_UART_IRQHandler+0x2b8>)
 800b05e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00b      	beq.n	800b07c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2208      	movs	r2, #8
 800b06a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b072:	f043 0208 	orr.w	r2, r3, #8
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b084:	2b00      	cmp	r3, #0
 800b086:	d012      	beq.n	800b0ae <HAL_UART_IRQHandler+0x196>
 800b088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b08c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00c      	beq.n	800b0ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b09c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a4:	f043 0220 	orr.w	r2, r3, #32
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 8266 	beq.w	800b586 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0be:	f003 0320 	and.w	r3, r3, #32
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d013      	beq.n	800b0ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0ca:	f003 0320 	and.w	r3, r3, #32
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d105      	bne.n	800b0de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d007      	beq.n	800b0ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d003      	beq.n	800b0ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b102:	2b40      	cmp	r3, #64	@ 0x40
 800b104:	d005      	beq.n	800b112 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b10a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d054      	beq.n	800b1bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 f8fb 	bl	800c30e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b122:	2b40      	cmp	r3, #64	@ 0x40
 800b124:	d146      	bne.n	800b1b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3308      	adds	r3, #8
 800b12c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b13c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b144:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	3308      	adds	r3, #8
 800b14e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b152:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b156:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b15e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b162:	e841 2300 	strex	r3, r2, [r1]
 800b166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1d9      	bne.n	800b126 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d017      	beq.n	800b1ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b182:	4a15      	ldr	r2, [pc, #84]	@ (800b1d8 <HAL_UART_IRQHandler+0x2c0>)
 800b184:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fb fa83 	bl	8006698 <HAL_DMA_Abort_IT>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d019      	beq.n	800b1cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b1a6:	4610      	mov	r0, r2
 800b1a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1aa:	e00f      	b.n	800b1cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fa09 	bl	800b5c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b2:	e00b      	b.n	800b1cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fa05 	bl	800b5c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ba:	e007      	b.n	800b1cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fa01 	bl	800b5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b1ca:	e1dc      	b.n	800b586 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1cc:	bf00      	nop
    return;
 800b1ce:	e1da      	b.n	800b586 <HAL_UART_IRQHandler+0x66e>
 800b1d0:	10000001 	.word	0x10000001
 800b1d4:	04000120 	.word	0x04000120
 800b1d8:	0800c5c5 	.word	0x0800c5c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	f040 8170 	bne.w	800b4c6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ea:	f003 0310 	and.w	r3, r3, #16
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 8169 	beq.w	800b4c6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1f8:	f003 0310 	and.w	r3, r3, #16
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8162 	beq.w	800b4c6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2210      	movs	r2, #16
 800b208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b214:	2b40      	cmp	r3, #64	@ 0x40
 800b216:	f040 80d8 	bne.w	800b3ca <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b228:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 80af 	beq.w	800b390 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b238:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b23c:	429a      	cmp	r2, r3
 800b23e:	f080 80a7 	bcs.w	800b390 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b248:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f040 8087 	bne.w	800b36e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b26c:	e853 3f00 	ldrex	r3, [r3]
 800b270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b27c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	461a      	mov	r2, r3
 800b286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b28a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b28e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b292:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b29a:	e841 2300 	strex	r3, r2, [r1]
 800b29e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b2a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1da      	bne.n	800b260 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2b4:	e853 3f00 	ldrex	r3, [r3]
 800b2b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b2ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b2bc:	f023 0301 	bic.w	r3, r3, #1
 800b2c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b2ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b2d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b2d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b2da:	e841 2300 	strex	r3, r2, [r1]
 800b2de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b2e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1e1      	bne.n	800b2aa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b2f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3308      	adds	r3, #8
 800b306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b30a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b30c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e3      	bne.n	800b2e6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2220      	movs	r2, #32
 800b322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b334:	e853 3f00 	ldrex	r3, [r3]
 800b338:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b33a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b33c:	f023 0310 	bic.w	r3, r3, #16
 800b340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	461a      	mov	r2, r3
 800b34a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b34e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b350:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b356:	e841 2300 	strex	r3, r2, [r1]
 800b35a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b35c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1e4      	bne.n	800b32c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fb f93c 	bl	80065e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2202      	movs	r2, #2
 800b372:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b380:	b29b      	uxth	r3, r3
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	b29b      	uxth	r3, r3
 800b386:	4619      	mov	r1, r3
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f925 	bl	800b5d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b38e:	e0fc      	b.n	800b58a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b39a:	429a      	cmp	r2, r3
 800b39c:	f040 80f5 	bne.w	800b58a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0320 	and.w	r3, r3, #32
 800b3ae:	2b20      	cmp	r3, #32
 800b3b0:	f040 80eb 	bne.w	800b58a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f908 	bl	800b5d8 <HAL_UARTEx_RxEventCallback>
      return;
 800b3c8:	e0df      	b.n	800b58a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 80d1 	beq.w	800b58e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b3ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 80cc 	beq.w	800b58e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fe:	e853 3f00 	ldrex	r3, [r3]
 800b402:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b40a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b418:	647b      	str	r3, [r7, #68]	@ 0x44
 800b41a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b41e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b420:	e841 2300 	strex	r3, r2, [r1]
 800b424:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1e4      	bne.n	800b3f6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3308      	adds	r3, #8
 800b432:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b436:	e853 3f00 	ldrex	r3, [r3]
 800b43a:	623b      	str	r3, [r7, #32]
   return(result);
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b442:	f023 0301 	bic.w	r3, r3, #1
 800b446:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3308      	adds	r3, #8
 800b450:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b454:	633a      	str	r2, [r7, #48]	@ 0x30
 800b456:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b45a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e1      	bne.n	800b42c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	60fb      	str	r3, [r7, #12]
   return(result);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f023 0310 	bic.w	r3, r3, #16
 800b490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	461a      	mov	r2, r3
 800b49a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b49e:	61fb      	str	r3, [r7, #28]
 800b4a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	69b9      	ldr	r1, [r7, #24]
 800b4a4:	69fa      	ldr	r2, [r7, #28]
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	617b      	str	r3, [r7, #20]
   return(result);
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e4      	bne.n	800b47c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2202      	movs	r2, #2
 800b4b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f88a 	bl	800b5d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4c4:	e063      	b.n	800b58e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b4c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00e      	beq.n	800b4f0 <HAL_UART_IRQHandler+0x5d8>
 800b4d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d008      	beq.n	800b4f0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b4e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 fdc9 	bl	800d080 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4ee:	e051      	b.n	800b594 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b4f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d014      	beq.n	800b526 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b504:	2b00      	cmp	r3, #0
 800b506:	d105      	bne.n	800b514 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b50c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b510:	2b00      	cmp	r3, #0
 800b512:	d008      	beq.n	800b526 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d03a      	beq.n	800b592 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	4798      	blx	r3
    }
    return;
 800b524:	e035      	b.n	800b592 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b52a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d009      	beq.n	800b546 <HAL_UART_IRQHandler+0x62e>
 800b532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f001 f852 	bl	800c5e8 <UART_EndTransmit_IT>
    return;
 800b544:	e026      	b.n	800b594 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b54a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d009      	beq.n	800b566 <HAL_UART_IRQHandler+0x64e>
 800b552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b556:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f001 fda2 	bl	800d0a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b564:	e016      	b.n	800b594 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b56a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d010      	beq.n	800b594 <HAL_UART_IRQHandler+0x67c>
 800b572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b576:	2b00      	cmp	r3, #0
 800b578:	da0c      	bge.n	800b594 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f001 fd8a 	bl	800d094 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b580:	e008      	b.n	800b594 <HAL_UART_IRQHandler+0x67c>
      return;
 800b582:	bf00      	nop
 800b584:	e006      	b.n	800b594 <HAL_UART_IRQHandler+0x67c>
    return;
 800b586:	bf00      	nop
 800b588:	e004      	b.n	800b594 <HAL_UART_IRQHandler+0x67c>
      return;
 800b58a:	bf00      	nop
 800b58c:	e002      	b.n	800b594 <HAL_UART_IRQHandler+0x67c>
      return;
 800b58e:	bf00      	nop
 800b590:	e000      	b.n	800b594 <HAL_UART_IRQHandler+0x67c>
    return;
 800b592:	bf00      	nop
  }
}
 800b594:	37e8      	adds	r7, #232	@ 0xe8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop

0800b59c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5f4:	b08c      	sub	sp, #48	@ 0x30
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	689a      	ldr	r2, [r3, #8]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	431a      	orrs	r2, r3
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	431a      	orrs	r2, r3
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	69db      	ldr	r3, [r3, #28]
 800b614:	4313      	orrs	r3, r2
 800b616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	4bab      	ldr	r3, [pc, #684]	@ (800b8cc <UART_SetConfig+0x2dc>)
 800b620:	4013      	ands	r3, r2
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	6812      	ldr	r2, [r2, #0]
 800b626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b628:	430b      	orrs	r3, r1
 800b62a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	68da      	ldr	r2, [r3, #12]
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	430a      	orrs	r2, r1
 800b640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4aa0      	ldr	r2, [pc, #640]	@ (800b8d0 <UART_SetConfig+0x2e0>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d004      	beq.n	800b65c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b658:	4313      	orrs	r3, r2
 800b65a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b666:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	6812      	ldr	r2, [r2, #0]
 800b66e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b670:	430b      	orrs	r3, r1
 800b672:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67a:	f023 010f 	bic.w	r1, r3, #15
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	430a      	orrs	r2, r1
 800b688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a91      	ldr	r2, [pc, #580]	@ (800b8d4 <UART_SetConfig+0x2e4>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d125      	bne.n	800b6e0 <UART_SetConfig+0xf0>
 800b694:	4b90      	ldr	r3, [pc, #576]	@ (800b8d8 <UART_SetConfig+0x2e8>)
 800b696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b69a:	f003 0303 	and.w	r3, r3, #3
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d81a      	bhi.n	800b6d8 <UART_SetConfig+0xe8>
 800b6a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6a8 <UART_SetConfig+0xb8>)
 800b6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a8:	0800b6b9 	.word	0x0800b6b9
 800b6ac:	0800b6c9 	.word	0x0800b6c9
 800b6b0:	0800b6c1 	.word	0x0800b6c1
 800b6b4:	0800b6d1 	.word	0x0800b6d1
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6be:	e0d6      	b.n	800b86e <UART_SetConfig+0x27e>
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6c6:	e0d2      	b.n	800b86e <UART_SetConfig+0x27e>
 800b6c8:	2304      	movs	r3, #4
 800b6ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6ce:	e0ce      	b.n	800b86e <UART_SetConfig+0x27e>
 800b6d0:	2308      	movs	r3, #8
 800b6d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6d6:	e0ca      	b.n	800b86e <UART_SetConfig+0x27e>
 800b6d8:	2310      	movs	r3, #16
 800b6da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b6de:	e0c6      	b.n	800b86e <UART_SetConfig+0x27e>
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a7d      	ldr	r2, [pc, #500]	@ (800b8dc <UART_SetConfig+0x2ec>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d138      	bne.n	800b75c <UART_SetConfig+0x16c>
 800b6ea:	4b7b      	ldr	r3, [pc, #492]	@ (800b8d8 <UART_SetConfig+0x2e8>)
 800b6ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6f0:	f003 030c 	and.w	r3, r3, #12
 800b6f4:	2b0c      	cmp	r3, #12
 800b6f6:	d82d      	bhi.n	800b754 <UART_SetConfig+0x164>
 800b6f8:	a201      	add	r2, pc, #4	@ (adr r2, 800b700 <UART_SetConfig+0x110>)
 800b6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fe:	bf00      	nop
 800b700:	0800b735 	.word	0x0800b735
 800b704:	0800b755 	.word	0x0800b755
 800b708:	0800b755 	.word	0x0800b755
 800b70c:	0800b755 	.word	0x0800b755
 800b710:	0800b745 	.word	0x0800b745
 800b714:	0800b755 	.word	0x0800b755
 800b718:	0800b755 	.word	0x0800b755
 800b71c:	0800b755 	.word	0x0800b755
 800b720:	0800b73d 	.word	0x0800b73d
 800b724:	0800b755 	.word	0x0800b755
 800b728:	0800b755 	.word	0x0800b755
 800b72c:	0800b755 	.word	0x0800b755
 800b730:	0800b74d 	.word	0x0800b74d
 800b734:	2300      	movs	r3, #0
 800b736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b73a:	e098      	b.n	800b86e <UART_SetConfig+0x27e>
 800b73c:	2302      	movs	r3, #2
 800b73e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b742:	e094      	b.n	800b86e <UART_SetConfig+0x27e>
 800b744:	2304      	movs	r3, #4
 800b746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b74a:	e090      	b.n	800b86e <UART_SetConfig+0x27e>
 800b74c:	2308      	movs	r3, #8
 800b74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b752:	e08c      	b.n	800b86e <UART_SetConfig+0x27e>
 800b754:	2310      	movs	r3, #16
 800b756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b75a:	e088      	b.n	800b86e <UART_SetConfig+0x27e>
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a5f      	ldr	r2, [pc, #380]	@ (800b8e0 <UART_SetConfig+0x2f0>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d125      	bne.n	800b7b2 <UART_SetConfig+0x1c2>
 800b766:	4b5c      	ldr	r3, [pc, #368]	@ (800b8d8 <UART_SetConfig+0x2e8>)
 800b768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b76c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b770:	2b30      	cmp	r3, #48	@ 0x30
 800b772:	d016      	beq.n	800b7a2 <UART_SetConfig+0x1b2>
 800b774:	2b30      	cmp	r3, #48	@ 0x30
 800b776:	d818      	bhi.n	800b7aa <UART_SetConfig+0x1ba>
 800b778:	2b20      	cmp	r3, #32
 800b77a:	d00a      	beq.n	800b792 <UART_SetConfig+0x1a2>
 800b77c:	2b20      	cmp	r3, #32
 800b77e:	d814      	bhi.n	800b7aa <UART_SetConfig+0x1ba>
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <UART_SetConfig+0x19a>
 800b784:	2b10      	cmp	r3, #16
 800b786:	d008      	beq.n	800b79a <UART_SetConfig+0x1aa>
 800b788:	e00f      	b.n	800b7aa <UART_SetConfig+0x1ba>
 800b78a:	2300      	movs	r3, #0
 800b78c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b790:	e06d      	b.n	800b86e <UART_SetConfig+0x27e>
 800b792:	2302      	movs	r3, #2
 800b794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b798:	e069      	b.n	800b86e <UART_SetConfig+0x27e>
 800b79a:	2304      	movs	r3, #4
 800b79c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7a0:	e065      	b.n	800b86e <UART_SetConfig+0x27e>
 800b7a2:	2308      	movs	r3, #8
 800b7a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7a8:	e061      	b.n	800b86e <UART_SetConfig+0x27e>
 800b7aa:	2310      	movs	r3, #16
 800b7ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7b0:	e05d      	b.n	800b86e <UART_SetConfig+0x27e>
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a4b      	ldr	r2, [pc, #300]	@ (800b8e4 <UART_SetConfig+0x2f4>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d125      	bne.n	800b808 <UART_SetConfig+0x218>
 800b7bc:	4b46      	ldr	r3, [pc, #280]	@ (800b8d8 <UART_SetConfig+0x2e8>)
 800b7be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b7c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7c8:	d016      	beq.n	800b7f8 <UART_SetConfig+0x208>
 800b7ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800b7cc:	d818      	bhi.n	800b800 <UART_SetConfig+0x210>
 800b7ce:	2b80      	cmp	r3, #128	@ 0x80
 800b7d0:	d00a      	beq.n	800b7e8 <UART_SetConfig+0x1f8>
 800b7d2:	2b80      	cmp	r3, #128	@ 0x80
 800b7d4:	d814      	bhi.n	800b800 <UART_SetConfig+0x210>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <UART_SetConfig+0x1f0>
 800b7da:	2b40      	cmp	r3, #64	@ 0x40
 800b7dc:	d008      	beq.n	800b7f0 <UART_SetConfig+0x200>
 800b7de:	e00f      	b.n	800b800 <UART_SetConfig+0x210>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7e6:	e042      	b.n	800b86e <UART_SetConfig+0x27e>
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7ee:	e03e      	b.n	800b86e <UART_SetConfig+0x27e>
 800b7f0:	2304      	movs	r3, #4
 800b7f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7f6:	e03a      	b.n	800b86e <UART_SetConfig+0x27e>
 800b7f8:	2308      	movs	r3, #8
 800b7fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7fe:	e036      	b.n	800b86e <UART_SetConfig+0x27e>
 800b800:	2310      	movs	r3, #16
 800b802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b806:	e032      	b.n	800b86e <UART_SetConfig+0x27e>
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a30      	ldr	r2, [pc, #192]	@ (800b8d0 <UART_SetConfig+0x2e0>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d12a      	bne.n	800b868 <UART_SetConfig+0x278>
 800b812:	4b31      	ldr	r3, [pc, #196]	@ (800b8d8 <UART_SetConfig+0x2e8>)
 800b814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b818:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b81c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b820:	d01a      	beq.n	800b858 <UART_SetConfig+0x268>
 800b822:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b826:	d81b      	bhi.n	800b860 <UART_SetConfig+0x270>
 800b828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b82c:	d00c      	beq.n	800b848 <UART_SetConfig+0x258>
 800b82e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b832:	d815      	bhi.n	800b860 <UART_SetConfig+0x270>
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <UART_SetConfig+0x250>
 800b838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b83c:	d008      	beq.n	800b850 <UART_SetConfig+0x260>
 800b83e:	e00f      	b.n	800b860 <UART_SetConfig+0x270>
 800b840:	2300      	movs	r3, #0
 800b842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b846:	e012      	b.n	800b86e <UART_SetConfig+0x27e>
 800b848:	2302      	movs	r3, #2
 800b84a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b84e:	e00e      	b.n	800b86e <UART_SetConfig+0x27e>
 800b850:	2304      	movs	r3, #4
 800b852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b856:	e00a      	b.n	800b86e <UART_SetConfig+0x27e>
 800b858:	2308      	movs	r3, #8
 800b85a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b85e:	e006      	b.n	800b86e <UART_SetConfig+0x27e>
 800b860:	2310      	movs	r3, #16
 800b862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b866:	e002      	b.n	800b86e <UART_SetConfig+0x27e>
 800b868:	2310      	movs	r3, #16
 800b86a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a17      	ldr	r2, [pc, #92]	@ (800b8d0 <UART_SetConfig+0x2e0>)
 800b874:	4293      	cmp	r3, r2
 800b876:	f040 80a8 	bne.w	800b9ca <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b87a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b87e:	2b08      	cmp	r3, #8
 800b880:	d834      	bhi.n	800b8ec <UART_SetConfig+0x2fc>
 800b882:	a201      	add	r2, pc, #4	@ (adr r2, 800b888 <UART_SetConfig+0x298>)
 800b884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b888:	0800b8ad 	.word	0x0800b8ad
 800b88c:	0800b8ed 	.word	0x0800b8ed
 800b890:	0800b8b5 	.word	0x0800b8b5
 800b894:	0800b8ed 	.word	0x0800b8ed
 800b898:	0800b8bb 	.word	0x0800b8bb
 800b89c:	0800b8ed 	.word	0x0800b8ed
 800b8a0:	0800b8ed 	.word	0x0800b8ed
 800b8a4:	0800b8ed 	.word	0x0800b8ed
 800b8a8:	0800b8c3 	.word	0x0800b8c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8ac:	f7fc fe2c 	bl	8008508 <HAL_RCC_GetPCLK1Freq>
 800b8b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b8b2:	e021      	b.n	800b8f8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e8 <UART_SetConfig+0x2f8>)
 800b8b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b8b8:	e01e      	b.n	800b8f8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8ba:	f7fc fdb9 	bl	8008430 <HAL_RCC_GetSysClockFreq>
 800b8be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b8c0:	e01a      	b.n	800b8f8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b8c8:	e016      	b.n	800b8f8 <UART_SetConfig+0x308>
 800b8ca:	bf00      	nop
 800b8cc:	cfff69f3 	.word	0xcfff69f3
 800b8d0:	40008000 	.word	0x40008000
 800b8d4:	40013800 	.word	0x40013800
 800b8d8:	40021000 	.word	0x40021000
 800b8dc:	40004400 	.word	0x40004400
 800b8e0:	40004800 	.word	0x40004800
 800b8e4:	40004c00 	.word	0x40004c00
 800b8e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b8f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f000 812a 	beq.w	800bb54 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b904:	4a9e      	ldr	r2, [pc, #632]	@ (800bb80 <UART_SetConfig+0x590>)
 800b906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b90a:	461a      	mov	r2, r3
 800b90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b912:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	4613      	mov	r3, r2
 800b91a:	005b      	lsls	r3, r3, #1
 800b91c:	4413      	add	r3, r2
 800b91e:	69ba      	ldr	r2, [r7, #24]
 800b920:	429a      	cmp	r2, r3
 800b922:	d305      	bcc.n	800b930 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b92a:	69ba      	ldr	r2, [r7, #24]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d903      	bls.n	800b938 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b936:	e10d      	b.n	800bb54 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93a:	2200      	movs	r2, #0
 800b93c:	60bb      	str	r3, [r7, #8]
 800b93e:	60fa      	str	r2, [r7, #12]
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b944:	4a8e      	ldr	r2, [pc, #568]	@ (800bb80 <UART_SetConfig+0x590>)
 800b946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	2200      	movs	r2, #0
 800b94e:	603b      	str	r3, [r7, #0]
 800b950:	607a      	str	r2, [r7, #4]
 800b952:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b95a:	f7f5 f9bd 	bl	8000cd8 <__aeabi_uldivmod>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	4610      	mov	r0, r2
 800b964:	4619      	mov	r1, r3
 800b966:	f04f 0200 	mov.w	r2, #0
 800b96a:	f04f 0300 	mov.w	r3, #0
 800b96e:	020b      	lsls	r3, r1, #8
 800b970:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b974:	0202      	lsls	r2, r0, #8
 800b976:	6979      	ldr	r1, [r7, #20]
 800b978:	6849      	ldr	r1, [r1, #4]
 800b97a:	0849      	lsrs	r1, r1, #1
 800b97c:	2000      	movs	r0, #0
 800b97e:	460c      	mov	r4, r1
 800b980:	4605      	mov	r5, r0
 800b982:	eb12 0804 	adds.w	r8, r2, r4
 800b986:	eb43 0905 	adc.w	r9, r3, r5
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	469a      	mov	sl, r3
 800b992:	4693      	mov	fp, r2
 800b994:	4652      	mov	r2, sl
 800b996:	465b      	mov	r3, fp
 800b998:	4640      	mov	r0, r8
 800b99a:	4649      	mov	r1, r9
 800b99c:	f7f5 f99c 	bl	8000cd8 <__aeabi_uldivmod>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9a8:	6a3b      	ldr	r3, [r7, #32]
 800b9aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9ae:	d308      	bcc.n	800b9c2 <UART_SetConfig+0x3d2>
 800b9b0:	6a3b      	ldr	r3, [r7, #32]
 800b9b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9b6:	d204      	bcs.n	800b9c2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6a3a      	ldr	r2, [r7, #32]
 800b9be:	60da      	str	r2, [r3, #12]
 800b9c0:	e0c8      	b.n	800bb54 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b9c8:	e0c4      	b.n	800bb54 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9d2:	d167      	bne.n	800baa4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b9d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9d8:	2b08      	cmp	r3, #8
 800b9da:	d828      	bhi.n	800ba2e <UART_SetConfig+0x43e>
 800b9dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b9e4 <UART_SetConfig+0x3f4>)
 800b9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e2:	bf00      	nop
 800b9e4:	0800ba09 	.word	0x0800ba09
 800b9e8:	0800ba11 	.word	0x0800ba11
 800b9ec:	0800ba19 	.word	0x0800ba19
 800b9f0:	0800ba2f 	.word	0x0800ba2f
 800b9f4:	0800ba1f 	.word	0x0800ba1f
 800b9f8:	0800ba2f 	.word	0x0800ba2f
 800b9fc:	0800ba2f 	.word	0x0800ba2f
 800ba00:	0800ba2f 	.word	0x0800ba2f
 800ba04:	0800ba27 	.word	0x0800ba27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba08:	f7fc fd7e 	bl	8008508 <HAL_RCC_GetPCLK1Freq>
 800ba0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba0e:	e014      	b.n	800ba3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba10:	f7fc fd90 	bl	8008534 <HAL_RCC_GetPCLK2Freq>
 800ba14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba16:	e010      	b.n	800ba3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba18:	4b5a      	ldr	r3, [pc, #360]	@ (800bb84 <UART_SetConfig+0x594>)
 800ba1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba1c:	e00d      	b.n	800ba3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba1e:	f7fc fd07 	bl	8008430 <HAL_RCC_GetSysClockFreq>
 800ba22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ba24:	e009      	b.n	800ba3a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ba2c:	e005      	b.n	800ba3a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ba38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 8089 	beq.w	800bb54 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba46:	4a4e      	ldr	r2, [pc, #312]	@ (800bb80 <UART_SetConfig+0x590>)
 800ba48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba54:	005a      	lsls	r2, r3, #1
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	085b      	lsrs	r3, r3, #1
 800ba5c:	441a      	add	r2, r3
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba68:	6a3b      	ldr	r3, [r7, #32]
 800ba6a:	2b0f      	cmp	r3, #15
 800ba6c:	d916      	bls.n	800ba9c <UART_SetConfig+0x4ac>
 800ba6e:	6a3b      	ldr	r3, [r7, #32]
 800ba70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba74:	d212      	bcs.n	800ba9c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	f023 030f 	bic.w	r3, r3, #15
 800ba7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba80:	6a3b      	ldr	r3, [r7, #32]
 800ba82:	085b      	lsrs	r3, r3, #1
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	f003 0307 	and.w	r3, r3, #7
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	8bfb      	ldrh	r3, [r7, #30]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	8bfa      	ldrh	r2, [r7, #30]
 800ba98:	60da      	str	r2, [r3, #12]
 800ba9a:	e05b      	b.n	800bb54 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800baa2:	e057      	b.n	800bb54 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800baa4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800baa8:	2b08      	cmp	r3, #8
 800baaa:	d828      	bhi.n	800bafe <UART_SetConfig+0x50e>
 800baac:	a201      	add	r2, pc, #4	@ (adr r2, 800bab4 <UART_SetConfig+0x4c4>)
 800baae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab2:	bf00      	nop
 800bab4:	0800bad9 	.word	0x0800bad9
 800bab8:	0800bae1 	.word	0x0800bae1
 800babc:	0800bae9 	.word	0x0800bae9
 800bac0:	0800baff 	.word	0x0800baff
 800bac4:	0800baef 	.word	0x0800baef
 800bac8:	0800baff 	.word	0x0800baff
 800bacc:	0800baff 	.word	0x0800baff
 800bad0:	0800baff 	.word	0x0800baff
 800bad4:	0800baf7 	.word	0x0800baf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bad8:	f7fc fd16 	bl	8008508 <HAL_RCC_GetPCLK1Freq>
 800badc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bade:	e014      	b.n	800bb0a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bae0:	f7fc fd28 	bl	8008534 <HAL_RCC_GetPCLK2Freq>
 800bae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bae6:	e010      	b.n	800bb0a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bae8:	4b26      	ldr	r3, [pc, #152]	@ (800bb84 <UART_SetConfig+0x594>)
 800baea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800baec:	e00d      	b.n	800bb0a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800baee:	f7fc fc9f 	bl	8008430 <HAL_RCC_GetSysClockFreq>
 800baf2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800baf4:	e009      	b.n	800bb0a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800baf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bafa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bafc:	e005      	b.n	800bb0a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb08:	bf00      	nop
    }

    if (pclk != 0U)
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d021      	beq.n	800bb54 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb14:	4a1a      	ldr	r2, [pc, #104]	@ (800bb80 <UART_SetConfig+0x590>)
 800bb16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	085b      	lsrs	r3, r3, #1
 800bb28:	441a      	add	r2, r3
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	2b0f      	cmp	r3, #15
 800bb38:	d909      	bls.n	800bb4e <UART_SetConfig+0x55e>
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb40:	d205      	bcs.n	800bb4e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60da      	str	r2, [r3, #12]
 800bb4c:	e002      	b.n	800bb54 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2200      	movs	r2, #0
 800bb68:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bb70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3730      	adds	r7, #48	@ 0x30
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb7e:	bf00      	nop
 800bb80:	08015348 	.word	0x08015348
 800bb84:	00f42400 	.word	0x00f42400

0800bb88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb94:	f003 0308 	and.w	r3, r3, #8
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00a      	beq.n	800bbb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb6:	f003 0301 	and.w	r3, r3, #1
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00a      	beq.n	800bbd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd8:	f003 0302 	and.w	r3, r3, #2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00a      	beq.n	800bbf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbfa:	f003 0304 	and.w	r3, r3, #4
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00a      	beq.n	800bc18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	430a      	orrs	r2, r1
 800bc16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc1c:	f003 0310 	and.w	r3, r3, #16
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00a      	beq.n	800bc3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	430a      	orrs	r2, r1
 800bc38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc3e:	f003 0320 	and.w	r3, r3, #32
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00a      	beq.n	800bc5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d01a      	beq.n	800bc9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	430a      	orrs	r2, r1
 800bc7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc86:	d10a      	bne.n	800bc9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	430a      	orrs	r2, r1
 800bc9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	605a      	str	r2, [r3, #4]
  }
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b098      	sub	sp, #96	@ 0x60
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bcdc:	f7f8 fd9c 	bl	8004818 <HAL_GetTick>
 800bce0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 0308 	and.w	r3, r3, #8
 800bcec:	2b08      	cmp	r3, #8
 800bcee:	d12f      	bne.n	800bd50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcf0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f88e 	bl	800be20 <UART_WaitOnFlagUntilTimeout>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d022      	beq.n	800bd50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd12:	e853 3f00 	ldrex	r3, [r3]
 800bd16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	461a      	mov	r2, r3
 800bd26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd28:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd30:	e841 2300 	strex	r3, r2, [r1]
 800bd34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e6      	bne.n	800bd0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	e063      	b.n	800be18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 0304 	and.w	r3, r3, #4
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d149      	bne.n	800bdf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd66:	2200      	movs	r2, #0
 800bd68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 f857 	bl	800be20 <UART_WaitOnFlagUntilTimeout>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d03c      	beq.n	800bdf2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd80:	e853 3f00 	ldrex	r3, [r3]
 800bd84:	623b      	str	r3, [r7, #32]
   return(result);
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	461a      	mov	r2, r3
 800bd94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd96:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd9e:	e841 2300 	strex	r3, r2, [r1]
 800bda2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1e6      	bne.n	800bd78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3308      	adds	r3, #8
 800bdb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	e853 3f00 	ldrex	r3, [r3]
 800bdb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f023 0301 	bic.w	r3, r3, #1
 800bdc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdca:	61fa      	str	r2, [r7, #28]
 800bdcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdce:	69b9      	ldr	r1, [r7, #24]
 800bdd0:	69fa      	ldr	r2, [r7, #28]
 800bdd2:	e841 2300 	strex	r3, r2, [r1]
 800bdd6:	617b      	str	r3, [r7, #20]
   return(result);
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1e5      	bne.n	800bdaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2220      	movs	r2, #32
 800bde2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e012      	b.n	800be18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3758      	adds	r7, #88	@ 0x58
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	603b      	str	r3, [r7, #0]
 800be2c:	4613      	mov	r3, r2
 800be2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be30:	e04f      	b.n	800bed2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be38:	d04b      	beq.n	800bed2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be3a:	f7f8 fced 	bl	8004818 <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	69ba      	ldr	r2, [r7, #24]
 800be46:	429a      	cmp	r2, r3
 800be48:	d302      	bcc.n	800be50 <UART_WaitOnFlagUntilTimeout+0x30>
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e04e      	b.n	800bef2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0304 	and.w	r3, r3, #4
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d037      	beq.n	800bed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2b80      	cmp	r3, #128	@ 0x80
 800be66:	d034      	beq.n	800bed2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	2b40      	cmp	r3, #64	@ 0x40
 800be6c:	d031      	beq.n	800bed2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	69db      	ldr	r3, [r3, #28]
 800be74:	f003 0308 	and.w	r3, r3, #8
 800be78:	2b08      	cmp	r3, #8
 800be7a:	d110      	bne.n	800be9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2208      	movs	r2, #8
 800be82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f000 fa42 	bl	800c30e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2208      	movs	r2, #8
 800be8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e029      	b.n	800bef2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	69db      	ldr	r3, [r3, #28]
 800bea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800beac:	d111      	bne.n	800bed2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800beb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f000 fa28 	bl	800c30e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2220      	movs	r2, #32
 800bec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bece:	2303      	movs	r3, #3
 800bed0:	e00f      	b.n	800bef2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69da      	ldr	r2, [r3, #28]
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	4013      	ands	r3, r2
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	429a      	cmp	r2, r3
 800bee0:	bf0c      	ite	eq
 800bee2:	2301      	moveq	r3, #1
 800bee4:	2300      	movne	r3, #0
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	461a      	mov	r2, r3
 800beea:	79fb      	ldrb	r3, [r7, #7]
 800beec:	429a      	cmp	r2, r3
 800beee:	d0a0      	beq.n	800be32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
	...

0800befc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800befc:	b480      	push	{r7}
 800befe:	b0a3      	sub	sp, #140	@ 0x8c
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	4613      	mov	r3, r2
 800bf08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	88fa      	ldrh	r2, [r7, #6]
 800bf14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	88fa      	ldrh	r2, [r7, #6]
 800bf1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf2e:	d10e      	bne.n	800bf4e <UART_Start_Receive_IT+0x52>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d105      	bne.n	800bf44 <UART_Start_Receive_IT+0x48>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bf3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bf42:	e02d      	b.n	800bfa0 <UART_Start_Receive_IT+0xa4>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	22ff      	movs	r2, #255	@ 0xff
 800bf48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bf4c:	e028      	b.n	800bfa0 <UART_Start_Receive_IT+0xa4>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10d      	bne.n	800bf72 <UART_Start_Receive_IT+0x76>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d104      	bne.n	800bf68 <UART_Start_Receive_IT+0x6c>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	22ff      	movs	r2, #255	@ 0xff
 800bf62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bf66:	e01b      	b.n	800bfa0 <UART_Start_Receive_IT+0xa4>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	227f      	movs	r2, #127	@ 0x7f
 800bf6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bf70:	e016      	b.n	800bfa0 <UART_Start_Receive_IT+0xa4>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf7a:	d10d      	bne.n	800bf98 <UART_Start_Receive_IT+0x9c>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d104      	bne.n	800bf8e <UART_Start_Receive_IT+0x92>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	227f      	movs	r2, #127	@ 0x7f
 800bf88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bf8c:	e008      	b.n	800bfa0 <UART_Start_Receive_IT+0xa4>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	223f      	movs	r2, #63	@ 0x3f
 800bf92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bf96:	e003      	b.n	800bfa0 <UART_Start_Receive_IT+0xa4>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2222      	movs	r2, #34	@ 0x22
 800bfac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	3308      	adds	r3, #8
 800bfb6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bfba:	e853 3f00 	ldrex	r3, [r3]
 800bfbe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bfc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfc2:	f043 0301 	orr.w	r3, r3, #1
 800bfc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	3308      	adds	r3, #8
 800bfd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bfd4:	673a      	str	r2, [r7, #112]	@ 0x70
 800bfd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bfda:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800bfe2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e3      	bne.n	800bfb0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bff0:	d14f      	bne.n	800c092 <UART_Start_Receive_IT+0x196>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bff8:	88fa      	ldrh	r2, [r7, #6]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d349      	bcc.n	800c092 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c006:	d107      	bne.n	800c018 <UART_Start_Receive_IT+0x11c>
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d103      	bne.n	800c018 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	4a47      	ldr	r2, [pc, #284]	@ (800c130 <UART_Start_Receive_IT+0x234>)
 800c014:	675a      	str	r2, [r3, #116]	@ 0x74
 800c016:	e002      	b.n	800c01e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	4a46      	ldr	r2, [pc, #280]	@ (800c134 <UART_Start_Receive_IT+0x238>)
 800c01c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d01a      	beq.n	800c05c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c02e:	e853 3f00 	ldrex	r3, [r3]
 800c032:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c03a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c048:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c04a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c04e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c050:	e841 2300 	strex	r3, r2, [r1]
 800c054:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e4      	bne.n	800c026 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	3308      	adds	r3, #8
 800c062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c066:	e853 3f00 	ldrex	r3, [r3]
 800c06a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c06e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c072:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3308      	adds	r3, #8
 800c07a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c07c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c07e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c080:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c084:	e841 2300 	strex	r3, r2, [r1]
 800c088:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c08a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e5      	bne.n	800c05c <UART_Start_Receive_IT+0x160>
 800c090:	e046      	b.n	800c120 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c09a:	d107      	bne.n	800c0ac <UART_Start_Receive_IT+0x1b0>
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d103      	bne.n	800c0ac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4a24      	ldr	r2, [pc, #144]	@ (800c138 <UART_Start_Receive_IT+0x23c>)
 800c0a8:	675a      	str	r2, [r3, #116]	@ 0x74
 800c0aa:	e002      	b.n	800c0b2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4a23      	ldr	r2, [pc, #140]	@ (800c13c <UART_Start_Receive_IT+0x240>)
 800c0b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d019      	beq.n	800c0ee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c2:	e853 3f00 	ldrex	r3, [r3]
 800c0c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ca:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c0ce:	677b      	str	r3, [r7, #116]	@ 0x74
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0da:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c0de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0e0:	e841 2300 	strex	r3, r2, [r1]
 800c0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1e6      	bne.n	800c0ba <UART_Start_Receive_IT+0x1be>
 800c0ec:	e018      	b.n	800c120 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	e853 3f00 	ldrex	r3, [r3]
 800c0fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	f043 0320 	orr.w	r3, r3, #32
 800c102:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	461a      	mov	r2, r3
 800c10a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c10c:	623b      	str	r3, [r7, #32]
 800c10e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c110:	69f9      	ldr	r1, [r7, #28]
 800c112:	6a3a      	ldr	r2, [r7, #32]
 800c114:	e841 2300 	strex	r3, r2, [r1]
 800c118:	61bb      	str	r3, [r7, #24]
   return(result);
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1e6      	bne.n	800c0ee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	378c      	adds	r7, #140	@ 0x8c
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	0800cd15 	.word	0x0800cd15
 800c134:	0800c9b1 	.word	0x0800c9b1
 800c138:	0800c7f9 	.word	0x0800c7f9
 800c13c:	0800c641 	.word	0x0800c641

0800c140 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b096      	sub	sp, #88	@ 0x58
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	4613      	mov	r3, r2
 800c14c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	88fa      	ldrh	r2, [r7, #6]
 800c158:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2222      	movs	r2, #34	@ 0x22
 800c168:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c172:	2b00      	cmp	r3, #0
 800c174:	d02d      	beq.n	800c1d2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c17c:	4a40      	ldr	r2, [pc, #256]	@ (800c280 <UART_Start_Receive_DMA+0x140>)
 800c17e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c186:	4a3f      	ldr	r2, [pc, #252]	@ (800c284 <UART_Start_Receive_DMA+0x144>)
 800c188:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c190:	4a3d      	ldr	r2, [pc, #244]	@ (800c288 <UART_Start_Receive_DMA+0x148>)
 800c192:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c19a:	2200      	movs	r2, #0
 800c19c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	3324      	adds	r3, #36	@ 0x24
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	88fb      	ldrh	r3, [r7, #6]
 800c1b4:	f7fa f99c 	bl	80064f0 <HAL_DMA_Start_IT>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d009      	beq.n	800c1d2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2210      	movs	r2, #16
 800c1c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e051      	b.n	800c276 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d018      	beq.n	800c20c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1e2:	e853 3f00 	ldrex	r3, [r3]
 800c1e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1fa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c1fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c200:	e841 2300 	strex	r3, r2, [r1]
 800c204:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1e6      	bne.n	800c1da <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	3308      	adds	r3, #8
 800c212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c216:	e853 3f00 	ldrex	r3, [r3]
 800c21a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	f043 0301 	orr.w	r3, r3, #1
 800c222:	653b      	str	r3, [r7, #80]	@ 0x50
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3308      	adds	r3, #8
 800c22a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c22c:	637a      	str	r2, [r7, #52]	@ 0x34
 800c22e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c230:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c234:	e841 2300 	strex	r3, r2, [r1]
 800c238:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1e5      	bne.n	800c20c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3308      	adds	r3, #8
 800c246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	e853 3f00 	ldrex	r3, [r3]
 800c24e:	613b      	str	r3, [r7, #16]
   return(result);
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3308      	adds	r3, #8
 800c25e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c260:	623a      	str	r2, [r7, #32]
 800c262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c264:	69f9      	ldr	r1, [r7, #28]
 800c266:	6a3a      	ldr	r2, [r7, #32]
 800c268:	e841 2300 	strex	r3, r2, [r1]
 800c26c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1e5      	bne.n	800c240 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3758      	adds	r7, #88	@ 0x58
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	0800c3db 	.word	0x0800c3db
 800c284:	0800c507 	.word	0x0800c507
 800c288:	0800c545 	.word	0x0800c545

0800c28c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b08f      	sub	sp, #60	@ 0x3c
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29a:	6a3b      	ldr	r3, [r7, #32]
 800c29c:	e853 3f00 	ldrex	r3, [r3]
 800c2a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c2a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1e6      	bne.n	800c294 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c2dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3308      	adds	r3, #8
 800c2e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2e6:	61ba      	str	r2, [r7, #24]
 800c2e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	6979      	ldr	r1, [r7, #20]
 800c2ec:	69ba      	ldr	r2, [r7, #24]
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e5      	bne.n	800c2c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2220      	movs	r2, #32
 800c2fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c302:	bf00      	nop
 800c304:	373c      	adds	r7, #60	@ 0x3c
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c30e:	b480      	push	{r7}
 800c310:	b095      	sub	sp, #84	@ 0x54
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31e:	e853 3f00 	ldrex	r3, [r3]
 800c322:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c32a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	461a      	mov	r2, r3
 800c332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c334:	643b      	str	r3, [r7, #64]	@ 0x40
 800c336:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c338:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c33a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c33c:	e841 2300 	strex	r3, r2, [r1]
 800c340:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e6      	bne.n	800c316 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3308      	adds	r3, #8
 800c34e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	6a3b      	ldr	r3, [r7, #32]
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	61fb      	str	r3, [r7, #28]
   return(result);
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c35e:	f023 0301 	bic.w	r3, r3, #1
 800c362:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	3308      	adds	r3, #8
 800c36a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c36c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c36e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e3      	bne.n	800c348 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c384:	2b01      	cmp	r3, #1
 800c386:	d118      	bne.n	800c3ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	e853 3f00 	ldrex	r3, [r3]
 800c394:	60bb      	str	r3, [r7, #8]
   return(result);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	f023 0310 	bic.w	r3, r3, #16
 800c39c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3a6:	61bb      	str	r3, [r7, #24]
 800c3a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3aa:	6979      	ldr	r1, [r7, #20]
 800c3ac:	69ba      	ldr	r2, [r7, #24]
 800c3ae:	e841 2300 	strex	r3, r2, [r1]
 800c3b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1e6      	bne.n	800c388 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2220      	movs	r2, #32
 800c3be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c3ce:	bf00      	nop
 800c3d0:	3754      	adds	r7, #84	@ 0x54
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b09c      	sub	sp, #112	@ 0x70
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0320 	and.w	r3, r3, #32
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d171      	bne.n	800c4da <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c3f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c406:	e853 3f00 	ldrex	r3, [r3]
 800c40a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c40c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c40e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c412:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	461a      	mov	r2, r3
 800c41a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c41c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c41e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c420:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c424:	e841 2300 	strex	r3, r2, [r1]
 800c428:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c42a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1e6      	bne.n	800c3fe <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3308      	adds	r3, #8
 800c436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43a:	e853 3f00 	ldrex	r3, [r3]
 800c43e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c442:	f023 0301 	bic.w	r3, r3, #1
 800c446:	667b      	str	r3, [r7, #100]	@ 0x64
 800c448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	3308      	adds	r3, #8
 800c44e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c450:	647a      	str	r2, [r7, #68]	@ 0x44
 800c452:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c458:	e841 2300 	strex	r3, r2, [r1]
 800c45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c460:	2b00      	cmp	r3, #0
 800c462:	d1e5      	bne.n	800c430 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3308      	adds	r3, #8
 800c46a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46e:	e853 3f00 	ldrex	r3, [r3]
 800c472:	623b      	str	r3, [r7, #32]
   return(result);
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c47a:	663b      	str	r3, [r7, #96]	@ 0x60
 800c47c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	3308      	adds	r3, #8
 800c482:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c484:	633a      	str	r2, [r7, #48]	@ 0x30
 800c486:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c48a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c48c:	e841 2300 	strex	r3, r2, [r1]
 800c490:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e5      	bne.n	800c464 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c49a:	2220      	movs	r2, #32
 800c49c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d118      	bne.n	800c4da <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	e853 3f00 	ldrex	r3, [r3]
 800c4b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f023 0310 	bic.w	r3, r3, #16
 800c4bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c4be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4c6:	61fb      	str	r3, [r7, #28]
 800c4c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	69b9      	ldr	r1, [r7, #24]
 800c4cc:	69fa      	ldr	r2, [r7, #28]
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	617b      	str	r3, [r7, #20]
   return(result);
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e6      	bne.n	800c4a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4dc:	2200      	movs	r2, #0
 800c4de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d107      	bne.n	800c4f8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4f2:	f7ff f871 	bl	800b5d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4f6:	e002      	b.n	800c4fe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c4f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c4fa:	f7f8 f8a1 	bl	8004640 <HAL_UART_RxCpltCallback>
}
 800c4fe:	bf00      	nop
 800c500:	3770      	adds	r7, #112	@ 0x70
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b084      	sub	sp, #16
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c512:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2201      	movs	r2, #1
 800c518:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d109      	bne.n	800c536 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c528:	085b      	lsrs	r3, r3, #1
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	4619      	mov	r1, r3
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f7ff f852 	bl	800b5d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c534:	e002      	b.n	800c53c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f7ff f83a 	bl	800b5b0 <HAL_UART_RxHalfCpltCallback>
}
 800c53c:	bf00      	nop
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c550:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c558:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c560:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c56c:	2b80      	cmp	r3, #128	@ 0x80
 800c56e:	d109      	bne.n	800c584 <UART_DMAError+0x40>
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	2b21      	cmp	r3, #33	@ 0x21
 800c574:	d106      	bne.n	800c584 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	2200      	movs	r2, #0
 800c57a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c57e:	6978      	ldr	r0, [r7, #20]
 800c580:	f7ff fe84 	bl	800c28c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c58e:	2b40      	cmp	r3, #64	@ 0x40
 800c590:	d109      	bne.n	800c5a6 <UART_DMAError+0x62>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b22      	cmp	r3, #34	@ 0x22
 800c596:	d106      	bne.n	800c5a6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c5a0:	6978      	ldr	r0, [r7, #20]
 800c5a2:	f7ff feb4 	bl	800c30e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5ac:	f043 0210 	orr.w	r2, r3, #16
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5b6:	6978      	ldr	r0, [r7, #20]
 800c5b8:	f7ff f804 	bl	800b5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5bc:	bf00      	nop
 800c5be:	3718      	adds	r7, #24
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f7fe fff2 	bl	800b5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5e0:	bf00      	nop
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	e853 3f00 	ldrex	r3, [r3]
 800c5fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c604:	61fb      	str	r3, [r7, #28]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	61bb      	str	r3, [r7, #24]
 800c610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c612:	6979      	ldr	r1, [r7, #20]
 800c614:	69ba      	ldr	r2, [r7, #24]
 800c616:	e841 2300 	strex	r3, r2, [r1]
 800c61a:	613b      	str	r3, [r7, #16]
   return(result);
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1e6      	bne.n	800c5f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2220      	movs	r2, #32
 800c626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7fe ffb3 	bl	800b59c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c636:	bf00      	nop
 800c638:	3720      	adds	r7, #32
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b09c      	sub	sp, #112	@ 0x70
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c64e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c658:	2b22      	cmp	r3, #34	@ 0x22
 800c65a:	f040 80be 	bne.w	800c7da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c664:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c668:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c66c:	b2d9      	uxtb	r1, r3
 800c66e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c672:	b2da      	uxtb	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c678:	400a      	ands	r2, r1
 800c67a:	b2d2      	uxtb	r2, r2
 800c67c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c682:	1c5a      	adds	r2, r3, #1
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c68e:	b29b      	uxth	r3, r3
 800c690:	3b01      	subs	r3, #1
 800c692:	b29a      	uxth	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f040 80a1 	bne.w	800c7ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6b0:	e853 3f00 	ldrex	r3, [r3]
 800c6b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c6b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c6c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c6cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c6ce:	e841 2300 	strex	r3, r2, [r1]
 800c6d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c6d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1e6      	bne.n	800c6a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	3308      	adds	r3, #8
 800c6e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e4:	e853 3f00 	ldrex	r3, [r3]
 800c6e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ec:	f023 0301 	bic.w	r3, r3, #1
 800c6f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	3308      	adds	r3, #8
 800c6f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c6fa:	647a      	str	r2, [r7, #68]	@ 0x44
 800c6fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c700:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c702:	e841 2300 	strex	r3, r2, [r1]
 800c706:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1e5      	bne.n	800c6da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2220      	movs	r2, #32
 800c712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a33      	ldr	r2, [pc, #204]	@ (800c7f4 <UART_RxISR_8BIT+0x1b4>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d01f      	beq.n	800c76c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d018      	beq.n	800c76c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c742:	e853 3f00 	ldrex	r3, [r3]
 800c746:	623b      	str	r3, [r7, #32]
   return(result);
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c74e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	461a      	mov	r2, r3
 800c756:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c758:	633b      	str	r3, [r7, #48]	@ 0x30
 800c75a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c75e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c760:	e841 2300 	strex	r3, r2, [r1]
 800c764:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1e6      	bne.n	800c73a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c770:	2b01      	cmp	r3, #1
 800c772:	d12e      	bne.n	800c7d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	e853 3f00 	ldrex	r3, [r3]
 800c786:	60fb      	str	r3, [r7, #12]
   return(result);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f023 0310 	bic.w	r3, r3, #16
 800c78e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	461a      	mov	r2, r3
 800c796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c798:	61fb      	str	r3, [r7, #28]
 800c79a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79c:	69b9      	ldr	r1, [r7, #24]
 800c79e:	69fa      	ldr	r2, [r7, #28]
 800c7a0:	e841 2300 	strex	r3, r2, [r1]
 800c7a4:	617b      	str	r3, [r7, #20]
   return(result);
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1e6      	bne.n	800c77a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	f003 0310 	and.w	r3, r3, #16
 800c7b6:	2b10      	cmp	r3, #16
 800c7b8:	d103      	bne.n	800c7c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2210      	movs	r2, #16
 800c7c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7fe ff04 	bl	800b5d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c7d0:	e00b      	b.n	800c7ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7f7 ff34 	bl	8004640 <HAL_UART_RxCpltCallback>
}
 800c7d8:	e007      	b.n	800c7ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	699a      	ldr	r2, [r3, #24]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f042 0208 	orr.w	r2, r2, #8
 800c7e8:	619a      	str	r2, [r3, #24]
}
 800c7ea:	bf00      	nop
 800c7ec:	3770      	adds	r7, #112	@ 0x70
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	40008000 	.word	0x40008000

0800c7f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b09c      	sub	sp, #112	@ 0x70
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c806:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c810:	2b22      	cmp	r3, #34	@ 0x22
 800c812:	f040 80be 	bne.w	800c992 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c81c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c824:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c826:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c82a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c82e:	4013      	ands	r3, r2
 800c830:	b29a      	uxth	r2, r3
 800c832:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c834:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c83a:	1c9a      	adds	r2, r3, #2
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c846:	b29b      	uxth	r3, r3
 800c848:	3b01      	subs	r3, #1
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c858:	b29b      	uxth	r3, r3
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f040 80a1 	bne.w	800c9a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c868:	e853 3f00 	ldrex	r3, [r3]
 800c86c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c86e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c874:	667b      	str	r3, [r7, #100]	@ 0x64
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c87e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c880:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c882:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c884:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c886:	e841 2300 	strex	r3, r2, [r1]
 800c88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c88c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1e6      	bne.n	800c860 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	3308      	adds	r3, #8
 800c898:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89c:	e853 3f00 	ldrex	r3, [r3]
 800c8a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a4:	f023 0301 	bic.w	r3, r3, #1
 800c8a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c8b2:	643a      	str	r2, [r7, #64]	@ 0x40
 800c8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c8b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c8ba:	e841 2300 	strex	r3, r2, [r1]
 800c8be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1e5      	bne.n	800c892 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2220      	movs	r2, #32
 800c8ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a33      	ldr	r2, [pc, #204]	@ (800c9ac <UART_RxISR_16BIT+0x1b4>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d01f      	beq.n	800c924 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d018      	beq.n	800c924 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	e853 3f00 	ldrex	r3, [r3]
 800c8fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c906:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	461a      	mov	r2, r3
 800c90e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c912:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c918:	e841 2300 	strex	r3, r2, [r1]
 800c91c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1e6      	bne.n	800c8f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d12e      	bne.n	800c98a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	e853 3f00 	ldrex	r3, [r3]
 800c93e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	f023 0310 	bic.w	r3, r3, #16
 800c946:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	461a      	mov	r2, r3
 800c94e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c950:	61bb      	str	r3, [r7, #24]
 800c952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c954:	6979      	ldr	r1, [r7, #20]
 800c956:	69ba      	ldr	r2, [r7, #24]
 800c958:	e841 2300 	strex	r3, r2, [r1]
 800c95c:	613b      	str	r3, [r7, #16]
   return(result);
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1e6      	bne.n	800c932 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	69db      	ldr	r3, [r3, #28]
 800c96a:	f003 0310 	and.w	r3, r3, #16
 800c96e:	2b10      	cmp	r3, #16
 800c970:	d103      	bne.n	800c97a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2210      	movs	r2, #16
 800c978:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7fe fe28 	bl	800b5d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c988:	e00b      	b.n	800c9a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7f7 fe58 	bl	8004640 <HAL_UART_RxCpltCallback>
}
 800c990:	e007      	b.n	800c9a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	699a      	ldr	r2, [r3, #24]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f042 0208 	orr.w	r2, r2, #8
 800c9a0:	619a      	str	r2, [r3, #24]
}
 800c9a2:	bf00      	nop
 800c9a4:	3770      	adds	r7, #112	@ 0x70
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	40008000 	.word	0x40008000

0800c9b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b0ac      	sub	sp, #176	@ 0xb0
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c9be:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69db      	ldr	r3, [r3, #28]
 800c9c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c9e6:	2b22      	cmp	r3, #34	@ 0x22
 800c9e8:	f040 8183 	bne.w	800ccf2 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c9f2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9f6:	e126      	b.n	800cc46 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9fe:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca02:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ca06:	b2d9      	uxtb	r1, r3
 800ca08:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca12:	400a      	ands	r2, r1
 800ca14:	b2d2      	uxtb	r2, r2
 800ca16:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca1c:	1c5a      	adds	r2, r3, #1
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	69db      	ldr	r3, [r3, #28]
 800ca3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ca3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca42:	f003 0307 	and.w	r3, r3, #7
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d053      	beq.n	800caf2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca4e:	f003 0301 	and.w	r3, r3, #1
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d011      	beq.n	800ca7a <UART_RxISR_8BIT_FIFOEN+0xca>
 800ca56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ca5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00b      	beq.n	800ca7a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2201      	movs	r2, #1
 800ca68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca70:	f043 0201 	orr.w	r2, r3, #1
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca7e:	f003 0302 	and.w	r3, r3, #2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d011      	beq.n	800caaa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ca86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00b      	beq.n	800caaa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2202      	movs	r2, #2
 800ca98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caa0:	f043 0204 	orr.w	r2, r3, #4
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caae:	f003 0304 	and.w	r3, r3, #4
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d011      	beq.n	800cada <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800caba:	f003 0301 	and.w	r3, r3, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d00b      	beq.n	800cada <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2204      	movs	r2, #4
 800cac8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cad0:	f043 0202 	orr.w	r2, r3, #2
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d006      	beq.n	800caf2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7fe fd6d 	bl	800b5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f040 80a3 	bne.w	800cc46 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb08:	e853 3f00 	ldrex	r3, [r3]
 800cb0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800cb0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb24:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb26:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cb28:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cb2a:	e841 2300 	strex	r3, r2, [r1]
 800cb2e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cb30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1e4      	bne.n	800cb00 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	3308      	adds	r3, #8
 800cb3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb40:	e853 3f00 	ldrex	r3, [r3]
 800cb44:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cb46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb4c:	f023 0301 	bic.w	r3, r3, #1
 800cb50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3308      	adds	r3, #8
 800cb5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cb5e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cb60:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb62:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cb64:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb66:	e841 2300 	strex	r3, r2, [r1]
 800cb6a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cb6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1e1      	bne.n	800cb36 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2220      	movs	r2, #32
 800cb76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a60      	ldr	r2, [pc, #384]	@ (800cd0c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d021      	beq.n	800cbd4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d01a      	beq.n	800cbd4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cba6:	e853 3f00 	ldrex	r3, [r3]
 800cbaa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cbac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cbb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	461a      	mov	r2, r3
 800cbbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cbc0:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbc2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cbc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cbc8:	e841 2300 	strex	r3, r2, [r1]
 800cbcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cbce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1e4      	bne.n	800cb9e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d130      	bne.n	800cc3e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbea:	e853 3f00 	ldrex	r3, [r3]
 800cbee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf2:	f023 0310 	bic.w	r3, r3, #16
 800cbf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc04:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc0c:	e841 2300 	strex	r3, r2, [r1]
 800cc10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1e4      	bne.n	800cbe2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	f003 0310 	and.w	r3, r3, #16
 800cc22:	2b10      	cmp	r3, #16
 800cc24:	d103      	bne.n	800cc2e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2210      	movs	r2, #16
 800cc2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7fe fcce 	bl	800b5d8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800cc3c:	e00e      	b.n	800cc5c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7f7 fcfe 	bl	8004640 <HAL_UART_RxCpltCallback>
        break;
 800cc44:	e00a      	b.n	800cc5c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cc46:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d006      	beq.n	800cc5c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800cc4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc52:	f003 0320 	and.w	r3, r3, #32
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f47f aece 	bne.w	800c9f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc62:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d049      	beq.n	800cd02 <UART_RxISR_8BIT_FIFOEN+0x352>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cc74:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d242      	bcs.n	800cd02 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3308      	adds	r3, #8
 800cc82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	e853 3f00 	ldrex	r3, [r3]
 800cc8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cc92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cca8:	e841 2300 	strex	r3, r2, [r1]
 800ccac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1e3      	bne.n	800cc7c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4a16      	ldr	r2, [pc, #88]	@ (800cd10 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ccb8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	e853 3f00 	ldrex	r3, [r3]
 800ccc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	f043 0320 	orr.w	r3, r3, #32
 800ccce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ccdc:	61bb      	str	r3, [r7, #24]
 800ccde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce0:	6979      	ldr	r1, [r7, #20]
 800cce2:	69ba      	ldr	r2, [r7, #24]
 800cce4:	e841 2300 	strex	r3, r2, [r1]
 800cce8:	613b      	str	r3, [r7, #16]
   return(result);
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d1e4      	bne.n	800ccba <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ccf0:	e007      	b.n	800cd02 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	699a      	ldr	r2, [r3, #24]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f042 0208 	orr.w	r2, r2, #8
 800cd00:	619a      	str	r2, [r3, #24]
}
 800cd02:	bf00      	nop
 800cd04:	37b0      	adds	r7, #176	@ 0xb0
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	40008000 	.word	0x40008000
 800cd10:	0800c641 	.word	0x0800c641

0800cd14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b0ae      	sub	sp, #184	@ 0xb8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cd22:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	69db      	ldr	r3, [r3, #28]
 800cd2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd4a:	2b22      	cmp	r3, #34	@ 0x22
 800cd4c:	f040 8187 	bne.w	800d05e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cd56:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd5a:	e12a      	b.n	800cfb2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd62:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cd6e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cd72:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800cd76:	4013      	ands	r3, r2
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd7e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd84:	1c9a      	adds	r2, r3, #2
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	3b01      	subs	r3, #1
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	69db      	ldr	r3, [r3, #28]
 800cda2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cda6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cdaa:	f003 0307 	and.w	r3, r3, #7
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d053      	beq.n	800ce5a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d011      	beq.n	800cde2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800cdbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00b      	beq.n	800cde2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdd8:	f043 0201 	orr.w	r2, r3, #1
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cde2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cde6:	f003 0302 	and.w	r3, r3, #2
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d011      	beq.n	800ce12 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cdee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cdf2:	f003 0301 	and.w	r3, r3, #1
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00b      	beq.n	800ce12 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2202      	movs	r2, #2
 800ce00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce08:	f043 0204 	orr.w	r2, r3, #4
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce16:	f003 0304 	and.w	r3, r3, #4
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d011      	beq.n	800ce42 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ce1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce22:	f003 0301 	and.w	r3, r3, #1
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00b      	beq.n	800ce42 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2204      	movs	r2, #4
 800ce30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce38:	f043 0202 	orr.w	r2, r3, #2
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d006      	beq.n	800ce5a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7fe fbb9 	bl	800b5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2200      	movs	r2, #0
 800ce56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f040 80a5 	bne.w	800cfb2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ce70:	e853 3f00 	ldrex	r3, [r3]
 800ce74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ce76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ce78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	461a      	mov	r2, r3
 800ce86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ce92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ce96:	e841 2300 	strex	r3, r2, [r1]
 800ce9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ce9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d1e2      	bne.n	800ce68 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3308      	adds	r3, #8
 800cea8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ceac:	e853 3f00 	ldrex	r3, [r3]
 800ceb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ceb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ceb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ceb8:	f023 0301 	bic.w	r3, r3, #1
 800cebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	3308      	adds	r3, #8
 800cec6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ceca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cecc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cece:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ced0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ced2:	e841 2300 	strex	r3, r2, [r1]
 800ced6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ced8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1e1      	bne.n	800cea2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2220      	movs	r2, #32
 800cee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a60      	ldr	r2, [pc, #384]	@ (800d078 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d021      	beq.n	800cf40 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d01a      	beq.n	800cf40 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf12:	e853 3f00 	ldrex	r3, [r3]
 800cf16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cf1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	461a      	mov	r2, r3
 800cf28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cf2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf2e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cf32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf34:	e841 2300 	strex	r3, r2, [r1]
 800cf38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cf3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1e4      	bne.n	800cf0a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d130      	bne.n	800cfaa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf56:	e853 3f00 	ldrex	r3, [r3]
 800cf5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cf5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf5e:	f023 0310 	bic.w	r3, r3, #16
 800cf62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cf70:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf78:	e841 2300 	strex	r3, r2, [r1]
 800cf7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cf7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1e4      	bne.n	800cf4e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	69db      	ldr	r3, [r3, #28]
 800cf8a:	f003 0310 	and.w	r3, r3, #16
 800cf8e:	2b10      	cmp	r3, #16
 800cf90:	d103      	bne.n	800cf9a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2210      	movs	r2, #16
 800cf98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7fe fb18 	bl	800b5d8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800cfa8:	e00e      	b.n	800cfc8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7f7 fb48 	bl	8004640 <HAL_UART_RxCpltCallback>
        break;
 800cfb0:	e00a      	b.n	800cfc8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cfb2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d006      	beq.n	800cfc8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800cfba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cfbe:	f003 0320 	and.w	r3, r3, #32
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f47f aeca 	bne.w	800cd5c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cfce:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cfd2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d049      	beq.n	800d06e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cfe0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d242      	bcs.n	800d06e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3308      	adds	r3, #8
 800cfee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff2:	e853 3f00 	ldrex	r3, [r3]
 800cff6:	623b      	str	r3, [r7, #32]
   return(result);
 800cff8:	6a3b      	ldr	r3, [r7, #32]
 800cffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cffe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	3308      	adds	r3, #8
 800d008:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d00c:	633a      	str	r2, [r7, #48]	@ 0x30
 800d00e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d014:	e841 2300 	strex	r3, r2, [r1]
 800d018:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e3      	bne.n	800cfe8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a16      	ldr	r2, [pc, #88]	@ (800d07c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800d024:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	e853 3f00 	ldrex	r3, [r3]
 800d032:	60fb      	str	r3, [r7, #12]
   return(result);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f043 0320 	orr.w	r3, r3, #32
 800d03a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	461a      	mov	r2, r3
 800d044:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d048:	61fb      	str	r3, [r7, #28]
 800d04a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04c:	69b9      	ldr	r1, [r7, #24]
 800d04e:	69fa      	ldr	r2, [r7, #28]
 800d050:	e841 2300 	strex	r3, r2, [r1]
 800d054:	617b      	str	r3, [r7, #20]
   return(result);
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d1e4      	bne.n	800d026 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d05c:	e007      	b.n	800d06e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	699a      	ldr	r2, [r3, #24]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f042 0208 	orr.w	r2, r2, #8
 800d06c:	619a      	str	r2, [r3, #24]
}
 800d06e:	bf00      	nop
 800d070:	37b8      	adds	r7, #184	@ 0xb8
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	40008000 	.word	0x40008000
 800d07c:	0800c7f9 	.word	0x0800c7f9

0800d080 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d088:	bf00      	nop
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d09c:	bf00      	nop
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d101      	bne.n	800d0d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800d0ce:	2302      	movs	r3, #2
 800d0d0:	e027      	b.n	800d122 <HAL_UARTEx_DisableFifoMode+0x66>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2224      	movs	r2, #36	@ 0x24
 800d0de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f022 0201 	bic.w	r2, r2, #1
 800d0f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2220      	movs	r2, #32
 800d114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b084      	sub	sp, #16
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d101      	bne.n	800d146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d142:	2302      	movs	r3, #2
 800d144:	e02d      	b.n	800d1a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2224      	movs	r2, #36	@ 0x24
 800d152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f022 0201 	bic.w	r2, r2, #1
 800d16c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	683a      	ldr	r2, [r7, #0]
 800d17e:	430a      	orrs	r2, r1
 800d180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f850 	bl	800d228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2220      	movs	r2, #32
 800d194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b084      	sub	sp, #16
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
 800d1b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d101      	bne.n	800d1c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1be:	2302      	movs	r3, #2
 800d1c0:	e02d      	b.n	800d21e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2224      	movs	r2, #36	@ 0x24
 800d1ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f022 0201 	bic.w	r2, r2, #1
 800d1e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f812 	bl	800d228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2220      	movs	r2, #32
 800d210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d234:	2b00      	cmp	r3, #0
 800d236:	d108      	bne.n	800d24a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d248:	e031      	b.n	800d2ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d24a:	2308      	movs	r3, #8
 800d24c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d24e:	2308      	movs	r3, #8
 800d250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	0e5b      	lsrs	r3, r3, #25
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	f003 0307 	and.w	r3, r3, #7
 800d260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	0f5b      	lsrs	r3, r3, #29
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	f003 0307 	and.w	r3, r3, #7
 800d270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d272:	7bbb      	ldrb	r3, [r7, #14]
 800d274:	7b3a      	ldrb	r2, [r7, #12]
 800d276:	4911      	ldr	r1, [pc, #68]	@ (800d2bc <UARTEx_SetNbDataToProcess+0x94>)
 800d278:	5c8a      	ldrb	r2, [r1, r2]
 800d27a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d27e:	7b3a      	ldrb	r2, [r7, #12]
 800d280:	490f      	ldr	r1, [pc, #60]	@ (800d2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800d282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d284:	fb93 f3f2 	sdiv	r3, r3, r2
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d290:	7bfb      	ldrb	r3, [r7, #15]
 800d292:	7b7a      	ldrb	r2, [r7, #13]
 800d294:	4909      	ldr	r1, [pc, #36]	@ (800d2bc <UARTEx_SetNbDataToProcess+0x94>)
 800d296:	5c8a      	ldrb	r2, [r1, r2]
 800d298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d29c:	7b7a      	ldrb	r2, [r7, #13]
 800d29e:	4908      	ldr	r1, [pc, #32]	@ (800d2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800d2a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d2ae:	bf00      	nop
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	08015360 	.word	0x08015360
 800d2c0:	08015368 	.word	0x08015368

0800d2c4 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800d2c8:	4907      	ldr	r1, [pc, #28]	@ (800d2e8 <MX_FATFS_Init+0x24>)
 800d2ca:	4808      	ldr	r0, [pc, #32]	@ (800d2ec <MX_FATFS_Init+0x28>)
 800d2cc:	f000 f8b6 	bl	800d43c <FATFS_LinkDriver>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d002      	beq.n	800d2dc <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800d2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2da:	e003      	b.n	800d2e4 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800d2dc:	4b04      	ldr	r3, [pc, #16]	@ (800d2f0 <MX_FATFS_Init+0x2c>)
 800d2de:	2201      	movs	r2, #1
 800d2e0:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800d2e2:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	200010c0 	.word	0x200010c0
 800d2ec:	20000028 	.word	0x20000028
 800d2f0:	200010c4 	.word	0x200010c4

0800d2f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800d2fe:	4b06      	ldr	r3, [pc, #24]	@ (800d318 <USER_initialize+0x24>)
 800d300:	2201      	movs	r2, #1
 800d302:	701a      	strb	r2, [r3, #0]
    return Stat;
 800d304:	4b04      	ldr	r3, [pc, #16]	@ (800d318 <USER_initialize+0x24>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	370c      	adds	r7, #12
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	20000024 	.word	0x20000024

0800d31c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	4603      	mov	r3, r0
 800d324:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800d326:	4b06      	ldr	r3, [pc, #24]	@ (800d340 <USER_status+0x24>)
 800d328:	2201      	movs	r2, #1
 800d32a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800d32c:	4b04      	ldr	r3, [pc, #16]	@ (800d340 <USER_status+0x24>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800d332:	4618      	mov	r0, r3
 800d334:	370c      	adds	r7, #12
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	20000024 	.word	0x20000024

0800d344 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60b9      	str	r1, [r7, #8]
 800d34c:	607a      	str	r2, [r7, #4]
 800d34e:	603b      	str	r3, [r7, #0]
 800d350:	4603      	mov	r3, r0
 800d352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800d354:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800d356:	4618      	mov	r0, r3
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr

0800d362 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d362:	b480      	push	{r7}
 800d364:	b085      	sub	sp, #20
 800d366:	af00      	add	r7, sp, #0
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
 800d36c:	603b      	str	r3, [r7, #0]
 800d36e:	4603      	mov	r3, r0
 800d370:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800d372:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800d374:	4618      	mov	r0, r3
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	4603      	mov	r3, r0
 800d388:	603a      	str	r2, [r7, #0]
 800d38a:	71fb      	strb	r3, [r7, #7]
 800d38c:	460b      	mov	r3, r1
 800d38e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	73fb      	strb	r3, [r7, #15]
    return res;
 800d394:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800d396:	4618      	mov	r0, r3
 800d398:	3714      	adds	r7, #20
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
	...

0800d3a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d3ba:	4b1f      	ldr	r3, [pc, #124]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3bc:	7a5b      	ldrb	r3, [r3, #9]
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d131      	bne.n	800d428 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d3c4:	4b1c      	ldr	r3, [pc, #112]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3c6:	7a5b      	ldrb	r3, [r3, #9]
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d3d2:	4b19      	ldr	r3, [pc, #100]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3d4:	7a5b      	ldrb	r3, [r3, #9]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	4a17      	ldr	r2, [pc, #92]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d3e2:	4b15      	ldr	r3, [pc, #84]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3e4:	7a5b      	ldrb	r3, [r3, #9]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4b13      	ldr	r3, [pc, #76]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3ec:	4413      	add	r3, r2
 800d3ee:	79fa      	ldrb	r2, [r7, #7]
 800d3f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d3f2:	4b11      	ldr	r3, [pc, #68]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3f4:	7a5b      	ldrb	r3, [r3, #9]
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	1c5a      	adds	r2, r3, #1
 800d3fa:	b2d1      	uxtb	r1, r2
 800d3fc:	4a0e      	ldr	r2, [pc, #56]	@ (800d438 <FATFS_LinkDriverEx+0x94>)
 800d3fe:	7251      	strb	r1, [r2, #9]
 800d400:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d402:	7dbb      	ldrb	r3, [r7, #22]
 800d404:	3330      	adds	r3, #48	@ 0x30
 800d406:	b2da      	uxtb	r2, r3
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	3301      	adds	r3, #1
 800d410:	223a      	movs	r2, #58	@ 0x3a
 800d412:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	3302      	adds	r3, #2
 800d418:	222f      	movs	r2, #47	@ 0x2f
 800d41a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	3303      	adds	r3, #3
 800d420:	2200      	movs	r2, #0
 800d422:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d424:	2300      	movs	r3, #0
 800d426:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d428:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	371c      	adds	r7, #28
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	200010c8 	.word	0x200010c8

0800d43c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d446:	2200      	movs	r2, #0
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7ff ffaa 	bl	800d3a4 <FATFS_LinkDriverEx>
 800d450:	4603      	mov	r3, r0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d45a:	b480      	push	{r7}
 800d45c:	b085      	sub	sp, #20
 800d45e:	af00      	add	r7, sp, #0
 800d460:	4603      	mov	r3, r0
 800d462:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d464:	2300      	movs	r3, #0
 800d466:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d468:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d46c:	2b84      	cmp	r3, #132	@ 0x84
 800d46e:	d005      	beq.n	800d47c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d470:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	4413      	add	r3, r2
 800d478:	3303      	adds	r3, #3
 800d47a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d47c:	68fb      	ldr	r3, [r7, #12]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d48e:	f000 fafb 	bl	800da88 <vTaskStartScheduler>
  
  return osOK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	bd80      	pop	{r7, pc}

0800d498 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d49a:	b087      	sub	sp, #28
 800d49c:	af02      	add	r7, sp, #8
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685c      	ldr	r4, [r3, #4]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d4ae:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff ffcf 	bl	800d45a <makeFreeRtosPriority>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	f107 030c 	add.w	r3, r7, #12
 800d4c2:	9301      	str	r3, [sp, #4]
 800d4c4:	9200      	str	r2, [sp, #0]
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	4632      	mov	r2, r6
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f000 f8de 	bl	800d68e <xTaskCreate>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d001      	beq.n	800d4dc <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e000      	b.n	800d4de <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3714      	adds	r7, #20
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b084      	sub	sp, #16
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d001      	beq.n	800d4fc <osDelay+0x16>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	e000      	b.n	800d4fe <osDelay+0x18>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	4618      	mov	r0, r3
 800d500:	f000 f9f8 	bl	800d8f4 <vTaskDelay>
  
  return osOK;
 800d504:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d506:	4618      	mov	r0, r3
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b082      	sub	sp, #8
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 fa22 	bl	800d960 <vTaskSuspend>
  
  return osOK;
 800d51c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d526:	b480      	push	{r7}
 800d528:	b083      	sub	sp, #12
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f103 0208 	add.w	r2, r3, #8
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f04f 32ff 	mov.w	r2, #4294967295
 800d53e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f103 0208 	add.w	r2, r3, #8
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f103 0208 	add.w	r2, r3, #8
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d55a:	bf00      	nop
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d566:	b480      	push	{r7}
 800d568:	b083      	sub	sp, #12
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d574:	bf00      	nop
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	689a      	ldr	r2, [r3, #8]
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	683a      	ldr	r2, [r7, #0]
 800d5a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	601a      	str	r2, [r3, #0]
}
 800d5bc:	bf00      	nop
 800d5be:	3714      	adds	r7, #20
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5de:	d103      	bne.n	800d5e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	60fb      	str	r3, [r7, #12]
 800d5e6:	e00c      	b.n	800d602 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	3308      	adds	r3, #8
 800d5ec:	60fb      	str	r3, [r7, #12]
 800d5ee:	e002      	b.n	800d5f6 <vListInsert+0x2e>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	60fb      	str	r3, [r7, #12]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d2f6      	bcs.n	800d5f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	1c5a      	adds	r2, r3, #1
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	601a      	str	r2, [r3, #0]
}
 800d62e:	bf00      	nop
 800d630:	3714      	adds	r7, #20
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr

0800d63a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d63a:	b480      	push	{r7}
 800d63c:	b085      	sub	sp, #20
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	691b      	ldr	r3, [r3, #16]
 800d646:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	6892      	ldr	r2, [r2, #8]
 800d650:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	6852      	ldr	r2, [r2, #4]
 800d65a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	429a      	cmp	r2, r3
 800d664:	d103      	bne.n	800d66e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	689a      	ldr	r2, [r3, #8]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	1e5a      	subs	r2, r3, #1
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr

0800d68e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b08c      	sub	sp, #48	@ 0x30
 800d692:	af04      	add	r7, sp, #16
 800d694:	60f8      	str	r0, [r7, #12]
 800d696:	60b9      	str	r1, [r7, #8]
 800d698:	603b      	str	r3, [r7, #0]
 800d69a:	4613      	mov	r3, r2
 800d69c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d69e:	88fb      	ldrh	r3, [r7, #6]
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 ff28 	bl	800e4f8 <pvPortMalloc>
 800d6a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00e      	beq.n	800d6ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d6b0:	2054      	movs	r0, #84	@ 0x54
 800d6b2:	f000 ff21 	bl	800e4f8 <pvPortMalloc>
 800d6b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	697a      	ldr	r2, [r7, #20]
 800d6c2:	631a      	str	r2, [r3, #48]	@ 0x30
 800d6c4:	e005      	b.n	800d6d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6c6:	6978      	ldr	r0, [r7, #20]
 800d6c8:	f000 ffe4 	bl	800e694 <vPortFree>
 800d6cc:	e001      	b.n	800d6d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d013      	beq.n	800d700 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6d8:	88fa      	ldrh	r2, [r7, #6]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	9303      	str	r3, [sp, #12]
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	9302      	str	r3, [sp, #8]
 800d6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e4:	9301      	str	r3, [sp, #4]
 800d6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	68b9      	ldr	r1, [r7, #8]
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f000 f80e 	bl	800d710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6f4:	69f8      	ldr	r0, [r7, #28]
 800d6f6:	f000 f893 	bl	800d820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	61bb      	str	r3, [r7, #24]
 800d6fe:	e002      	b.n	800d706 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d700:	f04f 33ff 	mov.w	r3, #4294967295
 800d704:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d706:	69bb      	ldr	r3, [r7, #24]
	}
 800d708:	4618      	mov	r0, r3
 800d70a:	3720      	adds	r7, #32
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b088      	sub	sp, #32
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d728:	3b01      	subs	r3, #1
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	f023 0307 	bic.w	r3, r3, #7
 800d736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	f003 0307 	and.w	r3, r3, #7
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00b      	beq.n	800d75a <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d754:	bf00      	nop
 800d756:	bf00      	nop
 800d758:	e7fd      	b.n	800d756 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d01f      	beq.n	800d7a0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d760:	2300      	movs	r3, #0
 800d762:	61fb      	str	r3, [r7, #28]
 800d764:	e012      	b.n	800d78c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	4413      	add	r3, r2
 800d76c:	7819      	ldrb	r1, [r3, #0]
 800d76e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	4413      	add	r3, r2
 800d774:	3334      	adds	r3, #52	@ 0x34
 800d776:	460a      	mov	r2, r1
 800d778:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	4413      	add	r3, r2
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d006      	beq.n	800d794 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	3301      	adds	r3, #1
 800d78a:	61fb      	str	r3, [r7, #28]
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	2b0f      	cmp	r3, #15
 800d790:	d9e9      	bls.n	800d766 <prvInitialiseNewTask+0x56>
 800d792:	e000      	b.n	800d796 <prvInitialiseNewTask+0x86>
			{
				break;
 800d794:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d79e:	e003      	b.n	800d7a8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7aa:	2b06      	cmp	r3, #6
 800d7ac:	d901      	bls.n	800d7b2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7ae:	2306      	movs	r3, #6
 800d7b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7bc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7ff fecc 	bl	800d566 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d0:	3318      	adds	r3, #24
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7ff fec7 	bl	800d566 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e0:	f1c3 0207 	rsb	r2, r3, #7
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7fc:	683a      	ldr	r2, [r7, #0]
 800d7fe:	68f9      	ldr	r1, [r7, #12]
 800d800:	69b8      	ldr	r0, [r7, #24]
 800d802:	f000 fc67 	bl	800e0d4 <pxPortInitialiseStack>
 800d806:	4602      	mov	r2, r0
 800d808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d80a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d002      	beq.n	800d818 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d816:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d818:	bf00      	nop
 800d81a:	3720      	adds	r7, #32
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d828:	f000 fd86 	bl	800e338 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d82c:	4b2a      	ldr	r3, [pc, #168]	@ (800d8d8 <prvAddNewTaskToReadyList+0xb8>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3301      	adds	r3, #1
 800d832:	4a29      	ldr	r2, [pc, #164]	@ (800d8d8 <prvAddNewTaskToReadyList+0xb8>)
 800d834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d836:	4b29      	ldr	r3, [pc, #164]	@ (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d109      	bne.n	800d852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d83e:	4a27      	ldr	r2, [pc, #156]	@ (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d844:	4b24      	ldr	r3, [pc, #144]	@ (800d8d8 <prvAddNewTaskToReadyList+0xb8>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d110      	bne.n	800d86e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d84c:	f000 fb3e 	bl	800decc <prvInitialiseTaskLists>
 800d850:	e00d      	b.n	800d86e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d852:	4b23      	ldr	r3, [pc, #140]	@ (800d8e0 <prvAddNewTaskToReadyList+0xc0>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d109      	bne.n	800d86e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d85a:	4b20      	ldr	r3, [pc, #128]	@ (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d864:	429a      	cmp	r2, r3
 800d866:	d802      	bhi.n	800d86e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d868:	4a1c      	ldr	r2, [pc, #112]	@ (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d86e:	4b1d      	ldr	r3, [pc, #116]	@ (800d8e4 <prvAddNewTaskToReadyList+0xc4>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	4a1b      	ldr	r2, [pc, #108]	@ (800d8e4 <prvAddNewTaskToReadyList+0xc4>)
 800d876:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d87c:	2201      	movs	r2, #1
 800d87e:	409a      	lsls	r2, r3
 800d880:	4b19      	ldr	r3, [pc, #100]	@ (800d8e8 <prvAddNewTaskToReadyList+0xc8>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4313      	orrs	r3, r2
 800d886:	4a18      	ldr	r2, [pc, #96]	@ (800d8e8 <prvAddNewTaskToReadyList+0xc8>)
 800d888:	6013      	str	r3, [r2, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d88e:	4613      	mov	r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4413      	add	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4a15      	ldr	r2, [pc, #84]	@ (800d8ec <prvAddNewTaskToReadyList+0xcc>)
 800d898:	441a      	add	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	3304      	adds	r3, #4
 800d89e:	4619      	mov	r1, r3
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	f7ff fe6d 	bl	800d580 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8a6:	f000 fd79 	bl	800e39c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d8e0 <prvAddNewTaskToReadyList+0xc0>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00e      	beq.n	800d8d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d8dc <prvAddNewTaskToReadyList+0xbc>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d207      	bcs.n	800d8d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d8f0 <prvAddNewTaskToReadyList+0xd0>)
 800d8c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	200011d4 	.word	0x200011d4
 800d8dc:	200010d4 	.word	0x200010d4
 800d8e0:	200011e0 	.word	0x200011e0
 800d8e4:	200011f0 	.word	0x200011f0
 800d8e8:	200011dc 	.word	0x200011dc
 800d8ec:	200010d8 	.word	0x200010d8
 800d8f0:	e000ed04 	.word	0xe000ed04

0800d8f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d018      	beq.n	800d938 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d906:	4b14      	ldr	r3, [pc, #80]	@ (800d958 <vTaskDelay+0x64>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d00b      	beq.n	800d926 <vTaskDelay+0x32>
	__asm volatile
 800d90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	60bb      	str	r3, [r7, #8]
}
 800d920:	bf00      	nop
 800d922:	bf00      	nop
 800d924:	e7fd      	b.n	800d922 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d926:	f000 f8f7 	bl	800db18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d92a:	2100      	movs	r1, #0
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fb6b 	bl	800e008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d932:	f000 f8ff 	bl	800db34 <xTaskResumeAll>
 800d936:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d107      	bne.n	800d94e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d93e:	4b07      	ldr	r3, [pc, #28]	@ (800d95c <vTaskDelay+0x68>)
 800d940:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d94e:	bf00      	nop
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	200011fc 	.word	0x200011fc
 800d95c:	e000ed04 	.word	0xe000ed04

0800d960 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d968:	f000 fce6 	bl	800e338 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d102      	bne.n	800d978 <vTaskSuspend+0x18>
 800d972:	4b3d      	ldr	r3, [pc, #244]	@ (800da68 <vTaskSuspend+0x108>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	e000      	b.n	800d97a <vTaskSuspend+0x1a>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	3304      	adds	r3, #4
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff fe5a 	bl	800d63a <uxListRemove>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d115      	bne.n	800d9b8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d990:	4936      	ldr	r1, [pc, #216]	@ (800da6c <vTaskSuspend+0x10c>)
 800d992:	4613      	mov	r3, r2
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4413      	add	r3, r2
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	440b      	add	r3, r1
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d10a      	bne.n	800d9b8 <vTaskSuspend+0x58>
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ac:	43da      	mvns	r2, r3
 800d9ae:	4b30      	ldr	r3, [pc, #192]	@ (800da70 <vTaskSuspend+0x110>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	4a2e      	ldr	r2, [pc, #184]	@ (800da70 <vTaskSuspend+0x110>)
 800d9b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d004      	beq.n	800d9ca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	3318      	adds	r3, #24
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7ff fe38 	bl	800d63a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	4828      	ldr	r0, [pc, #160]	@ (800da74 <vTaskSuspend+0x114>)
 800d9d2:	f7ff fdd5 	bl	800d580 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d103      	bne.n	800d9ea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d9ea:	f000 fcd7 	bl	800e39c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d9ee:	4b22      	ldr	r3, [pc, #136]	@ (800da78 <vTaskSuspend+0x118>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d005      	beq.n	800da02 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d9f6:	f000 fc9f 	bl	800e338 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d9fa:	f000 fae5 	bl	800dfc8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d9fe:	f000 fccd 	bl	800e39c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800da02:	4b19      	ldr	r3, [pc, #100]	@ (800da68 <vTaskSuspend+0x108>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d128      	bne.n	800da5e <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800da0c:	4b1a      	ldr	r3, [pc, #104]	@ (800da78 <vTaskSuspend+0x118>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d018      	beq.n	800da46 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800da14:	4b19      	ldr	r3, [pc, #100]	@ (800da7c <vTaskSuspend+0x11c>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00b      	beq.n	800da34 <vTaskSuspend+0xd4>
	__asm volatile
 800da1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da20:	f383 8811 	msr	BASEPRI, r3
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	60bb      	str	r3, [r7, #8]
}
 800da2e:	bf00      	nop
 800da30:	bf00      	nop
 800da32:	e7fd      	b.n	800da30 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800da34:	4b12      	ldr	r3, [pc, #72]	@ (800da80 <vTaskSuspend+0x120>)
 800da36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da3a:	601a      	str	r2, [r3, #0]
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da44:	e00b      	b.n	800da5e <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800da46:	4b0b      	ldr	r3, [pc, #44]	@ (800da74 <vTaskSuspend+0x114>)
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	4b0e      	ldr	r3, [pc, #56]	@ (800da84 <vTaskSuspend+0x124>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d103      	bne.n	800da5a <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800da52:	4b05      	ldr	r3, [pc, #20]	@ (800da68 <vTaskSuspend+0x108>)
 800da54:	2200      	movs	r2, #0
 800da56:	601a      	str	r2, [r3, #0]
	}
 800da58:	e001      	b.n	800da5e <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800da5a:	f000 f9c3 	bl	800dde4 <vTaskSwitchContext>
	}
 800da5e:	bf00      	nop
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	200010d4 	.word	0x200010d4
 800da6c:	200010d8 	.word	0x200010d8
 800da70:	200011dc 	.word	0x200011dc
 800da74:	200011c0 	.word	0x200011c0
 800da78:	200011e0 	.word	0x200011e0
 800da7c:	200011fc 	.word	0x200011fc
 800da80:	e000ed04 	.word	0xe000ed04
 800da84:	200011d4 	.word	0x200011d4

0800da88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b086      	sub	sp, #24
 800da8c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800da8e:	4b1c      	ldr	r3, [pc, #112]	@ (800db00 <vTaskStartScheduler+0x78>)
 800da90:	9301      	str	r3, [sp, #4]
 800da92:	2300      	movs	r3, #0
 800da94:	9300      	str	r3, [sp, #0]
 800da96:	2300      	movs	r3, #0
 800da98:	2280      	movs	r2, #128	@ 0x80
 800da9a:	491a      	ldr	r1, [pc, #104]	@ (800db04 <vTaskStartScheduler+0x7c>)
 800da9c:	481a      	ldr	r0, [pc, #104]	@ (800db08 <vTaskStartScheduler+0x80>)
 800da9e:	f7ff fdf6 	bl	800d68e <xTaskCreate>
 800daa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d116      	bne.n	800dad8 <vTaskStartScheduler+0x50>
	__asm volatile
 800daaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daae:	f383 8811 	msr	BASEPRI, r3
 800dab2:	f3bf 8f6f 	isb	sy
 800dab6:	f3bf 8f4f 	dsb	sy
 800daba:	60bb      	str	r3, [r7, #8]
}
 800dabc:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dabe:	4b13      	ldr	r3, [pc, #76]	@ (800db0c <vTaskStartScheduler+0x84>)
 800dac0:	f04f 32ff 	mov.w	r2, #4294967295
 800dac4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dac6:	4b12      	ldr	r3, [pc, #72]	@ (800db10 <vTaskStartScheduler+0x88>)
 800dac8:	2201      	movs	r2, #1
 800daca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dacc:	4b11      	ldr	r3, [pc, #68]	@ (800db14 <vTaskStartScheduler+0x8c>)
 800dace:	2200      	movs	r2, #0
 800dad0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dad2:	f000 fb8d 	bl	800e1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dad6:	e00f      	b.n	800daf8 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dade:	d10b      	bne.n	800daf8 <vTaskStartScheduler+0x70>
	__asm volatile
 800dae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae4:	f383 8811 	msr	BASEPRI, r3
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	607b      	str	r3, [r7, #4]
}
 800daf2:	bf00      	nop
 800daf4:	bf00      	nop
 800daf6:	e7fd      	b.n	800daf4 <vTaskStartScheduler+0x6c>
}
 800daf8:	bf00      	nop
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	200011f8 	.word	0x200011f8
 800db04:	08014bbc 	.word	0x08014bbc
 800db08:	0800de9d 	.word	0x0800de9d
 800db0c:	200011f4 	.word	0x200011f4
 800db10:	200011e0 	.word	0x200011e0
 800db14:	200011d8 	.word	0x200011d8

0800db18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db18:	b480      	push	{r7}
 800db1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db1c:	4b04      	ldr	r3, [pc, #16]	@ (800db30 <vTaskSuspendAll+0x18>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3301      	adds	r3, #1
 800db22:	4a03      	ldr	r2, [pc, #12]	@ (800db30 <vTaskSuspendAll+0x18>)
 800db24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800db26:	bf00      	nop
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr
 800db30:	200011fc 	.word	0x200011fc

0800db34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db3e:	2300      	movs	r3, #0
 800db40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db42:	4b42      	ldr	r3, [pc, #264]	@ (800dc4c <xTaskResumeAll+0x118>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10b      	bne.n	800db62 <xTaskResumeAll+0x2e>
	__asm volatile
 800db4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	603b      	str	r3, [r7, #0]
}
 800db5c:	bf00      	nop
 800db5e:	bf00      	nop
 800db60:	e7fd      	b.n	800db5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db62:	f000 fbe9 	bl	800e338 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db66:	4b39      	ldr	r3, [pc, #228]	@ (800dc4c <xTaskResumeAll+0x118>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3b01      	subs	r3, #1
 800db6c:	4a37      	ldr	r2, [pc, #220]	@ (800dc4c <xTaskResumeAll+0x118>)
 800db6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db70:	4b36      	ldr	r3, [pc, #216]	@ (800dc4c <xTaskResumeAll+0x118>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d161      	bne.n	800dc3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db78:	4b35      	ldr	r3, [pc, #212]	@ (800dc50 <xTaskResumeAll+0x11c>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d05d      	beq.n	800dc3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db80:	e02e      	b.n	800dbe0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db82:	4b34      	ldr	r3, [pc, #208]	@ (800dc54 <xTaskResumeAll+0x120>)
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	3318      	adds	r3, #24
 800db8e:	4618      	mov	r0, r3
 800db90:	f7ff fd53 	bl	800d63a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	3304      	adds	r3, #4
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff fd4e 	bl	800d63a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba2:	2201      	movs	r2, #1
 800dba4:	409a      	lsls	r2, r3
 800dba6:	4b2c      	ldr	r3, [pc, #176]	@ (800dc58 <xTaskResumeAll+0x124>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	4a2a      	ldr	r2, [pc, #168]	@ (800dc58 <xTaskResumeAll+0x124>)
 800dbae:	6013      	str	r3, [r2, #0]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	4413      	add	r3, r2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4a27      	ldr	r2, [pc, #156]	@ (800dc5c <xTaskResumeAll+0x128>)
 800dbbe:	441a      	add	r2, r3
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	4610      	mov	r0, r2
 800dbc8:	f7ff fcda 	bl	800d580 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbd0:	4b23      	ldr	r3, [pc, #140]	@ (800dc60 <xTaskResumeAll+0x12c>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d302      	bcc.n	800dbe0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dbda:	4b22      	ldr	r3, [pc, #136]	@ (800dc64 <xTaskResumeAll+0x130>)
 800dbdc:	2201      	movs	r2, #1
 800dbde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbe0:	4b1c      	ldr	r3, [pc, #112]	@ (800dc54 <xTaskResumeAll+0x120>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1cc      	bne.n	800db82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d001      	beq.n	800dbf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dbee:	f000 f9eb 	bl	800dfc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dbf2:	4b1d      	ldr	r3, [pc, #116]	@ (800dc68 <xTaskResumeAll+0x134>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d010      	beq.n	800dc20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dbfe:	f000 f837 	bl	800dc70 <xTaskIncrementTick>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc08:	4b16      	ldr	r3, [pc, #88]	@ (800dc64 <xTaskResumeAll+0x130>)
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	3b01      	subs	r3, #1
 800dc12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1f1      	bne.n	800dbfe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dc1a:	4b13      	ldr	r3, [pc, #76]	@ (800dc68 <xTaskResumeAll+0x134>)
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc20:	4b10      	ldr	r3, [pc, #64]	@ (800dc64 <xTaskResumeAll+0x130>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d009      	beq.n	800dc3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc2c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc6c <xTaskResumeAll+0x138>)
 800dc2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc3c:	f000 fbae 	bl	800e39c <vPortExitCritical>

	return xAlreadyYielded;
 800dc40:	68bb      	ldr	r3, [r7, #8]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	200011fc 	.word	0x200011fc
 800dc50:	200011d4 	.word	0x200011d4
 800dc54:	20001194 	.word	0x20001194
 800dc58:	200011dc 	.word	0x200011dc
 800dc5c:	200010d8 	.word	0x200010d8
 800dc60:	200010d4 	.word	0x200010d4
 800dc64:	200011e8 	.word	0x200011e8
 800dc68:	200011e4 	.word	0x200011e4
 800dc6c:	e000ed04 	.word	0xe000ed04

0800dc70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc76:	2300      	movs	r3, #0
 800dc78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc7a:	4b4f      	ldr	r3, [pc, #316]	@ (800ddb8 <xTaskIncrementTick+0x148>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f040 808f 	bne.w	800dda2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc84:	4b4d      	ldr	r3, [pc, #308]	@ (800ddbc <xTaskIncrementTick+0x14c>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc8c:	4a4b      	ldr	r2, [pc, #300]	@ (800ddbc <xTaskIncrementTick+0x14c>)
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d121      	bne.n	800dcdc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc98:	4b49      	ldr	r3, [pc, #292]	@ (800ddc0 <xTaskIncrementTick+0x150>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00b      	beq.n	800dcba <xTaskIncrementTick+0x4a>
	__asm volatile
 800dca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca6:	f383 8811 	msr	BASEPRI, r3
 800dcaa:	f3bf 8f6f 	isb	sy
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	603b      	str	r3, [r7, #0]
}
 800dcb4:	bf00      	nop
 800dcb6:	bf00      	nop
 800dcb8:	e7fd      	b.n	800dcb6 <xTaskIncrementTick+0x46>
 800dcba:	4b41      	ldr	r3, [pc, #260]	@ (800ddc0 <xTaskIncrementTick+0x150>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	60fb      	str	r3, [r7, #12]
 800dcc0:	4b40      	ldr	r3, [pc, #256]	@ (800ddc4 <xTaskIncrementTick+0x154>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a3e      	ldr	r2, [pc, #248]	@ (800ddc0 <xTaskIncrementTick+0x150>)
 800dcc6:	6013      	str	r3, [r2, #0]
 800dcc8:	4a3e      	ldr	r2, [pc, #248]	@ (800ddc4 <xTaskIncrementTick+0x154>)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6013      	str	r3, [r2, #0]
 800dcce:	4b3e      	ldr	r3, [pc, #248]	@ (800ddc8 <xTaskIncrementTick+0x158>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	4a3c      	ldr	r2, [pc, #240]	@ (800ddc8 <xTaskIncrementTick+0x158>)
 800dcd6:	6013      	str	r3, [r2, #0]
 800dcd8:	f000 f976 	bl	800dfc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dcdc:	4b3b      	ldr	r3, [pc, #236]	@ (800ddcc <xTaskIncrementTick+0x15c>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d348      	bcc.n	800dd78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dce6:	4b36      	ldr	r3, [pc, #216]	@ (800ddc0 <xTaskIncrementTick+0x150>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d104      	bne.n	800dcfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcf0:	4b36      	ldr	r3, [pc, #216]	@ (800ddcc <xTaskIncrementTick+0x15c>)
 800dcf2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcf6:	601a      	str	r2, [r3, #0]
					break;
 800dcf8:	e03e      	b.n	800dd78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcfa:	4b31      	ldr	r3, [pc, #196]	@ (800ddc0 <xTaskIncrementTick+0x150>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	68db      	ldr	r3, [r3, #12]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd0a:	693a      	ldr	r2, [r7, #16]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d203      	bcs.n	800dd1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd12:	4a2e      	ldr	r2, [pc, #184]	@ (800ddcc <xTaskIncrementTick+0x15c>)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd18:	e02e      	b.n	800dd78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7ff fc8b 	bl	800d63a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d004      	beq.n	800dd36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	3318      	adds	r3, #24
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff fc82 	bl	800d63a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	409a      	lsls	r2, r3
 800dd3e:	4b24      	ldr	r3, [pc, #144]	@ (800ddd0 <xTaskIncrementTick+0x160>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4313      	orrs	r3, r2
 800dd44:	4a22      	ldr	r2, [pc, #136]	@ (800ddd0 <xTaskIncrementTick+0x160>)
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4413      	add	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4a1f      	ldr	r2, [pc, #124]	@ (800ddd4 <xTaskIncrementTick+0x164>)
 800dd56:	441a      	add	r2, r3
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	4610      	mov	r0, r2
 800dd60:	f7ff fc0e 	bl	800d580 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd68:	4b1b      	ldr	r3, [pc, #108]	@ (800ddd8 <xTaskIncrementTick+0x168>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d3b9      	bcc.n	800dce6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dd72:	2301      	movs	r3, #1
 800dd74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd76:	e7b6      	b.n	800dce6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd78:	4b17      	ldr	r3, [pc, #92]	@ (800ddd8 <xTaskIncrementTick+0x168>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd7e:	4915      	ldr	r1, [pc, #84]	@ (800ddd4 <xTaskIncrementTick+0x164>)
 800dd80:	4613      	mov	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4413      	add	r3, r2
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	440b      	add	r3, r1
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d901      	bls.n	800dd94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dd90:	2301      	movs	r3, #1
 800dd92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd94:	4b11      	ldr	r3, [pc, #68]	@ (800dddc <xTaskIncrementTick+0x16c>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d007      	beq.n	800ddac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	617b      	str	r3, [r7, #20]
 800dda0:	e004      	b.n	800ddac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dda2:	4b0f      	ldr	r3, [pc, #60]	@ (800dde0 <xTaskIncrementTick+0x170>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	3301      	adds	r3, #1
 800dda8:	4a0d      	ldr	r2, [pc, #52]	@ (800dde0 <xTaskIncrementTick+0x170>)
 800ddaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ddac:	697b      	ldr	r3, [r7, #20]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3718      	adds	r7, #24
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	200011fc 	.word	0x200011fc
 800ddbc:	200011d8 	.word	0x200011d8
 800ddc0:	2000118c 	.word	0x2000118c
 800ddc4:	20001190 	.word	0x20001190
 800ddc8:	200011ec 	.word	0x200011ec
 800ddcc:	200011f4 	.word	0x200011f4
 800ddd0:	200011dc 	.word	0x200011dc
 800ddd4:	200010d8 	.word	0x200010d8
 800ddd8:	200010d4 	.word	0x200010d4
 800dddc:	200011e8 	.word	0x200011e8
 800dde0:	200011e4 	.word	0x200011e4

0800dde4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dde4:	b480      	push	{r7}
 800dde6:	b087      	sub	sp, #28
 800dde8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ddea:	4b27      	ldr	r3, [pc, #156]	@ (800de88 <vTaskSwitchContext+0xa4>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d003      	beq.n	800ddfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ddf2:	4b26      	ldr	r3, [pc, #152]	@ (800de8c <vTaskSwitchContext+0xa8>)
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ddf8:	e040      	b.n	800de7c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ddfa:	4b24      	ldr	r3, [pc, #144]	@ (800de8c <vTaskSwitchContext+0xa8>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de00:	4b23      	ldr	r3, [pc, #140]	@ (800de90 <vTaskSwitchContext+0xac>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	fab3 f383 	clz	r3, r3
 800de0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800de0e:	7afb      	ldrb	r3, [r7, #11]
 800de10:	f1c3 031f 	rsb	r3, r3, #31
 800de14:	617b      	str	r3, [r7, #20]
 800de16:	491f      	ldr	r1, [pc, #124]	@ (800de94 <vTaskSwitchContext+0xb0>)
 800de18:	697a      	ldr	r2, [r7, #20]
 800de1a:	4613      	mov	r3, r2
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	4413      	add	r3, r2
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	440b      	add	r3, r1
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d10b      	bne.n	800de42 <vTaskSwitchContext+0x5e>
	__asm volatile
 800de2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2e:	f383 8811 	msr	BASEPRI, r3
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	607b      	str	r3, [r7, #4]
}
 800de3c:	bf00      	nop
 800de3e:	bf00      	nop
 800de40:	e7fd      	b.n	800de3e <vTaskSwitchContext+0x5a>
 800de42:	697a      	ldr	r2, [r7, #20]
 800de44:	4613      	mov	r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4413      	add	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4a11      	ldr	r2, [pc, #68]	@ (800de94 <vTaskSwitchContext+0xb0>)
 800de4e:	4413      	add	r3, r2
 800de50:	613b      	str	r3, [r7, #16]
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	605a      	str	r2, [r3, #4]
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	3308      	adds	r3, #8
 800de64:	429a      	cmp	r2, r3
 800de66:	d104      	bne.n	800de72 <vTaskSwitchContext+0x8e>
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	685a      	ldr	r2, [r3, #4]
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	605a      	str	r2, [r3, #4]
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	4a07      	ldr	r2, [pc, #28]	@ (800de98 <vTaskSwitchContext+0xb4>)
 800de7a:	6013      	str	r3, [r2, #0]
}
 800de7c:	bf00      	nop
 800de7e:	371c      	adds	r7, #28
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr
 800de88:	200011fc 	.word	0x200011fc
 800de8c:	200011e8 	.word	0x200011e8
 800de90:	200011dc 	.word	0x200011dc
 800de94:	200010d8 	.word	0x200010d8
 800de98:	200010d4 	.word	0x200010d4

0800de9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dea4:	f000 f852 	bl	800df4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dea8:	4b06      	ldr	r3, [pc, #24]	@ (800dec4 <prvIdleTask+0x28>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d9f9      	bls.n	800dea4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800deb0:	4b05      	ldr	r3, [pc, #20]	@ (800dec8 <prvIdleTask+0x2c>)
 800deb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800deb6:	601a      	str	r2, [r3, #0]
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dec0:	e7f0      	b.n	800dea4 <prvIdleTask+0x8>
 800dec2:	bf00      	nop
 800dec4:	200010d8 	.word	0x200010d8
 800dec8:	e000ed04 	.word	0xe000ed04

0800decc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ded2:	2300      	movs	r3, #0
 800ded4:	607b      	str	r3, [r7, #4]
 800ded6:	e00c      	b.n	800def2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	4613      	mov	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	4413      	add	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	4a12      	ldr	r2, [pc, #72]	@ (800df2c <prvInitialiseTaskLists+0x60>)
 800dee4:	4413      	add	r3, r2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff fb1d 	bl	800d526 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	3301      	adds	r3, #1
 800def0:	607b      	str	r3, [r7, #4]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b06      	cmp	r3, #6
 800def6:	d9ef      	bls.n	800ded8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800def8:	480d      	ldr	r0, [pc, #52]	@ (800df30 <prvInitialiseTaskLists+0x64>)
 800defa:	f7ff fb14 	bl	800d526 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800defe:	480d      	ldr	r0, [pc, #52]	@ (800df34 <prvInitialiseTaskLists+0x68>)
 800df00:	f7ff fb11 	bl	800d526 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df04:	480c      	ldr	r0, [pc, #48]	@ (800df38 <prvInitialiseTaskLists+0x6c>)
 800df06:	f7ff fb0e 	bl	800d526 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df0a:	480c      	ldr	r0, [pc, #48]	@ (800df3c <prvInitialiseTaskLists+0x70>)
 800df0c:	f7ff fb0b 	bl	800d526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df10:	480b      	ldr	r0, [pc, #44]	@ (800df40 <prvInitialiseTaskLists+0x74>)
 800df12:	f7ff fb08 	bl	800d526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df16:	4b0b      	ldr	r3, [pc, #44]	@ (800df44 <prvInitialiseTaskLists+0x78>)
 800df18:	4a05      	ldr	r2, [pc, #20]	@ (800df30 <prvInitialiseTaskLists+0x64>)
 800df1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df1c:	4b0a      	ldr	r3, [pc, #40]	@ (800df48 <prvInitialiseTaskLists+0x7c>)
 800df1e:	4a05      	ldr	r2, [pc, #20]	@ (800df34 <prvInitialiseTaskLists+0x68>)
 800df20:	601a      	str	r2, [r3, #0]
}
 800df22:	bf00      	nop
 800df24:	3708      	adds	r7, #8
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	200010d8 	.word	0x200010d8
 800df30:	20001164 	.word	0x20001164
 800df34:	20001178 	.word	0x20001178
 800df38:	20001194 	.word	0x20001194
 800df3c:	200011a8 	.word	0x200011a8
 800df40:	200011c0 	.word	0x200011c0
 800df44:	2000118c 	.word	0x2000118c
 800df48:	20001190 	.word	0x20001190

0800df4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df52:	e019      	b.n	800df88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df54:	f000 f9f0 	bl	800e338 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df58:	4b10      	ldr	r3, [pc, #64]	@ (800df9c <prvCheckTasksWaitingTermination+0x50>)
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	3304      	adds	r3, #4
 800df64:	4618      	mov	r0, r3
 800df66:	f7ff fb68 	bl	800d63a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa0 <prvCheckTasksWaitingTermination+0x54>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	3b01      	subs	r3, #1
 800df70:	4a0b      	ldr	r2, [pc, #44]	@ (800dfa0 <prvCheckTasksWaitingTermination+0x54>)
 800df72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df74:	4b0b      	ldr	r3, [pc, #44]	@ (800dfa4 <prvCheckTasksWaitingTermination+0x58>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	3b01      	subs	r3, #1
 800df7a:	4a0a      	ldr	r2, [pc, #40]	@ (800dfa4 <prvCheckTasksWaitingTermination+0x58>)
 800df7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df7e:	f000 fa0d 	bl	800e39c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f810 	bl	800dfa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df88:	4b06      	ldr	r3, [pc, #24]	@ (800dfa4 <prvCheckTasksWaitingTermination+0x58>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1e1      	bne.n	800df54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df90:	bf00      	nop
 800df92:	bf00      	nop
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	200011a8 	.word	0x200011a8
 800dfa0:	200011d4 	.word	0x200011d4
 800dfa4:	200011bc 	.word	0x200011bc

0800dfa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f000 fb6d 	bl	800e694 <vPortFree>
			vPortFree( pxTCB );
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fb6a 	bl	800e694 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dfc0:	bf00      	nop
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfce:	4b0c      	ldr	r3, [pc, #48]	@ (800e000 <prvResetNextTaskUnblockTime+0x38>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d104      	bne.n	800dfe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dfd8:	4b0a      	ldr	r3, [pc, #40]	@ (800e004 <prvResetNextTaskUnblockTime+0x3c>)
 800dfda:	f04f 32ff 	mov.w	r2, #4294967295
 800dfde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dfe0:	e008      	b.n	800dff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfe2:	4b07      	ldr	r3, [pc, #28]	@ (800e000 <prvResetNextTaskUnblockTime+0x38>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	4a04      	ldr	r2, [pc, #16]	@ (800e004 <prvResetNextTaskUnblockTime+0x3c>)
 800dff2:	6013      	str	r3, [r2, #0]
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	2000118c 	.word	0x2000118c
 800e004:	200011f4 	.word	0x200011f4

0800e008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e012:	4b29      	ldr	r3, [pc, #164]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e018:	4b28      	ldr	r3, [pc, #160]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4618      	mov	r0, r3
 800e020:	f7ff fb0b 	bl	800d63a <uxListRemove>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d10b      	bne.n	800e042 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e02a:	4b24      	ldr	r3, [pc, #144]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e030:	2201      	movs	r2, #1
 800e032:	fa02 f303 	lsl.w	r3, r2, r3
 800e036:	43da      	mvns	r2, r3
 800e038:	4b21      	ldr	r3, [pc, #132]	@ (800e0c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4013      	ands	r3, r2
 800e03e:	4a20      	ldr	r2, [pc, #128]	@ (800e0c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e040:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e048:	d10a      	bne.n	800e060 <prvAddCurrentTaskToDelayedList+0x58>
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d007      	beq.n	800e060 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e050:	4b1a      	ldr	r3, [pc, #104]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	3304      	adds	r3, #4
 800e056:	4619      	mov	r1, r3
 800e058:	481a      	ldr	r0, [pc, #104]	@ (800e0c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e05a:	f7ff fa91 	bl	800d580 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e05e:	e026      	b.n	800e0ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4413      	add	r3, r2
 800e066:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e068:	4b14      	ldr	r3, [pc, #80]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	68ba      	ldr	r2, [r7, #8]
 800e06e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e070:	68ba      	ldr	r2, [r7, #8]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	429a      	cmp	r2, r3
 800e076:	d209      	bcs.n	800e08c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e078:	4b13      	ldr	r3, [pc, #76]	@ (800e0c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	4b0f      	ldr	r3, [pc, #60]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	3304      	adds	r3, #4
 800e082:	4619      	mov	r1, r3
 800e084:	4610      	mov	r0, r2
 800e086:	f7ff fa9f 	bl	800d5c8 <vListInsert>
}
 800e08a:	e010      	b.n	800e0ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e08c:	4b0f      	ldr	r3, [pc, #60]	@ (800e0cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	4b0a      	ldr	r3, [pc, #40]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3304      	adds	r3, #4
 800e096:	4619      	mov	r1, r3
 800e098:	4610      	mov	r0, r2
 800e09a:	f7ff fa95 	bl	800d5c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e09e:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	68ba      	ldr	r2, [r7, #8]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d202      	bcs.n	800e0ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e0a8:	4a09      	ldr	r2, [pc, #36]	@ (800e0d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	6013      	str	r3, [r2, #0]
}
 800e0ae:	bf00      	nop
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	200011d8 	.word	0x200011d8
 800e0bc:	200010d4 	.word	0x200010d4
 800e0c0:	200011dc 	.word	0x200011dc
 800e0c4:	200011c0 	.word	0x200011c0
 800e0c8:	20001190 	.word	0x20001190
 800e0cc:	2000118c 	.word	0x2000118c
 800e0d0:	200011f4 	.word	0x200011f4

0800e0d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b085      	sub	sp, #20
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	3b04      	subs	r3, #4
 800e0e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e0ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	3b04      	subs	r3, #4
 800e0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	f023 0201 	bic.w	r2, r3, #1
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	3b04      	subs	r3, #4
 800e102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e104:	4a0c      	ldr	r2, [pc, #48]	@ (800e138 <pxPortInitialiseStack+0x64>)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	3b14      	subs	r3, #20
 800e10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3b04      	subs	r3, #4
 800e11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f06f 0202 	mvn.w	r2, #2
 800e122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3b20      	subs	r3, #32
 800e128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e12a:	68fb      	ldr	r3, [r7, #12]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	0800e13d 	.word	0x0800e13d

0800e13c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e142:	2300      	movs	r3, #0
 800e144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e146:	4b13      	ldr	r3, [pc, #76]	@ (800e194 <prvTaskExitError+0x58>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14e:	d00b      	beq.n	800e168 <prvTaskExitError+0x2c>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	60fb      	str	r3, [r7, #12]
}
 800e162:	bf00      	nop
 800e164:	bf00      	nop
 800e166:	e7fd      	b.n	800e164 <prvTaskExitError+0x28>
	__asm volatile
 800e168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16c:	f383 8811 	msr	BASEPRI, r3
 800e170:	f3bf 8f6f 	isb	sy
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	60bb      	str	r3, [r7, #8]
}
 800e17a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e17c:	bf00      	nop
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d0fc      	beq.n	800e17e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e184:	bf00      	nop
 800e186:	bf00      	nop
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr
 800e192:	bf00      	nop
 800e194:	2000003c 	.word	0x2000003c
	...

0800e1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1a0:	4b07      	ldr	r3, [pc, #28]	@ (800e1c0 <pxCurrentTCBConst2>)
 800e1a2:	6819      	ldr	r1, [r3, #0]
 800e1a4:	6808      	ldr	r0, [r1, #0]
 800e1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1aa:	f380 8809 	msr	PSP, r0
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f04f 0000 	mov.w	r0, #0
 800e1b6:	f380 8811 	msr	BASEPRI, r0
 800e1ba:	4770      	bx	lr
 800e1bc:	f3af 8000 	nop.w

0800e1c0 <pxCurrentTCBConst2>:
 800e1c0:	200010d4 	.word	0x200010d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e1c4:	bf00      	nop
 800e1c6:	bf00      	nop

0800e1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1c8:	4808      	ldr	r0, [pc, #32]	@ (800e1ec <prvPortStartFirstTask+0x24>)
 800e1ca:	6800      	ldr	r0, [r0, #0]
 800e1cc:	6800      	ldr	r0, [r0, #0]
 800e1ce:	f380 8808 	msr	MSP, r0
 800e1d2:	f04f 0000 	mov.w	r0, #0
 800e1d6:	f380 8814 	msr	CONTROL, r0
 800e1da:	b662      	cpsie	i
 800e1dc:	b661      	cpsie	f
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	df00      	svc	0
 800e1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1ea:	bf00      	nop
 800e1ec:	e000ed08 	.word	0xe000ed08

0800e1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e1f6:	4b47      	ldr	r3, [pc, #284]	@ (800e314 <xPortStartScheduler+0x124>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a47      	ldr	r2, [pc, #284]	@ (800e318 <xPortStartScheduler+0x128>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d10b      	bne.n	800e218 <xPortStartScheduler+0x28>
	__asm volatile
 800e200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	60fb      	str	r3, [r7, #12]
}
 800e212:	bf00      	nop
 800e214:	bf00      	nop
 800e216:	e7fd      	b.n	800e214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e218:	4b3e      	ldr	r3, [pc, #248]	@ (800e314 <xPortStartScheduler+0x124>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a3f      	ldr	r2, [pc, #252]	@ (800e31c <xPortStartScheduler+0x12c>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d10b      	bne.n	800e23a <xPortStartScheduler+0x4a>
	__asm volatile
 800e222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	613b      	str	r3, [r7, #16]
}
 800e234:	bf00      	nop
 800e236:	bf00      	nop
 800e238:	e7fd      	b.n	800e236 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e23a:	4b39      	ldr	r3, [pc, #228]	@ (800e320 <xPortStartScheduler+0x130>)
 800e23c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	b2db      	uxtb	r3, r3
 800e244:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	22ff      	movs	r2, #255	@ 0xff
 800e24a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	b2db      	uxtb	r3, r3
 800e252:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e254:	78fb      	ldrb	r3, [r7, #3]
 800e256:	b2db      	uxtb	r3, r3
 800e258:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e25c:	b2da      	uxtb	r2, r3
 800e25e:	4b31      	ldr	r3, [pc, #196]	@ (800e324 <xPortStartScheduler+0x134>)
 800e260:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e262:	4b31      	ldr	r3, [pc, #196]	@ (800e328 <xPortStartScheduler+0x138>)
 800e264:	2207      	movs	r2, #7
 800e266:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e268:	e009      	b.n	800e27e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e26a:	4b2f      	ldr	r3, [pc, #188]	@ (800e328 <xPortStartScheduler+0x138>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	3b01      	subs	r3, #1
 800e270:	4a2d      	ldr	r2, [pc, #180]	@ (800e328 <xPortStartScheduler+0x138>)
 800e272:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e274:	78fb      	ldrb	r3, [r7, #3]
 800e276:	b2db      	uxtb	r3, r3
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e27e:	78fb      	ldrb	r3, [r7, #3]
 800e280:	b2db      	uxtb	r3, r3
 800e282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e286:	2b80      	cmp	r3, #128	@ 0x80
 800e288:	d0ef      	beq.n	800e26a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e28a:	4b27      	ldr	r3, [pc, #156]	@ (800e328 <xPortStartScheduler+0x138>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f1c3 0307 	rsb	r3, r3, #7
 800e292:	2b04      	cmp	r3, #4
 800e294:	d00b      	beq.n	800e2ae <xPortStartScheduler+0xbe>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	60bb      	str	r3, [r7, #8]
}
 800e2a8:	bf00      	nop
 800e2aa:	bf00      	nop
 800e2ac:	e7fd      	b.n	800e2aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e2ae:	4b1e      	ldr	r3, [pc, #120]	@ (800e328 <xPortStartScheduler+0x138>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	021b      	lsls	r3, r3, #8
 800e2b4:	4a1c      	ldr	r2, [pc, #112]	@ (800e328 <xPortStartScheduler+0x138>)
 800e2b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2b8:	4b1b      	ldr	r3, [pc, #108]	@ (800e328 <xPortStartScheduler+0x138>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e2c0:	4a19      	ldr	r2, [pc, #100]	@ (800e328 <xPortStartScheduler+0x138>)
 800e2c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	b2da      	uxtb	r2, r3
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e2cc:	4b17      	ldr	r3, [pc, #92]	@ (800e32c <xPortStartScheduler+0x13c>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a16      	ldr	r2, [pc, #88]	@ (800e32c <xPortStartScheduler+0x13c>)
 800e2d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e2d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2d8:	4b14      	ldr	r3, [pc, #80]	@ (800e32c <xPortStartScheduler+0x13c>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a13      	ldr	r2, [pc, #76]	@ (800e32c <xPortStartScheduler+0x13c>)
 800e2de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e2e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2e4:	f000 f8da 	bl	800e49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2e8:	4b11      	ldr	r3, [pc, #68]	@ (800e330 <xPortStartScheduler+0x140>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2ee:	f000 f8f9 	bl	800e4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2f2:	4b10      	ldr	r3, [pc, #64]	@ (800e334 <xPortStartScheduler+0x144>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a0f      	ldr	r2, [pc, #60]	@ (800e334 <xPortStartScheduler+0x144>)
 800e2f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e2fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e2fe:	f7ff ff63 	bl	800e1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e302:	f7ff fd6f 	bl	800dde4 <vTaskSwitchContext>
	prvTaskExitError();
 800e306:	f7ff ff19 	bl	800e13c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3718      	adds	r7, #24
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	e000ed00 	.word	0xe000ed00
 800e318:	410fc271 	.word	0x410fc271
 800e31c:	410fc270 	.word	0x410fc270
 800e320:	e000e400 	.word	0xe000e400
 800e324:	20001200 	.word	0x20001200
 800e328:	20001204 	.word	0x20001204
 800e32c:	e000ed20 	.word	0xe000ed20
 800e330:	2000003c 	.word	0x2000003c
 800e334:	e000ef34 	.word	0xe000ef34

0800e338 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	607b      	str	r3, [r7, #4]
}
 800e350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e352:	4b10      	ldr	r3, [pc, #64]	@ (800e394 <vPortEnterCritical+0x5c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	3301      	adds	r3, #1
 800e358:	4a0e      	ldr	r2, [pc, #56]	@ (800e394 <vPortEnterCritical+0x5c>)
 800e35a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e35c:	4b0d      	ldr	r3, [pc, #52]	@ (800e394 <vPortEnterCritical+0x5c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d110      	bne.n	800e386 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e364:	4b0c      	ldr	r3, [pc, #48]	@ (800e398 <vPortEnterCritical+0x60>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00b      	beq.n	800e386 <vPortEnterCritical+0x4e>
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	603b      	str	r3, [r7, #0]
}
 800e380:	bf00      	nop
 800e382:	bf00      	nop
 800e384:	e7fd      	b.n	800e382 <vPortEnterCritical+0x4a>
	}
}
 800e386:	bf00      	nop
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	2000003c 	.word	0x2000003c
 800e398:	e000ed04 	.word	0xe000ed04

0800e39c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e3a2:	4b12      	ldr	r3, [pc, #72]	@ (800e3ec <vPortExitCritical+0x50>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d10b      	bne.n	800e3c2 <vPortExitCritical+0x26>
	__asm volatile
 800e3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ae:	f383 8811 	msr	BASEPRI, r3
 800e3b2:	f3bf 8f6f 	isb	sy
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	607b      	str	r3, [r7, #4]
}
 800e3bc:	bf00      	nop
 800e3be:	bf00      	nop
 800e3c0:	e7fd      	b.n	800e3be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e3c2:	4b0a      	ldr	r3, [pc, #40]	@ (800e3ec <vPortExitCritical+0x50>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	3b01      	subs	r3, #1
 800e3c8:	4a08      	ldr	r2, [pc, #32]	@ (800e3ec <vPortExitCritical+0x50>)
 800e3ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e3cc:	4b07      	ldr	r3, [pc, #28]	@ (800e3ec <vPortExitCritical+0x50>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d105      	bne.n	800e3e0 <vPortExitCritical+0x44>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e3de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3e0:	bf00      	nop
 800e3e2:	370c      	adds	r7, #12
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr
 800e3ec:	2000003c 	.word	0x2000003c

0800e3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e3f0:	f3ef 8009 	mrs	r0, PSP
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	4b15      	ldr	r3, [pc, #84]	@ (800e450 <pxCurrentTCBConst>)
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	f01e 0f10 	tst.w	lr, #16
 800e400:	bf08      	it	eq
 800e402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40a:	6010      	str	r0, [r2, #0]
 800e40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e410:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e414:	f380 8811 	msr	BASEPRI, r0
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f7ff fce0 	bl	800dde4 <vTaskSwitchContext>
 800e424:	f04f 0000 	mov.w	r0, #0
 800e428:	f380 8811 	msr	BASEPRI, r0
 800e42c:	bc09      	pop	{r0, r3}
 800e42e:	6819      	ldr	r1, [r3, #0]
 800e430:	6808      	ldr	r0, [r1, #0]
 800e432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e436:	f01e 0f10 	tst.w	lr, #16
 800e43a:	bf08      	it	eq
 800e43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e440:	f380 8809 	msr	PSP, r0
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	f3af 8000 	nop.w

0800e450 <pxCurrentTCBConst>:
 800e450:	200010d4 	.word	0x200010d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e454:	bf00      	nop
 800e456:	bf00      	nop

0800e458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	607b      	str	r3, [r7, #4]
}
 800e470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e472:	f7ff fbfd 	bl	800dc70 <xTaskIncrementTick>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d003      	beq.n	800e484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e47c:	4b06      	ldr	r3, [pc, #24]	@ (800e498 <SysTick_Handler+0x40>)
 800e47e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	2300      	movs	r3, #0
 800e486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	f383 8811 	msr	BASEPRI, r3
}
 800e48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e490:	bf00      	nop
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	e000ed04 	.word	0xe000ed04

0800e49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e49c:	b480      	push	{r7}
 800e49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d0 <vPortSetupTimerInterrupt+0x34>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e4a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d4 <vPortSetupTimerInterrupt+0x38>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e4ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e4d8 <vPortSetupTimerInterrupt+0x3c>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a0a      	ldr	r2, [pc, #40]	@ (800e4dc <vPortSetupTimerInterrupt+0x40>)
 800e4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b6:	099b      	lsrs	r3, r3, #6
 800e4b8:	4a09      	ldr	r2, [pc, #36]	@ (800e4e0 <vPortSetupTimerInterrupt+0x44>)
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e4be:	4b04      	ldr	r3, [pc, #16]	@ (800e4d0 <vPortSetupTimerInterrupt+0x34>)
 800e4c0:	2207      	movs	r2, #7
 800e4c2:	601a      	str	r2, [r3, #0]
}
 800e4c4:	bf00      	nop
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	e000e010 	.word	0xe000e010
 800e4d4:	e000e018 	.word	0xe000e018
 800e4d8:	20000018 	.word	0x20000018
 800e4dc:	10624dd3 	.word	0x10624dd3
 800e4e0:	e000e014 	.word	0xe000e014

0800e4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e4f4 <vPortEnableVFP+0x10>
 800e4e8:	6801      	ldr	r1, [r0, #0]
 800e4ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e4ee:	6001      	str	r1, [r0, #0]
 800e4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e4f2:	bf00      	nop
 800e4f4:	e000ed88 	.word	0xe000ed88

0800e4f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08a      	sub	sp, #40	@ 0x28
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e500:	2300      	movs	r3, #0
 800e502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e504:	f7ff fb08 	bl	800db18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e508:	4b5c      	ldr	r3, [pc, #368]	@ (800e67c <pvPortMalloc+0x184>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d101      	bne.n	800e514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e510:	f000 f924 	bl	800e75c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e514:	4b5a      	ldr	r3, [pc, #360]	@ (800e680 <pvPortMalloc+0x188>)
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4013      	ands	r3, r2
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	f040 8095 	bne.w	800e64c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d01e      	beq.n	800e566 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e528:	2208      	movs	r2, #8
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4413      	add	r3, r2
 800e52e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f003 0307 	and.w	r3, r3, #7
 800e536:	2b00      	cmp	r3, #0
 800e538:	d015      	beq.n	800e566 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f023 0307 	bic.w	r3, r3, #7
 800e540:	3308      	adds	r3, #8
 800e542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f003 0307 	and.w	r3, r3, #7
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00b      	beq.n	800e566 <pvPortMalloc+0x6e>
	__asm volatile
 800e54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	617b      	str	r3, [r7, #20]
}
 800e560:	bf00      	nop
 800e562:	bf00      	nop
 800e564:	e7fd      	b.n	800e562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d06f      	beq.n	800e64c <pvPortMalloc+0x154>
 800e56c:	4b45      	ldr	r3, [pc, #276]	@ (800e684 <pvPortMalloc+0x18c>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	429a      	cmp	r2, r3
 800e574:	d86a      	bhi.n	800e64c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e576:	4b44      	ldr	r3, [pc, #272]	@ (800e688 <pvPortMalloc+0x190>)
 800e578:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e57a:	4b43      	ldr	r3, [pc, #268]	@ (800e688 <pvPortMalloc+0x190>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e580:	e004      	b.n	800e58c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e584:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	429a      	cmp	r2, r3
 800e594:	d903      	bls.n	800e59e <pvPortMalloc+0xa6>
 800e596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1f1      	bne.n	800e582 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e59e:	4b37      	ldr	r3, [pc, #220]	@ (800e67c <pvPortMalloc+0x184>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d051      	beq.n	800e64c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5a8:	6a3b      	ldr	r3, [r7, #32]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2208      	movs	r2, #8
 800e5ae:	4413      	add	r3, r2
 800e5b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5bc:	685a      	ldr	r2, [r3, #4]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	1ad2      	subs	r2, r2, r3
 800e5c2:	2308      	movs	r3, #8
 800e5c4:	005b      	lsls	r3, r3, #1
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d920      	bls.n	800e60c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	f003 0307 	and.w	r3, r3, #7
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00b      	beq.n	800e5f4 <pvPortMalloc+0xfc>
	__asm volatile
 800e5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e0:	f383 8811 	msr	BASEPRI, r3
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	f3bf 8f4f 	dsb	sy
 800e5ec:	613b      	str	r3, [r7, #16]
}
 800e5ee:	bf00      	nop
 800e5f0:	bf00      	nop
 800e5f2:	e7fd      	b.n	800e5f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f6:	685a      	ldr	r2, [r3, #4]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	1ad2      	subs	r2, r2, r3
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e606:	69b8      	ldr	r0, [r7, #24]
 800e608:	f000 f90a 	bl	800e820 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e60c:	4b1d      	ldr	r3, [pc, #116]	@ (800e684 <pvPortMalloc+0x18c>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	1ad3      	subs	r3, r2, r3
 800e616:	4a1b      	ldr	r2, [pc, #108]	@ (800e684 <pvPortMalloc+0x18c>)
 800e618:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e61a:	4b1a      	ldr	r3, [pc, #104]	@ (800e684 <pvPortMalloc+0x18c>)
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	4b1b      	ldr	r3, [pc, #108]	@ (800e68c <pvPortMalloc+0x194>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	429a      	cmp	r2, r3
 800e624:	d203      	bcs.n	800e62e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e626:	4b17      	ldr	r3, [pc, #92]	@ (800e684 <pvPortMalloc+0x18c>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a18      	ldr	r2, [pc, #96]	@ (800e68c <pvPortMalloc+0x194>)
 800e62c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e630:	685a      	ldr	r2, [r3, #4]
 800e632:	4b13      	ldr	r3, [pc, #76]	@ (800e680 <pvPortMalloc+0x188>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	431a      	orrs	r2, r3
 800e638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63e:	2200      	movs	r2, #0
 800e640:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e642:	4b13      	ldr	r3, [pc, #76]	@ (800e690 <pvPortMalloc+0x198>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3301      	adds	r3, #1
 800e648:	4a11      	ldr	r2, [pc, #68]	@ (800e690 <pvPortMalloc+0x198>)
 800e64a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e64c:	f7ff fa72 	bl	800db34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	f003 0307 	and.w	r3, r3, #7
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00b      	beq.n	800e672 <pvPortMalloc+0x17a>
	__asm volatile
 800e65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e65e:	f383 8811 	msr	BASEPRI, r3
 800e662:	f3bf 8f6f 	isb	sy
 800e666:	f3bf 8f4f 	dsb	sy
 800e66a:	60fb      	str	r3, [r7, #12]
}
 800e66c:	bf00      	nop
 800e66e:	bf00      	nop
 800e670:	e7fd      	b.n	800e66e <pvPortMalloc+0x176>
	return pvReturn;
 800e672:	69fb      	ldr	r3, [r7, #28]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3728      	adds	r7, #40	@ 0x28
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	20003920 	.word	0x20003920
 800e680:	20003934 	.word	0x20003934
 800e684:	20003924 	.word	0x20003924
 800e688:	20003918 	.word	0x20003918
 800e68c:	20003928 	.word	0x20003928
 800e690:	2000392c 	.word	0x2000392c

0800e694 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d04f      	beq.n	800e746 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6a6:	2308      	movs	r3, #8
 800e6a8:	425b      	negs	r3, r3
 800e6aa:	697a      	ldr	r2, [r7, #20]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	685a      	ldr	r2, [r3, #4]
 800e6b8:	4b25      	ldr	r3, [pc, #148]	@ (800e750 <vPortFree+0xbc>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4013      	ands	r3, r2
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10b      	bne.n	800e6da <vPortFree+0x46>
	__asm volatile
 800e6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6c6:	f383 8811 	msr	BASEPRI, r3
 800e6ca:	f3bf 8f6f 	isb	sy
 800e6ce:	f3bf 8f4f 	dsb	sy
 800e6d2:	60fb      	str	r3, [r7, #12]
}
 800e6d4:	bf00      	nop
 800e6d6:	bf00      	nop
 800e6d8:	e7fd      	b.n	800e6d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00b      	beq.n	800e6fa <vPortFree+0x66>
	__asm volatile
 800e6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e6:	f383 8811 	msr	BASEPRI, r3
 800e6ea:	f3bf 8f6f 	isb	sy
 800e6ee:	f3bf 8f4f 	dsb	sy
 800e6f2:	60bb      	str	r3, [r7, #8]
}
 800e6f4:	bf00      	nop
 800e6f6:	bf00      	nop
 800e6f8:	e7fd      	b.n	800e6f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	685a      	ldr	r2, [r3, #4]
 800e6fe:	4b14      	ldr	r3, [pc, #80]	@ (800e750 <vPortFree+0xbc>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4013      	ands	r3, r2
 800e704:	2b00      	cmp	r3, #0
 800e706:	d01e      	beq.n	800e746 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d11a      	bne.n	800e746 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	685a      	ldr	r2, [r3, #4]
 800e714:	4b0e      	ldr	r3, [pc, #56]	@ (800e750 <vPortFree+0xbc>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	43db      	mvns	r3, r3
 800e71a:	401a      	ands	r2, r3
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e720:	f7ff f9fa 	bl	800db18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	685a      	ldr	r2, [r3, #4]
 800e728:	4b0a      	ldr	r3, [pc, #40]	@ (800e754 <vPortFree+0xc0>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4413      	add	r3, r2
 800e72e:	4a09      	ldr	r2, [pc, #36]	@ (800e754 <vPortFree+0xc0>)
 800e730:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e732:	6938      	ldr	r0, [r7, #16]
 800e734:	f000 f874 	bl	800e820 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e738:	4b07      	ldr	r3, [pc, #28]	@ (800e758 <vPortFree+0xc4>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3301      	adds	r3, #1
 800e73e:	4a06      	ldr	r2, [pc, #24]	@ (800e758 <vPortFree+0xc4>)
 800e740:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e742:	f7ff f9f7 	bl	800db34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e746:	bf00      	nop
 800e748:	3718      	adds	r7, #24
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	20003934 	.word	0x20003934
 800e754:	20003924 	.word	0x20003924
 800e758:	20003930 	.word	0x20003930

0800e75c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e762:	f242 7310 	movw	r3, #10000	@ 0x2710
 800e766:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e768:	4b27      	ldr	r3, [pc, #156]	@ (800e808 <prvHeapInit+0xac>)
 800e76a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f003 0307 	and.w	r3, r3, #7
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00c      	beq.n	800e790 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	3307      	adds	r3, #7
 800e77a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f023 0307 	bic.w	r3, r3, #7
 800e782:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e784:	68ba      	ldr	r2, [r7, #8]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	4a1f      	ldr	r2, [pc, #124]	@ (800e808 <prvHeapInit+0xac>)
 800e78c:	4413      	add	r3, r2
 800e78e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e794:	4a1d      	ldr	r2, [pc, #116]	@ (800e80c <prvHeapInit+0xb0>)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e79a:	4b1c      	ldr	r3, [pc, #112]	@ (800e80c <prvHeapInit+0xb0>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e7a8:	2208      	movs	r2, #8
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	1a9b      	subs	r3, r3, r2
 800e7ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f023 0307 	bic.w	r3, r3, #7
 800e7b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	4a15      	ldr	r2, [pc, #84]	@ (800e810 <prvHeapInit+0xb4>)
 800e7bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e7be:	4b14      	ldr	r3, [pc, #80]	@ (800e810 <prvHeapInit+0xb4>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e7c6:	4b12      	ldr	r3, [pc, #72]	@ (800e810 <prvHeapInit+0xb4>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	1ad2      	subs	r2, r2, r3
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7dc:	4b0c      	ldr	r3, [pc, #48]	@ (800e810 <prvHeapInit+0xb4>)
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	4a0a      	ldr	r2, [pc, #40]	@ (800e814 <prvHeapInit+0xb8>)
 800e7ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	4a09      	ldr	r2, [pc, #36]	@ (800e818 <prvHeapInit+0xbc>)
 800e7f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7f4:	4b09      	ldr	r3, [pc, #36]	@ (800e81c <prvHeapInit+0xc0>)
 800e7f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e7fa:	601a      	str	r2, [r3, #0]
}
 800e7fc:	bf00      	nop
 800e7fe:	3714      	adds	r7, #20
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	20001208 	.word	0x20001208
 800e80c:	20003918 	.word	0x20003918
 800e810:	20003920 	.word	0x20003920
 800e814:	20003928 	.word	0x20003928
 800e818:	20003924 	.word	0x20003924
 800e81c:	20003934 	.word	0x20003934

0800e820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e828:	4b28      	ldr	r3, [pc, #160]	@ (800e8cc <prvInsertBlockIntoFreeList+0xac>)
 800e82a:	60fb      	str	r3, [r7, #12]
 800e82c:	e002      	b.n	800e834 <prvInsertBlockIntoFreeList+0x14>
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	60fb      	str	r3, [r7, #12]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d8f7      	bhi.n	800e82e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	68ba      	ldr	r2, [r7, #8]
 800e848:	4413      	add	r3, r2
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d108      	bne.n	800e862 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	685a      	ldr	r2, [r3, #4]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	441a      	add	r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	441a      	add	r2, r3
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	429a      	cmp	r2, r3
 800e874:	d118      	bne.n	800e8a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	4b15      	ldr	r3, [pc, #84]	@ (800e8d0 <prvInsertBlockIntoFreeList+0xb0>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d00d      	beq.n	800e89e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	685a      	ldr	r2, [r3, #4]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	441a      	add	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	e008      	b.n	800e8b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e89e:	4b0c      	ldr	r3, [pc, #48]	@ (800e8d0 <prvInsertBlockIntoFreeList+0xb0>)
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	e003      	b.n	800e8b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681a      	ldr	r2, [r3, #0]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d002      	beq.n	800e8be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8be:	bf00      	nop
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr
 800e8ca:	bf00      	nop
 800e8cc:	20003918 	.word	0x20003918
 800e8d0:	20003920 	.word	0x20003920

0800e8d4 <abs>:
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	bfb8      	it	lt
 800e8d8:	4240      	neglt	r0, r0
 800e8da:	4770      	bx	lr

0800e8dc <__cvt>:
 800e8dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e0:	ec57 6b10 	vmov	r6, r7, d0
 800e8e4:	2f00      	cmp	r7, #0
 800e8e6:	460c      	mov	r4, r1
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	463b      	mov	r3, r7
 800e8ec:	bfbb      	ittet	lt
 800e8ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e8f2:	461f      	movlt	r7, r3
 800e8f4:	2300      	movge	r3, #0
 800e8f6:	232d      	movlt	r3, #45	@ 0x2d
 800e8f8:	700b      	strb	r3, [r1, #0]
 800e8fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e900:	4691      	mov	r9, r2
 800e902:	f023 0820 	bic.w	r8, r3, #32
 800e906:	bfbc      	itt	lt
 800e908:	4632      	movlt	r2, r6
 800e90a:	4616      	movlt	r6, r2
 800e90c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e910:	d005      	beq.n	800e91e <__cvt+0x42>
 800e912:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e916:	d100      	bne.n	800e91a <__cvt+0x3e>
 800e918:	3401      	adds	r4, #1
 800e91a:	2102      	movs	r1, #2
 800e91c:	e000      	b.n	800e920 <__cvt+0x44>
 800e91e:	2103      	movs	r1, #3
 800e920:	ab03      	add	r3, sp, #12
 800e922:	9301      	str	r3, [sp, #4]
 800e924:	ab02      	add	r3, sp, #8
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	ec47 6b10 	vmov	d0, r6, r7
 800e92c:	4653      	mov	r3, sl
 800e92e:	4622      	mov	r2, r4
 800e930:	f001 f9a6 	bl	800fc80 <_dtoa_r>
 800e934:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e938:	4605      	mov	r5, r0
 800e93a:	d119      	bne.n	800e970 <__cvt+0x94>
 800e93c:	f019 0f01 	tst.w	r9, #1
 800e940:	d00e      	beq.n	800e960 <__cvt+0x84>
 800e942:	eb00 0904 	add.w	r9, r0, r4
 800e946:	2200      	movs	r2, #0
 800e948:	2300      	movs	r3, #0
 800e94a:	4630      	mov	r0, r6
 800e94c:	4639      	mov	r1, r7
 800e94e:	f7f2 f8e3 	bl	8000b18 <__aeabi_dcmpeq>
 800e952:	b108      	cbz	r0, 800e958 <__cvt+0x7c>
 800e954:	f8cd 900c 	str.w	r9, [sp, #12]
 800e958:	2230      	movs	r2, #48	@ 0x30
 800e95a:	9b03      	ldr	r3, [sp, #12]
 800e95c:	454b      	cmp	r3, r9
 800e95e:	d31e      	bcc.n	800e99e <__cvt+0xc2>
 800e960:	9b03      	ldr	r3, [sp, #12]
 800e962:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e964:	1b5b      	subs	r3, r3, r5
 800e966:	4628      	mov	r0, r5
 800e968:	6013      	str	r3, [r2, #0]
 800e96a:	b004      	add	sp, #16
 800e96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e970:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e974:	eb00 0904 	add.w	r9, r0, r4
 800e978:	d1e5      	bne.n	800e946 <__cvt+0x6a>
 800e97a:	7803      	ldrb	r3, [r0, #0]
 800e97c:	2b30      	cmp	r3, #48	@ 0x30
 800e97e:	d10a      	bne.n	800e996 <__cvt+0xba>
 800e980:	2200      	movs	r2, #0
 800e982:	2300      	movs	r3, #0
 800e984:	4630      	mov	r0, r6
 800e986:	4639      	mov	r1, r7
 800e988:	f7f2 f8c6 	bl	8000b18 <__aeabi_dcmpeq>
 800e98c:	b918      	cbnz	r0, 800e996 <__cvt+0xba>
 800e98e:	f1c4 0401 	rsb	r4, r4, #1
 800e992:	f8ca 4000 	str.w	r4, [sl]
 800e996:	f8da 3000 	ldr.w	r3, [sl]
 800e99a:	4499      	add	r9, r3
 800e99c:	e7d3      	b.n	800e946 <__cvt+0x6a>
 800e99e:	1c59      	adds	r1, r3, #1
 800e9a0:	9103      	str	r1, [sp, #12]
 800e9a2:	701a      	strb	r2, [r3, #0]
 800e9a4:	e7d9      	b.n	800e95a <__cvt+0x7e>

0800e9a6 <__exponent>:
 800e9a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9a8:	2900      	cmp	r1, #0
 800e9aa:	bfba      	itte	lt
 800e9ac:	4249      	neglt	r1, r1
 800e9ae:	232d      	movlt	r3, #45	@ 0x2d
 800e9b0:	232b      	movge	r3, #43	@ 0x2b
 800e9b2:	2909      	cmp	r1, #9
 800e9b4:	7002      	strb	r2, [r0, #0]
 800e9b6:	7043      	strb	r3, [r0, #1]
 800e9b8:	dd29      	ble.n	800ea0e <__exponent+0x68>
 800e9ba:	f10d 0307 	add.w	r3, sp, #7
 800e9be:	461d      	mov	r5, r3
 800e9c0:	270a      	movs	r7, #10
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	fbb1 f6f7 	udiv	r6, r1, r7
 800e9c8:	fb07 1416 	mls	r4, r7, r6, r1
 800e9cc:	3430      	adds	r4, #48	@ 0x30
 800e9ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e9d2:	460c      	mov	r4, r1
 800e9d4:	2c63      	cmp	r4, #99	@ 0x63
 800e9d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e9da:	4631      	mov	r1, r6
 800e9dc:	dcf1      	bgt.n	800e9c2 <__exponent+0x1c>
 800e9de:	3130      	adds	r1, #48	@ 0x30
 800e9e0:	1e94      	subs	r4, r2, #2
 800e9e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e9e6:	1c41      	adds	r1, r0, #1
 800e9e8:	4623      	mov	r3, r4
 800e9ea:	42ab      	cmp	r3, r5
 800e9ec:	d30a      	bcc.n	800ea04 <__exponent+0x5e>
 800e9ee:	f10d 0309 	add.w	r3, sp, #9
 800e9f2:	1a9b      	subs	r3, r3, r2
 800e9f4:	42ac      	cmp	r4, r5
 800e9f6:	bf88      	it	hi
 800e9f8:	2300      	movhi	r3, #0
 800e9fa:	3302      	adds	r3, #2
 800e9fc:	4403      	add	r3, r0
 800e9fe:	1a18      	subs	r0, r3, r0
 800ea00:	b003      	add	sp, #12
 800ea02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea04:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ea08:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ea0c:	e7ed      	b.n	800e9ea <__exponent+0x44>
 800ea0e:	2330      	movs	r3, #48	@ 0x30
 800ea10:	3130      	adds	r1, #48	@ 0x30
 800ea12:	7083      	strb	r3, [r0, #2]
 800ea14:	70c1      	strb	r1, [r0, #3]
 800ea16:	1d03      	adds	r3, r0, #4
 800ea18:	e7f1      	b.n	800e9fe <__exponent+0x58>
	...

0800ea1c <_printf_float>:
 800ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	b08d      	sub	sp, #52	@ 0x34
 800ea22:	460c      	mov	r4, r1
 800ea24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ea28:	4616      	mov	r6, r2
 800ea2a:	461f      	mov	r7, r3
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	f001 f811 	bl	800fa54 <_localeconv_r>
 800ea32:	6803      	ldr	r3, [r0, #0]
 800ea34:	9304      	str	r3, [sp, #16]
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7f1 fc42 	bl	80002c0 <strlen>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea40:	f8d8 3000 	ldr.w	r3, [r8]
 800ea44:	9005      	str	r0, [sp, #20]
 800ea46:	3307      	adds	r3, #7
 800ea48:	f023 0307 	bic.w	r3, r3, #7
 800ea4c:	f103 0208 	add.w	r2, r3, #8
 800ea50:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ea54:	f8d4 b000 	ldr.w	fp, [r4]
 800ea58:	f8c8 2000 	str.w	r2, [r8]
 800ea5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ea64:	9307      	str	r3, [sp, #28]
 800ea66:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ea6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea72:	4b9c      	ldr	r3, [pc, #624]	@ (800ece4 <_printf_float+0x2c8>)
 800ea74:	f04f 32ff 	mov.w	r2, #4294967295
 800ea78:	f7f2 f880 	bl	8000b7c <__aeabi_dcmpun>
 800ea7c:	bb70      	cbnz	r0, 800eadc <_printf_float+0xc0>
 800ea7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea82:	4b98      	ldr	r3, [pc, #608]	@ (800ece4 <_printf_float+0x2c8>)
 800ea84:	f04f 32ff 	mov.w	r2, #4294967295
 800ea88:	f7f2 f85a 	bl	8000b40 <__aeabi_dcmple>
 800ea8c:	bb30      	cbnz	r0, 800eadc <_printf_float+0xc0>
 800ea8e:	2200      	movs	r2, #0
 800ea90:	2300      	movs	r3, #0
 800ea92:	4640      	mov	r0, r8
 800ea94:	4649      	mov	r1, r9
 800ea96:	f7f2 f849 	bl	8000b2c <__aeabi_dcmplt>
 800ea9a:	b110      	cbz	r0, 800eaa2 <_printf_float+0x86>
 800ea9c:	232d      	movs	r3, #45	@ 0x2d
 800ea9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eaa2:	4a91      	ldr	r2, [pc, #580]	@ (800ece8 <_printf_float+0x2cc>)
 800eaa4:	4b91      	ldr	r3, [pc, #580]	@ (800ecec <_printf_float+0x2d0>)
 800eaa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eaaa:	bf8c      	ite	hi
 800eaac:	4690      	movhi	r8, r2
 800eaae:	4698      	movls	r8, r3
 800eab0:	2303      	movs	r3, #3
 800eab2:	6123      	str	r3, [r4, #16]
 800eab4:	f02b 0304 	bic.w	r3, fp, #4
 800eab8:	6023      	str	r3, [r4, #0]
 800eaba:	f04f 0900 	mov.w	r9, #0
 800eabe:	9700      	str	r7, [sp, #0]
 800eac0:	4633      	mov	r3, r6
 800eac2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800eac4:	4621      	mov	r1, r4
 800eac6:	4628      	mov	r0, r5
 800eac8:	f000 f9d2 	bl	800ee70 <_printf_common>
 800eacc:	3001      	adds	r0, #1
 800eace:	f040 808d 	bne.w	800ebec <_printf_float+0x1d0>
 800ead2:	f04f 30ff 	mov.w	r0, #4294967295
 800ead6:	b00d      	add	sp, #52	@ 0x34
 800ead8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eadc:	4642      	mov	r2, r8
 800eade:	464b      	mov	r3, r9
 800eae0:	4640      	mov	r0, r8
 800eae2:	4649      	mov	r1, r9
 800eae4:	f7f2 f84a 	bl	8000b7c <__aeabi_dcmpun>
 800eae8:	b140      	cbz	r0, 800eafc <_printf_float+0xe0>
 800eaea:	464b      	mov	r3, r9
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	bfbc      	itt	lt
 800eaf0:	232d      	movlt	r3, #45	@ 0x2d
 800eaf2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800eaf6:	4a7e      	ldr	r2, [pc, #504]	@ (800ecf0 <_printf_float+0x2d4>)
 800eaf8:	4b7e      	ldr	r3, [pc, #504]	@ (800ecf4 <_printf_float+0x2d8>)
 800eafa:	e7d4      	b.n	800eaa6 <_printf_float+0x8a>
 800eafc:	6863      	ldr	r3, [r4, #4]
 800eafe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800eb02:	9206      	str	r2, [sp, #24]
 800eb04:	1c5a      	adds	r2, r3, #1
 800eb06:	d13b      	bne.n	800eb80 <_printf_float+0x164>
 800eb08:	2306      	movs	r3, #6
 800eb0a:	6063      	str	r3, [r4, #4]
 800eb0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800eb10:	2300      	movs	r3, #0
 800eb12:	6022      	str	r2, [r4, #0]
 800eb14:	9303      	str	r3, [sp, #12]
 800eb16:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb18:	e9cd a301 	strd	sl, r3, [sp, #4]
 800eb1c:	ab09      	add	r3, sp, #36	@ 0x24
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	6861      	ldr	r1, [r4, #4]
 800eb22:	ec49 8b10 	vmov	d0, r8, r9
 800eb26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	f7ff fed6 	bl	800e8dc <__cvt>
 800eb30:	9b06      	ldr	r3, [sp, #24]
 800eb32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb34:	2b47      	cmp	r3, #71	@ 0x47
 800eb36:	4680      	mov	r8, r0
 800eb38:	d129      	bne.n	800eb8e <_printf_float+0x172>
 800eb3a:	1cc8      	adds	r0, r1, #3
 800eb3c:	db02      	blt.n	800eb44 <_printf_float+0x128>
 800eb3e:	6863      	ldr	r3, [r4, #4]
 800eb40:	4299      	cmp	r1, r3
 800eb42:	dd41      	ble.n	800ebc8 <_printf_float+0x1ac>
 800eb44:	f1aa 0a02 	sub.w	sl, sl, #2
 800eb48:	fa5f fa8a 	uxtb.w	sl, sl
 800eb4c:	3901      	subs	r1, #1
 800eb4e:	4652      	mov	r2, sl
 800eb50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eb54:	9109      	str	r1, [sp, #36]	@ 0x24
 800eb56:	f7ff ff26 	bl	800e9a6 <__exponent>
 800eb5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb5c:	1813      	adds	r3, r2, r0
 800eb5e:	2a01      	cmp	r2, #1
 800eb60:	4681      	mov	r9, r0
 800eb62:	6123      	str	r3, [r4, #16]
 800eb64:	dc02      	bgt.n	800eb6c <_printf_float+0x150>
 800eb66:	6822      	ldr	r2, [r4, #0]
 800eb68:	07d2      	lsls	r2, r2, #31
 800eb6a:	d501      	bpl.n	800eb70 <_printf_float+0x154>
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	6123      	str	r3, [r4, #16]
 800eb70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d0a2      	beq.n	800eabe <_printf_float+0xa2>
 800eb78:	232d      	movs	r3, #45	@ 0x2d
 800eb7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb7e:	e79e      	b.n	800eabe <_printf_float+0xa2>
 800eb80:	9a06      	ldr	r2, [sp, #24]
 800eb82:	2a47      	cmp	r2, #71	@ 0x47
 800eb84:	d1c2      	bne.n	800eb0c <_printf_float+0xf0>
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1c0      	bne.n	800eb0c <_printf_float+0xf0>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e7bd      	b.n	800eb0a <_printf_float+0xee>
 800eb8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eb92:	d9db      	bls.n	800eb4c <_printf_float+0x130>
 800eb94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800eb98:	d118      	bne.n	800ebcc <_printf_float+0x1b0>
 800eb9a:	2900      	cmp	r1, #0
 800eb9c:	6863      	ldr	r3, [r4, #4]
 800eb9e:	dd0b      	ble.n	800ebb8 <_printf_float+0x19c>
 800eba0:	6121      	str	r1, [r4, #16]
 800eba2:	b913      	cbnz	r3, 800ebaa <_printf_float+0x18e>
 800eba4:	6822      	ldr	r2, [r4, #0]
 800eba6:	07d0      	lsls	r0, r2, #31
 800eba8:	d502      	bpl.n	800ebb0 <_printf_float+0x194>
 800ebaa:	3301      	adds	r3, #1
 800ebac:	440b      	add	r3, r1
 800ebae:	6123      	str	r3, [r4, #16]
 800ebb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ebb2:	f04f 0900 	mov.w	r9, #0
 800ebb6:	e7db      	b.n	800eb70 <_printf_float+0x154>
 800ebb8:	b913      	cbnz	r3, 800ebc0 <_printf_float+0x1a4>
 800ebba:	6822      	ldr	r2, [r4, #0]
 800ebbc:	07d2      	lsls	r2, r2, #31
 800ebbe:	d501      	bpl.n	800ebc4 <_printf_float+0x1a8>
 800ebc0:	3302      	adds	r3, #2
 800ebc2:	e7f4      	b.n	800ebae <_printf_float+0x192>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e7f2      	b.n	800ebae <_printf_float+0x192>
 800ebc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ebcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebce:	4299      	cmp	r1, r3
 800ebd0:	db05      	blt.n	800ebde <_printf_float+0x1c2>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	6121      	str	r1, [r4, #16]
 800ebd6:	07d8      	lsls	r0, r3, #31
 800ebd8:	d5ea      	bpl.n	800ebb0 <_printf_float+0x194>
 800ebda:	1c4b      	adds	r3, r1, #1
 800ebdc:	e7e7      	b.n	800ebae <_printf_float+0x192>
 800ebde:	2900      	cmp	r1, #0
 800ebe0:	bfd4      	ite	le
 800ebe2:	f1c1 0202 	rsble	r2, r1, #2
 800ebe6:	2201      	movgt	r2, #1
 800ebe8:	4413      	add	r3, r2
 800ebea:	e7e0      	b.n	800ebae <_printf_float+0x192>
 800ebec:	6823      	ldr	r3, [r4, #0]
 800ebee:	055a      	lsls	r2, r3, #21
 800ebf0:	d407      	bmi.n	800ec02 <_printf_float+0x1e6>
 800ebf2:	6923      	ldr	r3, [r4, #16]
 800ebf4:	4642      	mov	r2, r8
 800ebf6:	4631      	mov	r1, r6
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	47b8      	blx	r7
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	d12b      	bne.n	800ec58 <_printf_float+0x23c>
 800ec00:	e767      	b.n	800ead2 <_printf_float+0xb6>
 800ec02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ec06:	f240 80dd 	bls.w	800edc4 <_printf_float+0x3a8>
 800ec0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec0e:	2200      	movs	r2, #0
 800ec10:	2300      	movs	r3, #0
 800ec12:	f7f1 ff81 	bl	8000b18 <__aeabi_dcmpeq>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d033      	beq.n	800ec82 <_printf_float+0x266>
 800ec1a:	4a37      	ldr	r2, [pc, #220]	@ (800ecf8 <_printf_float+0x2dc>)
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	4631      	mov	r1, r6
 800ec20:	4628      	mov	r0, r5
 800ec22:	47b8      	blx	r7
 800ec24:	3001      	adds	r0, #1
 800ec26:	f43f af54 	beq.w	800ead2 <_printf_float+0xb6>
 800ec2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ec2e:	4543      	cmp	r3, r8
 800ec30:	db02      	blt.n	800ec38 <_printf_float+0x21c>
 800ec32:	6823      	ldr	r3, [r4, #0]
 800ec34:	07d8      	lsls	r0, r3, #31
 800ec36:	d50f      	bpl.n	800ec58 <_printf_float+0x23c>
 800ec38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	4628      	mov	r0, r5
 800ec40:	47b8      	blx	r7
 800ec42:	3001      	adds	r0, #1
 800ec44:	f43f af45 	beq.w	800ead2 <_printf_float+0xb6>
 800ec48:	f04f 0900 	mov.w	r9, #0
 800ec4c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec50:	f104 0a1a 	add.w	sl, r4, #26
 800ec54:	45c8      	cmp	r8, r9
 800ec56:	dc09      	bgt.n	800ec6c <_printf_float+0x250>
 800ec58:	6823      	ldr	r3, [r4, #0]
 800ec5a:	079b      	lsls	r3, r3, #30
 800ec5c:	f100 8103 	bmi.w	800ee66 <_printf_float+0x44a>
 800ec60:	68e0      	ldr	r0, [r4, #12]
 800ec62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec64:	4298      	cmp	r0, r3
 800ec66:	bfb8      	it	lt
 800ec68:	4618      	movlt	r0, r3
 800ec6a:	e734      	b.n	800ead6 <_printf_float+0xba>
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	4652      	mov	r2, sl
 800ec70:	4631      	mov	r1, r6
 800ec72:	4628      	mov	r0, r5
 800ec74:	47b8      	blx	r7
 800ec76:	3001      	adds	r0, #1
 800ec78:	f43f af2b 	beq.w	800ead2 <_printf_float+0xb6>
 800ec7c:	f109 0901 	add.w	r9, r9, #1
 800ec80:	e7e8      	b.n	800ec54 <_printf_float+0x238>
 800ec82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	dc39      	bgt.n	800ecfc <_printf_float+0x2e0>
 800ec88:	4a1b      	ldr	r2, [pc, #108]	@ (800ecf8 <_printf_float+0x2dc>)
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	4631      	mov	r1, r6
 800ec8e:	4628      	mov	r0, r5
 800ec90:	47b8      	blx	r7
 800ec92:	3001      	adds	r0, #1
 800ec94:	f43f af1d 	beq.w	800ead2 <_printf_float+0xb6>
 800ec98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ec9c:	ea59 0303 	orrs.w	r3, r9, r3
 800eca0:	d102      	bne.n	800eca8 <_printf_float+0x28c>
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	07d9      	lsls	r1, r3, #31
 800eca6:	d5d7      	bpl.n	800ec58 <_printf_float+0x23c>
 800eca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecac:	4631      	mov	r1, r6
 800ecae:	4628      	mov	r0, r5
 800ecb0:	47b8      	blx	r7
 800ecb2:	3001      	adds	r0, #1
 800ecb4:	f43f af0d 	beq.w	800ead2 <_printf_float+0xb6>
 800ecb8:	f04f 0a00 	mov.w	sl, #0
 800ecbc:	f104 0b1a 	add.w	fp, r4, #26
 800ecc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecc2:	425b      	negs	r3, r3
 800ecc4:	4553      	cmp	r3, sl
 800ecc6:	dc01      	bgt.n	800eccc <_printf_float+0x2b0>
 800ecc8:	464b      	mov	r3, r9
 800ecca:	e793      	b.n	800ebf4 <_printf_float+0x1d8>
 800eccc:	2301      	movs	r3, #1
 800ecce:	465a      	mov	r2, fp
 800ecd0:	4631      	mov	r1, r6
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	47b8      	blx	r7
 800ecd6:	3001      	adds	r0, #1
 800ecd8:	f43f aefb 	beq.w	800ead2 <_printf_float+0xb6>
 800ecdc:	f10a 0a01 	add.w	sl, sl, #1
 800ece0:	e7ee      	b.n	800ecc0 <_printf_float+0x2a4>
 800ece2:	bf00      	nop
 800ece4:	7fefffff 	.word	0x7fefffff
 800ece8:	08015374 	.word	0x08015374
 800ecec:	08015370 	.word	0x08015370
 800ecf0:	0801537c 	.word	0x0801537c
 800ecf4:	08015378 	.word	0x08015378
 800ecf8:	08015380 	.word	0x08015380
 800ecfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ecfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ed02:	4553      	cmp	r3, sl
 800ed04:	bfa8      	it	ge
 800ed06:	4653      	movge	r3, sl
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	4699      	mov	r9, r3
 800ed0c:	dc36      	bgt.n	800ed7c <_printf_float+0x360>
 800ed0e:	f04f 0b00 	mov.w	fp, #0
 800ed12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed16:	f104 021a 	add.w	r2, r4, #26
 800ed1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ed1c:	9306      	str	r3, [sp, #24]
 800ed1e:	eba3 0309 	sub.w	r3, r3, r9
 800ed22:	455b      	cmp	r3, fp
 800ed24:	dc31      	bgt.n	800ed8a <_printf_float+0x36e>
 800ed26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed28:	459a      	cmp	sl, r3
 800ed2a:	dc3a      	bgt.n	800eda2 <_printf_float+0x386>
 800ed2c:	6823      	ldr	r3, [r4, #0]
 800ed2e:	07da      	lsls	r2, r3, #31
 800ed30:	d437      	bmi.n	800eda2 <_printf_float+0x386>
 800ed32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed34:	ebaa 0903 	sub.w	r9, sl, r3
 800ed38:	9b06      	ldr	r3, [sp, #24]
 800ed3a:	ebaa 0303 	sub.w	r3, sl, r3
 800ed3e:	4599      	cmp	r9, r3
 800ed40:	bfa8      	it	ge
 800ed42:	4699      	movge	r9, r3
 800ed44:	f1b9 0f00 	cmp.w	r9, #0
 800ed48:	dc33      	bgt.n	800edb2 <_printf_float+0x396>
 800ed4a:	f04f 0800 	mov.w	r8, #0
 800ed4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed52:	f104 0b1a 	add.w	fp, r4, #26
 800ed56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed58:	ebaa 0303 	sub.w	r3, sl, r3
 800ed5c:	eba3 0309 	sub.w	r3, r3, r9
 800ed60:	4543      	cmp	r3, r8
 800ed62:	f77f af79 	ble.w	800ec58 <_printf_float+0x23c>
 800ed66:	2301      	movs	r3, #1
 800ed68:	465a      	mov	r2, fp
 800ed6a:	4631      	mov	r1, r6
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	47b8      	blx	r7
 800ed70:	3001      	adds	r0, #1
 800ed72:	f43f aeae 	beq.w	800ead2 <_printf_float+0xb6>
 800ed76:	f108 0801 	add.w	r8, r8, #1
 800ed7a:	e7ec      	b.n	800ed56 <_printf_float+0x33a>
 800ed7c:	4642      	mov	r2, r8
 800ed7e:	4631      	mov	r1, r6
 800ed80:	4628      	mov	r0, r5
 800ed82:	47b8      	blx	r7
 800ed84:	3001      	adds	r0, #1
 800ed86:	d1c2      	bne.n	800ed0e <_printf_float+0x2f2>
 800ed88:	e6a3      	b.n	800ead2 <_printf_float+0xb6>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	4628      	mov	r0, r5
 800ed90:	9206      	str	r2, [sp, #24]
 800ed92:	47b8      	blx	r7
 800ed94:	3001      	adds	r0, #1
 800ed96:	f43f ae9c 	beq.w	800ead2 <_printf_float+0xb6>
 800ed9a:	9a06      	ldr	r2, [sp, #24]
 800ed9c:	f10b 0b01 	add.w	fp, fp, #1
 800eda0:	e7bb      	b.n	800ed1a <_printf_float+0x2fe>
 800eda2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eda6:	4631      	mov	r1, r6
 800eda8:	4628      	mov	r0, r5
 800edaa:	47b8      	blx	r7
 800edac:	3001      	adds	r0, #1
 800edae:	d1c0      	bne.n	800ed32 <_printf_float+0x316>
 800edb0:	e68f      	b.n	800ead2 <_printf_float+0xb6>
 800edb2:	9a06      	ldr	r2, [sp, #24]
 800edb4:	464b      	mov	r3, r9
 800edb6:	4442      	add	r2, r8
 800edb8:	4631      	mov	r1, r6
 800edba:	4628      	mov	r0, r5
 800edbc:	47b8      	blx	r7
 800edbe:	3001      	adds	r0, #1
 800edc0:	d1c3      	bne.n	800ed4a <_printf_float+0x32e>
 800edc2:	e686      	b.n	800ead2 <_printf_float+0xb6>
 800edc4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800edc8:	f1ba 0f01 	cmp.w	sl, #1
 800edcc:	dc01      	bgt.n	800edd2 <_printf_float+0x3b6>
 800edce:	07db      	lsls	r3, r3, #31
 800edd0:	d536      	bpl.n	800ee40 <_printf_float+0x424>
 800edd2:	2301      	movs	r3, #1
 800edd4:	4642      	mov	r2, r8
 800edd6:	4631      	mov	r1, r6
 800edd8:	4628      	mov	r0, r5
 800edda:	47b8      	blx	r7
 800eddc:	3001      	adds	r0, #1
 800edde:	f43f ae78 	beq.w	800ead2 <_printf_float+0xb6>
 800ede2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ede6:	4631      	mov	r1, r6
 800ede8:	4628      	mov	r0, r5
 800edea:	47b8      	blx	r7
 800edec:	3001      	adds	r0, #1
 800edee:	f43f ae70 	beq.w	800ead2 <_printf_float+0xb6>
 800edf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edf6:	2200      	movs	r2, #0
 800edf8:	2300      	movs	r3, #0
 800edfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edfe:	f7f1 fe8b 	bl	8000b18 <__aeabi_dcmpeq>
 800ee02:	b9c0      	cbnz	r0, 800ee36 <_printf_float+0x41a>
 800ee04:	4653      	mov	r3, sl
 800ee06:	f108 0201 	add.w	r2, r8, #1
 800ee0a:	4631      	mov	r1, r6
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	47b8      	blx	r7
 800ee10:	3001      	adds	r0, #1
 800ee12:	d10c      	bne.n	800ee2e <_printf_float+0x412>
 800ee14:	e65d      	b.n	800ead2 <_printf_float+0xb6>
 800ee16:	2301      	movs	r3, #1
 800ee18:	465a      	mov	r2, fp
 800ee1a:	4631      	mov	r1, r6
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	47b8      	blx	r7
 800ee20:	3001      	adds	r0, #1
 800ee22:	f43f ae56 	beq.w	800ead2 <_printf_float+0xb6>
 800ee26:	f108 0801 	add.w	r8, r8, #1
 800ee2a:	45d0      	cmp	r8, sl
 800ee2c:	dbf3      	blt.n	800ee16 <_printf_float+0x3fa>
 800ee2e:	464b      	mov	r3, r9
 800ee30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ee34:	e6df      	b.n	800ebf6 <_printf_float+0x1da>
 800ee36:	f04f 0800 	mov.w	r8, #0
 800ee3a:	f104 0b1a 	add.w	fp, r4, #26
 800ee3e:	e7f4      	b.n	800ee2a <_printf_float+0x40e>
 800ee40:	2301      	movs	r3, #1
 800ee42:	4642      	mov	r2, r8
 800ee44:	e7e1      	b.n	800ee0a <_printf_float+0x3ee>
 800ee46:	2301      	movs	r3, #1
 800ee48:	464a      	mov	r2, r9
 800ee4a:	4631      	mov	r1, r6
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	47b8      	blx	r7
 800ee50:	3001      	adds	r0, #1
 800ee52:	f43f ae3e 	beq.w	800ead2 <_printf_float+0xb6>
 800ee56:	f108 0801 	add.w	r8, r8, #1
 800ee5a:	68e3      	ldr	r3, [r4, #12]
 800ee5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee5e:	1a5b      	subs	r3, r3, r1
 800ee60:	4543      	cmp	r3, r8
 800ee62:	dcf0      	bgt.n	800ee46 <_printf_float+0x42a>
 800ee64:	e6fc      	b.n	800ec60 <_printf_float+0x244>
 800ee66:	f04f 0800 	mov.w	r8, #0
 800ee6a:	f104 0919 	add.w	r9, r4, #25
 800ee6e:	e7f4      	b.n	800ee5a <_printf_float+0x43e>

0800ee70 <_printf_common>:
 800ee70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee74:	4616      	mov	r6, r2
 800ee76:	4698      	mov	r8, r3
 800ee78:	688a      	ldr	r2, [r1, #8]
 800ee7a:	690b      	ldr	r3, [r1, #16]
 800ee7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee80:	4293      	cmp	r3, r2
 800ee82:	bfb8      	it	lt
 800ee84:	4613      	movlt	r3, r2
 800ee86:	6033      	str	r3, [r6, #0]
 800ee88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee8c:	4607      	mov	r7, r0
 800ee8e:	460c      	mov	r4, r1
 800ee90:	b10a      	cbz	r2, 800ee96 <_printf_common+0x26>
 800ee92:	3301      	adds	r3, #1
 800ee94:	6033      	str	r3, [r6, #0]
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	0699      	lsls	r1, r3, #26
 800ee9a:	bf42      	ittt	mi
 800ee9c:	6833      	ldrmi	r3, [r6, #0]
 800ee9e:	3302      	addmi	r3, #2
 800eea0:	6033      	strmi	r3, [r6, #0]
 800eea2:	6825      	ldr	r5, [r4, #0]
 800eea4:	f015 0506 	ands.w	r5, r5, #6
 800eea8:	d106      	bne.n	800eeb8 <_printf_common+0x48>
 800eeaa:	f104 0a19 	add.w	sl, r4, #25
 800eeae:	68e3      	ldr	r3, [r4, #12]
 800eeb0:	6832      	ldr	r2, [r6, #0]
 800eeb2:	1a9b      	subs	r3, r3, r2
 800eeb4:	42ab      	cmp	r3, r5
 800eeb6:	dc26      	bgt.n	800ef06 <_printf_common+0x96>
 800eeb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eebc:	6822      	ldr	r2, [r4, #0]
 800eebe:	3b00      	subs	r3, #0
 800eec0:	bf18      	it	ne
 800eec2:	2301      	movne	r3, #1
 800eec4:	0692      	lsls	r2, r2, #26
 800eec6:	d42b      	bmi.n	800ef20 <_printf_common+0xb0>
 800eec8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eecc:	4641      	mov	r1, r8
 800eece:	4638      	mov	r0, r7
 800eed0:	47c8      	blx	r9
 800eed2:	3001      	adds	r0, #1
 800eed4:	d01e      	beq.n	800ef14 <_printf_common+0xa4>
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	6922      	ldr	r2, [r4, #16]
 800eeda:	f003 0306 	and.w	r3, r3, #6
 800eede:	2b04      	cmp	r3, #4
 800eee0:	bf02      	ittt	eq
 800eee2:	68e5      	ldreq	r5, [r4, #12]
 800eee4:	6833      	ldreq	r3, [r6, #0]
 800eee6:	1aed      	subeq	r5, r5, r3
 800eee8:	68a3      	ldr	r3, [r4, #8]
 800eeea:	bf0c      	ite	eq
 800eeec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eef0:	2500      	movne	r5, #0
 800eef2:	4293      	cmp	r3, r2
 800eef4:	bfc4      	itt	gt
 800eef6:	1a9b      	subgt	r3, r3, r2
 800eef8:	18ed      	addgt	r5, r5, r3
 800eefa:	2600      	movs	r6, #0
 800eefc:	341a      	adds	r4, #26
 800eefe:	42b5      	cmp	r5, r6
 800ef00:	d11a      	bne.n	800ef38 <_printf_common+0xc8>
 800ef02:	2000      	movs	r0, #0
 800ef04:	e008      	b.n	800ef18 <_printf_common+0xa8>
 800ef06:	2301      	movs	r3, #1
 800ef08:	4652      	mov	r2, sl
 800ef0a:	4641      	mov	r1, r8
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	47c8      	blx	r9
 800ef10:	3001      	adds	r0, #1
 800ef12:	d103      	bne.n	800ef1c <_printf_common+0xac>
 800ef14:	f04f 30ff 	mov.w	r0, #4294967295
 800ef18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	e7c6      	b.n	800eeae <_printf_common+0x3e>
 800ef20:	18e1      	adds	r1, r4, r3
 800ef22:	1c5a      	adds	r2, r3, #1
 800ef24:	2030      	movs	r0, #48	@ 0x30
 800ef26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ef2a:	4422      	add	r2, r4
 800ef2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ef30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ef34:	3302      	adds	r3, #2
 800ef36:	e7c7      	b.n	800eec8 <_printf_common+0x58>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	4641      	mov	r1, r8
 800ef3e:	4638      	mov	r0, r7
 800ef40:	47c8      	blx	r9
 800ef42:	3001      	adds	r0, #1
 800ef44:	d0e6      	beq.n	800ef14 <_printf_common+0xa4>
 800ef46:	3601      	adds	r6, #1
 800ef48:	e7d9      	b.n	800eefe <_printf_common+0x8e>
	...

0800ef4c <_printf_i>:
 800ef4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef50:	7e0f      	ldrb	r7, [r1, #24]
 800ef52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef54:	2f78      	cmp	r7, #120	@ 0x78
 800ef56:	4691      	mov	r9, r2
 800ef58:	4680      	mov	r8, r0
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	469a      	mov	sl, r3
 800ef5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef62:	d807      	bhi.n	800ef74 <_printf_i+0x28>
 800ef64:	2f62      	cmp	r7, #98	@ 0x62
 800ef66:	d80a      	bhi.n	800ef7e <_printf_i+0x32>
 800ef68:	2f00      	cmp	r7, #0
 800ef6a:	f000 80d1 	beq.w	800f110 <_printf_i+0x1c4>
 800ef6e:	2f58      	cmp	r7, #88	@ 0x58
 800ef70:	f000 80b8 	beq.w	800f0e4 <_printf_i+0x198>
 800ef74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef7c:	e03a      	b.n	800eff4 <_printf_i+0xa8>
 800ef7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef82:	2b15      	cmp	r3, #21
 800ef84:	d8f6      	bhi.n	800ef74 <_printf_i+0x28>
 800ef86:	a101      	add	r1, pc, #4	@ (adr r1, 800ef8c <_printf_i+0x40>)
 800ef88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef8c:	0800efe5 	.word	0x0800efe5
 800ef90:	0800eff9 	.word	0x0800eff9
 800ef94:	0800ef75 	.word	0x0800ef75
 800ef98:	0800ef75 	.word	0x0800ef75
 800ef9c:	0800ef75 	.word	0x0800ef75
 800efa0:	0800ef75 	.word	0x0800ef75
 800efa4:	0800eff9 	.word	0x0800eff9
 800efa8:	0800ef75 	.word	0x0800ef75
 800efac:	0800ef75 	.word	0x0800ef75
 800efb0:	0800ef75 	.word	0x0800ef75
 800efb4:	0800ef75 	.word	0x0800ef75
 800efb8:	0800f0f7 	.word	0x0800f0f7
 800efbc:	0800f023 	.word	0x0800f023
 800efc0:	0800f0b1 	.word	0x0800f0b1
 800efc4:	0800ef75 	.word	0x0800ef75
 800efc8:	0800ef75 	.word	0x0800ef75
 800efcc:	0800f119 	.word	0x0800f119
 800efd0:	0800ef75 	.word	0x0800ef75
 800efd4:	0800f023 	.word	0x0800f023
 800efd8:	0800ef75 	.word	0x0800ef75
 800efdc:	0800ef75 	.word	0x0800ef75
 800efe0:	0800f0b9 	.word	0x0800f0b9
 800efe4:	6833      	ldr	r3, [r6, #0]
 800efe6:	1d1a      	adds	r2, r3, #4
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	6032      	str	r2, [r6, #0]
 800efec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eff0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eff4:	2301      	movs	r3, #1
 800eff6:	e09c      	b.n	800f132 <_printf_i+0x1e6>
 800eff8:	6833      	ldr	r3, [r6, #0]
 800effa:	6820      	ldr	r0, [r4, #0]
 800effc:	1d19      	adds	r1, r3, #4
 800effe:	6031      	str	r1, [r6, #0]
 800f000:	0606      	lsls	r6, r0, #24
 800f002:	d501      	bpl.n	800f008 <_printf_i+0xbc>
 800f004:	681d      	ldr	r5, [r3, #0]
 800f006:	e003      	b.n	800f010 <_printf_i+0xc4>
 800f008:	0645      	lsls	r5, r0, #25
 800f00a:	d5fb      	bpl.n	800f004 <_printf_i+0xb8>
 800f00c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f010:	2d00      	cmp	r5, #0
 800f012:	da03      	bge.n	800f01c <_printf_i+0xd0>
 800f014:	232d      	movs	r3, #45	@ 0x2d
 800f016:	426d      	negs	r5, r5
 800f018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f01c:	4858      	ldr	r0, [pc, #352]	@ (800f180 <_printf_i+0x234>)
 800f01e:	230a      	movs	r3, #10
 800f020:	e011      	b.n	800f046 <_printf_i+0xfa>
 800f022:	6821      	ldr	r1, [r4, #0]
 800f024:	6833      	ldr	r3, [r6, #0]
 800f026:	0608      	lsls	r0, r1, #24
 800f028:	f853 5b04 	ldr.w	r5, [r3], #4
 800f02c:	d402      	bmi.n	800f034 <_printf_i+0xe8>
 800f02e:	0649      	lsls	r1, r1, #25
 800f030:	bf48      	it	mi
 800f032:	b2ad      	uxthmi	r5, r5
 800f034:	2f6f      	cmp	r7, #111	@ 0x6f
 800f036:	4852      	ldr	r0, [pc, #328]	@ (800f180 <_printf_i+0x234>)
 800f038:	6033      	str	r3, [r6, #0]
 800f03a:	bf14      	ite	ne
 800f03c:	230a      	movne	r3, #10
 800f03e:	2308      	moveq	r3, #8
 800f040:	2100      	movs	r1, #0
 800f042:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f046:	6866      	ldr	r6, [r4, #4]
 800f048:	60a6      	str	r6, [r4, #8]
 800f04a:	2e00      	cmp	r6, #0
 800f04c:	db05      	blt.n	800f05a <_printf_i+0x10e>
 800f04e:	6821      	ldr	r1, [r4, #0]
 800f050:	432e      	orrs	r6, r5
 800f052:	f021 0104 	bic.w	r1, r1, #4
 800f056:	6021      	str	r1, [r4, #0]
 800f058:	d04b      	beq.n	800f0f2 <_printf_i+0x1a6>
 800f05a:	4616      	mov	r6, r2
 800f05c:	fbb5 f1f3 	udiv	r1, r5, r3
 800f060:	fb03 5711 	mls	r7, r3, r1, r5
 800f064:	5dc7      	ldrb	r7, [r0, r7]
 800f066:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f06a:	462f      	mov	r7, r5
 800f06c:	42bb      	cmp	r3, r7
 800f06e:	460d      	mov	r5, r1
 800f070:	d9f4      	bls.n	800f05c <_printf_i+0x110>
 800f072:	2b08      	cmp	r3, #8
 800f074:	d10b      	bne.n	800f08e <_printf_i+0x142>
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	07df      	lsls	r7, r3, #31
 800f07a:	d508      	bpl.n	800f08e <_printf_i+0x142>
 800f07c:	6923      	ldr	r3, [r4, #16]
 800f07e:	6861      	ldr	r1, [r4, #4]
 800f080:	4299      	cmp	r1, r3
 800f082:	bfde      	ittt	le
 800f084:	2330      	movle	r3, #48	@ 0x30
 800f086:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f08a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f08e:	1b92      	subs	r2, r2, r6
 800f090:	6122      	str	r2, [r4, #16]
 800f092:	f8cd a000 	str.w	sl, [sp]
 800f096:	464b      	mov	r3, r9
 800f098:	aa03      	add	r2, sp, #12
 800f09a:	4621      	mov	r1, r4
 800f09c:	4640      	mov	r0, r8
 800f09e:	f7ff fee7 	bl	800ee70 <_printf_common>
 800f0a2:	3001      	adds	r0, #1
 800f0a4:	d14a      	bne.n	800f13c <_printf_i+0x1f0>
 800f0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0aa:	b004      	add	sp, #16
 800f0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	f043 0320 	orr.w	r3, r3, #32
 800f0b6:	6023      	str	r3, [r4, #0]
 800f0b8:	4832      	ldr	r0, [pc, #200]	@ (800f184 <_printf_i+0x238>)
 800f0ba:	2778      	movs	r7, #120	@ 0x78
 800f0bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	6831      	ldr	r1, [r6, #0]
 800f0c4:	061f      	lsls	r7, r3, #24
 800f0c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800f0ca:	d402      	bmi.n	800f0d2 <_printf_i+0x186>
 800f0cc:	065f      	lsls	r7, r3, #25
 800f0ce:	bf48      	it	mi
 800f0d0:	b2ad      	uxthmi	r5, r5
 800f0d2:	6031      	str	r1, [r6, #0]
 800f0d4:	07d9      	lsls	r1, r3, #31
 800f0d6:	bf44      	itt	mi
 800f0d8:	f043 0320 	orrmi.w	r3, r3, #32
 800f0dc:	6023      	strmi	r3, [r4, #0]
 800f0de:	b11d      	cbz	r5, 800f0e8 <_printf_i+0x19c>
 800f0e0:	2310      	movs	r3, #16
 800f0e2:	e7ad      	b.n	800f040 <_printf_i+0xf4>
 800f0e4:	4826      	ldr	r0, [pc, #152]	@ (800f180 <_printf_i+0x234>)
 800f0e6:	e7e9      	b.n	800f0bc <_printf_i+0x170>
 800f0e8:	6823      	ldr	r3, [r4, #0]
 800f0ea:	f023 0320 	bic.w	r3, r3, #32
 800f0ee:	6023      	str	r3, [r4, #0]
 800f0f0:	e7f6      	b.n	800f0e0 <_printf_i+0x194>
 800f0f2:	4616      	mov	r6, r2
 800f0f4:	e7bd      	b.n	800f072 <_printf_i+0x126>
 800f0f6:	6833      	ldr	r3, [r6, #0]
 800f0f8:	6825      	ldr	r5, [r4, #0]
 800f0fa:	6961      	ldr	r1, [r4, #20]
 800f0fc:	1d18      	adds	r0, r3, #4
 800f0fe:	6030      	str	r0, [r6, #0]
 800f100:	062e      	lsls	r6, r5, #24
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	d501      	bpl.n	800f10a <_printf_i+0x1be>
 800f106:	6019      	str	r1, [r3, #0]
 800f108:	e002      	b.n	800f110 <_printf_i+0x1c4>
 800f10a:	0668      	lsls	r0, r5, #25
 800f10c:	d5fb      	bpl.n	800f106 <_printf_i+0x1ba>
 800f10e:	8019      	strh	r1, [r3, #0]
 800f110:	2300      	movs	r3, #0
 800f112:	6123      	str	r3, [r4, #16]
 800f114:	4616      	mov	r6, r2
 800f116:	e7bc      	b.n	800f092 <_printf_i+0x146>
 800f118:	6833      	ldr	r3, [r6, #0]
 800f11a:	1d1a      	adds	r2, r3, #4
 800f11c:	6032      	str	r2, [r6, #0]
 800f11e:	681e      	ldr	r6, [r3, #0]
 800f120:	6862      	ldr	r2, [r4, #4]
 800f122:	2100      	movs	r1, #0
 800f124:	4630      	mov	r0, r6
 800f126:	f7f1 f87b 	bl	8000220 <memchr>
 800f12a:	b108      	cbz	r0, 800f130 <_printf_i+0x1e4>
 800f12c:	1b80      	subs	r0, r0, r6
 800f12e:	6060      	str	r0, [r4, #4]
 800f130:	6863      	ldr	r3, [r4, #4]
 800f132:	6123      	str	r3, [r4, #16]
 800f134:	2300      	movs	r3, #0
 800f136:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f13a:	e7aa      	b.n	800f092 <_printf_i+0x146>
 800f13c:	6923      	ldr	r3, [r4, #16]
 800f13e:	4632      	mov	r2, r6
 800f140:	4649      	mov	r1, r9
 800f142:	4640      	mov	r0, r8
 800f144:	47d0      	blx	sl
 800f146:	3001      	adds	r0, #1
 800f148:	d0ad      	beq.n	800f0a6 <_printf_i+0x15a>
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	079b      	lsls	r3, r3, #30
 800f14e:	d413      	bmi.n	800f178 <_printf_i+0x22c>
 800f150:	68e0      	ldr	r0, [r4, #12]
 800f152:	9b03      	ldr	r3, [sp, #12]
 800f154:	4298      	cmp	r0, r3
 800f156:	bfb8      	it	lt
 800f158:	4618      	movlt	r0, r3
 800f15a:	e7a6      	b.n	800f0aa <_printf_i+0x15e>
 800f15c:	2301      	movs	r3, #1
 800f15e:	4632      	mov	r2, r6
 800f160:	4649      	mov	r1, r9
 800f162:	4640      	mov	r0, r8
 800f164:	47d0      	blx	sl
 800f166:	3001      	adds	r0, #1
 800f168:	d09d      	beq.n	800f0a6 <_printf_i+0x15a>
 800f16a:	3501      	adds	r5, #1
 800f16c:	68e3      	ldr	r3, [r4, #12]
 800f16e:	9903      	ldr	r1, [sp, #12]
 800f170:	1a5b      	subs	r3, r3, r1
 800f172:	42ab      	cmp	r3, r5
 800f174:	dcf2      	bgt.n	800f15c <_printf_i+0x210>
 800f176:	e7eb      	b.n	800f150 <_printf_i+0x204>
 800f178:	2500      	movs	r5, #0
 800f17a:	f104 0619 	add.w	r6, r4, #25
 800f17e:	e7f5      	b.n	800f16c <_printf_i+0x220>
 800f180:	08015382 	.word	0x08015382
 800f184:	08015393 	.word	0x08015393

0800f188 <_scanf_float>:
 800f188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f18c:	b087      	sub	sp, #28
 800f18e:	4691      	mov	r9, r2
 800f190:	9303      	str	r3, [sp, #12]
 800f192:	688b      	ldr	r3, [r1, #8]
 800f194:	1e5a      	subs	r2, r3, #1
 800f196:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f19a:	bf81      	itttt	hi
 800f19c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f1a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800f1a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f1a8:	608b      	strhi	r3, [r1, #8]
 800f1aa:	680b      	ldr	r3, [r1, #0]
 800f1ac:	460a      	mov	r2, r1
 800f1ae:	f04f 0500 	mov.w	r5, #0
 800f1b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f1b6:	f842 3b1c 	str.w	r3, [r2], #28
 800f1ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f1be:	4680      	mov	r8, r0
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	bf98      	it	ls
 800f1c4:	f04f 0b00 	movls.w	fp, #0
 800f1c8:	9201      	str	r2, [sp, #4]
 800f1ca:	4616      	mov	r6, r2
 800f1cc:	46aa      	mov	sl, r5
 800f1ce:	462f      	mov	r7, r5
 800f1d0:	9502      	str	r5, [sp, #8]
 800f1d2:	68a2      	ldr	r2, [r4, #8]
 800f1d4:	b15a      	cbz	r2, 800f1ee <_scanf_float+0x66>
 800f1d6:	f8d9 3000 	ldr.w	r3, [r9]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	2b4e      	cmp	r3, #78	@ 0x4e
 800f1de:	d863      	bhi.n	800f2a8 <_scanf_float+0x120>
 800f1e0:	2b40      	cmp	r3, #64	@ 0x40
 800f1e2:	d83b      	bhi.n	800f25c <_scanf_float+0xd4>
 800f1e4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f1e8:	b2c8      	uxtb	r0, r1
 800f1ea:	280e      	cmp	r0, #14
 800f1ec:	d939      	bls.n	800f262 <_scanf_float+0xda>
 800f1ee:	b11f      	cbz	r7, 800f1f8 <_scanf_float+0x70>
 800f1f0:	6823      	ldr	r3, [r4, #0]
 800f1f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f1f6:	6023      	str	r3, [r4, #0]
 800f1f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1fc:	f1ba 0f01 	cmp.w	sl, #1
 800f200:	f200 8114 	bhi.w	800f42c <_scanf_float+0x2a4>
 800f204:	9b01      	ldr	r3, [sp, #4]
 800f206:	429e      	cmp	r6, r3
 800f208:	f200 8105 	bhi.w	800f416 <_scanf_float+0x28e>
 800f20c:	2001      	movs	r0, #1
 800f20e:	b007      	add	sp, #28
 800f210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f214:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f218:	2a0d      	cmp	r2, #13
 800f21a:	d8e8      	bhi.n	800f1ee <_scanf_float+0x66>
 800f21c:	a101      	add	r1, pc, #4	@ (adr r1, 800f224 <_scanf_float+0x9c>)
 800f21e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f222:	bf00      	nop
 800f224:	0800f36d 	.word	0x0800f36d
 800f228:	0800f1ef 	.word	0x0800f1ef
 800f22c:	0800f1ef 	.word	0x0800f1ef
 800f230:	0800f1ef 	.word	0x0800f1ef
 800f234:	0800f3c9 	.word	0x0800f3c9
 800f238:	0800f3a3 	.word	0x0800f3a3
 800f23c:	0800f1ef 	.word	0x0800f1ef
 800f240:	0800f1ef 	.word	0x0800f1ef
 800f244:	0800f37b 	.word	0x0800f37b
 800f248:	0800f1ef 	.word	0x0800f1ef
 800f24c:	0800f1ef 	.word	0x0800f1ef
 800f250:	0800f1ef 	.word	0x0800f1ef
 800f254:	0800f1ef 	.word	0x0800f1ef
 800f258:	0800f337 	.word	0x0800f337
 800f25c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f260:	e7da      	b.n	800f218 <_scanf_float+0x90>
 800f262:	290e      	cmp	r1, #14
 800f264:	d8c3      	bhi.n	800f1ee <_scanf_float+0x66>
 800f266:	a001      	add	r0, pc, #4	@ (adr r0, 800f26c <_scanf_float+0xe4>)
 800f268:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f26c:	0800f327 	.word	0x0800f327
 800f270:	0800f1ef 	.word	0x0800f1ef
 800f274:	0800f327 	.word	0x0800f327
 800f278:	0800f3b7 	.word	0x0800f3b7
 800f27c:	0800f1ef 	.word	0x0800f1ef
 800f280:	0800f2c9 	.word	0x0800f2c9
 800f284:	0800f30d 	.word	0x0800f30d
 800f288:	0800f30d 	.word	0x0800f30d
 800f28c:	0800f30d 	.word	0x0800f30d
 800f290:	0800f30d 	.word	0x0800f30d
 800f294:	0800f30d 	.word	0x0800f30d
 800f298:	0800f30d 	.word	0x0800f30d
 800f29c:	0800f30d 	.word	0x0800f30d
 800f2a0:	0800f30d 	.word	0x0800f30d
 800f2a4:	0800f30d 	.word	0x0800f30d
 800f2a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800f2aa:	d809      	bhi.n	800f2c0 <_scanf_float+0x138>
 800f2ac:	2b60      	cmp	r3, #96	@ 0x60
 800f2ae:	d8b1      	bhi.n	800f214 <_scanf_float+0x8c>
 800f2b0:	2b54      	cmp	r3, #84	@ 0x54
 800f2b2:	d07b      	beq.n	800f3ac <_scanf_float+0x224>
 800f2b4:	2b59      	cmp	r3, #89	@ 0x59
 800f2b6:	d19a      	bne.n	800f1ee <_scanf_float+0x66>
 800f2b8:	2d07      	cmp	r5, #7
 800f2ba:	d198      	bne.n	800f1ee <_scanf_float+0x66>
 800f2bc:	2508      	movs	r5, #8
 800f2be:	e02f      	b.n	800f320 <_scanf_float+0x198>
 800f2c0:	2b74      	cmp	r3, #116	@ 0x74
 800f2c2:	d073      	beq.n	800f3ac <_scanf_float+0x224>
 800f2c4:	2b79      	cmp	r3, #121	@ 0x79
 800f2c6:	e7f6      	b.n	800f2b6 <_scanf_float+0x12e>
 800f2c8:	6821      	ldr	r1, [r4, #0]
 800f2ca:	05c8      	lsls	r0, r1, #23
 800f2cc:	d51e      	bpl.n	800f30c <_scanf_float+0x184>
 800f2ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f2d2:	6021      	str	r1, [r4, #0]
 800f2d4:	3701      	adds	r7, #1
 800f2d6:	f1bb 0f00 	cmp.w	fp, #0
 800f2da:	d003      	beq.n	800f2e4 <_scanf_float+0x15c>
 800f2dc:	3201      	adds	r2, #1
 800f2de:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2e2:	60a2      	str	r2, [r4, #8]
 800f2e4:	68a3      	ldr	r3, [r4, #8]
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	60a3      	str	r3, [r4, #8]
 800f2ea:	6923      	ldr	r3, [r4, #16]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	6123      	str	r3, [r4, #16]
 800f2f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f2f4:	3b01      	subs	r3, #1
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f8c9 3004 	str.w	r3, [r9, #4]
 800f2fc:	f340 8082 	ble.w	800f404 <_scanf_float+0x27c>
 800f300:	f8d9 3000 	ldr.w	r3, [r9]
 800f304:	3301      	adds	r3, #1
 800f306:	f8c9 3000 	str.w	r3, [r9]
 800f30a:	e762      	b.n	800f1d2 <_scanf_float+0x4a>
 800f30c:	eb1a 0105 	adds.w	r1, sl, r5
 800f310:	f47f af6d 	bne.w	800f1ee <_scanf_float+0x66>
 800f314:	6822      	ldr	r2, [r4, #0]
 800f316:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f31a:	6022      	str	r2, [r4, #0]
 800f31c:	460d      	mov	r5, r1
 800f31e:	468a      	mov	sl, r1
 800f320:	f806 3b01 	strb.w	r3, [r6], #1
 800f324:	e7de      	b.n	800f2e4 <_scanf_float+0x15c>
 800f326:	6822      	ldr	r2, [r4, #0]
 800f328:	0610      	lsls	r0, r2, #24
 800f32a:	f57f af60 	bpl.w	800f1ee <_scanf_float+0x66>
 800f32e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f332:	6022      	str	r2, [r4, #0]
 800f334:	e7f4      	b.n	800f320 <_scanf_float+0x198>
 800f336:	f1ba 0f00 	cmp.w	sl, #0
 800f33a:	d10c      	bne.n	800f356 <_scanf_float+0x1ce>
 800f33c:	b977      	cbnz	r7, 800f35c <_scanf_float+0x1d4>
 800f33e:	6822      	ldr	r2, [r4, #0]
 800f340:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f344:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f348:	d108      	bne.n	800f35c <_scanf_float+0x1d4>
 800f34a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f34e:	6022      	str	r2, [r4, #0]
 800f350:	f04f 0a01 	mov.w	sl, #1
 800f354:	e7e4      	b.n	800f320 <_scanf_float+0x198>
 800f356:	f1ba 0f02 	cmp.w	sl, #2
 800f35a:	d050      	beq.n	800f3fe <_scanf_float+0x276>
 800f35c:	2d01      	cmp	r5, #1
 800f35e:	d002      	beq.n	800f366 <_scanf_float+0x1de>
 800f360:	2d04      	cmp	r5, #4
 800f362:	f47f af44 	bne.w	800f1ee <_scanf_float+0x66>
 800f366:	3501      	adds	r5, #1
 800f368:	b2ed      	uxtb	r5, r5
 800f36a:	e7d9      	b.n	800f320 <_scanf_float+0x198>
 800f36c:	f1ba 0f01 	cmp.w	sl, #1
 800f370:	f47f af3d 	bne.w	800f1ee <_scanf_float+0x66>
 800f374:	f04f 0a02 	mov.w	sl, #2
 800f378:	e7d2      	b.n	800f320 <_scanf_float+0x198>
 800f37a:	b975      	cbnz	r5, 800f39a <_scanf_float+0x212>
 800f37c:	2f00      	cmp	r7, #0
 800f37e:	f47f af37 	bne.w	800f1f0 <_scanf_float+0x68>
 800f382:	6822      	ldr	r2, [r4, #0]
 800f384:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f388:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f38c:	f040 8103 	bne.w	800f596 <_scanf_float+0x40e>
 800f390:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f394:	6022      	str	r2, [r4, #0]
 800f396:	2501      	movs	r5, #1
 800f398:	e7c2      	b.n	800f320 <_scanf_float+0x198>
 800f39a:	2d03      	cmp	r5, #3
 800f39c:	d0e3      	beq.n	800f366 <_scanf_float+0x1de>
 800f39e:	2d05      	cmp	r5, #5
 800f3a0:	e7df      	b.n	800f362 <_scanf_float+0x1da>
 800f3a2:	2d02      	cmp	r5, #2
 800f3a4:	f47f af23 	bne.w	800f1ee <_scanf_float+0x66>
 800f3a8:	2503      	movs	r5, #3
 800f3aa:	e7b9      	b.n	800f320 <_scanf_float+0x198>
 800f3ac:	2d06      	cmp	r5, #6
 800f3ae:	f47f af1e 	bne.w	800f1ee <_scanf_float+0x66>
 800f3b2:	2507      	movs	r5, #7
 800f3b4:	e7b4      	b.n	800f320 <_scanf_float+0x198>
 800f3b6:	6822      	ldr	r2, [r4, #0]
 800f3b8:	0591      	lsls	r1, r2, #22
 800f3ba:	f57f af18 	bpl.w	800f1ee <_scanf_float+0x66>
 800f3be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f3c2:	6022      	str	r2, [r4, #0]
 800f3c4:	9702      	str	r7, [sp, #8]
 800f3c6:	e7ab      	b.n	800f320 <_scanf_float+0x198>
 800f3c8:	6822      	ldr	r2, [r4, #0]
 800f3ca:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f3ce:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f3d2:	d005      	beq.n	800f3e0 <_scanf_float+0x258>
 800f3d4:	0550      	lsls	r0, r2, #21
 800f3d6:	f57f af0a 	bpl.w	800f1ee <_scanf_float+0x66>
 800f3da:	2f00      	cmp	r7, #0
 800f3dc:	f000 80db 	beq.w	800f596 <_scanf_float+0x40e>
 800f3e0:	0591      	lsls	r1, r2, #22
 800f3e2:	bf58      	it	pl
 800f3e4:	9902      	ldrpl	r1, [sp, #8]
 800f3e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f3ea:	bf58      	it	pl
 800f3ec:	1a79      	subpl	r1, r7, r1
 800f3ee:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f3f2:	bf58      	it	pl
 800f3f4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f3f8:	6022      	str	r2, [r4, #0]
 800f3fa:	2700      	movs	r7, #0
 800f3fc:	e790      	b.n	800f320 <_scanf_float+0x198>
 800f3fe:	f04f 0a03 	mov.w	sl, #3
 800f402:	e78d      	b.n	800f320 <_scanf_float+0x198>
 800f404:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f408:	4649      	mov	r1, r9
 800f40a:	4640      	mov	r0, r8
 800f40c:	4798      	blx	r3
 800f40e:	2800      	cmp	r0, #0
 800f410:	f43f aedf 	beq.w	800f1d2 <_scanf_float+0x4a>
 800f414:	e6eb      	b.n	800f1ee <_scanf_float+0x66>
 800f416:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f41a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f41e:	464a      	mov	r2, r9
 800f420:	4640      	mov	r0, r8
 800f422:	4798      	blx	r3
 800f424:	6923      	ldr	r3, [r4, #16]
 800f426:	3b01      	subs	r3, #1
 800f428:	6123      	str	r3, [r4, #16]
 800f42a:	e6eb      	b.n	800f204 <_scanf_float+0x7c>
 800f42c:	1e6b      	subs	r3, r5, #1
 800f42e:	2b06      	cmp	r3, #6
 800f430:	d824      	bhi.n	800f47c <_scanf_float+0x2f4>
 800f432:	2d02      	cmp	r5, #2
 800f434:	d836      	bhi.n	800f4a4 <_scanf_float+0x31c>
 800f436:	9b01      	ldr	r3, [sp, #4]
 800f438:	429e      	cmp	r6, r3
 800f43a:	f67f aee7 	bls.w	800f20c <_scanf_float+0x84>
 800f43e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f446:	464a      	mov	r2, r9
 800f448:	4640      	mov	r0, r8
 800f44a:	4798      	blx	r3
 800f44c:	6923      	ldr	r3, [r4, #16]
 800f44e:	3b01      	subs	r3, #1
 800f450:	6123      	str	r3, [r4, #16]
 800f452:	e7f0      	b.n	800f436 <_scanf_float+0x2ae>
 800f454:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f458:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f45c:	464a      	mov	r2, r9
 800f45e:	4640      	mov	r0, r8
 800f460:	4798      	blx	r3
 800f462:	6923      	ldr	r3, [r4, #16]
 800f464:	3b01      	subs	r3, #1
 800f466:	6123      	str	r3, [r4, #16]
 800f468:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f46c:	fa5f fa8a 	uxtb.w	sl, sl
 800f470:	f1ba 0f02 	cmp.w	sl, #2
 800f474:	d1ee      	bne.n	800f454 <_scanf_float+0x2cc>
 800f476:	3d03      	subs	r5, #3
 800f478:	b2ed      	uxtb	r5, r5
 800f47a:	1b76      	subs	r6, r6, r5
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	05da      	lsls	r2, r3, #23
 800f480:	d530      	bpl.n	800f4e4 <_scanf_float+0x35c>
 800f482:	055b      	lsls	r3, r3, #21
 800f484:	d511      	bpl.n	800f4aa <_scanf_float+0x322>
 800f486:	9b01      	ldr	r3, [sp, #4]
 800f488:	429e      	cmp	r6, r3
 800f48a:	f67f aebf 	bls.w	800f20c <_scanf_float+0x84>
 800f48e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f492:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f496:	464a      	mov	r2, r9
 800f498:	4640      	mov	r0, r8
 800f49a:	4798      	blx	r3
 800f49c:	6923      	ldr	r3, [r4, #16]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	6123      	str	r3, [r4, #16]
 800f4a2:	e7f0      	b.n	800f486 <_scanf_float+0x2fe>
 800f4a4:	46aa      	mov	sl, r5
 800f4a6:	46b3      	mov	fp, r6
 800f4a8:	e7de      	b.n	800f468 <_scanf_float+0x2e0>
 800f4aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f4ae:	6923      	ldr	r3, [r4, #16]
 800f4b0:	2965      	cmp	r1, #101	@ 0x65
 800f4b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f4b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800f4ba:	6123      	str	r3, [r4, #16]
 800f4bc:	d00c      	beq.n	800f4d8 <_scanf_float+0x350>
 800f4be:	2945      	cmp	r1, #69	@ 0x45
 800f4c0:	d00a      	beq.n	800f4d8 <_scanf_float+0x350>
 800f4c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4c6:	464a      	mov	r2, r9
 800f4c8:	4640      	mov	r0, r8
 800f4ca:	4798      	blx	r3
 800f4cc:	6923      	ldr	r3, [r4, #16]
 800f4ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	1eb5      	subs	r5, r6, #2
 800f4d6:	6123      	str	r3, [r4, #16]
 800f4d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f4dc:	464a      	mov	r2, r9
 800f4de:	4640      	mov	r0, r8
 800f4e0:	4798      	blx	r3
 800f4e2:	462e      	mov	r6, r5
 800f4e4:	6822      	ldr	r2, [r4, #0]
 800f4e6:	f012 0210 	ands.w	r2, r2, #16
 800f4ea:	d001      	beq.n	800f4f0 <_scanf_float+0x368>
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	e68e      	b.n	800f20e <_scanf_float+0x86>
 800f4f0:	7032      	strb	r2, [r6, #0]
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f4f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4fc:	d125      	bne.n	800f54a <_scanf_float+0x3c2>
 800f4fe:	9b02      	ldr	r3, [sp, #8]
 800f500:	429f      	cmp	r7, r3
 800f502:	d00a      	beq.n	800f51a <_scanf_float+0x392>
 800f504:	1bda      	subs	r2, r3, r7
 800f506:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f50a:	429e      	cmp	r6, r3
 800f50c:	bf28      	it	cs
 800f50e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f512:	4922      	ldr	r1, [pc, #136]	@ (800f59c <_scanf_float+0x414>)
 800f514:	4630      	mov	r0, r6
 800f516:	f000 f99b 	bl	800f850 <siprintf>
 800f51a:	9901      	ldr	r1, [sp, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	4640      	mov	r0, r8
 800f520:	f002 fd2a 	bl	8011f78 <_strtod_r>
 800f524:	9b03      	ldr	r3, [sp, #12]
 800f526:	6821      	ldr	r1, [r4, #0]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f011 0f02 	tst.w	r1, #2
 800f52e:	ec57 6b10 	vmov	r6, r7, d0
 800f532:	f103 0204 	add.w	r2, r3, #4
 800f536:	d015      	beq.n	800f564 <_scanf_float+0x3dc>
 800f538:	9903      	ldr	r1, [sp, #12]
 800f53a:	600a      	str	r2, [r1, #0]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	e9c3 6700 	strd	r6, r7, [r3]
 800f542:	68e3      	ldr	r3, [r4, #12]
 800f544:	3301      	adds	r3, #1
 800f546:	60e3      	str	r3, [r4, #12]
 800f548:	e7d0      	b.n	800f4ec <_scanf_float+0x364>
 800f54a:	9b04      	ldr	r3, [sp, #16]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0e4      	beq.n	800f51a <_scanf_float+0x392>
 800f550:	9905      	ldr	r1, [sp, #20]
 800f552:	230a      	movs	r3, #10
 800f554:	3101      	adds	r1, #1
 800f556:	4640      	mov	r0, r8
 800f558:	f002 fd8e 	bl	8012078 <_strtol_r>
 800f55c:	9b04      	ldr	r3, [sp, #16]
 800f55e:	9e05      	ldr	r6, [sp, #20]
 800f560:	1ac2      	subs	r2, r0, r3
 800f562:	e7d0      	b.n	800f506 <_scanf_float+0x37e>
 800f564:	f011 0f04 	tst.w	r1, #4
 800f568:	9903      	ldr	r1, [sp, #12]
 800f56a:	600a      	str	r2, [r1, #0]
 800f56c:	d1e6      	bne.n	800f53c <_scanf_float+0x3b4>
 800f56e:	681d      	ldr	r5, [r3, #0]
 800f570:	4632      	mov	r2, r6
 800f572:	463b      	mov	r3, r7
 800f574:	4630      	mov	r0, r6
 800f576:	4639      	mov	r1, r7
 800f578:	f7f1 fb00 	bl	8000b7c <__aeabi_dcmpun>
 800f57c:	b128      	cbz	r0, 800f58a <_scanf_float+0x402>
 800f57e:	4808      	ldr	r0, [pc, #32]	@ (800f5a0 <_scanf_float+0x418>)
 800f580:	f000 faee 	bl	800fb60 <nanf>
 800f584:	ed85 0a00 	vstr	s0, [r5]
 800f588:	e7db      	b.n	800f542 <_scanf_float+0x3ba>
 800f58a:	4630      	mov	r0, r6
 800f58c:	4639      	mov	r1, r7
 800f58e:	f7f1 fb53 	bl	8000c38 <__aeabi_d2f>
 800f592:	6028      	str	r0, [r5, #0]
 800f594:	e7d5      	b.n	800f542 <_scanf_float+0x3ba>
 800f596:	2700      	movs	r7, #0
 800f598:	e62e      	b.n	800f1f8 <_scanf_float+0x70>
 800f59a:	bf00      	nop
 800f59c:	080153a4 	.word	0x080153a4
 800f5a0:	080154e5 	.word	0x080154e5

0800f5a4 <std>:
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	b510      	push	{r4, lr}
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	e9c0 3300 	strd	r3, r3, [r0]
 800f5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5b2:	6083      	str	r3, [r0, #8]
 800f5b4:	8181      	strh	r1, [r0, #12]
 800f5b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f5b8:	81c2      	strh	r2, [r0, #14]
 800f5ba:	6183      	str	r3, [r0, #24]
 800f5bc:	4619      	mov	r1, r3
 800f5be:	2208      	movs	r2, #8
 800f5c0:	305c      	adds	r0, #92	@ 0x5c
 800f5c2:	f000 fa3f 	bl	800fa44 <memset>
 800f5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5fc <std+0x58>)
 800f5c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800f5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f600 <std+0x5c>)
 800f5cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800f604 <std+0x60>)
 800f5d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f608 <std+0x64>)
 800f5d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f60c <std+0x68>)
 800f5d8:	6224      	str	r4, [r4, #32]
 800f5da:	429c      	cmp	r4, r3
 800f5dc:	d006      	beq.n	800f5ec <std+0x48>
 800f5de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f5e2:	4294      	cmp	r4, r2
 800f5e4:	d002      	beq.n	800f5ec <std+0x48>
 800f5e6:	33d0      	adds	r3, #208	@ 0xd0
 800f5e8:	429c      	cmp	r4, r3
 800f5ea:	d105      	bne.n	800f5f8 <std+0x54>
 800f5ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5f4:	f000 baa2 	b.w	800fb3c <__retarget_lock_init_recursive>
 800f5f8:	bd10      	pop	{r4, pc}
 800f5fa:	bf00      	nop
 800f5fc:	0800f895 	.word	0x0800f895
 800f600:	0800f8b7 	.word	0x0800f8b7
 800f604:	0800f8ef 	.word	0x0800f8ef
 800f608:	0800f913 	.word	0x0800f913
 800f60c:	20003938 	.word	0x20003938

0800f610 <stdio_exit_handler>:
 800f610:	4a02      	ldr	r2, [pc, #8]	@ (800f61c <stdio_exit_handler+0xc>)
 800f612:	4903      	ldr	r1, [pc, #12]	@ (800f620 <stdio_exit_handler+0x10>)
 800f614:	4803      	ldr	r0, [pc, #12]	@ (800f624 <stdio_exit_handler+0x14>)
 800f616:	f000 b869 	b.w	800f6ec <_fwalk_sglue>
 800f61a:	bf00      	nop
 800f61c:	20000040 	.word	0x20000040
 800f620:	08012435 	.word	0x08012435
 800f624:	20000050 	.word	0x20000050

0800f628 <cleanup_stdio>:
 800f628:	6841      	ldr	r1, [r0, #4]
 800f62a:	4b0c      	ldr	r3, [pc, #48]	@ (800f65c <cleanup_stdio+0x34>)
 800f62c:	4299      	cmp	r1, r3
 800f62e:	b510      	push	{r4, lr}
 800f630:	4604      	mov	r4, r0
 800f632:	d001      	beq.n	800f638 <cleanup_stdio+0x10>
 800f634:	f002 fefe 	bl	8012434 <_fflush_r>
 800f638:	68a1      	ldr	r1, [r4, #8]
 800f63a:	4b09      	ldr	r3, [pc, #36]	@ (800f660 <cleanup_stdio+0x38>)
 800f63c:	4299      	cmp	r1, r3
 800f63e:	d002      	beq.n	800f646 <cleanup_stdio+0x1e>
 800f640:	4620      	mov	r0, r4
 800f642:	f002 fef7 	bl	8012434 <_fflush_r>
 800f646:	68e1      	ldr	r1, [r4, #12]
 800f648:	4b06      	ldr	r3, [pc, #24]	@ (800f664 <cleanup_stdio+0x3c>)
 800f64a:	4299      	cmp	r1, r3
 800f64c:	d004      	beq.n	800f658 <cleanup_stdio+0x30>
 800f64e:	4620      	mov	r0, r4
 800f650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f654:	f002 beee 	b.w	8012434 <_fflush_r>
 800f658:	bd10      	pop	{r4, pc}
 800f65a:	bf00      	nop
 800f65c:	20003938 	.word	0x20003938
 800f660:	200039a0 	.word	0x200039a0
 800f664:	20003a08 	.word	0x20003a08

0800f668 <global_stdio_init.part.0>:
 800f668:	b510      	push	{r4, lr}
 800f66a:	4b0b      	ldr	r3, [pc, #44]	@ (800f698 <global_stdio_init.part.0+0x30>)
 800f66c:	4c0b      	ldr	r4, [pc, #44]	@ (800f69c <global_stdio_init.part.0+0x34>)
 800f66e:	4a0c      	ldr	r2, [pc, #48]	@ (800f6a0 <global_stdio_init.part.0+0x38>)
 800f670:	601a      	str	r2, [r3, #0]
 800f672:	4620      	mov	r0, r4
 800f674:	2200      	movs	r2, #0
 800f676:	2104      	movs	r1, #4
 800f678:	f7ff ff94 	bl	800f5a4 <std>
 800f67c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f680:	2201      	movs	r2, #1
 800f682:	2109      	movs	r1, #9
 800f684:	f7ff ff8e 	bl	800f5a4 <std>
 800f688:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f68c:	2202      	movs	r2, #2
 800f68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f692:	2112      	movs	r1, #18
 800f694:	f7ff bf86 	b.w	800f5a4 <std>
 800f698:	20003a70 	.word	0x20003a70
 800f69c:	20003938 	.word	0x20003938
 800f6a0:	0800f611 	.word	0x0800f611

0800f6a4 <__sfp_lock_acquire>:
 800f6a4:	4801      	ldr	r0, [pc, #4]	@ (800f6ac <__sfp_lock_acquire+0x8>)
 800f6a6:	f000 ba4a 	b.w	800fb3e <__retarget_lock_acquire_recursive>
 800f6aa:	bf00      	nop
 800f6ac:	20003a79 	.word	0x20003a79

0800f6b0 <__sfp_lock_release>:
 800f6b0:	4801      	ldr	r0, [pc, #4]	@ (800f6b8 <__sfp_lock_release+0x8>)
 800f6b2:	f000 ba45 	b.w	800fb40 <__retarget_lock_release_recursive>
 800f6b6:	bf00      	nop
 800f6b8:	20003a79 	.word	0x20003a79

0800f6bc <__sinit>:
 800f6bc:	b510      	push	{r4, lr}
 800f6be:	4604      	mov	r4, r0
 800f6c0:	f7ff fff0 	bl	800f6a4 <__sfp_lock_acquire>
 800f6c4:	6a23      	ldr	r3, [r4, #32]
 800f6c6:	b11b      	cbz	r3, 800f6d0 <__sinit+0x14>
 800f6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6cc:	f7ff bff0 	b.w	800f6b0 <__sfp_lock_release>
 800f6d0:	4b04      	ldr	r3, [pc, #16]	@ (800f6e4 <__sinit+0x28>)
 800f6d2:	6223      	str	r3, [r4, #32]
 800f6d4:	4b04      	ldr	r3, [pc, #16]	@ (800f6e8 <__sinit+0x2c>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d1f5      	bne.n	800f6c8 <__sinit+0xc>
 800f6dc:	f7ff ffc4 	bl	800f668 <global_stdio_init.part.0>
 800f6e0:	e7f2      	b.n	800f6c8 <__sinit+0xc>
 800f6e2:	bf00      	nop
 800f6e4:	0800f629 	.word	0x0800f629
 800f6e8:	20003a70 	.word	0x20003a70

0800f6ec <_fwalk_sglue>:
 800f6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6f0:	4607      	mov	r7, r0
 800f6f2:	4688      	mov	r8, r1
 800f6f4:	4614      	mov	r4, r2
 800f6f6:	2600      	movs	r6, #0
 800f6f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6fc:	f1b9 0901 	subs.w	r9, r9, #1
 800f700:	d505      	bpl.n	800f70e <_fwalk_sglue+0x22>
 800f702:	6824      	ldr	r4, [r4, #0]
 800f704:	2c00      	cmp	r4, #0
 800f706:	d1f7      	bne.n	800f6f8 <_fwalk_sglue+0xc>
 800f708:	4630      	mov	r0, r6
 800f70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f70e:	89ab      	ldrh	r3, [r5, #12]
 800f710:	2b01      	cmp	r3, #1
 800f712:	d907      	bls.n	800f724 <_fwalk_sglue+0x38>
 800f714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f718:	3301      	adds	r3, #1
 800f71a:	d003      	beq.n	800f724 <_fwalk_sglue+0x38>
 800f71c:	4629      	mov	r1, r5
 800f71e:	4638      	mov	r0, r7
 800f720:	47c0      	blx	r8
 800f722:	4306      	orrs	r6, r0
 800f724:	3568      	adds	r5, #104	@ 0x68
 800f726:	e7e9      	b.n	800f6fc <_fwalk_sglue+0x10>

0800f728 <_puts_r>:
 800f728:	6a03      	ldr	r3, [r0, #32]
 800f72a:	b570      	push	{r4, r5, r6, lr}
 800f72c:	6884      	ldr	r4, [r0, #8]
 800f72e:	4605      	mov	r5, r0
 800f730:	460e      	mov	r6, r1
 800f732:	b90b      	cbnz	r3, 800f738 <_puts_r+0x10>
 800f734:	f7ff ffc2 	bl	800f6bc <__sinit>
 800f738:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f73a:	07db      	lsls	r3, r3, #31
 800f73c:	d405      	bmi.n	800f74a <_puts_r+0x22>
 800f73e:	89a3      	ldrh	r3, [r4, #12]
 800f740:	0598      	lsls	r0, r3, #22
 800f742:	d402      	bmi.n	800f74a <_puts_r+0x22>
 800f744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f746:	f000 f9fa 	bl	800fb3e <__retarget_lock_acquire_recursive>
 800f74a:	89a3      	ldrh	r3, [r4, #12]
 800f74c:	0719      	lsls	r1, r3, #28
 800f74e:	d502      	bpl.n	800f756 <_puts_r+0x2e>
 800f750:	6923      	ldr	r3, [r4, #16]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d135      	bne.n	800f7c2 <_puts_r+0x9a>
 800f756:	4621      	mov	r1, r4
 800f758:	4628      	mov	r0, r5
 800f75a:	f000 f91d 	bl	800f998 <__swsetup_r>
 800f75e:	b380      	cbz	r0, 800f7c2 <_puts_r+0x9a>
 800f760:	f04f 35ff 	mov.w	r5, #4294967295
 800f764:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f766:	07da      	lsls	r2, r3, #31
 800f768:	d405      	bmi.n	800f776 <_puts_r+0x4e>
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	059b      	lsls	r3, r3, #22
 800f76e:	d402      	bmi.n	800f776 <_puts_r+0x4e>
 800f770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f772:	f000 f9e5 	bl	800fb40 <__retarget_lock_release_recursive>
 800f776:	4628      	mov	r0, r5
 800f778:	bd70      	pop	{r4, r5, r6, pc}
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	da04      	bge.n	800f788 <_puts_r+0x60>
 800f77e:	69a2      	ldr	r2, [r4, #24]
 800f780:	429a      	cmp	r2, r3
 800f782:	dc17      	bgt.n	800f7b4 <_puts_r+0x8c>
 800f784:	290a      	cmp	r1, #10
 800f786:	d015      	beq.n	800f7b4 <_puts_r+0x8c>
 800f788:	6823      	ldr	r3, [r4, #0]
 800f78a:	1c5a      	adds	r2, r3, #1
 800f78c:	6022      	str	r2, [r4, #0]
 800f78e:	7019      	strb	r1, [r3, #0]
 800f790:	68a3      	ldr	r3, [r4, #8]
 800f792:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f796:	3b01      	subs	r3, #1
 800f798:	60a3      	str	r3, [r4, #8]
 800f79a:	2900      	cmp	r1, #0
 800f79c:	d1ed      	bne.n	800f77a <_puts_r+0x52>
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	da11      	bge.n	800f7c6 <_puts_r+0x9e>
 800f7a2:	4622      	mov	r2, r4
 800f7a4:	210a      	movs	r1, #10
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f000 f8b7 	bl	800f91a <__swbuf_r>
 800f7ac:	3001      	adds	r0, #1
 800f7ae:	d0d7      	beq.n	800f760 <_puts_r+0x38>
 800f7b0:	250a      	movs	r5, #10
 800f7b2:	e7d7      	b.n	800f764 <_puts_r+0x3c>
 800f7b4:	4622      	mov	r2, r4
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	f000 f8af 	bl	800f91a <__swbuf_r>
 800f7bc:	3001      	adds	r0, #1
 800f7be:	d1e7      	bne.n	800f790 <_puts_r+0x68>
 800f7c0:	e7ce      	b.n	800f760 <_puts_r+0x38>
 800f7c2:	3e01      	subs	r6, #1
 800f7c4:	e7e4      	b.n	800f790 <_puts_r+0x68>
 800f7c6:	6823      	ldr	r3, [r4, #0]
 800f7c8:	1c5a      	adds	r2, r3, #1
 800f7ca:	6022      	str	r2, [r4, #0]
 800f7cc:	220a      	movs	r2, #10
 800f7ce:	701a      	strb	r2, [r3, #0]
 800f7d0:	e7ee      	b.n	800f7b0 <_puts_r+0x88>
	...

0800f7d4 <puts>:
 800f7d4:	4b02      	ldr	r3, [pc, #8]	@ (800f7e0 <puts+0xc>)
 800f7d6:	4601      	mov	r1, r0
 800f7d8:	6818      	ldr	r0, [r3, #0]
 800f7da:	f7ff bfa5 	b.w	800f728 <_puts_r>
 800f7de:	bf00      	nop
 800f7e0:	2000004c 	.word	0x2000004c

0800f7e4 <sniprintf>:
 800f7e4:	b40c      	push	{r2, r3}
 800f7e6:	b530      	push	{r4, r5, lr}
 800f7e8:	4b18      	ldr	r3, [pc, #96]	@ (800f84c <sniprintf+0x68>)
 800f7ea:	1e0c      	subs	r4, r1, #0
 800f7ec:	681d      	ldr	r5, [r3, #0]
 800f7ee:	b09d      	sub	sp, #116	@ 0x74
 800f7f0:	da08      	bge.n	800f804 <sniprintf+0x20>
 800f7f2:	238b      	movs	r3, #139	@ 0x8b
 800f7f4:	602b      	str	r3, [r5, #0]
 800f7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f7fa:	b01d      	add	sp, #116	@ 0x74
 800f7fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f800:	b002      	add	sp, #8
 800f802:	4770      	bx	lr
 800f804:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f808:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f80c:	f04f 0300 	mov.w	r3, #0
 800f810:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f812:	bf14      	ite	ne
 800f814:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f818:	4623      	moveq	r3, r4
 800f81a:	9304      	str	r3, [sp, #16]
 800f81c:	9307      	str	r3, [sp, #28]
 800f81e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f822:	9002      	str	r0, [sp, #8]
 800f824:	9006      	str	r0, [sp, #24]
 800f826:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f82a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f82c:	ab21      	add	r3, sp, #132	@ 0x84
 800f82e:	a902      	add	r1, sp, #8
 800f830:	4628      	mov	r0, r5
 800f832:	9301      	str	r3, [sp, #4]
 800f834:	f002 fc7e 	bl	8012134 <_svfiprintf_r>
 800f838:	1c43      	adds	r3, r0, #1
 800f83a:	bfbc      	itt	lt
 800f83c:	238b      	movlt	r3, #139	@ 0x8b
 800f83e:	602b      	strlt	r3, [r5, #0]
 800f840:	2c00      	cmp	r4, #0
 800f842:	d0da      	beq.n	800f7fa <sniprintf+0x16>
 800f844:	9b02      	ldr	r3, [sp, #8]
 800f846:	2200      	movs	r2, #0
 800f848:	701a      	strb	r2, [r3, #0]
 800f84a:	e7d6      	b.n	800f7fa <sniprintf+0x16>
 800f84c:	2000004c 	.word	0x2000004c

0800f850 <siprintf>:
 800f850:	b40e      	push	{r1, r2, r3}
 800f852:	b510      	push	{r4, lr}
 800f854:	b09d      	sub	sp, #116	@ 0x74
 800f856:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f858:	9002      	str	r0, [sp, #8]
 800f85a:	9006      	str	r0, [sp, #24]
 800f85c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f860:	480a      	ldr	r0, [pc, #40]	@ (800f88c <siprintf+0x3c>)
 800f862:	9107      	str	r1, [sp, #28]
 800f864:	9104      	str	r1, [sp, #16]
 800f866:	490a      	ldr	r1, [pc, #40]	@ (800f890 <siprintf+0x40>)
 800f868:	f853 2b04 	ldr.w	r2, [r3], #4
 800f86c:	9105      	str	r1, [sp, #20]
 800f86e:	2400      	movs	r4, #0
 800f870:	a902      	add	r1, sp, #8
 800f872:	6800      	ldr	r0, [r0, #0]
 800f874:	9301      	str	r3, [sp, #4]
 800f876:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f878:	f002 fc5c 	bl	8012134 <_svfiprintf_r>
 800f87c:	9b02      	ldr	r3, [sp, #8]
 800f87e:	701c      	strb	r4, [r3, #0]
 800f880:	b01d      	add	sp, #116	@ 0x74
 800f882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f886:	b003      	add	sp, #12
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	2000004c 	.word	0x2000004c
 800f890:	ffff0208 	.word	0xffff0208

0800f894 <__sread>:
 800f894:	b510      	push	{r4, lr}
 800f896:	460c      	mov	r4, r1
 800f898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f89c:	f000 f900 	bl	800faa0 <_read_r>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	bfab      	itete	ge
 800f8a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f8a6:	89a3      	ldrhlt	r3, [r4, #12]
 800f8a8:	181b      	addge	r3, r3, r0
 800f8aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f8ae:	bfac      	ite	ge
 800f8b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f8b2:	81a3      	strhlt	r3, [r4, #12]
 800f8b4:	bd10      	pop	{r4, pc}

0800f8b6 <__swrite>:
 800f8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ba:	461f      	mov	r7, r3
 800f8bc:	898b      	ldrh	r3, [r1, #12]
 800f8be:	05db      	lsls	r3, r3, #23
 800f8c0:	4605      	mov	r5, r0
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	4616      	mov	r6, r2
 800f8c6:	d505      	bpl.n	800f8d4 <__swrite+0x1e>
 800f8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8cc:	2302      	movs	r3, #2
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	f000 f8d4 	bl	800fa7c <_lseek_r>
 800f8d4:	89a3      	ldrh	r3, [r4, #12]
 800f8d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f8de:	81a3      	strh	r3, [r4, #12]
 800f8e0:	4632      	mov	r2, r6
 800f8e2:	463b      	mov	r3, r7
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ea:	f000 b8eb 	b.w	800fac4 <_write_r>

0800f8ee <__sseek>:
 800f8ee:	b510      	push	{r4, lr}
 800f8f0:	460c      	mov	r4, r1
 800f8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8f6:	f000 f8c1 	bl	800fa7c <_lseek_r>
 800f8fa:	1c43      	adds	r3, r0, #1
 800f8fc:	89a3      	ldrh	r3, [r4, #12]
 800f8fe:	bf15      	itete	ne
 800f900:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f90a:	81a3      	strheq	r3, [r4, #12]
 800f90c:	bf18      	it	ne
 800f90e:	81a3      	strhne	r3, [r4, #12]
 800f910:	bd10      	pop	{r4, pc}

0800f912 <__sclose>:
 800f912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f916:	f000 b8a1 	b.w	800fa5c <_close_r>

0800f91a <__swbuf_r>:
 800f91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91c:	460e      	mov	r6, r1
 800f91e:	4614      	mov	r4, r2
 800f920:	4605      	mov	r5, r0
 800f922:	b118      	cbz	r0, 800f92c <__swbuf_r+0x12>
 800f924:	6a03      	ldr	r3, [r0, #32]
 800f926:	b90b      	cbnz	r3, 800f92c <__swbuf_r+0x12>
 800f928:	f7ff fec8 	bl	800f6bc <__sinit>
 800f92c:	69a3      	ldr	r3, [r4, #24]
 800f92e:	60a3      	str	r3, [r4, #8]
 800f930:	89a3      	ldrh	r3, [r4, #12]
 800f932:	071a      	lsls	r2, r3, #28
 800f934:	d501      	bpl.n	800f93a <__swbuf_r+0x20>
 800f936:	6923      	ldr	r3, [r4, #16]
 800f938:	b943      	cbnz	r3, 800f94c <__swbuf_r+0x32>
 800f93a:	4621      	mov	r1, r4
 800f93c:	4628      	mov	r0, r5
 800f93e:	f000 f82b 	bl	800f998 <__swsetup_r>
 800f942:	b118      	cbz	r0, 800f94c <__swbuf_r+0x32>
 800f944:	f04f 37ff 	mov.w	r7, #4294967295
 800f948:	4638      	mov	r0, r7
 800f94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f94c:	6823      	ldr	r3, [r4, #0]
 800f94e:	6922      	ldr	r2, [r4, #16]
 800f950:	1a98      	subs	r0, r3, r2
 800f952:	6963      	ldr	r3, [r4, #20]
 800f954:	b2f6      	uxtb	r6, r6
 800f956:	4283      	cmp	r3, r0
 800f958:	4637      	mov	r7, r6
 800f95a:	dc05      	bgt.n	800f968 <__swbuf_r+0x4e>
 800f95c:	4621      	mov	r1, r4
 800f95e:	4628      	mov	r0, r5
 800f960:	f002 fd68 	bl	8012434 <_fflush_r>
 800f964:	2800      	cmp	r0, #0
 800f966:	d1ed      	bne.n	800f944 <__swbuf_r+0x2a>
 800f968:	68a3      	ldr	r3, [r4, #8]
 800f96a:	3b01      	subs	r3, #1
 800f96c:	60a3      	str	r3, [r4, #8]
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	1c5a      	adds	r2, r3, #1
 800f972:	6022      	str	r2, [r4, #0]
 800f974:	701e      	strb	r6, [r3, #0]
 800f976:	6962      	ldr	r2, [r4, #20]
 800f978:	1c43      	adds	r3, r0, #1
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d004      	beq.n	800f988 <__swbuf_r+0x6e>
 800f97e:	89a3      	ldrh	r3, [r4, #12]
 800f980:	07db      	lsls	r3, r3, #31
 800f982:	d5e1      	bpl.n	800f948 <__swbuf_r+0x2e>
 800f984:	2e0a      	cmp	r6, #10
 800f986:	d1df      	bne.n	800f948 <__swbuf_r+0x2e>
 800f988:	4621      	mov	r1, r4
 800f98a:	4628      	mov	r0, r5
 800f98c:	f002 fd52 	bl	8012434 <_fflush_r>
 800f990:	2800      	cmp	r0, #0
 800f992:	d0d9      	beq.n	800f948 <__swbuf_r+0x2e>
 800f994:	e7d6      	b.n	800f944 <__swbuf_r+0x2a>
	...

0800f998 <__swsetup_r>:
 800f998:	b538      	push	{r3, r4, r5, lr}
 800f99a:	4b29      	ldr	r3, [pc, #164]	@ (800fa40 <__swsetup_r+0xa8>)
 800f99c:	4605      	mov	r5, r0
 800f99e:	6818      	ldr	r0, [r3, #0]
 800f9a0:	460c      	mov	r4, r1
 800f9a2:	b118      	cbz	r0, 800f9ac <__swsetup_r+0x14>
 800f9a4:	6a03      	ldr	r3, [r0, #32]
 800f9a6:	b90b      	cbnz	r3, 800f9ac <__swsetup_r+0x14>
 800f9a8:	f7ff fe88 	bl	800f6bc <__sinit>
 800f9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9b0:	0719      	lsls	r1, r3, #28
 800f9b2:	d422      	bmi.n	800f9fa <__swsetup_r+0x62>
 800f9b4:	06da      	lsls	r2, r3, #27
 800f9b6:	d407      	bmi.n	800f9c8 <__swsetup_r+0x30>
 800f9b8:	2209      	movs	r2, #9
 800f9ba:	602a      	str	r2, [r5, #0]
 800f9bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9c0:	81a3      	strh	r3, [r4, #12]
 800f9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c6:	e033      	b.n	800fa30 <__swsetup_r+0x98>
 800f9c8:	0758      	lsls	r0, r3, #29
 800f9ca:	d512      	bpl.n	800f9f2 <__swsetup_r+0x5a>
 800f9cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f9ce:	b141      	cbz	r1, 800f9e2 <__swsetup_r+0x4a>
 800f9d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f9d4:	4299      	cmp	r1, r3
 800f9d6:	d002      	beq.n	800f9de <__swsetup_r+0x46>
 800f9d8:	4628      	mov	r0, r5
 800f9da:	f000 ff21 	bl	8010820 <_free_r>
 800f9de:	2300      	movs	r3, #0
 800f9e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f9e2:	89a3      	ldrh	r3, [r4, #12]
 800f9e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f9e8:	81a3      	strh	r3, [r4, #12]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	6063      	str	r3, [r4, #4]
 800f9ee:	6923      	ldr	r3, [r4, #16]
 800f9f0:	6023      	str	r3, [r4, #0]
 800f9f2:	89a3      	ldrh	r3, [r4, #12]
 800f9f4:	f043 0308 	orr.w	r3, r3, #8
 800f9f8:	81a3      	strh	r3, [r4, #12]
 800f9fa:	6923      	ldr	r3, [r4, #16]
 800f9fc:	b94b      	cbnz	r3, 800fa12 <__swsetup_r+0x7a>
 800f9fe:	89a3      	ldrh	r3, [r4, #12]
 800fa00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa08:	d003      	beq.n	800fa12 <__swsetup_r+0x7a>
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f002 fd5f 	bl	80124d0 <__smakebuf_r>
 800fa12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa16:	f013 0201 	ands.w	r2, r3, #1
 800fa1a:	d00a      	beq.n	800fa32 <__swsetup_r+0x9a>
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	60a2      	str	r2, [r4, #8]
 800fa20:	6962      	ldr	r2, [r4, #20]
 800fa22:	4252      	negs	r2, r2
 800fa24:	61a2      	str	r2, [r4, #24]
 800fa26:	6922      	ldr	r2, [r4, #16]
 800fa28:	b942      	cbnz	r2, 800fa3c <__swsetup_r+0xa4>
 800fa2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fa2e:	d1c5      	bne.n	800f9bc <__swsetup_r+0x24>
 800fa30:	bd38      	pop	{r3, r4, r5, pc}
 800fa32:	0799      	lsls	r1, r3, #30
 800fa34:	bf58      	it	pl
 800fa36:	6962      	ldrpl	r2, [r4, #20]
 800fa38:	60a2      	str	r2, [r4, #8]
 800fa3a:	e7f4      	b.n	800fa26 <__swsetup_r+0x8e>
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	e7f7      	b.n	800fa30 <__swsetup_r+0x98>
 800fa40:	2000004c 	.word	0x2000004c

0800fa44 <memset>:
 800fa44:	4402      	add	r2, r0
 800fa46:	4603      	mov	r3, r0
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d100      	bne.n	800fa4e <memset+0xa>
 800fa4c:	4770      	bx	lr
 800fa4e:	f803 1b01 	strb.w	r1, [r3], #1
 800fa52:	e7f9      	b.n	800fa48 <memset+0x4>

0800fa54 <_localeconv_r>:
 800fa54:	4800      	ldr	r0, [pc, #0]	@ (800fa58 <_localeconv_r+0x4>)
 800fa56:	4770      	bx	lr
 800fa58:	2000018c 	.word	0x2000018c

0800fa5c <_close_r>:
 800fa5c:	b538      	push	{r3, r4, r5, lr}
 800fa5e:	4d06      	ldr	r5, [pc, #24]	@ (800fa78 <_close_r+0x1c>)
 800fa60:	2300      	movs	r3, #0
 800fa62:	4604      	mov	r4, r0
 800fa64:	4608      	mov	r0, r1
 800fa66:	602b      	str	r3, [r5, #0]
 800fa68:	f7f3 ff10 	bl	800388c <_close>
 800fa6c:	1c43      	adds	r3, r0, #1
 800fa6e:	d102      	bne.n	800fa76 <_close_r+0x1a>
 800fa70:	682b      	ldr	r3, [r5, #0]
 800fa72:	b103      	cbz	r3, 800fa76 <_close_r+0x1a>
 800fa74:	6023      	str	r3, [r4, #0]
 800fa76:	bd38      	pop	{r3, r4, r5, pc}
 800fa78:	20003a74 	.word	0x20003a74

0800fa7c <_lseek_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d07      	ldr	r5, [pc, #28]	@ (800fa9c <_lseek_r+0x20>)
 800fa80:	4604      	mov	r4, r0
 800fa82:	4608      	mov	r0, r1
 800fa84:	4611      	mov	r1, r2
 800fa86:	2200      	movs	r2, #0
 800fa88:	602a      	str	r2, [r5, #0]
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	f7f3 ff25 	bl	80038da <_lseek>
 800fa90:	1c43      	adds	r3, r0, #1
 800fa92:	d102      	bne.n	800fa9a <_lseek_r+0x1e>
 800fa94:	682b      	ldr	r3, [r5, #0]
 800fa96:	b103      	cbz	r3, 800fa9a <_lseek_r+0x1e>
 800fa98:	6023      	str	r3, [r4, #0]
 800fa9a:	bd38      	pop	{r3, r4, r5, pc}
 800fa9c:	20003a74 	.word	0x20003a74

0800faa0 <_read_r>:
 800faa0:	b538      	push	{r3, r4, r5, lr}
 800faa2:	4d07      	ldr	r5, [pc, #28]	@ (800fac0 <_read_r+0x20>)
 800faa4:	4604      	mov	r4, r0
 800faa6:	4608      	mov	r0, r1
 800faa8:	4611      	mov	r1, r2
 800faaa:	2200      	movs	r2, #0
 800faac:	602a      	str	r2, [r5, #0]
 800faae:	461a      	mov	r2, r3
 800fab0:	f7f3 feb3 	bl	800381a <_read>
 800fab4:	1c43      	adds	r3, r0, #1
 800fab6:	d102      	bne.n	800fabe <_read_r+0x1e>
 800fab8:	682b      	ldr	r3, [r5, #0]
 800faba:	b103      	cbz	r3, 800fabe <_read_r+0x1e>
 800fabc:	6023      	str	r3, [r4, #0]
 800fabe:	bd38      	pop	{r3, r4, r5, pc}
 800fac0:	20003a74 	.word	0x20003a74

0800fac4 <_write_r>:
 800fac4:	b538      	push	{r3, r4, r5, lr}
 800fac6:	4d07      	ldr	r5, [pc, #28]	@ (800fae4 <_write_r+0x20>)
 800fac8:	4604      	mov	r4, r0
 800faca:	4608      	mov	r0, r1
 800facc:	4611      	mov	r1, r2
 800face:	2200      	movs	r2, #0
 800fad0:	602a      	str	r2, [r5, #0]
 800fad2:	461a      	mov	r2, r3
 800fad4:	f7f3 febe 	bl	8003854 <_write>
 800fad8:	1c43      	adds	r3, r0, #1
 800fada:	d102      	bne.n	800fae2 <_write_r+0x1e>
 800fadc:	682b      	ldr	r3, [r5, #0]
 800fade:	b103      	cbz	r3, 800fae2 <_write_r+0x1e>
 800fae0:	6023      	str	r3, [r4, #0]
 800fae2:	bd38      	pop	{r3, r4, r5, pc}
 800fae4:	20003a74 	.word	0x20003a74

0800fae8 <__errno>:
 800fae8:	4b01      	ldr	r3, [pc, #4]	@ (800faf0 <__errno+0x8>)
 800faea:	6818      	ldr	r0, [r3, #0]
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	2000004c 	.word	0x2000004c

0800faf4 <__libc_init_array>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	4d0d      	ldr	r5, [pc, #52]	@ (800fb2c <__libc_init_array+0x38>)
 800faf8:	4c0d      	ldr	r4, [pc, #52]	@ (800fb30 <__libc_init_array+0x3c>)
 800fafa:	1b64      	subs	r4, r4, r5
 800fafc:	10a4      	asrs	r4, r4, #2
 800fafe:	2600      	movs	r6, #0
 800fb00:	42a6      	cmp	r6, r4
 800fb02:	d109      	bne.n	800fb18 <__libc_init_array+0x24>
 800fb04:	4d0b      	ldr	r5, [pc, #44]	@ (800fb34 <__libc_init_array+0x40>)
 800fb06:	4c0c      	ldr	r4, [pc, #48]	@ (800fb38 <__libc_init_array+0x44>)
 800fb08:	f004 ff24 	bl	8014954 <_init>
 800fb0c:	1b64      	subs	r4, r4, r5
 800fb0e:	10a4      	asrs	r4, r4, #2
 800fb10:	2600      	movs	r6, #0
 800fb12:	42a6      	cmp	r6, r4
 800fb14:	d105      	bne.n	800fb22 <__libc_init_array+0x2e>
 800fb16:	bd70      	pop	{r4, r5, r6, pc}
 800fb18:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb1c:	4798      	blx	r3
 800fb1e:	3601      	adds	r6, #1
 800fb20:	e7ee      	b.n	800fb00 <__libc_init_array+0xc>
 800fb22:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb26:	4798      	blx	r3
 800fb28:	3601      	adds	r6, #1
 800fb2a:	e7f2      	b.n	800fb12 <__libc_init_array+0x1e>
 800fb2c:	08015b8c 	.word	0x08015b8c
 800fb30:	08015b8c 	.word	0x08015b8c
 800fb34:	08015b8c 	.word	0x08015b8c
 800fb38:	08015b90 	.word	0x08015b90

0800fb3c <__retarget_lock_init_recursive>:
 800fb3c:	4770      	bx	lr

0800fb3e <__retarget_lock_acquire_recursive>:
 800fb3e:	4770      	bx	lr

0800fb40 <__retarget_lock_release_recursive>:
 800fb40:	4770      	bx	lr

0800fb42 <memcpy>:
 800fb42:	440a      	add	r2, r1
 800fb44:	4291      	cmp	r1, r2
 800fb46:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb4a:	d100      	bne.n	800fb4e <memcpy+0xc>
 800fb4c:	4770      	bx	lr
 800fb4e:	b510      	push	{r4, lr}
 800fb50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb58:	4291      	cmp	r1, r2
 800fb5a:	d1f9      	bne.n	800fb50 <memcpy+0xe>
 800fb5c:	bd10      	pop	{r4, pc}
	...

0800fb60 <nanf>:
 800fb60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fb68 <nanf+0x8>
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop
 800fb68:	7fc00000 	.word	0x7fc00000

0800fb6c <quorem>:
 800fb6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb70:	6903      	ldr	r3, [r0, #16]
 800fb72:	690c      	ldr	r4, [r1, #16]
 800fb74:	42a3      	cmp	r3, r4
 800fb76:	4607      	mov	r7, r0
 800fb78:	db7e      	blt.n	800fc78 <quorem+0x10c>
 800fb7a:	3c01      	subs	r4, #1
 800fb7c:	f101 0814 	add.w	r8, r1, #20
 800fb80:	00a3      	lsls	r3, r4, #2
 800fb82:	f100 0514 	add.w	r5, r0, #20
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb8c:	9301      	str	r3, [sp, #4]
 800fb8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb96:	3301      	adds	r3, #1
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800fba2:	d32e      	bcc.n	800fc02 <quorem+0x96>
 800fba4:	f04f 0a00 	mov.w	sl, #0
 800fba8:	46c4      	mov	ip, r8
 800fbaa:	46ae      	mov	lr, r5
 800fbac:	46d3      	mov	fp, sl
 800fbae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fbb2:	b298      	uxth	r0, r3
 800fbb4:	fb06 a000 	mla	r0, r6, r0, sl
 800fbb8:	0c02      	lsrs	r2, r0, #16
 800fbba:	0c1b      	lsrs	r3, r3, #16
 800fbbc:	fb06 2303 	mla	r3, r6, r3, r2
 800fbc0:	f8de 2000 	ldr.w	r2, [lr]
 800fbc4:	b280      	uxth	r0, r0
 800fbc6:	b292      	uxth	r2, r2
 800fbc8:	1a12      	subs	r2, r2, r0
 800fbca:	445a      	add	r2, fp
 800fbcc:	f8de 0000 	ldr.w	r0, [lr]
 800fbd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fbda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fbde:	b292      	uxth	r2, r2
 800fbe0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fbe4:	45e1      	cmp	r9, ip
 800fbe6:	f84e 2b04 	str.w	r2, [lr], #4
 800fbea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fbee:	d2de      	bcs.n	800fbae <quorem+0x42>
 800fbf0:	9b00      	ldr	r3, [sp, #0]
 800fbf2:	58eb      	ldr	r3, [r5, r3]
 800fbf4:	b92b      	cbnz	r3, 800fc02 <quorem+0x96>
 800fbf6:	9b01      	ldr	r3, [sp, #4]
 800fbf8:	3b04      	subs	r3, #4
 800fbfa:	429d      	cmp	r5, r3
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	d32f      	bcc.n	800fc60 <quorem+0xf4>
 800fc00:	613c      	str	r4, [r7, #16]
 800fc02:	4638      	mov	r0, r7
 800fc04:	f001 f9c8 	bl	8010f98 <__mcmp>
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	db25      	blt.n	800fc58 <quorem+0xec>
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	2000      	movs	r0, #0
 800fc10:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc14:	f8d1 c000 	ldr.w	ip, [r1]
 800fc18:	fa1f fe82 	uxth.w	lr, r2
 800fc1c:	fa1f f38c 	uxth.w	r3, ip
 800fc20:	eba3 030e 	sub.w	r3, r3, lr
 800fc24:	4403      	add	r3, r0
 800fc26:	0c12      	lsrs	r2, r2, #16
 800fc28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fc2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc36:	45c1      	cmp	r9, r8
 800fc38:	f841 3b04 	str.w	r3, [r1], #4
 800fc3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc40:	d2e6      	bcs.n	800fc10 <quorem+0xa4>
 800fc42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc4a:	b922      	cbnz	r2, 800fc56 <quorem+0xea>
 800fc4c:	3b04      	subs	r3, #4
 800fc4e:	429d      	cmp	r5, r3
 800fc50:	461a      	mov	r2, r3
 800fc52:	d30b      	bcc.n	800fc6c <quorem+0x100>
 800fc54:	613c      	str	r4, [r7, #16]
 800fc56:	3601      	adds	r6, #1
 800fc58:	4630      	mov	r0, r6
 800fc5a:	b003      	add	sp, #12
 800fc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc60:	6812      	ldr	r2, [r2, #0]
 800fc62:	3b04      	subs	r3, #4
 800fc64:	2a00      	cmp	r2, #0
 800fc66:	d1cb      	bne.n	800fc00 <quorem+0x94>
 800fc68:	3c01      	subs	r4, #1
 800fc6a:	e7c6      	b.n	800fbfa <quorem+0x8e>
 800fc6c:	6812      	ldr	r2, [r2, #0]
 800fc6e:	3b04      	subs	r3, #4
 800fc70:	2a00      	cmp	r2, #0
 800fc72:	d1ef      	bne.n	800fc54 <quorem+0xe8>
 800fc74:	3c01      	subs	r4, #1
 800fc76:	e7ea      	b.n	800fc4e <quorem+0xe2>
 800fc78:	2000      	movs	r0, #0
 800fc7a:	e7ee      	b.n	800fc5a <quorem+0xee>
 800fc7c:	0000      	movs	r0, r0
	...

0800fc80 <_dtoa_r>:
 800fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	69c7      	ldr	r7, [r0, #28]
 800fc86:	b097      	sub	sp, #92	@ 0x5c
 800fc88:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fc8c:	ec55 4b10 	vmov	r4, r5, d0
 800fc90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fc92:	9107      	str	r1, [sp, #28]
 800fc94:	4681      	mov	r9, r0
 800fc96:	920c      	str	r2, [sp, #48]	@ 0x30
 800fc98:	9311      	str	r3, [sp, #68]	@ 0x44
 800fc9a:	b97f      	cbnz	r7, 800fcbc <_dtoa_r+0x3c>
 800fc9c:	2010      	movs	r0, #16
 800fc9e:	f000 fe09 	bl	80108b4 <malloc>
 800fca2:	4602      	mov	r2, r0
 800fca4:	f8c9 001c 	str.w	r0, [r9, #28]
 800fca8:	b920      	cbnz	r0, 800fcb4 <_dtoa_r+0x34>
 800fcaa:	4ba9      	ldr	r3, [pc, #676]	@ (800ff50 <_dtoa_r+0x2d0>)
 800fcac:	21ef      	movs	r1, #239	@ 0xef
 800fcae:	48a9      	ldr	r0, [pc, #676]	@ (800ff54 <_dtoa_r+0x2d4>)
 800fcb0:	f002 fcb2 	bl	8012618 <__assert_func>
 800fcb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fcb8:	6007      	str	r7, [r0, #0]
 800fcba:	60c7      	str	r7, [r0, #12]
 800fcbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fcc0:	6819      	ldr	r1, [r3, #0]
 800fcc2:	b159      	cbz	r1, 800fcdc <_dtoa_r+0x5c>
 800fcc4:	685a      	ldr	r2, [r3, #4]
 800fcc6:	604a      	str	r2, [r1, #4]
 800fcc8:	2301      	movs	r3, #1
 800fcca:	4093      	lsls	r3, r2
 800fccc:	608b      	str	r3, [r1, #8]
 800fcce:	4648      	mov	r0, r9
 800fcd0:	f000 fee6 	bl	8010aa0 <_Bfree>
 800fcd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fcd8:	2200      	movs	r2, #0
 800fcda:	601a      	str	r2, [r3, #0]
 800fcdc:	1e2b      	subs	r3, r5, #0
 800fcde:	bfb9      	ittee	lt
 800fce0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fce4:	9305      	strlt	r3, [sp, #20]
 800fce6:	2300      	movge	r3, #0
 800fce8:	6033      	strge	r3, [r6, #0]
 800fcea:	9f05      	ldr	r7, [sp, #20]
 800fcec:	4b9a      	ldr	r3, [pc, #616]	@ (800ff58 <_dtoa_r+0x2d8>)
 800fcee:	bfbc      	itt	lt
 800fcf0:	2201      	movlt	r2, #1
 800fcf2:	6032      	strlt	r2, [r6, #0]
 800fcf4:	43bb      	bics	r3, r7
 800fcf6:	d112      	bne.n	800fd1e <_dtoa_r+0x9e>
 800fcf8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fcfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fcfe:	6013      	str	r3, [r2, #0]
 800fd00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd04:	4323      	orrs	r3, r4
 800fd06:	f000 855a 	beq.w	80107be <_dtoa_r+0xb3e>
 800fd0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fd0c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ff6c <_dtoa_r+0x2ec>
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 855c 	beq.w	80107ce <_dtoa_r+0xb4e>
 800fd16:	f10a 0303 	add.w	r3, sl, #3
 800fd1a:	f000 bd56 	b.w	80107ca <_dtoa_r+0xb4a>
 800fd1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fd22:	2200      	movs	r2, #0
 800fd24:	ec51 0b17 	vmov	r0, r1, d7
 800fd28:	2300      	movs	r3, #0
 800fd2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fd2e:	f7f0 fef3 	bl	8000b18 <__aeabi_dcmpeq>
 800fd32:	4680      	mov	r8, r0
 800fd34:	b158      	cbz	r0, 800fd4e <_dtoa_r+0xce>
 800fd36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fd38:	2301      	movs	r3, #1
 800fd3a:	6013      	str	r3, [r2, #0]
 800fd3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fd3e:	b113      	cbz	r3, 800fd46 <_dtoa_r+0xc6>
 800fd40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fd42:	4b86      	ldr	r3, [pc, #536]	@ (800ff5c <_dtoa_r+0x2dc>)
 800fd44:	6013      	str	r3, [r2, #0]
 800fd46:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ff70 <_dtoa_r+0x2f0>
 800fd4a:	f000 bd40 	b.w	80107ce <_dtoa_r+0xb4e>
 800fd4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fd52:	aa14      	add	r2, sp, #80	@ 0x50
 800fd54:	a915      	add	r1, sp, #84	@ 0x54
 800fd56:	4648      	mov	r0, r9
 800fd58:	f001 fa3e 	bl	80111d8 <__d2b>
 800fd5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fd60:	9002      	str	r0, [sp, #8]
 800fd62:	2e00      	cmp	r6, #0
 800fd64:	d078      	beq.n	800fe58 <_dtoa_r+0x1d8>
 800fd66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd68:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fd6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fd74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fd78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fd7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fd80:	4619      	mov	r1, r3
 800fd82:	2200      	movs	r2, #0
 800fd84:	4b76      	ldr	r3, [pc, #472]	@ (800ff60 <_dtoa_r+0x2e0>)
 800fd86:	f7f0 faa7 	bl	80002d8 <__aeabi_dsub>
 800fd8a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ff38 <_dtoa_r+0x2b8>)
 800fd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd90:	f7f0 fc5a 	bl	8000648 <__aeabi_dmul>
 800fd94:	a36a      	add	r3, pc, #424	@ (adr r3, 800ff40 <_dtoa_r+0x2c0>)
 800fd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9a:	f7f0 fa9f 	bl	80002dc <__adddf3>
 800fd9e:	4604      	mov	r4, r0
 800fda0:	4630      	mov	r0, r6
 800fda2:	460d      	mov	r5, r1
 800fda4:	f7f0 fbe6 	bl	8000574 <__aeabi_i2d>
 800fda8:	a367      	add	r3, pc, #412	@ (adr r3, 800ff48 <_dtoa_r+0x2c8>)
 800fdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdae:	f7f0 fc4b 	bl	8000648 <__aeabi_dmul>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	4629      	mov	r1, r5
 800fdba:	f7f0 fa8f 	bl	80002dc <__adddf3>
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	460d      	mov	r5, r1
 800fdc2:	f7f0 fef1 	bl	8000ba8 <__aeabi_d2iz>
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	4607      	mov	r7, r0
 800fdca:	2300      	movs	r3, #0
 800fdcc:	4620      	mov	r0, r4
 800fdce:	4629      	mov	r1, r5
 800fdd0:	f7f0 feac 	bl	8000b2c <__aeabi_dcmplt>
 800fdd4:	b140      	cbz	r0, 800fde8 <_dtoa_r+0x168>
 800fdd6:	4638      	mov	r0, r7
 800fdd8:	f7f0 fbcc 	bl	8000574 <__aeabi_i2d>
 800fddc:	4622      	mov	r2, r4
 800fdde:	462b      	mov	r3, r5
 800fde0:	f7f0 fe9a 	bl	8000b18 <__aeabi_dcmpeq>
 800fde4:	b900      	cbnz	r0, 800fde8 <_dtoa_r+0x168>
 800fde6:	3f01      	subs	r7, #1
 800fde8:	2f16      	cmp	r7, #22
 800fdea:	d852      	bhi.n	800fe92 <_dtoa_r+0x212>
 800fdec:	4b5d      	ldr	r3, [pc, #372]	@ (800ff64 <_dtoa_r+0x2e4>)
 800fdee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fdfa:	f7f0 fe97 	bl	8000b2c <__aeabi_dcmplt>
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d049      	beq.n	800fe96 <_dtoa_r+0x216>
 800fe02:	3f01      	subs	r7, #1
 800fe04:	2300      	movs	r3, #0
 800fe06:	9310      	str	r3, [sp, #64]	@ 0x40
 800fe08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fe0a:	1b9b      	subs	r3, r3, r6
 800fe0c:	1e5a      	subs	r2, r3, #1
 800fe0e:	bf45      	ittet	mi
 800fe10:	f1c3 0301 	rsbmi	r3, r3, #1
 800fe14:	9300      	strmi	r3, [sp, #0]
 800fe16:	2300      	movpl	r3, #0
 800fe18:	2300      	movmi	r3, #0
 800fe1a:	9206      	str	r2, [sp, #24]
 800fe1c:	bf54      	ite	pl
 800fe1e:	9300      	strpl	r3, [sp, #0]
 800fe20:	9306      	strmi	r3, [sp, #24]
 800fe22:	2f00      	cmp	r7, #0
 800fe24:	db39      	blt.n	800fe9a <_dtoa_r+0x21a>
 800fe26:	9b06      	ldr	r3, [sp, #24]
 800fe28:	970d      	str	r7, [sp, #52]	@ 0x34
 800fe2a:	443b      	add	r3, r7
 800fe2c:	9306      	str	r3, [sp, #24]
 800fe2e:	2300      	movs	r3, #0
 800fe30:	9308      	str	r3, [sp, #32]
 800fe32:	9b07      	ldr	r3, [sp, #28]
 800fe34:	2b09      	cmp	r3, #9
 800fe36:	d863      	bhi.n	800ff00 <_dtoa_r+0x280>
 800fe38:	2b05      	cmp	r3, #5
 800fe3a:	bfc4      	itt	gt
 800fe3c:	3b04      	subgt	r3, #4
 800fe3e:	9307      	strgt	r3, [sp, #28]
 800fe40:	9b07      	ldr	r3, [sp, #28]
 800fe42:	f1a3 0302 	sub.w	r3, r3, #2
 800fe46:	bfcc      	ite	gt
 800fe48:	2400      	movgt	r4, #0
 800fe4a:	2401      	movle	r4, #1
 800fe4c:	2b03      	cmp	r3, #3
 800fe4e:	d863      	bhi.n	800ff18 <_dtoa_r+0x298>
 800fe50:	e8df f003 	tbb	[pc, r3]
 800fe54:	2b375452 	.word	0x2b375452
 800fe58:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fe5c:	441e      	add	r6, r3
 800fe5e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fe62:	2b20      	cmp	r3, #32
 800fe64:	bfc1      	itttt	gt
 800fe66:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fe6a:	409f      	lslgt	r7, r3
 800fe6c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fe70:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fe74:	bfd6      	itet	le
 800fe76:	f1c3 0320 	rsble	r3, r3, #32
 800fe7a:	ea47 0003 	orrgt.w	r0, r7, r3
 800fe7e:	fa04 f003 	lslle.w	r0, r4, r3
 800fe82:	f7f0 fb67 	bl	8000554 <__aeabi_ui2d>
 800fe86:	2201      	movs	r2, #1
 800fe88:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fe8c:	3e01      	subs	r6, #1
 800fe8e:	9212      	str	r2, [sp, #72]	@ 0x48
 800fe90:	e776      	b.n	800fd80 <_dtoa_r+0x100>
 800fe92:	2301      	movs	r3, #1
 800fe94:	e7b7      	b.n	800fe06 <_dtoa_r+0x186>
 800fe96:	9010      	str	r0, [sp, #64]	@ 0x40
 800fe98:	e7b6      	b.n	800fe08 <_dtoa_r+0x188>
 800fe9a:	9b00      	ldr	r3, [sp, #0]
 800fe9c:	1bdb      	subs	r3, r3, r7
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	427b      	negs	r3, r7
 800fea2:	9308      	str	r3, [sp, #32]
 800fea4:	2300      	movs	r3, #0
 800fea6:	930d      	str	r3, [sp, #52]	@ 0x34
 800fea8:	e7c3      	b.n	800fe32 <_dtoa_r+0x1b2>
 800feaa:	2301      	movs	r3, #1
 800feac:	9309      	str	r3, [sp, #36]	@ 0x24
 800feae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800feb0:	eb07 0b03 	add.w	fp, r7, r3
 800feb4:	f10b 0301 	add.w	r3, fp, #1
 800feb8:	2b01      	cmp	r3, #1
 800feba:	9303      	str	r3, [sp, #12]
 800febc:	bfb8      	it	lt
 800febe:	2301      	movlt	r3, #1
 800fec0:	e006      	b.n	800fed0 <_dtoa_r+0x250>
 800fec2:	2301      	movs	r3, #1
 800fec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fec6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fec8:	2b00      	cmp	r3, #0
 800feca:	dd28      	ble.n	800ff1e <_dtoa_r+0x29e>
 800fecc:	469b      	mov	fp, r3
 800fece:	9303      	str	r3, [sp, #12]
 800fed0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fed4:	2100      	movs	r1, #0
 800fed6:	2204      	movs	r2, #4
 800fed8:	f102 0514 	add.w	r5, r2, #20
 800fedc:	429d      	cmp	r5, r3
 800fede:	d926      	bls.n	800ff2e <_dtoa_r+0x2ae>
 800fee0:	6041      	str	r1, [r0, #4]
 800fee2:	4648      	mov	r0, r9
 800fee4:	f000 fd9c 	bl	8010a20 <_Balloc>
 800fee8:	4682      	mov	sl, r0
 800feea:	2800      	cmp	r0, #0
 800feec:	d142      	bne.n	800ff74 <_dtoa_r+0x2f4>
 800feee:	4b1e      	ldr	r3, [pc, #120]	@ (800ff68 <_dtoa_r+0x2e8>)
 800fef0:	4602      	mov	r2, r0
 800fef2:	f240 11af 	movw	r1, #431	@ 0x1af
 800fef6:	e6da      	b.n	800fcae <_dtoa_r+0x2e>
 800fef8:	2300      	movs	r3, #0
 800fefa:	e7e3      	b.n	800fec4 <_dtoa_r+0x244>
 800fefc:	2300      	movs	r3, #0
 800fefe:	e7d5      	b.n	800feac <_dtoa_r+0x22c>
 800ff00:	2401      	movs	r4, #1
 800ff02:	2300      	movs	r3, #0
 800ff04:	9307      	str	r3, [sp, #28]
 800ff06:	9409      	str	r4, [sp, #36]	@ 0x24
 800ff08:	f04f 3bff 	mov.w	fp, #4294967295
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f8cd b00c 	str.w	fp, [sp, #12]
 800ff12:	2312      	movs	r3, #18
 800ff14:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff16:	e7db      	b.n	800fed0 <_dtoa_r+0x250>
 800ff18:	2301      	movs	r3, #1
 800ff1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff1c:	e7f4      	b.n	800ff08 <_dtoa_r+0x288>
 800ff1e:	f04f 0b01 	mov.w	fp, #1
 800ff22:	f8cd b00c 	str.w	fp, [sp, #12]
 800ff26:	465b      	mov	r3, fp
 800ff28:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ff2c:	e7d0      	b.n	800fed0 <_dtoa_r+0x250>
 800ff2e:	3101      	adds	r1, #1
 800ff30:	0052      	lsls	r2, r2, #1
 800ff32:	e7d1      	b.n	800fed8 <_dtoa_r+0x258>
 800ff34:	f3af 8000 	nop.w
 800ff38:	636f4361 	.word	0x636f4361
 800ff3c:	3fd287a7 	.word	0x3fd287a7
 800ff40:	8b60c8b3 	.word	0x8b60c8b3
 800ff44:	3fc68a28 	.word	0x3fc68a28
 800ff48:	509f79fb 	.word	0x509f79fb
 800ff4c:	3fd34413 	.word	0x3fd34413
 800ff50:	080153b6 	.word	0x080153b6
 800ff54:	080153cd 	.word	0x080153cd
 800ff58:	7ff00000 	.word	0x7ff00000
 800ff5c:	08015381 	.word	0x08015381
 800ff60:	3ff80000 	.word	0x3ff80000
 800ff64:	08015580 	.word	0x08015580
 800ff68:	08015425 	.word	0x08015425
 800ff6c:	080153b2 	.word	0x080153b2
 800ff70:	08015380 	.word	0x08015380
 800ff74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ff78:	6018      	str	r0, [r3, #0]
 800ff7a:	9b03      	ldr	r3, [sp, #12]
 800ff7c:	2b0e      	cmp	r3, #14
 800ff7e:	f200 80a1 	bhi.w	80100c4 <_dtoa_r+0x444>
 800ff82:	2c00      	cmp	r4, #0
 800ff84:	f000 809e 	beq.w	80100c4 <_dtoa_r+0x444>
 800ff88:	2f00      	cmp	r7, #0
 800ff8a:	dd33      	ble.n	800fff4 <_dtoa_r+0x374>
 800ff8c:	4b9c      	ldr	r3, [pc, #624]	@ (8010200 <_dtoa_r+0x580>)
 800ff8e:	f007 020f 	and.w	r2, r7, #15
 800ff92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff96:	ed93 7b00 	vldr	d7, [r3]
 800ff9a:	05f8      	lsls	r0, r7, #23
 800ff9c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ffa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ffa4:	d516      	bpl.n	800ffd4 <_dtoa_r+0x354>
 800ffa6:	4b97      	ldr	r3, [pc, #604]	@ (8010204 <_dtoa_r+0x584>)
 800ffa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ffac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ffb0:	f7f0 fc74 	bl	800089c <__aeabi_ddiv>
 800ffb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffb8:	f004 040f 	and.w	r4, r4, #15
 800ffbc:	2603      	movs	r6, #3
 800ffbe:	4d91      	ldr	r5, [pc, #580]	@ (8010204 <_dtoa_r+0x584>)
 800ffc0:	b954      	cbnz	r4, 800ffd8 <_dtoa_r+0x358>
 800ffc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ffc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffca:	f7f0 fc67 	bl	800089c <__aeabi_ddiv>
 800ffce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffd2:	e028      	b.n	8010026 <_dtoa_r+0x3a6>
 800ffd4:	2602      	movs	r6, #2
 800ffd6:	e7f2      	b.n	800ffbe <_dtoa_r+0x33e>
 800ffd8:	07e1      	lsls	r1, r4, #31
 800ffda:	d508      	bpl.n	800ffee <_dtoa_r+0x36e>
 800ffdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ffe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ffe4:	f7f0 fb30 	bl	8000648 <__aeabi_dmul>
 800ffe8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ffec:	3601      	adds	r6, #1
 800ffee:	1064      	asrs	r4, r4, #1
 800fff0:	3508      	adds	r5, #8
 800fff2:	e7e5      	b.n	800ffc0 <_dtoa_r+0x340>
 800fff4:	f000 80af 	beq.w	8010156 <_dtoa_r+0x4d6>
 800fff8:	427c      	negs	r4, r7
 800fffa:	4b81      	ldr	r3, [pc, #516]	@ (8010200 <_dtoa_r+0x580>)
 800fffc:	4d81      	ldr	r5, [pc, #516]	@ (8010204 <_dtoa_r+0x584>)
 800fffe:	f004 020f 	and.w	r2, r4, #15
 8010002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801000e:	f7f0 fb1b 	bl	8000648 <__aeabi_dmul>
 8010012:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010016:	1124      	asrs	r4, r4, #4
 8010018:	2300      	movs	r3, #0
 801001a:	2602      	movs	r6, #2
 801001c:	2c00      	cmp	r4, #0
 801001e:	f040 808f 	bne.w	8010140 <_dtoa_r+0x4c0>
 8010022:	2b00      	cmp	r3, #0
 8010024:	d1d3      	bne.n	800ffce <_dtoa_r+0x34e>
 8010026:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010028:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801002c:	2b00      	cmp	r3, #0
 801002e:	f000 8094 	beq.w	801015a <_dtoa_r+0x4da>
 8010032:	4b75      	ldr	r3, [pc, #468]	@ (8010208 <_dtoa_r+0x588>)
 8010034:	2200      	movs	r2, #0
 8010036:	4620      	mov	r0, r4
 8010038:	4629      	mov	r1, r5
 801003a:	f7f0 fd77 	bl	8000b2c <__aeabi_dcmplt>
 801003e:	2800      	cmp	r0, #0
 8010040:	f000 808b 	beq.w	801015a <_dtoa_r+0x4da>
 8010044:	9b03      	ldr	r3, [sp, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	f000 8087 	beq.w	801015a <_dtoa_r+0x4da>
 801004c:	f1bb 0f00 	cmp.w	fp, #0
 8010050:	dd34      	ble.n	80100bc <_dtoa_r+0x43c>
 8010052:	4620      	mov	r0, r4
 8010054:	4b6d      	ldr	r3, [pc, #436]	@ (801020c <_dtoa_r+0x58c>)
 8010056:	2200      	movs	r2, #0
 8010058:	4629      	mov	r1, r5
 801005a:	f7f0 faf5 	bl	8000648 <__aeabi_dmul>
 801005e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010062:	f107 38ff 	add.w	r8, r7, #4294967295
 8010066:	3601      	adds	r6, #1
 8010068:	465c      	mov	r4, fp
 801006a:	4630      	mov	r0, r6
 801006c:	f7f0 fa82 	bl	8000574 <__aeabi_i2d>
 8010070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010074:	f7f0 fae8 	bl	8000648 <__aeabi_dmul>
 8010078:	4b65      	ldr	r3, [pc, #404]	@ (8010210 <_dtoa_r+0x590>)
 801007a:	2200      	movs	r2, #0
 801007c:	f7f0 f92e 	bl	80002dc <__adddf3>
 8010080:	4605      	mov	r5, r0
 8010082:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010086:	2c00      	cmp	r4, #0
 8010088:	d16a      	bne.n	8010160 <_dtoa_r+0x4e0>
 801008a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801008e:	4b61      	ldr	r3, [pc, #388]	@ (8010214 <_dtoa_r+0x594>)
 8010090:	2200      	movs	r2, #0
 8010092:	f7f0 f921 	bl	80002d8 <__aeabi_dsub>
 8010096:	4602      	mov	r2, r0
 8010098:	460b      	mov	r3, r1
 801009a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801009e:	462a      	mov	r2, r5
 80100a0:	4633      	mov	r3, r6
 80100a2:	f7f0 fd61 	bl	8000b68 <__aeabi_dcmpgt>
 80100a6:	2800      	cmp	r0, #0
 80100a8:	f040 8298 	bne.w	80105dc <_dtoa_r+0x95c>
 80100ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100b0:	462a      	mov	r2, r5
 80100b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80100b6:	f7f0 fd39 	bl	8000b2c <__aeabi_dcmplt>
 80100ba:	bb38      	cbnz	r0, 801010c <_dtoa_r+0x48c>
 80100bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80100c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80100c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	f2c0 8157 	blt.w	801037a <_dtoa_r+0x6fa>
 80100cc:	2f0e      	cmp	r7, #14
 80100ce:	f300 8154 	bgt.w	801037a <_dtoa_r+0x6fa>
 80100d2:	4b4b      	ldr	r3, [pc, #300]	@ (8010200 <_dtoa_r+0x580>)
 80100d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80100d8:	ed93 7b00 	vldr	d7, [r3]
 80100dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100de:	2b00      	cmp	r3, #0
 80100e0:	ed8d 7b00 	vstr	d7, [sp]
 80100e4:	f280 80e5 	bge.w	80102b2 <_dtoa_r+0x632>
 80100e8:	9b03      	ldr	r3, [sp, #12]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	f300 80e1 	bgt.w	80102b2 <_dtoa_r+0x632>
 80100f0:	d10c      	bne.n	801010c <_dtoa_r+0x48c>
 80100f2:	4b48      	ldr	r3, [pc, #288]	@ (8010214 <_dtoa_r+0x594>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	ec51 0b17 	vmov	r0, r1, d7
 80100fa:	f7f0 faa5 	bl	8000648 <__aeabi_dmul>
 80100fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010102:	f7f0 fd27 	bl	8000b54 <__aeabi_dcmpge>
 8010106:	2800      	cmp	r0, #0
 8010108:	f000 8266 	beq.w	80105d8 <_dtoa_r+0x958>
 801010c:	2400      	movs	r4, #0
 801010e:	4625      	mov	r5, r4
 8010110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010112:	4656      	mov	r6, sl
 8010114:	ea6f 0803 	mvn.w	r8, r3
 8010118:	2700      	movs	r7, #0
 801011a:	4621      	mov	r1, r4
 801011c:	4648      	mov	r0, r9
 801011e:	f000 fcbf 	bl	8010aa0 <_Bfree>
 8010122:	2d00      	cmp	r5, #0
 8010124:	f000 80bd 	beq.w	80102a2 <_dtoa_r+0x622>
 8010128:	b12f      	cbz	r7, 8010136 <_dtoa_r+0x4b6>
 801012a:	42af      	cmp	r7, r5
 801012c:	d003      	beq.n	8010136 <_dtoa_r+0x4b6>
 801012e:	4639      	mov	r1, r7
 8010130:	4648      	mov	r0, r9
 8010132:	f000 fcb5 	bl	8010aa0 <_Bfree>
 8010136:	4629      	mov	r1, r5
 8010138:	4648      	mov	r0, r9
 801013a:	f000 fcb1 	bl	8010aa0 <_Bfree>
 801013e:	e0b0      	b.n	80102a2 <_dtoa_r+0x622>
 8010140:	07e2      	lsls	r2, r4, #31
 8010142:	d505      	bpl.n	8010150 <_dtoa_r+0x4d0>
 8010144:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010148:	f7f0 fa7e 	bl	8000648 <__aeabi_dmul>
 801014c:	3601      	adds	r6, #1
 801014e:	2301      	movs	r3, #1
 8010150:	1064      	asrs	r4, r4, #1
 8010152:	3508      	adds	r5, #8
 8010154:	e762      	b.n	801001c <_dtoa_r+0x39c>
 8010156:	2602      	movs	r6, #2
 8010158:	e765      	b.n	8010026 <_dtoa_r+0x3a6>
 801015a:	9c03      	ldr	r4, [sp, #12]
 801015c:	46b8      	mov	r8, r7
 801015e:	e784      	b.n	801006a <_dtoa_r+0x3ea>
 8010160:	4b27      	ldr	r3, [pc, #156]	@ (8010200 <_dtoa_r+0x580>)
 8010162:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010164:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010168:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801016c:	4454      	add	r4, sl
 801016e:	2900      	cmp	r1, #0
 8010170:	d054      	beq.n	801021c <_dtoa_r+0x59c>
 8010172:	4929      	ldr	r1, [pc, #164]	@ (8010218 <_dtoa_r+0x598>)
 8010174:	2000      	movs	r0, #0
 8010176:	f7f0 fb91 	bl	800089c <__aeabi_ddiv>
 801017a:	4633      	mov	r3, r6
 801017c:	462a      	mov	r2, r5
 801017e:	f7f0 f8ab 	bl	80002d8 <__aeabi_dsub>
 8010182:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010186:	4656      	mov	r6, sl
 8010188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801018c:	f7f0 fd0c 	bl	8000ba8 <__aeabi_d2iz>
 8010190:	4605      	mov	r5, r0
 8010192:	f7f0 f9ef 	bl	8000574 <__aeabi_i2d>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801019e:	f7f0 f89b 	bl	80002d8 <__aeabi_dsub>
 80101a2:	3530      	adds	r5, #48	@ 0x30
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80101ac:	f806 5b01 	strb.w	r5, [r6], #1
 80101b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80101b4:	f7f0 fcba 	bl	8000b2c <__aeabi_dcmplt>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d172      	bne.n	80102a2 <_dtoa_r+0x622>
 80101bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101c0:	4911      	ldr	r1, [pc, #68]	@ (8010208 <_dtoa_r+0x588>)
 80101c2:	2000      	movs	r0, #0
 80101c4:	f7f0 f888 	bl	80002d8 <__aeabi_dsub>
 80101c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80101cc:	f7f0 fcae 	bl	8000b2c <__aeabi_dcmplt>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	f040 80b4 	bne.w	801033e <_dtoa_r+0x6be>
 80101d6:	42a6      	cmp	r6, r4
 80101d8:	f43f af70 	beq.w	80100bc <_dtoa_r+0x43c>
 80101dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80101e0:	4b0a      	ldr	r3, [pc, #40]	@ (801020c <_dtoa_r+0x58c>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	f7f0 fa30 	bl	8000648 <__aeabi_dmul>
 80101e8:	4b08      	ldr	r3, [pc, #32]	@ (801020c <_dtoa_r+0x58c>)
 80101ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80101ee:	2200      	movs	r2, #0
 80101f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101f4:	f7f0 fa28 	bl	8000648 <__aeabi_dmul>
 80101f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101fc:	e7c4      	b.n	8010188 <_dtoa_r+0x508>
 80101fe:	bf00      	nop
 8010200:	08015580 	.word	0x08015580
 8010204:	08015558 	.word	0x08015558
 8010208:	3ff00000 	.word	0x3ff00000
 801020c:	40240000 	.word	0x40240000
 8010210:	401c0000 	.word	0x401c0000
 8010214:	40140000 	.word	0x40140000
 8010218:	3fe00000 	.word	0x3fe00000
 801021c:	4631      	mov	r1, r6
 801021e:	4628      	mov	r0, r5
 8010220:	f7f0 fa12 	bl	8000648 <__aeabi_dmul>
 8010224:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010228:	9413      	str	r4, [sp, #76]	@ 0x4c
 801022a:	4656      	mov	r6, sl
 801022c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010230:	f7f0 fcba 	bl	8000ba8 <__aeabi_d2iz>
 8010234:	4605      	mov	r5, r0
 8010236:	f7f0 f99d 	bl	8000574 <__aeabi_i2d>
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010242:	f7f0 f849 	bl	80002d8 <__aeabi_dsub>
 8010246:	3530      	adds	r5, #48	@ 0x30
 8010248:	f806 5b01 	strb.w	r5, [r6], #1
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	42a6      	cmp	r6, r4
 8010252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010256:	f04f 0200 	mov.w	r2, #0
 801025a:	d124      	bne.n	80102a6 <_dtoa_r+0x626>
 801025c:	4baf      	ldr	r3, [pc, #700]	@ (801051c <_dtoa_r+0x89c>)
 801025e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010262:	f7f0 f83b 	bl	80002dc <__adddf3>
 8010266:	4602      	mov	r2, r0
 8010268:	460b      	mov	r3, r1
 801026a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801026e:	f7f0 fc7b 	bl	8000b68 <__aeabi_dcmpgt>
 8010272:	2800      	cmp	r0, #0
 8010274:	d163      	bne.n	801033e <_dtoa_r+0x6be>
 8010276:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801027a:	49a8      	ldr	r1, [pc, #672]	@ (801051c <_dtoa_r+0x89c>)
 801027c:	2000      	movs	r0, #0
 801027e:	f7f0 f82b 	bl	80002d8 <__aeabi_dsub>
 8010282:	4602      	mov	r2, r0
 8010284:	460b      	mov	r3, r1
 8010286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801028a:	f7f0 fc4f 	bl	8000b2c <__aeabi_dcmplt>
 801028e:	2800      	cmp	r0, #0
 8010290:	f43f af14 	beq.w	80100bc <_dtoa_r+0x43c>
 8010294:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010296:	1e73      	subs	r3, r6, #1
 8010298:	9313      	str	r3, [sp, #76]	@ 0x4c
 801029a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801029e:	2b30      	cmp	r3, #48	@ 0x30
 80102a0:	d0f8      	beq.n	8010294 <_dtoa_r+0x614>
 80102a2:	4647      	mov	r7, r8
 80102a4:	e03b      	b.n	801031e <_dtoa_r+0x69e>
 80102a6:	4b9e      	ldr	r3, [pc, #632]	@ (8010520 <_dtoa_r+0x8a0>)
 80102a8:	f7f0 f9ce 	bl	8000648 <__aeabi_dmul>
 80102ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102b0:	e7bc      	b.n	801022c <_dtoa_r+0x5ac>
 80102b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80102b6:	4656      	mov	r6, sl
 80102b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102bc:	4620      	mov	r0, r4
 80102be:	4629      	mov	r1, r5
 80102c0:	f7f0 faec 	bl	800089c <__aeabi_ddiv>
 80102c4:	f7f0 fc70 	bl	8000ba8 <__aeabi_d2iz>
 80102c8:	4680      	mov	r8, r0
 80102ca:	f7f0 f953 	bl	8000574 <__aeabi_i2d>
 80102ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102d2:	f7f0 f9b9 	bl	8000648 <__aeabi_dmul>
 80102d6:	4602      	mov	r2, r0
 80102d8:	460b      	mov	r3, r1
 80102da:	4620      	mov	r0, r4
 80102dc:	4629      	mov	r1, r5
 80102de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80102e2:	f7ef fff9 	bl	80002d8 <__aeabi_dsub>
 80102e6:	f806 4b01 	strb.w	r4, [r6], #1
 80102ea:	9d03      	ldr	r5, [sp, #12]
 80102ec:	eba6 040a 	sub.w	r4, r6, sl
 80102f0:	42a5      	cmp	r5, r4
 80102f2:	4602      	mov	r2, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	d133      	bne.n	8010360 <_dtoa_r+0x6e0>
 80102f8:	f7ef fff0 	bl	80002dc <__adddf3>
 80102fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010300:	4604      	mov	r4, r0
 8010302:	460d      	mov	r5, r1
 8010304:	f7f0 fc30 	bl	8000b68 <__aeabi_dcmpgt>
 8010308:	b9c0      	cbnz	r0, 801033c <_dtoa_r+0x6bc>
 801030a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801030e:	4620      	mov	r0, r4
 8010310:	4629      	mov	r1, r5
 8010312:	f7f0 fc01 	bl	8000b18 <__aeabi_dcmpeq>
 8010316:	b110      	cbz	r0, 801031e <_dtoa_r+0x69e>
 8010318:	f018 0f01 	tst.w	r8, #1
 801031c:	d10e      	bne.n	801033c <_dtoa_r+0x6bc>
 801031e:	9902      	ldr	r1, [sp, #8]
 8010320:	4648      	mov	r0, r9
 8010322:	f000 fbbd 	bl	8010aa0 <_Bfree>
 8010326:	2300      	movs	r3, #0
 8010328:	7033      	strb	r3, [r6, #0]
 801032a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801032c:	3701      	adds	r7, #1
 801032e:	601f      	str	r7, [r3, #0]
 8010330:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 824b 	beq.w	80107ce <_dtoa_r+0xb4e>
 8010338:	601e      	str	r6, [r3, #0]
 801033a:	e248      	b.n	80107ce <_dtoa_r+0xb4e>
 801033c:	46b8      	mov	r8, r7
 801033e:	4633      	mov	r3, r6
 8010340:	461e      	mov	r6, r3
 8010342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010346:	2a39      	cmp	r2, #57	@ 0x39
 8010348:	d106      	bne.n	8010358 <_dtoa_r+0x6d8>
 801034a:	459a      	cmp	sl, r3
 801034c:	d1f8      	bne.n	8010340 <_dtoa_r+0x6c0>
 801034e:	2230      	movs	r2, #48	@ 0x30
 8010350:	f108 0801 	add.w	r8, r8, #1
 8010354:	f88a 2000 	strb.w	r2, [sl]
 8010358:	781a      	ldrb	r2, [r3, #0]
 801035a:	3201      	adds	r2, #1
 801035c:	701a      	strb	r2, [r3, #0]
 801035e:	e7a0      	b.n	80102a2 <_dtoa_r+0x622>
 8010360:	4b6f      	ldr	r3, [pc, #444]	@ (8010520 <_dtoa_r+0x8a0>)
 8010362:	2200      	movs	r2, #0
 8010364:	f7f0 f970 	bl	8000648 <__aeabi_dmul>
 8010368:	2200      	movs	r2, #0
 801036a:	2300      	movs	r3, #0
 801036c:	4604      	mov	r4, r0
 801036e:	460d      	mov	r5, r1
 8010370:	f7f0 fbd2 	bl	8000b18 <__aeabi_dcmpeq>
 8010374:	2800      	cmp	r0, #0
 8010376:	d09f      	beq.n	80102b8 <_dtoa_r+0x638>
 8010378:	e7d1      	b.n	801031e <_dtoa_r+0x69e>
 801037a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801037c:	2a00      	cmp	r2, #0
 801037e:	f000 80ea 	beq.w	8010556 <_dtoa_r+0x8d6>
 8010382:	9a07      	ldr	r2, [sp, #28]
 8010384:	2a01      	cmp	r2, #1
 8010386:	f300 80cd 	bgt.w	8010524 <_dtoa_r+0x8a4>
 801038a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801038c:	2a00      	cmp	r2, #0
 801038e:	f000 80c1 	beq.w	8010514 <_dtoa_r+0x894>
 8010392:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010396:	9c08      	ldr	r4, [sp, #32]
 8010398:	9e00      	ldr	r6, [sp, #0]
 801039a:	9a00      	ldr	r2, [sp, #0]
 801039c:	441a      	add	r2, r3
 801039e:	9200      	str	r2, [sp, #0]
 80103a0:	9a06      	ldr	r2, [sp, #24]
 80103a2:	2101      	movs	r1, #1
 80103a4:	441a      	add	r2, r3
 80103a6:	4648      	mov	r0, r9
 80103a8:	9206      	str	r2, [sp, #24]
 80103aa:	f000 fc77 	bl	8010c9c <__i2b>
 80103ae:	4605      	mov	r5, r0
 80103b0:	b166      	cbz	r6, 80103cc <_dtoa_r+0x74c>
 80103b2:	9b06      	ldr	r3, [sp, #24]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	dd09      	ble.n	80103cc <_dtoa_r+0x74c>
 80103b8:	42b3      	cmp	r3, r6
 80103ba:	9a00      	ldr	r2, [sp, #0]
 80103bc:	bfa8      	it	ge
 80103be:	4633      	movge	r3, r6
 80103c0:	1ad2      	subs	r2, r2, r3
 80103c2:	9200      	str	r2, [sp, #0]
 80103c4:	9a06      	ldr	r2, [sp, #24]
 80103c6:	1af6      	subs	r6, r6, r3
 80103c8:	1ad3      	subs	r3, r2, r3
 80103ca:	9306      	str	r3, [sp, #24]
 80103cc:	9b08      	ldr	r3, [sp, #32]
 80103ce:	b30b      	cbz	r3, 8010414 <_dtoa_r+0x794>
 80103d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f000 80c6 	beq.w	8010564 <_dtoa_r+0x8e4>
 80103d8:	2c00      	cmp	r4, #0
 80103da:	f000 80c0 	beq.w	801055e <_dtoa_r+0x8de>
 80103de:	4629      	mov	r1, r5
 80103e0:	4622      	mov	r2, r4
 80103e2:	4648      	mov	r0, r9
 80103e4:	f000 fd12 	bl	8010e0c <__pow5mult>
 80103e8:	9a02      	ldr	r2, [sp, #8]
 80103ea:	4601      	mov	r1, r0
 80103ec:	4605      	mov	r5, r0
 80103ee:	4648      	mov	r0, r9
 80103f0:	f000 fc6a 	bl	8010cc8 <__multiply>
 80103f4:	9902      	ldr	r1, [sp, #8]
 80103f6:	4680      	mov	r8, r0
 80103f8:	4648      	mov	r0, r9
 80103fa:	f000 fb51 	bl	8010aa0 <_Bfree>
 80103fe:	9b08      	ldr	r3, [sp, #32]
 8010400:	1b1b      	subs	r3, r3, r4
 8010402:	9308      	str	r3, [sp, #32]
 8010404:	f000 80b1 	beq.w	801056a <_dtoa_r+0x8ea>
 8010408:	9a08      	ldr	r2, [sp, #32]
 801040a:	4641      	mov	r1, r8
 801040c:	4648      	mov	r0, r9
 801040e:	f000 fcfd 	bl	8010e0c <__pow5mult>
 8010412:	9002      	str	r0, [sp, #8]
 8010414:	2101      	movs	r1, #1
 8010416:	4648      	mov	r0, r9
 8010418:	f000 fc40 	bl	8010c9c <__i2b>
 801041c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801041e:	4604      	mov	r4, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	f000 81d8 	beq.w	80107d6 <_dtoa_r+0xb56>
 8010426:	461a      	mov	r2, r3
 8010428:	4601      	mov	r1, r0
 801042a:	4648      	mov	r0, r9
 801042c:	f000 fcee 	bl	8010e0c <__pow5mult>
 8010430:	9b07      	ldr	r3, [sp, #28]
 8010432:	2b01      	cmp	r3, #1
 8010434:	4604      	mov	r4, r0
 8010436:	f300 809f 	bgt.w	8010578 <_dtoa_r+0x8f8>
 801043a:	9b04      	ldr	r3, [sp, #16]
 801043c:	2b00      	cmp	r3, #0
 801043e:	f040 8097 	bne.w	8010570 <_dtoa_r+0x8f0>
 8010442:	9b05      	ldr	r3, [sp, #20]
 8010444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010448:	2b00      	cmp	r3, #0
 801044a:	f040 8093 	bne.w	8010574 <_dtoa_r+0x8f4>
 801044e:	9b05      	ldr	r3, [sp, #20]
 8010450:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010454:	0d1b      	lsrs	r3, r3, #20
 8010456:	051b      	lsls	r3, r3, #20
 8010458:	b133      	cbz	r3, 8010468 <_dtoa_r+0x7e8>
 801045a:	9b00      	ldr	r3, [sp, #0]
 801045c:	3301      	adds	r3, #1
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	9b06      	ldr	r3, [sp, #24]
 8010462:	3301      	adds	r3, #1
 8010464:	9306      	str	r3, [sp, #24]
 8010466:	2301      	movs	r3, #1
 8010468:	9308      	str	r3, [sp, #32]
 801046a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801046c:	2b00      	cmp	r3, #0
 801046e:	f000 81b8 	beq.w	80107e2 <_dtoa_r+0xb62>
 8010472:	6923      	ldr	r3, [r4, #16]
 8010474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010478:	6918      	ldr	r0, [r3, #16]
 801047a:	f000 fbc3 	bl	8010c04 <__hi0bits>
 801047e:	f1c0 0020 	rsb	r0, r0, #32
 8010482:	9b06      	ldr	r3, [sp, #24]
 8010484:	4418      	add	r0, r3
 8010486:	f010 001f 	ands.w	r0, r0, #31
 801048a:	f000 8082 	beq.w	8010592 <_dtoa_r+0x912>
 801048e:	f1c0 0320 	rsb	r3, r0, #32
 8010492:	2b04      	cmp	r3, #4
 8010494:	dd73      	ble.n	801057e <_dtoa_r+0x8fe>
 8010496:	9b00      	ldr	r3, [sp, #0]
 8010498:	f1c0 001c 	rsb	r0, r0, #28
 801049c:	4403      	add	r3, r0
 801049e:	9300      	str	r3, [sp, #0]
 80104a0:	9b06      	ldr	r3, [sp, #24]
 80104a2:	4403      	add	r3, r0
 80104a4:	4406      	add	r6, r0
 80104a6:	9306      	str	r3, [sp, #24]
 80104a8:	9b00      	ldr	r3, [sp, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	dd05      	ble.n	80104ba <_dtoa_r+0x83a>
 80104ae:	9902      	ldr	r1, [sp, #8]
 80104b0:	461a      	mov	r2, r3
 80104b2:	4648      	mov	r0, r9
 80104b4:	f000 fd04 	bl	8010ec0 <__lshift>
 80104b8:	9002      	str	r0, [sp, #8]
 80104ba:	9b06      	ldr	r3, [sp, #24]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	dd05      	ble.n	80104cc <_dtoa_r+0x84c>
 80104c0:	4621      	mov	r1, r4
 80104c2:	461a      	mov	r2, r3
 80104c4:	4648      	mov	r0, r9
 80104c6:	f000 fcfb 	bl	8010ec0 <__lshift>
 80104ca:	4604      	mov	r4, r0
 80104cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d061      	beq.n	8010596 <_dtoa_r+0x916>
 80104d2:	9802      	ldr	r0, [sp, #8]
 80104d4:	4621      	mov	r1, r4
 80104d6:	f000 fd5f 	bl	8010f98 <__mcmp>
 80104da:	2800      	cmp	r0, #0
 80104dc:	da5b      	bge.n	8010596 <_dtoa_r+0x916>
 80104de:	2300      	movs	r3, #0
 80104e0:	9902      	ldr	r1, [sp, #8]
 80104e2:	220a      	movs	r2, #10
 80104e4:	4648      	mov	r0, r9
 80104e6:	f000 fafd 	bl	8010ae4 <__multadd>
 80104ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104ec:	9002      	str	r0, [sp, #8]
 80104ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f000 8177 	beq.w	80107e6 <_dtoa_r+0xb66>
 80104f8:	4629      	mov	r1, r5
 80104fa:	2300      	movs	r3, #0
 80104fc:	220a      	movs	r2, #10
 80104fe:	4648      	mov	r0, r9
 8010500:	f000 faf0 	bl	8010ae4 <__multadd>
 8010504:	f1bb 0f00 	cmp.w	fp, #0
 8010508:	4605      	mov	r5, r0
 801050a:	dc6f      	bgt.n	80105ec <_dtoa_r+0x96c>
 801050c:	9b07      	ldr	r3, [sp, #28]
 801050e:	2b02      	cmp	r3, #2
 8010510:	dc49      	bgt.n	80105a6 <_dtoa_r+0x926>
 8010512:	e06b      	b.n	80105ec <_dtoa_r+0x96c>
 8010514:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010516:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801051a:	e73c      	b.n	8010396 <_dtoa_r+0x716>
 801051c:	3fe00000 	.word	0x3fe00000
 8010520:	40240000 	.word	0x40240000
 8010524:	9b03      	ldr	r3, [sp, #12]
 8010526:	1e5c      	subs	r4, r3, #1
 8010528:	9b08      	ldr	r3, [sp, #32]
 801052a:	42a3      	cmp	r3, r4
 801052c:	db09      	blt.n	8010542 <_dtoa_r+0x8c2>
 801052e:	1b1c      	subs	r4, r3, r4
 8010530:	9b03      	ldr	r3, [sp, #12]
 8010532:	2b00      	cmp	r3, #0
 8010534:	f6bf af30 	bge.w	8010398 <_dtoa_r+0x718>
 8010538:	9b00      	ldr	r3, [sp, #0]
 801053a:	9a03      	ldr	r2, [sp, #12]
 801053c:	1a9e      	subs	r6, r3, r2
 801053e:	2300      	movs	r3, #0
 8010540:	e72b      	b.n	801039a <_dtoa_r+0x71a>
 8010542:	9b08      	ldr	r3, [sp, #32]
 8010544:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010546:	9408      	str	r4, [sp, #32]
 8010548:	1ae3      	subs	r3, r4, r3
 801054a:	441a      	add	r2, r3
 801054c:	9e00      	ldr	r6, [sp, #0]
 801054e:	9b03      	ldr	r3, [sp, #12]
 8010550:	920d      	str	r2, [sp, #52]	@ 0x34
 8010552:	2400      	movs	r4, #0
 8010554:	e721      	b.n	801039a <_dtoa_r+0x71a>
 8010556:	9c08      	ldr	r4, [sp, #32]
 8010558:	9e00      	ldr	r6, [sp, #0]
 801055a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801055c:	e728      	b.n	80103b0 <_dtoa_r+0x730>
 801055e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010562:	e751      	b.n	8010408 <_dtoa_r+0x788>
 8010564:	9a08      	ldr	r2, [sp, #32]
 8010566:	9902      	ldr	r1, [sp, #8]
 8010568:	e750      	b.n	801040c <_dtoa_r+0x78c>
 801056a:	f8cd 8008 	str.w	r8, [sp, #8]
 801056e:	e751      	b.n	8010414 <_dtoa_r+0x794>
 8010570:	2300      	movs	r3, #0
 8010572:	e779      	b.n	8010468 <_dtoa_r+0x7e8>
 8010574:	9b04      	ldr	r3, [sp, #16]
 8010576:	e777      	b.n	8010468 <_dtoa_r+0x7e8>
 8010578:	2300      	movs	r3, #0
 801057a:	9308      	str	r3, [sp, #32]
 801057c:	e779      	b.n	8010472 <_dtoa_r+0x7f2>
 801057e:	d093      	beq.n	80104a8 <_dtoa_r+0x828>
 8010580:	9a00      	ldr	r2, [sp, #0]
 8010582:	331c      	adds	r3, #28
 8010584:	441a      	add	r2, r3
 8010586:	9200      	str	r2, [sp, #0]
 8010588:	9a06      	ldr	r2, [sp, #24]
 801058a:	441a      	add	r2, r3
 801058c:	441e      	add	r6, r3
 801058e:	9206      	str	r2, [sp, #24]
 8010590:	e78a      	b.n	80104a8 <_dtoa_r+0x828>
 8010592:	4603      	mov	r3, r0
 8010594:	e7f4      	b.n	8010580 <_dtoa_r+0x900>
 8010596:	9b03      	ldr	r3, [sp, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	46b8      	mov	r8, r7
 801059c:	dc20      	bgt.n	80105e0 <_dtoa_r+0x960>
 801059e:	469b      	mov	fp, r3
 80105a0:	9b07      	ldr	r3, [sp, #28]
 80105a2:	2b02      	cmp	r3, #2
 80105a4:	dd1e      	ble.n	80105e4 <_dtoa_r+0x964>
 80105a6:	f1bb 0f00 	cmp.w	fp, #0
 80105aa:	f47f adb1 	bne.w	8010110 <_dtoa_r+0x490>
 80105ae:	4621      	mov	r1, r4
 80105b0:	465b      	mov	r3, fp
 80105b2:	2205      	movs	r2, #5
 80105b4:	4648      	mov	r0, r9
 80105b6:	f000 fa95 	bl	8010ae4 <__multadd>
 80105ba:	4601      	mov	r1, r0
 80105bc:	4604      	mov	r4, r0
 80105be:	9802      	ldr	r0, [sp, #8]
 80105c0:	f000 fcea 	bl	8010f98 <__mcmp>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	f77f ada3 	ble.w	8010110 <_dtoa_r+0x490>
 80105ca:	4656      	mov	r6, sl
 80105cc:	2331      	movs	r3, #49	@ 0x31
 80105ce:	f806 3b01 	strb.w	r3, [r6], #1
 80105d2:	f108 0801 	add.w	r8, r8, #1
 80105d6:	e59f      	b.n	8010118 <_dtoa_r+0x498>
 80105d8:	9c03      	ldr	r4, [sp, #12]
 80105da:	46b8      	mov	r8, r7
 80105dc:	4625      	mov	r5, r4
 80105de:	e7f4      	b.n	80105ca <_dtoa_r+0x94a>
 80105e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80105e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f000 8101 	beq.w	80107ee <_dtoa_r+0xb6e>
 80105ec:	2e00      	cmp	r6, #0
 80105ee:	dd05      	ble.n	80105fc <_dtoa_r+0x97c>
 80105f0:	4629      	mov	r1, r5
 80105f2:	4632      	mov	r2, r6
 80105f4:	4648      	mov	r0, r9
 80105f6:	f000 fc63 	bl	8010ec0 <__lshift>
 80105fa:	4605      	mov	r5, r0
 80105fc:	9b08      	ldr	r3, [sp, #32]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d05c      	beq.n	80106bc <_dtoa_r+0xa3c>
 8010602:	6869      	ldr	r1, [r5, #4]
 8010604:	4648      	mov	r0, r9
 8010606:	f000 fa0b 	bl	8010a20 <_Balloc>
 801060a:	4606      	mov	r6, r0
 801060c:	b928      	cbnz	r0, 801061a <_dtoa_r+0x99a>
 801060e:	4b82      	ldr	r3, [pc, #520]	@ (8010818 <_dtoa_r+0xb98>)
 8010610:	4602      	mov	r2, r0
 8010612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010616:	f7ff bb4a 	b.w	800fcae <_dtoa_r+0x2e>
 801061a:	692a      	ldr	r2, [r5, #16]
 801061c:	3202      	adds	r2, #2
 801061e:	0092      	lsls	r2, r2, #2
 8010620:	f105 010c 	add.w	r1, r5, #12
 8010624:	300c      	adds	r0, #12
 8010626:	f7ff fa8c 	bl	800fb42 <memcpy>
 801062a:	2201      	movs	r2, #1
 801062c:	4631      	mov	r1, r6
 801062e:	4648      	mov	r0, r9
 8010630:	f000 fc46 	bl	8010ec0 <__lshift>
 8010634:	f10a 0301 	add.w	r3, sl, #1
 8010638:	9300      	str	r3, [sp, #0]
 801063a:	eb0a 030b 	add.w	r3, sl, fp
 801063e:	9308      	str	r3, [sp, #32]
 8010640:	9b04      	ldr	r3, [sp, #16]
 8010642:	f003 0301 	and.w	r3, r3, #1
 8010646:	462f      	mov	r7, r5
 8010648:	9306      	str	r3, [sp, #24]
 801064a:	4605      	mov	r5, r0
 801064c:	9b00      	ldr	r3, [sp, #0]
 801064e:	9802      	ldr	r0, [sp, #8]
 8010650:	4621      	mov	r1, r4
 8010652:	f103 3bff 	add.w	fp, r3, #4294967295
 8010656:	f7ff fa89 	bl	800fb6c <quorem>
 801065a:	4603      	mov	r3, r0
 801065c:	3330      	adds	r3, #48	@ 0x30
 801065e:	9003      	str	r0, [sp, #12]
 8010660:	4639      	mov	r1, r7
 8010662:	9802      	ldr	r0, [sp, #8]
 8010664:	9309      	str	r3, [sp, #36]	@ 0x24
 8010666:	f000 fc97 	bl	8010f98 <__mcmp>
 801066a:	462a      	mov	r2, r5
 801066c:	9004      	str	r0, [sp, #16]
 801066e:	4621      	mov	r1, r4
 8010670:	4648      	mov	r0, r9
 8010672:	f000 fcad 	bl	8010fd0 <__mdiff>
 8010676:	68c2      	ldr	r2, [r0, #12]
 8010678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801067a:	4606      	mov	r6, r0
 801067c:	bb02      	cbnz	r2, 80106c0 <_dtoa_r+0xa40>
 801067e:	4601      	mov	r1, r0
 8010680:	9802      	ldr	r0, [sp, #8]
 8010682:	f000 fc89 	bl	8010f98 <__mcmp>
 8010686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010688:	4602      	mov	r2, r0
 801068a:	4631      	mov	r1, r6
 801068c:	4648      	mov	r0, r9
 801068e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010690:	9309      	str	r3, [sp, #36]	@ 0x24
 8010692:	f000 fa05 	bl	8010aa0 <_Bfree>
 8010696:	9b07      	ldr	r3, [sp, #28]
 8010698:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801069a:	9e00      	ldr	r6, [sp, #0]
 801069c:	ea42 0103 	orr.w	r1, r2, r3
 80106a0:	9b06      	ldr	r3, [sp, #24]
 80106a2:	4319      	orrs	r1, r3
 80106a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106a6:	d10d      	bne.n	80106c4 <_dtoa_r+0xa44>
 80106a8:	2b39      	cmp	r3, #57	@ 0x39
 80106aa:	d027      	beq.n	80106fc <_dtoa_r+0xa7c>
 80106ac:	9a04      	ldr	r2, [sp, #16]
 80106ae:	2a00      	cmp	r2, #0
 80106b0:	dd01      	ble.n	80106b6 <_dtoa_r+0xa36>
 80106b2:	9b03      	ldr	r3, [sp, #12]
 80106b4:	3331      	adds	r3, #49	@ 0x31
 80106b6:	f88b 3000 	strb.w	r3, [fp]
 80106ba:	e52e      	b.n	801011a <_dtoa_r+0x49a>
 80106bc:	4628      	mov	r0, r5
 80106be:	e7b9      	b.n	8010634 <_dtoa_r+0x9b4>
 80106c0:	2201      	movs	r2, #1
 80106c2:	e7e2      	b.n	801068a <_dtoa_r+0xa0a>
 80106c4:	9904      	ldr	r1, [sp, #16]
 80106c6:	2900      	cmp	r1, #0
 80106c8:	db04      	blt.n	80106d4 <_dtoa_r+0xa54>
 80106ca:	9807      	ldr	r0, [sp, #28]
 80106cc:	4301      	orrs	r1, r0
 80106ce:	9806      	ldr	r0, [sp, #24]
 80106d0:	4301      	orrs	r1, r0
 80106d2:	d120      	bne.n	8010716 <_dtoa_r+0xa96>
 80106d4:	2a00      	cmp	r2, #0
 80106d6:	ddee      	ble.n	80106b6 <_dtoa_r+0xa36>
 80106d8:	9902      	ldr	r1, [sp, #8]
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	2201      	movs	r2, #1
 80106de:	4648      	mov	r0, r9
 80106e0:	f000 fbee 	bl	8010ec0 <__lshift>
 80106e4:	4621      	mov	r1, r4
 80106e6:	9002      	str	r0, [sp, #8]
 80106e8:	f000 fc56 	bl	8010f98 <__mcmp>
 80106ec:	2800      	cmp	r0, #0
 80106ee:	9b00      	ldr	r3, [sp, #0]
 80106f0:	dc02      	bgt.n	80106f8 <_dtoa_r+0xa78>
 80106f2:	d1e0      	bne.n	80106b6 <_dtoa_r+0xa36>
 80106f4:	07da      	lsls	r2, r3, #31
 80106f6:	d5de      	bpl.n	80106b6 <_dtoa_r+0xa36>
 80106f8:	2b39      	cmp	r3, #57	@ 0x39
 80106fa:	d1da      	bne.n	80106b2 <_dtoa_r+0xa32>
 80106fc:	2339      	movs	r3, #57	@ 0x39
 80106fe:	f88b 3000 	strb.w	r3, [fp]
 8010702:	4633      	mov	r3, r6
 8010704:	461e      	mov	r6, r3
 8010706:	3b01      	subs	r3, #1
 8010708:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801070c:	2a39      	cmp	r2, #57	@ 0x39
 801070e:	d04e      	beq.n	80107ae <_dtoa_r+0xb2e>
 8010710:	3201      	adds	r2, #1
 8010712:	701a      	strb	r2, [r3, #0]
 8010714:	e501      	b.n	801011a <_dtoa_r+0x49a>
 8010716:	2a00      	cmp	r2, #0
 8010718:	dd03      	ble.n	8010722 <_dtoa_r+0xaa2>
 801071a:	2b39      	cmp	r3, #57	@ 0x39
 801071c:	d0ee      	beq.n	80106fc <_dtoa_r+0xa7c>
 801071e:	3301      	adds	r3, #1
 8010720:	e7c9      	b.n	80106b6 <_dtoa_r+0xa36>
 8010722:	9a00      	ldr	r2, [sp, #0]
 8010724:	9908      	ldr	r1, [sp, #32]
 8010726:	f802 3c01 	strb.w	r3, [r2, #-1]
 801072a:	428a      	cmp	r2, r1
 801072c:	d028      	beq.n	8010780 <_dtoa_r+0xb00>
 801072e:	9902      	ldr	r1, [sp, #8]
 8010730:	2300      	movs	r3, #0
 8010732:	220a      	movs	r2, #10
 8010734:	4648      	mov	r0, r9
 8010736:	f000 f9d5 	bl	8010ae4 <__multadd>
 801073a:	42af      	cmp	r7, r5
 801073c:	9002      	str	r0, [sp, #8]
 801073e:	f04f 0300 	mov.w	r3, #0
 8010742:	f04f 020a 	mov.w	r2, #10
 8010746:	4639      	mov	r1, r7
 8010748:	4648      	mov	r0, r9
 801074a:	d107      	bne.n	801075c <_dtoa_r+0xadc>
 801074c:	f000 f9ca 	bl	8010ae4 <__multadd>
 8010750:	4607      	mov	r7, r0
 8010752:	4605      	mov	r5, r0
 8010754:	9b00      	ldr	r3, [sp, #0]
 8010756:	3301      	adds	r3, #1
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	e777      	b.n	801064c <_dtoa_r+0x9cc>
 801075c:	f000 f9c2 	bl	8010ae4 <__multadd>
 8010760:	4629      	mov	r1, r5
 8010762:	4607      	mov	r7, r0
 8010764:	2300      	movs	r3, #0
 8010766:	220a      	movs	r2, #10
 8010768:	4648      	mov	r0, r9
 801076a:	f000 f9bb 	bl	8010ae4 <__multadd>
 801076e:	4605      	mov	r5, r0
 8010770:	e7f0      	b.n	8010754 <_dtoa_r+0xad4>
 8010772:	f1bb 0f00 	cmp.w	fp, #0
 8010776:	bfcc      	ite	gt
 8010778:	465e      	movgt	r6, fp
 801077a:	2601      	movle	r6, #1
 801077c:	4456      	add	r6, sl
 801077e:	2700      	movs	r7, #0
 8010780:	9902      	ldr	r1, [sp, #8]
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	2201      	movs	r2, #1
 8010786:	4648      	mov	r0, r9
 8010788:	f000 fb9a 	bl	8010ec0 <__lshift>
 801078c:	4621      	mov	r1, r4
 801078e:	9002      	str	r0, [sp, #8]
 8010790:	f000 fc02 	bl	8010f98 <__mcmp>
 8010794:	2800      	cmp	r0, #0
 8010796:	dcb4      	bgt.n	8010702 <_dtoa_r+0xa82>
 8010798:	d102      	bne.n	80107a0 <_dtoa_r+0xb20>
 801079a:	9b00      	ldr	r3, [sp, #0]
 801079c:	07db      	lsls	r3, r3, #31
 801079e:	d4b0      	bmi.n	8010702 <_dtoa_r+0xa82>
 80107a0:	4633      	mov	r3, r6
 80107a2:	461e      	mov	r6, r3
 80107a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107a8:	2a30      	cmp	r2, #48	@ 0x30
 80107aa:	d0fa      	beq.n	80107a2 <_dtoa_r+0xb22>
 80107ac:	e4b5      	b.n	801011a <_dtoa_r+0x49a>
 80107ae:	459a      	cmp	sl, r3
 80107b0:	d1a8      	bne.n	8010704 <_dtoa_r+0xa84>
 80107b2:	2331      	movs	r3, #49	@ 0x31
 80107b4:	f108 0801 	add.w	r8, r8, #1
 80107b8:	f88a 3000 	strb.w	r3, [sl]
 80107bc:	e4ad      	b.n	801011a <_dtoa_r+0x49a>
 80107be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80107c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801081c <_dtoa_r+0xb9c>
 80107c4:	b11b      	cbz	r3, 80107ce <_dtoa_r+0xb4e>
 80107c6:	f10a 0308 	add.w	r3, sl, #8
 80107ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80107cc:	6013      	str	r3, [r2, #0]
 80107ce:	4650      	mov	r0, sl
 80107d0:	b017      	add	sp, #92	@ 0x5c
 80107d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d6:	9b07      	ldr	r3, [sp, #28]
 80107d8:	2b01      	cmp	r3, #1
 80107da:	f77f ae2e 	ble.w	801043a <_dtoa_r+0x7ba>
 80107de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107e0:	9308      	str	r3, [sp, #32]
 80107e2:	2001      	movs	r0, #1
 80107e4:	e64d      	b.n	8010482 <_dtoa_r+0x802>
 80107e6:	f1bb 0f00 	cmp.w	fp, #0
 80107ea:	f77f aed9 	ble.w	80105a0 <_dtoa_r+0x920>
 80107ee:	4656      	mov	r6, sl
 80107f0:	9802      	ldr	r0, [sp, #8]
 80107f2:	4621      	mov	r1, r4
 80107f4:	f7ff f9ba 	bl	800fb6c <quorem>
 80107f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80107fc:	f806 3b01 	strb.w	r3, [r6], #1
 8010800:	eba6 020a 	sub.w	r2, r6, sl
 8010804:	4593      	cmp	fp, r2
 8010806:	ddb4      	ble.n	8010772 <_dtoa_r+0xaf2>
 8010808:	9902      	ldr	r1, [sp, #8]
 801080a:	2300      	movs	r3, #0
 801080c:	220a      	movs	r2, #10
 801080e:	4648      	mov	r0, r9
 8010810:	f000 f968 	bl	8010ae4 <__multadd>
 8010814:	9002      	str	r0, [sp, #8]
 8010816:	e7eb      	b.n	80107f0 <_dtoa_r+0xb70>
 8010818:	08015425 	.word	0x08015425
 801081c:	080153a9 	.word	0x080153a9

08010820 <_free_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4605      	mov	r5, r0
 8010824:	2900      	cmp	r1, #0
 8010826:	d041      	beq.n	80108ac <_free_r+0x8c>
 8010828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801082c:	1f0c      	subs	r4, r1, #4
 801082e:	2b00      	cmp	r3, #0
 8010830:	bfb8      	it	lt
 8010832:	18e4      	addlt	r4, r4, r3
 8010834:	f000 f8e8 	bl	8010a08 <__malloc_lock>
 8010838:	4a1d      	ldr	r2, [pc, #116]	@ (80108b0 <_free_r+0x90>)
 801083a:	6813      	ldr	r3, [r2, #0]
 801083c:	b933      	cbnz	r3, 801084c <_free_r+0x2c>
 801083e:	6063      	str	r3, [r4, #4]
 8010840:	6014      	str	r4, [r2, #0]
 8010842:	4628      	mov	r0, r5
 8010844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010848:	f000 b8e4 	b.w	8010a14 <__malloc_unlock>
 801084c:	42a3      	cmp	r3, r4
 801084e:	d908      	bls.n	8010862 <_free_r+0x42>
 8010850:	6820      	ldr	r0, [r4, #0]
 8010852:	1821      	adds	r1, r4, r0
 8010854:	428b      	cmp	r3, r1
 8010856:	bf01      	itttt	eq
 8010858:	6819      	ldreq	r1, [r3, #0]
 801085a:	685b      	ldreq	r3, [r3, #4]
 801085c:	1809      	addeq	r1, r1, r0
 801085e:	6021      	streq	r1, [r4, #0]
 8010860:	e7ed      	b.n	801083e <_free_r+0x1e>
 8010862:	461a      	mov	r2, r3
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	b10b      	cbz	r3, 801086c <_free_r+0x4c>
 8010868:	42a3      	cmp	r3, r4
 801086a:	d9fa      	bls.n	8010862 <_free_r+0x42>
 801086c:	6811      	ldr	r1, [r2, #0]
 801086e:	1850      	adds	r0, r2, r1
 8010870:	42a0      	cmp	r0, r4
 8010872:	d10b      	bne.n	801088c <_free_r+0x6c>
 8010874:	6820      	ldr	r0, [r4, #0]
 8010876:	4401      	add	r1, r0
 8010878:	1850      	adds	r0, r2, r1
 801087a:	4283      	cmp	r3, r0
 801087c:	6011      	str	r1, [r2, #0]
 801087e:	d1e0      	bne.n	8010842 <_free_r+0x22>
 8010880:	6818      	ldr	r0, [r3, #0]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	6053      	str	r3, [r2, #4]
 8010886:	4408      	add	r0, r1
 8010888:	6010      	str	r0, [r2, #0]
 801088a:	e7da      	b.n	8010842 <_free_r+0x22>
 801088c:	d902      	bls.n	8010894 <_free_r+0x74>
 801088e:	230c      	movs	r3, #12
 8010890:	602b      	str	r3, [r5, #0]
 8010892:	e7d6      	b.n	8010842 <_free_r+0x22>
 8010894:	6820      	ldr	r0, [r4, #0]
 8010896:	1821      	adds	r1, r4, r0
 8010898:	428b      	cmp	r3, r1
 801089a:	bf04      	itt	eq
 801089c:	6819      	ldreq	r1, [r3, #0]
 801089e:	685b      	ldreq	r3, [r3, #4]
 80108a0:	6063      	str	r3, [r4, #4]
 80108a2:	bf04      	itt	eq
 80108a4:	1809      	addeq	r1, r1, r0
 80108a6:	6021      	streq	r1, [r4, #0]
 80108a8:	6054      	str	r4, [r2, #4]
 80108aa:	e7ca      	b.n	8010842 <_free_r+0x22>
 80108ac:	bd38      	pop	{r3, r4, r5, pc}
 80108ae:	bf00      	nop
 80108b0:	20003a80 	.word	0x20003a80

080108b4 <malloc>:
 80108b4:	4b02      	ldr	r3, [pc, #8]	@ (80108c0 <malloc+0xc>)
 80108b6:	4601      	mov	r1, r0
 80108b8:	6818      	ldr	r0, [r3, #0]
 80108ba:	f000 b825 	b.w	8010908 <_malloc_r>
 80108be:	bf00      	nop
 80108c0:	2000004c 	.word	0x2000004c

080108c4 <sbrk_aligned>:
 80108c4:	b570      	push	{r4, r5, r6, lr}
 80108c6:	4e0f      	ldr	r6, [pc, #60]	@ (8010904 <sbrk_aligned+0x40>)
 80108c8:	460c      	mov	r4, r1
 80108ca:	6831      	ldr	r1, [r6, #0]
 80108cc:	4605      	mov	r5, r0
 80108ce:	b911      	cbnz	r1, 80108d6 <sbrk_aligned+0x12>
 80108d0:	f001 fe88 	bl	80125e4 <_sbrk_r>
 80108d4:	6030      	str	r0, [r6, #0]
 80108d6:	4621      	mov	r1, r4
 80108d8:	4628      	mov	r0, r5
 80108da:	f001 fe83 	bl	80125e4 <_sbrk_r>
 80108de:	1c43      	adds	r3, r0, #1
 80108e0:	d103      	bne.n	80108ea <sbrk_aligned+0x26>
 80108e2:	f04f 34ff 	mov.w	r4, #4294967295
 80108e6:	4620      	mov	r0, r4
 80108e8:	bd70      	pop	{r4, r5, r6, pc}
 80108ea:	1cc4      	adds	r4, r0, #3
 80108ec:	f024 0403 	bic.w	r4, r4, #3
 80108f0:	42a0      	cmp	r0, r4
 80108f2:	d0f8      	beq.n	80108e6 <sbrk_aligned+0x22>
 80108f4:	1a21      	subs	r1, r4, r0
 80108f6:	4628      	mov	r0, r5
 80108f8:	f001 fe74 	bl	80125e4 <_sbrk_r>
 80108fc:	3001      	adds	r0, #1
 80108fe:	d1f2      	bne.n	80108e6 <sbrk_aligned+0x22>
 8010900:	e7ef      	b.n	80108e2 <sbrk_aligned+0x1e>
 8010902:	bf00      	nop
 8010904:	20003a7c 	.word	0x20003a7c

08010908 <_malloc_r>:
 8010908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801090c:	1ccd      	adds	r5, r1, #3
 801090e:	f025 0503 	bic.w	r5, r5, #3
 8010912:	3508      	adds	r5, #8
 8010914:	2d0c      	cmp	r5, #12
 8010916:	bf38      	it	cc
 8010918:	250c      	movcc	r5, #12
 801091a:	2d00      	cmp	r5, #0
 801091c:	4606      	mov	r6, r0
 801091e:	db01      	blt.n	8010924 <_malloc_r+0x1c>
 8010920:	42a9      	cmp	r1, r5
 8010922:	d904      	bls.n	801092e <_malloc_r+0x26>
 8010924:	230c      	movs	r3, #12
 8010926:	6033      	str	r3, [r6, #0]
 8010928:	2000      	movs	r0, #0
 801092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801092e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a04 <_malloc_r+0xfc>
 8010932:	f000 f869 	bl	8010a08 <__malloc_lock>
 8010936:	f8d8 3000 	ldr.w	r3, [r8]
 801093a:	461c      	mov	r4, r3
 801093c:	bb44      	cbnz	r4, 8010990 <_malloc_r+0x88>
 801093e:	4629      	mov	r1, r5
 8010940:	4630      	mov	r0, r6
 8010942:	f7ff ffbf 	bl	80108c4 <sbrk_aligned>
 8010946:	1c43      	adds	r3, r0, #1
 8010948:	4604      	mov	r4, r0
 801094a:	d158      	bne.n	80109fe <_malloc_r+0xf6>
 801094c:	f8d8 4000 	ldr.w	r4, [r8]
 8010950:	4627      	mov	r7, r4
 8010952:	2f00      	cmp	r7, #0
 8010954:	d143      	bne.n	80109de <_malloc_r+0xd6>
 8010956:	2c00      	cmp	r4, #0
 8010958:	d04b      	beq.n	80109f2 <_malloc_r+0xea>
 801095a:	6823      	ldr	r3, [r4, #0]
 801095c:	4639      	mov	r1, r7
 801095e:	4630      	mov	r0, r6
 8010960:	eb04 0903 	add.w	r9, r4, r3
 8010964:	f001 fe3e 	bl	80125e4 <_sbrk_r>
 8010968:	4581      	cmp	r9, r0
 801096a:	d142      	bne.n	80109f2 <_malloc_r+0xea>
 801096c:	6821      	ldr	r1, [r4, #0]
 801096e:	1a6d      	subs	r5, r5, r1
 8010970:	4629      	mov	r1, r5
 8010972:	4630      	mov	r0, r6
 8010974:	f7ff ffa6 	bl	80108c4 <sbrk_aligned>
 8010978:	3001      	adds	r0, #1
 801097a:	d03a      	beq.n	80109f2 <_malloc_r+0xea>
 801097c:	6823      	ldr	r3, [r4, #0]
 801097e:	442b      	add	r3, r5
 8010980:	6023      	str	r3, [r4, #0]
 8010982:	f8d8 3000 	ldr.w	r3, [r8]
 8010986:	685a      	ldr	r2, [r3, #4]
 8010988:	bb62      	cbnz	r2, 80109e4 <_malloc_r+0xdc>
 801098a:	f8c8 7000 	str.w	r7, [r8]
 801098e:	e00f      	b.n	80109b0 <_malloc_r+0xa8>
 8010990:	6822      	ldr	r2, [r4, #0]
 8010992:	1b52      	subs	r2, r2, r5
 8010994:	d420      	bmi.n	80109d8 <_malloc_r+0xd0>
 8010996:	2a0b      	cmp	r2, #11
 8010998:	d917      	bls.n	80109ca <_malloc_r+0xc2>
 801099a:	1961      	adds	r1, r4, r5
 801099c:	42a3      	cmp	r3, r4
 801099e:	6025      	str	r5, [r4, #0]
 80109a0:	bf18      	it	ne
 80109a2:	6059      	strne	r1, [r3, #4]
 80109a4:	6863      	ldr	r3, [r4, #4]
 80109a6:	bf08      	it	eq
 80109a8:	f8c8 1000 	streq.w	r1, [r8]
 80109ac:	5162      	str	r2, [r4, r5]
 80109ae:	604b      	str	r3, [r1, #4]
 80109b0:	4630      	mov	r0, r6
 80109b2:	f000 f82f 	bl	8010a14 <__malloc_unlock>
 80109b6:	f104 000b 	add.w	r0, r4, #11
 80109ba:	1d23      	adds	r3, r4, #4
 80109bc:	f020 0007 	bic.w	r0, r0, #7
 80109c0:	1ac2      	subs	r2, r0, r3
 80109c2:	bf1c      	itt	ne
 80109c4:	1a1b      	subne	r3, r3, r0
 80109c6:	50a3      	strne	r3, [r4, r2]
 80109c8:	e7af      	b.n	801092a <_malloc_r+0x22>
 80109ca:	6862      	ldr	r2, [r4, #4]
 80109cc:	42a3      	cmp	r3, r4
 80109ce:	bf0c      	ite	eq
 80109d0:	f8c8 2000 	streq.w	r2, [r8]
 80109d4:	605a      	strne	r2, [r3, #4]
 80109d6:	e7eb      	b.n	80109b0 <_malloc_r+0xa8>
 80109d8:	4623      	mov	r3, r4
 80109da:	6864      	ldr	r4, [r4, #4]
 80109dc:	e7ae      	b.n	801093c <_malloc_r+0x34>
 80109de:	463c      	mov	r4, r7
 80109e0:	687f      	ldr	r7, [r7, #4]
 80109e2:	e7b6      	b.n	8010952 <_malloc_r+0x4a>
 80109e4:	461a      	mov	r2, r3
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	42a3      	cmp	r3, r4
 80109ea:	d1fb      	bne.n	80109e4 <_malloc_r+0xdc>
 80109ec:	2300      	movs	r3, #0
 80109ee:	6053      	str	r3, [r2, #4]
 80109f0:	e7de      	b.n	80109b0 <_malloc_r+0xa8>
 80109f2:	230c      	movs	r3, #12
 80109f4:	6033      	str	r3, [r6, #0]
 80109f6:	4630      	mov	r0, r6
 80109f8:	f000 f80c 	bl	8010a14 <__malloc_unlock>
 80109fc:	e794      	b.n	8010928 <_malloc_r+0x20>
 80109fe:	6005      	str	r5, [r0, #0]
 8010a00:	e7d6      	b.n	80109b0 <_malloc_r+0xa8>
 8010a02:	bf00      	nop
 8010a04:	20003a80 	.word	0x20003a80

08010a08 <__malloc_lock>:
 8010a08:	4801      	ldr	r0, [pc, #4]	@ (8010a10 <__malloc_lock+0x8>)
 8010a0a:	f7ff b898 	b.w	800fb3e <__retarget_lock_acquire_recursive>
 8010a0e:	bf00      	nop
 8010a10:	20003a78 	.word	0x20003a78

08010a14 <__malloc_unlock>:
 8010a14:	4801      	ldr	r0, [pc, #4]	@ (8010a1c <__malloc_unlock+0x8>)
 8010a16:	f7ff b893 	b.w	800fb40 <__retarget_lock_release_recursive>
 8010a1a:	bf00      	nop
 8010a1c:	20003a78 	.word	0x20003a78

08010a20 <_Balloc>:
 8010a20:	b570      	push	{r4, r5, r6, lr}
 8010a22:	69c6      	ldr	r6, [r0, #28]
 8010a24:	4604      	mov	r4, r0
 8010a26:	460d      	mov	r5, r1
 8010a28:	b976      	cbnz	r6, 8010a48 <_Balloc+0x28>
 8010a2a:	2010      	movs	r0, #16
 8010a2c:	f7ff ff42 	bl	80108b4 <malloc>
 8010a30:	4602      	mov	r2, r0
 8010a32:	61e0      	str	r0, [r4, #28]
 8010a34:	b920      	cbnz	r0, 8010a40 <_Balloc+0x20>
 8010a36:	4b18      	ldr	r3, [pc, #96]	@ (8010a98 <_Balloc+0x78>)
 8010a38:	4818      	ldr	r0, [pc, #96]	@ (8010a9c <_Balloc+0x7c>)
 8010a3a:	216b      	movs	r1, #107	@ 0x6b
 8010a3c:	f001 fdec 	bl	8012618 <__assert_func>
 8010a40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a44:	6006      	str	r6, [r0, #0]
 8010a46:	60c6      	str	r6, [r0, #12]
 8010a48:	69e6      	ldr	r6, [r4, #28]
 8010a4a:	68f3      	ldr	r3, [r6, #12]
 8010a4c:	b183      	cbz	r3, 8010a70 <_Balloc+0x50>
 8010a4e:	69e3      	ldr	r3, [r4, #28]
 8010a50:	68db      	ldr	r3, [r3, #12]
 8010a52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a56:	b9b8      	cbnz	r0, 8010a88 <_Balloc+0x68>
 8010a58:	2101      	movs	r1, #1
 8010a5a:	fa01 f605 	lsl.w	r6, r1, r5
 8010a5e:	1d72      	adds	r2, r6, #5
 8010a60:	0092      	lsls	r2, r2, #2
 8010a62:	4620      	mov	r0, r4
 8010a64:	f001 fdf6 	bl	8012654 <_calloc_r>
 8010a68:	b160      	cbz	r0, 8010a84 <_Balloc+0x64>
 8010a6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a6e:	e00e      	b.n	8010a8e <_Balloc+0x6e>
 8010a70:	2221      	movs	r2, #33	@ 0x21
 8010a72:	2104      	movs	r1, #4
 8010a74:	4620      	mov	r0, r4
 8010a76:	f001 fded 	bl	8012654 <_calloc_r>
 8010a7a:	69e3      	ldr	r3, [r4, #28]
 8010a7c:	60f0      	str	r0, [r6, #12]
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d1e4      	bne.n	8010a4e <_Balloc+0x2e>
 8010a84:	2000      	movs	r0, #0
 8010a86:	bd70      	pop	{r4, r5, r6, pc}
 8010a88:	6802      	ldr	r2, [r0, #0]
 8010a8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010a8e:	2300      	movs	r3, #0
 8010a90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a94:	e7f7      	b.n	8010a86 <_Balloc+0x66>
 8010a96:	bf00      	nop
 8010a98:	080153b6 	.word	0x080153b6
 8010a9c:	08015436 	.word	0x08015436

08010aa0 <_Bfree>:
 8010aa0:	b570      	push	{r4, r5, r6, lr}
 8010aa2:	69c6      	ldr	r6, [r0, #28]
 8010aa4:	4605      	mov	r5, r0
 8010aa6:	460c      	mov	r4, r1
 8010aa8:	b976      	cbnz	r6, 8010ac8 <_Bfree+0x28>
 8010aaa:	2010      	movs	r0, #16
 8010aac:	f7ff ff02 	bl	80108b4 <malloc>
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	61e8      	str	r0, [r5, #28]
 8010ab4:	b920      	cbnz	r0, 8010ac0 <_Bfree+0x20>
 8010ab6:	4b09      	ldr	r3, [pc, #36]	@ (8010adc <_Bfree+0x3c>)
 8010ab8:	4809      	ldr	r0, [pc, #36]	@ (8010ae0 <_Bfree+0x40>)
 8010aba:	218f      	movs	r1, #143	@ 0x8f
 8010abc:	f001 fdac 	bl	8012618 <__assert_func>
 8010ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ac4:	6006      	str	r6, [r0, #0]
 8010ac6:	60c6      	str	r6, [r0, #12]
 8010ac8:	b13c      	cbz	r4, 8010ada <_Bfree+0x3a>
 8010aca:	69eb      	ldr	r3, [r5, #28]
 8010acc:	6862      	ldr	r2, [r4, #4]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ad4:	6021      	str	r1, [r4, #0]
 8010ad6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ada:	bd70      	pop	{r4, r5, r6, pc}
 8010adc:	080153b6 	.word	0x080153b6
 8010ae0:	08015436 	.word	0x08015436

08010ae4 <__multadd>:
 8010ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ae8:	690d      	ldr	r5, [r1, #16]
 8010aea:	4607      	mov	r7, r0
 8010aec:	460c      	mov	r4, r1
 8010aee:	461e      	mov	r6, r3
 8010af0:	f101 0c14 	add.w	ip, r1, #20
 8010af4:	2000      	movs	r0, #0
 8010af6:	f8dc 3000 	ldr.w	r3, [ip]
 8010afa:	b299      	uxth	r1, r3
 8010afc:	fb02 6101 	mla	r1, r2, r1, r6
 8010b00:	0c1e      	lsrs	r6, r3, #16
 8010b02:	0c0b      	lsrs	r3, r1, #16
 8010b04:	fb02 3306 	mla	r3, r2, r6, r3
 8010b08:	b289      	uxth	r1, r1
 8010b0a:	3001      	adds	r0, #1
 8010b0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b10:	4285      	cmp	r5, r0
 8010b12:	f84c 1b04 	str.w	r1, [ip], #4
 8010b16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b1a:	dcec      	bgt.n	8010af6 <__multadd+0x12>
 8010b1c:	b30e      	cbz	r6, 8010b62 <__multadd+0x7e>
 8010b1e:	68a3      	ldr	r3, [r4, #8]
 8010b20:	42ab      	cmp	r3, r5
 8010b22:	dc19      	bgt.n	8010b58 <__multadd+0x74>
 8010b24:	6861      	ldr	r1, [r4, #4]
 8010b26:	4638      	mov	r0, r7
 8010b28:	3101      	adds	r1, #1
 8010b2a:	f7ff ff79 	bl	8010a20 <_Balloc>
 8010b2e:	4680      	mov	r8, r0
 8010b30:	b928      	cbnz	r0, 8010b3e <__multadd+0x5a>
 8010b32:	4602      	mov	r2, r0
 8010b34:	4b0c      	ldr	r3, [pc, #48]	@ (8010b68 <__multadd+0x84>)
 8010b36:	480d      	ldr	r0, [pc, #52]	@ (8010b6c <__multadd+0x88>)
 8010b38:	21ba      	movs	r1, #186	@ 0xba
 8010b3a:	f001 fd6d 	bl	8012618 <__assert_func>
 8010b3e:	6922      	ldr	r2, [r4, #16]
 8010b40:	3202      	adds	r2, #2
 8010b42:	f104 010c 	add.w	r1, r4, #12
 8010b46:	0092      	lsls	r2, r2, #2
 8010b48:	300c      	adds	r0, #12
 8010b4a:	f7fe fffa 	bl	800fb42 <memcpy>
 8010b4e:	4621      	mov	r1, r4
 8010b50:	4638      	mov	r0, r7
 8010b52:	f7ff ffa5 	bl	8010aa0 <_Bfree>
 8010b56:	4644      	mov	r4, r8
 8010b58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b5c:	3501      	adds	r5, #1
 8010b5e:	615e      	str	r6, [r3, #20]
 8010b60:	6125      	str	r5, [r4, #16]
 8010b62:	4620      	mov	r0, r4
 8010b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b68:	08015425 	.word	0x08015425
 8010b6c:	08015436 	.word	0x08015436

08010b70 <__s2b>:
 8010b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b74:	460c      	mov	r4, r1
 8010b76:	4615      	mov	r5, r2
 8010b78:	461f      	mov	r7, r3
 8010b7a:	2209      	movs	r2, #9
 8010b7c:	3308      	adds	r3, #8
 8010b7e:	4606      	mov	r6, r0
 8010b80:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b84:	2100      	movs	r1, #0
 8010b86:	2201      	movs	r2, #1
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	db09      	blt.n	8010ba0 <__s2b+0x30>
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f7ff ff47 	bl	8010a20 <_Balloc>
 8010b92:	b940      	cbnz	r0, 8010ba6 <__s2b+0x36>
 8010b94:	4602      	mov	r2, r0
 8010b96:	4b19      	ldr	r3, [pc, #100]	@ (8010bfc <__s2b+0x8c>)
 8010b98:	4819      	ldr	r0, [pc, #100]	@ (8010c00 <__s2b+0x90>)
 8010b9a:	21d3      	movs	r1, #211	@ 0xd3
 8010b9c:	f001 fd3c 	bl	8012618 <__assert_func>
 8010ba0:	0052      	lsls	r2, r2, #1
 8010ba2:	3101      	adds	r1, #1
 8010ba4:	e7f0      	b.n	8010b88 <__s2b+0x18>
 8010ba6:	9b08      	ldr	r3, [sp, #32]
 8010ba8:	6143      	str	r3, [r0, #20]
 8010baa:	2d09      	cmp	r5, #9
 8010bac:	f04f 0301 	mov.w	r3, #1
 8010bb0:	6103      	str	r3, [r0, #16]
 8010bb2:	dd16      	ble.n	8010be2 <__s2b+0x72>
 8010bb4:	f104 0909 	add.w	r9, r4, #9
 8010bb8:	46c8      	mov	r8, r9
 8010bba:	442c      	add	r4, r5
 8010bbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010bc0:	4601      	mov	r1, r0
 8010bc2:	3b30      	subs	r3, #48	@ 0x30
 8010bc4:	220a      	movs	r2, #10
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	f7ff ff8c 	bl	8010ae4 <__multadd>
 8010bcc:	45a0      	cmp	r8, r4
 8010bce:	d1f5      	bne.n	8010bbc <__s2b+0x4c>
 8010bd0:	f1a5 0408 	sub.w	r4, r5, #8
 8010bd4:	444c      	add	r4, r9
 8010bd6:	1b2d      	subs	r5, r5, r4
 8010bd8:	1963      	adds	r3, r4, r5
 8010bda:	42bb      	cmp	r3, r7
 8010bdc:	db04      	blt.n	8010be8 <__s2b+0x78>
 8010bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010be2:	340a      	adds	r4, #10
 8010be4:	2509      	movs	r5, #9
 8010be6:	e7f6      	b.n	8010bd6 <__s2b+0x66>
 8010be8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010bec:	4601      	mov	r1, r0
 8010bee:	3b30      	subs	r3, #48	@ 0x30
 8010bf0:	220a      	movs	r2, #10
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f7ff ff76 	bl	8010ae4 <__multadd>
 8010bf8:	e7ee      	b.n	8010bd8 <__s2b+0x68>
 8010bfa:	bf00      	nop
 8010bfc:	08015425 	.word	0x08015425
 8010c00:	08015436 	.word	0x08015436

08010c04 <__hi0bits>:
 8010c04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010c08:	4603      	mov	r3, r0
 8010c0a:	bf36      	itet	cc
 8010c0c:	0403      	lslcc	r3, r0, #16
 8010c0e:	2000      	movcs	r0, #0
 8010c10:	2010      	movcc	r0, #16
 8010c12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010c16:	bf3c      	itt	cc
 8010c18:	021b      	lslcc	r3, r3, #8
 8010c1a:	3008      	addcc	r0, #8
 8010c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c20:	bf3c      	itt	cc
 8010c22:	011b      	lslcc	r3, r3, #4
 8010c24:	3004      	addcc	r0, #4
 8010c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c2a:	bf3c      	itt	cc
 8010c2c:	009b      	lslcc	r3, r3, #2
 8010c2e:	3002      	addcc	r0, #2
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	db05      	blt.n	8010c40 <__hi0bits+0x3c>
 8010c34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010c38:	f100 0001 	add.w	r0, r0, #1
 8010c3c:	bf08      	it	eq
 8010c3e:	2020      	moveq	r0, #32
 8010c40:	4770      	bx	lr

08010c42 <__lo0bits>:
 8010c42:	6803      	ldr	r3, [r0, #0]
 8010c44:	4602      	mov	r2, r0
 8010c46:	f013 0007 	ands.w	r0, r3, #7
 8010c4a:	d00b      	beq.n	8010c64 <__lo0bits+0x22>
 8010c4c:	07d9      	lsls	r1, r3, #31
 8010c4e:	d421      	bmi.n	8010c94 <__lo0bits+0x52>
 8010c50:	0798      	lsls	r0, r3, #30
 8010c52:	bf49      	itett	mi
 8010c54:	085b      	lsrmi	r3, r3, #1
 8010c56:	089b      	lsrpl	r3, r3, #2
 8010c58:	2001      	movmi	r0, #1
 8010c5a:	6013      	strmi	r3, [r2, #0]
 8010c5c:	bf5c      	itt	pl
 8010c5e:	6013      	strpl	r3, [r2, #0]
 8010c60:	2002      	movpl	r0, #2
 8010c62:	4770      	bx	lr
 8010c64:	b299      	uxth	r1, r3
 8010c66:	b909      	cbnz	r1, 8010c6c <__lo0bits+0x2a>
 8010c68:	0c1b      	lsrs	r3, r3, #16
 8010c6a:	2010      	movs	r0, #16
 8010c6c:	b2d9      	uxtb	r1, r3
 8010c6e:	b909      	cbnz	r1, 8010c74 <__lo0bits+0x32>
 8010c70:	3008      	adds	r0, #8
 8010c72:	0a1b      	lsrs	r3, r3, #8
 8010c74:	0719      	lsls	r1, r3, #28
 8010c76:	bf04      	itt	eq
 8010c78:	091b      	lsreq	r3, r3, #4
 8010c7a:	3004      	addeq	r0, #4
 8010c7c:	0799      	lsls	r1, r3, #30
 8010c7e:	bf04      	itt	eq
 8010c80:	089b      	lsreq	r3, r3, #2
 8010c82:	3002      	addeq	r0, #2
 8010c84:	07d9      	lsls	r1, r3, #31
 8010c86:	d403      	bmi.n	8010c90 <__lo0bits+0x4e>
 8010c88:	085b      	lsrs	r3, r3, #1
 8010c8a:	f100 0001 	add.w	r0, r0, #1
 8010c8e:	d003      	beq.n	8010c98 <__lo0bits+0x56>
 8010c90:	6013      	str	r3, [r2, #0]
 8010c92:	4770      	bx	lr
 8010c94:	2000      	movs	r0, #0
 8010c96:	4770      	bx	lr
 8010c98:	2020      	movs	r0, #32
 8010c9a:	4770      	bx	lr

08010c9c <__i2b>:
 8010c9c:	b510      	push	{r4, lr}
 8010c9e:	460c      	mov	r4, r1
 8010ca0:	2101      	movs	r1, #1
 8010ca2:	f7ff febd 	bl	8010a20 <_Balloc>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	b928      	cbnz	r0, 8010cb6 <__i2b+0x1a>
 8010caa:	4b05      	ldr	r3, [pc, #20]	@ (8010cc0 <__i2b+0x24>)
 8010cac:	4805      	ldr	r0, [pc, #20]	@ (8010cc4 <__i2b+0x28>)
 8010cae:	f240 1145 	movw	r1, #325	@ 0x145
 8010cb2:	f001 fcb1 	bl	8012618 <__assert_func>
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	6144      	str	r4, [r0, #20]
 8010cba:	6103      	str	r3, [r0, #16]
 8010cbc:	bd10      	pop	{r4, pc}
 8010cbe:	bf00      	nop
 8010cc0:	08015425 	.word	0x08015425
 8010cc4:	08015436 	.word	0x08015436

08010cc8 <__multiply>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	4617      	mov	r7, r2
 8010cce:	690a      	ldr	r2, [r1, #16]
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	bfa8      	it	ge
 8010cd6:	463b      	movge	r3, r7
 8010cd8:	4689      	mov	r9, r1
 8010cda:	bfa4      	itt	ge
 8010cdc:	460f      	movge	r7, r1
 8010cde:	4699      	movge	r9, r3
 8010ce0:	693d      	ldr	r5, [r7, #16]
 8010ce2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	6879      	ldr	r1, [r7, #4]
 8010cea:	eb05 060a 	add.w	r6, r5, sl
 8010cee:	42b3      	cmp	r3, r6
 8010cf0:	b085      	sub	sp, #20
 8010cf2:	bfb8      	it	lt
 8010cf4:	3101      	addlt	r1, #1
 8010cf6:	f7ff fe93 	bl	8010a20 <_Balloc>
 8010cfa:	b930      	cbnz	r0, 8010d0a <__multiply+0x42>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	4b41      	ldr	r3, [pc, #260]	@ (8010e04 <__multiply+0x13c>)
 8010d00:	4841      	ldr	r0, [pc, #260]	@ (8010e08 <__multiply+0x140>)
 8010d02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010d06:	f001 fc87 	bl	8012618 <__assert_func>
 8010d0a:	f100 0414 	add.w	r4, r0, #20
 8010d0e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010d12:	4623      	mov	r3, r4
 8010d14:	2200      	movs	r2, #0
 8010d16:	4573      	cmp	r3, lr
 8010d18:	d320      	bcc.n	8010d5c <__multiply+0x94>
 8010d1a:	f107 0814 	add.w	r8, r7, #20
 8010d1e:	f109 0114 	add.w	r1, r9, #20
 8010d22:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010d26:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010d2a:	9302      	str	r3, [sp, #8]
 8010d2c:	1beb      	subs	r3, r5, r7
 8010d2e:	3b15      	subs	r3, #21
 8010d30:	f023 0303 	bic.w	r3, r3, #3
 8010d34:	3304      	adds	r3, #4
 8010d36:	3715      	adds	r7, #21
 8010d38:	42bd      	cmp	r5, r7
 8010d3a:	bf38      	it	cc
 8010d3c:	2304      	movcc	r3, #4
 8010d3e:	9301      	str	r3, [sp, #4]
 8010d40:	9b02      	ldr	r3, [sp, #8]
 8010d42:	9103      	str	r1, [sp, #12]
 8010d44:	428b      	cmp	r3, r1
 8010d46:	d80c      	bhi.n	8010d62 <__multiply+0x9a>
 8010d48:	2e00      	cmp	r6, #0
 8010d4a:	dd03      	ble.n	8010d54 <__multiply+0x8c>
 8010d4c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d055      	beq.n	8010e00 <__multiply+0x138>
 8010d54:	6106      	str	r6, [r0, #16]
 8010d56:	b005      	add	sp, #20
 8010d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d5c:	f843 2b04 	str.w	r2, [r3], #4
 8010d60:	e7d9      	b.n	8010d16 <__multiply+0x4e>
 8010d62:	f8b1 a000 	ldrh.w	sl, [r1]
 8010d66:	f1ba 0f00 	cmp.w	sl, #0
 8010d6a:	d01f      	beq.n	8010dac <__multiply+0xe4>
 8010d6c:	46c4      	mov	ip, r8
 8010d6e:	46a1      	mov	r9, r4
 8010d70:	2700      	movs	r7, #0
 8010d72:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010d76:	f8d9 3000 	ldr.w	r3, [r9]
 8010d7a:	fa1f fb82 	uxth.w	fp, r2
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	fb0a 330b 	mla	r3, sl, fp, r3
 8010d84:	443b      	add	r3, r7
 8010d86:	f8d9 7000 	ldr.w	r7, [r9]
 8010d8a:	0c12      	lsrs	r2, r2, #16
 8010d8c:	0c3f      	lsrs	r7, r7, #16
 8010d8e:	fb0a 7202 	mla	r2, sl, r2, r7
 8010d92:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d9c:	4565      	cmp	r5, ip
 8010d9e:	f849 3b04 	str.w	r3, [r9], #4
 8010da2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010da6:	d8e4      	bhi.n	8010d72 <__multiply+0xaa>
 8010da8:	9b01      	ldr	r3, [sp, #4]
 8010daa:	50e7      	str	r7, [r4, r3]
 8010dac:	9b03      	ldr	r3, [sp, #12]
 8010dae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010db2:	3104      	adds	r1, #4
 8010db4:	f1b9 0f00 	cmp.w	r9, #0
 8010db8:	d020      	beq.n	8010dfc <__multiply+0x134>
 8010dba:	6823      	ldr	r3, [r4, #0]
 8010dbc:	4647      	mov	r7, r8
 8010dbe:	46a4      	mov	ip, r4
 8010dc0:	f04f 0a00 	mov.w	sl, #0
 8010dc4:	f8b7 b000 	ldrh.w	fp, [r7]
 8010dc8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010dcc:	fb09 220b 	mla	r2, r9, fp, r2
 8010dd0:	4452      	add	r2, sl
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010dd8:	f84c 3b04 	str.w	r3, [ip], #4
 8010ddc:	f857 3b04 	ldr.w	r3, [r7], #4
 8010de0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010de4:	f8bc 3000 	ldrh.w	r3, [ip]
 8010de8:	fb09 330a 	mla	r3, r9, sl, r3
 8010dec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010df0:	42bd      	cmp	r5, r7
 8010df2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010df6:	d8e5      	bhi.n	8010dc4 <__multiply+0xfc>
 8010df8:	9a01      	ldr	r2, [sp, #4]
 8010dfa:	50a3      	str	r3, [r4, r2]
 8010dfc:	3404      	adds	r4, #4
 8010dfe:	e79f      	b.n	8010d40 <__multiply+0x78>
 8010e00:	3e01      	subs	r6, #1
 8010e02:	e7a1      	b.n	8010d48 <__multiply+0x80>
 8010e04:	08015425 	.word	0x08015425
 8010e08:	08015436 	.word	0x08015436

08010e0c <__pow5mult>:
 8010e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e10:	4615      	mov	r5, r2
 8010e12:	f012 0203 	ands.w	r2, r2, #3
 8010e16:	4607      	mov	r7, r0
 8010e18:	460e      	mov	r6, r1
 8010e1a:	d007      	beq.n	8010e2c <__pow5mult+0x20>
 8010e1c:	4c25      	ldr	r4, [pc, #148]	@ (8010eb4 <__pow5mult+0xa8>)
 8010e1e:	3a01      	subs	r2, #1
 8010e20:	2300      	movs	r3, #0
 8010e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e26:	f7ff fe5d 	bl	8010ae4 <__multadd>
 8010e2a:	4606      	mov	r6, r0
 8010e2c:	10ad      	asrs	r5, r5, #2
 8010e2e:	d03d      	beq.n	8010eac <__pow5mult+0xa0>
 8010e30:	69fc      	ldr	r4, [r7, #28]
 8010e32:	b97c      	cbnz	r4, 8010e54 <__pow5mult+0x48>
 8010e34:	2010      	movs	r0, #16
 8010e36:	f7ff fd3d 	bl	80108b4 <malloc>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	61f8      	str	r0, [r7, #28]
 8010e3e:	b928      	cbnz	r0, 8010e4c <__pow5mult+0x40>
 8010e40:	4b1d      	ldr	r3, [pc, #116]	@ (8010eb8 <__pow5mult+0xac>)
 8010e42:	481e      	ldr	r0, [pc, #120]	@ (8010ebc <__pow5mult+0xb0>)
 8010e44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010e48:	f001 fbe6 	bl	8012618 <__assert_func>
 8010e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e50:	6004      	str	r4, [r0, #0]
 8010e52:	60c4      	str	r4, [r0, #12]
 8010e54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e5c:	b94c      	cbnz	r4, 8010e72 <__pow5mult+0x66>
 8010e5e:	f240 2171 	movw	r1, #625	@ 0x271
 8010e62:	4638      	mov	r0, r7
 8010e64:	f7ff ff1a 	bl	8010c9c <__i2b>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e6e:	4604      	mov	r4, r0
 8010e70:	6003      	str	r3, [r0, #0]
 8010e72:	f04f 0900 	mov.w	r9, #0
 8010e76:	07eb      	lsls	r3, r5, #31
 8010e78:	d50a      	bpl.n	8010e90 <__pow5mult+0x84>
 8010e7a:	4631      	mov	r1, r6
 8010e7c:	4622      	mov	r2, r4
 8010e7e:	4638      	mov	r0, r7
 8010e80:	f7ff ff22 	bl	8010cc8 <__multiply>
 8010e84:	4631      	mov	r1, r6
 8010e86:	4680      	mov	r8, r0
 8010e88:	4638      	mov	r0, r7
 8010e8a:	f7ff fe09 	bl	8010aa0 <_Bfree>
 8010e8e:	4646      	mov	r6, r8
 8010e90:	106d      	asrs	r5, r5, #1
 8010e92:	d00b      	beq.n	8010eac <__pow5mult+0xa0>
 8010e94:	6820      	ldr	r0, [r4, #0]
 8010e96:	b938      	cbnz	r0, 8010ea8 <__pow5mult+0x9c>
 8010e98:	4622      	mov	r2, r4
 8010e9a:	4621      	mov	r1, r4
 8010e9c:	4638      	mov	r0, r7
 8010e9e:	f7ff ff13 	bl	8010cc8 <__multiply>
 8010ea2:	6020      	str	r0, [r4, #0]
 8010ea4:	f8c0 9000 	str.w	r9, [r0]
 8010ea8:	4604      	mov	r4, r0
 8010eaa:	e7e4      	b.n	8010e76 <__pow5mult+0x6a>
 8010eac:	4630      	mov	r0, r6
 8010eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010eb2:	bf00      	nop
 8010eb4:	08015548 	.word	0x08015548
 8010eb8:	080153b6 	.word	0x080153b6
 8010ebc:	08015436 	.word	0x08015436

08010ec0 <__lshift>:
 8010ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec4:	460c      	mov	r4, r1
 8010ec6:	6849      	ldr	r1, [r1, #4]
 8010ec8:	6923      	ldr	r3, [r4, #16]
 8010eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ece:	68a3      	ldr	r3, [r4, #8]
 8010ed0:	4607      	mov	r7, r0
 8010ed2:	4691      	mov	r9, r2
 8010ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010ed8:	f108 0601 	add.w	r6, r8, #1
 8010edc:	42b3      	cmp	r3, r6
 8010ede:	db0b      	blt.n	8010ef8 <__lshift+0x38>
 8010ee0:	4638      	mov	r0, r7
 8010ee2:	f7ff fd9d 	bl	8010a20 <_Balloc>
 8010ee6:	4605      	mov	r5, r0
 8010ee8:	b948      	cbnz	r0, 8010efe <__lshift+0x3e>
 8010eea:	4602      	mov	r2, r0
 8010eec:	4b28      	ldr	r3, [pc, #160]	@ (8010f90 <__lshift+0xd0>)
 8010eee:	4829      	ldr	r0, [pc, #164]	@ (8010f94 <__lshift+0xd4>)
 8010ef0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010ef4:	f001 fb90 	bl	8012618 <__assert_func>
 8010ef8:	3101      	adds	r1, #1
 8010efa:	005b      	lsls	r3, r3, #1
 8010efc:	e7ee      	b.n	8010edc <__lshift+0x1c>
 8010efe:	2300      	movs	r3, #0
 8010f00:	f100 0114 	add.w	r1, r0, #20
 8010f04:	f100 0210 	add.w	r2, r0, #16
 8010f08:	4618      	mov	r0, r3
 8010f0a:	4553      	cmp	r3, sl
 8010f0c:	db33      	blt.n	8010f76 <__lshift+0xb6>
 8010f0e:	6920      	ldr	r0, [r4, #16]
 8010f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f14:	f104 0314 	add.w	r3, r4, #20
 8010f18:	f019 091f 	ands.w	r9, r9, #31
 8010f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010f20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f24:	d02b      	beq.n	8010f7e <__lshift+0xbe>
 8010f26:	f1c9 0e20 	rsb	lr, r9, #32
 8010f2a:	468a      	mov	sl, r1
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	6818      	ldr	r0, [r3, #0]
 8010f30:	fa00 f009 	lsl.w	r0, r0, r9
 8010f34:	4310      	orrs	r0, r2
 8010f36:	f84a 0b04 	str.w	r0, [sl], #4
 8010f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f3e:	459c      	cmp	ip, r3
 8010f40:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f44:	d8f3      	bhi.n	8010f2e <__lshift+0x6e>
 8010f46:	ebac 0304 	sub.w	r3, ip, r4
 8010f4a:	3b15      	subs	r3, #21
 8010f4c:	f023 0303 	bic.w	r3, r3, #3
 8010f50:	3304      	adds	r3, #4
 8010f52:	f104 0015 	add.w	r0, r4, #21
 8010f56:	4560      	cmp	r0, ip
 8010f58:	bf88      	it	hi
 8010f5a:	2304      	movhi	r3, #4
 8010f5c:	50ca      	str	r2, [r1, r3]
 8010f5e:	b10a      	cbz	r2, 8010f64 <__lshift+0xa4>
 8010f60:	f108 0602 	add.w	r6, r8, #2
 8010f64:	3e01      	subs	r6, #1
 8010f66:	4638      	mov	r0, r7
 8010f68:	612e      	str	r6, [r5, #16]
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	f7ff fd98 	bl	8010aa0 <_Bfree>
 8010f70:	4628      	mov	r0, r5
 8010f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	e7c5      	b.n	8010f0a <__lshift+0x4a>
 8010f7e:	3904      	subs	r1, #4
 8010f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f88:	459c      	cmp	ip, r3
 8010f8a:	d8f9      	bhi.n	8010f80 <__lshift+0xc0>
 8010f8c:	e7ea      	b.n	8010f64 <__lshift+0xa4>
 8010f8e:	bf00      	nop
 8010f90:	08015425 	.word	0x08015425
 8010f94:	08015436 	.word	0x08015436

08010f98 <__mcmp>:
 8010f98:	690a      	ldr	r2, [r1, #16]
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	6900      	ldr	r0, [r0, #16]
 8010f9e:	1a80      	subs	r0, r0, r2
 8010fa0:	b530      	push	{r4, r5, lr}
 8010fa2:	d10e      	bne.n	8010fc2 <__mcmp+0x2a>
 8010fa4:	3314      	adds	r3, #20
 8010fa6:	3114      	adds	r1, #20
 8010fa8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010fac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010fb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010fb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010fb8:	4295      	cmp	r5, r2
 8010fba:	d003      	beq.n	8010fc4 <__mcmp+0x2c>
 8010fbc:	d205      	bcs.n	8010fca <__mcmp+0x32>
 8010fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc2:	bd30      	pop	{r4, r5, pc}
 8010fc4:	42a3      	cmp	r3, r4
 8010fc6:	d3f3      	bcc.n	8010fb0 <__mcmp+0x18>
 8010fc8:	e7fb      	b.n	8010fc2 <__mcmp+0x2a>
 8010fca:	2001      	movs	r0, #1
 8010fcc:	e7f9      	b.n	8010fc2 <__mcmp+0x2a>
	...

08010fd0 <__mdiff>:
 8010fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd4:	4689      	mov	r9, r1
 8010fd6:	4606      	mov	r6, r0
 8010fd8:	4611      	mov	r1, r2
 8010fda:	4648      	mov	r0, r9
 8010fdc:	4614      	mov	r4, r2
 8010fde:	f7ff ffdb 	bl	8010f98 <__mcmp>
 8010fe2:	1e05      	subs	r5, r0, #0
 8010fe4:	d112      	bne.n	801100c <__mdiff+0x3c>
 8010fe6:	4629      	mov	r1, r5
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f7ff fd19 	bl	8010a20 <_Balloc>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	b928      	cbnz	r0, 8010ffe <__mdiff+0x2e>
 8010ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80110f0 <__mdiff+0x120>)
 8010ff4:	f240 2137 	movw	r1, #567	@ 0x237
 8010ff8:	483e      	ldr	r0, [pc, #248]	@ (80110f4 <__mdiff+0x124>)
 8010ffa:	f001 fb0d 	bl	8012618 <__assert_func>
 8010ffe:	2301      	movs	r3, #1
 8011000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011004:	4610      	mov	r0, r2
 8011006:	b003      	add	sp, #12
 8011008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801100c:	bfbc      	itt	lt
 801100e:	464b      	movlt	r3, r9
 8011010:	46a1      	movlt	r9, r4
 8011012:	4630      	mov	r0, r6
 8011014:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011018:	bfba      	itte	lt
 801101a:	461c      	movlt	r4, r3
 801101c:	2501      	movlt	r5, #1
 801101e:	2500      	movge	r5, #0
 8011020:	f7ff fcfe 	bl	8010a20 <_Balloc>
 8011024:	4602      	mov	r2, r0
 8011026:	b918      	cbnz	r0, 8011030 <__mdiff+0x60>
 8011028:	4b31      	ldr	r3, [pc, #196]	@ (80110f0 <__mdiff+0x120>)
 801102a:	f240 2145 	movw	r1, #581	@ 0x245
 801102e:	e7e3      	b.n	8010ff8 <__mdiff+0x28>
 8011030:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011034:	6926      	ldr	r6, [r4, #16]
 8011036:	60c5      	str	r5, [r0, #12]
 8011038:	f109 0310 	add.w	r3, r9, #16
 801103c:	f109 0514 	add.w	r5, r9, #20
 8011040:	f104 0e14 	add.w	lr, r4, #20
 8011044:	f100 0b14 	add.w	fp, r0, #20
 8011048:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801104c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011050:	9301      	str	r3, [sp, #4]
 8011052:	46d9      	mov	r9, fp
 8011054:	f04f 0c00 	mov.w	ip, #0
 8011058:	9b01      	ldr	r3, [sp, #4]
 801105a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801105e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011062:	9301      	str	r3, [sp, #4]
 8011064:	fa1f f38a 	uxth.w	r3, sl
 8011068:	4619      	mov	r1, r3
 801106a:	b283      	uxth	r3, r0
 801106c:	1acb      	subs	r3, r1, r3
 801106e:	0c00      	lsrs	r0, r0, #16
 8011070:	4463      	add	r3, ip
 8011072:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011076:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801107a:	b29b      	uxth	r3, r3
 801107c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011080:	4576      	cmp	r6, lr
 8011082:	f849 3b04 	str.w	r3, [r9], #4
 8011086:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801108a:	d8e5      	bhi.n	8011058 <__mdiff+0x88>
 801108c:	1b33      	subs	r3, r6, r4
 801108e:	3b15      	subs	r3, #21
 8011090:	f023 0303 	bic.w	r3, r3, #3
 8011094:	3415      	adds	r4, #21
 8011096:	3304      	adds	r3, #4
 8011098:	42a6      	cmp	r6, r4
 801109a:	bf38      	it	cc
 801109c:	2304      	movcc	r3, #4
 801109e:	441d      	add	r5, r3
 80110a0:	445b      	add	r3, fp
 80110a2:	461e      	mov	r6, r3
 80110a4:	462c      	mov	r4, r5
 80110a6:	4544      	cmp	r4, r8
 80110a8:	d30e      	bcc.n	80110c8 <__mdiff+0xf8>
 80110aa:	f108 0103 	add.w	r1, r8, #3
 80110ae:	1b49      	subs	r1, r1, r5
 80110b0:	f021 0103 	bic.w	r1, r1, #3
 80110b4:	3d03      	subs	r5, #3
 80110b6:	45a8      	cmp	r8, r5
 80110b8:	bf38      	it	cc
 80110ba:	2100      	movcc	r1, #0
 80110bc:	440b      	add	r3, r1
 80110be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80110c2:	b191      	cbz	r1, 80110ea <__mdiff+0x11a>
 80110c4:	6117      	str	r7, [r2, #16]
 80110c6:	e79d      	b.n	8011004 <__mdiff+0x34>
 80110c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80110cc:	46e6      	mov	lr, ip
 80110ce:	0c08      	lsrs	r0, r1, #16
 80110d0:	fa1c fc81 	uxtah	ip, ip, r1
 80110d4:	4471      	add	r1, lr
 80110d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80110da:	b289      	uxth	r1, r1
 80110dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80110e0:	f846 1b04 	str.w	r1, [r6], #4
 80110e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80110e8:	e7dd      	b.n	80110a6 <__mdiff+0xd6>
 80110ea:	3f01      	subs	r7, #1
 80110ec:	e7e7      	b.n	80110be <__mdiff+0xee>
 80110ee:	bf00      	nop
 80110f0:	08015425 	.word	0x08015425
 80110f4:	08015436 	.word	0x08015436

080110f8 <__ulp>:
 80110f8:	b082      	sub	sp, #8
 80110fa:	ed8d 0b00 	vstr	d0, [sp]
 80110fe:	9a01      	ldr	r2, [sp, #4]
 8011100:	4b0f      	ldr	r3, [pc, #60]	@ (8011140 <__ulp+0x48>)
 8011102:	4013      	ands	r3, r2
 8011104:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011108:	2b00      	cmp	r3, #0
 801110a:	dc08      	bgt.n	801111e <__ulp+0x26>
 801110c:	425b      	negs	r3, r3
 801110e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011112:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011116:	da04      	bge.n	8011122 <__ulp+0x2a>
 8011118:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801111c:	4113      	asrs	r3, r2
 801111e:	2200      	movs	r2, #0
 8011120:	e008      	b.n	8011134 <__ulp+0x3c>
 8011122:	f1a2 0314 	sub.w	r3, r2, #20
 8011126:	2b1e      	cmp	r3, #30
 8011128:	bfda      	itte	le
 801112a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801112e:	40da      	lsrle	r2, r3
 8011130:	2201      	movgt	r2, #1
 8011132:	2300      	movs	r3, #0
 8011134:	4619      	mov	r1, r3
 8011136:	4610      	mov	r0, r2
 8011138:	ec41 0b10 	vmov	d0, r0, r1
 801113c:	b002      	add	sp, #8
 801113e:	4770      	bx	lr
 8011140:	7ff00000 	.word	0x7ff00000

08011144 <__b2d>:
 8011144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011148:	6906      	ldr	r6, [r0, #16]
 801114a:	f100 0814 	add.w	r8, r0, #20
 801114e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011152:	1f37      	subs	r7, r6, #4
 8011154:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011158:	4610      	mov	r0, r2
 801115a:	f7ff fd53 	bl	8010c04 <__hi0bits>
 801115e:	f1c0 0320 	rsb	r3, r0, #32
 8011162:	280a      	cmp	r0, #10
 8011164:	600b      	str	r3, [r1, #0]
 8011166:	491b      	ldr	r1, [pc, #108]	@ (80111d4 <__b2d+0x90>)
 8011168:	dc15      	bgt.n	8011196 <__b2d+0x52>
 801116a:	f1c0 0c0b 	rsb	ip, r0, #11
 801116e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011172:	45b8      	cmp	r8, r7
 8011174:	ea43 0501 	orr.w	r5, r3, r1
 8011178:	bf34      	ite	cc
 801117a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801117e:	2300      	movcs	r3, #0
 8011180:	3015      	adds	r0, #21
 8011182:	fa02 f000 	lsl.w	r0, r2, r0
 8011186:	fa23 f30c 	lsr.w	r3, r3, ip
 801118a:	4303      	orrs	r3, r0
 801118c:	461c      	mov	r4, r3
 801118e:	ec45 4b10 	vmov	d0, r4, r5
 8011192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011196:	45b8      	cmp	r8, r7
 8011198:	bf3a      	itte	cc
 801119a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801119e:	f1a6 0708 	subcc.w	r7, r6, #8
 80111a2:	2300      	movcs	r3, #0
 80111a4:	380b      	subs	r0, #11
 80111a6:	d012      	beq.n	80111ce <__b2d+0x8a>
 80111a8:	f1c0 0120 	rsb	r1, r0, #32
 80111ac:	fa23 f401 	lsr.w	r4, r3, r1
 80111b0:	4082      	lsls	r2, r0
 80111b2:	4322      	orrs	r2, r4
 80111b4:	4547      	cmp	r7, r8
 80111b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80111ba:	bf8c      	ite	hi
 80111bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80111c0:	2200      	movls	r2, #0
 80111c2:	4083      	lsls	r3, r0
 80111c4:	40ca      	lsrs	r2, r1
 80111c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80111ca:	4313      	orrs	r3, r2
 80111cc:	e7de      	b.n	801118c <__b2d+0x48>
 80111ce:	ea42 0501 	orr.w	r5, r2, r1
 80111d2:	e7db      	b.n	801118c <__b2d+0x48>
 80111d4:	3ff00000 	.word	0x3ff00000

080111d8 <__d2b>:
 80111d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80111dc:	460f      	mov	r7, r1
 80111de:	2101      	movs	r1, #1
 80111e0:	ec59 8b10 	vmov	r8, r9, d0
 80111e4:	4616      	mov	r6, r2
 80111e6:	f7ff fc1b 	bl	8010a20 <_Balloc>
 80111ea:	4604      	mov	r4, r0
 80111ec:	b930      	cbnz	r0, 80111fc <__d2b+0x24>
 80111ee:	4602      	mov	r2, r0
 80111f0:	4b23      	ldr	r3, [pc, #140]	@ (8011280 <__d2b+0xa8>)
 80111f2:	4824      	ldr	r0, [pc, #144]	@ (8011284 <__d2b+0xac>)
 80111f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80111f8:	f001 fa0e 	bl	8012618 <__assert_func>
 80111fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011204:	b10d      	cbz	r5, 801120a <__d2b+0x32>
 8011206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801120a:	9301      	str	r3, [sp, #4]
 801120c:	f1b8 0300 	subs.w	r3, r8, #0
 8011210:	d023      	beq.n	801125a <__d2b+0x82>
 8011212:	4668      	mov	r0, sp
 8011214:	9300      	str	r3, [sp, #0]
 8011216:	f7ff fd14 	bl	8010c42 <__lo0bits>
 801121a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801121e:	b1d0      	cbz	r0, 8011256 <__d2b+0x7e>
 8011220:	f1c0 0320 	rsb	r3, r0, #32
 8011224:	fa02 f303 	lsl.w	r3, r2, r3
 8011228:	430b      	orrs	r3, r1
 801122a:	40c2      	lsrs	r2, r0
 801122c:	6163      	str	r3, [r4, #20]
 801122e:	9201      	str	r2, [sp, #4]
 8011230:	9b01      	ldr	r3, [sp, #4]
 8011232:	61a3      	str	r3, [r4, #24]
 8011234:	2b00      	cmp	r3, #0
 8011236:	bf0c      	ite	eq
 8011238:	2201      	moveq	r2, #1
 801123a:	2202      	movne	r2, #2
 801123c:	6122      	str	r2, [r4, #16]
 801123e:	b1a5      	cbz	r5, 801126a <__d2b+0x92>
 8011240:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011244:	4405      	add	r5, r0
 8011246:	603d      	str	r5, [r7, #0]
 8011248:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801124c:	6030      	str	r0, [r6, #0]
 801124e:	4620      	mov	r0, r4
 8011250:	b003      	add	sp, #12
 8011252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011256:	6161      	str	r1, [r4, #20]
 8011258:	e7ea      	b.n	8011230 <__d2b+0x58>
 801125a:	a801      	add	r0, sp, #4
 801125c:	f7ff fcf1 	bl	8010c42 <__lo0bits>
 8011260:	9b01      	ldr	r3, [sp, #4]
 8011262:	6163      	str	r3, [r4, #20]
 8011264:	3020      	adds	r0, #32
 8011266:	2201      	movs	r2, #1
 8011268:	e7e8      	b.n	801123c <__d2b+0x64>
 801126a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801126e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011272:	6038      	str	r0, [r7, #0]
 8011274:	6918      	ldr	r0, [r3, #16]
 8011276:	f7ff fcc5 	bl	8010c04 <__hi0bits>
 801127a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801127e:	e7e5      	b.n	801124c <__d2b+0x74>
 8011280:	08015425 	.word	0x08015425
 8011284:	08015436 	.word	0x08015436

08011288 <__ratio>:
 8011288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801128c:	b085      	sub	sp, #20
 801128e:	e9cd 1000 	strd	r1, r0, [sp]
 8011292:	a902      	add	r1, sp, #8
 8011294:	f7ff ff56 	bl	8011144 <__b2d>
 8011298:	9800      	ldr	r0, [sp, #0]
 801129a:	a903      	add	r1, sp, #12
 801129c:	ec55 4b10 	vmov	r4, r5, d0
 80112a0:	f7ff ff50 	bl	8011144 <__b2d>
 80112a4:	9b01      	ldr	r3, [sp, #4]
 80112a6:	6919      	ldr	r1, [r3, #16]
 80112a8:	9b00      	ldr	r3, [sp, #0]
 80112aa:	691b      	ldr	r3, [r3, #16]
 80112ac:	1ac9      	subs	r1, r1, r3
 80112ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80112b2:	1a9b      	subs	r3, r3, r2
 80112b4:	ec5b ab10 	vmov	sl, fp, d0
 80112b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80112bc:	2b00      	cmp	r3, #0
 80112be:	bfce      	itee	gt
 80112c0:	462a      	movgt	r2, r5
 80112c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80112c6:	465a      	movle	r2, fp
 80112c8:	462f      	mov	r7, r5
 80112ca:	46d9      	mov	r9, fp
 80112cc:	bfcc      	ite	gt
 80112ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80112d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80112d6:	464b      	mov	r3, r9
 80112d8:	4652      	mov	r2, sl
 80112da:	4620      	mov	r0, r4
 80112dc:	4639      	mov	r1, r7
 80112de:	f7ef fadd 	bl	800089c <__aeabi_ddiv>
 80112e2:	ec41 0b10 	vmov	d0, r0, r1
 80112e6:	b005      	add	sp, #20
 80112e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080112ec <__copybits>:
 80112ec:	3901      	subs	r1, #1
 80112ee:	b570      	push	{r4, r5, r6, lr}
 80112f0:	1149      	asrs	r1, r1, #5
 80112f2:	6914      	ldr	r4, [r2, #16]
 80112f4:	3101      	adds	r1, #1
 80112f6:	f102 0314 	add.w	r3, r2, #20
 80112fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80112fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011302:	1f05      	subs	r5, r0, #4
 8011304:	42a3      	cmp	r3, r4
 8011306:	d30c      	bcc.n	8011322 <__copybits+0x36>
 8011308:	1aa3      	subs	r3, r4, r2
 801130a:	3b11      	subs	r3, #17
 801130c:	f023 0303 	bic.w	r3, r3, #3
 8011310:	3211      	adds	r2, #17
 8011312:	42a2      	cmp	r2, r4
 8011314:	bf88      	it	hi
 8011316:	2300      	movhi	r3, #0
 8011318:	4418      	add	r0, r3
 801131a:	2300      	movs	r3, #0
 801131c:	4288      	cmp	r0, r1
 801131e:	d305      	bcc.n	801132c <__copybits+0x40>
 8011320:	bd70      	pop	{r4, r5, r6, pc}
 8011322:	f853 6b04 	ldr.w	r6, [r3], #4
 8011326:	f845 6f04 	str.w	r6, [r5, #4]!
 801132a:	e7eb      	b.n	8011304 <__copybits+0x18>
 801132c:	f840 3b04 	str.w	r3, [r0], #4
 8011330:	e7f4      	b.n	801131c <__copybits+0x30>

08011332 <__any_on>:
 8011332:	f100 0214 	add.w	r2, r0, #20
 8011336:	6900      	ldr	r0, [r0, #16]
 8011338:	114b      	asrs	r3, r1, #5
 801133a:	4298      	cmp	r0, r3
 801133c:	b510      	push	{r4, lr}
 801133e:	db11      	blt.n	8011364 <__any_on+0x32>
 8011340:	dd0a      	ble.n	8011358 <__any_on+0x26>
 8011342:	f011 011f 	ands.w	r1, r1, #31
 8011346:	d007      	beq.n	8011358 <__any_on+0x26>
 8011348:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801134c:	fa24 f001 	lsr.w	r0, r4, r1
 8011350:	fa00 f101 	lsl.w	r1, r0, r1
 8011354:	428c      	cmp	r4, r1
 8011356:	d10b      	bne.n	8011370 <__any_on+0x3e>
 8011358:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801135c:	4293      	cmp	r3, r2
 801135e:	d803      	bhi.n	8011368 <__any_on+0x36>
 8011360:	2000      	movs	r0, #0
 8011362:	bd10      	pop	{r4, pc}
 8011364:	4603      	mov	r3, r0
 8011366:	e7f7      	b.n	8011358 <__any_on+0x26>
 8011368:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801136c:	2900      	cmp	r1, #0
 801136e:	d0f5      	beq.n	801135c <__any_on+0x2a>
 8011370:	2001      	movs	r0, #1
 8011372:	e7f6      	b.n	8011362 <__any_on+0x30>

08011374 <sulp>:
 8011374:	b570      	push	{r4, r5, r6, lr}
 8011376:	4604      	mov	r4, r0
 8011378:	460d      	mov	r5, r1
 801137a:	ec45 4b10 	vmov	d0, r4, r5
 801137e:	4616      	mov	r6, r2
 8011380:	f7ff feba 	bl	80110f8 <__ulp>
 8011384:	ec51 0b10 	vmov	r0, r1, d0
 8011388:	b17e      	cbz	r6, 80113aa <sulp+0x36>
 801138a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801138e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011392:	2b00      	cmp	r3, #0
 8011394:	dd09      	ble.n	80113aa <sulp+0x36>
 8011396:	051b      	lsls	r3, r3, #20
 8011398:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801139c:	2400      	movs	r4, #0
 801139e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80113a2:	4622      	mov	r2, r4
 80113a4:	462b      	mov	r3, r5
 80113a6:	f7ef f94f 	bl	8000648 <__aeabi_dmul>
 80113aa:	ec41 0b10 	vmov	d0, r0, r1
 80113ae:	bd70      	pop	{r4, r5, r6, pc}

080113b0 <_strtod_l>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	b09f      	sub	sp, #124	@ 0x7c
 80113b6:	460c      	mov	r4, r1
 80113b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80113ba:	2200      	movs	r2, #0
 80113bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80113be:	9005      	str	r0, [sp, #20]
 80113c0:	f04f 0a00 	mov.w	sl, #0
 80113c4:	f04f 0b00 	mov.w	fp, #0
 80113c8:	460a      	mov	r2, r1
 80113ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80113cc:	7811      	ldrb	r1, [r2, #0]
 80113ce:	292b      	cmp	r1, #43	@ 0x2b
 80113d0:	d04a      	beq.n	8011468 <_strtod_l+0xb8>
 80113d2:	d838      	bhi.n	8011446 <_strtod_l+0x96>
 80113d4:	290d      	cmp	r1, #13
 80113d6:	d832      	bhi.n	801143e <_strtod_l+0x8e>
 80113d8:	2908      	cmp	r1, #8
 80113da:	d832      	bhi.n	8011442 <_strtod_l+0x92>
 80113dc:	2900      	cmp	r1, #0
 80113de:	d03b      	beq.n	8011458 <_strtod_l+0xa8>
 80113e0:	2200      	movs	r2, #0
 80113e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80113e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80113e6:	782a      	ldrb	r2, [r5, #0]
 80113e8:	2a30      	cmp	r2, #48	@ 0x30
 80113ea:	f040 80b2 	bne.w	8011552 <_strtod_l+0x1a2>
 80113ee:	786a      	ldrb	r2, [r5, #1]
 80113f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80113f4:	2a58      	cmp	r2, #88	@ 0x58
 80113f6:	d16e      	bne.n	80114d6 <_strtod_l+0x126>
 80113f8:	9302      	str	r3, [sp, #8]
 80113fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80113fc:	9301      	str	r3, [sp, #4]
 80113fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8011400:	9300      	str	r3, [sp, #0]
 8011402:	4a8f      	ldr	r2, [pc, #572]	@ (8011640 <_strtod_l+0x290>)
 8011404:	9805      	ldr	r0, [sp, #20]
 8011406:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011408:	a919      	add	r1, sp, #100	@ 0x64
 801140a:	f001 f99f 	bl	801274c <__gethex>
 801140e:	f010 060f 	ands.w	r6, r0, #15
 8011412:	4604      	mov	r4, r0
 8011414:	d005      	beq.n	8011422 <_strtod_l+0x72>
 8011416:	2e06      	cmp	r6, #6
 8011418:	d128      	bne.n	801146c <_strtod_l+0xbc>
 801141a:	3501      	adds	r5, #1
 801141c:	2300      	movs	r3, #0
 801141e:	9519      	str	r5, [sp, #100]	@ 0x64
 8011420:	930e      	str	r3, [sp, #56]	@ 0x38
 8011422:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011424:	2b00      	cmp	r3, #0
 8011426:	f040 858e 	bne.w	8011f46 <_strtod_l+0xb96>
 801142a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801142c:	b1cb      	cbz	r3, 8011462 <_strtod_l+0xb2>
 801142e:	4652      	mov	r2, sl
 8011430:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011434:	ec43 2b10 	vmov	d0, r2, r3
 8011438:	b01f      	add	sp, #124	@ 0x7c
 801143a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143e:	2920      	cmp	r1, #32
 8011440:	d1ce      	bne.n	80113e0 <_strtod_l+0x30>
 8011442:	3201      	adds	r2, #1
 8011444:	e7c1      	b.n	80113ca <_strtod_l+0x1a>
 8011446:	292d      	cmp	r1, #45	@ 0x2d
 8011448:	d1ca      	bne.n	80113e0 <_strtod_l+0x30>
 801144a:	2101      	movs	r1, #1
 801144c:	910e      	str	r1, [sp, #56]	@ 0x38
 801144e:	1c51      	adds	r1, r2, #1
 8011450:	9119      	str	r1, [sp, #100]	@ 0x64
 8011452:	7852      	ldrb	r2, [r2, #1]
 8011454:	2a00      	cmp	r2, #0
 8011456:	d1c5      	bne.n	80113e4 <_strtod_l+0x34>
 8011458:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801145a:	9419      	str	r4, [sp, #100]	@ 0x64
 801145c:	2b00      	cmp	r3, #0
 801145e:	f040 8570 	bne.w	8011f42 <_strtod_l+0xb92>
 8011462:	4652      	mov	r2, sl
 8011464:	465b      	mov	r3, fp
 8011466:	e7e5      	b.n	8011434 <_strtod_l+0x84>
 8011468:	2100      	movs	r1, #0
 801146a:	e7ef      	b.n	801144c <_strtod_l+0x9c>
 801146c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801146e:	b13a      	cbz	r2, 8011480 <_strtod_l+0xd0>
 8011470:	2135      	movs	r1, #53	@ 0x35
 8011472:	a81c      	add	r0, sp, #112	@ 0x70
 8011474:	f7ff ff3a 	bl	80112ec <__copybits>
 8011478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801147a:	9805      	ldr	r0, [sp, #20]
 801147c:	f7ff fb10 	bl	8010aa0 <_Bfree>
 8011480:	3e01      	subs	r6, #1
 8011482:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011484:	2e04      	cmp	r6, #4
 8011486:	d806      	bhi.n	8011496 <_strtod_l+0xe6>
 8011488:	e8df f006 	tbb	[pc, r6]
 801148c:	201d0314 	.word	0x201d0314
 8011490:	14          	.byte	0x14
 8011491:	00          	.byte	0x00
 8011492:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011496:	05e1      	lsls	r1, r4, #23
 8011498:	bf48      	it	mi
 801149a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801149e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80114a2:	0d1b      	lsrs	r3, r3, #20
 80114a4:	051b      	lsls	r3, r3, #20
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d1bb      	bne.n	8011422 <_strtod_l+0x72>
 80114aa:	f7fe fb1d 	bl	800fae8 <__errno>
 80114ae:	2322      	movs	r3, #34	@ 0x22
 80114b0:	6003      	str	r3, [r0, #0]
 80114b2:	e7b6      	b.n	8011422 <_strtod_l+0x72>
 80114b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80114b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80114bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80114c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80114c4:	e7e7      	b.n	8011496 <_strtod_l+0xe6>
 80114c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8011648 <_strtod_l+0x298>
 80114ca:	e7e4      	b.n	8011496 <_strtod_l+0xe6>
 80114cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80114d0:	f04f 3aff 	mov.w	sl, #4294967295
 80114d4:	e7df      	b.n	8011496 <_strtod_l+0xe6>
 80114d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	9219      	str	r2, [sp, #100]	@ 0x64
 80114dc:	785b      	ldrb	r3, [r3, #1]
 80114de:	2b30      	cmp	r3, #48	@ 0x30
 80114e0:	d0f9      	beq.n	80114d6 <_strtod_l+0x126>
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d09d      	beq.n	8011422 <_strtod_l+0x72>
 80114e6:	2301      	movs	r3, #1
 80114e8:	2700      	movs	r7, #0
 80114ea:	9308      	str	r3, [sp, #32]
 80114ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80114f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80114f2:	46b9      	mov	r9, r7
 80114f4:	220a      	movs	r2, #10
 80114f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80114f8:	7805      	ldrb	r5, [r0, #0]
 80114fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80114fe:	b2d9      	uxtb	r1, r3
 8011500:	2909      	cmp	r1, #9
 8011502:	d928      	bls.n	8011556 <_strtod_l+0x1a6>
 8011504:	494f      	ldr	r1, [pc, #316]	@ (8011644 <_strtod_l+0x294>)
 8011506:	2201      	movs	r2, #1
 8011508:	f001 f838 	bl	801257c <strncmp>
 801150c:	2800      	cmp	r0, #0
 801150e:	d032      	beq.n	8011576 <_strtod_l+0x1c6>
 8011510:	2000      	movs	r0, #0
 8011512:	462a      	mov	r2, r5
 8011514:	900a      	str	r0, [sp, #40]	@ 0x28
 8011516:	464d      	mov	r5, r9
 8011518:	4603      	mov	r3, r0
 801151a:	2a65      	cmp	r2, #101	@ 0x65
 801151c:	d001      	beq.n	8011522 <_strtod_l+0x172>
 801151e:	2a45      	cmp	r2, #69	@ 0x45
 8011520:	d114      	bne.n	801154c <_strtod_l+0x19c>
 8011522:	b91d      	cbnz	r5, 801152c <_strtod_l+0x17c>
 8011524:	9a08      	ldr	r2, [sp, #32]
 8011526:	4302      	orrs	r2, r0
 8011528:	d096      	beq.n	8011458 <_strtod_l+0xa8>
 801152a:	2500      	movs	r5, #0
 801152c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801152e:	1c62      	adds	r2, r4, #1
 8011530:	9219      	str	r2, [sp, #100]	@ 0x64
 8011532:	7862      	ldrb	r2, [r4, #1]
 8011534:	2a2b      	cmp	r2, #43	@ 0x2b
 8011536:	d07a      	beq.n	801162e <_strtod_l+0x27e>
 8011538:	2a2d      	cmp	r2, #45	@ 0x2d
 801153a:	d07e      	beq.n	801163a <_strtod_l+0x28a>
 801153c:	f04f 0c00 	mov.w	ip, #0
 8011540:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011544:	2909      	cmp	r1, #9
 8011546:	f240 8085 	bls.w	8011654 <_strtod_l+0x2a4>
 801154a:	9419      	str	r4, [sp, #100]	@ 0x64
 801154c:	f04f 0800 	mov.w	r8, #0
 8011550:	e0a5      	b.n	801169e <_strtod_l+0x2ee>
 8011552:	2300      	movs	r3, #0
 8011554:	e7c8      	b.n	80114e8 <_strtod_l+0x138>
 8011556:	f1b9 0f08 	cmp.w	r9, #8
 801155a:	bfd8      	it	le
 801155c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801155e:	f100 0001 	add.w	r0, r0, #1
 8011562:	bfda      	itte	le
 8011564:	fb02 3301 	mlale	r3, r2, r1, r3
 8011568:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801156a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801156e:	f109 0901 	add.w	r9, r9, #1
 8011572:	9019      	str	r0, [sp, #100]	@ 0x64
 8011574:	e7bf      	b.n	80114f6 <_strtod_l+0x146>
 8011576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011578:	1c5a      	adds	r2, r3, #1
 801157a:	9219      	str	r2, [sp, #100]	@ 0x64
 801157c:	785a      	ldrb	r2, [r3, #1]
 801157e:	f1b9 0f00 	cmp.w	r9, #0
 8011582:	d03b      	beq.n	80115fc <_strtod_l+0x24c>
 8011584:	900a      	str	r0, [sp, #40]	@ 0x28
 8011586:	464d      	mov	r5, r9
 8011588:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801158c:	2b09      	cmp	r3, #9
 801158e:	d912      	bls.n	80115b6 <_strtod_l+0x206>
 8011590:	2301      	movs	r3, #1
 8011592:	e7c2      	b.n	801151a <_strtod_l+0x16a>
 8011594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011596:	1c5a      	adds	r2, r3, #1
 8011598:	9219      	str	r2, [sp, #100]	@ 0x64
 801159a:	785a      	ldrb	r2, [r3, #1]
 801159c:	3001      	adds	r0, #1
 801159e:	2a30      	cmp	r2, #48	@ 0x30
 80115a0:	d0f8      	beq.n	8011594 <_strtod_l+0x1e4>
 80115a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80115a6:	2b08      	cmp	r3, #8
 80115a8:	f200 84d2 	bhi.w	8011f50 <_strtod_l+0xba0>
 80115ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80115ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80115b0:	2000      	movs	r0, #0
 80115b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80115b4:	4605      	mov	r5, r0
 80115b6:	3a30      	subs	r2, #48	@ 0x30
 80115b8:	f100 0301 	add.w	r3, r0, #1
 80115bc:	d018      	beq.n	80115f0 <_strtod_l+0x240>
 80115be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80115c0:	4419      	add	r1, r3
 80115c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80115c4:	462e      	mov	r6, r5
 80115c6:	f04f 0e0a 	mov.w	lr, #10
 80115ca:	1c71      	adds	r1, r6, #1
 80115cc:	eba1 0c05 	sub.w	ip, r1, r5
 80115d0:	4563      	cmp	r3, ip
 80115d2:	dc15      	bgt.n	8011600 <_strtod_l+0x250>
 80115d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80115d8:	182b      	adds	r3, r5, r0
 80115da:	2b08      	cmp	r3, #8
 80115dc:	f105 0501 	add.w	r5, r5, #1
 80115e0:	4405      	add	r5, r0
 80115e2:	dc1a      	bgt.n	801161a <_strtod_l+0x26a>
 80115e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80115e6:	230a      	movs	r3, #10
 80115e8:	fb03 2301 	mla	r3, r3, r1, r2
 80115ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80115ee:	2300      	movs	r3, #0
 80115f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80115f2:	1c51      	adds	r1, r2, #1
 80115f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80115f6:	7852      	ldrb	r2, [r2, #1]
 80115f8:	4618      	mov	r0, r3
 80115fa:	e7c5      	b.n	8011588 <_strtod_l+0x1d8>
 80115fc:	4648      	mov	r0, r9
 80115fe:	e7ce      	b.n	801159e <_strtod_l+0x1ee>
 8011600:	2e08      	cmp	r6, #8
 8011602:	dc05      	bgt.n	8011610 <_strtod_l+0x260>
 8011604:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011606:	fb0e f606 	mul.w	r6, lr, r6
 801160a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801160c:	460e      	mov	r6, r1
 801160e:	e7dc      	b.n	80115ca <_strtod_l+0x21a>
 8011610:	2910      	cmp	r1, #16
 8011612:	bfd8      	it	le
 8011614:	fb0e f707 	mulle.w	r7, lr, r7
 8011618:	e7f8      	b.n	801160c <_strtod_l+0x25c>
 801161a:	2b0f      	cmp	r3, #15
 801161c:	bfdc      	itt	le
 801161e:	230a      	movle	r3, #10
 8011620:	fb03 2707 	mlale	r7, r3, r7, r2
 8011624:	e7e3      	b.n	80115ee <_strtod_l+0x23e>
 8011626:	2300      	movs	r3, #0
 8011628:	930a      	str	r3, [sp, #40]	@ 0x28
 801162a:	2301      	movs	r3, #1
 801162c:	e77a      	b.n	8011524 <_strtod_l+0x174>
 801162e:	f04f 0c00 	mov.w	ip, #0
 8011632:	1ca2      	adds	r2, r4, #2
 8011634:	9219      	str	r2, [sp, #100]	@ 0x64
 8011636:	78a2      	ldrb	r2, [r4, #2]
 8011638:	e782      	b.n	8011540 <_strtod_l+0x190>
 801163a:	f04f 0c01 	mov.w	ip, #1
 801163e:	e7f8      	b.n	8011632 <_strtod_l+0x282>
 8011640:	0801565c 	.word	0x0801565c
 8011644:	0801548f 	.word	0x0801548f
 8011648:	7ff00000 	.word	0x7ff00000
 801164c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801164e:	1c51      	adds	r1, r2, #1
 8011650:	9119      	str	r1, [sp, #100]	@ 0x64
 8011652:	7852      	ldrb	r2, [r2, #1]
 8011654:	2a30      	cmp	r2, #48	@ 0x30
 8011656:	d0f9      	beq.n	801164c <_strtod_l+0x29c>
 8011658:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801165c:	2908      	cmp	r1, #8
 801165e:	f63f af75 	bhi.w	801154c <_strtod_l+0x19c>
 8011662:	3a30      	subs	r2, #48	@ 0x30
 8011664:	9209      	str	r2, [sp, #36]	@ 0x24
 8011666:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011668:	920f      	str	r2, [sp, #60]	@ 0x3c
 801166a:	f04f 080a 	mov.w	r8, #10
 801166e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011670:	1c56      	adds	r6, r2, #1
 8011672:	9619      	str	r6, [sp, #100]	@ 0x64
 8011674:	7852      	ldrb	r2, [r2, #1]
 8011676:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801167a:	f1be 0f09 	cmp.w	lr, #9
 801167e:	d939      	bls.n	80116f4 <_strtod_l+0x344>
 8011680:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011682:	1a76      	subs	r6, r6, r1
 8011684:	2e08      	cmp	r6, #8
 8011686:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801168a:	dc03      	bgt.n	8011694 <_strtod_l+0x2e4>
 801168c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801168e:	4588      	cmp	r8, r1
 8011690:	bfa8      	it	ge
 8011692:	4688      	movge	r8, r1
 8011694:	f1bc 0f00 	cmp.w	ip, #0
 8011698:	d001      	beq.n	801169e <_strtod_l+0x2ee>
 801169a:	f1c8 0800 	rsb	r8, r8, #0
 801169e:	2d00      	cmp	r5, #0
 80116a0:	d14e      	bne.n	8011740 <_strtod_l+0x390>
 80116a2:	9908      	ldr	r1, [sp, #32]
 80116a4:	4308      	orrs	r0, r1
 80116a6:	f47f aebc 	bne.w	8011422 <_strtod_l+0x72>
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f47f aed4 	bne.w	8011458 <_strtod_l+0xa8>
 80116b0:	2a69      	cmp	r2, #105	@ 0x69
 80116b2:	d028      	beq.n	8011706 <_strtod_l+0x356>
 80116b4:	dc25      	bgt.n	8011702 <_strtod_l+0x352>
 80116b6:	2a49      	cmp	r2, #73	@ 0x49
 80116b8:	d025      	beq.n	8011706 <_strtod_l+0x356>
 80116ba:	2a4e      	cmp	r2, #78	@ 0x4e
 80116bc:	f47f aecc 	bne.w	8011458 <_strtod_l+0xa8>
 80116c0:	499a      	ldr	r1, [pc, #616]	@ (801192c <_strtod_l+0x57c>)
 80116c2:	a819      	add	r0, sp, #100	@ 0x64
 80116c4:	f001 fa64 	bl	8012b90 <__match>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	f43f aec5 	beq.w	8011458 <_strtod_l+0xa8>
 80116ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	2b28      	cmp	r3, #40	@ 0x28
 80116d4:	d12e      	bne.n	8011734 <_strtod_l+0x384>
 80116d6:	4996      	ldr	r1, [pc, #600]	@ (8011930 <_strtod_l+0x580>)
 80116d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80116da:	a819      	add	r0, sp, #100	@ 0x64
 80116dc:	f001 fa6c 	bl	8012bb8 <__hexnan>
 80116e0:	2805      	cmp	r0, #5
 80116e2:	d127      	bne.n	8011734 <_strtod_l+0x384>
 80116e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80116e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80116ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80116ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80116f2:	e696      	b.n	8011422 <_strtod_l+0x72>
 80116f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80116f6:	fb08 2101 	mla	r1, r8, r1, r2
 80116fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80116fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8011700:	e7b5      	b.n	801166e <_strtod_l+0x2be>
 8011702:	2a6e      	cmp	r2, #110	@ 0x6e
 8011704:	e7da      	b.n	80116bc <_strtod_l+0x30c>
 8011706:	498b      	ldr	r1, [pc, #556]	@ (8011934 <_strtod_l+0x584>)
 8011708:	a819      	add	r0, sp, #100	@ 0x64
 801170a:	f001 fa41 	bl	8012b90 <__match>
 801170e:	2800      	cmp	r0, #0
 8011710:	f43f aea2 	beq.w	8011458 <_strtod_l+0xa8>
 8011714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011716:	4988      	ldr	r1, [pc, #544]	@ (8011938 <_strtod_l+0x588>)
 8011718:	3b01      	subs	r3, #1
 801171a:	a819      	add	r0, sp, #100	@ 0x64
 801171c:	9319      	str	r3, [sp, #100]	@ 0x64
 801171e:	f001 fa37 	bl	8012b90 <__match>
 8011722:	b910      	cbnz	r0, 801172a <_strtod_l+0x37a>
 8011724:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011726:	3301      	adds	r3, #1
 8011728:	9319      	str	r3, [sp, #100]	@ 0x64
 801172a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011948 <_strtod_l+0x598>
 801172e:	f04f 0a00 	mov.w	sl, #0
 8011732:	e676      	b.n	8011422 <_strtod_l+0x72>
 8011734:	4881      	ldr	r0, [pc, #516]	@ (801193c <_strtod_l+0x58c>)
 8011736:	f000 ff67 	bl	8012608 <nan>
 801173a:	ec5b ab10 	vmov	sl, fp, d0
 801173e:	e670      	b.n	8011422 <_strtod_l+0x72>
 8011740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011742:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011744:	eba8 0303 	sub.w	r3, r8, r3
 8011748:	f1b9 0f00 	cmp.w	r9, #0
 801174c:	bf08      	it	eq
 801174e:	46a9      	moveq	r9, r5
 8011750:	2d10      	cmp	r5, #16
 8011752:	9309      	str	r3, [sp, #36]	@ 0x24
 8011754:	462c      	mov	r4, r5
 8011756:	bfa8      	it	ge
 8011758:	2410      	movge	r4, #16
 801175a:	f7ee fefb 	bl	8000554 <__aeabi_ui2d>
 801175e:	2d09      	cmp	r5, #9
 8011760:	4682      	mov	sl, r0
 8011762:	468b      	mov	fp, r1
 8011764:	dc13      	bgt.n	801178e <_strtod_l+0x3de>
 8011766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011768:	2b00      	cmp	r3, #0
 801176a:	f43f ae5a 	beq.w	8011422 <_strtod_l+0x72>
 801176e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011770:	dd78      	ble.n	8011864 <_strtod_l+0x4b4>
 8011772:	2b16      	cmp	r3, #22
 8011774:	dc5f      	bgt.n	8011836 <_strtod_l+0x486>
 8011776:	4972      	ldr	r1, [pc, #456]	@ (8011940 <_strtod_l+0x590>)
 8011778:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801177c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011780:	4652      	mov	r2, sl
 8011782:	465b      	mov	r3, fp
 8011784:	f7ee ff60 	bl	8000648 <__aeabi_dmul>
 8011788:	4682      	mov	sl, r0
 801178a:	468b      	mov	fp, r1
 801178c:	e649      	b.n	8011422 <_strtod_l+0x72>
 801178e:	4b6c      	ldr	r3, [pc, #432]	@ (8011940 <_strtod_l+0x590>)
 8011790:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011794:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011798:	f7ee ff56 	bl	8000648 <__aeabi_dmul>
 801179c:	4682      	mov	sl, r0
 801179e:	4638      	mov	r0, r7
 80117a0:	468b      	mov	fp, r1
 80117a2:	f7ee fed7 	bl	8000554 <__aeabi_ui2d>
 80117a6:	4602      	mov	r2, r0
 80117a8:	460b      	mov	r3, r1
 80117aa:	4650      	mov	r0, sl
 80117ac:	4659      	mov	r1, fp
 80117ae:	f7ee fd95 	bl	80002dc <__adddf3>
 80117b2:	2d0f      	cmp	r5, #15
 80117b4:	4682      	mov	sl, r0
 80117b6:	468b      	mov	fp, r1
 80117b8:	ddd5      	ble.n	8011766 <_strtod_l+0x3b6>
 80117ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117bc:	1b2c      	subs	r4, r5, r4
 80117be:	441c      	add	r4, r3
 80117c0:	2c00      	cmp	r4, #0
 80117c2:	f340 8093 	ble.w	80118ec <_strtod_l+0x53c>
 80117c6:	f014 030f 	ands.w	r3, r4, #15
 80117ca:	d00a      	beq.n	80117e2 <_strtod_l+0x432>
 80117cc:	495c      	ldr	r1, [pc, #368]	@ (8011940 <_strtod_l+0x590>)
 80117ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80117d2:	4652      	mov	r2, sl
 80117d4:	465b      	mov	r3, fp
 80117d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117da:	f7ee ff35 	bl	8000648 <__aeabi_dmul>
 80117de:	4682      	mov	sl, r0
 80117e0:	468b      	mov	fp, r1
 80117e2:	f034 040f 	bics.w	r4, r4, #15
 80117e6:	d073      	beq.n	80118d0 <_strtod_l+0x520>
 80117e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80117ec:	dd49      	ble.n	8011882 <_strtod_l+0x4d2>
 80117ee:	2400      	movs	r4, #0
 80117f0:	46a0      	mov	r8, r4
 80117f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80117f4:	46a1      	mov	r9, r4
 80117f6:	9a05      	ldr	r2, [sp, #20]
 80117f8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011948 <_strtod_l+0x598>
 80117fc:	2322      	movs	r3, #34	@ 0x22
 80117fe:	6013      	str	r3, [r2, #0]
 8011800:	f04f 0a00 	mov.w	sl, #0
 8011804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011806:	2b00      	cmp	r3, #0
 8011808:	f43f ae0b 	beq.w	8011422 <_strtod_l+0x72>
 801180c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801180e:	9805      	ldr	r0, [sp, #20]
 8011810:	f7ff f946 	bl	8010aa0 <_Bfree>
 8011814:	9805      	ldr	r0, [sp, #20]
 8011816:	4649      	mov	r1, r9
 8011818:	f7ff f942 	bl	8010aa0 <_Bfree>
 801181c:	9805      	ldr	r0, [sp, #20]
 801181e:	4641      	mov	r1, r8
 8011820:	f7ff f93e 	bl	8010aa0 <_Bfree>
 8011824:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011826:	9805      	ldr	r0, [sp, #20]
 8011828:	f7ff f93a 	bl	8010aa0 <_Bfree>
 801182c:	9805      	ldr	r0, [sp, #20]
 801182e:	4621      	mov	r1, r4
 8011830:	f7ff f936 	bl	8010aa0 <_Bfree>
 8011834:	e5f5      	b.n	8011422 <_strtod_l+0x72>
 8011836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011838:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801183c:	4293      	cmp	r3, r2
 801183e:	dbbc      	blt.n	80117ba <_strtod_l+0x40a>
 8011840:	4c3f      	ldr	r4, [pc, #252]	@ (8011940 <_strtod_l+0x590>)
 8011842:	f1c5 050f 	rsb	r5, r5, #15
 8011846:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801184a:	4652      	mov	r2, sl
 801184c:	465b      	mov	r3, fp
 801184e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011852:	f7ee fef9 	bl	8000648 <__aeabi_dmul>
 8011856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011858:	1b5d      	subs	r5, r3, r5
 801185a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801185e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011862:	e78f      	b.n	8011784 <_strtod_l+0x3d4>
 8011864:	3316      	adds	r3, #22
 8011866:	dba8      	blt.n	80117ba <_strtod_l+0x40a>
 8011868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801186a:	eba3 0808 	sub.w	r8, r3, r8
 801186e:	4b34      	ldr	r3, [pc, #208]	@ (8011940 <_strtod_l+0x590>)
 8011870:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011874:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011878:	4650      	mov	r0, sl
 801187a:	4659      	mov	r1, fp
 801187c:	f7ef f80e 	bl	800089c <__aeabi_ddiv>
 8011880:	e782      	b.n	8011788 <_strtod_l+0x3d8>
 8011882:	2300      	movs	r3, #0
 8011884:	4f2f      	ldr	r7, [pc, #188]	@ (8011944 <_strtod_l+0x594>)
 8011886:	1124      	asrs	r4, r4, #4
 8011888:	4650      	mov	r0, sl
 801188a:	4659      	mov	r1, fp
 801188c:	461e      	mov	r6, r3
 801188e:	2c01      	cmp	r4, #1
 8011890:	dc21      	bgt.n	80118d6 <_strtod_l+0x526>
 8011892:	b10b      	cbz	r3, 8011898 <_strtod_l+0x4e8>
 8011894:	4682      	mov	sl, r0
 8011896:	468b      	mov	fp, r1
 8011898:	492a      	ldr	r1, [pc, #168]	@ (8011944 <_strtod_l+0x594>)
 801189a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801189e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80118a2:	4652      	mov	r2, sl
 80118a4:	465b      	mov	r3, fp
 80118a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118aa:	f7ee fecd 	bl	8000648 <__aeabi_dmul>
 80118ae:	4b26      	ldr	r3, [pc, #152]	@ (8011948 <_strtod_l+0x598>)
 80118b0:	460a      	mov	r2, r1
 80118b2:	400b      	ands	r3, r1
 80118b4:	4925      	ldr	r1, [pc, #148]	@ (801194c <_strtod_l+0x59c>)
 80118b6:	428b      	cmp	r3, r1
 80118b8:	4682      	mov	sl, r0
 80118ba:	d898      	bhi.n	80117ee <_strtod_l+0x43e>
 80118bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80118c0:	428b      	cmp	r3, r1
 80118c2:	bf86      	itte	hi
 80118c4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011950 <_strtod_l+0x5a0>
 80118c8:	f04f 3aff 	movhi.w	sl, #4294967295
 80118cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80118d0:	2300      	movs	r3, #0
 80118d2:	9308      	str	r3, [sp, #32]
 80118d4:	e076      	b.n	80119c4 <_strtod_l+0x614>
 80118d6:	07e2      	lsls	r2, r4, #31
 80118d8:	d504      	bpl.n	80118e4 <_strtod_l+0x534>
 80118da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80118de:	f7ee feb3 	bl	8000648 <__aeabi_dmul>
 80118e2:	2301      	movs	r3, #1
 80118e4:	3601      	adds	r6, #1
 80118e6:	1064      	asrs	r4, r4, #1
 80118e8:	3708      	adds	r7, #8
 80118ea:	e7d0      	b.n	801188e <_strtod_l+0x4de>
 80118ec:	d0f0      	beq.n	80118d0 <_strtod_l+0x520>
 80118ee:	4264      	negs	r4, r4
 80118f0:	f014 020f 	ands.w	r2, r4, #15
 80118f4:	d00a      	beq.n	801190c <_strtod_l+0x55c>
 80118f6:	4b12      	ldr	r3, [pc, #72]	@ (8011940 <_strtod_l+0x590>)
 80118f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118fc:	4650      	mov	r0, sl
 80118fe:	4659      	mov	r1, fp
 8011900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011904:	f7ee ffca 	bl	800089c <__aeabi_ddiv>
 8011908:	4682      	mov	sl, r0
 801190a:	468b      	mov	fp, r1
 801190c:	1124      	asrs	r4, r4, #4
 801190e:	d0df      	beq.n	80118d0 <_strtod_l+0x520>
 8011910:	2c1f      	cmp	r4, #31
 8011912:	dd1f      	ble.n	8011954 <_strtod_l+0x5a4>
 8011914:	2400      	movs	r4, #0
 8011916:	46a0      	mov	r8, r4
 8011918:	940b      	str	r4, [sp, #44]	@ 0x2c
 801191a:	46a1      	mov	r9, r4
 801191c:	9a05      	ldr	r2, [sp, #20]
 801191e:	2322      	movs	r3, #34	@ 0x22
 8011920:	f04f 0a00 	mov.w	sl, #0
 8011924:	f04f 0b00 	mov.w	fp, #0
 8011928:	6013      	str	r3, [r2, #0]
 801192a:	e76b      	b.n	8011804 <_strtod_l+0x454>
 801192c:	0801537d 	.word	0x0801537d
 8011930:	08015648 	.word	0x08015648
 8011934:	08015375 	.word	0x08015375
 8011938:	080153ac 	.word	0x080153ac
 801193c:	080154e5 	.word	0x080154e5
 8011940:	08015580 	.word	0x08015580
 8011944:	08015558 	.word	0x08015558
 8011948:	7ff00000 	.word	0x7ff00000
 801194c:	7ca00000 	.word	0x7ca00000
 8011950:	7fefffff 	.word	0x7fefffff
 8011954:	f014 0310 	ands.w	r3, r4, #16
 8011958:	bf18      	it	ne
 801195a:	236a      	movne	r3, #106	@ 0x6a
 801195c:	4ea9      	ldr	r6, [pc, #676]	@ (8011c04 <_strtod_l+0x854>)
 801195e:	9308      	str	r3, [sp, #32]
 8011960:	4650      	mov	r0, sl
 8011962:	4659      	mov	r1, fp
 8011964:	2300      	movs	r3, #0
 8011966:	07e7      	lsls	r7, r4, #31
 8011968:	d504      	bpl.n	8011974 <_strtod_l+0x5c4>
 801196a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801196e:	f7ee fe6b 	bl	8000648 <__aeabi_dmul>
 8011972:	2301      	movs	r3, #1
 8011974:	1064      	asrs	r4, r4, #1
 8011976:	f106 0608 	add.w	r6, r6, #8
 801197a:	d1f4      	bne.n	8011966 <_strtod_l+0x5b6>
 801197c:	b10b      	cbz	r3, 8011982 <_strtod_l+0x5d2>
 801197e:	4682      	mov	sl, r0
 8011980:	468b      	mov	fp, r1
 8011982:	9b08      	ldr	r3, [sp, #32]
 8011984:	b1b3      	cbz	r3, 80119b4 <_strtod_l+0x604>
 8011986:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801198a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801198e:	2b00      	cmp	r3, #0
 8011990:	4659      	mov	r1, fp
 8011992:	dd0f      	ble.n	80119b4 <_strtod_l+0x604>
 8011994:	2b1f      	cmp	r3, #31
 8011996:	dd56      	ble.n	8011a46 <_strtod_l+0x696>
 8011998:	2b34      	cmp	r3, #52	@ 0x34
 801199a:	bfde      	ittt	le
 801199c:	f04f 33ff 	movle.w	r3, #4294967295
 80119a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80119a4:	4093      	lslle	r3, r2
 80119a6:	f04f 0a00 	mov.w	sl, #0
 80119aa:	bfcc      	ite	gt
 80119ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80119b0:	ea03 0b01 	andle.w	fp, r3, r1
 80119b4:	2200      	movs	r2, #0
 80119b6:	2300      	movs	r3, #0
 80119b8:	4650      	mov	r0, sl
 80119ba:	4659      	mov	r1, fp
 80119bc:	f7ef f8ac 	bl	8000b18 <__aeabi_dcmpeq>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d1a7      	bne.n	8011914 <_strtod_l+0x564>
 80119c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80119ca:	9805      	ldr	r0, [sp, #20]
 80119cc:	462b      	mov	r3, r5
 80119ce:	464a      	mov	r2, r9
 80119d0:	f7ff f8ce 	bl	8010b70 <__s2b>
 80119d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80119d6:	2800      	cmp	r0, #0
 80119d8:	f43f af09 	beq.w	80117ee <_strtod_l+0x43e>
 80119dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119e0:	2a00      	cmp	r2, #0
 80119e2:	eba3 0308 	sub.w	r3, r3, r8
 80119e6:	bfa8      	it	ge
 80119e8:	2300      	movge	r3, #0
 80119ea:	9312      	str	r3, [sp, #72]	@ 0x48
 80119ec:	2400      	movs	r4, #0
 80119ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80119f2:	9316      	str	r3, [sp, #88]	@ 0x58
 80119f4:	46a0      	mov	r8, r4
 80119f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80119f8:	9805      	ldr	r0, [sp, #20]
 80119fa:	6859      	ldr	r1, [r3, #4]
 80119fc:	f7ff f810 	bl	8010a20 <_Balloc>
 8011a00:	4681      	mov	r9, r0
 8011a02:	2800      	cmp	r0, #0
 8011a04:	f43f aef7 	beq.w	80117f6 <_strtod_l+0x446>
 8011a08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a0a:	691a      	ldr	r2, [r3, #16]
 8011a0c:	3202      	adds	r2, #2
 8011a0e:	f103 010c 	add.w	r1, r3, #12
 8011a12:	0092      	lsls	r2, r2, #2
 8011a14:	300c      	adds	r0, #12
 8011a16:	f7fe f894 	bl	800fb42 <memcpy>
 8011a1a:	ec4b ab10 	vmov	d0, sl, fp
 8011a1e:	9805      	ldr	r0, [sp, #20]
 8011a20:	aa1c      	add	r2, sp, #112	@ 0x70
 8011a22:	a91b      	add	r1, sp, #108	@ 0x6c
 8011a24:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011a28:	f7ff fbd6 	bl	80111d8 <__d2b>
 8011a2c:	901a      	str	r0, [sp, #104]	@ 0x68
 8011a2e:	2800      	cmp	r0, #0
 8011a30:	f43f aee1 	beq.w	80117f6 <_strtod_l+0x446>
 8011a34:	9805      	ldr	r0, [sp, #20]
 8011a36:	2101      	movs	r1, #1
 8011a38:	f7ff f930 	bl	8010c9c <__i2b>
 8011a3c:	4680      	mov	r8, r0
 8011a3e:	b948      	cbnz	r0, 8011a54 <_strtod_l+0x6a4>
 8011a40:	f04f 0800 	mov.w	r8, #0
 8011a44:	e6d7      	b.n	80117f6 <_strtod_l+0x446>
 8011a46:	f04f 32ff 	mov.w	r2, #4294967295
 8011a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8011a4e:	ea03 0a0a 	and.w	sl, r3, sl
 8011a52:	e7af      	b.n	80119b4 <_strtod_l+0x604>
 8011a54:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011a56:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011a58:	2d00      	cmp	r5, #0
 8011a5a:	bfab      	itete	ge
 8011a5c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011a5e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011a60:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011a62:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011a64:	bfac      	ite	ge
 8011a66:	18ef      	addge	r7, r5, r3
 8011a68:	1b5e      	sublt	r6, r3, r5
 8011a6a:	9b08      	ldr	r3, [sp, #32]
 8011a6c:	1aed      	subs	r5, r5, r3
 8011a6e:	4415      	add	r5, r2
 8011a70:	4b65      	ldr	r3, [pc, #404]	@ (8011c08 <_strtod_l+0x858>)
 8011a72:	3d01      	subs	r5, #1
 8011a74:	429d      	cmp	r5, r3
 8011a76:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011a7a:	da50      	bge.n	8011b1e <_strtod_l+0x76e>
 8011a7c:	1b5b      	subs	r3, r3, r5
 8011a7e:	2b1f      	cmp	r3, #31
 8011a80:	eba2 0203 	sub.w	r2, r2, r3
 8011a84:	f04f 0101 	mov.w	r1, #1
 8011a88:	dc3d      	bgt.n	8011b06 <_strtod_l+0x756>
 8011a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8011a8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011a90:	2300      	movs	r3, #0
 8011a92:	9310      	str	r3, [sp, #64]	@ 0x40
 8011a94:	18bd      	adds	r5, r7, r2
 8011a96:	9b08      	ldr	r3, [sp, #32]
 8011a98:	42af      	cmp	r7, r5
 8011a9a:	4416      	add	r6, r2
 8011a9c:	441e      	add	r6, r3
 8011a9e:	463b      	mov	r3, r7
 8011aa0:	bfa8      	it	ge
 8011aa2:	462b      	movge	r3, r5
 8011aa4:	42b3      	cmp	r3, r6
 8011aa6:	bfa8      	it	ge
 8011aa8:	4633      	movge	r3, r6
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	bfc2      	ittt	gt
 8011aae:	1aed      	subgt	r5, r5, r3
 8011ab0:	1af6      	subgt	r6, r6, r3
 8011ab2:	1aff      	subgt	r7, r7, r3
 8011ab4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	dd16      	ble.n	8011ae8 <_strtod_l+0x738>
 8011aba:	4641      	mov	r1, r8
 8011abc:	9805      	ldr	r0, [sp, #20]
 8011abe:	461a      	mov	r2, r3
 8011ac0:	f7ff f9a4 	bl	8010e0c <__pow5mult>
 8011ac4:	4680      	mov	r8, r0
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	d0ba      	beq.n	8011a40 <_strtod_l+0x690>
 8011aca:	4601      	mov	r1, r0
 8011acc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011ace:	9805      	ldr	r0, [sp, #20]
 8011ad0:	f7ff f8fa 	bl	8010cc8 <__multiply>
 8011ad4:	900a      	str	r0, [sp, #40]	@ 0x28
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	f43f ae8d 	beq.w	80117f6 <_strtod_l+0x446>
 8011adc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011ade:	9805      	ldr	r0, [sp, #20]
 8011ae0:	f7fe ffde 	bl	8010aa0 <_Bfree>
 8011ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ae8:	2d00      	cmp	r5, #0
 8011aea:	dc1d      	bgt.n	8011b28 <_strtod_l+0x778>
 8011aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	dd23      	ble.n	8011b3a <_strtod_l+0x78a>
 8011af2:	4649      	mov	r1, r9
 8011af4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011af6:	9805      	ldr	r0, [sp, #20]
 8011af8:	f7ff f988 	bl	8010e0c <__pow5mult>
 8011afc:	4681      	mov	r9, r0
 8011afe:	b9e0      	cbnz	r0, 8011b3a <_strtod_l+0x78a>
 8011b00:	f04f 0900 	mov.w	r9, #0
 8011b04:	e677      	b.n	80117f6 <_strtod_l+0x446>
 8011b06:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011b0a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011b0e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011b12:	35e2      	adds	r5, #226	@ 0xe2
 8011b14:	fa01 f305 	lsl.w	r3, r1, r5
 8011b18:	9310      	str	r3, [sp, #64]	@ 0x40
 8011b1a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011b1c:	e7ba      	b.n	8011a94 <_strtod_l+0x6e4>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	9310      	str	r3, [sp, #64]	@ 0x40
 8011b22:	2301      	movs	r3, #1
 8011b24:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011b26:	e7b5      	b.n	8011a94 <_strtod_l+0x6e4>
 8011b28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011b2a:	9805      	ldr	r0, [sp, #20]
 8011b2c:	462a      	mov	r2, r5
 8011b2e:	f7ff f9c7 	bl	8010ec0 <__lshift>
 8011b32:	901a      	str	r0, [sp, #104]	@ 0x68
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d1d9      	bne.n	8011aec <_strtod_l+0x73c>
 8011b38:	e65d      	b.n	80117f6 <_strtod_l+0x446>
 8011b3a:	2e00      	cmp	r6, #0
 8011b3c:	dd07      	ble.n	8011b4e <_strtod_l+0x79e>
 8011b3e:	4649      	mov	r1, r9
 8011b40:	9805      	ldr	r0, [sp, #20]
 8011b42:	4632      	mov	r2, r6
 8011b44:	f7ff f9bc 	bl	8010ec0 <__lshift>
 8011b48:	4681      	mov	r9, r0
 8011b4a:	2800      	cmp	r0, #0
 8011b4c:	d0d8      	beq.n	8011b00 <_strtod_l+0x750>
 8011b4e:	2f00      	cmp	r7, #0
 8011b50:	dd08      	ble.n	8011b64 <_strtod_l+0x7b4>
 8011b52:	4641      	mov	r1, r8
 8011b54:	9805      	ldr	r0, [sp, #20]
 8011b56:	463a      	mov	r2, r7
 8011b58:	f7ff f9b2 	bl	8010ec0 <__lshift>
 8011b5c:	4680      	mov	r8, r0
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	f43f ae49 	beq.w	80117f6 <_strtod_l+0x446>
 8011b64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011b66:	9805      	ldr	r0, [sp, #20]
 8011b68:	464a      	mov	r2, r9
 8011b6a:	f7ff fa31 	bl	8010fd0 <__mdiff>
 8011b6e:	4604      	mov	r4, r0
 8011b70:	2800      	cmp	r0, #0
 8011b72:	f43f ae40 	beq.w	80117f6 <_strtod_l+0x446>
 8011b76:	68c3      	ldr	r3, [r0, #12]
 8011b78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60c3      	str	r3, [r0, #12]
 8011b7e:	4641      	mov	r1, r8
 8011b80:	f7ff fa0a 	bl	8010f98 <__mcmp>
 8011b84:	2800      	cmp	r0, #0
 8011b86:	da45      	bge.n	8011c14 <_strtod_l+0x864>
 8011b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b8a:	ea53 030a 	orrs.w	r3, r3, sl
 8011b8e:	d16b      	bne.n	8011c68 <_strtod_l+0x8b8>
 8011b90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d167      	bne.n	8011c68 <_strtod_l+0x8b8>
 8011b98:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011b9c:	0d1b      	lsrs	r3, r3, #20
 8011b9e:	051b      	lsls	r3, r3, #20
 8011ba0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011ba4:	d960      	bls.n	8011c68 <_strtod_l+0x8b8>
 8011ba6:	6963      	ldr	r3, [r4, #20]
 8011ba8:	b913      	cbnz	r3, 8011bb0 <_strtod_l+0x800>
 8011baa:	6923      	ldr	r3, [r4, #16]
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	dd5b      	ble.n	8011c68 <_strtod_l+0x8b8>
 8011bb0:	4621      	mov	r1, r4
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	9805      	ldr	r0, [sp, #20]
 8011bb6:	f7ff f983 	bl	8010ec0 <__lshift>
 8011bba:	4641      	mov	r1, r8
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	f7ff f9eb 	bl	8010f98 <__mcmp>
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	dd50      	ble.n	8011c68 <_strtod_l+0x8b8>
 8011bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011bca:	9a08      	ldr	r2, [sp, #32]
 8011bcc:	0d1b      	lsrs	r3, r3, #20
 8011bce:	051b      	lsls	r3, r3, #20
 8011bd0:	2a00      	cmp	r2, #0
 8011bd2:	d06a      	beq.n	8011caa <_strtod_l+0x8fa>
 8011bd4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011bd8:	d867      	bhi.n	8011caa <_strtod_l+0x8fa>
 8011bda:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011bde:	f67f ae9d 	bls.w	801191c <_strtod_l+0x56c>
 8011be2:	4b0a      	ldr	r3, [pc, #40]	@ (8011c0c <_strtod_l+0x85c>)
 8011be4:	4650      	mov	r0, sl
 8011be6:	4659      	mov	r1, fp
 8011be8:	2200      	movs	r2, #0
 8011bea:	f7ee fd2d 	bl	8000648 <__aeabi_dmul>
 8011bee:	4b08      	ldr	r3, [pc, #32]	@ (8011c10 <_strtod_l+0x860>)
 8011bf0:	400b      	ands	r3, r1
 8011bf2:	4682      	mov	sl, r0
 8011bf4:	468b      	mov	fp, r1
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f47f ae08 	bne.w	801180c <_strtod_l+0x45c>
 8011bfc:	9a05      	ldr	r2, [sp, #20]
 8011bfe:	2322      	movs	r3, #34	@ 0x22
 8011c00:	6013      	str	r3, [r2, #0]
 8011c02:	e603      	b.n	801180c <_strtod_l+0x45c>
 8011c04:	08015670 	.word	0x08015670
 8011c08:	fffffc02 	.word	0xfffffc02
 8011c0c:	39500000 	.word	0x39500000
 8011c10:	7ff00000 	.word	0x7ff00000
 8011c14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011c18:	d165      	bne.n	8011ce6 <_strtod_l+0x936>
 8011c1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011c1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011c20:	b35a      	cbz	r2, 8011c7a <_strtod_l+0x8ca>
 8011c22:	4a9f      	ldr	r2, [pc, #636]	@ (8011ea0 <_strtod_l+0xaf0>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d12b      	bne.n	8011c80 <_strtod_l+0x8d0>
 8011c28:	9b08      	ldr	r3, [sp, #32]
 8011c2a:	4651      	mov	r1, sl
 8011c2c:	b303      	cbz	r3, 8011c70 <_strtod_l+0x8c0>
 8011c2e:	4b9d      	ldr	r3, [pc, #628]	@ (8011ea4 <_strtod_l+0xaf4>)
 8011c30:	465a      	mov	r2, fp
 8011c32:	4013      	ands	r3, r2
 8011c34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011c38:	f04f 32ff 	mov.w	r2, #4294967295
 8011c3c:	d81b      	bhi.n	8011c76 <_strtod_l+0x8c6>
 8011c3e:	0d1b      	lsrs	r3, r3, #20
 8011c40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011c44:	fa02 f303 	lsl.w	r3, r2, r3
 8011c48:	4299      	cmp	r1, r3
 8011c4a:	d119      	bne.n	8011c80 <_strtod_l+0x8d0>
 8011c4c:	4b96      	ldr	r3, [pc, #600]	@ (8011ea8 <_strtod_l+0xaf8>)
 8011c4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d102      	bne.n	8011c5a <_strtod_l+0x8aa>
 8011c54:	3101      	adds	r1, #1
 8011c56:	f43f adce 	beq.w	80117f6 <_strtod_l+0x446>
 8011c5a:	4b92      	ldr	r3, [pc, #584]	@ (8011ea4 <_strtod_l+0xaf4>)
 8011c5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c5e:	401a      	ands	r2, r3
 8011c60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011c64:	f04f 0a00 	mov.w	sl, #0
 8011c68:	9b08      	ldr	r3, [sp, #32]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d1b9      	bne.n	8011be2 <_strtod_l+0x832>
 8011c6e:	e5cd      	b.n	801180c <_strtod_l+0x45c>
 8011c70:	f04f 33ff 	mov.w	r3, #4294967295
 8011c74:	e7e8      	b.n	8011c48 <_strtod_l+0x898>
 8011c76:	4613      	mov	r3, r2
 8011c78:	e7e6      	b.n	8011c48 <_strtod_l+0x898>
 8011c7a:	ea53 030a 	orrs.w	r3, r3, sl
 8011c7e:	d0a2      	beq.n	8011bc6 <_strtod_l+0x816>
 8011c80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011c82:	b1db      	cbz	r3, 8011cbc <_strtod_l+0x90c>
 8011c84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c86:	4213      	tst	r3, r2
 8011c88:	d0ee      	beq.n	8011c68 <_strtod_l+0x8b8>
 8011c8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c8c:	9a08      	ldr	r2, [sp, #32]
 8011c8e:	4650      	mov	r0, sl
 8011c90:	4659      	mov	r1, fp
 8011c92:	b1bb      	cbz	r3, 8011cc4 <_strtod_l+0x914>
 8011c94:	f7ff fb6e 	bl	8011374 <sulp>
 8011c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c9c:	ec53 2b10 	vmov	r2, r3, d0
 8011ca0:	f7ee fb1c 	bl	80002dc <__adddf3>
 8011ca4:	4682      	mov	sl, r0
 8011ca6:	468b      	mov	fp, r1
 8011ca8:	e7de      	b.n	8011c68 <_strtod_l+0x8b8>
 8011caa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011cae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011cb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011cb6:	f04f 3aff 	mov.w	sl, #4294967295
 8011cba:	e7d5      	b.n	8011c68 <_strtod_l+0x8b8>
 8011cbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011cbe:	ea13 0f0a 	tst.w	r3, sl
 8011cc2:	e7e1      	b.n	8011c88 <_strtod_l+0x8d8>
 8011cc4:	f7ff fb56 	bl	8011374 <sulp>
 8011cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ccc:	ec53 2b10 	vmov	r2, r3, d0
 8011cd0:	f7ee fb02 	bl	80002d8 <__aeabi_dsub>
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	4682      	mov	sl, r0
 8011cda:	468b      	mov	fp, r1
 8011cdc:	f7ee ff1c 	bl	8000b18 <__aeabi_dcmpeq>
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	d0c1      	beq.n	8011c68 <_strtod_l+0x8b8>
 8011ce4:	e61a      	b.n	801191c <_strtod_l+0x56c>
 8011ce6:	4641      	mov	r1, r8
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f7ff facd 	bl	8011288 <__ratio>
 8011cee:	ec57 6b10 	vmov	r6, r7, d0
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011cf8:	4630      	mov	r0, r6
 8011cfa:	4639      	mov	r1, r7
 8011cfc:	f7ee ff20 	bl	8000b40 <__aeabi_dcmple>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	d06f      	beq.n	8011de4 <_strtod_l+0xa34>
 8011d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d17a      	bne.n	8011e00 <_strtod_l+0xa50>
 8011d0a:	f1ba 0f00 	cmp.w	sl, #0
 8011d0e:	d158      	bne.n	8011dc2 <_strtod_l+0xa12>
 8011d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d15a      	bne.n	8011dd0 <_strtod_l+0xa20>
 8011d1a:	4b64      	ldr	r3, [pc, #400]	@ (8011eac <_strtod_l+0xafc>)
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	4630      	mov	r0, r6
 8011d20:	4639      	mov	r1, r7
 8011d22:	f7ee ff03 	bl	8000b2c <__aeabi_dcmplt>
 8011d26:	2800      	cmp	r0, #0
 8011d28:	d159      	bne.n	8011dde <_strtod_l+0xa2e>
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	4639      	mov	r1, r7
 8011d2e:	4b60      	ldr	r3, [pc, #384]	@ (8011eb0 <_strtod_l+0xb00>)
 8011d30:	2200      	movs	r2, #0
 8011d32:	f7ee fc89 	bl	8000648 <__aeabi_dmul>
 8011d36:	4606      	mov	r6, r0
 8011d38:	460f      	mov	r7, r1
 8011d3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011d3e:	9606      	str	r6, [sp, #24]
 8011d40:	9307      	str	r3, [sp, #28]
 8011d42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011d46:	4d57      	ldr	r5, [pc, #348]	@ (8011ea4 <_strtod_l+0xaf4>)
 8011d48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d4e:	401d      	ands	r5, r3
 8011d50:	4b58      	ldr	r3, [pc, #352]	@ (8011eb4 <_strtod_l+0xb04>)
 8011d52:	429d      	cmp	r5, r3
 8011d54:	f040 80b2 	bne.w	8011ebc <_strtod_l+0xb0c>
 8011d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011d5e:	ec4b ab10 	vmov	d0, sl, fp
 8011d62:	f7ff f9c9 	bl	80110f8 <__ulp>
 8011d66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011d6a:	ec51 0b10 	vmov	r0, r1, d0
 8011d6e:	f7ee fc6b 	bl	8000648 <__aeabi_dmul>
 8011d72:	4652      	mov	r2, sl
 8011d74:	465b      	mov	r3, fp
 8011d76:	f7ee fab1 	bl	80002dc <__adddf3>
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	4949      	ldr	r1, [pc, #292]	@ (8011ea4 <_strtod_l+0xaf4>)
 8011d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8011eb8 <_strtod_l+0xb08>)
 8011d80:	4019      	ands	r1, r3
 8011d82:	4291      	cmp	r1, r2
 8011d84:	4682      	mov	sl, r0
 8011d86:	d942      	bls.n	8011e0e <_strtod_l+0xa5e>
 8011d88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011d8a:	4b47      	ldr	r3, [pc, #284]	@ (8011ea8 <_strtod_l+0xaf8>)
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d103      	bne.n	8011d98 <_strtod_l+0x9e8>
 8011d90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d92:	3301      	adds	r3, #1
 8011d94:	f43f ad2f 	beq.w	80117f6 <_strtod_l+0x446>
 8011d98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011ea8 <_strtod_l+0xaf8>
 8011d9c:	f04f 3aff 	mov.w	sl, #4294967295
 8011da0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011da2:	9805      	ldr	r0, [sp, #20]
 8011da4:	f7fe fe7c 	bl	8010aa0 <_Bfree>
 8011da8:	9805      	ldr	r0, [sp, #20]
 8011daa:	4649      	mov	r1, r9
 8011dac:	f7fe fe78 	bl	8010aa0 <_Bfree>
 8011db0:	9805      	ldr	r0, [sp, #20]
 8011db2:	4641      	mov	r1, r8
 8011db4:	f7fe fe74 	bl	8010aa0 <_Bfree>
 8011db8:	9805      	ldr	r0, [sp, #20]
 8011dba:	4621      	mov	r1, r4
 8011dbc:	f7fe fe70 	bl	8010aa0 <_Bfree>
 8011dc0:	e619      	b.n	80119f6 <_strtod_l+0x646>
 8011dc2:	f1ba 0f01 	cmp.w	sl, #1
 8011dc6:	d103      	bne.n	8011dd0 <_strtod_l+0xa20>
 8011dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	f43f ada6 	beq.w	801191c <_strtod_l+0x56c>
 8011dd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011e80 <_strtod_l+0xad0>
 8011dd4:	4f35      	ldr	r7, [pc, #212]	@ (8011eac <_strtod_l+0xafc>)
 8011dd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011dda:	2600      	movs	r6, #0
 8011ddc:	e7b1      	b.n	8011d42 <_strtod_l+0x992>
 8011dde:	4f34      	ldr	r7, [pc, #208]	@ (8011eb0 <_strtod_l+0xb00>)
 8011de0:	2600      	movs	r6, #0
 8011de2:	e7aa      	b.n	8011d3a <_strtod_l+0x98a>
 8011de4:	4b32      	ldr	r3, [pc, #200]	@ (8011eb0 <_strtod_l+0xb00>)
 8011de6:	4630      	mov	r0, r6
 8011de8:	4639      	mov	r1, r7
 8011dea:	2200      	movs	r2, #0
 8011dec:	f7ee fc2c 	bl	8000648 <__aeabi_dmul>
 8011df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011df2:	4606      	mov	r6, r0
 8011df4:	460f      	mov	r7, r1
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d09f      	beq.n	8011d3a <_strtod_l+0x98a>
 8011dfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011dfe:	e7a0      	b.n	8011d42 <_strtod_l+0x992>
 8011e00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011e88 <_strtod_l+0xad8>
 8011e04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011e08:	ec57 6b17 	vmov	r6, r7, d7
 8011e0c:	e799      	b.n	8011d42 <_strtod_l+0x992>
 8011e0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011e12:	9b08      	ldr	r3, [sp, #32]
 8011e14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d1c1      	bne.n	8011da0 <_strtod_l+0x9f0>
 8011e1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011e20:	0d1b      	lsrs	r3, r3, #20
 8011e22:	051b      	lsls	r3, r3, #20
 8011e24:	429d      	cmp	r5, r3
 8011e26:	d1bb      	bne.n	8011da0 <_strtod_l+0x9f0>
 8011e28:	4630      	mov	r0, r6
 8011e2a:	4639      	mov	r1, r7
 8011e2c:	f7ee ff6c 	bl	8000d08 <__aeabi_d2lz>
 8011e30:	f7ee fbdc 	bl	80005ec <__aeabi_l2d>
 8011e34:	4602      	mov	r2, r0
 8011e36:	460b      	mov	r3, r1
 8011e38:	4630      	mov	r0, r6
 8011e3a:	4639      	mov	r1, r7
 8011e3c:	f7ee fa4c 	bl	80002d8 <__aeabi_dsub>
 8011e40:	460b      	mov	r3, r1
 8011e42:	4602      	mov	r2, r0
 8011e44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011e48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e4e:	ea46 060a 	orr.w	r6, r6, sl
 8011e52:	431e      	orrs	r6, r3
 8011e54:	d06f      	beq.n	8011f36 <_strtod_l+0xb86>
 8011e56:	a30e      	add	r3, pc, #56	@ (adr r3, 8011e90 <_strtod_l+0xae0>)
 8011e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5c:	f7ee fe66 	bl	8000b2c <__aeabi_dcmplt>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	f47f acd3 	bne.w	801180c <_strtod_l+0x45c>
 8011e66:	a30c      	add	r3, pc, #48	@ (adr r3, 8011e98 <_strtod_l+0xae8>)
 8011e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011e70:	f7ee fe7a 	bl	8000b68 <__aeabi_dcmpgt>
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d093      	beq.n	8011da0 <_strtod_l+0x9f0>
 8011e78:	e4c8      	b.n	801180c <_strtod_l+0x45c>
 8011e7a:	bf00      	nop
 8011e7c:	f3af 8000 	nop.w
 8011e80:	00000000 	.word	0x00000000
 8011e84:	bff00000 	.word	0xbff00000
 8011e88:	00000000 	.word	0x00000000
 8011e8c:	3ff00000 	.word	0x3ff00000
 8011e90:	94a03595 	.word	0x94a03595
 8011e94:	3fdfffff 	.word	0x3fdfffff
 8011e98:	35afe535 	.word	0x35afe535
 8011e9c:	3fe00000 	.word	0x3fe00000
 8011ea0:	000fffff 	.word	0x000fffff
 8011ea4:	7ff00000 	.word	0x7ff00000
 8011ea8:	7fefffff 	.word	0x7fefffff
 8011eac:	3ff00000 	.word	0x3ff00000
 8011eb0:	3fe00000 	.word	0x3fe00000
 8011eb4:	7fe00000 	.word	0x7fe00000
 8011eb8:	7c9fffff 	.word	0x7c9fffff
 8011ebc:	9b08      	ldr	r3, [sp, #32]
 8011ebe:	b323      	cbz	r3, 8011f0a <_strtod_l+0xb5a>
 8011ec0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011ec4:	d821      	bhi.n	8011f0a <_strtod_l+0xb5a>
 8011ec6:	a328      	add	r3, pc, #160	@ (adr r3, 8011f68 <_strtod_l+0xbb8>)
 8011ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ecc:	4630      	mov	r0, r6
 8011ece:	4639      	mov	r1, r7
 8011ed0:	f7ee fe36 	bl	8000b40 <__aeabi_dcmple>
 8011ed4:	b1a0      	cbz	r0, 8011f00 <_strtod_l+0xb50>
 8011ed6:	4639      	mov	r1, r7
 8011ed8:	4630      	mov	r0, r6
 8011eda:	f7ee fe8d 	bl	8000bf8 <__aeabi_d2uiz>
 8011ede:	2801      	cmp	r0, #1
 8011ee0:	bf38      	it	cc
 8011ee2:	2001      	movcc	r0, #1
 8011ee4:	f7ee fb36 	bl	8000554 <__aeabi_ui2d>
 8011ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011eea:	4606      	mov	r6, r0
 8011eec:	460f      	mov	r7, r1
 8011eee:	b9fb      	cbnz	r3, 8011f30 <_strtod_l+0xb80>
 8011ef0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011ef4:	9014      	str	r0, [sp, #80]	@ 0x50
 8011ef6:	9315      	str	r3, [sp, #84]	@ 0x54
 8011ef8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011efc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011f00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011f02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011f06:	1b5b      	subs	r3, r3, r5
 8011f08:	9311      	str	r3, [sp, #68]	@ 0x44
 8011f0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011f0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011f12:	f7ff f8f1 	bl	80110f8 <__ulp>
 8011f16:	4650      	mov	r0, sl
 8011f18:	ec53 2b10 	vmov	r2, r3, d0
 8011f1c:	4659      	mov	r1, fp
 8011f1e:	f7ee fb93 	bl	8000648 <__aeabi_dmul>
 8011f22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011f26:	f7ee f9d9 	bl	80002dc <__adddf3>
 8011f2a:	4682      	mov	sl, r0
 8011f2c:	468b      	mov	fp, r1
 8011f2e:	e770      	b.n	8011e12 <_strtod_l+0xa62>
 8011f30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011f34:	e7e0      	b.n	8011ef8 <_strtod_l+0xb48>
 8011f36:	a30e      	add	r3, pc, #56	@ (adr r3, 8011f70 <_strtod_l+0xbc0>)
 8011f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3c:	f7ee fdf6 	bl	8000b2c <__aeabi_dcmplt>
 8011f40:	e798      	b.n	8011e74 <_strtod_l+0xac4>
 8011f42:	2300      	movs	r3, #0
 8011f44:	930e      	str	r3, [sp, #56]	@ 0x38
 8011f46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011f48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f4a:	6013      	str	r3, [r2, #0]
 8011f4c:	f7ff ba6d 	b.w	801142a <_strtod_l+0x7a>
 8011f50:	2a65      	cmp	r2, #101	@ 0x65
 8011f52:	f43f ab68 	beq.w	8011626 <_strtod_l+0x276>
 8011f56:	2a45      	cmp	r2, #69	@ 0x45
 8011f58:	f43f ab65 	beq.w	8011626 <_strtod_l+0x276>
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	f7ff bba0 	b.w	80116a2 <_strtod_l+0x2f2>
 8011f62:	bf00      	nop
 8011f64:	f3af 8000 	nop.w
 8011f68:	ffc00000 	.word	0xffc00000
 8011f6c:	41dfffff 	.word	0x41dfffff
 8011f70:	94a03595 	.word	0x94a03595
 8011f74:	3fcfffff 	.word	0x3fcfffff

08011f78 <_strtod_r>:
 8011f78:	4b01      	ldr	r3, [pc, #4]	@ (8011f80 <_strtod_r+0x8>)
 8011f7a:	f7ff ba19 	b.w	80113b0 <_strtod_l>
 8011f7e:	bf00      	nop
 8011f80:	2000009c 	.word	0x2000009c

08011f84 <_strtol_l.isra.0>:
 8011f84:	2b24      	cmp	r3, #36	@ 0x24
 8011f86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f8a:	4686      	mov	lr, r0
 8011f8c:	4690      	mov	r8, r2
 8011f8e:	d801      	bhi.n	8011f94 <_strtol_l.isra.0+0x10>
 8011f90:	2b01      	cmp	r3, #1
 8011f92:	d106      	bne.n	8011fa2 <_strtol_l.isra.0+0x1e>
 8011f94:	f7fd fda8 	bl	800fae8 <__errno>
 8011f98:	2316      	movs	r3, #22
 8011f9a:	6003      	str	r3, [r0, #0]
 8011f9c:	2000      	movs	r0, #0
 8011f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fa2:	4834      	ldr	r0, [pc, #208]	@ (8012074 <_strtol_l.isra.0+0xf0>)
 8011fa4:	460d      	mov	r5, r1
 8011fa6:	462a      	mov	r2, r5
 8011fa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011fac:	5d06      	ldrb	r6, [r0, r4]
 8011fae:	f016 0608 	ands.w	r6, r6, #8
 8011fb2:	d1f8      	bne.n	8011fa6 <_strtol_l.isra.0+0x22>
 8011fb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8011fb6:	d110      	bne.n	8011fda <_strtol_l.isra.0+0x56>
 8011fb8:	782c      	ldrb	r4, [r5, #0]
 8011fba:	2601      	movs	r6, #1
 8011fbc:	1c95      	adds	r5, r2, #2
 8011fbe:	f033 0210 	bics.w	r2, r3, #16
 8011fc2:	d115      	bne.n	8011ff0 <_strtol_l.isra.0+0x6c>
 8011fc4:	2c30      	cmp	r4, #48	@ 0x30
 8011fc6:	d10d      	bne.n	8011fe4 <_strtol_l.isra.0+0x60>
 8011fc8:	782a      	ldrb	r2, [r5, #0]
 8011fca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011fce:	2a58      	cmp	r2, #88	@ 0x58
 8011fd0:	d108      	bne.n	8011fe4 <_strtol_l.isra.0+0x60>
 8011fd2:	786c      	ldrb	r4, [r5, #1]
 8011fd4:	3502      	adds	r5, #2
 8011fd6:	2310      	movs	r3, #16
 8011fd8:	e00a      	b.n	8011ff0 <_strtol_l.isra.0+0x6c>
 8011fda:	2c2b      	cmp	r4, #43	@ 0x2b
 8011fdc:	bf04      	itt	eq
 8011fde:	782c      	ldrbeq	r4, [r5, #0]
 8011fe0:	1c95      	addeq	r5, r2, #2
 8011fe2:	e7ec      	b.n	8011fbe <_strtol_l.isra.0+0x3a>
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d1f6      	bne.n	8011fd6 <_strtol_l.isra.0+0x52>
 8011fe8:	2c30      	cmp	r4, #48	@ 0x30
 8011fea:	bf14      	ite	ne
 8011fec:	230a      	movne	r3, #10
 8011fee:	2308      	moveq	r3, #8
 8011ff0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011ff4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	fbbc f9f3 	udiv	r9, ip, r3
 8011ffe:	4610      	mov	r0, r2
 8012000:	fb03 ca19 	mls	sl, r3, r9, ip
 8012004:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012008:	2f09      	cmp	r7, #9
 801200a:	d80f      	bhi.n	801202c <_strtol_l.isra.0+0xa8>
 801200c:	463c      	mov	r4, r7
 801200e:	42a3      	cmp	r3, r4
 8012010:	dd1b      	ble.n	801204a <_strtol_l.isra.0+0xc6>
 8012012:	1c57      	adds	r7, r2, #1
 8012014:	d007      	beq.n	8012026 <_strtol_l.isra.0+0xa2>
 8012016:	4581      	cmp	r9, r0
 8012018:	d314      	bcc.n	8012044 <_strtol_l.isra.0+0xc0>
 801201a:	d101      	bne.n	8012020 <_strtol_l.isra.0+0x9c>
 801201c:	45a2      	cmp	sl, r4
 801201e:	db11      	blt.n	8012044 <_strtol_l.isra.0+0xc0>
 8012020:	fb00 4003 	mla	r0, r0, r3, r4
 8012024:	2201      	movs	r2, #1
 8012026:	f815 4b01 	ldrb.w	r4, [r5], #1
 801202a:	e7eb      	b.n	8012004 <_strtol_l.isra.0+0x80>
 801202c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012030:	2f19      	cmp	r7, #25
 8012032:	d801      	bhi.n	8012038 <_strtol_l.isra.0+0xb4>
 8012034:	3c37      	subs	r4, #55	@ 0x37
 8012036:	e7ea      	b.n	801200e <_strtol_l.isra.0+0x8a>
 8012038:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801203c:	2f19      	cmp	r7, #25
 801203e:	d804      	bhi.n	801204a <_strtol_l.isra.0+0xc6>
 8012040:	3c57      	subs	r4, #87	@ 0x57
 8012042:	e7e4      	b.n	801200e <_strtol_l.isra.0+0x8a>
 8012044:	f04f 32ff 	mov.w	r2, #4294967295
 8012048:	e7ed      	b.n	8012026 <_strtol_l.isra.0+0xa2>
 801204a:	1c53      	adds	r3, r2, #1
 801204c:	d108      	bne.n	8012060 <_strtol_l.isra.0+0xdc>
 801204e:	2322      	movs	r3, #34	@ 0x22
 8012050:	f8ce 3000 	str.w	r3, [lr]
 8012054:	4660      	mov	r0, ip
 8012056:	f1b8 0f00 	cmp.w	r8, #0
 801205a:	d0a0      	beq.n	8011f9e <_strtol_l.isra.0+0x1a>
 801205c:	1e69      	subs	r1, r5, #1
 801205e:	e006      	b.n	801206e <_strtol_l.isra.0+0xea>
 8012060:	b106      	cbz	r6, 8012064 <_strtol_l.isra.0+0xe0>
 8012062:	4240      	negs	r0, r0
 8012064:	f1b8 0f00 	cmp.w	r8, #0
 8012068:	d099      	beq.n	8011f9e <_strtol_l.isra.0+0x1a>
 801206a:	2a00      	cmp	r2, #0
 801206c:	d1f6      	bne.n	801205c <_strtol_l.isra.0+0xd8>
 801206e:	f8c8 1000 	str.w	r1, [r8]
 8012072:	e794      	b.n	8011f9e <_strtol_l.isra.0+0x1a>
 8012074:	08015699 	.word	0x08015699

08012078 <_strtol_r>:
 8012078:	f7ff bf84 	b.w	8011f84 <_strtol_l.isra.0>

0801207c <__ssputs_r>:
 801207c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012080:	688e      	ldr	r6, [r1, #8]
 8012082:	461f      	mov	r7, r3
 8012084:	42be      	cmp	r6, r7
 8012086:	680b      	ldr	r3, [r1, #0]
 8012088:	4682      	mov	sl, r0
 801208a:	460c      	mov	r4, r1
 801208c:	4690      	mov	r8, r2
 801208e:	d82d      	bhi.n	80120ec <__ssputs_r+0x70>
 8012090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012094:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012098:	d026      	beq.n	80120e8 <__ssputs_r+0x6c>
 801209a:	6965      	ldr	r5, [r4, #20]
 801209c:	6909      	ldr	r1, [r1, #16]
 801209e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120a2:	eba3 0901 	sub.w	r9, r3, r1
 80120a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80120aa:	1c7b      	adds	r3, r7, #1
 80120ac:	444b      	add	r3, r9
 80120ae:	106d      	asrs	r5, r5, #1
 80120b0:	429d      	cmp	r5, r3
 80120b2:	bf38      	it	cc
 80120b4:	461d      	movcc	r5, r3
 80120b6:	0553      	lsls	r3, r2, #21
 80120b8:	d527      	bpl.n	801210a <__ssputs_r+0x8e>
 80120ba:	4629      	mov	r1, r5
 80120bc:	f7fe fc24 	bl	8010908 <_malloc_r>
 80120c0:	4606      	mov	r6, r0
 80120c2:	b360      	cbz	r0, 801211e <__ssputs_r+0xa2>
 80120c4:	6921      	ldr	r1, [r4, #16]
 80120c6:	464a      	mov	r2, r9
 80120c8:	f7fd fd3b 	bl	800fb42 <memcpy>
 80120cc:	89a3      	ldrh	r3, [r4, #12]
 80120ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80120d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120d6:	81a3      	strh	r3, [r4, #12]
 80120d8:	6126      	str	r6, [r4, #16]
 80120da:	6165      	str	r5, [r4, #20]
 80120dc:	444e      	add	r6, r9
 80120de:	eba5 0509 	sub.w	r5, r5, r9
 80120e2:	6026      	str	r6, [r4, #0]
 80120e4:	60a5      	str	r5, [r4, #8]
 80120e6:	463e      	mov	r6, r7
 80120e8:	42be      	cmp	r6, r7
 80120ea:	d900      	bls.n	80120ee <__ssputs_r+0x72>
 80120ec:	463e      	mov	r6, r7
 80120ee:	6820      	ldr	r0, [r4, #0]
 80120f0:	4632      	mov	r2, r6
 80120f2:	4641      	mov	r1, r8
 80120f4:	f000 fa28 	bl	8012548 <memmove>
 80120f8:	68a3      	ldr	r3, [r4, #8]
 80120fa:	1b9b      	subs	r3, r3, r6
 80120fc:	60a3      	str	r3, [r4, #8]
 80120fe:	6823      	ldr	r3, [r4, #0]
 8012100:	4433      	add	r3, r6
 8012102:	6023      	str	r3, [r4, #0]
 8012104:	2000      	movs	r0, #0
 8012106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801210a:	462a      	mov	r2, r5
 801210c:	f000 fe01 	bl	8012d12 <_realloc_r>
 8012110:	4606      	mov	r6, r0
 8012112:	2800      	cmp	r0, #0
 8012114:	d1e0      	bne.n	80120d8 <__ssputs_r+0x5c>
 8012116:	6921      	ldr	r1, [r4, #16]
 8012118:	4650      	mov	r0, sl
 801211a:	f7fe fb81 	bl	8010820 <_free_r>
 801211e:	230c      	movs	r3, #12
 8012120:	f8ca 3000 	str.w	r3, [sl]
 8012124:	89a3      	ldrh	r3, [r4, #12]
 8012126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801212a:	81a3      	strh	r3, [r4, #12]
 801212c:	f04f 30ff 	mov.w	r0, #4294967295
 8012130:	e7e9      	b.n	8012106 <__ssputs_r+0x8a>
	...

08012134 <_svfiprintf_r>:
 8012134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012138:	4698      	mov	r8, r3
 801213a:	898b      	ldrh	r3, [r1, #12]
 801213c:	061b      	lsls	r3, r3, #24
 801213e:	b09d      	sub	sp, #116	@ 0x74
 8012140:	4607      	mov	r7, r0
 8012142:	460d      	mov	r5, r1
 8012144:	4614      	mov	r4, r2
 8012146:	d510      	bpl.n	801216a <_svfiprintf_r+0x36>
 8012148:	690b      	ldr	r3, [r1, #16]
 801214a:	b973      	cbnz	r3, 801216a <_svfiprintf_r+0x36>
 801214c:	2140      	movs	r1, #64	@ 0x40
 801214e:	f7fe fbdb 	bl	8010908 <_malloc_r>
 8012152:	6028      	str	r0, [r5, #0]
 8012154:	6128      	str	r0, [r5, #16]
 8012156:	b930      	cbnz	r0, 8012166 <_svfiprintf_r+0x32>
 8012158:	230c      	movs	r3, #12
 801215a:	603b      	str	r3, [r7, #0]
 801215c:	f04f 30ff 	mov.w	r0, #4294967295
 8012160:	b01d      	add	sp, #116	@ 0x74
 8012162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012166:	2340      	movs	r3, #64	@ 0x40
 8012168:	616b      	str	r3, [r5, #20]
 801216a:	2300      	movs	r3, #0
 801216c:	9309      	str	r3, [sp, #36]	@ 0x24
 801216e:	2320      	movs	r3, #32
 8012170:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012174:	f8cd 800c 	str.w	r8, [sp, #12]
 8012178:	2330      	movs	r3, #48	@ 0x30
 801217a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012318 <_svfiprintf_r+0x1e4>
 801217e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012182:	f04f 0901 	mov.w	r9, #1
 8012186:	4623      	mov	r3, r4
 8012188:	469a      	mov	sl, r3
 801218a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801218e:	b10a      	cbz	r2, 8012194 <_svfiprintf_r+0x60>
 8012190:	2a25      	cmp	r2, #37	@ 0x25
 8012192:	d1f9      	bne.n	8012188 <_svfiprintf_r+0x54>
 8012194:	ebba 0b04 	subs.w	fp, sl, r4
 8012198:	d00b      	beq.n	80121b2 <_svfiprintf_r+0x7e>
 801219a:	465b      	mov	r3, fp
 801219c:	4622      	mov	r2, r4
 801219e:	4629      	mov	r1, r5
 80121a0:	4638      	mov	r0, r7
 80121a2:	f7ff ff6b 	bl	801207c <__ssputs_r>
 80121a6:	3001      	adds	r0, #1
 80121a8:	f000 80a7 	beq.w	80122fa <_svfiprintf_r+0x1c6>
 80121ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121ae:	445a      	add	r2, fp
 80121b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80121b2:	f89a 3000 	ldrb.w	r3, [sl]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	f000 809f 	beq.w	80122fa <_svfiprintf_r+0x1c6>
 80121bc:	2300      	movs	r3, #0
 80121be:	f04f 32ff 	mov.w	r2, #4294967295
 80121c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121c6:	f10a 0a01 	add.w	sl, sl, #1
 80121ca:	9304      	str	r3, [sp, #16]
 80121cc:	9307      	str	r3, [sp, #28]
 80121ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80121d4:	4654      	mov	r4, sl
 80121d6:	2205      	movs	r2, #5
 80121d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121dc:	484e      	ldr	r0, [pc, #312]	@ (8012318 <_svfiprintf_r+0x1e4>)
 80121de:	f7ee f81f 	bl	8000220 <memchr>
 80121e2:	9a04      	ldr	r2, [sp, #16]
 80121e4:	b9d8      	cbnz	r0, 801221e <_svfiprintf_r+0xea>
 80121e6:	06d0      	lsls	r0, r2, #27
 80121e8:	bf44      	itt	mi
 80121ea:	2320      	movmi	r3, #32
 80121ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121f0:	0711      	lsls	r1, r2, #28
 80121f2:	bf44      	itt	mi
 80121f4:	232b      	movmi	r3, #43	@ 0x2b
 80121f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121fa:	f89a 3000 	ldrb.w	r3, [sl]
 80121fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012200:	d015      	beq.n	801222e <_svfiprintf_r+0xfa>
 8012202:	9a07      	ldr	r2, [sp, #28]
 8012204:	4654      	mov	r4, sl
 8012206:	2000      	movs	r0, #0
 8012208:	f04f 0c0a 	mov.w	ip, #10
 801220c:	4621      	mov	r1, r4
 801220e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012212:	3b30      	subs	r3, #48	@ 0x30
 8012214:	2b09      	cmp	r3, #9
 8012216:	d94b      	bls.n	80122b0 <_svfiprintf_r+0x17c>
 8012218:	b1b0      	cbz	r0, 8012248 <_svfiprintf_r+0x114>
 801221a:	9207      	str	r2, [sp, #28]
 801221c:	e014      	b.n	8012248 <_svfiprintf_r+0x114>
 801221e:	eba0 0308 	sub.w	r3, r0, r8
 8012222:	fa09 f303 	lsl.w	r3, r9, r3
 8012226:	4313      	orrs	r3, r2
 8012228:	9304      	str	r3, [sp, #16]
 801222a:	46a2      	mov	sl, r4
 801222c:	e7d2      	b.n	80121d4 <_svfiprintf_r+0xa0>
 801222e:	9b03      	ldr	r3, [sp, #12]
 8012230:	1d19      	adds	r1, r3, #4
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	9103      	str	r1, [sp, #12]
 8012236:	2b00      	cmp	r3, #0
 8012238:	bfbb      	ittet	lt
 801223a:	425b      	neglt	r3, r3
 801223c:	f042 0202 	orrlt.w	r2, r2, #2
 8012240:	9307      	strge	r3, [sp, #28]
 8012242:	9307      	strlt	r3, [sp, #28]
 8012244:	bfb8      	it	lt
 8012246:	9204      	strlt	r2, [sp, #16]
 8012248:	7823      	ldrb	r3, [r4, #0]
 801224a:	2b2e      	cmp	r3, #46	@ 0x2e
 801224c:	d10a      	bne.n	8012264 <_svfiprintf_r+0x130>
 801224e:	7863      	ldrb	r3, [r4, #1]
 8012250:	2b2a      	cmp	r3, #42	@ 0x2a
 8012252:	d132      	bne.n	80122ba <_svfiprintf_r+0x186>
 8012254:	9b03      	ldr	r3, [sp, #12]
 8012256:	1d1a      	adds	r2, r3, #4
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	9203      	str	r2, [sp, #12]
 801225c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012260:	3402      	adds	r4, #2
 8012262:	9305      	str	r3, [sp, #20]
 8012264:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012328 <_svfiprintf_r+0x1f4>
 8012268:	7821      	ldrb	r1, [r4, #0]
 801226a:	2203      	movs	r2, #3
 801226c:	4650      	mov	r0, sl
 801226e:	f7ed ffd7 	bl	8000220 <memchr>
 8012272:	b138      	cbz	r0, 8012284 <_svfiprintf_r+0x150>
 8012274:	9b04      	ldr	r3, [sp, #16]
 8012276:	eba0 000a 	sub.w	r0, r0, sl
 801227a:	2240      	movs	r2, #64	@ 0x40
 801227c:	4082      	lsls	r2, r0
 801227e:	4313      	orrs	r3, r2
 8012280:	3401      	adds	r4, #1
 8012282:	9304      	str	r3, [sp, #16]
 8012284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012288:	4824      	ldr	r0, [pc, #144]	@ (801231c <_svfiprintf_r+0x1e8>)
 801228a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801228e:	2206      	movs	r2, #6
 8012290:	f7ed ffc6 	bl	8000220 <memchr>
 8012294:	2800      	cmp	r0, #0
 8012296:	d036      	beq.n	8012306 <_svfiprintf_r+0x1d2>
 8012298:	4b21      	ldr	r3, [pc, #132]	@ (8012320 <_svfiprintf_r+0x1ec>)
 801229a:	bb1b      	cbnz	r3, 80122e4 <_svfiprintf_r+0x1b0>
 801229c:	9b03      	ldr	r3, [sp, #12]
 801229e:	3307      	adds	r3, #7
 80122a0:	f023 0307 	bic.w	r3, r3, #7
 80122a4:	3308      	adds	r3, #8
 80122a6:	9303      	str	r3, [sp, #12]
 80122a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122aa:	4433      	add	r3, r6
 80122ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80122ae:	e76a      	b.n	8012186 <_svfiprintf_r+0x52>
 80122b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80122b4:	460c      	mov	r4, r1
 80122b6:	2001      	movs	r0, #1
 80122b8:	e7a8      	b.n	801220c <_svfiprintf_r+0xd8>
 80122ba:	2300      	movs	r3, #0
 80122bc:	3401      	adds	r4, #1
 80122be:	9305      	str	r3, [sp, #20]
 80122c0:	4619      	mov	r1, r3
 80122c2:	f04f 0c0a 	mov.w	ip, #10
 80122c6:	4620      	mov	r0, r4
 80122c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122cc:	3a30      	subs	r2, #48	@ 0x30
 80122ce:	2a09      	cmp	r2, #9
 80122d0:	d903      	bls.n	80122da <_svfiprintf_r+0x1a6>
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d0c6      	beq.n	8012264 <_svfiprintf_r+0x130>
 80122d6:	9105      	str	r1, [sp, #20]
 80122d8:	e7c4      	b.n	8012264 <_svfiprintf_r+0x130>
 80122da:	fb0c 2101 	mla	r1, ip, r1, r2
 80122de:	4604      	mov	r4, r0
 80122e0:	2301      	movs	r3, #1
 80122e2:	e7f0      	b.n	80122c6 <_svfiprintf_r+0x192>
 80122e4:	ab03      	add	r3, sp, #12
 80122e6:	9300      	str	r3, [sp, #0]
 80122e8:	462a      	mov	r2, r5
 80122ea:	4b0e      	ldr	r3, [pc, #56]	@ (8012324 <_svfiprintf_r+0x1f0>)
 80122ec:	a904      	add	r1, sp, #16
 80122ee:	4638      	mov	r0, r7
 80122f0:	f7fc fb94 	bl	800ea1c <_printf_float>
 80122f4:	1c42      	adds	r2, r0, #1
 80122f6:	4606      	mov	r6, r0
 80122f8:	d1d6      	bne.n	80122a8 <_svfiprintf_r+0x174>
 80122fa:	89ab      	ldrh	r3, [r5, #12]
 80122fc:	065b      	lsls	r3, r3, #25
 80122fe:	f53f af2d 	bmi.w	801215c <_svfiprintf_r+0x28>
 8012302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012304:	e72c      	b.n	8012160 <_svfiprintf_r+0x2c>
 8012306:	ab03      	add	r3, sp, #12
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	462a      	mov	r2, r5
 801230c:	4b05      	ldr	r3, [pc, #20]	@ (8012324 <_svfiprintf_r+0x1f0>)
 801230e:	a904      	add	r1, sp, #16
 8012310:	4638      	mov	r0, r7
 8012312:	f7fc fe1b 	bl	800ef4c <_printf_i>
 8012316:	e7ed      	b.n	80122f4 <_svfiprintf_r+0x1c0>
 8012318:	08015491 	.word	0x08015491
 801231c:	0801549b 	.word	0x0801549b
 8012320:	0800ea1d 	.word	0x0800ea1d
 8012324:	0801207d 	.word	0x0801207d
 8012328:	08015497 	.word	0x08015497

0801232c <__sflush_r>:
 801232c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012334:	0716      	lsls	r6, r2, #28
 8012336:	4605      	mov	r5, r0
 8012338:	460c      	mov	r4, r1
 801233a:	d454      	bmi.n	80123e6 <__sflush_r+0xba>
 801233c:	684b      	ldr	r3, [r1, #4]
 801233e:	2b00      	cmp	r3, #0
 8012340:	dc02      	bgt.n	8012348 <__sflush_r+0x1c>
 8012342:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012344:	2b00      	cmp	r3, #0
 8012346:	dd48      	ble.n	80123da <__sflush_r+0xae>
 8012348:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801234a:	2e00      	cmp	r6, #0
 801234c:	d045      	beq.n	80123da <__sflush_r+0xae>
 801234e:	2300      	movs	r3, #0
 8012350:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012354:	682f      	ldr	r7, [r5, #0]
 8012356:	6a21      	ldr	r1, [r4, #32]
 8012358:	602b      	str	r3, [r5, #0]
 801235a:	d030      	beq.n	80123be <__sflush_r+0x92>
 801235c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801235e:	89a3      	ldrh	r3, [r4, #12]
 8012360:	0759      	lsls	r1, r3, #29
 8012362:	d505      	bpl.n	8012370 <__sflush_r+0x44>
 8012364:	6863      	ldr	r3, [r4, #4]
 8012366:	1ad2      	subs	r2, r2, r3
 8012368:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801236a:	b10b      	cbz	r3, 8012370 <__sflush_r+0x44>
 801236c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801236e:	1ad2      	subs	r2, r2, r3
 8012370:	2300      	movs	r3, #0
 8012372:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012374:	6a21      	ldr	r1, [r4, #32]
 8012376:	4628      	mov	r0, r5
 8012378:	47b0      	blx	r6
 801237a:	1c43      	adds	r3, r0, #1
 801237c:	89a3      	ldrh	r3, [r4, #12]
 801237e:	d106      	bne.n	801238e <__sflush_r+0x62>
 8012380:	6829      	ldr	r1, [r5, #0]
 8012382:	291d      	cmp	r1, #29
 8012384:	d82b      	bhi.n	80123de <__sflush_r+0xb2>
 8012386:	4a2a      	ldr	r2, [pc, #168]	@ (8012430 <__sflush_r+0x104>)
 8012388:	40ca      	lsrs	r2, r1
 801238a:	07d6      	lsls	r6, r2, #31
 801238c:	d527      	bpl.n	80123de <__sflush_r+0xb2>
 801238e:	2200      	movs	r2, #0
 8012390:	6062      	str	r2, [r4, #4]
 8012392:	04d9      	lsls	r1, r3, #19
 8012394:	6922      	ldr	r2, [r4, #16]
 8012396:	6022      	str	r2, [r4, #0]
 8012398:	d504      	bpl.n	80123a4 <__sflush_r+0x78>
 801239a:	1c42      	adds	r2, r0, #1
 801239c:	d101      	bne.n	80123a2 <__sflush_r+0x76>
 801239e:	682b      	ldr	r3, [r5, #0]
 80123a0:	b903      	cbnz	r3, 80123a4 <__sflush_r+0x78>
 80123a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80123a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80123a6:	602f      	str	r7, [r5, #0]
 80123a8:	b1b9      	cbz	r1, 80123da <__sflush_r+0xae>
 80123aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123ae:	4299      	cmp	r1, r3
 80123b0:	d002      	beq.n	80123b8 <__sflush_r+0x8c>
 80123b2:	4628      	mov	r0, r5
 80123b4:	f7fe fa34 	bl	8010820 <_free_r>
 80123b8:	2300      	movs	r3, #0
 80123ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80123bc:	e00d      	b.n	80123da <__sflush_r+0xae>
 80123be:	2301      	movs	r3, #1
 80123c0:	4628      	mov	r0, r5
 80123c2:	47b0      	blx	r6
 80123c4:	4602      	mov	r2, r0
 80123c6:	1c50      	adds	r0, r2, #1
 80123c8:	d1c9      	bne.n	801235e <__sflush_r+0x32>
 80123ca:	682b      	ldr	r3, [r5, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d0c6      	beq.n	801235e <__sflush_r+0x32>
 80123d0:	2b1d      	cmp	r3, #29
 80123d2:	d001      	beq.n	80123d8 <__sflush_r+0xac>
 80123d4:	2b16      	cmp	r3, #22
 80123d6:	d11e      	bne.n	8012416 <__sflush_r+0xea>
 80123d8:	602f      	str	r7, [r5, #0]
 80123da:	2000      	movs	r0, #0
 80123dc:	e022      	b.n	8012424 <__sflush_r+0xf8>
 80123de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123e2:	b21b      	sxth	r3, r3
 80123e4:	e01b      	b.n	801241e <__sflush_r+0xf2>
 80123e6:	690f      	ldr	r7, [r1, #16]
 80123e8:	2f00      	cmp	r7, #0
 80123ea:	d0f6      	beq.n	80123da <__sflush_r+0xae>
 80123ec:	0793      	lsls	r3, r2, #30
 80123ee:	680e      	ldr	r6, [r1, #0]
 80123f0:	bf08      	it	eq
 80123f2:	694b      	ldreq	r3, [r1, #20]
 80123f4:	600f      	str	r7, [r1, #0]
 80123f6:	bf18      	it	ne
 80123f8:	2300      	movne	r3, #0
 80123fa:	eba6 0807 	sub.w	r8, r6, r7
 80123fe:	608b      	str	r3, [r1, #8]
 8012400:	f1b8 0f00 	cmp.w	r8, #0
 8012404:	dde9      	ble.n	80123da <__sflush_r+0xae>
 8012406:	6a21      	ldr	r1, [r4, #32]
 8012408:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801240a:	4643      	mov	r3, r8
 801240c:	463a      	mov	r2, r7
 801240e:	4628      	mov	r0, r5
 8012410:	47b0      	blx	r6
 8012412:	2800      	cmp	r0, #0
 8012414:	dc08      	bgt.n	8012428 <__sflush_r+0xfc>
 8012416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801241a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801241e:	81a3      	strh	r3, [r4, #12]
 8012420:	f04f 30ff 	mov.w	r0, #4294967295
 8012424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012428:	4407      	add	r7, r0
 801242a:	eba8 0800 	sub.w	r8, r8, r0
 801242e:	e7e7      	b.n	8012400 <__sflush_r+0xd4>
 8012430:	20400001 	.word	0x20400001

08012434 <_fflush_r>:
 8012434:	b538      	push	{r3, r4, r5, lr}
 8012436:	690b      	ldr	r3, [r1, #16]
 8012438:	4605      	mov	r5, r0
 801243a:	460c      	mov	r4, r1
 801243c:	b913      	cbnz	r3, 8012444 <_fflush_r+0x10>
 801243e:	2500      	movs	r5, #0
 8012440:	4628      	mov	r0, r5
 8012442:	bd38      	pop	{r3, r4, r5, pc}
 8012444:	b118      	cbz	r0, 801244e <_fflush_r+0x1a>
 8012446:	6a03      	ldr	r3, [r0, #32]
 8012448:	b90b      	cbnz	r3, 801244e <_fflush_r+0x1a>
 801244a:	f7fd f937 	bl	800f6bc <__sinit>
 801244e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d0f3      	beq.n	801243e <_fflush_r+0xa>
 8012456:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012458:	07d0      	lsls	r0, r2, #31
 801245a:	d404      	bmi.n	8012466 <_fflush_r+0x32>
 801245c:	0599      	lsls	r1, r3, #22
 801245e:	d402      	bmi.n	8012466 <_fflush_r+0x32>
 8012460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012462:	f7fd fb6c 	bl	800fb3e <__retarget_lock_acquire_recursive>
 8012466:	4628      	mov	r0, r5
 8012468:	4621      	mov	r1, r4
 801246a:	f7ff ff5f 	bl	801232c <__sflush_r>
 801246e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012470:	07da      	lsls	r2, r3, #31
 8012472:	4605      	mov	r5, r0
 8012474:	d4e4      	bmi.n	8012440 <_fflush_r+0xc>
 8012476:	89a3      	ldrh	r3, [r4, #12]
 8012478:	059b      	lsls	r3, r3, #22
 801247a:	d4e1      	bmi.n	8012440 <_fflush_r+0xc>
 801247c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801247e:	f7fd fb5f 	bl	800fb40 <__retarget_lock_release_recursive>
 8012482:	e7dd      	b.n	8012440 <_fflush_r+0xc>

08012484 <__swhatbuf_r>:
 8012484:	b570      	push	{r4, r5, r6, lr}
 8012486:	460c      	mov	r4, r1
 8012488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801248c:	2900      	cmp	r1, #0
 801248e:	b096      	sub	sp, #88	@ 0x58
 8012490:	4615      	mov	r5, r2
 8012492:	461e      	mov	r6, r3
 8012494:	da0d      	bge.n	80124b2 <__swhatbuf_r+0x2e>
 8012496:	89a3      	ldrh	r3, [r4, #12]
 8012498:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801249c:	f04f 0100 	mov.w	r1, #0
 80124a0:	bf14      	ite	ne
 80124a2:	2340      	movne	r3, #64	@ 0x40
 80124a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80124a8:	2000      	movs	r0, #0
 80124aa:	6031      	str	r1, [r6, #0]
 80124ac:	602b      	str	r3, [r5, #0]
 80124ae:	b016      	add	sp, #88	@ 0x58
 80124b0:	bd70      	pop	{r4, r5, r6, pc}
 80124b2:	466a      	mov	r2, sp
 80124b4:	f000 f874 	bl	80125a0 <_fstat_r>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	dbec      	blt.n	8012496 <__swhatbuf_r+0x12>
 80124bc:	9901      	ldr	r1, [sp, #4]
 80124be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80124c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80124c6:	4259      	negs	r1, r3
 80124c8:	4159      	adcs	r1, r3
 80124ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124ce:	e7eb      	b.n	80124a8 <__swhatbuf_r+0x24>

080124d0 <__smakebuf_r>:
 80124d0:	898b      	ldrh	r3, [r1, #12]
 80124d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124d4:	079d      	lsls	r5, r3, #30
 80124d6:	4606      	mov	r6, r0
 80124d8:	460c      	mov	r4, r1
 80124da:	d507      	bpl.n	80124ec <__smakebuf_r+0x1c>
 80124dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80124e0:	6023      	str	r3, [r4, #0]
 80124e2:	6123      	str	r3, [r4, #16]
 80124e4:	2301      	movs	r3, #1
 80124e6:	6163      	str	r3, [r4, #20]
 80124e8:	b003      	add	sp, #12
 80124ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124ec:	ab01      	add	r3, sp, #4
 80124ee:	466a      	mov	r2, sp
 80124f0:	f7ff ffc8 	bl	8012484 <__swhatbuf_r>
 80124f4:	9f00      	ldr	r7, [sp, #0]
 80124f6:	4605      	mov	r5, r0
 80124f8:	4639      	mov	r1, r7
 80124fa:	4630      	mov	r0, r6
 80124fc:	f7fe fa04 	bl	8010908 <_malloc_r>
 8012500:	b948      	cbnz	r0, 8012516 <__smakebuf_r+0x46>
 8012502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012506:	059a      	lsls	r2, r3, #22
 8012508:	d4ee      	bmi.n	80124e8 <__smakebuf_r+0x18>
 801250a:	f023 0303 	bic.w	r3, r3, #3
 801250e:	f043 0302 	orr.w	r3, r3, #2
 8012512:	81a3      	strh	r3, [r4, #12]
 8012514:	e7e2      	b.n	80124dc <__smakebuf_r+0xc>
 8012516:	89a3      	ldrh	r3, [r4, #12]
 8012518:	6020      	str	r0, [r4, #0]
 801251a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801251e:	81a3      	strh	r3, [r4, #12]
 8012520:	9b01      	ldr	r3, [sp, #4]
 8012522:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012526:	b15b      	cbz	r3, 8012540 <__smakebuf_r+0x70>
 8012528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801252c:	4630      	mov	r0, r6
 801252e:	f000 f849 	bl	80125c4 <_isatty_r>
 8012532:	b128      	cbz	r0, 8012540 <__smakebuf_r+0x70>
 8012534:	89a3      	ldrh	r3, [r4, #12]
 8012536:	f023 0303 	bic.w	r3, r3, #3
 801253a:	f043 0301 	orr.w	r3, r3, #1
 801253e:	81a3      	strh	r3, [r4, #12]
 8012540:	89a3      	ldrh	r3, [r4, #12]
 8012542:	431d      	orrs	r5, r3
 8012544:	81a5      	strh	r5, [r4, #12]
 8012546:	e7cf      	b.n	80124e8 <__smakebuf_r+0x18>

08012548 <memmove>:
 8012548:	4288      	cmp	r0, r1
 801254a:	b510      	push	{r4, lr}
 801254c:	eb01 0402 	add.w	r4, r1, r2
 8012550:	d902      	bls.n	8012558 <memmove+0x10>
 8012552:	4284      	cmp	r4, r0
 8012554:	4623      	mov	r3, r4
 8012556:	d807      	bhi.n	8012568 <memmove+0x20>
 8012558:	1e43      	subs	r3, r0, #1
 801255a:	42a1      	cmp	r1, r4
 801255c:	d008      	beq.n	8012570 <memmove+0x28>
 801255e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012562:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012566:	e7f8      	b.n	801255a <memmove+0x12>
 8012568:	4402      	add	r2, r0
 801256a:	4601      	mov	r1, r0
 801256c:	428a      	cmp	r2, r1
 801256e:	d100      	bne.n	8012572 <memmove+0x2a>
 8012570:	bd10      	pop	{r4, pc}
 8012572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801257a:	e7f7      	b.n	801256c <memmove+0x24>

0801257c <strncmp>:
 801257c:	b510      	push	{r4, lr}
 801257e:	b16a      	cbz	r2, 801259c <strncmp+0x20>
 8012580:	3901      	subs	r1, #1
 8012582:	1884      	adds	r4, r0, r2
 8012584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012588:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801258c:	429a      	cmp	r2, r3
 801258e:	d103      	bne.n	8012598 <strncmp+0x1c>
 8012590:	42a0      	cmp	r0, r4
 8012592:	d001      	beq.n	8012598 <strncmp+0x1c>
 8012594:	2a00      	cmp	r2, #0
 8012596:	d1f5      	bne.n	8012584 <strncmp+0x8>
 8012598:	1ad0      	subs	r0, r2, r3
 801259a:	bd10      	pop	{r4, pc}
 801259c:	4610      	mov	r0, r2
 801259e:	e7fc      	b.n	801259a <strncmp+0x1e>

080125a0 <_fstat_r>:
 80125a0:	b538      	push	{r3, r4, r5, lr}
 80125a2:	4d07      	ldr	r5, [pc, #28]	@ (80125c0 <_fstat_r+0x20>)
 80125a4:	2300      	movs	r3, #0
 80125a6:	4604      	mov	r4, r0
 80125a8:	4608      	mov	r0, r1
 80125aa:	4611      	mov	r1, r2
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	f7f1 f979 	bl	80038a4 <_fstat>
 80125b2:	1c43      	adds	r3, r0, #1
 80125b4:	d102      	bne.n	80125bc <_fstat_r+0x1c>
 80125b6:	682b      	ldr	r3, [r5, #0]
 80125b8:	b103      	cbz	r3, 80125bc <_fstat_r+0x1c>
 80125ba:	6023      	str	r3, [r4, #0]
 80125bc:	bd38      	pop	{r3, r4, r5, pc}
 80125be:	bf00      	nop
 80125c0:	20003a74 	.word	0x20003a74

080125c4 <_isatty_r>:
 80125c4:	b538      	push	{r3, r4, r5, lr}
 80125c6:	4d06      	ldr	r5, [pc, #24]	@ (80125e0 <_isatty_r+0x1c>)
 80125c8:	2300      	movs	r3, #0
 80125ca:	4604      	mov	r4, r0
 80125cc:	4608      	mov	r0, r1
 80125ce:	602b      	str	r3, [r5, #0]
 80125d0:	f7f1 f978 	bl	80038c4 <_isatty>
 80125d4:	1c43      	adds	r3, r0, #1
 80125d6:	d102      	bne.n	80125de <_isatty_r+0x1a>
 80125d8:	682b      	ldr	r3, [r5, #0]
 80125da:	b103      	cbz	r3, 80125de <_isatty_r+0x1a>
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	bd38      	pop	{r3, r4, r5, pc}
 80125e0:	20003a74 	.word	0x20003a74

080125e4 <_sbrk_r>:
 80125e4:	b538      	push	{r3, r4, r5, lr}
 80125e6:	4d06      	ldr	r5, [pc, #24]	@ (8012600 <_sbrk_r+0x1c>)
 80125e8:	2300      	movs	r3, #0
 80125ea:	4604      	mov	r4, r0
 80125ec:	4608      	mov	r0, r1
 80125ee:	602b      	str	r3, [r5, #0]
 80125f0:	f7f1 f980 	bl	80038f4 <_sbrk>
 80125f4:	1c43      	adds	r3, r0, #1
 80125f6:	d102      	bne.n	80125fe <_sbrk_r+0x1a>
 80125f8:	682b      	ldr	r3, [r5, #0]
 80125fa:	b103      	cbz	r3, 80125fe <_sbrk_r+0x1a>
 80125fc:	6023      	str	r3, [r4, #0]
 80125fe:	bd38      	pop	{r3, r4, r5, pc}
 8012600:	20003a74 	.word	0x20003a74
 8012604:	00000000 	.word	0x00000000

08012608 <nan>:
 8012608:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012610 <nan+0x8>
 801260c:	4770      	bx	lr
 801260e:	bf00      	nop
 8012610:	00000000 	.word	0x00000000
 8012614:	7ff80000 	.word	0x7ff80000

08012618 <__assert_func>:
 8012618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801261a:	4614      	mov	r4, r2
 801261c:	461a      	mov	r2, r3
 801261e:	4b09      	ldr	r3, [pc, #36]	@ (8012644 <__assert_func+0x2c>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	4605      	mov	r5, r0
 8012624:	68d8      	ldr	r0, [r3, #12]
 8012626:	b14c      	cbz	r4, 801263c <__assert_func+0x24>
 8012628:	4b07      	ldr	r3, [pc, #28]	@ (8012648 <__assert_func+0x30>)
 801262a:	9100      	str	r1, [sp, #0]
 801262c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012630:	4906      	ldr	r1, [pc, #24]	@ (801264c <__assert_func+0x34>)
 8012632:	462b      	mov	r3, r5
 8012634:	f000 fba8 	bl	8012d88 <fiprintf>
 8012638:	f000 fbb8 	bl	8012dac <abort>
 801263c:	4b04      	ldr	r3, [pc, #16]	@ (8012650 <__assert_func+0x38>)
 801263e:	461c      	mov	r4, r3
 8012640:	e7f3      	b.n	801262a <__assert_func+0x12>
 8012642:	bf00      	nop
 8012644:	2000004c 	.word	0x2000004c
 8012648:	080154aa 	.word	0x080154aa
 801264c:	080154b7 	.word	0x080154b7
 8012650:	080154e5 	.word	0x080154e5

08012654 <_calloc_r>:
 8012654:	b570      	push	{r4, r5, r6, lr}
 8012656:	fba1 5402 	umull	r5, r4, r1, r2
 801265a:	b934      	cbnz	r4, 801266a <_calloc_r+0x16>
 801265c:	4629      	mov	r1, r5
 801265e:	f7fe f953 	bl	8010908 <_malloc_r>
 8012662:	4606      	mov	r6, r0
 8012664:	b928      	cbnz	r0, 8012672 <_calloc_r+0x1e>
 8012666:	4630      	mov	r0, r6
 8012668:	bd70      	pop	{r4, r5, r6, pc}
 801266a:	220c      	movs	r2, #12
 801266c:	6002      	str	r2, [r0, #0]
 801266e:	2600      	movs	r6, #0
 8012670:	e7f9      	b.n	8012666 <_calloc_r+0x12>
 8012672:	462a      	mov	r2, r5
 8012674:	4621      	mov	r1, r4
 8012676:	f7fd f9e5 	bl	800fa44 <memset>
 801267a:	e7f4      	b.n	8012666 <_calloc_r+0x12>

0801267c <rshift>:
 801267c:	6903      	ldr	r3, [r0, #16]
 801267e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012682:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012686:	ea4f 1261 	mov.w	r2, r1, asr #5
 801268a:	f100 0414 	add.w	r4, r0, #20
 801268e:	dd45      	ble.n	801271c <rshift+0xa0>
 8012690:	f011 011f 	ands.w	r1, r1, #31
 8012694:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012698:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801269c:	d10c      	bne.n	80126b8 <rshift+0x3c>
 801269e:	f100 0710 	add.w	r7, r0, #16
 80126a2:	4629      	mov	r1, r5
 80126a4:	42b1      	cmp	r1, r6
 80126a6:	d334      	bcc.n	8012712 <rshift+0x96>
 80126a8:	1a9b      	subs	r3, r3, r2
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	1eea      	subs	r2, r5, #3
 80126ae:	4296      	cmp	r6, r2
 80126b0:	bf38      	it	cc
 80126b2:	2300      	movcc	r3, #0
 80126b4:	4423      	add	r3, r4
 80126b6:	e015      	b.n	80126e4 <rshift+0x68>
 80126b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80126bc:	f1c1 0820 	rsb	r8, r1, #32
 80126c0:	40cf      	lsrs	r7, r1
 80126c2:	f105 0e04 	add.w	lr, r5, #4
 80126c6:	46a1      	mov	r9, r4
 80126c8:	4576      	cmp	r6, lr
 80126ca:	46f4      	mov	ip, lr
 80126cc:	d815      	bhi.n	80126fa <rshift+0x7e>
 80126ce:	1a9a      	subs	r2, r3, r2
 80126d0:	0092      	lsls	r2, r2, #2
 80126d2:	3a04      	subs	r2, #4
 80126d4:	3501      	adds	r5, #1
 80126d6:	42ae      	cmp	r6, r5
 80126d8:	bf38      	it	cc
 80126da:	2200      	movcc	r2, #0
 80126dc:	18a3      	adds	r3, r4, r2
 80126de:	50a7      	str	r7, [r4, r2]
 80126e0:	b107      	cbz	r7, 80126e4 <rshift+0x68>
 80126e2:	3304      	adds	r3, #4
 80126e4:	1b1a      	subs	r2, r3, r4
 80126e6:	42a3      	cmp	r3, r4
 80126e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80126ec:	bf08      	it	eq
 80126ee:	2300      	moveq	r3, #0
 80126f0:	6102      	str	r2, [r0, #16]
 80126f2:	bf08      	it	eq
 80126f4:	6143      	streq	r3, [r0, #20]
 80126f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126fa:	f8dc c000 	ldr.w	ip, [ip]
 80126fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8012702:	ea4c 0707 	orr.w	r7, ip, r7
 8012706:	f849 7b04 	str.w	r7, [r9], #4
 801270a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801270e:	40cf      	lsrs	r7, r1
 8012710:	e7da      	b.n	80126c8 <rshift+0x4c>
 8012712:	f851 cb04 	ldr.w	ip, [r1], #4
 8012716:	f847 cf04 	str.w	ip, [r7, #4]!
 801271a:	e7c3      	b.n	80126a4 <rshift+0x28>
 801271c:	4623      	mov	r3, r4
 801271e:	e7e1      	b.n	80126e4 <rshift+0x68>

08012720 <__hexdig_fun>:
 8012720:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012724:	2b09      	cmp	r3, #9
 8012726:	d802      	bhi.n	801272e <__hexdig_fun+0xe>
 8012728:	3820      	subs	r0, #32
 801272a:	b2c0      	uxtb	r0, r0
 801272c:	4770      	bx	lr
 801272e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012732:	2b05      	cmp	r3, #5
 8012734:	d801      	bhi.n	801273a <__hexdig_fun+0x1a>
 8012736:	3847      	subs	r0, #71	@ 0x47
 8012738:	e7f7      	b.n	801272a <__hexdig_fun+0xa>
 801273a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801273e:	2b05      	cmp	r3, #5
 8012740:	d801      	bhi.n	8012746 <__hexdig_fun+0x26>
 8012742:	3827      	subs	r0, #39	@ 0x27
 8012744:	e7f1      	b.n	801272a <__hexdig_fun+0xa>
 8012746:	2000      	movs	r0, #0
 8012748:	4770      	bx	lr
	...

0801274c <__gethex>:
 801274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012750:	b085      	sub	sp, #20
 8012752:	468a      	mov	sl, r1
 8012754:	9302      	str	r3, [sp, #8]
 8012756:	680b      	ldr	r3, [r1, #0]
 8012758:	9001      	str	r0, [sp, #4]
 801275a:	4690      	mov	r8, r2
 801275c:	1c9c      	adds	r4, r3, #2
 801275e:	46a1      	mov	r9, r4
 8012760:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012764:	2830      	cmp	r0, #48	@ 0x30
 8012766:	d0fa      	beq.n	801275e <__gethex+0x12>
 8012768:	eba9 0303 	sub.w	r3, r9, r3
 801276c:	f1a3 0b02 	sub.w	fp, r3, #2
 8012770:	f7ff ffd6 	bl	8012720 <__hexdig_fun>
 8012774:	4605      	mov	r5, r0
 8012776:	2800      	cmp	r0, #0
 8012778:	d168      	bne.n	801284c <__gethex+0x100>
 801277a:	49a0      	ldr	r1, [pc, #640]	@ (80129fc <__gethex+0x2b0>)
 801277c:	2201      	movs	r2, #1
 801277e:	4648      	mov	r0, r9
 8012780:	f7ff fefc 	bl	801257c <strncmp>
 8012784:	4607      	mov	r7, r0
 8012786:	2800      	cmp	r0, #0
 8012788:	d167      	bne.n	801285a <__gethex+0x10e>
 801278a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801278e:	4626      	mov	r6, r4
 8012790:	f7ff ffc6 	bl	8012720 <__hexdig_fun>
 8012794:	2800      	cmp	r0, #0
 8012796:	d062      	beq.n	801285e <__gethex+0x112>
 8012798:	4623      	mov	r3, r4
 801279a:	7818      	ldrb	r0, [r3, #0]
 801279c:	2830      	cmp	r0, #48	@ 0x30
 801279e:	4699      	mov	r9, r3
 80127a0:	f103 0301 	add.w	r3, r3, #1
 80127a4:	d0f9      	beq.n	801279a <__gethex+0x4e>
 80127a6:	f7ff ffbb 	bl	8012720 <__hexdig_fun>
 80127aa:	fab0 f580 	clz	r5, r0
 80127ae:	096d      	lsrs	r5, r5, #5
 80127b0:	f04f 0b01 	mov.w	fp, #1
 80127b4:	464a      	mov	r2, r9
 80127b6:	4616      	mov	r6, r2
 80127b8:	3201      	adds	r2, #1
 80127ba:	7830      	ldrb	r0, [r6, #0]
 80127bc:	f7ff ffb0 	bl	8012720 <__hexdig_fun>
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d1f8      	bne.n	80127b6 <__gethex+0x6a>
 80127c4:	498d      	ldr	r1, [pc, #564]	@ (80129fc <__gethex+0x2b0>)
 80127c6:	2201      	movs	r2, #1
 80127c8:	4630      	mov	r0, r6
 80127ca:	f7ff fed7 	bl	801257c <strncmp>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d13f      	bne.n	8012852 <__gethex+0x106>
 80127d2:	b944      	cbnz	r4, 80127e6 <__gethex+0x9a>
 80127d4:	1c74      	adds	r4, r6, #1
 80127d6:	4622      	mov	r2, r4
 80127d8:	4616      	mov	r6, r2
 80127da:	3201      	adds	r2, #1
 80127dc:	7830      	ldrb	r0, [r6, #0]
 80127de:	f7ff ff9f 	bl	8012720 <__hexdig_fun>
 80127e2:	2800      	cmp	r0, #0
 80127e4:	d1f8      	bne.n	80127d8 <__gethex+0x8c>
 80127e6:	1ba4      	subs	r4, r4, r6
 80127e8:	00a7      	lsls	r7, r4, #2
 80127ea:	7833      	ldrb	r3, [r6, #0]
 80127ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80127f0:	2b50      	cmp	r3, #80	@ 0x50
 80127f2:	d13e      	bne.n	8012872 <__gethex+0x126>
 80127f4:	7873      	ldrb	r3, [r6, #1]
 80127f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80127f8:	d033      	beq.n	8012862 <__gethex+0x116>
 80127fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80127fc:	d034      	beq.n	8012868 <__gethex+0x11c>
 80127fe:	1c71      	adds	r1, r6, #1
 8012800:	2400      	movs	r4, #0
 8012802:	7808      	ldrb	r0, [r1, #0]
 8012804:	f7ff ff8c 	bl	8012720 <__hexdig_fun>
 8012808:	1e43      	subs	r3, r0, #1
 801280a:	b2db      	uxtb	r3, r3
 801280c:	2b18      	cmp	r3, #24
 801280e:	d830      	bhi.n	8012872 <__gethex+0x126>
 8012810:	f1a0 0210 	sub.w	r2, r0, #16
 8012814:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012818:	f7ff ff82 	bl	8012720 <__hexdig_fun>
 801281c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012820:	fa5f fc8c 	uxtb.w	ip, ip
 8012824:	f1bc 0f18 	cmp.w	ip, #24
 8012828:	f04f 030a 	mov.w	r3, #10
 801282c:	d91e      	bls.n	801286c <__gethex+0x120>
 801282e:	b104      	cbz	r4, 8012832 <__gethex+0xe6>
 8012830:	4252      	negs	r2, r2
 8012832:	4417      	add	r7, r2
 8012834:	f8ca 1000 	str.w	r1, [sl]
 8012838:	b1ed      	cbz	r5, 8012876 <__gethex+0x12a>
 801283a:	f1bb 0f00 	cmp.w	fp, #0
 801283e:	bf0c      	ite	eq
 8012840:	2506      	moveq	r5, #6
 8012842:	2500      	movne	r5, #0
 8012844:	4628      	mov	r0, r5
 8012846:	b005      	add	sp, #20
 8012848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801284c:	2500      	movs	r5, #0
 801284e:	462c      	mov	r4, r5
 8012850:	e7b0      	b.n	80127b4 <__gethex+0x68>
 8012852:	2c00      	cmp	r4, #0
 8012854:	d1c7      	bne.n	80127e6 <__gethex+0x9a>
 8012856:	4627      	mov	r7, r4
 8012858:	e7c7      	b.n	80127ea <__gethex+0x9e>
 801285a:	464e      	mov	r6, r9
 801285c:	462f      	mov	r7, r5
 801285e:	2501      	movs	r5, #1
 8012860:	e7c3      	b.n	80127ea <__gethex+0x9e>
 8012862:	2400      	movs	r4, #0
 8012864:	1cb1      	adds	r1, r6, #2
 8012866:	e7cc      	b.n	8012802 <__gethex+0xb6>
 8012868:	2401      	movs	r4, #1
 801286a:	e7fb      	b.n	8012864 <__gethex+0x118>
 801286c:	fb03 0002 	mla	r0, r3, r2, r0
 8012870:	e7ce      	b.n	8012810 <__gethex+0xc4>
 8012872:	4631      	mov	r1, r6
 8012874:	e7de      	b.n	8012834 <__gethex+0xe8>
 8012876:	eba6 0309 	sub.w	r3, r6, r9
 801287a:	3b01      	subs	r3, #1
 801287c:	4629      	mov	r1, r5
 801287e:	2b07      	cmp	r3, #7
 8012880:	dc0a      	bgt.n	8012898 <__gethex+0x14c>
 8012882:	9801      	ldr	r0, [sp, #4]
 8012884:	f7fe f8cc 	bl	8010a20 <_Balloc>
 8012888:	4604      	mov	r4, r0
 801288a:	b940      	cbnz	r0, 801289e <__gethex+0x152>
 801288c:	4b5c      	ldr	r3, [pc, #368]	@ (8012a00 <__gethex+0x2b4>)
 801288e:	4602      	mov	r2, r0
 8012890:	21e4      	movs	r1, #228	@ 0xe4
 8012892:	485c      	ldr	r0, [pc, #368]	@ (8012a04 <__gethex+0x2b8>)
 8012894:	f7ff fec0 	bl	8012618 <__assert_func>
 8012898:	3101      	adds	r1, #1
 801289a:	105b      	asrs	r3, r3, #1
 801289c:	e7ef      	b.n	801287e <__gethex+0x132>
 801289e:	f100 0a14 	add.w	sl, r0, #20
 80128a2:	2300      	movs	r3, #0
 80128a4:	4655      	mov	r5, sl
 80128a6:	469b      	mov	fp, r3
 80128a8:	45b1      	cmp	r9, r6
 80128aa:	d337      	bcc.n	801291c <__gethex+0x1d0>
 80128ac:	f845 bb04 	str.w	fp, [r5], #4
 80128b0:	eba5 050a 	sub.w	r5, r5, sl
 80128b4:	10ad      	asrs	r5, r5, #2
 80128b6:	6125      	str	r5, [r4, #16]
 80128b8:	4658      	mov	r0, fp
 80128ba:	f7fe f9a3 	bl	8010c04 <__hi0bits>
 80128be:	016d      	lsls	r5, r5, #5
 80128c0:	f8d8 6000 	ldr.w	r6, [r8]
 80128c4:	1a2d      	subs	r5, r5, r0
 80128c6:	42b5      	cmp	r5, r6
 80128c8:	dd54      	ble.n	8012974 <__gethex+0x228>
 80128ca:	1bad      	subs	r5, r5, r6
 80128cc:	4629      	mov	r1, r5
 80128ce:	4620      	mov	r0, r4
 80128d0:	f7fe fd2f 	bl	8011332 <__any_on>
 80128d4:	4681      	mov	r9, r0
 80128d6:	b178      	cbz	r0, 80128f8 <__gethex+0x1ac>
 80128d8:	1e6b      	subs	r3, r5, #1
 80128da:	1159      	asrs	r1, r3, #5
 80128dc:	f003 021f 	and.w	r2, r3, #31
 80128e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80128e4:	f04f 0901 	mov.w	r9, #1
 80128e8:	fa09 f202 	lsl.w	r2, r9, r2
 80128ec:	420a      	tst	r2, r1
 80128ee:	d003      	beq.n	80128f8 <__gethex+0x1ac>
 80128f0:	454b      	cmp	r3, r9
 80128f2:	dc36      	bgt.n	8012962 <__gethex+0x216>
 80128f4:	f04f 0902 	mov.w	r9, #2
 80128f8:	4629      	mov	r1, r5
 80128fa:	4620      	mov	r0, r4
 80128fc:	f7ff febe 	bl	801267c <rshift>
 8012900:	442f      	add	r7, r5
 8012902:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012906:	42bb      	cmp	r3, r7
 8012908:	da42      	bge.n	8012990 <__gethex+0x244>
 801290a:	9801      	ldr	r0, [sp, #4]
 801290c:	4621      	mov	r1, r4
 801290e:	f7fe f8c7 	bl	8010aa0 <_Bfree>
 8012912:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012914:	2300      	movs	r3, #0
 8012916:	6013      	str	r3, [r2, #0]
 8012918:	25a3      	movs	r5, #163	@ 0xa3
 801291a:	e793      	b.n	8012844 <__gethex+0xf8>
 801291c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012920:	2a2e      	cmp	r2, #46	@ 0x2e
 8012922:	d012      	beq.n	801294a <__gethex+0x1fe>
 8012924:	2b20      	cmp	r3, #32
 8012926:	d104      	bne.n	8012932 <__gethex+0x1e6>
 8012928:	f845 bb04 	str.w	fp, [r5], #4
 801292c:	f04f 0b00 	mov.w	fp, #0
 8012930:	465b      	mov	r3, fp
 8012932:	7830      	ldrb	r0, [r6, #0]
 8012934:	9303      	str	r3, [sp, #12]
 8012936:	f7ff fef3 	bl	8012720 <__hexdig_fun>
 801293a:	9b03      	ldr	r3, [sp, #12]
 801293c:	f000 000f 	and.w	r0, r0, #15
 8012940:	4098      	lsls	r0, r3
 8012942:	ea4b 0b00 	orr.w	fp, fp, r0
 8012946:	3304      	adds	r3, #4
 8012948:	e7ae      	b.n	80128a8 <__gethex+0x15c>
 801294a:	45b1      	cmp	r9, r6
 801294c:	d8ea      	bhi.n	8012924 <__gethex+0x1d8>
 801294e:	492b      	ldr	r1, [pc, #172]	@ (80129fc <__gethex+0x2b0>)
 8012950:	9303      	str	r3, [sp, #12]
 8012952:	2201      	movs	r2, #1
 8012954:	4630      	mov	r0, r6
 8012956:	f7ff fe11 	bl	801257c <strncmp>
 801295a:	9b03      	ldr	r3, [sp, #12]
 801295c:	2800      	cmp	r0, #0
 801295e:	d1e1      	bne.n	8012924 <__gethex+0x1d8>
 8012960:	e7a2      	b.n	80128a8 <__gethex+0x15c>
 8012962:	1ea9      	subs	r1, r5, #2
 8012964:	4620      	mov	r0, r4
 8012966:	f7fe fce4 	bl	8011332 <__any_on>
 801296a:	2800      	cmp	r0, #0
 801296c:	d0c2      	beq.n	80128f4 <__gethex+0x1a8>
 801296e:	f04f 0903 	mov.w	r9, #3
 8012972:	e7c1      	b.n	80128f8 <__gethex+0x1ac>
 8012974:	da09      	bge.n	801298a <__gethex+0x23e>
 8012976:	1b75      	subs	r5, r6, r5
 8012978:	4621      	mov	r1, r4
 801297a:	9801      	ldr	r0, [sp, #4]
 801297c:	462a      	mov	r2, r5
 801297e:	f7fe fa9f 	bl	8010ec0 <__lshift>
 8012982:	1b7f      	subs	r7, r7, r5
 8012984:	4604      	mov	r4, r0
 8012986:	f100 0a14 	add.w	sl, r0, #20
 801298a:	f04f 0900 	mov.w	r9, #0
 801298e:	e7b8      	b.n	8012902 <__gethex+0x1b6>
 8012990:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012994:	42bd      	cmp	r5, r7
 8012996:	dd6f      	ble.n	8012a78 <__gethex+0x32c>
 8012998:	1bed      	subs	r5, r5, r7
 801299a:	42ae      	cmp	r6, r5
 801299c:	dc34      	bgt.n	8012a08 <__gethex+0x2bc>
 801299e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80129a2:	2b02      	cmp	r3, #2
 80129a4:	d022      	beq.n	80129ec <__gethex+0x2a0>
 80129a6:	2b03      	cmp	r3, #3
 80129a8:	d024      	beq.n	80129f4 <__gethex+0x2a8>
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	d115      	bne.n	80129da <__gethex+0x28e>
 80129ae:	42ae      	cmp	r6, r5
 80129b0:	d113      	bne.n	80129da <__gethex+0x28e>
 80129b2:	2e01      	cmp	r6, #1
 80129b4:	d10b      	bne.n	80129ce <__gethex+0x282>
 80129b6:	9a02      	ldr	r2, [sp, #8]
 80129b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80129bc:	6013      	str	r3, [r2, #0]
 80129be:	2301      	movs	r3, #1
 80129c0:	6123      	str	r3, [r4, #16]
 80129c2:	f8ca 3000 	str.w	r3, [sl]
 80129c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80129c8:	2562      	movs	r5, #98	@ 0x62
 80129ca:	601c      	str	r4, [r3, #0]
 80129cc:	e73a      	b.n	8012844 <__gethex+0xf8>
 80129ce:	1e71      	subs	r1, r6, #1
 80129d0:	4620      	mov	r0, r4
 80129d2:	f7fe fcae 	bl	8011332 <__any_on>
 80129d6:	2800      	cmp	r0, #0
 80129d8:	d1ed      	bne.n	80129b6 <__gethex+0x26a>
 80129da:	9801      	ldr	r0, [sp, #4]
 80129dc:	4621      	mov	r1, r4
 80129de:	f7fe f85f 	bl	8010aa0 <_Bfree>
 80129e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129e4:	2300      	movs	r3, #0
 80129e6:	6013      	str	r3, [r2, #0]
 80129e8:	2550      	movs	r5, #80	@ 0x50
 80129ea:	e72b      	b.n	8012844 <__gethex+0xf8>
 80129ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1f3      	bne.n	80129da <__gethex+0x28e>
 80129f2:	e7e0      	b.n	80129b6 <__gethex+0x26a>
 80129f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d1dd      	bne.n	80129b6 <__gethex+0x26a>
 80129fa:	e7ee      	b.n	80129da <__gethex+0x28e>
 80129fc:	0801548f 	.word	0x0801548f
 8012a00:	08015425 	.word	0x08015425
 8012a04:	080154e6 	.word	0x080154e6
 8012a08:	1e6f      	subs	r7, r5, #1
 8012a0a:	f1b9 0f00 	cmp.w	r9, #0
 8012a0e:	d130      	bne.n	8012a72 <__gethex+0x326>
 8012a10:	b127      	cbz	r7, 8012a1c <__gethex+0x2d0>
 8012a12:	4639      	mov	r1, r7
 8012a14:	4620      	mov	r0, r4
 8012a16:	f7fe fc8c 	bl	8011332 <__any_on>
 8012a1a:	4681      	mov	r9, r0
 8012a1c:	117a      	asrs	r2, r7, #5
 8012a1e:	2301      	movs	r3, #1
 8012a20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012a24:	f007 071f 	and.w	r7, r7, #31
 8012a28:	40bb      	lsls	r3, r7
 8012a2a:	4213      	tst	r3, r2
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4620      	mov	r0, r4
 8012a30:	bf18      	it	ne
 8012a32:	f049 0902 	orrne.w	r9, r9, #2
 8012a36:	f7ff fe21 	bl	801267c <rshift>
 8012a3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012a3e:	1b76      	subs	r6, r6, r5
 8012a40:	2502      	movs	r5, #2
 8012a42:	f1b9 0f00 	cmp.w	r9, #0
 8012a46:	d047      	beq.n	8012ad8 <__gethex+0x38c>
 8012a48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a4c:	2b02      	cmp	r3, #2
 8012a4e:	d015      	beq.n	8012a7c <__gethex+0x330>
 8012a50:	2b03      	cmp	r3, #3
 8012a52:	d017      	beq.n	8012a84 <__gethex+0x338>
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d109      	bne.n	8012a6c <__gethex+0x320>
 8012a58:	f019 0f02 	tst.w	r9, #2
 8012a5c:	d006      	beq.n	8012a6c <__gethex+0x320>
 8012a5e:	f8da 3000 	ldr.w	r3, [sl]
 8012a62:	ea49 0903 	orr.w	r9, r9, r3
 8012a66:	f019 0f01 	tst.w	r9, #1
 8012a6a:	d10e      	bne.n	8012a8a <__gethex+0x33e>
 8012a6c:	f045 0510 	orr.w	r5, r5, #16
 8012a70:	e032      	b.n	8012ad8 <__gethex+0x38c>
 8012a72:	f04f 0901 	mov.w	r9, #1
 8012a76:	e7d1      	b.n	8012a1c <__gethex+0x2d0>
 8012a78:	2501      	movs	r5, #1
 8012a7a:	e7e2      	b.n	8012a42 <__gethex+0x2f6>
 8012a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a7e:	f1c3 0301 	rsb	r3, r3, #1
 8012a82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d0f0      	beq.n	8012a6c <__gethex+0x320>
 8012a8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012a8e:	f104 0314 	add.w	r3, r4, #20
 8012a92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012a96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012a9a:	f04f 0c00 	mov.w	ip, #0
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012aa4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012aa8:	d01b      	beq.n	8012ae2 <__gethex+0x396>
 8012aaa:	3201      	adds	r2, #1
 8012aac:	6002      	str	r2, [r0, #0]
 8012aae:	2d02      	cmp	r5, #2
 8012ab0:	f104 0314 	add.w	r3, r4, #20
 8012ab4:	d13c      	bne.n	8012b30 <__gethex+0x3e4>
 8012ab6:	f8d8 2000 	ldr.w	r2, [r8]
 8012aba:	3a01      	subs	r2, #1
 8012abc:	42b2      	cmp	r2, r6
 8012abe:	d109      	bne.n	8012ad4 <__gethex+0x388>
 8012ac0:	1171      	asrs	r1, r6, #5
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ac8:	f006 061f 	and.w	r6, r6, #31
 8012acc:	fa02 f606 	lsl.w	r6, r2, r6
 8012ad0:	421e      	tst	r6, r3
 8012ad2:	d13a      	bne.n	8012b4a <__gethex+0x3fe>
 8012ad4:	f045 0520 	orr.w	r5, r5, #32
 8012ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ada:	601c      	str	r4, [r3, #0]
 8012adc:	9b02      	ldr	r3, [sp, #8]
 8012ade:	601f      	str	r7, [r3, #0]
 8012ae0:	e6b0      	b.n	8012844 <__gethex+0xf8>
 8012ae2:	4299      	cmp	r1, r3
 8012ae4:	f843 cc04 	str.w	ip, [r3, #-4]
 8012ae8:	d8d9      	bhi.n	8012a9e <__gethex+0x352>
 8012aea:	68a3      	ldr	r3, [r4, #8]
 8012aec:	459b      	cmp	fp, r3
 8012aee:	db17      	blt.n	8012b20 <__gethex+0x3d4>
 8012af0:	6861      	ldr	r1, [r4, #4]
 8012af2:	9801      	ldr	r0, [sp, #4]
 8012af4:	3101      	adds	r1, #1
 8012af6:	f7fd ff93 	bl	8010a20 <_Balloc>
 8012afa:	4681      	mov	r9, r0
 8012afc:	b918      	cbnz	r0, 8012b06 <__gethex+0x3ba>
 8012afe:	4b1a      	ldr	r3, [pc, #104]	@ (8012b68 <__gethex+0x41c>)
 8012b00:	4602      	mov	r2, r0
 8012b02:	2184      	movs	r1, #132	@ 0x84
 8012b04:	e6c5      	b.n	8012892 <__gethex+0x146>
 8012b06:	6922      	ldr	r2, [r4, #16]
 8012b08:	3202      	adds	r2, #2
 8012b0a:	f104 010c 	add.w	r1, r4, #12
 8012b0e:	0092      	lsls	r2, r2, #2
 8012b10:	300c      	adds	r0, #12
 8012b12:	f7fd f816 	bl	800fb42 <memcpy>
 8012b16:	4621      	mov	r1, r4
 8012b18:	9801      	ldr	r0, [sp, #4]
 8012b1a:	f7fd ffc1 	bl	8010aa0 <_Bfree>
 8012b1e:	464c      	mov	r4, r9
 8012b20:	6923      	ldr	r3, [r4, #16]
 8012b22:	1c5a      	adds	r2, r3, #1
 8012b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b28:	6122      	str	r2, [r4, #16]
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	615a      	str	r2, [r3, #20]
 8012b2e:	e7be      	b.n	8012aae <__gethex+0x362>
 8012b30:	6922      	ldr	r2, [r4, #16]
 8012b32:	455a      	cmp	r2, fp
 8012b34:	dd0b      	ble.n	8012b4e <__gethex+0x402>
 8012b36:	2101      	movs	r1, #1
 8012b38:	4620      	mov	r0, r4
 8012b3a:	f7ff fd9f 	bl	801267c <rshift>
 8012b3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b42:	3701      	adds	r7, #1
 8012b44:	42bb      	cmp	r3, r7
 8012b46:	f6ff aee0 	blt.w	801290a <__gethex+0x1be>
 8012b4a:	2501      	movs	r5, #1
 8012b4c:	e7c2      	b.n	8012ad4 <__gethex+0x388>
 8012b4e:	f016 061f 	ands.w	r6, r6, #31
 8012b52:	d0fa      	beq.n	8012b4a <__gethex+0x3fe>
 8012b54:	4453      	add	r3, sl
 8012b56:	f1c6 0620 	rsb	r6, r6, #32
 8012b5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012b5e:	f7fe f851 	bl	8010c04 <__hi0bits>
 8012b62:	42b0      	cmp	r0, r6
 8012b64:	dbe7      	blt.n	8012b36 <__gethex+0x3ea>
 8012b66:	e7f0      	b.n	8012b4a <__gethex+0x3fe>
 8012b68:	08015425 	.word	0x08015425

08012b6c <L_shift>:
 8012b6c:	f1c2 0208 	rsb	r2, r2, #8
 8012b70:	0092      	lsls	r2, r2, #2
 8012b72:	b570      	push	{r4, r5, r6, lr}
 8012b74:	f1c2 0620 	rsb	r6, r2, #32
 8012b78:	6843      	ldr	r3, [r0, #4]
 8012b7a:	6804      	ldr	r4, [r0, #0]
 8012b7c:	fa03 f506 	lsl.w	r5, r3, r6
 8012b80:	432c      	orrs	r4, r5
 8012b82:	40d3      	lsrs	r3, r2
 8012b84:	6004      	str	r4, [r0, #0]
 8012b86:	f840 3f04 	str.w	r3, [r0, #4]!
 8012b8a:	4288      	cmp	r0, r1
 8012b8c:	d3f4      	bcc.n	8012b78 <L_shift+0xc>
 8012b8e:	bd70      	pop	{r4, r5, r6, pc}

08012b90 <__match>:
 8012b90:	b530      	push	{r4, r5, lr}
 8012b92:	6803      	ldr	r3, [r0, #0]
 8012b94:	3301      	adds	r3, #1
 8012b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b9a:	b914      	cbnz	r4, 8012ba2 <__match+0x12>
 8012b9c:	6003      	str	r3, [r0, #0]
 8012b9e:	2001      	movs	r0, #1
 8012ba0:	bd30      	pop	{r4, r5, pc}
 8012ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ba6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012baa:	2d19      	cmp	r5, #25
 8012bac:	bf98      	it	ls
 8012bae:	3220      	addls	r2, #32
 8012bb0:	42a2      	cmp	r2, r4
 8012bb2:	d0f0      	beq.n	8012b96 <__match+0x6>
 8012bb4:	2000      	movs	r0, #0
 8012bb6:	e7f3      	b.n	8012ba0 <__match+0x10>

08012bb8 <__hexnan>:
 8012bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bbc:	680b      	ldr	r3, [r1, #0]
 8012bbe:	6801      	ldr	r1, [r0, #0]
 8012bc0:	115e      	asrs	r6, r3, #5
 8012bc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012bc6:	f013 031f 	ands.w	r3, r3, #31
 8012bca:	b087      	sub	sp, #28
 8012bcc:	bf18      	it	ne
 8012bce:	3604      	addne	r6, #4
 8012bd0:	2500      	movs	r5, #0
 8012bd2:	1f37      	subs	r7, r6, #4
 8012bd4:	4682      	mov	sl, r0
 8012bd6:	4690      	mov	r8, r2
 8012bd8:	9301      	str	r3, [sp, #4]
 8012bda:	f846 5c04 	str.w	r5, [r6, #-4]
 8012bde:	46b9      	mov	r9, r7
 8012be0:	463c      	mov	r4, r7
 8012be2:	9502      	str	r5, [sp, #8]
 8012be4:	46ab      	mov	fp, r5
 8012be6:	784a      	ldrb	r2, [r1, #1]
 8012be8:	1c4b      	adds	r3, r1, #1
 8012bea:	9303      	str	r3, [sp, #12]
 8012bec:	b342      	cbz	r2, 8012c40 <__hexnan+0x88>
 8012bee:	4610      	mov	r0, r2
 8012bf0:	9105      	str	r1, [sp, #20]
 8012bf2:	9204      	str	r2, [sp, #16]
 8012bf4:	f7ff fd94 	bl	8012720 <__hexdig_fun>
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d151      	bne.n	8012ca0 <__hexnan+0xe8>
 8012bfc:	9a04      	ldr	r2, [sp, #16]
 8012bfe:	9905      	ldr	r1, [sp, #20]
 8012c00:	2a20      	cmp	r2, #32
 8012c02:	d818      	bhi.n	8012c36 <__hexnan+0x7e>
 8012c04:	9b02      	ldr	r3, [sp, #8]
 8012c06:	459b      	cmp	fp, r3
 8012c08:	dd13      	ble.n	8012c32 <__hexnan+0x7a>
 8012c0a:	454c      	cmp	r4, r9
 8012c0c:	d206      	bcs.n	8012c1c <__hexnan+0x64>
 8012c0e:	2d07      	cmp	r5, #7
 8012c10:	dc04      	bgt.n	8012c1c <__hexnan+0x64>
 8012c12:	462a      	mov	r2, r5
 8012c14:	4649      	mov	r1, r9
 8012c16:	4620      	mov	r0, r4
 8012c18:	f7ff ffa8 	bl	8012b6c <L_shift>
 8012c1c:	4544      	cmp	r4, r8
 8012c1e:	d952      	bls.n	8012cc6 <__hexnan+0x10e>
 8012c20:	2300      	movs	r3, #0
 8012c22:	f1a4 0904 	sub.w	r9, r4, #4
 8012c26:	f844 3c04 	str.w	r3, [r4, #-4]
 8012c2a:	f8cd b008 	str.w	fp, [sp, #8]
 8012c2e:	464c      	mov	r4, r9
 8012c30:	461d      	mov	r5, r3
 8012c32:	9903      	ldr	r1, [sp, #12]
 8012c34:	e7d7      	b.n	8012be6 <__hexnan+0x2e>
 8012c36:	2a29      	cmp	r2, #41	@ 0x29
 8012c38:	d157      	bne.n	8012cea <__hexnan+0x132>
 8012c3a:	3102      	adds	r1, #2
 8012c3c:	f8ca 1000 	str.w	r1, [sl]
 8012c40:	f1bb 0f00 	cmp.w	fp, #0
 8012c44:	d051      	beq.n	8012cea <__hexnan+0x132>
 8012c46:	454c      	cmp	r4, r9
 8012c48:	d206      	bcs.n	8012c58 <__hexnan+0xa0>
 8012c4a:	2d07      	cmp	r5, #7
 8012c4c:	dc04      	bgt.n	8012c58 <__hexnan+0xa0>
 8012c4e:	462a      	mov	r2, r5
 8012c50:	4649      	mov	r1, r9
 8012c52:	4620      	mov	r0, r4
 8012c54:	f7ff ff8a 	bl	8012b6c <L_shift>
 8012c58:	4544      	cmp	r4, r8
 8012c5a:	d936      	bls.n	8012cca <__hexnan+0x112>
 8012c5c:	f1a8 0204 	sub.w	r2, r8, #4
 8012c60:	4623      	mov	r3, r4
 8012c62:	f853 1b04 	ldr.w	r1, [r3], #4
 8012c66:	f842 1f04 	str.w	r1, [r2, #4]!
 8012c6a:	429f      	cmp	r7, r3
 8012c6c:	d2f9      	bcs.n	8012c62 <__hexnan+0xaa>
 8012c6e:	1b3b      	subs	r3, r7, r4
 8012c70:	f023 0303 	bic.w	r3, r3, #3
 8012c74:	3304      	adds	r3, #4
 8012c76:	3401      	adds	r4, #1
 8012c78:	3e03      	subs	r6, #3
 8012c7a:	42b4      	cmp	r4, r6
 8012c7c:	bf88      	it	hi
 8012c7e:	2304      	movhi	r3, #4
 8012c80:	4443      	add	r3, r8
 8012c82:	2200      	movs	r2, #0
 8012c84:	f843 2b04 	str.w	r2, [r3], #4
 8012c88:	429f      	cmp	r7, r3
 8012c8a:	d2fb      	bcs.n	8012c84 <__hexnan+0xcc>
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	b91b      	cbnz	r3, 8012c98 <__hexnan+0xe0>
 8012c90:	4547      	cmp	r7, r8
 8012c92:	d128      	bne.n	8012ce6 <__hexnan+0x12e>
 8012c94:	2301      	movs	r3, #1
 8012c96:	603b      	str	r3, [r7, #0]
 8012c98:	2005      	movs	r0, #5
 8012c9a:	b007      	add	sp, #28
 8012c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca0:	3501      	adds	r5, #1
 8012ca2:	2d08      	cmp	r5, #8
 8012ca4:	f10b 0b01 	add.w	fp, fp, #1
 8012ca8:	dd06      	ble.n	8012cb8 <__hexnan+0x100>
 8012caa:	4544      	cmp	r4, r8
 8012cac:	d9c1      	bls.n	8012c32 <__hexnan+0x7a>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8012cb4:	2501      	movs	r5, #1
 8012cb6:	3c04      	subs	r4, #4
 8012cb8:	6822      	ldr	r2, [r4, #0]
 8012cba:	f000 000f 	and.w	r0, r0, #15
 8012cbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012cc2:	6020      	str	r0, [r4, #0]
 8012cc4:	e7b5      	b.n	8012c32 <__hexnan+0x7a>
 8012cc6:	2508      	movs	r5, #8
 8012cc8:	e7b3      	b.n	8012c32 <__hexnan+0x7a>
 8012cca:	9b01      	ldr	r3, [sp, #4]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d0dd      	beq.n	8012c8c <__hexnan+0xd4>
 8012cd0:	f1c3 0320 	rsb	r3, r3, #32
 8012cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8012cd8:	40da      	lsrs	r2, r3
 8012cda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012cde:	4013      	ands	r3, r2
 8012ce0:	f846 3c04 	str.w	r3, [r6, #-4]
 8012ce4:	e7d2      	b.n	8012c8c <__hexnan+0xd4>
 8012ce6:	3f04      	subs	r7, #4
 8012ce8:	e7d0      	b.n	8012c8c <__hexnan+0xd4>
 8012cea:	2004      	movs	r0, #4
 8012cec:	e7d5      	b.n	8012c9a <__hexnan+0xe2>

08012cee <__ascii_mbtowc>:
 8012cee:	b082      	sub	sp, #8
 8012cf0:	b901      	cbnz	r1, 8012cf4 <__ascii_mbtowc+0x6>
 8012cf2:	a901      	add	r1, sp, #4
 8012cf4:	b142      	cbz	r2, 8012d08 <__ascii_mbtowc+0x1a>
 8012cf6:	b14b      	cbz	r3, 8012d0c <__ascii_mbtowc+0x1e>
 8012cf8:	7813      	ldrb	r3, [r2, #0]
 8012cfa:	600b      	str	r3, [r1, #0]
 8012cfc:	7812      	ldrb	r2, [r2, #0]
 8012cfe:	1e10      	subs	r0, r2, #0
 8012d00:	bf18      	it	ne
 8012d02:	2001      	movne	r0, #1
 8012d04:	b002      	add	sp, #8
 8012d06:	4770      	bx	lr
 8012d08:	4610      	mov	r0, r2
 8012d0a:	e7fb      	b.n	8012d04 <__ascii_mbtowc+0x16>
 8012d0c:	f06f 0001 	mvn.w	r0, #1
 8012d10:	e7f8      	b.n	8012d04 <__ascii_mbtowc+0x16>

08012d12 <_realloc_r>:
 8012d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d16:	4607      	mov	r7, r0
 8012d18:	4614      	mov	r4, r2
 8012d1a:	460d      	mov	r5, r1
 8012d1c:	b921      	cbnz	r1, 8012d28 <_realloc_r+0x16>
 8012d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d22:	4611      	mov	r1, r2
 8012d24:	f7fd bdf0 	b.w	8010908 <_malloc_r>
 8012d28:	b92a      	cbnz	r2, 8012d36 <_realloc_r+0x24>
 8012d2a:	f7fd fd79 	bl	8010820 <_free_r>
 8012d2e:	4625      	mov	r5, r4
 8012d30:	4628      	mov	r0, r5
 8012d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d36:	f000 f840 	bl	8012dba <_malloc_usable_size_r>
 8012d3a:	4284      	cmp	r4, r0
 8012d3c:	4606      	mov	r6, r0
 8012d3e:	d802      	bhi.n	8012d46 <_realloc_r+0x34>
 8012d40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012d44:	d8f4      	bhi.n	8012d30 <_realloc_r+0x1e>
 8012d46:	4621      	mov	r1, r4
 8012d48:	4638      	mov	r0, r7
 8012d4a:	f7fd fddd 	bl	8010908 <_malloc_r>
 8012d4e:	4680      	mov	r8, r0
 8012d50:	b908      	cbnz	r0, 8012d56 <_realloc_r+0x44>
 8012d52:	4645      	mov	r5, r8
 8012d54:	e7ec      	b.n	8012d30 <_realloc_r+0x1e>
 8012d56:	42b4      	cmp	r4, r6
 8012d58:	4622      	mov	r2, r4
 8012d5a:	4629      	mov	r1, r5
 8012d5c:	bf28      	it	cs
 8012d5e:	4632      	movcs	r2, r6
 8012d60:	f7fc feef 	bl	800fb42 <memcpy>
 8012d64:	4629      	mov	r1, r5
 8012d66:	4638      	mov	r0, r7
 8012d68:	f7fd fd5a 	bl	8010820 <_free_r>
 8012d6c:	e7f1      	b.n	8012d52 <_realloc_r+0x40>

08012d6e <__ascii_wctomb>:
 8012d6e:	4603      	mov	r3, r0
 8012d70:	4608      	mov	r0, r1
 8012d72:	b141      	cbz	r1, 8012d86 <__ascii_wctomb+0x18>
 8012d74:	2aff      	cmp	r2, #255	@ 0xff
 8012d76:	d904      	bls.n	8012d82 <__ascii_wctomb+0x14>
 8012d78:	228a      	movs	r2, #138	@ 0x8a
 8012d7a:	601a      	str	r2, [r3, #0]
 8012d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d80:	4770      	bx	lr
 8012d82:	700a      	strb	r2, [r1, #0]
 8012d84:	2001      	movs	r0, #1
 8012d86:	4770      	bx	lr

08012d88 <fiprintf>:
 8012d88:	b40e      	push	{r1, r2, r3}
 8012d8a:	b503      	push	{r0, r1, lr}
 8012d8c:	4601      	mov	r1, r0
 8012d8e:	ab03      	add	r3, sp, #12
 8012d90:	4805      	ldr	r0, [pc, #20]	@ (8012da8 <fiprintf+0x20>)
 8012d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d96:	6800      	ldr	r0, [r0, #0]
 8012d98:	9301      	str	r3, [sp, #4]
 8012d9a:	f000 f83f 	bl	8012e1c <_vfiprintf_r>
 8012d9e:	b002      	add	sp, #8
 8012da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012da4:	b003      	add	sp, #12
 8012da6:	4770      	bx	lr
 8012da8:	2000004c 	.word	0x2000004c

08012dac <abort>:
 8012dac:	b508      	push	{r3, lr}
 8012dae:	2006      	movs	r0, #6
 8012db0:	f000 f974 	bl	801309c <raise>
 8012db4:	2001      	movs	r0, #1
 8012db6:	f7f0 fd25 	bl	8003804 <_exit>

08012dba <_malloc_usable_size_r>:
 8012dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dbe:	1f18      	subs	r0, r3, #4
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	bfbc      	itt	lt
 8012dc4:	580b      	ldrlt	r3, [r1, r0]
 8012dc6:	18c0      	addlt	r0, r0, r3
 8012dc8:	4770      	bx	lr

08012dca <__sfputc_r>:
 8012dca:	6893      	ldr	r3, [r2, #8]
 8012dcc:	3b01      	subs	r3, #1
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	b410      	push	{r4}
 8012dd2:	6093      	str	r3, [r2, #8]
 8012dd4:	da08      	bge.n	8012de8 <__sfputc_r+0x1e>
 8012dd6:	6994      	ldr	r4, [r2, #24]
 8012dd8:	42a3      	cmp	r3, r4
 8012dda:	db01      	blt.n	8012de0 <__sfputc_r+0x16>
 8012ddc:	290a      	cmp	r1, #10
 8012dde:	d103      	bne.n	8012de8 <__sfputc_r+0x1e>
 8012de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012de4:	f7fc bd99 	b.w	800f91a <__swbuf_r>
 8012de8:	6813      	ldr	r3, [r2, #0]
 8012dea:	1c58      	adds	r0, r3, #1
 8012dec:	6010      	str	r0, [r2, #0]
 8012dee:	7019      	strb	r1, [r3, #0]
 8012df0:	4608      	mov	r0, r1
 8012df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012df6:	4770      	bx	lr

08012df8 <__sfputs_r>:
 8012df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	460f      	mov	r7, r1
 8012dfe:	4614      	mov	r4, r2
 8012e00:	18d5      	adds	r5, r2, r3
 8012e02:	42ac      	cmp	r4, r5
 8012e04:	d101      	bne.n	8012e0a <__sfputs_r+0x12>
 8012e06:	2000      	movs	r0, #0
 8012e08:	e007      	b.n	8012e1a <__sfputs_r+0x22>
 8012e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e0e:	463a      	mov	r2, r7
 8012e10:	4630      	mov	r0, r6
 8012e12:	f7ff ffda 	bl	8012dca <__sfputc_r>
 8012e16:	1c43      	adds	r3, r0, #1
 8012e18:	d1f3      	bne.n	8012e02 <__sfputs_r+0xa>
 8012e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012e1c <_vfiprintf_r>:
 8012e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e20:	460d      	mov	r5, r1
 8012e22:	b09d      	sub	sp, #116	@ 0x74
 8012e24:	4614      	mov	r4, r2
 8012e26:	4698      	mov	r8, r3
 8012e28:	4606      	mov	r6, r0
 8012e2a:	b118      	cbz	r0, 8012e34 <_vfiprintf_r+0x18>
 8012e2c:	6a03      	ldr	r3, [r0, #32]
 8012e2e:	b90b      	cbnz	r3, 8012e34 <_vfiprintf_r+0x18>
 8012e30:	f7fc fc44 	bl	800f6bc <__sinit>
 8012e34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e36:	07d9      	lsls	r1, r3, #31
 8012e38:	d405      	bmi.n	8012e46 <_vfiprintf_r+0x2a>
 8012e3a:	89ab      	ldrh	r3, [r5, #12]
 8012e3c:	059a      	lsls	r2, r3, #22
 8012e3e:	d402      	bmi.n	8012e46 <_vfiprintf_r+0x2a>
 8012e40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e42:	f7fc fe7c 	bl	800fb3e <__retarget_lock_acquire_recursive>
 8012e46:	89ab      	ldrh	r3, [r5, #12]
 8012e48:	071b      	lsls	r3, r3, #28
 8012e4a:	d501      	bpl.n	8012e50 <_vfiprintf_r+0x34>
 8012e4c:	692b      	ldr	r3, [r5, #16]
 8012e4e:	b99b      	cbnz	r3, 8012e78 <_vfiprintf_r+0x5c>
 8012e50:	4629      	mov	r1, r5
 8012e52:	4630      	mov	r0, r6
 8012e54:	f7fc fda0 	bl	800f998 <__swsetup_r>
 8012e58:	b170      	cbz	r0, 8012e78 <_vfiprintf_r+0x5c>
 8012e5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e5c:	07dc      	lsls	r4, r3, #31
 8012e5e:	d504      	bpl.n	8012e6a <_vfiprintf_r+0x4e>
 8012e60:	f04f 30ff 	mov.w	r0, #4294967295
 8012e64:	b01d      	add	sp, #116	@ 0x74
 8012e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6a:	89ab      	ldrh	r3, [r5, #12]
 8012e6c:	0598      	lsls	r0, r3, #22
 8012e6e:	d4f7      	bmi.n	8012e60 <_vfiprintf_r+0x44>
 8012e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e72:	f7fc fe65 	bl	800fb40 <__retarget_lock_release_recursive>
 8012e76:	e7f3      	b.n	8012e60 <_vfiprintf_r+0x44>
 8012e78:	2300      	movs	r3, #0
 8012e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e7c:	2320      	movs	r3, #32
 8012e7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e86:	2330      	movs	r3, #48	@ 0x30
 8012e88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013038 <_vfiprintf_r+0x21c>
 8012e8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e90:	f04f 0901 	mov.w	r9, #1
 8012e94:	4623      	mov	r3, r4
 8012e96:	469a      	mov	sl, r3
 8012e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e9c:	b10a      	cbz	r2, 8012ea2 <_vfiprintf_r+0x86>
 8012e9e:	2a25      	cmp	r2, #37	@ 0x25
 8012ea0:	d1f9      	bne.n	8012e96 <_vfiprintf_r+0x7a>
 8012ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8012ea6:	d00b      	beq.n	8012ec0 <_vfiprintf_r+0xa4>
 8012ea8:	465b      	mov	r3, fp
 8012eaa:	4622      	mov	r2, r4
 8012eac:	4629      	mov	r1, r5
 8012eae:	4630      	mov	r0, r6
 8012eb0:	f7ff ffa2 	bl	8012df8 <__sfputs_r>
 8012eb4:	3001      	adds	r0, #1
 8012eb6:	f000 80a7 	beq.w	8013008 <_vfiprintf_r+0x1ec>
 8012eba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ebc:	445a      	add	r2, fp
 8012ebe:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f000 809f 	beq.w	8013008 <_vfiprintf_r+0x1ec>
 8012eca:	2300      	movs	r3, #0
 8012ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8012ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ed4:	f10a 0a01 	add.w	sl, sl, #1
 8012ed8:	9304      	str	r3, [sp, #16]
 8012eda:	9307      	str	r3, [sp, #28]
 8012edc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ee0:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ee2:	4654      	mov	r4, sl
 8012ee4:	2205      	movs	r2, #5
 8012ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eea:	4853      	ldr	r0, [pc, #332]	@ (8013038 <_vfiprintf_r+0x21c>)
 8012eec:	f7ed f998 	bl	8000220 <memchr>
 8012ef0:	9a04      	ldr	r2, [sp, #16]
 8012ef2:	b9d8      	cbnz	r0, 8012f2c <_vfiprintf_r+0x110>
 8012ef4:	06d1      	lsls	r1, r2, #27
 8012ef6:	bf44      	itt	mi
 8012ef8:	2320      	movmi	r3, #32
 8012efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012efe:	0713      	lsls	r3, r2, #28
 8012f00:	bf44      	itt	mi
 8012f02:	232b      	movmi	r3, #43	@ 0x2b
 8012f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f08:	f89a 3000 	ldrb.w	r3, [sl]
 8012f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f0e:	d015      	beq.n	8012f3c <_vfiprintf_r+0x120>
 8012f10:	9a07      	ldr	r2, [sp, #28]
 8012f12:	4654      	mov	r4, sl
 8012f14:	2000      	movs	r0, #0
 8012f16:	f04f 0c0a 	mov.w	ip, #10
 8012f1a:	4621      	mov	r1, r4
 8012f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f20:	3b30      	subs	r3, #48	@ 0x30
 8012f22:	2b09      	cmp	r3, #9
 8012f24:	d94b      	bls.n	8012fbe <_vfiprintf_r+0x1a2>
 8012f26:	b1b0      	cbz	r0, 8012f56 <_vfiprintf_r+0x13a>
 8012f28:	9207      	str	r2, [sp, #28]
 8012f2a:	e014      	b.n	8012f56 <_vfiprintf_r+0x13a>
 8012f2c:	eba0 0308 	sub.w	r3, r0, r8
 8012f30:	fa09 f303 	lsl.w	r3, r9, r3
 8012f34:	4313      	orrs	r3, r2
 8012f36:	9304      	str	r3, [sp, #16]
 8012f38:	46a2      	mov	sl, r4
 8012f3a:	e7d2      	b.n	8012ee2 <_vfiprintf_r+0xc6>
 8012f3c:	9b03      	ldr	r3, [sp, #12]
 8012f3e:	1d19      	adds	r1, r3, #4
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	9103      	str	r1, [sp, #12]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	bfbb      	ittet	lt
 8012f48:	425b      	neglt	r3, r3
 8012f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8012f4e:	9307      	strge	r3, [sp, #28]
 8012f50:	9307      	strlt	r3, [sp, #28]
 8012f52:	bfb8      	it	lt
 8012f54:	9204      	strlt	r2, [sp, #16]
 8012f56:	7823      	ldrb	r3, [r4, #0]
 8012f58:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f5a:	d10a      	bne.n	8012f72 <_vfiprintf_r+0x156>
 8012f5c:	7863      	ldrb	r3, [r4, #1]
 8012f5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f60:	d132      	bne.n	8012fc8 <_vfiprintf_r+0x1ac>
 8012f62:	9b03      	ldr	r3, [sp, #12]
 8012f64:	1d1a      	adds	r2, r3, #4
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	9203      	str	r2, [sp, #12]
 8012f6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f6e:	3402      	adds	r4, #2
 8012f70:	9305      	str	r3, [sp, #20]
 8012f72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013048 <_vfiprintf_r+0x22c>
 8012f76:	7821      	ldrb	r1, [r4, #0]
 8012f78:	2203      	movs	r2, #3
 8012f7a:	4650      	mov	r0, sl
 8012f7c:	f7ed f950 	bl	8000220 <memchr>
 8012f80:	b138      	cbz	r0, 8012f92 <_vfiprintf_r+0x176>
 8012f82:	9b04      	ldr	r3, [sp, #16]
 8012f84:	eba0 000a 	sub.w	r0, r0, sl
 8012f88:	2240      	movs	r2, #64	@ 0x40
 8012f8a:	4082      	lsls	r2, r0
 8012f8c:	4313      	orrs	r3, r2
 8012f8e:	3401      	adds	r4, #1
 8012f90:	9304      	str	r3, [sp, #16]
 8012f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f96:	4829      	ldr	r0, [pc, #164]	@ (801303c <_vfiprintf_r+0x220>)
 8012f98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f9c:	2206      	movs	r2, #6
 8012f9e:	f7ed f93f 	bl	8000220 <memchr>
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	d03f      	beq.n	8013026 <_vfiprintf_r+0x20a>
 8012fa6:	4b26      	ldr	r3, [pc, #152]	@ (8013040 <_vfiprintf_r+0x224>)
 8012fa8:	bb1b      	cbnz	r3, 8012ff2 <_vfiprintf_r+0x1d6>
 8012faa:	9b03      	ldr	r3, [sp, #12]
 8012fac:	3307      	adds	r3, #7
 8012fae:	f023 0307 	bic.w	r3, r3, #7
 8012fb2:	3308      	adds	r3, #8
 8012fb4:	9303      	str	r3, [sp, #12]
 8012fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fb8:	443b      	add	r3, r7
 8012fba:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fbc:	e76a      	b.n	8012e94 <_vfiprintf_r+0x78>
 8012fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fc2:	460c      	mov	r4, r1
 8012fc4:	2001      	movs	r0, #1
 8012fc6:	e7a8      	b.n	8012f1a <_vfiprintf_r+0xfe>
 8012fc8:	2300      	movs	r3, #0
 8012fca:	3401      	adds	r4, #1
 8012fcc:	9305      	str	r3, [sp, #20]
 8012fce:	4619      	mov	r1, r3
 8012fd0:	f04f 0c0a 	mov.w	ip, #10
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fda:	3a30      	subs	r2, #48	@ 0x30
 8012fdc:	2a09      	cmp	r2, #9
 8012fde:	d903      	bls.n	8012fe8 <_vfiprintf_r+0x1cc>
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d0c6      	beq.n	8012f72 <_vfiprintf_r+0x156>
 8012fe4:	9105      	str	r1, [sp, #20]
 8012fe6:	e7c4      	b.n	8012f72 <_vfiprintf_r+0x156>
 8012fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fec:	4604      	mov	r4, r0
 8012fee:	2301      	movs	r3, #1
 8012ff0:	e7f0      	b.n	8012fd4 <_vfiprintf_r+0x1b8>
 8012ff2:	ab03      	add	r3, sp, #12
 8012ff4:	9300      	str	r3, [sp, #0]
 8012ff6:	462a      	mov	r2, r5
 8012ff8:	4b12      	ldr	r3, [pc, #72]	@ (8013044 <_vfiprintf_r+0x228>)
 8012ffa:	a904      	add	r1, sp, #16
 8012ffc:	4630      	mov	r0, r6
 8012ffe:	f7fb fd0d 	bl	800ea1c <_printf_float>
 8013002:	4607      	mov	r7, r0
 8013004:	1c78      	adds	r0, r7, #1
 8013006:	d1d6      	bne.n	8012fb6 <_vfiprintf_r+0x19a>
 8013008:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801300a:	07d9      	lsls	r1, r3, #31
 801300c:	d405      	bmi.n	801301a <_vfiprintf_r+0x1fe>
 801300e:	89ab      	ldrh	r3, [r5, #12]
 8013010:	059a      	lsls	r2, r3, #22
 8013012:	d402      	bmi.n	801301a <_vfiprintf_r+0x1fe>
 8013014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013016:	f7fc fd93 	bl	800fb40 <__retarget_lock_release_recursive>
 801301a:	89ab      	ldrh	r3, [r5, #12]
 801301c:	065b      	lsls	r3, r3, #25
 801301e:	f53f af1f 	bmi.w	8012e60 <_vfiprintf_r+0x44>
 8013022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013024:	e71e      	b.n	8012e64 <_vfiprintf_r+0x48>
 8013026:	ab03      	add	r3, sp, #12
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	462a      	mov	r2, r5
 801302c:	4b05      	ldr	r3, [pc, #20]	@ (8013044 <_vfiprintf_r+0x228>)
 801302e:	a904      	add	r1, sp, #16
 8013030:	4630      	mov	r0, r6
 8013032:	f7fb ff8b 	bl	800ef4c <_printf_i>
 8013036:	e7e4      	b.n	8013002 <_vfiprintf_r+0x1e6>
 8013038:	08015491 	.word	0x08015491
 801303c:	0801549b 	.word	0x0801549b
 8013040:	0800ea1d 	.word	0x0800ea1d
 8013044:	08012df9 	.word	0x08012df9
 8013048:	08015497 	.word	0x08015497

0801304c <_raise_r>:
 801304c:	291f      	cmp	r1, #31
 801304e:	b538      	push	{r3, r4, r5, lr}
 8013050:	4605      	mov	r5, r0
 8013052:	460c      	mov	r4, r1
 8013054:	d904      	bls.n	8013060 <_raise_r+0x14>
 8013056:	2316      	movs	r3, #22
 8013058:	6003      	str	r3, [r0, #0]
 801305a:	f04f 30ff 	mov.w	r0, #4294967295
 801305e:	bd38      	pop	{r3, r4, r5, pc}
 8013060:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013062:	b112      	cbz	r2, 801306a <_raise_r+0x1e>
 8013064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013068:	b94b      	cbnz	r3, 801307e <_raise_r+0x32>
 801306a:	4628      	mov	r0, r5
 801306c:	f000 f830 	bl	80130d0 <_getpid_r>
 8013070:	4622      	mov	r2, r4
 8013072:	4601      	mov	r1, r0
 8013074:	4628      	mov	r0, r5
 8013076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801307a:	f000 b817 	b.w	80130ac <_kill_r>
 801307e:	2b01      	cmp	r3, #1
 8013080:	d00a      	beq.n	8013098 <_raise_r+0x4c>
 8013082:	1c59      	adds	r1, r3, #1
 8013084:	d103      	bne.n	801308e <_raise_r+0x42>
 8013086:	2316      	movs	r3, #22
 8013088:	6003      	str	r3, [r0, #0]
 801308a:	2001      	movs	r0, #1
 801308c:	e7e7      	b.n	801305e <_raise_r+0x12>
 801308e:	2100      	movs	r1, #0
 8013090:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013094:	4620      	mov	r0, r4
 8013096:	4798      	blx	r3
 8013098:	2000      	movs	r0, #0
 801309a:	e7e0      	b.n	801305e <_raise_r+0x12>

0801309c <raise>:
 801309c:	4b02      	ldr	r3, [pc, #8]	@ (80130a8 <raise+0xc>)
 801309e:	4601      	mov	r1, r0
 80130a0:	6818      	ldr	r0, [r3, #0]
 80130a2:	f7ff bfd3 	b.w	801304c <_raise_r>
 80130a6:	bf00      	nop
 80130a8:	2000004c 	.word	0x2000004c

080130ac <_kill_r>:
 80130ac:	b538      	push	{r3, r4, r5, lr}
 80130ae:	4d07      	ldr	r5, [pc, #28]	@ (80130cc <_kill_r+0x20>)
 80130b0:	2300      	movs	r3, #0
 80130b2:	4604      	mov	r4, r0
 80130b4:	4608      	mov	r0, r1
 80130b6:	4611      	mov	r1, r2
 80130b8:	602b      	str	r3, [r5, #0]
 80130ba:	f7f0 fb93 	bl	80037e4 <_kill>
 80130be:	1c43      	adds	r3, r0, #1
 80130c0:	d102      	bne.n	80130c8 <_kill_r+0x1c>
 80130c2:	682b      	ldr	r3, [r5, #0]
 80130c4:	b103      	cbz	r3, 80130c8 <_kill_r+0x1c>
 80130c6:	6023      	str	r3, [r4, #0]
 80130c8:	bd38      	pop	{r3, r4, r5, pc}
 80130ca:	bf00      	nop
 80130cc:	20003a74 	.word	0x20003a74

080130d0 <_getpid_r>:
 80130d0:	f7f0 bb80 	b.w	80037d4 <_getpid>
 80130d4:	0000      	movs	r0, r0
	...

080130d8 <log>:
 80130d8:	b538      	push	{r3, r4, r5, lr}
 80130da:	ed2d 8b02 	vpush	{d8}
 80130de:	ec55 4b10 	vmov	r4, r5, d0
 80130e2:	f000 f9b5 	bl	8013450 <__ieee754_log>
 80130e6:	4622      	mov	r2, r4
 80130e8:	462b      	mov	r3, r5
 80130ea:	4620      	mov	r0, r4
 80130ec:	4629      	mov	r1, r5
 80130ee:	eeb0 8a40 	vmov.f32	s16, s0
 80130f2:	eef0 8a60 	vmov.f32	s17, s1
 80130f6:	f7ed fd41 	bl	8000b7c <__aeabi_dcmpun>
 80130fa:	b998      	cbnz	r0, 8013124 <log+0x4c>
 80130fc:	2200      	movs	r2, #0
 80130fe:	2300      	movs	r3, #0
 8013100:	4620      	mov	r0, r4
 8013102:	4629      	mov	r1, r5
 8013104:	f7ed fd30 	bl	8000b68 <__aeabi_dcmpgt>
 8013108:	b960      	cbnz	r0, 8013124 <log+0x4c>
 801310a:	2200      	movs	r2, #0
 801310c:	2300      	movs	r3, #0
 801310e:	4620      	mov	r0, r4
 8013110:	4629      	mov	r1, r5
 8013112:	f7ed fd01 	bl	8000b18 <__aeabi_dcmpeq>
 8013116:	b160      	cbz	r0, 8013132 <log+0x5a>
 8013118:	f7fc fce6 	bl	800fae8 <__errno>
 801311c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8013148 <log+0x70>
 8013120:	2322      	movs	r3, #34	@ 0x22
 8013122:	6003      	str	r3, [r0, #0]
 8013124:	eeb0 0a48 	vmov.f32	s0, s16
 8013128:	eef0 0a68 	vmov.f32	s1, s17
 801312c:	ecbd 8b02 	vpop	{d8}
 8013130:	bd38      	pop	{r3, r4, r5, pc}
 8013132:	f7fc fcd9 	bl	800fae8 <__errno>
 8013136:	ecbd 8b02 	vpop	{d8}
 801313a:	2321      	movs	r3, #33	@ 0x21
 801313c:	6003      	str	r3, [r0, #0]
 801313e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013142:	4803      	ldr	r0, [pc, #12]	@ (8013150 <log+0x78>)
 8013144:	f7ff ba60 	b.w	8012608 <nan>
 8013148:	00000000 	.word	0x00000000
 801314c:	fff00000 	.word	0xfff00000
 8013150:	080154e5 	.word	0x080154e5

08013154 <acosf>:
 8013154:	b508      	push	{r3, lr}
 8013156:	ed2d 8b02 	vpush	{d8}
 801315a:	eeb0 8a40 	vmov.f32	s16, s0
 801315e:	f000 fbcd 	bl	80138fc <__ieee754_acosf>
 8013162:	eeb4 8a48 	vcmp.f32	s16, s16
 8013166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801316a:	eef0 8a40 	vmov.f32	s17, s0
 801316e:	d615      	bvs.n	801319c <acosf+0x48>
 8013170:	eeb0 0a48 	vmov.f32	s0, s16
 8013174:	f000 f8d4 	bl	8013320 <fabsf>
 8013178:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801317c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013184:	dd0a      	ble.n	801319c <acosf+0x48>
 8013186:	f7fc fcaf 	bl	800fae8 <__errno>
 801318a:	ecbd 8b02 	vpop	{d8}
 801318e:	2321      	movs	r3, #33	@ 0x21
 8013190:	6003      	str	r3, [r0, #0]
 8013192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013196:	4804      	ldr	r0, [pc, #16]	@ (80131a8 <acosf+0x54>)
 8013198:	f7fc bce2 	b.w	800fb60 <nanf>
 801319c:	eeb0 0a68 	vmov.f32	s0, s17
 80131a0:	ecbd 8b02 	vpop	{d8}
 80131a4:	bd08      	pop	{r3, pc}
 80131a6:	bf00      	nop
 80131a8:	080154e5 	.word	0x080154e5

080131ac <powf>:
 80131ac:	b508      	push	{r3, lr}
 80131ae:	ed2d 8b04 	vpush	{d8-d9}
 80131b2:	eeb0 8a60 	vmov.f32	s16, s1
 80131b6:	eeb0 9a40 	vmov.f32	s18, s0
 80131ba:	f000 fc95 	bl	8013ae8 <__ieee754_powf>
 80131be:	eeb4 8a48 	vcmp.f32	s16, s16
 80131c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c6:	eef0 8a40 	vmov.f32	s17, s0
 80131ca:	d63e      	bvs.n	801324a <powf+0x9e>
 80131cc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80131d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d4:	d112      	bne.n	80131fc <powf+0x50>
 80131d6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80131da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131de:	d039      	beq.n	8013254 <powf+0xa8>
 80131e0:	eeb0 0a48 	vmov.f32	s0, s16
 80131e4:	f000 f8ea 	bl	80133bc <finitef>
 80131e8:	b378      	cbz	r0, 801324a <powf+0x9e>
 80131ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80131ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f2:	d52a      	bpl.n	801324a <powf+0x9e>
 80131f4:	f7fc fc78 	bl	800fae8 <__errno>
 80131f8:	2322      	movs	r3, #34	@ 0x22
 80131fa:	e014      	b.n	8013226 <powf+0x7a>
 80131fc:	f000 f8de 	bl	80133bc <finitef>
 8013200:	b998      	cbnz	r0, 801322a <powf+0x7e>
 8013202:	eeb0 0a49 	vmov.f32	s0, s18
 8013206:	f000 f8d9 	bl	80133bc <finitef>
 801320a:	b170      	cbz	r0, 801322a <powf+0x7e>
 801320c:	eeb0 0a48 	vmov.f32	s0, s16
 8013210:	f000 f8d4 	bl	80133bc <finitef>
 8013214:	b148      	cbz	r0, 801322a <powf+0x7e>
 8013216:	eef4 8a68 	vcmp.f32	s17, s17
 801321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321e:	d7e9      	bvc.n	80131f4 <powf+0x48>
 8013220:	f7fc fc62 	bl	800fae8 <__errno>
 8013224:	2321      	movs	r3, #33	@ 0x21
 8013226:	6003      	str	r3, [r0, #0]
 8013228:	e00f      	b.n	801324a <powf+0x9e>
 801322a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801322e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013232:	d10a      	bne.n	801324a <powf+0x9e>
 8013234:	eeb0 0a49 	vmov.f32	s0, s18
 8013238:	f000 f8c0 	bl	80133bc <finitef>
 801323c:	b128      	cbz	r0, 801324a <powf+0x9e>
 801323e:	eeb0 0a48 	vmov.f32	s0, s16
 8013242:	f000 f8bb 	bl	80133bc <finitef>
 8013246:	2800      	cmp	r0, #0
 8013248:	d1d4      	bne.n	80131f4 <powf+0x48>
 801324a:	eeb0 0a68 	vmov.f32	s0, s17
 801324e:	ecbd 8b04 	vpop	{d8-d9}
 8013252:	bd08      	pop	{r3, pc}
 8013254:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8013258:	e7f7      	b.n	801324a <powf+0x9e>
	...

0801325c <sqrtf>:
 801325c:	b508      	push	{r3, lr}
 801325e:	ed2d 8b02 	vpush	{d8}
 8013262:	eeb0 8a40 	vmov.f32	s16, s0
 8013266:	f000 f8ed 	bl	8013444 <__ieee754_sqrtf>
 801326a:	eeb4 8a48 	vcmp.f32	s16, s16
 801326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013272:	d60c      	bvs.n	801328e <sqrtf+0x32>
 8013274:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8013294 <sqrtf+0x38>
 8013278:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013280:	d505      	bpl.n	801328e <sqrtf+0x32>
 8013282:	f7fc fc31 	bl	800fae8 <__errno>
 8013286:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801328a:	2321      	movs	r3, #33	@ 0x21
 801328c:	6003      	str	r3, [r0, #0]
 801328e:	ecbd 8b02 	vpop	{d8}
 8013292:	bd08      	pop	{r3, pc}
 8013294:	00000000 	.word	0x00000000

08013298 <cosf>:
 8013298:	ee10 3a10 	vmov	r3, s0
 801329c:	b507      	push	{r0, r1, r2, lr}
 801329e:	4a1e      	ldr	r2, [pc, #120]	@ (8013318 <cosf+0x80>)
 80132a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80132a4:	4293      	cmp	r3, r2
 80132a6:	d806      	bhi.n	80132b6 <cosf+0x1e>
 80132a8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801331c <cosf+0x84>
 80132ac:	b003      	add	sp, #12
 80132ae:	f85d eb04 	ldr.w	lr, [sp], #4
 80132b2:	f000 ba83 	b.w	80137bc <__kernel_cosf>
 80132b6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80132ba:	d304      	bcc.n	80132c6 <cosf+0x2e>
 80132bc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80132c0:	b003      	add	sp, #12
 80132c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80132c6:	4668      	mov	r0, sp
 80132c8:	f000 fedc 	bl	8014084 <__ieee754_rem_pio2f>
 80132cc:	f000 0003 	and.w	r0, r0, #3
 80132d0:	2801      	cmp	r0, #1
 80132d2:	d009      	beq.n	80132e8 <cosf+0x50>
 80132d4:	2802      	cmp	r0, #2
 80132d6:	d010      	beq.n	80132fa <cosf+0x62>
 80132d8:	b9b0      	cbnz	r0, 8013308 <cosf+0x70>
 80132da:	eddd 0a01 	vldr	s1, [sp, #4]
 80132de:	ed9d 0a00 	vldr	s0, [sp]
 80132e2:	f000 fa6b 	bl	80137bc <__kernel_cosf>
 80132e6:	e7eb      	b.n	80132c0 <cosf+0x28>
 80132e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80132ec:	ed9d 0a00 	vldr	s0, [sp]
 80132f0:	f000 fabc 	bl	801386c <__kernel_sinf>
 80132f4:	eeb1 0a40 	vneg.f32	s0, s0
 80132f8:	e7e2      	b.n	80132c0 <cosf+0x28>
 80132fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80132fe:	ed9d 0a00 	vldr	s0, [sp]
 8013302:	f000 fa5b 	bl	80137bc <__kernel_cosf>
 8013306:	e7f5      	b.n	80132f4 <cosf+0x5c>
 8013308:	eddd 0a01 	vldr	s1, [sp, #4]
 801330c:	ed9d 0a00 	vldr	s0, [sp]
 8013310:	2001      	movs	r0, #1
 8013312:	f000 faab 	bl	801386c <__kernel_sinf>
 8013316:	e7d3      	b.n	80132c0 <cosf+0x28>
 8013318:	3f490fd8 	.word	0x3f490fd8
 801331c:	00000000 	.word	0x00000000

08013320 <fabsf>:
 8013320:	ee10 3a10 	vmov	r3, s0
 8013324:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013328:	ee00 3a10 	vmov	s0, r3
 801332c:	4770      	bx	lr
	...

08013330 <sinf>:
 8013330:	ee10 3a10 	vmov	r3, s0
 8013334:	b507      	push	{r0, r1, r2, lr}
 8013336:	4a1f      	ldr	r2, [pc, #124]	@ (80133b4 <sinf+0x84>)
 8013338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801333c:	4293      	cmp	r3, r2
 801333e:	d807      	bhi.n	8013350 <sinf+0x20>
 8013340:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80133b8 <sinf+0x88>
 8013344:	2000      	movs	r0, #0
 8013346:	b003      	add	sp, #12
 8013348:	f85d eb04 	ldr.w	lr, [sp], #4
 801334c:	f000 ba8e 	b.w	801386c <__kernel_sinf>
 8013350:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013354:	d304      	bcc.n	8013360 <sinf+0x30>
 8013356:	ee30 0a40 	vsub.f32	s0, s0, s0
 801335a:	b003      	add	sp, #12
 801335c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013360:	4668      	mov	r0, sp
 8013362:	f000 fe8f 	bl	8014084 <__ieee754_rem_pio2f>
 8013366:	f000 0003 	and.w	r0, r0, #3
 801336a:	2801      	cmp	r0, #1
 801336c:	d00a      	beq.n	8013384 <sinf+0x54>
 801336e:	2802      	cmp	r0, #2
 8013370:	d00f      	beq.n	8013392 <sinf+0x62>
 8013372:	b9c0      	cbnz	r0, 80133a6 <sinf+0x76>
 8013374:	eddd 0a01 	vldr	s1, [sp, #4]
 8013378:	ed9d 0a00 	vldr	s0, [sp]
 801337c:	2001      	movs	r0, #1
 801337e:	f000 fa75 	bl	801386c <__kernel_sinf>
 8013382:	e7ea      	b.n	801335a <sinf+0x2a>
 8013384:	eddd 0a01 	vldr	s1, [sp, #4]
 8013388:	ed9d 0a00 	vldr	s0, [sp]
 801338c:	f000 fa16 	bl	80137bc <__kernel_cosf>
 8013390:	e7e3      	b.n	801335a <sinf+0x2a>
 8013392:	eddd 0a01 	vldr	s1, [sp, #4]
 8013396:	ed9d 0a00 	vldr	s0, [sp]
 801339a:	2001      	movs	r0, #1
 801339c:	f000 fa66 	bl	801386c <__kernel_sinf>
 80133a0:	eeb1 0a40 	vneg.f32	s0, s0
 80133a4:	e7d9      	b.n	801335a <sinf+0x2a>
 80133a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80133aa:	ed9d 0a00 	vldr	s0, [sp]
 80133ae:	f000 fa05 	bl	80137bc <__kernel_cosf>
 80133b2:	e7f5      	b.n	80133a0 <sinf+0x70>
 80133b4:	3f490fd8 	.word	0x3f490fd8
 80133b8:	00000000 	.word	0x00000000

080133bc <finitef>:
 80133bc:	ee10 3a10 	vmov	r3, s0
 80133c0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80133c4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80133c8:	bfac      	ite	ge
 80133ca:	2000      	movge	r0, #0
 80133cc:	2001      	movlt	r0, #1
 80133ce:	4770      	bx	lr

080133d0 <fminf>:
 80133d0:	b508      	push	{r3, lr}
 80133d2:	ed2d 8b02 	vpush	{d8}
 80133d6:	eeb0 8a40 	vmov.f32	s16, s0
 80133da:	eef0 8a60 	vmov.f32	s17, s1
 80133de:	f000 f815 	bl	801340c <__fpclassifyf>
 80133e2:	b930      	cbnz	r0, 80133f2 <fminf+0x22>
 80133e4:	eeb0 8a68 	vmov.f32	s16, s17
 80133e8:	eeb0 0a48 	vmov.f32	s0, s16
 80133ec:	ecbd 8b02 	vpop	{d8}
 80133f0:	bd08      	pop	{r3, pc}
 80133f2:	eeb0 0a68 	vmov.f32	s0, s17
 80133f6:	f000 f809 	bl	801340c <__fpclassifyf>
 80133fa:	2800      	cmp	r0, #0
 80133fc:	d0f4      	beq.n	80133e8 <fminf+0x18>
 80133fe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013406:	d5ed      	bpl.n	80133e4 <fminf+0x14>
 8013408:	e7ee      	b.n	80133e8 <fminf+0x18>
	...

0801340c <__fpclassifyf>:
 801340c:	ee10 3a10 	vmov	r3, s0
 8013410:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8013414:	d00d      	beq.n	8013432 <__fpclassifyf+0x26>
 8013416:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801341a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801341e:	d30a      	bcc.n	8013436 <__fpclassifyf+0x2a>
 8013420:	4b07      	ldr	r3, [pc, #28]	@ (8013440 <__fpclassifyf+0x34>)
 8013422:	1e42      	subs	r2, r0, #1
 8013424:	429a      	cmp	r2, r3
 8013426:	d908      	bls.n	801343a <__fpclassifyf+0x2e>
 8013428:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 801342c:	4258      	negs	r0, r3
 801342e:	4158      	adcs	r0, r3
 8013430:	4770      	bx	lr
 8013432:	2002      	movs	r0, #2
 8013434:	4770      	bx	lr
 8013436:	2004      	movs	r0, #4
 8013438:	4770      	bx	lr
 801343a:	2003      	movs	r0, #3
 801343c:	4770      	bx	lr
 801343e:	bf00      	nop
 8013440:	007ffffe 	.word	0x007ffffe

08013444 <__ieee754_sqrtf>:
 8013444:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013448:	4770      	bx	lr
 801344a:	0000      	movs	r0, r0
 801344c:	0000      	movs	r0, r0
	...

08013450 <__ieee754_log>:
 8013450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013454:	ec51 0b10 	vmov	r0, r1, d0
 8013458:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801345c:	b087      	sub	sp, #28
 801345e:	460d      	mov	r5, r1
 8013460:	da26      	bge.n	80134b0 <__ieee754_log+0x60>
 8013462:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013466:	4303      	orrs	r3, r0
 8013468:	4602      	mov	r2, r0
 801346a:	d10a      	bne.n	8013482 <__ieee754_log+0x32>
 801346c:	49ce      	ldr	r1, [pc, #824]	@ (80137a8 <__ieee754_log+0x358>)
 801346e:	2200      	movs	r2, #0
 8013470:	2300      	movs	r3, #0
 8013472:	2000      	movs	r0, #0
 8013474:	f7ed fa12 	bl	800089c <__aeabi_ddiv>
 8013478:	ec41 0b10 	vmov	d0, r0, r1
 801347c:	b007      	add	sp, #28
 801347e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013482:	2900      	cmp	r1, #0
 8013484:	da05      	bge.n	8013492 <__ieee754_log+0x42>
 8013486:	460b      	mov	r3, r1
 8013488:	f7ec ff26 	bl	80002d8 <__aeabi_dsub>
 801348c:	2200      	movs	r2, #0
 801348e:	2300      	movs	r3, #0
 8013490:	e7f0      	b.n	8013474 <__ieee754_log+0x24>
 8013492:	4bc6      	ldr	r3, [pc, #792]	@ (80137ac <__ieee754_log+0x35c>)
 8013494:	2200      	movs	r2, #0
 8013496:	f7ed f8d7 	bl	8000648 <__aeabi_dmul>
 801349a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 801349e:	460d      	mov	r5, r1
 80134a0:	4ac3      	ldr	r2, [pc, #780]	@ (80137b0 <__ieee754_log+0x360>)
 80134a2:	4295      	cmp	r5, r2
 80134a4:	dd06      	ble.n	80134b4 <__ieee754_log+0x64>
 80134a6:	4602      	mov	r2, r0
 80134a8:	460b      	mov	r3, r1
 80134aa:	f7ec ff17 	bl	80002dc <__adddf3>
 80134ae:	e7e3      	b.n	8013478 <__ieee754_log+0x28>
 80134b0:	2300      	movs	r3, #0
 80134b2:	e7f5      	b.n	80134a0 <__ieee754_log+0x50>
 80134b4:	152c      	asrs	r4, r5, #20
 80134b6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80134ba:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80134be:	441c      	add	r4, r3
 80134c0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80134c4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80134c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80134cc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80134d0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80134d4:	ea42 0105 	orr.w	r1, r2, r5
 80134d8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80134dc:	2200      	movs	r2, #0
 80134de:	4bb5      	ldr	r3, [pc, #724]	@ (80137b4 <__ieee754_log+0x364>)
 80134e0:	f7ec fefa 	bl	80002d8 <__aeabi_dsub>
 80134e4:	1cab      	adds	r3, r5, #2
 80134e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80134ea:	2b02      	cmp	r3, #2
 80134ec:	4682      	mov	sl, r0
 80134ee:	468b      	mov	fp, r1
 80134f0:	f04f 0200 	mov.w	r2, #0
 80134f4:	dc53      	bgt.n	801359e <__ieee754_log+0x14e>
 80134f6:	2300      	movs	r3, #0
 80134f8:	f7ed fb0e 	bl	8000b18 <__aeabi_dcmpeq>
 80134fc:	b1d0      	cbz	r0, 8013534 <__ieee754_log+0xe4>
 80134fe:	2c00      	cmp	r4, #0
 8013500:	f000 8120 	beq.w	8013744 <__ieee754_log+0x2f4>
 8013504:	4620      	mov	r0, r4
 8013506:	f7ed f835 	bl	8000574 <__aeabi_i2d>
 801350a:	a391      	add	r3, pc, #580	@ (adr r3, 8013750 <__ieee754_log+0x300>)
 801350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013510:	4606      	mov	r6, r0
 8013512:	460f      	mov	r7, r1
 8013514:	f7ed f898 	bl	8000648 <__aeabi_dmul>
 8013518:	a38f      	add	r3, pc, #572	@ (adr r3, 8013758 <__ieee754_log+0x308>)
 801351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351e:	4604      	mov	r4, r0
 8013520:	460d      	mov	r5, r1
 8013522:	4630      	mov	r0, r6
 8013524:	4639      	mov	r1, r7
 8013526:	f7ed f88f 	bl	8000648 <__aeabi_dmul>
 801352a:	4602      	mov	r2, r0
 801352c:	460b      	mov	r3, r1
 801352e:	4620      	mov	r0, r4
 8013530:	4629      	mov	r1, r5
 8013532:	e7ba      	b.n	80134aa <__ieee754_log+0x5a>
 8013534:	a38a      	add	r3, pc, #552	@ (adr r3, 8013760 <__ieee754_log+0x310>)
 8013536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353a:	4650      	mov	r0, sl
 801353c:	4659      	mov	r1, fp
 801353e:	f7ed f883 	bl	8000648 <__aeabi_dmul>
 8013542:	4602      	mov	r2, r0
 8013544:	460b      	mov	r3, r1
 8013546:	2000      	movs	r0, #0
 8013548:	499b      	ldr	r1, [pc, #620]	@ (80137b8 <__ieee754_log+0x368>)
 801354a:	f7ec fec5 	bl	80002d8 <__aeabi_dsub>
 801354e:	4652      	mov	r2, sl
 8013550:	4606      	mov	r6, r0
 8013552:	460f      	mov	r7, r1
 8013554:	465b      	mov	r3, fp
 8013556:	4650      	mov	r0, sl
 8013558:	4659      	mov	r1, fp
 801355a:	f7ed f875 	bl	8000648 <__aeabi_dmul>
 801355e:	4602      	mov	r2, r0
 8013560:	460b      	mov	r3, r1
 8013562:	4630      	mov	r0, r6
 8013564:	4639      	mov	r1, r7
 8013566:	f7ed f86f 	bl	8000648 <__aeabi_dmul>
 801356a:	4606      	mov	r6, r0
 801356c:	460f      	mov	r7, r1
 801356e:	b914      	cbnz	r4, 8013576 <__ieee754_log+0x126>
 8013570:	4632      	mov	r2, r6
 8013572:	463b      	mov	r3, r7
 8013574:	e0a0      	b.n	80136b8 <__ieee754_log+0x268>
 8013576:	4620      	mov	r0, r4
 8013578:	f7ec fffc 	bl	8000574 <__aeabi_i2d>
 801357c:	a374      	add	r3, pc, #464	@ (adr r3, 8013750 <__ieee754_log+0x300>)
 801357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013582:	4680      	mov	r8, r0
 8013584:	4689      	mov	r9, r1
 8013586:	f7ed f85f 	bl	8000648 <__aeabi_dmul>
 801358a:	a373      	add	r3, pc, #460	@ (adr r3, 8013758 <__ieee754_log+0x308>)
 801358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013590:	4604      	mov	r4, r0
 8013592:	460d      	mov	r5, r1
 8013594:	4640      	mov	r0, r8
 8013596:	4649      	mov	r1, r9
 8013598:	f7ed f856 	bl	8000648 <__aeabi_dmul>
 801359c:	e0a5      	b.n	80136ea <__ieee754_log+0x29a>
 801359e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80135a2:	f7ec fe9b 	bl	80002dc <__adddf3>
 80135a6:	4602      	mov	r2, r0
 80135a8:	460b      	mov	r3, r1
 80135aa:	4650      	mov	r0, sl
 80135ac:	4659      	mov	r1, fp
 80135ae:	f7ed f975 	bl	800089c <__aeabi_ddiv>
 80135b2:	e9cd 0100 	strd	r0, r1, [sp]
 80135b6:	4620      	mov	r0, r4
 80135b8:	f7ec ffdc 	bl	8000574 <__aeabi_i2d>
 80135bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135c4:	4610      	mov	r0, r2
 80135c6:	4619      	mov	r1, r3
 80135c8:	f7ed f83e 	bl	8000648 <__aeabi_dmul>
 80135cc:	4602      	mov	r2, r0
 80135ce:	460b      	mov	r3, r1
 80135d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80135d4:	f7ed f838 	bl	8000648 <__aeabi_dmul>
 80135d8:	a363      	add	r3, pc, #396	@ (adr r3, 8013768 <__ieee754_log+0x318>)
 80135da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135de:	4680      	mov	r8, r0
 80135e0:	4689      	mov	r9, r1
 80135e2:	f7ed f831 	bl	8000648 <__aeabi_dmul>
 80135e6:	a362      	add	r3, pc, #392	@ (adr r3, 8013770 <__ieee754_log+0x320>)
 80135e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ec:	f7ec fe76 	bl	80002dc <__adddf3>
 80135f0:	4642      	mov	r2, r8
 80135f2:	464b      	mov	r3, r9
 80135f4:	f7ed f828 	bl	8000648 <__aeabi_dmul>
 80135f8:	a35f      	add	r3, pc, #380	@ (adr r3, 8013778 <__ieee754_log+0x328>)
 80135fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135fe:	f7ec fe6d 	bl	80002dc <__adddf3>
 8013602:	4642      	mov	r2, r8
 8013604:	464b      	mov	r3, r9
 8013606:	f7ed f81f 	bl	8000648 <__aeabi_dmul>
 801360a:	a35d      	add	r3, pc, #372	@ (adr r3, 8013780 <__ieee754_log+0x330>)
 801360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013610:	f7ec fe64 	bl	80002dc <__adddf3>
 8013614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013618:	f7ed f816 	bl	8000648 <__aeabi_dmul>
 801361c:	a35a      	add	r3, pc, #360	@ (adr r3, 8013788 <__ieee754_log+0x338>)
 801361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013622:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013626:	4640      	mov	r0, r8
 8013628:	4649      	mov	r1, r9
 801362a:	f7ed f80d 	bl	8000648 <__aeabi_dmul>
 801362e:	a358      	add	r3, pc, #352	@ (adr r3, 8013790 <__ieee754_log+0x340>)
 8013630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013634:	f7ec fe52 	bl	80002dc <__adddf3>
 8013638:	4642      	mov	r2, r8
 801363a:	464b      	mov	r3, r9
 801363c:	f7ed f804 	bl	8000648 <__aeabi_dmul>
 8013640:	a355      	add	r3, pc, #340	@ (adr r3, 8013798 <__ieee754_log+0x348>)
 8013642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013646:	f7ec fe49 	bl	80002dc <__adddf3>
 801364a:	4642      	mov	r2, r8
 801364c:	464b      	mov	r3, r9
 801364e:	f7ec fffb 	bl	8000648 <__aeabi_dmul>
 8013652:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8013656:	4602      	mov	r2, r0
 8013658:	460b      	mov	r3, r1
 801365a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801365e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013662:	f7ec fe3b 	bl	80002dc <__adddf3>
 8013666:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801366a:	3551      	adds	r5, #81	@ 0x51
 801366c:	4335      	orrs	r5, r6
 801366e:	2d00      	cmp	r5, #0
 8013670:	4680      	mov	r8, r0
 8013672:	4689      	mov	r9, r1
 8013674:	dd48      	ble.n	8013708 <__ieee754_log+0x2b8>
 8013676:	4b50      	ldr	r3, [pc, #320]	@ (80137b8 <__ieee754_log+0x368>)
 8013678:	2200      	movs	r2, #0
 801367a:	4650      	mov	r0, sl
 801367c:	4659      	mov	r1, fp
 801367e:	f7ec ffe3 	bl	8000648 <__aeabi_dmul>
 8013682:	4652      	mov	r2, sl
 8013684:	465b      	mov	r3, fp
 8013686:	f7ec ffdf 	bl	8000648 <__aeabi_dmul>
 801368a:	4602      	mov	r2, r0
 801368c:	460b      	mov	r3, r1
 801368e:	4606      	mov	r6, r0
 8013690:	460f      	mov	r7, r1
 8013692:	4640      	mov	r0, r8
 8013694:	4649      	mov	r1, r9
 8013696:	f7ec fe21 	bl	80002dc <__adddf3>
 801369a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801369e:	f7ec ffd3 	bl	8000648 <__aeabi_dmul>
 80136a2:	4680      	mov	r8, r0
 80136a4:	4689      	mov	r9, r1
 80136a6:	b964      	cbnz	r4, 80136c2 <__ieee754_log+0x272>
 80136a8:	4602      	mov	r2, r0
 80136aa:	460b      	mov	r3, r1
 80136ac:	4630      	mov	r0, r6
 80136ae:	4639      	mov	r1, r7
 80136b0:	f7ec fe12 	bl	80002d8 <__aeabi_dsub>
 80136b4:	4602      	mov	r2, r0
 80136b6:	460b      	mov	r3, r1
 80136b8:	4650      	mov	r0, sl
 80136ba:	4659      	mov	r1, fp
 80136bc:	f7ec fe0c 	bl	80002d8 <__aeabi_dsub>
 80136c0:	e6da      	b.n	8013478 <__ieee754_log+0x28>
 80136c2:	a323      	add	r3, pc, #140	@ (adr r3, 8013750 <__ieee754_log+0x300>)
 80136c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136cc:	f7ec ffbc 	bl	8000648 <__aeabi_dmul>
 80136d0:	a321      	add	r3, pc, #132	@ (adr r3, 8013758 <__ieee754_log+0x308>)
 80136d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d6:	4604      	mov	r4, r0
 80136d8:	460d      	mov	r5, r1
 80136da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136de:	f7ec ffb3 	bl	8000648 <__aeabi_dmul>
 80136e2:	4642      	mov	r2, r8
 80136e4:	464b      	mov	r3, r9
 80136e6:	f7ec fdf9 	bl	80002dc <__adddf3>
 80136ea:	4602      	mov	r2, r0
 80136ec:	460b      	mov	r3, r1
 80136ee:	4630      	mov	r0, r6
 80136f0:	4639      	mov	r1, r7
 80136f2:	f7ec fdf1 	bl	80002d8 <__aeabi_dsub>
 80136f6:	4652      	mov	r2, sl
 80136f8:	465b      	mov	r3, fp
 80136fa:	f7ec fded 	bl	80002d8 <__aeabi_dsub>
 80136fe:	4602      	mov	r2, r0
 8013700:	460b      	mov	r3, r1
 8013702:	4620      	mov	r0, r4
 8013704:	4629      	mov	r1, r5
 8013706:	e7d9      	b.n	80136bc <__ieee754_log+0x26c>
 8013708:	4602      	mov	r2, r0
 801370a:	460b      	mov	r3, r1
 801370c:	4650      	mov	r0, sl
 801370e:	4659      	mov	r1, fp
 8013710:	f7ec fde2 	bl	80002d8 <__aeabi_dsub>
 8013714:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013718:	f7ec ff96 	bl	8000648 <__aeabi_dmul>
 801371c:	4606      	mov	r6, r0
 801371e:	460f      	mov	r7, r1
 8013720:	2c00      	cmp	r4, #0
 8013722:	f43f af25 	beq.w	8013570 <__ieee754_log+0x120>
 8013726:	a30a      	add	r3, pc, #40	@ (adr r3, 8013750 <__ieee754_log+0x300>)
 8013728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801372c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013730:	f7ec ff8a 	bl	8000648 <__aeabi_dmul>
 8013734:	a308      	add	r3, pc, #32	@ (adr r3, 8013758 <__ieee754_log+0x308>)
 8013736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373a:	4604      	mov	r4, r0
 801373c:	460d      	mov	r5, r1
 801373e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013742:	e729      	b.n	8013598 <__ieee754_log+0x148>
 8013744:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80137a0 <__ieee754_log+0x350>
 8013748:	e698      	b.n	801347c <__ieee754_log+0x2c>
 801374a:	bf00      	nop
 801374c:	f3af 8000 	nop.w
 8013750:	fee00000 	.word	0xfee00000
 8013754:	3fe62e42 	.word	0x3fe62e42
 8013758:	35793c76 	.word	0x35793c76
 801375c:	3dea39ef 	.word	0x3dea39ef
 8013760:	55555555 	.word	0x55555555
 8013764:	3fd55555 	.word	0x3fd55555
 8013768:	df3e5244 	.word	0xdf3e5244
 801376c:	3fc2f112 	.word	0x3fc2f112
 8013770:	96cb03de 	.word	0x96cb03de
 8013774:	3fc74664 	.word	0x3fc74664
 8013778:	94229359 	.word	0x94229359
 801377c:	3fd24924 	.word	0x3fd24924
 8013780:	55555593 	.word	0x55555593
 8013784:	3fe55555 	.word	0x3fe55555
 8013788:	d078c69f 	.word	0xd078c69f
 801378c:	3fc39a09 	.word	0x3fc39a09
 8013790:	1d8e78af 	.word	0x1d8e78af
 8013794:	3fcc71c5 	.word	0x3fcc71c5
 8013798:	9997fa04 	.word	0x9997fa04
 801379c:	3fd99999 	.word	0x3fd99999
	...
 80137a8:	c3500000 	.word	0xc3500000
 80137ac:	43500000 	.word	0x43500000
 80137b0:	7fefffff 	.word	0x7fefffff
 80137b4:	3ff00000 	.word	0x3ff00000
 80137b8:	3fe00000 	.word	0x3fe00000

080137bc <__kernel_cosf>:
 80137bc:	ee10 3a10 	vmov	r3, s0
 80137c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80137c4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80137c8:	eef0 6a40 	vmov.f32	s13, s0
 80137cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80137d0:	d204      	bcs.n	80137dc <__kernel_cosf+0x20>
 80137d2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80137d6:	ee17 2a90 	vmov	r2, s15
 80137da:	b342      	cbz	r2, 801382e <__kernel_cosf+0x72>
 80137dc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80137e0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801384c <__kernel_cosf+0x90>
 80137e4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013850 <__kernel_cosf+0x94>
 80137e8:	4a1a      	ldr	r2, [pc, #104]	@ (8013854 <__kernel_cosf+0x98>)
 80137ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 80137ee:	4293      	cmp	r3, r2
 80137f0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013858 <__kernel_cosf+0x9c>
 80137f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80137f8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801385c <__kernel_cosf+0xa0>
 80137fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013800:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013860 <__kernel_cosf+0xa4>
 8013804:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013808:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013864 <__kernel_cosf+0xa8>
 801380c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013810:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013814:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013818:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801381c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013824:	d804      	bhi.n	8013830 <__kernel_cosf+0x74>
 8013826:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801382a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801382e:	4770      	bx	lr
 8013830:	4a0d      	ldr	r2, [pc, #52]	@ (8013868 <__kernel_cosf+0xac>)
 8013832:	4293      	cmp	r3, r2
 8013834:	bf9a      	itte	ls
 8013836:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801383a:	ee07 3a10 	vmovls	s14, r3
 801383e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013842:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013846:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801384a:	e7ec      	b.n	8013826 <__kernel_cosf+0x6a>
 801384c:	ad47d74e 	.word	0xad47d74e
 8013850:	310f74f6 	.word	0x310f74f6
 8013854:	3e999999 	.word	0x3e999999
 8013858:	b493f27c 	.word	0xb493f27c
 801385c:	37d00d01 	.word	0x37d00d01
 8013860:	bab60b61 	.word	0xbab60b61
 8013864:	3d2aaaab 	.word	0x3d2aaaab
 8013868:	3f480000 	.word	0x3f480000

0801386c <__kernel_sinf>:
 801386c:	ee10 3a10 	vmov	r3, s0
 8013870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013874:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013878:	d204      	bcs.n	8013884 <__kernel_sinf+0x18>
 801387a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801387e:	ee17 3a90 	vmov	r3, s15
 8013882:	b35b      	cbz	r3, 80138dc <__kernel_sinf+0x70>
 8013884:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013888:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80138e0 <__kernel_sinf+0x74>
 801388c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80138e4 <__kernel_sinf+0x78>
 8013890:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013894:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80138e8 <__kernel_sinf+0x7c>
 8013898:	eee6 7a07 	vfma.f32	s15, s12, s14
 801389c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80138ec <__kernel_sinf+0x80>
 80138a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80138a4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80138f0 <__kernel_sinf+0x84>
 80138a8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80138ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80138b0:	b930      	cbnz	r0, 80138c0 <__kernel_sinf+0x54>
 80138b2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80138f4 <__kernel_sinf+0x88>
 80138b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80138ba:	eea6 0a26 	vfma.f32	s0, s12, s13
 80138be:	4770      	bx	lr
 80138c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80138c4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80138c8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80138cc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80138d0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80138f8 <__kernel_sinf+0x8c>
 80138d4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80138d8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80138dc:	4770      	bx	lr
 80138de:	bf00      	nop
 80138e0:	2f2ec9d3 	.word	0x2f2ec9d3
 80138e4:	b2d72f34 	.word	0xb2d72f34
 80138e8:	3638ef1b 	.word	0x3638ef1b
 80138ec:	b9500d01 	.word	0xb9500d01
 80138f0:	3c088889 	.word	0x3c088889
 80138f4:	be2aaaab 	.word	0xbe2aaaab
 80138f8:	3e2aaaab 	.word	0x3e2aaaab

080138fc <__ieee754_acosf>:
 80138fc:	b508      	push	{r3, lr}
 80138fe:	ee10 3a10 	vmov	r3, s0
 8013902:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013906:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801390a:	ed2d 8b0c 	vpush	{d8-d13}
 801390e:	d10a      	bne.n	8013926 <__ieee754_acosf+0x2a>
 8013910:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8013aa4 <__ieee754_acosf+0x1a8>
 8013914:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8013aa8 <__ieee754_acosf+0x1ac>
 8013918:	2b00      	cmp	r3, #0
 801391a:	bfc8      	it	gt
 801391c:	eeb0 0a67 	vmovgt.f32	s0, s15
 8013920:	ecbd 8b0c 	vpop	{d8-d13}
 8013924:	bd08      	pop	{r3, pc}
 8013926:	d904      	bls.n	8013932 <__ieee754_acosf+0x36>
 8013928:	ee30 8a40 	vsub.f32	s16, s0, s0
 801392c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013930:	e7f6      	b.n	8013920 <__ieee754_acosf+0x24>
 8013932:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8013936:	d23c      	bcs.n	80139b2 <__ieee754_acosf+0xb6>
 8013938:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 801393c:	f240 80af 	bls.w	8013a9e <__ieee754_acosf+0x1a2>
 8013940:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013944:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8013aac <__ieee754_acosf+0x1b0>
 8013948:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8013ab0 <__ieee754_acosf+0x1b4>
 801394c:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8013ab4 <__ieee754_acosf+0x1b8>
 8013950:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013954:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8013ab8 <__ieee754_acosf+0x1bc>
 8013958:	eee7 6a27 	vfma.f32	s13, s14, s15
 801395c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8013abc <__ieee754_acosf+0x1c0>
 8013960:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013964:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8013ac0 <__ieee754_acosf+0x1c4>
 8013968:	eee7 6a27 	vfma.f32	s13, s14, s15
 801396c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8013ac4 <__ieee754_acosf+0x1c8>
 8013970:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013974:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8013ac8 <__ieee754_acosf+0x1cc>
 8013978:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801397c:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8013acc <__ieee754_acosf+0x1d0>
 8013980:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013984:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8013ad0 <__ieee754_acosf+0x1d4>
 8013988:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801398c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013990:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013998:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8013ad4 <__ieee754_acosf+0x1d8>
 801399c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80139a0:	eee0 7a46 	vfms.f32	s15, s0, s12
 80139a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80139a8:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8013ad8 <__ieee754_acosf+0x1dc>
 80139ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139b0:	e7b6      	b.n	8013920 <__ieee754_acosf+0x24>
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	eddf da3d 	vldr	s27, [pc, #244]	@ 8013aac <__ieee754_acosf+0x1b0>
 80139b8:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8013ab0 <__ieee754_acosf+0x1b4>
 80139bc:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8013ab8 <__ieee754_acosf+0x1bc>
 80139c0:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8013abc <__ieee754_acosf+0x1c0>
 80139c4:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8013ac0 <__ieee754_acosf+0x1c4>
 80139c8:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8013ac4 <__ieee754_acosf+0x1c8>
 80139cc:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8013ac8 <__ieee754_acosf+0x1cc>
 80139d0:	eddf aa38 	vldr	s21, [pc, #224]	@ 8013ab4 <__ieee754_acosf+0x1b8>
 80139d4:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8013acc <__ieee754_acosf+0x1d0>
 80139d8:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8013ad0 <__ieee754_acosf+0x1d4>
 80139dc:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80139e0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80139e4:	da28      	bge.n	8013a38 <__ieee754_acosf+0x13c>
 80139e6:	ee30 8a09 	vadd.f32	s16, s0, s18
 80139ea:	ee28 0a27 	vmul.f32	s0, s16, s15
 80139ee:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80139f2:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80139f6:	eeac ca80 	vfma.f32	s24, s25, s0
 80139fa:	eeaa aa80 	vfma.f32	s20, s21, s0
 80139fe:	eeec ba00 	vfma.f32	s23, s24, s0
 8013a02:	eeea 9a00 	vfma.f32	s19, s20, s0
 8013a06:	eeab ba80 	vfma.f32	s22, s23, s0
 8013a0a:	eea9 9a80 	vfma.f32	s18, s19, s0
 8013a0e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8013a12:	ee68 8a80 	vmul.f32	s17, s17, s0
 8013a16:	f7ff fd15 	bl	8013444 <__ieee754_sqrtf>
 8013a1a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8013a1e:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8013adc <__ieee754_acosf+0x1e0>
 8013a22:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013a26:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8013a2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013a2e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8013ae0 <__ieee754_acosf+0x1e4>
 8013a32:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013a36:	e773      	b.n	8013920 <__ieee754_acosf+0x24>
 8013a38:	ee39 8a40 	vsub.f32	s16, s18, s0
 8013a3c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013a40:	eeb0 0a48 	vmov.f32	s0, s16
 8013a44:	f7ff fcfe 	bl	8013444 <__ieee754_sqrtf>
 8013a48:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8013a4c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8013a50:	eeac ca88 	vfma.f32	s24, s25, s16
 8013a54:	eeaa aa88 	vfma.f32	s20, s21, s16
 8013a58:	eeec ba08 	vfma.f32	s23, s24, s16
 8013a5c:	ee10 3a10 	vmov	r3, s0
 8013a60:	eeab ba88 	vfma.f32	s22, s23, s16
 8013a64:	f36f 030b 	bfc	r3, #0, #12
 8013a68:	eeea 9a08 	vfma.f32	s19, s20, s16
 8013a6c:	ee07 3a90 	vmov	s15, r3
 8013a70:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8013a74:	eeb0 6a48 	vmov.f32	s12, s16
 8013a78:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8013a7c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8013a80:	ee70 6a27 	vadd.f32	s13, s0, s15
 8013a84:	ee68 8a88 	vmul.f32	s17, s17, s16
 8013a88:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013a8c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8013a90:	eea0 7a26 	vfma.f32	s14, s0, s13
 8013a94:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013a98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013a9c:	e740      	b.n	8013920 <__ieee754_acosf+0x24>
 8013a9e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8013ae4 <__ieee754_acosf+0x1e8>
 8013aa2:	e73d      	b.n	8013920 <__ieee754_acosf+0x24>
 8013aa4:	40490fdb 	.word	0x40490fdb
 8013aa8:	00000000 	.word	0x00000000
 8013aac:	3811ef08 	.word	0x3811ef08
 8013ab0:	3a4f7f04 	.word	0x3a4f7f04
 8013ab4:	bf303361 	.word	0xbf303361
 8013ab8:	bd241146 	.word	0xbd241146
 8013abc:	3e4e0aa8 	.word	0x3e4e0aa8
 8013ac0:	bea6b090 	.word	0xbea6b090
 8013ac4:	3e2aaaab 	.word	0x3e2aaaab
 8013ac8:	3d9dc62e 	.word	0x3d9dc62e
 8013acc:	4001572d 	.word	0x4001572d
 8013ad0:	c019d139 	.word	0xc019d139
 8013ad4:	33a22168 	.word	0x33a22168
 8013ad8:	3fc90fda 	.word	0x3fc90fda
 8013adc:	b3a22168 	.word	0xb3a22168
 8013ae0:	40490fda 	.word	0x40490fda
 8013ae4:	3fc90fdb 	.word	0x3fc90fdb

08013ae8 <__ieee754_powf>:
 8013ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013aec:	ee10 4a90 	vmov	r4, s1
 8013af0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8013af4:	ed2d 8b02 	vpush	{d8}
 8013af8:	ee10 6a10 	vmov	r6, s0
 8013afc:	eeb0 8a40 	vmov.f32	s16, s0
 8013b00:	eef0 8a60 	vmov.f32	s17, s1
 8013b04:	d10c      	bne.n	8013b20 <__ieee754_powf+0x38>
 8013b06:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8013b0a:	0076      	lsls	r6, r6, #1
 8013b0c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8013b10:	f240 8274 	bls.w	8013ffc <__ieee754_powf+0x514>
 8013b14:	ee38 0a28 	vadd.f32	s0, s16, s17
 8013b18:	ecbd 8b02 	vpop	{d8}
 8013b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b20:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8013b24:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8013b28:	d802      	bhi.n	8013b30 <__ieee754_powf+0x48>
 8013b2a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8013b2e:	d908      	bls.n	8013b42 <__ieee754_powf+0x5a>
 8013b30:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8013b34:	d1ee      	bne.n	8013b14 <__ieee754_powf+0x2c>
 8013b36:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8013b3a:	0064      	lsls	r4, r4, #1
 8013b3c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8013b40:	e7e6      	b.n	8013b10 <__ieee754_powf+0x28>
 8013b42:	2e00      	cmp	r6, #0
 8013b44:	da1f      	bge.n	8013b86 <__ieee754_powf+0x9e>
 8013b46:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8013b4a:	f080 8260 	bcs.w	801400e <__ieee754_powf+0x526>
 8013b4e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8013b52:	d32f      	bcc.n	8013bb4 <__ieee754_powf+0xcc>
 8013b54:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8013b58:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8013b5c:	fa49 f503 	asr.w	r5, r9, r3
 8013b60:	fa05 f303 	lsl.w	r3, r5, r3
 8013b64:	454b      	cmp	r3, r9
 8013b66:	d123      	bne.n	8013bb0 <__ieee754_powf+0xc8>
 8013b68:	f005 0501 	and.w	r5, r5, #1
 8013b6c:	f1c5 0502 	rsb	r5, r5, #2
 8013b70:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8013b74:	d11f      	bne.n	8013bb6 <__ieee754_powf+0xce>
 8013b76:	2c00      	cmp	r4, #0
 8013b78:	f280 8246 	bge.w	8014008 <__ieee754_powf+0x520>
 8013b7c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013b80:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013b84:	e7c8      	b.n	8013b18 <__ieee754_powf+0x30>
 8013b86:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8013b8a:	d111      	bne.n	8013bb0 <__ieee754_powf+0xc8>
 8013b8c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8013b90:	f000 8234 	beq.w	8013ffc <__ieee754_powf+0x514>
 8013b94:	d906      	bls.n	8013ba4 <__ieee754_powf+0xbc>
 8013b96:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8013eac <__ieee754_powf+0x3c4>
 8013b9a:	2c00      	cmp	r4, #0
 8013b9c:	bfa8      	it	ge
 8013b9e:	eeb0 0a68 	vmovge.f32	s0, s17
 8013ba2:	e7b9      	b.n	8013b18 <__ieee754_powf+0x30>
 8013ba4:	2c00      	cmp	r4, #0
 8013ba6:	f280 822c 	bge.w	8014002 <__ieee754_powf+0x51a>
 8013baa:	eeb1 0a68 	vneg.f32	s0, s17
 8013bae:	e7b3      	b.n	8013b18 <__ieee754_powf+0x30>
 8013bb0:	2500      	movs	r5, #0
 8013bb2:	e7dd      	b.n	8013b70 <__ieee754_powf+0x88>
 8013bb4:	2500      	movs	r5, #0
 8013bb6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8013bba:	d102      	bne.n	8013bc2 <__ieee754_powf+0xda>
 8013bbc:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013bc0:	e7aa      	b.n	8013b18 <__ieee754_powf+0x30>
 8013bc2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8013bc6:	f040 8227 	bne.w	8014018 <__ieee754_powf+0x530>
 8013bca:	2e00      	cmp	r6, #0
 8013bcc:	f2c0 8224 	blt.w	8014018 <__ieee754_powf+0x530>
 8013bd0:	eeb0 0a48 	vmov.f32	s0, s16
 8013bd4:	ecbd 8b02 	vpop	{d8}
 8013bd8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bdc:	f7ff bc32 	b.w	8013444 <__ieee754_sqrtf>
 8013be0:	2d01      	cmp	r5, #1
 8013be2:	d199      	bne.n	8013b18 <__ieee754_powf+0x30>
 8013be4:	eeb1 0a40 	vneg.f32	s0, s0
 8013be8:	e796      	b.n	8013b18 <__ieee754_powf+0x30>
 8013bea:	0ff0      	lsrs	r0, r6, #31
 8013bec:	3801      	subs	r0, #1
 8013bee:	ea55 0300 	orrs.w	r3, r5, r0
 8013bf2:	d104      	bne.n	8013bfe <__ieee754_powf+0x116>
 8013bf4:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013bf8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013bfc:	e78c      	b.n	8013b18 <__ieee754_powf+0x30>
 8013bfe:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8013c02:	d96d      	bls.n	8013ce0 <__ieee754_powf+0x1f8>
 8013c04:	4baa      	ldr	r3, [pc, #680]	@ (8013eb0 <__ieee754_powf+0x3c8>)
 8013c06:	4598      	cmp	r8, r3
 8013c08:	d808      	bhi.n	8013c1c <__ieee754_powf+0x134>
 8013c0a:	2c00      	cmp	r4, #0
 8013c0c:	da0b      	bge.n	8013c26 <__ieee754_powf+0x13e>
 8013c0e:	2000      	movs	r0, #0
 8013c10:	ecbd 8b02 	vpop	{d8}
 8013c14:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c18:	f000 bbea 	b.w	80143f0 <__math_oflowf>
 8013c1c:	4ba5      	ldr	r3, [pc, #660]	@ (8013eb4 <__ieee754_powf+0x3cc>)
 8013c1e:	4598      	cmp	r8, r3
 8013c20:	d908      	bls.n	8013c34 <__ieee754_powf+0x14c>
 8013c22:	2c00      	cmp	r4, #0
 8013c24:	dcf3      	bgt.n	8013c0e <__ieee754_powf+0x126>
 8013c26:	2000      	movs	r0, #0
 8013c28:	ecbd 8b02 	vpop	{d8}
 8013c2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c30:	f000 bbd8 	b.w	80143e4 <__math_uflowf>
 8013c34:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013c38:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c3c:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8013eb8 <__ieee754_powf+0x3d0>
 8013c40:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8013c44:	eee0 6a67 	vfms.f32	s13, s0, s15
 8013c48:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013c4c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8013c50:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013c54:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8013ebc <__ieee754_powf+0x3d4>
 8013c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c5c:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8013ec0 <__ieee754_powf+0x3d8>
 8013c60:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8013c64:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8013ec4 <__ieee754_powf+0x3dc>
 8013c68:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013c6c:	eeb0 7a67 	vmov.f32	s14, s15
 8013c70:	eea0 7a26 	vfma.f32	s14, s0, s13
 8013c74:	ee17 3a10 	vmov	r3, s14
 8013c78:	f36f 030b 	bfc	r3, #0, #12
 8013c7c:	ee07 3a10 	vmov	s14, r3
 8013c80:	eeb0 6a47 	vmov.f32	s12, s14
 8013c84:	eea0 6a66 	vfms.f32	s12, s0, s13
 8013c88:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013c8c:	3d01      	subs	r5, #1
 8013c8e:	4305      	orrs	r5, r0
 8013c90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c94:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8013c98:	f36f 040b 	bfc	r4, #0, #12
 8013c9c:	bf18      	it	ne
 8013c9e:	eeb0 8a66 	vmovne.f32	s16, s13
 8013ca2:	ee06 4a90 	vmov	s13, r4
 8013ca6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013caa:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8013cae:	ee67 7a26 	vmul.f32	s15, s14, s13
 8013cb2:	eee6 0a07 	vfma.f32	s1, s12, s14
 8013cb6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013cba:	ee17 1a10 	vmov	r1, s14
 8013cbe:	2900      	cmp	r1, #0
 8013cc0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013cc4:	f340 80dd 	ble.w	8013e82 <__ieee754_powf+0x39a>
 8013cc8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8013ccc:	f240 80ca 	bls.w	8013e64 <__ieee754_powf+0x37c>
 8013cd0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd8:	bf4c      	ite	mi
 8013cda:	2001      	movmi	r0, #1
 8013cdc:	2000      	movpl	r0, #0
 8013cde:	e797      	b.n	8013c10 <__ieee754_powf+0x128>
 8013ce0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8013ce4:	bf01      	itttt	eq
 8013ce6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8013ec8 <__ieee754_powf+0x3e0>
 8013cea:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8013cee:	f06f 0317 	mvneq.w	r3, #23
 8013cf2:	ee17 7a90 	vmoveq	r7, s15
 8013cf6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8013cfa:	bf18      	it	ne
 8013cfc:	2300      	movne	r3, #0
 8013cfe:	3a7f      	subs	r2, #127	@ 0x7f
 8013d00:	441a      	add	r2, r3
 8013d02:	4b72      	ldr	r3, [pc, #456]	@ (8013ecc <__ieee754_powf+0x3e4>)
 8013d04:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8013d08:	429f      	cmp	r7, r3
 8013d0a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8013d0e:	dd06      	ble.n	8013d1e <__ieee754_powf+0x236>
 8013d10:	4b6f      	ldr	r3, [pc, #444]	@ (8013ed0 <__ieee754_powf+0x3e8>)
 8013d12:	429f      	cmp	r7, r3
 8013d14:	f340 80a4 	ble.w	8013e60 <__ieee754_powf+0x378>
 8013d18:	3201      	adds	r2, #1
 8013d1a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8013d1e:	2600      	movs	r6, #0
 8013d20:	4b6c      	ldr	r3, [pc, #432]	@ (8013ed4 <__ieee754_powf+0x3ec>)
 8013d22:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8013d26:	ee07 1a10 	vmov	s14, r1
 8013d2a:	edd3 5a00 	vldr	s11, [r3]
 8013d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8013ed8 <__ieee754_powf+0x3f0>)
 8013d30:	ee75 7a87 	vadd.f32	s15, s11, s14
 8013d34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013d38:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8013d3c:	1049      	asrs	r1, r1, #1
 8013d3e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8013d42:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8013d46:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8013d4a:	ee37 6a65 	vsub.f32	s12, s14, s11
 8013d4e:	ee07 1a90 	vmov	s15, r1
 8013d52:	ee26 5a24 	vmul.f32	s10, s12, s9
 8013d56:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8013d5a:	ee15 7a10 	vmov	r7, s10
 8013d5e:	401f      	ands	r7, r3
 8013d60:	ee06 7a90 	vmov	s13, r7
 8013d64:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8013d68:	ee37 7a65 	vsub.f32	s14, s14, s11
 8013d6c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8013d70:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013d74:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8013edc <__ieee754_powf+0x3f4>
 8013d78:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8013ee0 <__ieee754_powf+0x3f8>
 8013d7c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013d80:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8013ee4 <__ieee754_powf+0x3fc>
 8013d84:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013d88:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8013eb8 <__ieee754_powf+0x3d0>
 8013d8c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013d90:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8013ee8 <__ieee754_powf+0x400>
 8013d94:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013d98:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8013eec <__ieee754_powf+0x404>
 8013d9c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8013da0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013da4:	ee35 7a26 	vadd.f32	s14, s10, s13
 8013da8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8013dac:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013db0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8013db4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8013db8:	eef0 5a67 	vmov.f32	s11, s15
 8013dbc:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8013dc0:	ee75 5a87 	vadd.f32	s11, s11, s14
 8013dc4:	ee15 1a90 	vmov	r1, s11
 8013dc8:	4019      	ands	r1, r3
 8013dca:	ee05 1a90 	vmov	s11, r1
 8013dce:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8013dd2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8013dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dda:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013dde:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013de2:	eeb0 6a67 	vmov.f32	s12, s15
 8013de6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013dea:	ee16 1a10 	vmov	r1, s12
 8013dee:	4019      	ands	r1, r3
 8013df0:	ee06 1a10 	vmov	s12, r1
 8013df4:	eeb0 7a46 	vmov.f32	s14, s12
 8013df8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8013dfc:	493c      	ldr	r1, [pc, #240]	@ (8013ef0 <__ieee754_powf+0x408>)
 8013dfe:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8013e02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e06:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8013ef4 <__ieee754_powf+0x40c>
 8013e0a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8013ef8 <__ieee754_powf+0x410>
 8013e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e12:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8013efc <__ieee754_powf+0x414>
 8013e16:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013e1a:	ed91 7a00 	vldr	s14, [r1]
 8013e1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013e22:	ee07 2a10 	vmov	s14, r2
 8013e26:	4a36      	ldr	r2, [pc, #216]	@ (8013f00 <__ieee754_powf+0x418>)
 8013e28:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8013e2c:	eeb0 7a67 	vmov.f32	s14, s15
 8013e30:	eea6 7a25 	vfma.f32	s14, s12, s11
 8013e34:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8013e38:	ed92 5a00 	vldr	s10, [r2]
 8013e3c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8013e40:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013e44:	ee17 2a10 	vmov	r2, s14
 8013e48:	401a      	ands	r2, r3
 8013e4a:	ee07 2a10 	vmov	s14, r2
 8013e4e:	ee77 6a66 	vsub.f32	s13, s14, s13
 8013e52:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8013e56:	eee6 6a65 	vfms.f32	s13, s12, s11
 8013e5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013e5e:	e715      	b.n	8013c8c <__ieee754_powf+0x1a4>
 8013e60:	2601      	movs	r6, #1
 8013e62:	e75d      	b.n	8013d20 <__ieee754_powf+0x238>
 8013e64:	d152      	bne.n	8013f0c <__ieee754_powf+0x424>
 8013e66:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8013f04 <__ieee754_powf+0x41c>
 8013e6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013e6e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013e72:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e7a:	f73f af29 	bgt.w	8013cd0 <__ieee754_powf+0x1e8>
 8013e7e:	2386      	movs	r3, #134	@ 0x86
 8013e80:	e048      	b.n	8013f14 <__ieee754_powf+0x42c>
 8013e82:	4a21      	ldr	r2, [pc, #132]	@ (8013f08 <__ieee754_powf+0x420>)
 8013e84:	4293      	cmp	r3, r2
 8013e86:	d907      	bls.n	8013e98 <__ieee754_powf+0x3b0>
 8013e88:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e90:	bf4c      	ite	mi
 8013e92:	2001      	movmi	r0, #1
 8013e94:	2000      	movpl	r0, #0
 8013e96:	e6c7      	b.n	8013c28 <__ieee754_powf+0x140>
 8013e98:	d138      	bne.n	8013f0c <__ieee754_powf+0x424>
 8013e9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013e9e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ea6:	dbea      	blt.n	8013e7e <__ieee754_powf+0x396>
 8013ea8:	e7ee      	b.n	8013e88 <__ieee754_powf+0x3a0>
 8013eaa:	bf00      	nop
 8013eac:	00000000 	.word	0x00000000
 8013eb0:	3f7ffff3 	.word	0x3f7ffff3
 8013eb4:	3f800007 	.word	0x3f800007
 8013eb8:	3eaaaaab 	.word	0x3eaaaaab
 8013ebc:	3fb8aa00 	.word	0x3fb8aa00
 8013ec0:	3fb8aa3b 	.word	0x3fb8aa3b
 8013ec4:	36eca570 	.word	0x36eca570
 8013ec8:	4b800000 	.word	0x4b800000
 8013ecc:	001cc471 	.word	0x001cc471
 8013ed0:	005db3d6 	.word	0x005db3d6
 8013ed4:	080157ac 	.word	0x080157ac
 8013ed8:	fffff000 	.word	0xfffff000
 8013edc:	3e6c3255 	.word	0x3e6c3255
 8013ee0:	3e53f142 	.word	0x3e53f142
 8013ee4:	3e8ba305 	.word	0x3e8ba305
 8013ee8:	3edb6db7 	.word	0x3edb6db7
 8013eec:	3f19999a 	.word	0x3f19999a
 8013ef0:	0801579c 	.word	0x0801579c
 8013ef4:	3f76384f 	.word	0x3f76384f
 8013ef8:	3f763800 	.word	0x3f763800
 8013efc:	369dc3a0 	.word	0x369dc3a0
 8013f00:	080157a4 	.word	0x080157a4
 8013f04:	3338aa3c 	.word	0x3338aa3c
 8013f08:	43160000 	.word	0x43160000
 8013f0c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8013f10:	d96f      	bls.n	8013ff2 <__ieee754_powf+0x50a>
 8013f12:	15db      	asrs	r3, r3, #23
 8013f14:	3b7e      	subs	r3, #126	@ 0x7e
 8013f16:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8013f1a:	4118      	asrs	r0, r3
 8013f1c:	4408      	add	r0, r1
 8013f1e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013f22:	4a4e      	ldr	r2, [pc, #312]	@ (801405c <__ieee754_powf+0x574>)
 8013f24:	3b7f      	subs	r3, #127	@ 0x7f
 8013f26:	411a      	asrs	r2, r3
 8013f28:	4002      	ands	r2, r0
 8013f2a:	ee07 2a10 	vmov	s14, r2
 8013f2e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8013f32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8013f36:	f1c3 0317 	rsb	r3, r3, #23
 8013f3a:	4118      	asrs	r0, r3
 8013f3c:	2900      	cmp	r1, #0
 8013f3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f42:	bfb8      	it	lt
 8013f44:	4240      	neglt	r0, r0
 8013f46:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8013f4a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8014060 <__ieee754_powf+0x578>
 8013f4e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8014064 <__ieee754_powf+0x57c>
 8013f52:	ee16 3a90 	vmov	r3, s13
 8013f56:	f36f 030b 	bfc	r3, #0, #12
 8013f5a:	ee06 3a90 	vmov	s13, r3
 8013f5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013f62:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013f66:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013f6a:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8014068 <__ieee754_powf+0x580>
 8013f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f72:	eee0 7a87 	vfma.f32	s15, s1, s14
 8013f76:	eeb0 7a67 	vmov.f32	s14, s15
 8013f7a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013f7e:	eef0 5a47 	vmov.f32	s11, s14
 8013f82:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8013f86:	ee67 6a07 	vmul.f32	s13, s14, s14
 8013f8a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013f8e:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 801406c <__ieee754_powf+0x584>
 8013f92:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8014070 <__ieee754_powf+0x588>
 8013f96:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013f9a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8014074 <__ieee754_powf+0x58c>
 8013f9e:	eee6 5a26 	vfma.f32	s11, s12, s13
 8013fa2:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8014078 <__ieee754_powf+0x590>
 8013fa6:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8013faa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801407c <__ieee754_powf+0x594>
 8013fae:	eee6 5a26 	vfma.f32	s11, s12, s13
 8013fb2:	eeb0 6a47 	vmov.f32	s12, s14
 8013fb6:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8013fba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8013fbe:	ee67 5a06 	vmul.f32	s11, s14, s12
 8013fc2:	ee36 6a66 	vsub.f32	s12, s12, s13
 8013fc6:	eee7 7a27 	vfma.f32	s15, s14, s15
 8013fca:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8013fce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fd6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013fda:	ee10 3a10 	vmov	r3, s0
 8013fde:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013fe2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013fe6:	da06      	bge.n	8013ff6 <__ieee754_powf+0x50e>
 8013fe8:	f000 f97c 	bl	80142e4 <scalbnf>
 8013fec:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013ff0:	e592      	b.n	8013b18 <__ieee754_powf+0x30>
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	e7a7      	b.n	8013f46 <__ieee754_powf+0x45e>
 8013ff6:	ee00 3a10 	vmov	s0, r3
 8013ffa:	e7f7      	b.n	8013fec <__ieee754_powf+0x504>
 8013ffc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014000:	e58a      	b.n	8013b18 <__ieee754_powf+0x30>
 8014002:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8014080 <__ieee754_powf+0x598>
 8014006:	e587      	b.n	8013b18 <__ieee754_powf+0x30>
 8014008:	eeb0 0a48 	vmov.f32	s0, s16
 801400c:	e584      	b.n	8013b18 <__ieee754_powf+0x30>
 801400e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8014012:	f43f adbb 	beq.w	8013b8c <__ieee754_powf+0xa4>
 8014016:	2502      	movs	r5, #2
 8014018:	eeb0 0a48 	vmov.f32	s0, s16
 801401c:	f7ff f980 	bl	8013320 <fabsf>
 8014020:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8014024:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8014028:	4647      	mov	r7, r8
 801402a:	d003      	beq.n	8014034 <__ieee754_powf+0x54c>
 801402c:	f1b8 0f00 	cmp.w	r8, #0
 8014030:	f47f addb 	bne.w	8013bea <__ieee754_powf+0x102>
 8014034:	2c00      	cmp	r4, #0
 8014036:	bfbc      	itt	lt
 8014038:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801403c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8014040:	2e00      	cmp	r6, #0
 8014042:	f6bf ad69 	bge.w	8013b18 <__ieee754_powf+0x30>
 8014046:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801404a:	ea58 0805 	orrs.w	r8, r8, r5
 801404e:	f47f adc7 	bne.w	8013be0 <__ieee754_powf+0xf8>
 8014052:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014056:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801405a:	e55d      	b.n	8013b18 <__ieee754_powf+0x30>
 801405c:	ff800000 	.word	0xff800000
 8014060:	3f317218 	.word	0x3f317218
 8014064:	3f317200 	.word	0x3f317200
 8014068:	35bfbe8c 	.word	0x35bfbe8c
 801406c:	b5ddea0e 	.word	0xb5ddea0e
 8014070:	3331bb4c 	.word	0x3331bb4c
 8014074:	388ab355 	.word	0x388ab355
 8014078:	bb360b61 	.word	0xbb360b61
 801407c:	3e2aaaab 	.word	0x3e2aaaab
 8014080:	00000000 	.word	0x00000000

08014084 <__ieee754_rem_pio2f>:
 8014084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014086:	ee10 6a10 	vmov	r6, s0
 801408a:	4b88      	ldr	r3, [pc, #544]	@ (80142ac <__ieee754_rem_pio2f+0x228>)
 801408c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8014090:	429d      	cmp	r5, r3
 8014092:	b087      	sub	sp, #28
 8014094:	4604      	mov	r4, r0
 8014096:	d805      	bhi.n	80140a4 <__ieee754_rem_pio2f+0x20>
 8014098:	2300      	movs	r3, #0
 801409a:	ed80 0a00 	vstr	s0, [r0]
 801409e:	6043      	str	r3, [r0, #4]
 80140a0:	2000      	movs	r0, #0
 80140a2:	e022      	b.n	80140ea <__ieee754_rem_pio2f+0x66>
 80140a4:	4b82      	ldr	r3, [pc, #520]	@ (80142b0 <__ieee754_rem_pio2f+0x22c>)
 80140a6:	429d      	cmp	r5, r3
 80140a8:	d83a      	bhi.n	8014120 <__ieee754_rem_pio2f+0x9c>
 80140aa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80140ae:	2e00      	cmp	r6, #0
 80140b0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80142b4 <__ieee754_rem_pio2f+0x230>
 80140b4:	4a80      	ldr	r2, [pc, #512]	@ (80142b8 <__ieee754_rem_pio2f+0x234>)
 80140b6:	f023 030f 	bic.w	r3, r3, #15
 80140ba:	dd18      	ble.n	80140ee <__ieee754_rem_pio2f+0x6a>
 80140bc:	4293      	cmp	r3, r2
 80140be:	ee70 7a47 	vsub.f32	s15, s0, s14
 80140c2:	bf09      	itett	eq
 80140c4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80142bc <__ieee754_rem_pio2f+0x238>
 80140c8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80142c0 <__ieee754_rem_pio2f+0x23c>
 80140cc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80142c4 <__ieee754_rem_pio2f+0x240>
 80140d0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80140d4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80140d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80140dc:	ed80 7a00 	vstr	s14, [r0]
 80140e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80140e4:	edc0 7a01 	vstr	s15, [r0, #4]
 80140e8:	2001      	movs	r0, #1
 80140ea:	b007      	add	sp, #28
 80140ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140ee:	4293      	cmp	r3, r2
 80140f0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80140f4:	bf09      	itett	eq
 80140f6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80142bc <__ieee754_rem_pio2f+0x238>
 80140fa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80142c0 <__ieee754_rem_pio2f+0x23c>
 80140fe:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80142c4 <__ieee754_rem_pio2f+0x240>
 8014102:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8014106:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801410a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801410e:	ed80 7a00 	vstr	s14, [r0]
 8014112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014116:	edc0 7a01 	vstr	s15, [r0, #4]
 801411a:	f04f 30ff 	mov.w	r0, #4294967295
 801411e:	e7e4      	b.n	80140ea <__ieee754_rem_pio2f+0x66>
 8014120:	4b69      	ldr	r3, [pc, #420]	@ (80142c8 <__ieee754_rem_pio2f+0x244>)
 8014122:	429d      	cmp	r5, r3
 8014124:	d873      	bhi.n	801420e <__ieee754_rem_pio2f+0x18a>
 8014126:	f7ff f8fb 	bl	8013320 <fabsf>
 801412a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80142cc <__ieee754_rem_pio2f+0x248>
 801412e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014132:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801413a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801413e:	ee17 0a90 	vmov	r0, s15
 8014142:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80142b4 <__ieee754_rem_pio2f+0x230>
 8014146:	eea7 0a67 	vfms.f32	s0, s14, s15
 801414a:	281f      	cmp	r0, #31
 801414c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80142c0 <__ieee754_rem_pio2f+0x23c>
 8014150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014154:	eeb1 6a47 	vneg.f32	s12, s14
 8014158:	ee70 6a67 	vsub.f32	s13, s0, s15
 801415c:	ee16 1a90 	vmov	r1, s13
 8014160:	dc09      	bgt.n	8014176 <__ieee754_rem_pio2f+0xf2>
 8014162:	4a5b      	ldr	r2, [pc, #364]	@ (80142d0 <__ieee754_rem_pio2f+0x24c>)
 8014164:	1e47      	subs	r7, r0, #1
 8014166:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801416a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801416e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8014172:	4293      	cmp	r3, r2
 8014174:	d107      	bne.n	8014186 <__ieee754_rem_pio2f+0x102>
 8014176:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801417a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801417e:	2a08      	cmp	r2, #8
 8014180:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8014184:	dc14      	bgt.n	80141b0 <__ieee754_rem_pio2f+0x12c>
 8014186:	6021      	str	r1, [r4, #0]
 8014188:	ed94 7a00 	vldr	s14, [r4]
 801418c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014190:	2e00      	cmp	r6, #0
 8014192:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014196:	ed84 0a01 	vstr	s0, [r4, #4]
 801419a:	daa6      	bge.n	80140ea <__ieee754_rem_pio2f+0x66>
 801419c:	eeb1 7a47 	vneg.f32	s14, s14
 80141a0:	eeb1 0a40 	vneg.f32	s0, s0
 80141a4:	ed84 7a00 	vstr	s14, [r4]
 80141a8:	ed84 0a01 	vstr	s0, [r4, #4]
 80141ac:	4240      	negs	r0, r0
 80141ae:	e79c      	b.n	80140ea <__ieee754_rem_pio2f+0x66>
 80141b0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80142bc <__ieee754_rem_pio2f+0x238>
 80141b4:	eef0 6a40 	vmov.f32	s13, s0
 80141b8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80141bc:	ee70 7a66 	vsub.f32	s15, s0, s13
 80141c0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80141c4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80142c4 <__ieee754_rem_pio2f+0x240>
 80141c8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80141cc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80141d0:	ee15 2a90 	vmov	r2, s11
 80141d4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80141d8:	1a5b      	subs	r3, r3, r1
 80141da:	2b19      	cmp	r3, #25
 80141dc:	dc04      	bgt.n	80141e8 <__ieee754_rem_pio2f+0x164>
 80141de:	edc4 5a00 	vstr	s11, [r4]
 80141e2:	eeb0 0a66 	vmov.f32	s0, s13
 80141e6:	e7cf      	b.n	8014188 <__ieee754_rem_pio2f+0x104>
 80141e8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80142d4 <__ieee754_rem_pio2f+0x250>
 80141ec:	eeb0 0a66 	vmov.f32	s0, s13
 80141f0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80141f4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80141f8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80142d8 <__ieee754_rem_pio2f+0x254>
 80141fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014200:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014204:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014208:	ed84 7a00 	vstr	s14, [r4]
 801420c:	e7bc      	b.n	8014188 <__ieee754_rem_pio2f+0x104>
 801420e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8014212:	d306      	bcc.n	8014222 <__ieee754_rem_pio2f+0x19e>
 8014214:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014218:	edc0 7a01 	vstr	s15, [r0, #4]
 801421c:	edc0 7a00 	vstr	s15, [r0]
 8014220:	e73e      	b.n	80140a0 <__ieee754_rem_pio2f+0x1c>
 8014222:	15ea      	asrs	r2, r5, #23
 8014224:	3a86      	subs	r2, #134	@ 0x86
 8014226:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801422a:	ee07 3a90 	vmov	s15, r3
 801422e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014232:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80142dc <__ieee754_rem_pio2f+0x258>
 8014236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801423a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801423e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014242:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014246:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801424a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801424e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014252:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014256:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801425a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014262:	edcd 7a05 	vstr	s15, [sp, #20]
 8014266:	d11e      	bne.n	80142a6 <__ieee754_rem_pio2f+0x222>
 8014268:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014270:	bf0c      	ite	eq
 8014272:	2301      	moveq	r3, #1
 8014274:	2302      	movne	r3, #2
 8014276:	491a      	ldr	r1, [pc, #104]	@ (80142e0 <__ieee754_rem_pio2f+0x25c>)
 8014278:	9101      	str	r1, [sp, #4]
 801427a:	2102      	movs	r1, #2
 801427c:	9100      	str	r1, [sp, #0]
 801427e:	a803      	add	r0, sp, #12
 8014280:	4621      	mov	r1, r4
 8014282:	f000 f8bb 	bl	80143fc <__kernel_rem_pio2f>
 8014286:	2e00      	cmp	r6, #0
 8014288:	f6bf af2f 	bge.w	80140ea <__ieee754_rem_pio2f+0x66>
 801428c:	edd4 7a00 	vldr	s15, [r4]
 8014290:	eef1 7a67 	vneg.f32	s15, s15
 8014294:	edc4 7a00 	vstr	s15, [r4]
 8014298:	edd4 7a01 	vldr	s15, [r4, #4]
 801429c:	eef1 7a67 	vneg.f32	s15, s15
 80142a0:	edc4 7a01 	vstr	s15, [r4, #4]
 80142a4:	e782      	b.n	80141ac <__ieee754_rem_pio2f+0x128>
 80142a6:	2303      	movs	r3, #3
 80142a8:	e7e5      	b.n	8014276 <__ieee754_rem_pio2f+0x1f2>
 80142aa:	bf00      	nop
 80142ac:	3f490fd8 	.word	0x3f490fd8
 80142b0:	4016cbe3 	.word	0x4016cbe3
 80142b4:	3fc90f80 	.word	0x3fc90f80
 80142b8:	3fc90fd0 	.word	0x3fc90fd0
 80142bc:	37354400 	.word	0x37354400
 80142c0:	37354443 	.word	0x37354443
 80142c4:	2e85a308 	.word	0x2e85a308
 80142c8:	43490f80 	.word	0x43490f80
 80142cc:	3f22f984 	.word	0x3f22f984
 80142d0:	080157b4 	.word	0x080157b4
 80142d4:	2e85a300 	.word	0x2e85a300
 80142d8:	248d3132 	.word	0x248d3132
 80142dc:	43800000 	.word	0x43800000
 80142e0:	08015834 	.word	0x08015834

080142e4 <scalbnf>:
 80142e4:	ee10 3a10 	vmov	r3, s0
 80142e8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80142ec:	d02b      	beq.n	8014346 <scalbnf+0x62>
 80142ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80142f2:	d302      	bcc.n	80142fa <scalbnf+0x16>
 80142f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80142f8:	4770      	bx	lr
 80142fa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80142fe:	d123      	bne.n	8014348 <scalbnf+0x64>
 8014300:	4b24      	ldr	r3, [pc, #144]	@ (8014394 <scalbnf+0xb0>)
 8014302:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8014398 <scalbnf+0xb4>
 8014306:	4298      	cmp	r0, r3
 8014308:	ee20 0a27 	vmul.f32	s0, s0, s15
 801430c:	db17      	blt.n	801433e <scalbnf+0x5a>
 801430e:	ee10 3a10 	vmov	r3, s0
 8014312:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014316:	3a19      	subs	r2, #25
 8014318:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801431c:	4288      	cmp	r0, r1
 801431e:	dd15      	ble.n	801434c <scalbnf+0x68>
 8014320:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801439c <scalbnf+0xb8>
 8014324:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80143a0 <scalbnf+0xbc>
 8014328:	ee10 3a10 	vmov	r3, s0
 801432c:	eeb0 7a67 	vmov.f32	s14, s15
 8014330:	2b00      	cmp	r3, #0
 8014332:	bfb8      	it	lt
 8014334:	eef0 7a66 	vmovlt.f32	s15, s13
 8014338:	ee27 0a87 	vmul.f32	s0, s15, s14
 801433c:	4770      	bx	lr
 801433e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80143a4 <scalbnf+0xc0>
 8014342:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014346:	4770      	bx	lr
 8014348:	0dd2      	lsrs	r2, r2, #23
 801434a:	e7e5      	b.n	8014318 <scalbnf+0x34>
 801434c:	4410      	add	r0, r2
 801434e:	28fe      	cmp	r0, #254	@ 0xfe
 8014350:	dce6      	bgt.n	8014320 <scalbnf+0x3c>
 8014352:	2800      	cmp	r0, #0
 8014354:	dd06      	ble.n	8014364 <scalbnf+0x80>
 8014356:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801435a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801435e:	ee00 3a10 	vmov	s0, r3
 8014362:	4770      	bx	lr
 8014364:	f110 0f16 	cmn.w	r0, #22
 8014368:	da09      	bge.n	801437e <scalbnf+0x9a>
 801436a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80143a4 <scalbnf+0xc0>
 801436e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80143a8 <scalbnf+0xc4>
 8014372:	ee10 3a10 	vmov	r3, s0
 8014376:	eeb0 7a67 	vmov.f32	s14, s15
 801437a:	2b00      	cmp	r3, #0
 801437c:	e7d9      	b.n	8014332 <scalbnf+0x4e>
 801437e:	3019      	adds	r0, #25
 8014380:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014384:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014388:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80143ac <scalbnf+0xc8>
 801438c:	ee07 3a90 	vmov	s15, r3
 8014390:	e7d7      	b.n	8014342 <scalbnf+0x5e>
 8014392:	bf00      	nop
 8014394:	ffff3cb0 	.word	0xffff3cb0
 8014398:	4c000000 	.word	0x4c000000
 801439c:	7149f2ca 	.word	0x7149f2ca
 80143a0:	f149f2ca 	.word	0xf149f2ca
 80143a4:	0da24260 	.word	0x0da24260
 80143a8:	8da24260 	.word	0x8da24260
 80143ac:	33000000 	.word	0x33000000

080143b0 <with_errnof>:
 80143b0:	b510      	push	{r4, lr}
 80143b2:	ed2d 8b02 	vpush	{d8}
 80143b6:	eeb0 8a40 	vmov.f32	s16, s0
 80143ba:	4604      	mov	r4, r0
 80143bc:	f7fb fb94 	bl	800fae8 <__errno>
 80143c0:	eeb0 0a48 	vmov.f32	s0, s16
 80143c4:	ecbd 8b02 	vpop	{d8}
 80143c8:	6004      	str	r4, [r0, #0]
 80143ca:	bd10      	pop	{r4, pc}

080143cc <xflowf>:
 80143cc:	b130      	cbz	r0, 80143dc <xflowf+0x10>
 80143ce:	eef1 7a40 	vneg.f32	s15, s0
 80143d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80143d6:	2022      	movs	r0, #34	@ 0x22
 80143d8:	f7ff bfea 	b.w	80143b0 <with_errnof>
 80143dc:	eef0 7a40 	vmov.f32	s15, s0
 80143e0:	e7f7      	b.n	80143d2 <xflowf+0x6>
	...

080143e4 <__math_uflowf>:
 80143e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80143ec <__math_uflowf+0x8>
 80143e8:	f7ff bff0 	b.w	80143cc <xflowf>
 80143ec:	10000000 	.word	0x10000000

080143f0 <__math_oflowf>:
 80143f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80143f8 <__math_oflowf+0x8>
 80143f4:	f7ff bfea 	b.w	80143cc <xflowf>
 80143f8:	70000000 	.word	0x70000000

080143fc <__kernel_rem_pio2f>:
 80143fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014400:	ed2d 8b04 	vpush	{d8-d9}
 8014404:	b0d9      	sub	sp, #356	@ 0x164
 8014406:	4690      	mov	r8, r2
 8014408:	9001      	str	r0, [sp, #4]
 801440a:	4ab6      	ldr	r2, [pc, #728]	@ (80146e4 <__kernel_rem_pio2f+0x2e8>)
 801440c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801440e:	f118 0f04 	cmn.w	r8, #4
 8014412:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8014416:	460f      	mov	r7, r1
 8014418:	f103 3bff 	add.w	fp, r3, #4294967295
 801441c:	db26      	blt.n	801446c <__kernel_rem_pio2f+0x70>
 801441e:	f1b8 0203 	subs.w	r2, r8, #3
 8014422:	bf48      	it	mi
 8014424:	f108 0204 	addmi.w	r2, r8, #4
 8014428:	10d2      	asrs	r2, r2, #3
 801442a:	1c55      	adds	r5, r2, #1
 801442c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801442e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80146f4 <__kernel_rem_pio2f+0x2f8>
 8014432:	00e8      	lsls	r0, r5, #3
 8014434:	eba2 060b 	sub.w	r6, r2, fp
 8014438:	9002      	str	r0, [sp, #8]
 801443a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801443e:	eb0a 0c0b 	add.w	ip, sl, fp
 8014442:	ac1c      	add	r4, sp, #112	@ 0x70
 8014444:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8014448:	2000      	movs	r0, #0
 801444a:	4560      	cmp	r0, ip
 801444c:	dd10      	ble.n	8014470 <__kernel_rem_pio2f+0x74>
 801444e:	a91c      	add	r1, sp, #112	@ 0x70
 8014450:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014454:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8014458:	2600      	movs	r6, #0
 801445a:	4556      	cmp	r6, sl
 801445c:	dc24      	bgt.n	80144a8 <__kernel_rem_pio2f+0xac>
 801445e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014462:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80146f4 <__kernel_rem_pio2f+0x2f8>
 8014466:	4684      	mov	ip, r0
 8014468:	2400      	movs	r4, #0
 801446a:	e016      	b.n	801449a <__kernel_rem_pio2f+0x9e>
 801446c:	2200      	movs	r2, #0
 801446e:	e7dc      	b.n	801442a <__kernel_rem_pio2f+0x2e>
 8014470:	42c6      	cmn	r6, r0
 8014472:	bf5d      	ittte	pl
 8014474:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8014478:	ee07 1a90 	vmovpl	s15, r1
 801447c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014480:	eef0 7a47 	vmovmi.f32	s15, s14
 8014484:	ece4 7a01 	vstmia	r4!, {s15}
 8014488:	3001      	adds	r0, #1
 801448a:	e7de      	b.n	801444a <__kernel_rem_pio2f+0x4e>
 801448c:	ecfe 6a01 	vldmia	lr!, {s13}
 8014490:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014494:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014498:	3401      	adds	r4, #1
 801449a:	455c      	cmp	r4, fp
 801449c:	ddf6      	ble.n	801448c <__kernel_rem_pio2f+0x90>
 801449e:	ece9 7a01 	vstmia	r9!, {s15}
 80144a2:	3601      	adds	r6, #1
 80144a4:	3004      	adds	r0, #4
 80144a6:	e7d8      	b.n	801445a <__kernel_rem_pio2f+0x5e>
 80144a8:	a908      	add	r1, sp, #32
 80144aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80144ae:	9104      	str	r1, [sp, #16]
 80144b0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80144b2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80146f0 <__kernel_rem_pio2f+0x2f4>
 80144b6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80146ec <__kernel_rem_pio2f+0x2f0>
 80144ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80144be:	9203      	str	r2, [sp, #12]
 80144c0:	4654      	mov	r4, sl
 80144c2:	00a2      	lsls	r2, r4, #2
 80144c4:	9205      	str	r2, [sp, #20]
 80144c6:	aa58      	add	r2, sp, #352	@ 0x160
 80144c8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80144cc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80144d0:	a944      	add	r1, sp, #272	@ 0x110
 80144d2:	aa08      	add	r2, sp, #32
 80144d4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80144d8:	4694      	mov	ip, r2
 80144da:	4626      	mov	r6, r4
 80144dc:	2e00      	cmp	r6, #0
 80144de:	dc4c      	bgt.n	801457a <__kernel_rem_pio2f+0x17e>
 80144e0:	4628      	mov	r0, r5
 80144e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80144e6:	f7ff fefd 	bl	80142e4 <scalbnf>
 80144ea:	eeb0 8a40 	vmov.f32	s16, s0
 80144ee:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80144f2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80144f6:	f000 f9e9 	bl	80148cc <floorf>
 80144fa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80144fe:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014502:	2d00      	cmp	r5, #0
 8014504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014508:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801450c:	ee17 9a90 	vmov	r9, s15
 8014510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014514:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014518:	dd41      	ble.n	801459e <__kernel_rem_pio2f+0x1a2>
 801451a:	f104 3cff 	add.w	ip, r4, #4294967295
 801451e:	a908      	add	r1, sp, #32
 8014520:	f1c5 0e08 	rsb	lr, r5, #8
 8014524:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8014528:	fa46 f00e 	asr.w	r0, r6, lr
 801452c:	4481      	add	r9, r0
 801452e:	fa00 f00e 	lsl.w	r0, r0, lr
 8014532:	1a36      	subs	r6, r6, r0
 8014534:	f1c5 0007 	rsb	r0, r5, #7
 8014538:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801453c:	4106      	asrs	r6, r0
 801453e:	2e00      	cmp	r6, #0
 8014540:	dd3c      	ble.n	80145bc <__kernel_rem_pio2f+0x1c0>
 8014542:	f04f 0e00 	mov.w	lr, #0
 8014546:	f109 0901 	add.w	r9, r9, #1
 801454a:	4670      	mov	r0, lr
 801454c:	4574      	cmp	r4, lr
 801454e:	dc68      	bgt.n	8014622 <__kernel_rem_pio2f+0x226>
 8014550:	2d00      	cmp	r5, #0
 8014552:	dd03      	ble.n	801455c <__kernel_rem_pio2f+0x160>
 8014554:	2d01      	cmp	r5, #1
 8014556:	d074      	beq.n	8014642 <__kernel_rem_pio2f+0x246>
 8014558:	2d02      	cmp	r5, #2
 801455a:	d07d      	beq.n	8014658 <__kernel_rem_pio2f+0x25c>
 801455c:	2e02      	cmp	r6, #2
 801455e:	d12d      	bne.n	80145bc <__kernel_rem_pio2f+0x1c0>
 8014560:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014564:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014568:	b340      	cbz	r0, 80145bc <__kernel_rem_pio2f+0x1c0>
 801456a:	4628      	mov	r0, r5
 801456c:	9306      	str	r3, [sp, #24]
 801456e:	f7ff feb9 	bl	80142e4 <scalbnf>
 8014572:	9b06      	ldr	r3, [sp, #24]
 8014574:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014578:	e020      	b.n	80145bc <__kernel_rem_pio2f+0x1c0>
 801457a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801457e:	3e01      	subs	r6, #1
 8014580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014588:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801458c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014590:	ecac 0a01 	vstmia	ip!, {s0}
 8014594:	ed30 0a01 	vldmdb	r0!, {s0}
 8014598:	ee37 0a80 	vadd.f32	s0, s15, s0
 801459c:	e79e      	b.n	80144dc <__kernel_rem_pio2f+0xe0>
 801459e:	d105      	bne.n	80145ac <__kernel_rem_pio2f+0x1b0>
 80145a0:	1e60      	subs	r0, r4, #1
 80145a2:	a908      	add	r1, sp, #32
 80145a4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80145a8:	11f6      	asrs	r6, r6, #7
 80145aa:	e7c8      	b.n	801453e <__kernel_rem_pio2f+0x142>
 80145ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80145b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80145b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b8:	da31      	bge.n	801461e <__kernel_rem_pio2f+0x222>
 80145ba:	2600      	movs	r6, #0
 80145bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80145c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145c4:	f040 8098 	bne.w	80146f8 <__kernel_rem_pio2f+0x2fc>
 80145c8:	1e60      	subs	r0, r4, #1
 80145ca:	2200      	movs	r2, #0
 80145cc:	4550      	cmp	r0, sl
 80145ce:	da4b      	bge.n	8014668 <__kernel_rem_pio2f+0x26c>
 80145d0:	2a00      	cmp	r2, #0
 80145d2:	d065      	beq.n	80146a0 <__kernel_rem_pio2f+0x2a4>
 80145d4:	3c01      	subs	r4, #1
 80145d6:	ab08      	add	r3, sp, #32
 80145d8:	3d08      	subs	r5, #8
 80145da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d0f8      	beq.n	80145d4 <__kernel_rem_pio2f+0x1d8>
 80145e2:	4628      	mov	r0, r5
 80145e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80145e8:	f7ff fe7c 	bl	80142e4 <scalbnf>
 80145ec:	1c63      	adds	r3, r4, #1
 80145ee:	aa44      	add	r2, sp, #272	@ 0x110
 80145f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80146f0 <__kernel_rem_pio2f+0x2f4>
 80145f4:	0099      	lsls	r1, r3, #2
 80145f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80145fa:	4623      	mov	r3, r4
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	f280 80a9 	bge.w	8014754 <__kernel_rem_pio2f+0x358>
 8014602:	4623      	mov	r3, r4
 8014604:	2b00      	cmp	r3, #0
 8014606:	f2c0 80c7 	blt.w	8014798 <__kernel_rem_pio2f+0x39c>
 801460a:	aa44      	add	r2, sp, #272	@ 0x110
 801460c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014610:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80146e8 <__kernel_rem_pio2f+0x2ec>
 8014614:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80146f4 <__kernel_rem_pio2f+0x2f8>
 8014618:	2000      	movs	r0, #0
 801461a:	1ae2      	subs	r2, r4, r3
 801461c:	e0b1      	b.n	8014782 <__kernel_rem_pio2f+0x386>
 801461e:	2602      	movs	r6, #2
 8014620:	e78f      	b.n	8014542 <__kernel_rem_pio2f+0x146>
 8014622:	f852 1b04 	ldr.w	r1, [r2], #4
 8014626:	b948      	cbnz	r0, 801463c <__kernel_rem_pio2f+0x240>
 8014628:	b121      	cbz	r1, 8014634 <__kernel_rem_pio2f+0x238>
 801462a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801462e:	f842 1c04 	str.w	r1, [r2, #-4]
 8014632:	2101      	movs	r1, #1
 8014634:	f10e 0e01 	add.w	lr, lr, #1
 8014638:	4608      	mov	r0, r1
 801463a:	e787      	b.n	801454c <__kernel_rem_pio2f+0x150>
 801463c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8014640:	e7f5      	b.n	801462e <__kernel_rem_pio2f+0x232>
 8014642:	f104 3cff 	add.w	ip, r4, #4294967295
 8014646:	aa08      	add	r2, sp, #32
 8014648:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801464c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014650:	a908      	add	r1, sp, #32
 8014652:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8014656:	e781      	b.n	801455c <__kernel_rem_pio2f+0x160>
 8014658:	f104 3cff 	add.w	ip, r4, #4294967295
 801465c:	aa08      	add	r2, sp, #32
 801465e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014662:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014666:	e7f3      	b.n	8014650 <__kernel_rem_pio2f+0x254>
 8014668:	a908      	add	r1, sp, #32
 801466a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801466e:	3801      	subs	r0, #1
 8014670:	430a      	orrs	r2, r1
 8014672:	e7ab      	b.n	80145cc <__kernel_rem_pio2f+0x1d0>
 8014674:	3201      	adds	r2, #1
 8014676:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801467a:	2e00      	cmp	r6, #0
 801467c:	d0fa      	beq.n	8014674 <__kernel_rem_pio2f+0x278>
 801467e:	9905      	ldr	r1, [sp, #20]
 8014680:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014684:	eb0d 0001 	add.w	r0, sp, r1
 8014688:	18e6      	adds	r6, r4, r3
 801468a:	a91c      	add	r1, sp, #112	@ 0x70
 801468c:	f104 0c01 	add.w	ip, r4, #1
 8014690:	384c      	subs	r0, #76	@ 0x4c
 8014692:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8014696:	4422      	add	r2, r4
 8014698:	4562      	cmp	r2, ip
 801469a:	da04      	bge.n	80146a6 <__kernel_rem_pio2f+0x2aa>
 801469c:	4614      	mov	r4, r2
 801469e:	e710      	b.n	80144c2 <__kernel_rem_pio2f+0xc6>
 80146a0:	9804      	ldr	r0, [sp, #16]
 80146a2:	2201      	movs	r2, #1
 80146a4:	e7e7      	b.n	8014676 <__kernel_rem_pio2f+0x27a>
 80146a6:	9903      	ldr	r1, [sp, #12]
 80146a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80146ac:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80146b0:	9105      	str	r1, [sp, #20]
 80146b2:	ee07 1a90 	vmov	s15, r1
 80146b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80146ba:	2400      	movs	r4, #0
 80146bc:	ece6 7a01 	vstmia	r6!, {s15}
 80146c0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80146f4 <__kernel_rem_pio2f+0x2f8>
 80146c4:	46b1      	mov	r9, r6
 80146c6:	455c      	cmp	r4, fp
 80146c8:	dd04      	ble.n	80146d4 <__kernel_rem_pio2f+0x2d8>
 80146ca:	ece0 7a01 	vstmia	r0!, {s15}
 80146ce:	f10c 0c01 	add.w	ip, ip, #1
 80146d2:	e7e1      	b.n	8014698 <__kernel_rem_pio2f+0x29c>
 80146d4:	ecfe 6a01 	vldmia	lr!, {s13}
 80146d8:	ed39 7a01 	vldmdb	r9!, {s14}
 80146dc:	3401      	adds	r4, #1
 80146de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80146e2:	e7f0      	b.n	80146c6 <__kernel_rem_pio2f+0x2ca>
 80146e4:	08015b78 	.word	0x08015b78
 80146e8:	08015b4c 	.word	0x08015b4c
 80146ec:	43800000 	.word	0x43800000
 80146f0:	3b800000 	.word	0x3b800000
 80146f4:	00000000 	.word	0x00000000
 80146f8:	9b02      	ldr	r3, [sp, #8]
 80146fa:	eeb0 0a48 	vmov.f32	s0, s16
 80146fe:	eba3 0008 	sub.w	r0, r3, r8
 8014702:	f7ff fdef 	bl	80142e4 <scalbnf>
 8014706:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80146ec <__kernel_rem_pio2f+0x2f0>
 801470a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014712:	db19      	blt.n	8014748 <__kernel_rem_pio2f+0x34c>
 8014714:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80146f0 <__kernel_rem_pio2f+0x2f4>
 8014718:	ee60 7a27 	vmul.f32	s15, s0, s15
 801471c:	aa08      	add	r2, sp, #32
 801471e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014722:	3508      	adds	r5, #8
 8014724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014728:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801472c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014730:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014734:	ee10 3a10 	vmov	r3, s0
 8014738:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801473c:	ee17 3a90 	vmov	r3, s15
 8014740:	3401      	adds	r4, #1
 8014742:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014746:	e74c      	b.n	80145e2 <__kernel_rem_pio2f+0x1e6>
 8014748:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801474c:	aa08      	add	r2, sp, #32
 801474e:	ee10 3a10 	vmov	r3, s0
 8014752:	e7f6      	b.n	8014742 <__kernel_rem_pio2f+0x346>
 8014754:	a808      	add	r0, sp, #32
 8014756:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801475a:	9001      	str	r0, [sp, #4]
 801475c:	ee07 0a90 	vmov	s15, r0
 8014760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014764:	3b01      	subs	r3, #1
 8014766:	ee67 7a80 	vmul.f32	s15, s15, s0
 801476a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801476e:	ed62 7a01 	vstmdb	r2!, {s15}
 8014772:	e743      	b.n	80145fc <__kernel_rem_pio2f+0x200>
 8014774:	ecfc 6a01 	vldmia	ip!, {s13}
 8014778:	ecb5 7a01 	vldmia	r5!, {s14}
 801477c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014780:	3001      	adds	r0, #1
 8014782:	4550      	cmp	r0, sl
 8014784:	dc01      	bgt.n	801478a <__kernel_rem_pio2f+0x38e>
 8014786:	4290      	cmp	r0, r2
 8014788:	ddf4      	ble.n	8014774 <__kernel_rem_pio2f+0x378>
 801478a:	a858      	add	r0, sp, #352	@ 0x160
 801478c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014790:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014794:	3b01      	subs	r3, #1
 8014796:	e735      	b.n	8014604 <__kernel_rem_pio2f+0x208>
 8014798:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801479a:	2b02      	cmp	r3, #2
 801479c:	dc09      	bgt.n	80147b2 <__kernel_rem_pio2f+0x3b6>
 801479e:	2b00      	cmp	r3, #0
 80147a0:	dc27      	bgt.n	80147f2 <__kernel_rem_pio2f+0x3f6>
 80147a2:	d040      	beq.n	8014826 <__kernel_rem_pio2f+0x42a>
 80147a4:	f009 0007 	and.w	r0, r9, #7
 80147a8:	b059      	add	sp, #356	@ 0x164
 80147aa:	ecbd 8b04 	vpop	{d8-d9}
 80147ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80147b4:	2b03      	cmp	r3, #3
 80147b6:	d1f5      	bne.n	80147a4 <__kernel_rem_pio2f+0x3a8>
 80147b8:	aa30      	add	r2, sp, #192	@ 0xc0
 80147ba:	1f0b      	subs	r3, r1, #4
 80147bc:	4413      	add	r3, r2
 80147be:	461a      	mov	r2, r3
 80147c0:	4620      	mov	r0, r4
 80147c2:	2800      	cmp	r0, #0
 80147c4:	dc50      	bgt.n	8014868 <__kernel_rem_pio2f+0x46c>
 80147c6:	4622      	mov	r2, r4
 80147c8:	2a01      	cmp	r2, #1
 80147ca:	dc5d      	bgt.n	8014888 <__kernel_rem_pio2f+0x48c>
 80147cc:	ab30      	add	r3, sp, #192	@ 0xc0
 80147ce:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80146f4 <__kernel_rem_pio2f+0x2f8>
 80147d2:	440b      	add	r3, r1
 80147d4:	2c01      	cmp	r4, #1
 80147d6:	dc67      	bgt.n	80148a8 <__kernel_rem_pio2f+0x4ac>
 80147d8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80147dc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80147e0:	2e00      	cmp	r6, #0
 80147e2:	d167      	bne.n	80148b4 <__kernel_rem_pio2f+0x4b8>
 80147e4:	edc7 6a00 	vstr	s13, [r7]
 80147e8:	ed87 7a01 	vstr	s14, [r7, #4]
 80147ec:	edc7 7a02 	vstr	s15, [r7, #8]
 80147f0:	e7d8      	b.n	80147a4 <__kernel_rem_pio2f+0x3a8>
 80147f2:	ab30      	add	r3, sp, #192	@ 0xc0
 80147f4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80146f4 <__kernel_rem_pio2f+0x2f8>
 80147f8:	440b      	add	r3, r1
 80147fa:	4622      	mov	r2, r4
 80147fc:	2a00      	cmp	r2, #0
 80147fe:	da24      	bge.n	801484a <__kernel_rem_pio2f+0x44e>
 8014800:	b34e      	cbz	r6, 8014856 <__kernel_rem_pio2f+0x45a>
 8014802:	eef1 7a47 	vneg.f32	s15, s14
 8014806:	edc7 7a00 	vstr	s15, [r7]
 801480a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801480e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014812:	aa31      	add	r2, sp, #196	@ 0xc4
 8014814:	2301      	movs	r3, #1
 8014816:	429c      	cmp	r4, r3
 8014818:	da20      	bge.n	801485c <__kernel_rem_pio2f+0x460>
 801481a:	b10e      	cbz	r6, 8014820 <__kernel_rem_pio2f+0x424>
 801481c:	eef1 7a67 	vneg.f32	s15, s15
 8014820:	edc7 7a01 	vstr	s15, [r7, #4]
 8014824:	e7be      	b.n	80147a4 <__kernel_rem_pio2f+0x3a8>
 8014826:	ab30      	add	r3, sp, #192	@ 0xc0
 8014828:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80146f4 <__kernel_rem_pio2f+0x2f8>
 801482c:	440b      	add	r3, r1
 801482e:	2c00      	cmp	r4, #0
 8014830:	da05      	bge.n	801483e <__kernel_rem_pio2f+0x442>
 8014832:	b10e      	cbz	r6, 8014838 <__kernel_rem_pio2f+0x43c>
 8014834:	eef1 7a67 	vneg.f32	s15, s15
 8014838:	edc7 7a00 	vstr	s15, [r7]
 801483c:	e7b2      	b.n	80147a4 <__kernel_rem_pio2f+0x3a8>
 801483e:	ed33 7a01 	vldmdb	r3!, {s14}
 8014842:	3c01      	subs	r4, #1
 8014844:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014848:	e7f1      	b.n	801482e <__kernel_rem_pio2f+0x432>
 801484a:	ed73 7a01 	vldmdb	r3!, {s15}
 801484e:	3a01      	subs	r2, #1
 8014850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014854:	e7d2      	b.n	80147fc <__kernel_rem_pio2f+0x400>
 8014856:	eef0 7a47 	vmov.f32	s15, s14
 801485a:	e7d4      	b.n	8014806 <__kernel_rem_pio2f+0x40a>
 801485c:	ecb2 7a01 	vldmia	r2!, {s14}
 8014860:	3301      	adds	r3, #1
 8014862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014866:	e7d6      	b.n	8014816 <__kernel_rem_pio2f+0x41a>
 8014868:	ed72 7a01 	vldmdb	r2!, {s15}
 801486c:	edd2 6a01 	vldr	s13, [r2, #4]
 8014870:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014874:	3801      	subs	r0, #1
 8014876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801487a:	ed82 7a00 	vstr	s14, [r2]
 801487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014882:	edc2 7a01 	vstr	s15, [r2, #4]
 8014886:	e79c      	b.n	80147c2 <__kernel_rem_pio2f+0x3c6>
 8014888:	ed73 7a01 	vldmdb	r3!, {s15}
 801488c:	edd3 6a01 	vldr	s13, [r3, #4]
 8014890:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014894:	3a01      	subs	r2, #1
 8014896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801489a:	ed83 7a00 	vstr	s14, [r3]
 801489e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80148a2:	edc3 7a01 	vstr	s15, [r3, #4]
 80148a6:	e78f      	b.n	80147c8 <__kernel_rem_pio2f+0x3cc>
 80148a8:	ed33 7a01 	vldmdb	r3!, {s14}
 80148ac:	3c01      	subs	r4, #1
 80148ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80148b2:	e78f      	b.n	80147d4 <__kernel_rem_pio2f+0x3d8>
 80148b4:	eef1 6a66 	vneg.f32	s13, s13
 80148b8:	eeb1 7a47 	vneg.f32	s14, s14
 80148bc:	edc7 6a00 	vstr	s13, [r7]
 80148c0:	ed87 7a01 	vstr	s14, [r7, #4]
 80148c4:	eef1 7a67 	vneg.f32	s15, s15
 80148c8:	e790      	b.n	80147ec <__kernel_rem_pio2f+0x3f0>
 80148ca:	bf00      	nop

080148cc <floorf>:
 80148cc:	ee10 3a10 	vmov	r3, s0
 80148d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80148d4:	3a7f      	subs	r2, #127	@ 0x7f
 80148d6:	2a16      	cmp	r2, #22
 80148d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80148dc:	dc2b      	bgt.n	8014936 <floorf+0x6a>
 80148de:	2a00      	cmp	r2, #0
 80148e0:	da12      	bge.n	8014908 <floorf+0x3c>
 80148e2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014948 <floorf+0x7c>
 80148e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80148ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80148ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148f2:	dd06      	ble.n	8014902 <floorf+0x36>
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	da24      	bge.n	8014942 <floorf+0x76>
 80148f8:	2900      	cmp	r1, #0
 80148fa:	4b14      	ldr	r3, [pc, #80]	@ (801494c <floorf+0x80>)
 80148fc:	bf08      	it	eq
 80148fe:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014902:	ee00 3a10 	vmov	s0, r3
 8014906:	4770      	bx	lr
 8014908:	4911      	ldr	r1, [pc, #68]	@ (8014950 <floorf+0x84>)
 801490a:	4111      	asrs	r1, r2
 801490c:	420b      	tst	r3, r1
 801490e:	d0fa      	beq.n	8014906 <floorf+0x3a>
 8014910:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014948 <floorf+0x7c>
 8014914:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014918:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014920:	ddef      	ble.n	8014902 <floorf+0x36>
 8014922:	2b00      	cmp	r3, #0
 8014924:	bfbe      	ittt	lt
 8014926:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801492a:	fa40 f202 	asrlt.w	r2, r0, r2
 801492e:	189b      	addlt	r3, r3, r2
 8014930:	ea23 0301 	bic.w	r3, r3, r1
 8014934:	e7e5      	b.n	8014902 <floorf+0x36>
 8014936:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801493a:	d3e4      	bcc.n	8014906 <floorf+0x3a>
 801493c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014940:	4770      	bx	lr
 8014942:	2300      	movs	r3, #0
 8014944:	e7dd      	b.n	8014902 <floorf+0x36>
 8014946:	bf00      	nop
 8014948:	7149f2ca 	.word	0x7149f2ca
 801494c:	bf800000 	.word	0xbf800000
 8014950:	007fffff 	.word	0x007fffff

08014954 <_init>:
 8014954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014956:	bf00      	nop
 8014958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801495a:	bc08      	pop	{r3}
 801495c:	469e      	mov	lr, r3
 801495e:	4770      	bx	lr

08014960 <_fini>:
 8014960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014962:	bf00      	nop
 8014964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014966:	bc08      	pop	{r3}
 8014968:	469e      	mov	lr, r3
 801496a:	4770      	bx	lr
