
code_sat_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161b4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  08016398  08016398  00017398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a74  08016a74  000181f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016a74  08016a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a7c  08016a7c  000181f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a7c  08016a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016a80  08016a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08016a84  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f0  200001f8  08016c7c  000181f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043e8  08016c7c  000183e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002eb74  00000000  00000000  00018228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b08  00000000  00000000  00046d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002638  00000000  00000000  0004d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d8d  00000000  00000000  0004fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f42  00000000  00000000  00051c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000346e6  00000000  00000000  0007abaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee5ca  00000000  00000000  000af295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019d85f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b6f8  00000000  00000000  0019d8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001a8f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801637c 	.word	0x0801637c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0801637c 	.word	0x0801637c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2220      	movs	r2, #32
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f011 f976 	bl	801237a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108e:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001090:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001096:	4b3e      	ldr	r3, [pc, #248]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001098:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109e:	4b3c      	ldr	r3, [pc, #240]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b0:	4b37      	ldr	r3, [pc, #220]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010b8:	2208      	movs	r2, #8
 80010ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010bc:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010be:	2200      	movs	r2, #0
 80010c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010c2:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ca:	2203      	movs	r2, #3
 80010cc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ce:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010d8:	2200      	movs	r2, #0
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010de:	2200      	movs	r2, #0
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ea:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	4825      	ldr	r0, [pc, #148]	@ (8001190 <MX_ADC1_Init+0x120>)
 80010fa:	f003 f9b9 	bl	8004470 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001104:	f001 f904 	bl	8002310 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800110c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001110:	4619      	mov	r1, r3
 8001112:	481f      	ldr	r0, [pc, #124]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001114:	f004 fb7e 	bl	8005814 <HAL_ADCEx_MultiModeConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800111e:	f001 f8f7 	bl	8002310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <MX_ADC1_Init+0x124>)
 8001124:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001126:	2306      	movs	r3, #6
 8001128:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800112a:	2307      	movs	r3, #7
 800112c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800112e:	237f      	movs	r3, #127	@ 0x7f
 8001130:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001132:	2304      	movs	r3, #4
 8001134:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001140:	f003 fe06 	bl	8004d50 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800114a:	f001 f8e1 	bl	8002310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_ADC1_Init+0x128>)
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001152:	230c      	movs	r3, #12
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_ADC1_Init+0x120>)
 800115c:	f003 fdf8 	bl	8004d50 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001166:	f001 f8d3 	bl	8002310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <MX_ADC1_Init+0x12c>)
 800116c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800116e:	2312      	movs	r3, #18
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <MX_ADC1_Init+0x120>)
 8001178:	f003 fdea 	bl	8004d50 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001182:	f001 f8c5 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3730      	adds	r7, #48	@ 0x30
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000214 	.word	0x20000214
 8001194:	cb840000 	.word	0xcb840000
 8001198:	c3210000 	.word	0xc3210000
 800119c:	0c900008 	.word	0x0c900008

080011a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b09a      	sub	sp, #104	@ 0x68
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2244      	movs	r2, #68	@ 0x44
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f011 f8da 	bl	801237a <memset>
  if(adcHandle->Instance==ADC1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011ce:	d167      	bne.n	80012a0 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fc0b 	bl	80079fc <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011ec:	f001 f890 	bl	8002310 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a2c      	ldr	r2, [pc, #176]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	4a26      	ldr	r2, [pc, #152]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <HAL_ADC_MspInit+0x108>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001220:	2304      	movs	r3, #4
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	2303      	movs	r3, #3
 8001226:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001236:	f004 ffaf 	bl	8006198 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800123c:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <HAL_ADC_MspInit+0x110>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001242:	2205      	movs	r2, #5
 8001244:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001254:	2280      	movs	r2, #128	@ 0x80
 8001256:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800125a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001266:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800126a:	2220      	movs	r2, #32
 800126c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001274:	480d      	ldr	r0, [pc, #52]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001276:	f004 fc51 	bl	8005b1c <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001280:	f001 f846 	bl	8002310 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 8001288:	655a      	str	r2, [r3, #84]	@ 0x54
 800128a:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_ADC_MspInit+0x10c>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	2012      	movs	r0, #18
 8001296:	f004 fc19 	bl	8005acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800129a:	2012      	movs	r0, #18
 800129c:	f004 fc30 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3768      	adds	r7, #104	@ 0x68
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	20000280 	.word	0x20000280
 80012b0:	4002001c 	.word	0x4002001c
 80012b4:	00000000 	.word	0x00000000

080012b8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80012b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ca:	f040 8097 	bne.w	80013fc <HAL_ADC_ConvCpltCallback+0x144>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 80012ce:	4b52      	ldr	r3, [pc, #328]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f94e 	bl	8000574 <__aeabi_i2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	a14a      	add	r1, pc, #296	@ (adr r1, 8001408 <HAL_ADC_ConvCpltCallback+0x150>)
 80012de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e2:	f7ff fadb 	bl	800089c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fca3 	bl	8000c38 <__aeabi_d2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a49      	ldr	r2, [pc, #292]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 80012f6:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80012f8:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	4b49      	ldr	r3, [pc, #292]	@ (8001424 <HAL_ADC_ConvCpltCallback+0x16c>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001308:	ee17 0a90 	vmov	r0, s15
 800130c:	f7ff f944 	bl	8000598 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	f04f 0000 	mov.w	r0, #0
 8001318:	4943      	ldr	r1, [pc, #268]	@ (8001428 <HAL_ADC_ConvCpltCallback+0x170>)
 800131a:	f7ff fabf 	bl	800089c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4690      	mov	r8, r2
 8001324:	4699      	mov	r9, r3
 8001326:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 8001328:	885b      	ldrh	r3, [r3, #2]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f922 	bl	8000574 <__aeabi_i2d>
 8001330:	4604      	mov	r4, r0
 8001332:	460d      	mov	r5, r1
 8001334:	4b39      	ldr	r3, [pc, #228]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f92d 	bl	8000598 <__aeabi_f2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b3a      	ldr	r3, [pc, #232]	@ (800142c <HAL_ADC_ConvCpltCallback+0x174>)
 8001344:	f7ff faaa 	bl	800089c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff f97a 	bl	8000648 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	461d      	mov	r5, r3
 800135c:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <HAL_ADC_ConvCpltCallback+0x16c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f919 	bl	8000598 <__aeabi_f2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7fe ffb3 	bl	80002d8 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4640      	mov	r0, r8
 8001378:	4649      	mov	r1, r9
 800137a:	f7ff f965 	bl	8000648 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fc57 	bl	8000c38 <__aeabi_d2f>
 800138a:	ee07 0a10 	vmov	s14, r0
 800138e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	4b26      	ldr	r3, [pc, #152]	@ (8001430 <HAL_ADC_ConvCpltCallback+0x178>)
 8001398:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3.0*(rawADCdata[2]/4095.0)*vrefint;
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8e7 	bl	8000574 <__aeabi_i2d>
 80013a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001410 <HAL_ADC_ConvCpltCallback+0x158>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fa76 	bl	800089c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_ADC_ConvCpltCallback+0x174>)
 80013be:	f7ff f943 	bl	8000648 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_ADC_ConvCpltCallback+0x164>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8e2 	bl	8000598 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff f934 	bl	8000648 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fc26 	bl	8000c38 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a11      	ldr	r2, [pc, #68]	@ (8001434 <HAL_ADC_ConvCpltCallback+0x17c>)
 80013f0:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3);
 80013f2:	2203      	movs	r2, #3
 80013f4:	4908      	ldr	r1, [pc, #32]	@ (8001418 <HAL_ADC_ConvCpltCallback+0x160>)
 80013f6:	4810      	ldr	r0, [pc, #64]	@ (8001438 <HAL_ADC_ConvCpltCallback+0x180>)
 80013f8:	f003 f9be 	bl	8004778 <HAL_ADC_Start_DMA>

	}

}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001406:	bf00      	nop
 8001408:	d70a3d70 	.word	0xd70a3d70
 800140c:	40b36323 	.word	0x40b36323
 8001410:	00000000 	.word	0x00000000
 8001414:	40affe00 	.word	0x40affe00
 8001418:	20000a54 	.word	0x20000a54
 800141c:	20000a60 	.word	0x20000a60
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004
 8001428:	40590000 	.word	0x40590000
 800142c:	40080000 	.word	0x40080000
 8001430:	20000a5c 	.word	0x20000a5c
 8001434:	20000a64 	.word	0x20000a64
 8001438:	20000214 	.word	0x20000214

0800143c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b094      	sub	sp, #80	@ 0x50
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of SDCard_mutexe */
  osMutexDef(SDCard_mutexe);
 8001442:	2300      	movs	r3, #0
 8001444:	64fb      	str	r3, [r7, #76]	@ 0x4c
  SDCard_mutexeHandle = osMutexCreate(osMutex(SDCard_mutexe));
 8001446:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800144a:	4618      	mov	r0, r3
 800144c:	f00d fb4b 	bl	800eae6 <osMutexCreate>
 8001450:	4603      	mov	r3, r0
 8001452:	4a35      	ldr	r2, [pc, #212]	@ (8001528 <MX_FREERTOS_Init+0xec>)
 8001454:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2Cmutex */
  osMutexDef(I2Cmutex);
 8001456:	2300      	movs	r3, #0
 8001458:	64bb      	str	r3, [r7, #72]	@ 0x48
  I2CmutexHandle = osMutexCreate(osMutex(I2Cmutex));
 800145a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800145e:	4618      	mov	r0, r3
 8001460:	f00d fb41 	bl	800eae6 <osMutexCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	4a31      	ldr	r2, [pc, #196]	@ (800152c <MX_FREERTOS_Init+0xf0>)
 8001468:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartmutex */
  osMutexDef(uartmutex);
 800146a:	2300      	movs	r3, #0
 800146c:	647b      	str	r3, [r7, #68]	@ 0x44
  uartmutexHandle = osMutexCreate(osMutex(uartmutex));
 800146e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001472:	4618      	mov	r0, r3
 8001474:	f00d fb37 	bl	800eae6 <osMutexCreate>
 8001478:	4603      	mov	r3, r0
 800147a:	4a2d      	ldr	r2, [pc, #180]	@ (8001530 <MX_FREERTOS_Init+0xf4>)
 800147c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of uartTxDone */
  osSemaphoreDef(uartTxDone);
 800147e:	2300      	movs	r3, #0
 8001480:	643b      	str	r3, [r7, #64]	@ 0x40
  uartTxDoneHandle = osSemaphoreCreate(osSemaphore(uartTxDone), 1);
 8001482:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f00d fbbd 	bl	800ec08 <osSemaphoreCreate>
 800148e:	4603      	mov	r3, r0
 8001490:	4a28      	ldr	r2, [pc, #160]	@ (8001534 <MX_FREERTOS_Init+0xf8>)
 8001492:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  osSemaphoreWait(uartTxDoneHandle, 0);
 8001494:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <MX_FREERTOS_Init+0xf8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f00d fbd2 	bl	800ec44 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statemachine */
  osThreadDef(statemachine, Startstatemachine, osPriorityAboveNormal, 0, 300);
 80014a0:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <MX_FREERTOS_Init+0xfc>)
 80014a2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80014a6:	461d      	mov	r5, r3
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	6023      	str	r3, [r4, #0]
  statemachineHandle = osThreadCreate(osThread(statemachine), NULL);
 80014b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00d fada 	bl	800ea70 <osThreadCreate>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a1f      	ldr	r2, [pc, #124]	@ (800153c <MX_FREERTOS_Init+0x100>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sdcardwrite */
  osThreadDef(Sdcardwrite, StartSdcard, osPriorityNormal, 0, 512);
 80014c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001540 <MX_FREERTOS_Init+0x104>)
 80014c4:	f107 0418 	add.w	r4, r7, #24
 80014c8:	461d      	mov	r5, r3
 80014ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	6023      	str	r3, [r4, #0]
  SdcardwriteHandle = osThreadCreate(osThread(Sdcardwrite), NULL);
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f00d fac9 	bl	800ea70 <osThreadCreate>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a18      	ldr	r2, [pc, #96]	@ (8001544 <MX_FREERTOS_Init+0x108>)
 80014e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of tarvosDecode */
  osThreadDef(tarvosDecode, startTarvosDecode, osPriorityRealtime, 0, 256);
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_FREERTOS_Init+0x10c>)
 80014e6:	1d3c      	adds	r4, r7, #4
 80014e8:	461d      	mov	r5, r3
 80014ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ee:	682b      	ldr	r3, [r5, #0]
 80014f0:	6023      	str	r3, [r4, #0]
  tarvosDecodeHandle = osThreadCreate(osThread(tarvosDecode), NULL);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00d faba 	bl	800ea70 <osThreadCreate>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a13      	ldr	r2, [pc, #76]	@ (800154c <MX_FREERTOS_Init+0x110>)
 8001500:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */


  CoreDebug->DEMCR |=CoreDebug_DEMCR_TRCENA_Msk;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_FREERTOS_Init+0x114>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <MX_FREERTOS_Init+0x114>)
 8001508:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800150c:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT =0;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_FREERTOS_Init+0x118>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_FREERTOS_Init+0x118>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0e      	ldr	r2, [pc, #56]	@ (8001554 <MX_FREERTOS_Init+0x118>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001520:	bf00      	nop
 8001522:	3750      	adds	r7, #80	@ 0x50
 8001524:	46bd      	mov	sp, r7
 8001526:	bdb0      	pop	{r4, r5, r7, pc}
 8001528:	20000348 	.word	0x20000348
 800152c:	2000034c 	.word	0x2000034c
 8001530:	20000350 	.word	0x20000350
 8001534:	20000354 	.word	0x20000354
 8001538:	080163a8 	.word	0x080163a8
 800153c:	2000033c 	.word	0x2000033c
 8001540:	080163c8 	.word	0x080163c8
 8001544:	20000340 	.word	0x20000340
 8001548:	080163ec 	.word	0x080163ec
 800154c:	20000344 	.word	0x20000344
 8001550:	e000edf0 	.word	0xe000edf0
 8001554:	e0001000 	.word	0xe0001000

08001558 <Startstatemachine>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startstatemachine */
void Startstatemachine(void const * argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af02      	add	r7, sp, #8
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startstatemachine */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001560:	f00e fdec 	bl	801013c <xTaskGetTickCount>
 8001564:	4603      	mov	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  lcd_clear();
 8001568:	f000 fc94 	bl	8001e94 <lcd_clear>
	  if(led_flag==0){
 800156c:	4b39      	ldr	r3, [pc, #228]	@ (8001654 <Startstatemachine+0xfc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10c      	bne.n	800158e <Startstatemachine+0x36>
		  LED_Setcolour(255, 0, 0,0, 0, 255);
 8001574:	23ff      	movs	r3, #255	@ 0xff
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	2300      	movs	r3, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2300      	movs	r3, #0
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	20ff      	movs	r0, #255	@ 0xff
 8001584:	f000 fcea 	bl	8001f5c <LED_Setcolour>
		  LED_Update();
 8001588:	f000 fd78 	bl	800207c <LED_Update>
 800158c:	e00b      	b.n	80015a6 <Startstatemachine+0x4e>

	  }
	  else{
		  LED_Setcolour(0, 0, 255,255, 0, 0);
 800158e:	2300      	movs	r3, #0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	23ff      	movs	r3, #255	@ 0xff
 8001598:	22ff      	movs	r2, #255	@ 0xff
 800159a:	2100      	movs	r1, #0
 800159c:	2000      	movs	r0, #0
 800159e:	f000 fcdd 	bl	8001f5c <LED_Setcolour>
		  LED_Update();
 80015a2:	f000 fd6b 	bl	800207c <LED_Update>
	  }
	  led_flag=1-led_flag;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <Startstatemachine+0xfc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f1c3 0301 	rsb	r3, r3, #1
 80015ae:	4a29      	ldr	r2, [pc, #164]	@ (8001654 <Startstatemachine+0xfc>)
 80015b0:	6013      	str	r3, [r2, #0]
	  if(flag_fin==0){
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <Startstatemachine+0x100>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d12d      	bne.n	8001616 <Startstatemachine+0xbe>
	  setCursor(0,0);
 80015ba:	2100      	movs	r1, #0
 80015bc:	2000      	movs	r0, #0
 80015be:	f000 fc8a 	bl	8001ed6 <setCursor>
	  snprintf((char *)lcdbuffer,30,"hauteur=%0.2f",OTHERData.altitude_baro);
 80015c2:	4b26      	ldr	r3, [pc, #152]	@ (800165c <Startstatemachine+0x104>)
 80015c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffe6 	bl	8000598 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	e9cd 2300 	strd	r2, r3, [sp]
 80015d4:	4a22      	ldr	r2, [pc, #136]	@ (8001660 <Startstatemachine+0x108>)
 80015d6:	211e      	movs	r1, #30
 80015d8:	4822      	ldr	r0, [pc, #136]	@ (8001664 <Startstatemachine+0x10c>)
 80015da:	f010 fe33 	bl	8012244 <sniprintf>
	  lcd_send_string((char *)lcdbuffer);
 80015de:	4821      	ldr	r0, [pc, #132]	@ (8001664 <Startstatemachine+0x10c>)
 80015e0:	f000 fc62 	bl	8001ea8 <lcd_send_string>
	  osDelay(2);
 80015e4:	2002      	movs	r0, #2
 80015e6:	f00d fa6a 	bl	800eabe <osDelay>
	  setCursor(1,0);
 80015ea:	2100      	movs	r1, #0
 80015ec:	2001      	movs	r0, #1
 80015ee:	f000 fc72 	bl	8001ed6 <setCursor>
	  snprintf((char *)lcdbuffer,30,"dist=%0.1fm",distance_RSSI);
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <Startstatemachine+0x110>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffce 	bl	8000598 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9cd 2300 	strd	r2, r3, [sp]
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <Startstatemachine+0x114>)
 8001606:	211e      	movs	r1, #30
 8001608:	4816      	ldr	r0, [pc, #88]	@ (8001664 <Startstatemachine+0x10c>)
 800160a:	f010 fe1b 	bl	8012244 <sniprintf>
	  lcd_send_string((char *)lcdbuffer);
 800160e:	4815      	ldr	r0, [pc, #84]	@ (8001664 <Startstatemachine+0x10c>)
 8001610:	f000 fc4a 	bl	8001ea8 <lcd_send_string>
 8001614:	e017      	b.n	8001646 <Startstatemachine+0xee>
	  }
	  else{
		  setCursor(0,0);
 8001616:	2100      	movs	r1, #0
 8001618:	2000      	movs	r0, #0
 800161a:	f000 fc5c 	bl	8001ed6 <setCursor>
		  	  snprintf((char *)lcdbuffer,30,"FIN");
 800161e:	4a14      	ldr	r2, [pc, #80]	@ (8001670 <Startstatemachine+0x118>)
 8001620:	211e      	movs	r1, #30
 8001622:	4810      	ldr	r0, [pc, #64]	@ (8001664 <Startstatemachine+0x10c>)
 8001624:	f010 fe0e 	bl	8012244 <sniprintf>
		  	  lcd_send_string((char *)lcdbuffer);
 8001628:	480e      	ldr	r0, [pc, #56]	@ (8001664 <Startstatemachine+0x10c>)
 800162a:	f000 fc3d 	bl	8001ea8 <lcd_send_string>
		  	  setCursor(1,0);
 800162e:	2100      	movs	r1, #0
 8001630:	2001      	movs	r0, #1
 8001632:	f000 fc50 	bl	8001ed6 <setCursor>
		  	  snprintf((char *)lcdbuffer,30,"FIN");
 8001636:	4a0e      	ldr	r2, [pc, #56]	@ (8001670 <Startstatemachine+0x118>)
 8001638:	211e      	movs	r1, #30
 800163a:	480a      	ldr	r0, [pc, #40]	@ (8001664 <Startstatemachine+0x10c>)
 800163c:	f010 fe02 	bl	8012244 <sniprintf>
		  	  lcd_send_string((char *)lcdbuffer);
 8001640:	4808      	ldr	r0, [pc, #32]	@ (8001664 <Startstatemachine+0x10c>)
 8001642:	f000 fc31 	bl	8001ea8 <lcd_send_string>

	  }


	  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	21c8      	movs	r1, #200	@ 0xc8
 800164c:	4618      	mov	r0, r3
 800164e:	f00e fb2d 	bl	800fcac <vTaskDelayUntil>
  {
 8001652:	e789      	b.n	8001568 <Startstatemachine+0x10>
 8001654:	200002f8 	.word	0x200002f8
 8001658:	20000c2c 	.word	0x20000c2c
 800165c:	20000a68 	.word	0x20000a68
 8001660:	08016400 	.word	0x08016400
 8001664:	200002fc 	.word	0x200002fc
 8001668:	200002e8 	.word	0x200002e8
 800166c:	08016410 	.word	0x08016410
 8001670:	0801641c 	.word	0x0801641c

08001674 <StartSdcard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdcard */
void StartSdcard(void const * argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af02      	add	r7, sp, #8
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdcard */

	FRESULT fres=FR_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
	fres = f_mount(&FatFs, "", 1);
 8001680:	2201      	movs	r2, #1
 8001682:	4941      	ldr	r1, [pc, #260]	@ (8001788 <StartSdcard+0x114>)
 8001684:	4841      	ldr	r0, [pc, #260]	@ (800178c <StartSdcard+0x118>)
 8001686:	f00c f93b 	bl	800d900 <f_mount>
 800168a:	4603      	mov	r3, r0
 800168c:	77fb      	strb	r3, [r7, #31]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800168e:	f00e fd55 	bl	801013c <xTaskGetTickCount>
 8001692:	4603      	mov	r3, r0
 8001694:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 8001696:	4b3e      	ldr	r3, [pc, #248]	@ (8001790 <StartSdcard+0x11c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
		  osMutexWait(SDCard_mutexeHandle, portMAX_DELAY);
 800169c:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <StartSdcard+0x120>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00d fa2b 	bl	800eb00 <osMutexWait>

		  blinker_sd_flag=1-blinker_sd_flag;
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <StartSdcard+0x124>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f1c3 0301 	rsb	r3, r3, #1
 80016b2:	4a39      	ldr	r2, [pc, #228]	@ (8001798 <StartSdcard+0x124>)
 80016b4:	6013      	str	r3, [r2, #0]
		  if(blinker_sd_flag==1){
 80016b6:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <StartSdcard+0x124>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10a      	bne.n	80016d4 <StartSdcard+0x60>
			  LED_Setcolour(0,0,0,255,255,255);
 80016be:	23ff      	movs	r3, #255	@ 0xff
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	23ff      	movs	r3, #255	@ 0xff
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	23ff      	movs	r3, #255	@ 0xff
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 fc45 	bl	8001f5c <LED_Setcolour>
 80016d2:	e009      	b.n	80016e8 <StartSdcard+0x74>
		  }
		  else{
			  LED_Setcolour(0,0,0,0,0,0);
 80016d4:	2300      	movs	r3, #0
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	2300      	movs	r3, #0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2300      	movs	r3, #0
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2000      	movs	r0, #0
 80016e4:	f000 fc3a 	bl	8001f5c <LED_Setcolour>
		  }

		  if(flag_drop==0){
 80016e8:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <StartSdcard+0x128>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d112      	bne.n	8001716 <StartSdcard+0xa2>

			  if(sd_counter==5){
 80016f0:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <StartSdcard+0x12c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d108      	bne.n	800170a <StartSdcard+0x96>
				  fres=store_in_sd(fres);
 80016f8:	7ffb      	ldrb	r3, [r7, #31]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fe0e 	bl	800231c <store_in_sd>
 8001700:	4603      	mov	r3, r0
 8001702:	77fb      	strb	r3, [r7, #31]

			  sd_counter=0;
 8001704:	4b26      	ldr	r3, [pc, #152]	@ (80017a0 <StartSdcard+0x12c>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
			  }
			  sd_counter++;
 800170a:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <StartSdcard+0x12c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <StartSdcard+0x12c>)
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e005      	b.n	8001722 <StartSdcard+0xae>

		  }
		  else{
			  fres=store_in_sd(fres);
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fdff 	bl	800231c <store_in_sd>
 800171e:	4603      	mov	r3, r0
 8001720:	77fb      	strb	r3, [r7, #31]

		  }



		  osMutexRelease(SDCard_mutexeHandle);
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <StartSdcard+0x120>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f00d fa38 	bl	800eb9c <osMutexRelease>

			if(flag_fin==1){
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <StartSdcard+0x130>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <StartSdcard+0xd0>

				f_mount(NULL, "", 0);
 8001734:	2200      	movs	r2, #0
 8001736:	4914      	ldr	r1, [pc, #80]	@ (8001788 <StartSdcard+0x114>)
 8001738:	2000      	movs	r0, #0
 800173a:	f00c f8e1 	bl	800d900 <f_mount>
				osThreadSuspend(NULL);
 800173e:	2000      	movs	r0, #0
 8001740:	f00d fb17 	bl	800ed72 <osThreadSuspend>
			}

			  uint32_t end1= DWT->CYCCNT;
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <StartSdcard+0x11c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	617b      	str	r3, [r7, #20]
			  uint32_t cycles= end1-start1;
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	613b      	str	r3, [r7, #16]
			  timesdcard=(float) cycles/(SystemCoreClock/1000000.0f);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <StartSdcard+0x134>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001768:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80017ac <StartSdcard+0x138>
 800176c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <StartSdcard+0x13c>)
 8001776:	edc3 7a00 	vstr	s15, [r3]


			  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(200));
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	21c8      	movs	r1, #200	@ 0xc8
 8001780:	4618      	mov	r0, r3
 8001782:	f00e fa93 	bl	800fcac <vTaskDelayUntil>
  {
 8001786:	e786      	b.n	8001696 <StartSdcard+0x22>
 8001788:	08016420 	.word	0x08016420
 800178c:	200005ec 	.word	0x200005ec
 8001790:	e0001000 	.word	0xe0001000
 8001794:	20000348 	.word	0x20000348
 8001798:	200002ec 	.word	0x200002ec
 800179c:	20000c20 	.word	0x20000c20
 80017a0:	200002e0 	.word	0x200002e0
 80017a4:	20000c2c 	.word	0x20000c2c
 80017a8:	20000008 	.word	0x20000008
 80017ac:	49742400 	.word	0x49742400
 80017b0:	200002f0 	.word	0x200002f0

080017b4 <startTarvosDecode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTarvosDecode */
void startTarvosDecode(void const * argument)
{
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	b09d      	sub	sp, #116	@ 0x74
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTarvosDecode */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80017bc:	f00e fcbe 	bl	801013c <xTaskGetTickCount>
 80017c0:	6638      	str	r0, [r7, #96]	@ 0x60
	 uint8_t temp_trame[TRAME_SIZE];
		      uint8_t temp5[5];
		      uint8_t data_index = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  /* Infinite loop */
  for(;;)
  {
	  uint32_t start1= DWT->CYCCNT;
 80017c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a40 <startTarvosDecode+0x28c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	65fb      	str	r3, [r7, #92]	@ 0x5c



	          while (read_index != write_index) {
 80017ce:	e107      	b.n	80019e0 <startTarvosDecode+0x22c>
	              // Recherche de l'entête principale
	              if (circular_buffer[read_index] == 0x02 &&
 80017d0:	4b9c      	ldr	r3, [pc, #624]	@ (8001a44 <startTarvosDecode+0x290>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b9b      	ldr	r3, [pc, #620]	@ (8001a48 <startTarvosDecode+0x294>)
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	f040 80f1 	bne.w	80019c4 <startTarvosDecode+0x210>
	                  circular_buffer[(read_index + 1) % CIRC_BUF_SIZE] == 0x81)
 80017e2:	4b98      	ldr	r3, [pc, #608]	@ (8001a44 <startTarvosDecode+0x290>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	425a      	negs	r2, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	bf58      	it	pl
 80017f2:	4253      	negpl	r3, r2
 80017f4:	4a94      	ldr	r2, [pc, #592]	@ (8001a48 <startTarvosDecode+0x294>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
	              if (circular_buffer[read_index] == 0x02 &&
 80017f8:	2b81      	cmp	r3, #129	@ 0x81
 80017fa:	f040 80e3 	bne.w	80019c4 <startTarvosDecode+0x210>
	              {
	                  data_index = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	                  while (data_index < TRAME_SIZE) {
 8001804:	e07c      	b.n	8001900 <startTarvosDecode+0x14c>
	                      // Vérifie s’il reste au moins 5 octets
	                      uint16_t available = (write_index >= read_index)
 8001806:	4b91      	ldr	r3, [pc, #580]	@ (8001a4c <startTarvosDecode+0x298>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b8d      	ldr	r3, [pc, #564]	@ (8001a44 <startTarvosDecode+0x290>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	429a      	cmp	r2, r3
 8001814:	d308      	bcc.n	8001828 <startTarvosDecode+0x74>
	                          ? (write_index - read_index)
 8001816:	4b8d      	ldr	r3, [pc, #564]	@ (8001a4c <startTarvosDecode+0x298>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b89      	ldr	r3, [pc, #548]	@ (8001a44 <startTarvosDecode+0x290>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b29b      	uxth	r3, r3
 8001826:	e00a      	b.n	800183e <startTarvosDecode+0x8a>
	                          : (CIRC_BUF_SIZE - read_index + write_index);
 8001828:	4b88      	ldr	r3, [pc, #544]	@ (8001a4c <startTarvosDecode+0x298>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b85      	ldr	r3, [pc, #532]	@ (8001a44 <startTarvosDecode+0x290>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b29b      	uxth	r3, r3
	                      uint16_t available = (write_index >= read_index)
 8001838:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800183c:	b29b      	uxth	r3, r3
 800183e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	                      if (available < 5) {
 8001842:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001846:	2b04      	cmp	r3, #4
 8001848:	d960      	bls.n	800190c <startTarvosDecode+0x158>
	                          break; // attendre plus de données
	                      }

	                      // Copie 5 octets
	                      for (int i = 0; i < 5; i++) {
 800184a:	2300      	movs	r3, #0
 800184c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800184e:	e015      	b.n	800187c <startTarvosDecode+0xc8>
	                          temp5[i] = circular_buffer[(read_index + i) % CIRC_BUF_SIZE];
 8001850:	4b7c      	ldr	r3, [pc, #496]	@ (8001a44 <startTarvosDecode+0x290>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800185a:	4413      	add	r3, r2
 800185c:	425a      	negs	r2, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	bf58      	it	pl
 8001864:	4253      	negpl	r3, r2
 8001866:	4a78      	ldr	r2, [pc, #480]	@ (8001a48 <startTarvosDecode+0x294>)
 8001868:	5cd1      	ldrb	r1, [r2, r3]
 800186a:	f107 0208 	add.w	r2, r7, #8
 800186e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001870:	4413      	add	r3, r2
 8001872:	460a      	mov	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
	                      for (int i = 0; i < 5; i++) {
 8001876:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001878:	3301      	adds	r3, #1
 800187a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800187c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800187e:	2b04      	cmp	r3, #4
 8001880:	dde6      	ble.n	8001850 <startTarvosDecode+0x9c>
	                      }

	                      // Confirmation TX ? (trame parasite)
	                      if (temp5[0] == 0x02 && temp5[1] == 0x40 && temp5[2] == 0x01) {
 8001882:	7a3b      	ldrb	r3, [r7, #8]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d112      	bne.n	80018ae <startTarvosDecode+0xfa>
 8001888:	7a7b      	ldrb	r3, [r7, #9]
 800188a:	2b40      	cmp	r3, #64	@ 0x40
 800188c:	d10f      	bne.n	80018ae <startTarvosDecode+0xfa>
 800188e:	7abb      	ldrb	r3, [r7, #10]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d10c      	bne.n	80018ae <startTarvosDecode+0xfa>
	                          // Skip trame de confirmation
	                          read_index = (read_index + 5) % CIRC_BUF_SIZE;
 8001894:	4b6b      	ldr	r3, [pc, #428]	@ (8001a44 <startTarvosDecode+0x290>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	3305      	adds	r3, #5
 800189c:	425a      	negs	r2, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	bf58      	it	pl
 80018a4:	4253      	negpl	r3, r2
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	4b66      	ldr	r3, [pc, #408]	@ (8001a44 <startTarvosDecode+0x290>)
 80018aa:	801a      	strh	r2, [r3, #0]
	                          continue;
 80018ac:	e028      	b.n	8001900 <startTarvosDecode+0x14c>
	                      }

	                      // Sinon : partie utile, on ajoute à la trame
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80018b2:	e012      	b.n	80018da <startTarvosDecode+0x126>
	                          temp_trame[data_index++] = temp5[i];
 80018b4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 80018be:	4619      	mov	r1, r3
 80018c0:	f107 0208 	add.w	r2, r7, #8
 80018c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018c6:	4413      	add	r3, r2
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	f101 0370 	add.w	r3, r1, #112	@ 0x70
 80018ce:	443b      	add	r3, r7
 80018d0:	f803 2c60 	strb.w	r2, [r3, #-96]
	                      for (int i = 0; i < 5 && data_index < TRAME_SIZE; i++) {
 80018d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018d6:	3301      	adds	r3, #1
 80018d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80018da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018dc:	2b04      	cmp	r3, #4
 80018de:	dc03      	bgt.n	80018e8 <startTarvosDecode+0x134>
 80018e0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80018e4:	2b3b      	cmp	r3, #59	@ 0x3b
 80018e6:	d9e5      	bls.n	80018b4 <startTarvosDecode+0x100>
	                      }

	                      read_index = (read_index + 5) % CIRC_BUF_SIZE;
 80018e8:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <startTarvosDecode+0x290>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	3305      	adds	r3, #5
 80018f0:	425a      	negs	r2, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	bf58      	it	pl
 80018f8:	4253      	negpl	r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b51      	ldr	r3, [pc, #324]	@ (8001a44 <startTarvosDecode+0x290>)
 80018fe:	801a      	strh	r2, [r3, #0]
	                  while (data_index < TRAME_SIZE) {
 8001900:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001904:	2b3b      	cmp	r3, #59	@ 0x3b
 8001906:	f67f af7e 	bls.w	8001806 <startTarvosDecode+0x52>
 800190a:	e000      	b.n	800190e <startTarvosDecode+0x15a>
	                          break; // attendre plus de données
 800190c:	bf00      	nop
	                  }

	                  if (data_index == TRAME_SIZE) {
 800190e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001912:	2b3c      	cmp	r3, #60	@ 0x3c
 8001914:	d163      	bne.n	80019de <startTarvosDecode+0x22a>

	                	  if (tarvos_checksum(temp_trame, TRAME_SIZE) == temp_trame[TRAME_SIZE - 1]) {
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	213c      	movs	r1, #60	@ 0x3c
 800191c:	4618      	mov	r0, r3
 800191e:	f001 fa23 	bl	8002d68 <tarvos_checksum>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800192a:	429a      	cmp	r2, r3
 800192c:	d157      	bne.n	80019de <startTarvosDecode+0x22a>

	                      memcpy(tarvos_DATA, temp_trame, TRAME_SIZE);
 800192e:	4b48      	ldr	r3, [pc, #288]	@ (8001a50 <startTarvosDecode+0x29c>)
 8001930:	f107 0410 	add.w	r4, r7, #16
 8001934:	469c      	mov	ip, r3
 8001936:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800193a:	4665      	mov	r5, ip
 800193c:	4626      	mov	r6, r4
 800193e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001940:	6028      	str	r0, [r5, #0]
 8001942:	6069      	str	r1, [r5, #4]
 8001944:	60aa      	str	r2, [r5, #8]
 8001946:	60eb      	str	r3, [r5, #12]
 8001948:	3410      	adds	r4, #16
 800194a:	f10c 0c10 	add.w	ip, ip, #16
 800194e:	4574      	cmp	r4, lr
 8001950:	d1f3      	bne.n	800193a <startTarvosDecode+0x186>
 8001952:	4665      	mov	r5, ip
 8001954:	4623      	mov	r3, r4
 8001956:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001958:	6028      	str	r0, [r5, #0]
 800195a:	6069      	str	r1, [r5, #4]
 800195c:	60aa      	str	r2, [r5, #8]
	                      decode_payload(&OTHERData,(uint8_t *) tarvos_DATA);
 800195e:	493c      	ldr	r1, [pc, #240]	@ (8001a50 <startTarvosDecode+0x29c>)
 8001960:	483c      	ldr	r0, [pc, #240]	@ (8001a54 <startTarvosDecode+0x2a0>)
 8001962:	f001 f927 	bl	8002bb4 <decode_payload>

	    if ((vraiRSSI >= 0) || (vraiRSSI < -120) || (NVALUE <= 0.0f)) {
 8001966:	4b3c      	ldr	r3, [pc, #240]	@ (8001a58 <startTarvosDecode+0x2a4>)
 8001968:	f993 3000 	ldrsb.w	r3, [r3]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da05      	bge.n	800197c <startTarvosDecode+0x1c8>
 8001970:	4b39      	ldr	r3, [pc, #228]	@ (8001a58 <startTarvosDecode+0x2a4>)
 8001972:	f993 3000 	ldrsb.w	r3, [r3]
 8001976:	f113 0f78 	cmn.w	r3, #120	@ 0x78
 800197a:	da03      	bge.n	8001984 <startTarvosDecode+0x1d0>
	        distance_RSSI= -1.0f; // Valeur invalide
 800197c:	4b37      	ldr	r3, [pc, #220]	@ (8001a5c <startTarvosDecode+0x2a8>)
 800197e:	4a38      	ldr	r2, [pc, #224]	@ (8001a60 <startTarvosDecode+0x2ac>)
 8001980:	601a      	str	r2, [r3, #0]
	                  if (data_index == TRAME_SIZE) {
 8001982:	e02c      	b.n	80019de <startTarvosDecode+0x22a>
	    }
	    else{
	    	float exponent= 0.0f;
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    exponent = ((float)RSSI0 - (float)vraiRSSI) / (10.0f * NVALUE);
 800198a:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <startTarvosDecode+0x2a4>)
 800198c:	f993 3000 	ldrsb.w	r3, [r3]
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001998:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001a64 <startTarvosDecode+0x2b0>
 800199c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a0:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80019a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		    distance_RSSI= powf(10.0f, exponent);
 80019ac:	edd7 0a13 	vldr	s1, [r7, #76]	@ 0x4c
 80019b0:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80019b4:	f014 f91a 	bl	8015bec <powf>
 80019b8:	eef0 7a40 	vmov.f32	s15, s0
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <startTarvosDecode+0x2a8>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
	                  if (data_index == TRAME_SIZE) {
 80019c2:	e00c      	b.n	80019de <startTarvosDecode+0x22a>
	                	  }

	                  }
	              } else {
	                  // Entête invalide : skip 1 octet
	                  read_index = (read_index + 1) % CIRC_BUF_SIZE;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <startTarvosDecode+0x290>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	425a      	negs	r2, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	bf58      	it	pl
 80019d4:	4253      	negpl	r3, r2
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <startTarvosDecode+0x290>)
 80019da:	801a      	strh	r2, [r3, #0]
 80019dc:	e000      	b.n	80019e0 <startTarvosDecode+0x22c>
	                  if (data_index == TRAME_SIZE) {
 80019de:	bf00      	nop
	          while (read_index != write_index) {
 80019e0:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <startTarvosDecode+0x290>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <startTarvosDecode+0x298>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f47f aeef 	bne.w	80017d0 <startTarvosDecode+0x1c>
	          }




		if(flag_fin==1){
 80019f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <startTarvosDecode+0x2b4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <startTarvosDecode+0x24c>

			osThreadSuspend(NULL);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f00d f9b9 	bl	800ed72 <osThreadSuspend>
		}

		  uint32_t end1= DWT->CYCCNT;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <startTarvosDecode+0x28c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	65bb      	str	r3, [r7, #88]	@ 0x58
		  uint32_t cycles= end1-start1;
 8001a06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	657b      	str	r3, [r7, #84]	@ 0x54

		  timedecode=(float) cycles/(SystemCoreClock/1000000.0f);
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a18:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <startTarvosDecode+0x2b8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a24:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8001a70 <startTarvosDecode+0x2bc>
 8001a28:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a30:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <startTarvosDecode+0x2c0>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]

vTaskDelay(pdMS_TO_TICKS(50));
 8001a36:	2032      	movs	r0, #50	@ 0x32
 8001a38:	f00e f9b8 	bl	800fdac <vTaskDelay>
  {
 8001a3c:	e6c4      	b.n	80017c8 <startTarvosDecode+0x14>
 8001a3e:	bf00      	nop
 8001a40:	e0001000 	.word	0xe0001000
 8001a44:	20001086 	.word	0x20001086
 8001a48:	20000f84 	.word	0x20000f84
 8001a4c:	20001084 	.word	0x20001084
 8001a50:	200003ac 	.word	0x200003ac
 8001a54:	20000a68 	.word	0x20000a68
 8001a58:	200002e4 	.word	0x200002e4
 8001a5c:	200002e8 	.word	0x200002e8
 8001a60:	bf800000 	.word	0xbf800000
 8001a64:	c2600000 	.word	0xc2600000
 8001a68:	20000c2c 	.word	0x20000c2c
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	49742400 	.word	0x49742400
 8001a74:	200002f4 	.word	0x200002f4

08001a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a82:	4a1d      	ldr	r2, [pc, #116]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a9a:	4a17      	ldr	r2, [pc, #92]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <MX_DMA_Init+0x80>)
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	200b      	movs	r0, #11
 8001ab4:	f004 f80a 	bl	8005acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ab8:	200b      	movs	r0, #11
 8001aba:	f004 f821 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	200c      	movs	r0, #12
 8001ac4:	f004 f802 	bl	8005acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ac8:	200c      	movs	r0, #12
 8001aca:	f004 f819 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	200d      	movs	r0, #13
 8001ad4:	f003 fffa 	bl	8005acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ad8:	200d      	movs	r0, #13
 8001ada:	f004 f811 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	200e      	movs	r0, #14
 8001ae4:	f003 fff2 	bl	8005acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ae8:	200e      	movs	r0, #14
 8001aea:	f004 f809 	bl	8005b00 <HAL_NVIC_EnableIRQ>

}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <MX_GPIO_Init>:
        * EXTI
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b12:	4b51      	ldr	r3, [pc, #324]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b16:	4a50      	ldr	r2, [pc, #320]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b36:	4b48      	ldr	r3, [pc, #288]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	4b45      	ldr	r3, [pc, #276]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	4a44      	ldr	r2, [pc, #272]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4e:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b66:	4b3c      	ldr	r3, [pc, #240]	@ (8001c58 <MX_GPIO_Init+0x15c>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2110      	movs	r1, #16
 8001b76:	4839      	ldr	r0, [pc, #228]	@ (8001c5c <MX_GPIO_Init+0x160>)
 8001b78:	f004 fc90 	bl	800649c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROUGE_Pin|PWEN_Pin, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001b82:	4837      	ldr	r0, [pc, #220]	@ (8001c60 <MX_GPIO_Init+0x164>)
 8001b84:	f004 fc8a 	bl	800649c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b88:	2310      	movs	r3, #16
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b8c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba0:	f004 fafa 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4828      	ldr	r0, [pc, #160]	@ (8001c5c <MX_GPIO_Init+0x160>)
 8001bbc:	f004 faec 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bc4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4822      	ldr	r0, [pc, #136]	@ (8001c60 <MX_GPIO_Init+0x164>)
 8001bd6:	f004 fadf 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	481c      	ldr	r0, [pc, #112]	@ (8001c60 <MX_GPIO_Init+0x164>)
 8001bee:	f004 fad3 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin PWEN_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|PWEN_Pin;
 8001bf2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4815      	ldr	r0, [pc, #84]	@ (8001c60 <MX_GPIO_Init+0x164>)
 8001c0c:	f004 fac4 	bl	8006198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c10:	23c0      	movs	r3, #192	@ 0xc0
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c20:	2307      	movs	r3, #7
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480d      	ldr	r0, [pc, #52]	@ (8001c60 <MX_GPIO_Init+0x164>)
 8001c2c:	f004 fab4 	bl	8006198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2105      	movs	r1, #5
 8001c34:	2007      	movs	r0, #7
 8001c36:	f003 ff49 	bl	8005acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c3a:	2007      	movs	r0, #7
 8001c3c:	f003 ff60 	bl	8005b00 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2105      	movs	r1, #5
 8001c44:	200a      	movs	r0, #10
 8001c46:	f003 ff41 	bl	8005acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f003 ff58 	bl	8005b00 <HAL_NVIC_EnableIRQ>

}
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	@ 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000800 	.word	0x48000800
 8001c60:	48000400 	.word	0x48000400

08001c64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <MX_I2C1_Init+0x78>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <MX_I2C1_Init+0x7c>)
 8001c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c86:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c9e:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001ca0:	f004 fc37 	bl	8006512 <HAL_I2C_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001caa:	f000 fb31 	bl	8002310 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4809      	ldr	r0, [pc, #36]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001cb2:	f004 fffb 	bl	8006cac <HAL_I2CEx_ConfigAnalogFilter>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cbc:	f000 fb28 	bl	8002310 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <MX_I2C1_Init+0x74>)
 8001cc4:	f005 f83d 	bl	8006d42 <HAL_I2CEx_ConfigDigitalFilter>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cce:	f000 fb1f 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000358 	.word	0x20000358
 8001cdc:	40005400 	.word	0x40005400
 8001ce0:	40b285c2 	.word	0x40b285c2

08001ce4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b09c      	sub	sp, #112	@ 0x70
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	2244      	movs	r2, #68	@ 0x44
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f010 fb38 	bl	801237a <memset>
  if(i2cHandle->Instance==I2C1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc8 <HAL_I2C_MspInit+0xe4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d154      	bne.n	8001dbe <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d14:	2340      	movs	r3, #64	@ 0x40
 8001d16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	4618      	mov	r0, r3
 8001d22:	f005 fe6b 	bl	80079fc <HAL_RCCEx_PeriphCLKConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d2c:	f000 faf0 	bl	8002310 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b26      	ldr	r3, [pc, #152]	@ (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d34:	4a25      	ldr	r2, [pc, #148]	@ (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d3c:	4b23      	ldr	r3, [pc, #140]	@ (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d54:	4b1d      	ldr	r3, [pc, #116]	@ (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d66:	2312      	movs	r3, #18
 8001d68:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d72:	2304      	movs	r3, #4
 8001d74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d80:	f004 fa0a 	bl	8006198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8a:	2312      	movs	r3, #18
 8001d8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d96:	2304      	movs	r3, #4
 8001d98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480b      	ldr	r0, [pc, #44]	@ (8001dd0 <HAL_I2C_MspInit+0xec>)
 8001da2:	f004 f9f9 	bl	8006198 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	4a08      	ldr	r2, [pc, #32]	@ (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001dac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_I2C_MspInit+0xe8>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3770      	adds	r7, #112	@ 0x70
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40005400 	.word	0x40005400
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	48000400 	.word	0x48000400

08001dd4 <lcd_send_data>:

char str[40];

extern I2C_HandleTypeDef hi2c1;

void lcd_send_data( char data){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u=(data&0xf0);
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f023 030f 	bic.w	r3, r3, #15
 8001de4:	73fb      	strb	r3, [r7, #15]
	data_l=((data<<4)&0xf0);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	73bb      	strb	r3, [r7, #14]
	data_t[0]=data_u|0x0D;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	f043 030d 	orr.w	r3, r3, #13
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	723b      	strb	r3, [r7, #8]
	data_t[1]=data_u|0x09;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	f043 0309 	orr.w	r3, r3, #9
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	727b      	strb	r3, [r7, #9]
	data_t[2]=data_l|0x0D;
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	f043 030d 	orr.w	r3, r3, #13
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	72bb      	strb	r3, [r7, #10]
	data_t[3]=data_l|0x09;
 8001e0a:	7bbb      	ldrb	r3, [r7, #14]
 8001e0c:	f043 0309 	orr.w	r3, r3, #9
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t,4, 100);
 8001e14:	f107 0208 	add.w	r2, r7, #8
 8001e18:	2364      	movs	r3, #100	@ 0x64
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	214e      	movs	r1, #78	@ 0x4e
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <lcd_send_data+0x5c>)
 8001e22:	f004 fc11 	bl	8006648 <HAL_I2C_Master_Transmit>





}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000358 	.word	0x20000358

08001e34 <lcd_send_cmd>:


void lcd_send_cmd( char data){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]

	char data_u, data_l;
	uint8_t data_t[4];
	data_u=(data&0xf0);
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f023 030f 	bic.w	r3, r3, #15
 8001e44:	73fb      	strb	r3, [r7, #15]
	data_l=((data<<4)&0xf0);
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	73bb      	strb	r3, [r7, #14]
	data_t[0]=data_u|0x0C;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	f043 030c 	orr.w	r3, r3, #12
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	723b      	strb	r3, [r7, #8]
	data_t[1]=data_u|0x08;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	f043 0308 	orr.w	r3, r3, #8
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	727b      	strb	r3, [r7, #9]
	data_t[2]=data_l|0x0C;
 8001e60:	7bbb      	ldrb	r3, [r7, #14]
 8001e62:	f043 030c 	orr.w	r3, r3, #12
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	72bb      	strb	r3, [r7, #10]
	data_t[3]=data_l|0x08;
 8001e6a:	7bbb      	ldrb	r3, [r7, #14]
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *) data_t,4, 100);
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	2364      	movs	r3, #100	@ 0x64
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	214e      	movs	r1, #78	@ 0x4e
 8001e80:	4803      	ldr	r0, [pc, #12]	@ (8001e90 <lcd_send_cmd+0x5c>)
 8001e82:	f004 fbe1 	bl	8006648 <HAL_I2C_Master_Transmit>





}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000358 	.word	0x20000358

08001e94 <lcd_clear>:


void lcd_clear(void){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

	lcd_send_cmd(0x01);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f7ff ffcb 	bl	8001e34 <lcd_send_cmd>
	osDelay(2);
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f00c fe0d 	bl	800eabe <osDelay>

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <lcd_send_string>:
	lcd_send_cmd(0x0C);


}

void lcd_send_string (char *str){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]


	while (*str)lcd_send_data(*str++);
 8001eb0:	e006      	b.n	8001ec0 <lcd_send_string+0x18>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff8a 	bl	8001dd4 <lcd_send_data>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f4      	bne.n	8001eb2 <lcd_send_string+0xa>
	osDelay(2);
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f00c fdf8 	bl	800eabe <osDelay>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <setCursor>:

void setCursor(int row, int col){
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]


	switch(row){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <setCursor+0x18>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d005      	beq.n	8001ef8 <setCursor+0x22>
		break;
	case 1:
		col|=0xC0;
		break;
	default:
		return;
 8001eec:	e00e      	b.n	8001f0c <setCursor+0x36>
		col|=0x80;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef4:	603b      	str	r3, [r7, #0]
		break;
 8001ef6:	e004      	b.n	8001f02 <setCursor+0x2c>
		col|=0xC0;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001efe:	603b      	str	r3, [r7, #0]
		break;
 8001f00:	bf00      	nop

	}
	lcd_send_cmd(col);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff94 	bl	8001e34 <lcd_send_cmd>

}
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <LED_Init>:
#include "led.h"


extern uint8_t LEDDMABUF[DMABUFLEN];
extern uint8_t DMA_COMPLETE_FLAG;
HAL_StatusTypeDef LED_Init(){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Init(&LED_TIM);
 8001f1a:	480d      	ldr	r0, [pc, #52]	@ (8001f50 <LED_Init+0x3c>)
 8001f1c:	f006 fc4e 	bl	80087bc <HAL_TIM_PWM_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001f24:	2300      	movs	r3, #0
 8001f26:	80fb      	strh	r3, [r7, #6]
 8001f28:	e006      	b.n	8001f38 <LED_Init+0x24>
		LEDDMABUF[i]=0;
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <LED_Init+0x40>)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<DMABUFLEN;i++){
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	3301      	adds	r3, #1
 8001f36:	80fb      	strh	r3, [r7, #6]
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001f3e:	d9f4      	bls.n	8001f2a <LED_Init+0x16>
	}

	DMA_COMPLETE_FLAG=1;
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <LED_Init+0x44>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]


	return halStatus;
 8001f46:	797b      	ldrb	r3, [r7, #5]




}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000dc0 	.word	0x20000dc0
 8001f54:	20000ae4 	.word	0x20000ae4
 8001f58:	20000c1d 	.word	0x20000c1d

08001f5c <LED_Setcolour>:



void LED_Setcolour(uint8_t r, uint8_t g, uint8_t b,uint8_t r1, uint8_t g1, uint8_t b1){
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b08b      	sub	sp, #44	@ 0x2c
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4604      	mov	r4, r0
 8001f64:	4608      	mov	r0, r1
 8001f66:	4611      	mov	r1, r2
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71bb      	strb	r3, [r7, #6]
 8001f72:	460b      	mov	r3, r1
 8001f74:	717b      	strb	r3, [r7, #5]
 8001f76:	4613      	mov	r3, r2
 8001f78:	713b      	strb	r3, [r7, #4]
	uint16_t dmabufindex=0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t ledbuf[LED_NUM*3];
	ledbuf[0]=g;
 8001f7e:	79bb      	ldrb	r3, [r7, #6]
 8001f80:	723b      	strb	r3, [r7, #8]
	ledbuf[1]=r;
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	727b      	strb	r3, [r7, #9]
	ledbuf[2]=b;
 8001f86:	797b      	ldrb	r3, [r7, #5]
 8001f88:	72bb      	strb	r3, [r7, #10]
	ledbuf[3]=g1;
 8001f8a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001f8e:	72fb      	strb	r3, [r7, #11]
	ledbuf[4]=r1;
 8001f90:	793b      	ldrb	r3, [r7, #4]
 8001f92:	733b      	strb	r3, [r7, #12]
	ledbuf[5]=b1;
 8001f94:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001f98:	737b      	strb	r3, [r7, #13]

	for(int i=0;i<DMABUFLEN;i++){
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
 8001f9e:	e007      	b.n	8001fb0 <LED_Setcolour+0x54>
			LEDDMABUF[i]=0;
 8001fa0:	4a35      	ldr	r2, [pc, #212]	@ (8002078 <LED_Setcolour+0x11c>)
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<DMABUFLEN;i++){
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	3301      	adds	r3, #1
 8001fae:	623b      	str	r3, [r7, #32]
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001fb6:	ddf3      	ble.n	8001fa0 <LED_Setcolour+0x44>
		}



	for(uint8_t i=0; i<LED_NUM;i++){
 8001fb8:	2300      	movs	r3, #0
 8001fba:	77fb      	strb	r3, [r7, #31]
 8001fbc:	e032      	b.n	8002024 <LED_Setcolour+0xc8>
		for(uint8_t j=0; j<3;j++){
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	77bb      	strb	r3, [r7, #30]
 8001fc2:	e029      	b.n	8002018 <LED_Setcolour+0xbc>
			for(int k=0;k<8;k++){
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	e020      	b.n	800200c <LED_Setcolour+0xb0>
			if((ledbuf[(3*i)+j]>>k)&0x01){
 8001fca:	7ffa      	ldrb	r2, [r7, #31]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	441a      	add	r2, r3
 8001fd2:	7fbb      	ldrb	r3, [r7, #30]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3328      	adds	r3, #40	@ 0x28
 8001fd8:	443b      	add	r3, r7
 8001fda:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa42 f303 	asr.w	r3, r2, r3
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <LED_Setcolour+0x9c>
				LEDDMABUF[dmabufindex]=HI_VAL;
 8001fee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ff0:	4a21      	ldr	r2, [pc, #132]	@ (8002078 <LED_Setcolour+0x11c>)
 8001ff2:	2199      	movs	r1, #153	@ 0x99
 8001ff4:	54d1      	strb	r1, [r2, r3]
 8001ff6:	e003      	b.n	8002000 <LED_Setcolour+0xa4>
			}
			else{
				LEDDMABUF[dmabufindex]=LOW_VAL;
 8001ff8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8002078 <LED_Setcolour+0x11c>)
 8001ffc:	2133      	movs	r1, #51	@ 0x33
 8001ffe:	54d1      	strb	r1, [r2, r3]
			}
			dmabufindex++;
 8002000:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002002:	3301      	adds	r3, #1
 8002004:	84fb      	strh	r3, [r7, #38]	@ 0x26
			for(int k=0;k<8;k++){
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3301      	adds	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b07      	cmp	r3, #7
 8002010:	dddb      	ble.n	8001fca <LED_Setcolour+0x6e>
		for(uint8_t j=0; j<3;j++){
 8002012:	7fbb      	ldrb	r3, [r7, #30]
 8002014:	3301      	adds	r3, #1
 8002016:	77bb      	strb	r3, [r7, #30]
 8002018:	7fbb      	ldrb	r3, [r7, #30]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d9d2      	bls.n	8001fc4 <LED_Setcolour+0x68>
	for(uint8_t i=0; i<LED_NUM;i++){
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	3301      	adds	r3, #1
 8002022:	77fb      	strb	r3, [r7, #31]
 8002024:	7ffb      	ldrb	r3, [r7, #31]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d9c9      	bls.n	8001fbe <LED_Setcolour+0x62>


		}
	}

	for(int i=0;i<RSTPERIOD;i++){
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e009      	b.n	8002044 <LED_Setcolour+0xe8>
		LEDDMABUF[dmabufindex]=0;
 8002030:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002032:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <LED_Setcolour+0x11c>)
 8002034:	2100      	movs	r1, #0
 8002036:	54d1      	strb	r1, [r2, r3]
		dmabufindex++;
 8002038:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800203a:	3301      	adds	r3, #1
 800203c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<RSTPERIOD;i++){
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800204a:	dbf1      	blt.n	8002030 <LED_Setcolour+0xd4>
	}

	for(int i=0;i<5;i++){
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e009      	b.n	8002066 <LED_Setcolour+0x10a>
			LEDDMABUF[dmabufindex]=0;
 8002052:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002054:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <LED_Setcolour+0x11c>)
 8002056:	2100      	movs	r1, #0
 8002058:	54d1      	strb	r1, [r2, r3]
			dmabufindex++;
 800205a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800205c:	3301      	adds	r3, #1
 800205e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i=0;i<5;i++){
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	3301      	adds	r3, #1
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b04      	cmp	r3, #4
 800206a:	ddf2      	ble.n	8002052 <LED_Setcolour+0xf6>
		}

	LED_Update();
 800206c:	f000 f806 	bl	800207c <LED_Update>

}
 8002070:	bf00      	nop
 8002072:	372c      	adds	r7, #44	@ 0x2c
 8002074:	46bd      	mov	sp, r7
 8002076:	bd90      	pop	{r4, r7, pc}
 8002078:	20000ae4 	.word	0x20000ae4

0800207c <LED_Update>:


HAL_StatusTypeDef LED_Update(){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef halStatus = HAL_TIM_PWM_Start_DMA(&LED_TIM, LED_TIM_CHANNEL, (uint32_t *)LEDDMABUF,DMABUFLEN);
 8002082:	f240 1339 	movw	r3, #313	@ 0x139
 8002086:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <LED_Update+0x30>)
 8002088:	2104      	movs	r1, #4
 800208a:	4809      	ldr	r0, [pc, #36]	@ (80020b0 <LED_Update+0x34>)
 800208c:	f006 fbf8 	bl	8008880 <HAL_TIM_PWM_Start_DMA>
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]

	if(halStatus==HAL_OK){
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <LED_Update+0x24>
		DMA_COMPLETE_FLAG=0;
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <LED_Update+0x38>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
	}


	return halStatus;
 80020a0:	79fb      	ldrb	r3, [r7, #7]

}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000ae4 	.word	0x20000ae4
 80020b0:	20000dc0 	.word	0x20000dc0
 80020b4:	20000c1d 	.word	0x20000c1d

080020b8 <LED_Callback>:



void LED_Callback(){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Stop_DMA(&LED_TIM, LED_TIM_CHANNEL);
 80020bc:	2104      	movs	r1, #4
 80020be:	4804      	ldr	r0, [pc, #16]	@ (80020d0 <LED_Callback+0x18>)
 80020c0:	f006 fdf6 	bl	8008cb0 <HAL_TIM_PWM_Stop_DMA>
	DMA_COMPLETE_FLAG=1;
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <LED_Callback+0x1c>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]


}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000dc0 	.word	0x20000dc0
 80020d4:	20000c1d 	.word	0x20000c1d

080020d8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

	LED_Callback();
 80020e0:	f7ff ffea 	bl	80020b8 <LED_Callback>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020f2:	f001 ff24 	bl	8003f3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f6:	f000 f8af 	bl	8002258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020fa:	f7ff fcff 	bl	8001afc <MX_GPIO_Init>
  MX_DMA_Init();
 80020fe:	f7ff fcbb 	bl	8001a78 <MX_DMA_Init>
  MX_ADC1_Init();
 8002102:	f7fe ffb5 	bl	8001070 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002106:	f7ff fdad 	bl	8001c64 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800210a:	f001 f869 	bl	80031e0 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800210e:	f000 fec3 	bl	8002e98 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002112:	f000 fe4b 	bl	8002dac <MX_TIM2_Init>
  MX_SPI1_Init();
 8002116:	f000 f97d 	bl	8002414 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800211a:	f009 fdf5 	bl	800bd08 <MX_FATFS_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <main+0x3c>
    Error_Handler();
 8002124:	f000 f8f4 	bl	8002310 <Error_Handler>
  }
  MX_TIM4_Init();
 8002128:	f000 ff2e 	bl	8002f88 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(PWEN_GPIO_Port,PWEN_Pin,GPIO_PIN_SET);
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002132:	483b      	ldr	r0, [pc, #236]	@ (8002220 <main+0x134>)
 8002134:	f004 f9b2 	bl	800649c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ROUGE_GPIO_Port,LED_ROUGE_Pin,GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800213e:	4838      	ldr	r0, [pc, #224]	@ (8002220 <main+0x134>)
 8002140:	f004 f9ac 	bl	800649c <HAL_GPIO_WritePin>




  if(HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 3)!=HAL_OK){
 8002144:	2203      	movs	r2, #3
 8002146:	4937      	ldr	r1, [pc, #220]	@ (8002224 <main+0x138>)
 8002148:	4837      	ldr	r0, [pc, #220]	@ (8002228 <main+0x13c>)
 800214a:	f002 fb15 	bl	8004778 <HAL_ADC_Start_DMA>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <main+0x6e>
 	 pbmseeker=1;
 8002154:	4b35      	ldr	r3, [pc, #212]	@ (800222c <main+0x140>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]
   }



  if(  LED_Init()!=HAL_OK){
 800215a:	f7ff fedb 	bl	8001f14 <LED_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <main+0x7e>
 	 pbmseeker=1;
 8002164:	4b31      	ldr	r3, [pc, #196]	@ (800222c <main+0x140>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]


   }

  if( INIT_PERM_TARVOS(SAT_ADDR, GROUND_ADDR)!=HAL_OK){
 800216a:	2101      	movs	r1, #1
 800216c:	2010      	movs	r0, #16
 800216e:	f000 fc07 	bl	8002980 <INIT_PERM_TARVOS>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <main+0x92>
 	 pbmseeker=1;
 8002178:	4b2c      	ldr	r3, [pc, #176]	@ (800222c <main+0x140>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]


   }


  HAL_Delay(100);
 800217e:	2064      	movs	r0, #100	@ 0x64
 8002180:	f001 ff14 	bl	8003fac <HAL_Delay>
  HAL_UART_Abort(&hlpuart1);
 8002184:	482a      	ldr	r0, [pc, #168]	@ (8002230 <main+0x144>)
 8002186:	f008 f933 	bl	800a3f0 <HAL_UART_Abort>
  if(HAL_UART_Receive_DMA(&hlpuart1, dma_rx_buffer, DMA_CHUNK_SIZE)!=HAL_OK){
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	4929      	ldr	r1, [pc, #164]	@ (8002234 <main+0x148>)
 800218e:	4828      	ldr	r0, [pc, #160]	@ (8002230 <main+0x144>)
 8002190:	f008 f8e2 	bl	800a358 <HAL_UART_Receive_DMA>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <main+0xb4>
 	pbmseeker=1;
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <main+0x140>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]


   }
  HAL_TIM_Base_Start_IT(&htim4);
 80021a0:	4825      	ldr	r0, [pc, #148]	@ (8002238 <main+0x14c>)
 80021a2:	f006 faa1 	bl	80086e8 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 80021a6:	200a      	movs	r0, #10
 80021a8:	f001 ff00 	bl	8003fac <HAL_Delay>

  fres = f_mount(&FatFs, "", 1);
 80021ac:	2201      	movs	r2, #1
 80021ae:	4923      	ldr	r1, [pc, #140]	@ (800223c <main+0x150>)
 80021b0:	4823      	ldr	r0, [pc, #140]	@ (8002240 <main+0x154>)
 80021b2:	f00b fba5 	bl	800d900 <f_mount>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <main+0x158>)
 80021bc:	701a      	strb	r2, [r3, #0]
  		  if (fres == FR_OK) {
 80021be:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <main+0x158>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d125      	bne.n	8002212 <main+0x126>
  			  fres = f_mkdir("DEMO");
 80021c6:	4820      	ldr	r0, [pc, #128]	@ (8002248 <main+0x15c>)
 80021c8:	f00c fa6e 	bl	800e6a8 <f_mkdir>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <main+0x158>)
 80021d2:	701a      	strb	r2, [r3, #0]
  			  fres = f_open(&fil, "/DEMO/write.txt",FA_WRITE | FA_OPEN_ALWAYS);
 80021d4:	2212      	movs	r2, #18
 80021d6:	491d      	ldr	r1, [pc, #116]	@ (800224c <main+0x160>)
 80021d8:	481d      	ldr	r0, [pc, #116]	@ (8002250 <main+0x164>)
 80021da:	f00b fbf5 	bl	800d9c8 <f_open>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <main+0x158>)
 80021e4:	701a      	strb	r2, [r3, #0]
  			  if (fres == FR_OK) {
 80021e6:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <main+0x158>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <main+0x11c>
  				  //snprintf((char*) readBuf,30, "I hate Java!");
  				  UINT bytesWrote;
  				  fres = f_write(&fil,(uint8_t *)"test123test", 11, &bytesWrote);
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	220b      	movs	r2, #11
 80021f2:	4918      	ldr	r1, [pc, #96]	@ (8002254 <main+0x168>)
 80021f4:	4816      	ldr	r0, [pc, #88]	@ (8002250 <main+0x164>)
 80021f6:	f00b fda8 	bl	800dd4a <f_write>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <main+0x158>)
 8002200:	701a      	strb	r2, [r3, #0]
  				  f_close(&fil);
 8002202:	4813      	ldr	r0, [pc, #76]	@ (8002250 <main+0x164>)
 8002204:	f00b ffce 	bl	800e1a4 <f_close>

  			  }
  			  f_mount(NULL, "", 0);
 8002208:	2200      	movs	r2, #0
 800220a:	490c      	ldr	r1, [pc, #48]	@ (800223c <main+0x150>)
 800220c:	2000      	movs	r0, #0
 800220e:	f00b fb77 	bl	800d900 <f_mount>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002212:	f7ff f913 	bl	800143c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002216:	f00c fc24 	bl	800ea62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800221a:	bf00      	nop
 800221c:	e7fd      	b.n	800221a <main+0x12e>
 800221e:	bf00      	nop
 8002220:	48000400 	.word	0x48000400
 8002224:	20000a54 	.word	0x20000a54
 8002228:	20000214 	.word	0x20000214
 800222c:	20000c30 	.word	0x20000c30
 8002230:	20001088 	.word	0x20001088
 8002234:	20000f04 	.word	0x20000f04
 8002238:	20000e58 	.word	0x20000e58
 800223c:	08016424 	.word	0x08016424
 8002240:	200005ec 	.word	0x200005ec
 8002244:	20000820 	.word	0x20000820
 8002248:	08016428 	.word	0x08016428
 800224c:	08016430 	.word	0x08016430
 8002250:	20000824 	.word	0x20000824
 8002254:	08016440 	.word	0x08016440

08002258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b094      	sub	sp, #80	@ 0x50
 800225c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225e:	f107 0318 	add.w	r3, r7, #24
 8002262:	2238      	movs	r2, #56	@ 0x38
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f010 f887 	bl	801237a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800227a:	2000      	movs	r0, #0
 800227c:	f004 fdae 	bl	8006ddc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002280:	2301      	movs	r3, #1
 8002282:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002284:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002288:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228a:	2302      	movs	r3, #2
 800228c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800228e:	2303      	movs	r3, #3
 8002290:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002292:	2304      	movs	r3, #4
 8002294:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002296:	2355      	movs	r3, #85	@ 0x55
 8002298:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800229a:	2302      	movs	r3, #2
 800229c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800229e:	2302      	movs	r3, #2
 80022a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022a2:	2302      	movs	r3, #2
 80022a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a6:	f107 0318 	add.w	r3, r7, #24
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 fe4a 	bl	8006f44 <HAL_RCC_OscConfig>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <SystemClock_Config+0x62>
  {
    Error_Handler();
 80022b6:	f000 f82b 	bl	8002310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ba:	230f      	movs	r3, #15
 80022bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022be:	2303      	movs	r3, #3
 80022c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2104      	movs	r1, #4
 80022d2:	4618      	mov	r0, r3
 80022d4:	f005 f948 	bl	8007568 <HAL_RCC_ClockConfig>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80022de:	f000 f817 	bl	8002310 <Error_Handler>
  }
}
 80022e2:	bf00      	nop
 80022e4:	3750      	adds	r7, #80	@ 0x50
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80022fe:	f001 fe37 	bl	8003f70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40012c00 	.word	0x40012c00

08002310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002314:	b672      	cpsid	i
}
 8002316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <Error_Handler+0x8>

0800231c <store_in_sd>:
extern DWORD free_sectors;	  // Free Sectors
extern DWORD total_sectors;



FRESULT store_in_sd(FRESULT fres){
 800231c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002320:	b08f      	sub	sp, #60	@ 0x3c
 8002322:	af0a      	add	r7, sp, #40	@ 0x28
 8002324:	4603      	mov	r3, r0
 8002326:	71fb      	strb	r3, [r7, #7]

	uint16_t sizeligne=0;
 8002328:	2300      	movs	r3, #0
 800232a:	81fb      	strh	r3, [r7, #14]

	sizeligne=snprintf((char *)sdcardbuffer,256,"%0.1f,%0.1f,%d,%0.2f,%lu\n\r",temp,vbat,vraiRSSI,distance_RSSI,timeindex);
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <store_in_sd+0xcc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe f931 	bl	8000598 <__aeabi_f2d>
 8002336:	4604      	mov	r4, r0
 8002338:	460d      	mov	r5, r1
 800233a:	4b2c      	ldr	r3, [pc, #176]	@ (80023ec <store_in_sd+0xd0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f92a 	bl	8000598 <__aeabi_f2d>
 8002344:	4680      	mov	r8, r0
 8002346:	4689      	mov	r9, r1
 8002348:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <store_in_sd+0xd4>)
 800234a:	f993 3000 	ldrsb.w	r3, [r3]
 800234e:	461e      	mov	r6, r3
 8002350:	4b28      	ldr	r3, [pc, #160]	@ (80023f4 <store_in_sd+0xd8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f91f 	bl	8000598 <__aeabi_f2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4926      	ldr	r1, [pc, #152]	@ (80023f8 <store_in_sd+0xdc>)
 8002360:	6809      	ldr	r1, [r1, #0]
 8002362:	9108      	str	r1, [sp, #32]
 8002364:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002368:	9604      	str	r6, [sp, #16]
 800236a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800236e:	e9cd 4500 	strd	r4, r5, [sp]
 8002372:	4a22      	ldr	r2, [pc, #136]	@ (80023fc <store_in_sd+0xe0>)
 8002374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002378:	4821      	ldr	r0, [pc, #132]	@ (8002400 <store_in_sd+0xe4>)
 800237a:	f00f ff63 	bl	8012244 <sniprintf>
 800237e:	4603      	mov	r3, r0
 8002380:	81fb      	strh	r3, [r7, #14]




			  if (fres == FR_OK) {
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d129      	bne.n	80023dc <store_in_sd+0xc0>
				  if(flag_drop==0){
 8002388:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <store_in_sd+0xe8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <store_in_sd+0x84>
			  fres = f_open(&fil, (uint8_t *) "SAT_01.csv",FA_WRITE | FA_OPEN_ALWAYS);
 8002390:	2212      	movs	r2, #18
 8002392:	491d      	ldr	r1, [pc, #116]	@ (8002408 <store_in_sd+0xec>)
 8002394:	481d      	ldr	r0, [pc, #116]	@ (800240c <store_in_sd+0xf0>)
 8002396:	f00b fb17 	bl	800d9c8 <f_open>
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	e006      	b.n	80023ae <store_in_sd+0x92>

				  }
				  else{
					  fres = f_open(&fil, (uint8_t *) "SAT_02.csv",FA_WRITE | FA_OPEN_ALWAYS);
 80023a0:	2212      	movs	r2, #18
 80023a2:	491b      	ldr	r1, [pc, #108]	@ (8002410 <store_in_sd+0xf4>)
 80023a4:	4819      	ldr	r0, [pc, #100]	@ (800240c <store_in_sd+0xf0>)
 80023a6:	f00b fb0f 	bl	800d9c8 <f_open>
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]

				  }
				  if (fres == FR_OK) {
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d113      	bne.n	80023dc <store_in_sd+0xc0>
					  fres=f_lseek(&fil, f_size(&fil));
 80023b4:	4b15      	ldr	r3, [pc, #84]	@ (800240c <store_in_sd+0xf0>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4814      	ldr	r0, [pc, #80]	@ (800240c <store_in_sd+0xf0>)
 80023bc:	f00b ff21 	bl	800e202 <f_lseek>
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
					  UINT bytesWrote;
					  fres = f_write(&fil,(char*)sdcardbuffer, sizeligne, &bytesWrote);
 80023c4:	89fa      	ldrh	r2, [r7, #14]
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	490d      	ldr	r1, [pc, #52]	@ (8002400 <store_in_sd+0xe4>)
 80023cc:	480f      	ldr	r0, [pc, #60]	@ (800240c <store_in_sd+0xf0>)
 80023ce:	f00b fcbc 	bl	800dd4a <f_write>
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
					  f_close(&fil);
 80023d6:	480d      	ldr	r0, [pc, #52]	@ (800240c <store_in_sd+0xf0>)
 80023d8:	f00b fee4 	bl	800e1a4 <f_close>
				  }

			  }


	return fres;
 80023dc:	79fb      	ldrb	r3, [r7, #7]

}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023e8:	20000a5c 	.word	0x20000a5c
 80023ec:	20000a64 	.word	0x20000a64
 80023f0:	200002e4 	.word	0x200002e4
 80023f4:	200002e8 	.word	0x200002e8
 80023f8:	20000c34 	.word	0x20000c34
 80023fc:	0801644c 	.word	0x0801644c
 8002400:	200003ec 	.word	0x200003ec
 8002404:	20000c20 	.word	0x20000c20
 8002408:	08016468 	.word	0x08016468
 800240c:	20000824 	.word	0x20000824
 8002410:	08016474 	.word	0x08016474

08002414 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002418:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <MX_SPI1_Init+0x74>)
 800241a:	4a1c      	ldr	r2, [pc, #112]	@ (800248c <MX_SPI1_Init+0x78>)
 800241c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800241e:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <MX_SPI1_Init+0x74>)
 8002420:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <MX_SPI1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800242c:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <MX_SPI1_Init+0x74>)
 800242e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002432:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002434:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <MX_SPI1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800243a:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <MX_SPI1_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <MX_SPI1_Init+0x74>)
 8002442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002446:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002448:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <MX_SPI1_Init+0x74>)
 800244a:	2220      	movs	r2, #32
 800244c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <MX_SPI1_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <MX_SPI1_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245a:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <MX_SPI1_Init+0x74>)
 800245c:	2200      	movs	r2, #0
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002460:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <MX_SPI1_Init+0x74>)
 8002462:	2207      	movs	r2, #7
 8002464:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <MX_SPI1_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <MX_SPI1_Init+0x74>)
 800246e:	2208      	movs	r2, #8
 8002470:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	@ (8002488 <MX_SPI1_Init+0x74>)
 8002474:	f005 fcb2 	bl	8007ddc <HAL_SPI_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800247e:	f7ff ff47 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000c38 	.word	0x20000c38
 800248c:	40013000 	.word	0x40013000

08002490 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_SPI_MspInit+0x7c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d128      	bne.n	8002504 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b2:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	4a10      	ldr	r2, [pc, #64]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_SPI_MspInit+0x80>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024e2:	23e0      	movs	r3, #224	@ 0xe0
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024f2:	2305      	movs	r3, #5
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002500:	f003 fe4a 	bl	8006198 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	@ 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40013000 	.word	0x40013000
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_MspInit+0x50>)
 800251c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251e:	4a11      	ldr	r2, [pc, #68]	@ (8002564 <HAL_MspInit+0x50>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6613      	str	r3, [r2, #96]	@ 0x60
 8002526:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <HAL_MspInit+0x50>)
 8002528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <HAL_MspInit+0x50>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	4a0b      	ldr	r2, [pc, #44]	@ (8002564 <HAL_MspInit+0x50>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	@ 0x58
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <HAL_MspInit+0x50>)
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	210f      	movs	r1, #15
 800254e:	f06f 0001 	mvn.w	r0, #1
 8002552:	f003 fabb 	bl	8005acc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002556:	f004 fce5 	bl	8006f24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	@ 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002578:	4b2c      	ldr	r3, [pc, #176]	@ (800262c <HAL_InitTick+0xc4>)
 800257a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257c:	4a2b      	ldr	r2, [pc, #172]	@ (800262c <HAL_InitTick+0xc4>)
 800257e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002582:	6613      	str	r3, [r2, #96]	@ 0x60
 8002584:	4b29      	ldr	r3, [pc, #164]	@ (800262c <HAL_InitTick+0xc4>)
 8002586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002590:	f107 020c 	add.w	r2, r7, #12
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f005 f9b8 	bl	8007910 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025a0:	f005 f9a0 	bl	80078e4 <HAL_RCC_GetPCLK2Freq>
 80025a4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a8:	4a21      	ldr	r2, [pc, #132]	@ (8002630 <HAL_InitTick+0xc8>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	3b01      	subs	r3, #1
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002634 <HAL_InitTick+0xcc>)
 80025b6:	4a20      	ldr	r2, [pc, #128]	@ (8002638 <HAL_InitTick+0xd0>)
 80025b8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <HAL_InitTick+0xcc>)
 80025bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002634 <HAL_InitTick+0xcc>)
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002634 <HAL_InitTick+0xcc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <HAL_InitTick+0xcc>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80025d4:	4817      	ldr	r0, [pc, #92]	@ (8002634 <HAL_InitTick+0xcc>)
 80025d6:	f006 f82f 	bl	8008638 <HAL_TIM_Base_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80025e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d11b      	bne.n	8002620 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025e8:	4812      	ldr	r0, [pc, #72]	@ (8002634 <HAL_InitTick+0xcc>)
 80025ea:	f006 f87d 	bl	80086e8 <HAL_TIM_Base_Start_IT>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80025f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d111      	bne.n	8002620 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80025fc:	2019      	movs	r0, #25
 80025fe:	f003 fa7f 	bl	8005b00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b0f      	cmp	r3, #15
 8002606:	d808      	bhi.n	800261a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002608:	2200      	movs	r2, #0
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	2019      	movs	r0, #25
 800260e:	f003 fa5d 	bl	8005acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <HAL_InitTick+0xd4>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	e002      	b.n	8002620 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002620:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002624:	4618      	mov	r0, r3
 8002626:	3730      	adds	r7, #48	@ 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	431bde83 	.word	0x431bde83
 8002634:	20000c9c 	.word	0x20000c9c
 8002638:	40012c00 	.word	0x40012c00
 800263c:	20000010 	.word	0x20000010

08002640 <hard_fault_handler_c>:

uint8_t hardfaultbuf[200];


void hard_fault_handler_c(uint32_t *stacked_regs)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b092      	sub	sp, #72	@ 0x48
 8002644:	af08      	add	r7, sp, #32
 8002646:	6078      	str	r0, [r7, #4]
    // Récupère les registres sauvegardés par le CPU
    uint32_t r0  = stacked_regs[0];
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t r1  = stacked_regs[1];
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	623b      	str	r3, [r7, #32]
    uint32_t r2  = stacked_regs[2];
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	61fb      	str	r3, [r7, #28]
    uint32_t r3  = stacked_regs[3];
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	61bb      	str	r3, [r7, #24]
    uint32_t r12 = stacked_regs[4];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	617b      	str	r3, [r7, #20]
    uint32_t lr  = stacked_regs[5];
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	613b      	str	r3, [r7, #16]
    uint32_t pc  = stacked_regs[6]; // <-- Instruction fautive !
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	60fb      	str	r3, [r7, #12]
    uint32_t psr = stacked_regs[7];
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	60bb      	str	r3, [r7, #8]

    // Mettez un breakpoint ici
    snprintf((char *)hardfaultbuf,200,"\n[HardFault] R0=0x%08lX R1=0x%08lX R2=0x%08lX R3=0x%08lX R12=0x%08lX LR=0x%08lX PC=0x%08lX PSR=0x%08lX\n", r0, r1, r2, r3, r12, lr, pc, psr);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	9306      	str	r3, [sp, #24]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	9305      	str	r3, [sp, #20]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	9304      	str	r3, [sp, #16]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	9303      	str	r3, [sp, #12]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	9302      	str	r3, [sp, #8]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	4a03      	ldr	r2, [pc, #12]	@ (80026a4 <hard_fault_handler_c+0x64>)
 8002698:	21c8      	movs	r1, #200	@ 0xc8
 800269a:	4803      	ldr	r0, [pc, #12]	@ (80026a8 <hard_fault_handler_c+0x68>)
 800269c:	f00f fdd2 	bl	8012244 <sniprintf>
    // Pause ici pour analyse
    while(1);
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <hard_fault_handler_c+0x60>
 80026a4:	08016480 	.word	0x08016480
 80026a8:	20000ce8 	.word	0x20000ce8

080026ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <NMI_Handler+0x4>

080026b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
    __asm volatile
 80026b8:	f01e 0f04 	tst.w	lr, #4
 80026bc:	bf0c      	ite	eq
 80026be:	f3ef 8008 	mrseq	r0, MSP
 80026c2:	f3ef 8009 	mrsne	r0, PSP
 80026c6:	f7ff bfbb 	b.w	8002640 <hard_fault_handler_c>
        "MRSEQ r0, MSP\n"
        "MRSNE r0, PSP\n"
        "B hard_fault_handler_c\n"
    );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ca:	bf00      	nop
 80026cc:	e7fd      	b.n	80026ca <HardFault_Handler+0x16>

080026ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d2:	bf00      	nop
 80026d4:	e7fd      	b.n	80026d2 <MemManage_Handler+0x4>

080026d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026da:	bf00      	nop
 80026dc:	e7fd      	b.n	80026da <BusFault_Handler+0x4>

080026de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e2:	bf00      	nop
 80026e4:	e7fd      	b.n	80026e2 <UsageFault_Handler+0x4>

080026e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80026f8:	2002      	movs	r0, #2
 80026fa:	f003 fee7 	bl	80064cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}

08002702 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002706:	2010      	movs	r0, #16
 8002708:	f003 fee0 	bl	80064cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}

08002710 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <DMA1_Channel1_IRQHandler+0x10>)
 8002716:	f003 fbe4 	bl	8005ee2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000ea4 	.word	0x20000ea4

08002724 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <DMA1_Channel2_IRQHandler+0x10>)
 800272a:	f003 fbda 	bl	8005ee2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000280 	.word	0x20000280

08002738 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <DMA1_Channel3_IRQHandler+0x10>)
 800273e:	f003 fbd0 	bl	8005ee2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000111c 	.word	0x2000111c

0800274c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <DMA1_Channel4_IRQHandler+0x10>)
 8002752:	f003 fbc6 	bl	8005ee2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000117c 	.word	0x2000117c

08002760 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <ADC1_2_IRQHandler+0x10>)
 8002766:	f002 f8bb 	bl	80048e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000214 	.word	0x20000214

08002774 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800277a:	f006 fb91 	bl	8008ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000c9c 	.word	0x20000c9c

08002788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <TIM2_IRQHandler+0x10>)
 800278e:	f006 fb87 	bl	8008ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000dc0 	.word	0x20000dc0

0800279c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	timeindex++;
 80027a0:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <TIM4_IRQHandler+0x18>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	4a03      	ldr	r2, [pc, #12]	@ (80027b4 <TIM4_IRQHandler+0x18>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027aa:	4803      	ldr	r0, [pc, #12]	@ (80027b8 <TIM4_IRQHandler+0x1c>)
 80027ac:	f006 fb78 	bl	8008ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000c34 	.word	0x20000c34
 80027b8:	20000e58 	.word	0x20000e58

080027bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80027c0:	4802      	ldr	r0, [pc, #8]	@ (80027cc <LPUART1_IRQHandler+0x10>)
 80027c2:	f007 ff23 	bl	800a60c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20001088 	.word	0x20001088

080027d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return 1;
 80027d4:	2301      	movs	r3, #1
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_kill>:

int _kill(int pid, int sig)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027ea:	f00f fe77 	bl	80124dc <__errno>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2216      	movs	r2, #22
 80027f2:	601a      	str	r2, [r3, #0]
  return -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_exit>:

void _exit (int status)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ffe7 	bl	80027e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002812:	bf00      	nop
 8002814:	e7fd      	b.n	8002812 <_exit+0x12>

08002816 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e00a      	b.n	800283e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002828:	f3af 8000 	nop.w
 800282c:	4601      	mov	r1, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	60ba      	str	r2, [r7, #8]
 8002834:	b2ca      	uxtb	r2, r1
 8002836:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3301      	adds	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	dbf0      	blt.n	8002828 <_read+0x12>
  }

  return len;
 8002846:	687b      	ldr	r3, [r7, #4]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	e009      	b.n	8002876 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	60ba      	str	r2, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	dbf1      	blt.n	8002862 <_write+0x12>
  }
  return len;
 800287e:	687b      	ldr	r3, [r7, #4]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_close>:

int _close(int file)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028b0:	605a      	str	r2, [r3, #4]
  return 0;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_isatty>:

int _isatty(int file)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f8:	4a14      	ldr	r2, [pc, #80]	@ (800294c <_sbrk+0x5c>)
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <_sbrk+0x60>)
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002904:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <_sbrk+0x64>)
 800290e:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <_sbrk+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002920:	f00f fddc 	bl	80124dc <__errno>
 8002924:	4603      	mov	r3, r0
 8002926:	220c      	movs	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e009      	b.n	8002944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002936:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <_sbrk+0x64>)
 8002940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20008000 	.word	0x20008000
 8002950:	00000400 	.word	0x00000400
 8002954:	20000db0 	.word	0x20000db0
 8002958:	200043e8 	.word	0x200043e8

0800295c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <SystemInit+0x20>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002966:	4a05      	ldr	r2, [pc, #20]	@ (800297c <SystemInit+0x20>)
 8002968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800296c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <INIT_PERM_TARVOS>:
	HAL_StatusTypeDef status=SET_tcMODE("command");

	return status;
}

HAL_StatusTypeDef INIT_PERM_TARVOS(uint8_t Hadr, uint8_t Sadr) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b08e      	sub	sp, #56	@ 0x38
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	460a      	mov	r2, r1
 800298a:	71fb      	strb	r3, [r7, #7]
 800298c:	4613      	mov	r3, r2
 800298e:	71bb      	strb	r3, [r7, #6]
	 uint8_t commandsize=6;
 8002990:	2306      	movs	r3, #6
 8002992:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	 uint8_t restartsize=4;
 8002996:	2304      	movs	r3, #4
 8002998:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	 HAL_StatusTypeDef status=HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    uint8_t mode1[] = {0x02, 0x09, 0x02, 0x04, 0x01,0x00};
 80029a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002b60 <INIT_PERM_TARVOS+0x1e0>)
 80029a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029ac:	6018      	str	r0, [r3, #0]
 80029ae:	3304      	adds	r3, #4
 80029b0:	8019      	strh	r1, [r3, #0]

    uint8_t frequence[] = {0x02, 0x09, 0x02, 0x03, 0x82, 0x00}; // 869.5 MHz -> 130 = 0x82
 80029b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002b64 <INIT_PERM_TARVOS+0x1e4>)
 80029b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029bc:	6018      	str	r0, [r3, #0]
 80029be:	3304      	adds	r3, #4
 80029c0:	8019      	strh	r1, [r3, #0]
    // On modifie la puissance (ici à 500mW max)
    uint8_t puissance[] = {0x02, 0x09, 0x02, 0x02, 0x1B, 0x00};
 80029c2:	4a69      	ldr	r2, [pc, #420]	@ (8002b68 <INIT_PERM_TARVOS+0x1e8>)
 80029c4:	f107 031c 	add.w	r3, r7, #28
 80029c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029cc:	6018      	str	r0, [r3, #0]
 80029ce:	3304      	adds	r3, #4
 80029d0:	8019      	strh	r1, [r3, #0]

    // On modifie l'adresse de la source
    uint8_t Sadrr[] = {0x02, 0x09, 0x02, 0x0B, Hadr, 0x00};
 80029d2:	2302      	movs	r3, #2
 80029d4:	753b      	strb	r3, [r7, #20]
 80029d6:	2309      	movs	r3, #9
 80029d8:	757b      	strb	r3, [r7, #21]
 80029da:	2302      	movs	r3, #2
 80029dc:	75bb      	strb	r3, [r7, #22]
 80029de:	230b      	movs	r3, #11
 80029e0:	75fb      	strb	r3, [r7, #23]
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	763b      	strb	r3, [r7, #24]
 80029e6:	2300      	movs	r3, #0
 80029e8:	767b      	strb	r3, [r7, #25]

    // On modifie l'adresse avec qui on veut communiquer
   	uint8_t send[] = {0x02, 0x09, 0x02, 0x08, Sadr, 0x00};
 80029ea:	2302      	movs	r3, #2
 80029ec:	733b      	strb	r3, [r7, #12]
 80029ee:	2309      	movs	r3, #9
 80029f0:	737b      	strb	r3, [r7, #13]
 80029f2:	2302      	movs	r3, #2
 80029f4:	73bb      	strb	r3, [r7, #14]
 80029f6:	2308      	movs	r3, #8
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	79bb      	ldrb	r3, [r7, #6]
 80029fc:	743b      	strb	r3, [r7, #16]
 80029fe:	2300      	movs	r3, #0
 8002a00:	747b      	strb	r3, [r7, #17]

   	// On redémarre le module pour mettre à jour les paramètres
   	uint8_t restart[4] = {0x02, 0x05, 0x00, 0x07};
 8002a02:	4b5a      	ldr	r3, [pc, #360]	@ (8002b6c <INIT_PERM_TARVOS+0x1ec>)
 8002a04:	60bb      	str	r3, [r7, #8]

    mode1[5] = Get_CRC8(mode1, commandsize-1); // Ajout du CRC
 8002a06:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f8ac 	bl	8002b74 <Get_CRC8>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if(HAL_UART_Transmit(&hlpuart1,(uint8_t *)mode1, commandsize, 100)!=HAL_OK){
 8002a22:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002a2c:	2364      	movs	r3, #100	@ 0x64
 8002a2e:	4850      	ldr	r0, [pc, #320]	@ (8002b70 <INIT_PERM_TARVOS+0x1f0>)
 8002a30:	f007 fc04 	bl	800a23c <HAL_UART_Transmit>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <INIT_PERM_TARVOS+0xc0>

    	status=HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37





    frequence[5] = Get_CRC8(frequence,  commandsize-1); // Ajout du CRC
 8002a40:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f88f 	bl	8002b74 <Get_CRC8>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    if( HAL_UART_Transmit(&hlpuart1, frequence, commandsize, 500)!=HAL_OK){
 8002a5c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002a66:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a6a:	4841      	ldr	r0, [pc, #260]	@ (8002b70 <INIT_PERM_TARVOS+0x1f0>)
 8002a6c:	f007 fbe6 	bl	800a23c <HAL_UART_Transmit>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <INIT_PERM_TARVOS+0xfc>

      	status=HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    puissance[5] = Get_CRC8(puissance,  commandsize-1); // Ajout du CRC
 8002a7c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f871 	bl	8002b74 <Get_CRC8>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    if( HAL_UART_Transmit(&hlpuart1, puissance, commandsize, 500)!=HAL_OK){
 8002a98:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	f107 011c 	add.w	r1, r7, #28
 8002aa2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002aa6:	4832      	ldr	r0, [pc, #200]	@ (8002b70 <INIT_PERM_TARVOS+0x1f0>)
 8002aa8:	f007 fbc8 	bl	800a23c <HAL_UART_Transmit>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <INIT_PERM_TARVOS+0x138>

      	status=HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



    Sadrr[5] = Get_CRC8(Sadrr, commandsize-1); // Ajout du CRC
 8002ab8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f853 	bl	8002b74 <Get_CRC8>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	767b      	strb	r3, [r7, #25]
    if( HAL_UART_Transmit(&hlpuart1, Sadrr, commandsize, 500)!=HAL_OK){
 8002ad2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	f107 0114 	add.w	r1, r7, #20
 8002adc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ae0:	4823      	ldr	r0, [pc, #140]	@ (8002b70 <INIT_PERM_TARVOS+0x1f0>)
 8002ae2:	f007 fbab 	bl	800a23c <HAL_UART_Transmit>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <INIT_PERM_TARVOS+0x172>

      	status=HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }



	send[5] = Get_CRC8(send,  commandsize-1); // Ajout du CRC
 8002af2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f836 	bl	8002b74 <Get_CRC8>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	747b      	strb	r3, [r7, #17]
	  if(HAL_UART_Transmit(&hlpuart1, send, commandsize, 500)!=HAL_OK){
 8002b0c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	f107 010c 	add.w	r1, r7, #12
 8002b16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b1a:	4815      	ldr	r0, [pc, #84]	@ (8002b70 <INIT_PERM_TARVOS+0x1f0>)
 8002b1c:	f007 fb8e 	bl	800a23c <HAL_UART_Transmit>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <INIT_PERM_TARVOS+0x1ac>

	    	status=HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


	  if(HAL_UART_Transmit(&hlpuart1, restart, restartsize, 500)!=HAL_OK){
 8002b2c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	f107 0108 	add.w	r1, r7, #8
 8002b36:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b3a:	480d      	ldr	r0, [pc, #52]	@ (8002b70 <INIT_PERM_TARVOS+0x1f0>)
 8002b3c:	f007 fb7e 	bl	800a23c <HAL_UART_Transmit>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <INIT_PERM_TARVOS+0x1cc>

	    	status=HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	    }


    HAL_Delay(1000);
 8002b4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b50:	f001 fa2c 	bl	8003fac <HAL_Delay>
    return status;
 8002b54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3738      	adds	r7, #56	@ 0x38
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	0801650c 	.word	0x0801650c
 8002b64:	08016514 	.word	0x08016514
 8002b68:	0801651c 	.word	0x0801651c
 8002b6c:	07000502 	.word	0x07000502
 8002b70:	20001088 	.word	0x20001088

08002b74 <Get_CRC8>:



uint8_t Get_CRC8(uint8_t * bufP, uint16_t len){
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]

	uint8_t crc = 0x00;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8002b84:	2300      	movs	r3, #0
 8002b86:	81bb      	strh	r3, [r7, #12]
 8002b88:	e009      	b.n	8002b9e <Get_CRC8+0x2a>
		crc ^= bufP[i];
 8002b8a:	89bb      	ldrh	r3, [r7, #12]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	4053      	eors	r3, r2
 8002b96:	73fb      	strb	r3, [r7, #15]
	for (uint16_t i = 0; i < len; i++){
 8002b98:	89bb      	ldrh	r3, [r7, #12]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	81bb      	strh	r3, [r7, #12]
 8002b9e:	89ba      	ldrh	r2, [r7, #12]
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3f1      	bcc.n	8002b8a <Get_CRC8+0x16>
	}
	return crc;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <decode_payload>:

    SEND_DATA_NETW1((uint8_t *)buffdonnee, channel,dest_adress, 54);

}

void decode_payload(DecodedPayload* out,uint8_t * receivingbuffer) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	if(receivingbuffer[0]!=0x02 || receivingbuffer[1]!=0x81){
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	f040 80bc 	bne.w	8002d40 <decode_payload+0x18c>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b81      	cmp	r3, #129	@ 0x81
 8002bd0:	f040 80b6 	bne.w	8002d40 <decode_payload+0x18c>
		return;
	}
	if(receivingbuffer[2]!=56){
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b38      	cmp	r3, #56	@ 0x38
 8002bdc:	f040 80b2 	bne.w	8002d44 <decode_payload+0x190>
		return;
	}

	out->senderadress=receivingbuffer[3];
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	78da      	ldrb	r2, [r3, #3]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	out->header_code = (receivingbuffer[4] << 8) | receivingbuffer[5];
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	3304      	adds	r3, #4
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b21b      	sxth	r3, r3
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	3305      	adds	r3, #5
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b21b      	sxth	r3, r3
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    out->flag_calib = receivingbuffer[6];
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	799a      	ldrb	r2, [r3, #6]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    out->flag_drop = receivingbuffer[7];
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	79da      	ldrb	r2, [r3, #7]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    out->flag_separation = receivingbuffer[8];
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	7a1a      	ldrb	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    out->flag_fin = receivingbuffer[9];
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	7a5a      	ldrb	r2, [r3, #9]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45



    memcpy(&out->latitude,      &receivingbuffer[10],  sizeof(float));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3348      	adds	r3, #72	@ 0x48
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	320a      	adds	r2, #10
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
    memcpy(&out->longitude,     &receivingbuffer[14],  sizeof(float));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	334c      	adds	r3, #76	@ 0x4c
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	320e      	adds	r2, #14
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	601a      	str	r2, [r3, #0]
    memcpy(&out->hMSL,      &receivingbuffer[18], sizeof(float));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3350      	adds	r3, #80	@ 0x50
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	3212      	adds	r2, #18
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	601a      	str	r2, [r3, #0]
    memcpy(&out->altitude_baro, &receivingbuffer[22], sizeof(float));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3354      	adds	r3, #84	@ 0x54
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	3216      	adds	r2, #22
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	601a      	str	r2, [r3, #0]
    memcpy(&out->vspeed,        &receivingbuffer[26], sizeof(float));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3358      	adds	r3, #88	@ 0x58
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	321a      	adds	r2, #26
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	601a      	str	r2, [r3, #0]
    memcpy(&out->hspeed,        &receivingbuffer[30], sizeof(float));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	335c      	adds	r3, #92	@ 0x5c
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	321e      	adds	r2, #30
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	601a      	str	r2, [r3, #0]
    memcpy(&out->temperature,     &receivingbuffer[34], sizeof(float));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3360      	adds	r3, #96	@ 0x60
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	3222      	adds	r2, #34	@ 0x22
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	601a      	str	r2, [r3, #0]
    memcpy(&out->pression,     &receivingbuffer[38], sizeof(float));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3370      	adds	r3, #112	@ 0x70
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	3226      	adds	r2, #38	@ 0x26
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accx,     &receivingbuffer[42], sizeof(float));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3364      	adds	r3, #100	@ 0x64
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	322a      	adds	r2, #42	@ 0x2a
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accy,     &receivingbuffer[46], sizeof(float));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3368      	adds	r3, #104	@ 0x68
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	322e      	adds	r2, #46	@ 0x2e
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	601a      	str	r2, [r3, #0]
    memcpy(&out->Accz,     &receivingbuffer[50], sizeof(float));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	336c      	adds	r3, #108	@ 0x6c
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	3232      	adds	r2, #50	@ 0x32
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	601a      	str	r2, [r3, #0]
    memcpy(&out->timeindex,     &receivingbuffer[54], sizeof(uint32_t));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3374      	adds	r3, #116	@ 0x74
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	3236      	adds	r2, #54	@ 0x36
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	601a      	str	r2, [r3, #0]
    memcpy(&out->RSSI,     &receivingbuffer[58], sizeof(uint8_t));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3378      	adds	r3, #120	@ 0x78
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	323a      	adds	r2, #58	@ 0x3a
 8002cca:	7812      	ldrb	r2, [r2, #0]
 8002ccc:	701a      	strb	r2, [r3, #0]


    vraiRSSI=(int8_t)out->RSSI;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002cd4:	b25a      	sxtb	r2, r3
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <decode_payload+0x198>)
 8002cd8:	701a      	strb	r2, [r3, #0]

    if(noreturn_flag3==0){
 8002cda:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <decode_payload+0x19c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <decode_payload+0x144>
    if(receivingbuffer[6]==1){
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	3306      	adds	r3, #6
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d105      	bne.n	8002cf8 <decode_payload+0x144>
    	flag_calib=1;
 8002cec:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <decode_payload+0x1a0>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
    	noreturn_flag3=1;
 8002cf2:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <decode_payload+0x19c>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
    }
    }

    if(noreturn_flag1==0){
 8002cf8:	4b17      	ldr	r3, [pc, #92]	@ (8002d58 <decode_payload+0x1a4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <decode_payload+0x162>
    if(receivingbuffer[7]==1){
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3307      	adds	r3, #7
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <decode_payload+0x162>
    	flag_drop=1;
 8002d0a:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <decode_payload+0x1a8>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
    	noreturn_flag1=1;
 8002d10:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <decode_payload+0x1a4>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    }

    }
    if(noreturn_flag2==0){
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <decode_payload+0x1ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <decode_payload+0x180>
    if(receivingbuffer[8]==1){
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	3308      	adds	r3, #8
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <decode_payload+0x180>
    	flag_separation=1;
 8002d28:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <decode_payload+0x1b0>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    	noreturn_flag2=1;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <decode_payload+0x1ac>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    }



    memset((uint8_t *)receivingbuffer,0,64);
 8002d34:	2240      	movs	r2, #64	@ 0x40
 8002d36:	2100      	movs	r1, #0
 8002d38:	6838      	ldr	r0, [r7, #0]
 8002d3a:	f00f fb1e 	bl	801237a <memset>
 8002d3e:	e002      	b.n	8002d46 <decode_payload+0x192>
		return;
 8002d40:	bf00      	nop
 8002d42:	e000      	b.n	8002d46 <decode_payload+0x192>
		return;
 8002d44:	bf00      	nop
}
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200002e4 	.word	0x200002e4
 8002d50:	20000dbc 	.word	0x20000dbc
 8002d54:	20000c28 	.word	0x20000c28
 8002d58:	20000db4 	.word	0x20000db4
 8002d5c:	20000c20 	.word	0x20000c20
 8002d60:	20000db8 	.word	0x20000db8
 8002d64:	20000c24 	.word	0x20000c24

08002d68 <tarvos_checksum>:

uint8_t tarvos_checksum(uint8_t *data, uint16_t len)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
    uint8_t checksum = 0x00;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 8002d78:	2300      	movs	r3, #0
 8002d7a:	81bb      	strh	r3, [r7, #12]
 8002d7c:	e009      	b.n	8002d92 <tarvos_checksum+0x2a>
        checksum ^= data[i];
 8002d7e:	89bb      	ldrh	r3, [r7, #12]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	4053      	eors	r3, r2
 8002d8a:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < len - 1; i++) {
 8002d8c:	89bb      	ldrh	r3, [r7, #12]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	81bb      	strh	r3, [r7, #12]
 8002d92:	89ba      	ldrh	r2, [r7, #12]
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dbf0      	blt.n	8002d7e <tarvos_checksum+0x16>
    }
    return checksum;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	@ 0x38
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc0:	f107 031c 	add.w	r3, r7, #28
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dcc:	463b      	mov	r3, r7
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	615a      	str	r2, [r3, #20]
 8002ddc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dde:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002de0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002de4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002de6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dec:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 203;
 8002df2:	4b28      	ldr	r3, [pc, #160]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002df4:	22cb      	movs	r2, #203	@ 0xcb
 8002df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df8:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfe:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e04:	4823      	ldr	r0, [pc, #140]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002e06:	f005 fc17 	bl	8008638 <HAL_TIM_Base_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002e10:	f7ff fa7e 	bl	8002310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	481c      	ldr	r0, [pc, #112]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002e22:	f006 faa1 	bl	8009368 <HAL_TIM_ConfigClockSource>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002e2c:	f7ff fa70 	bl	8002310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e30:	4818      	ldr	r0, [pc, #96]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002e32:	f005 fcc3 	bl	80087bc <HAL_TIM_PWM_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002e3c:	f7ff fa68 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4811      	ldr	r0, [pc, #68]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002e50:	f007 f8dc 	bl	800a00c <HAL_TIMEx_MasterConfigSynchronization>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e5a:	f7ff fa59 	bl	8002310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e5e:	2360      	movs	r3, #96	@ 0x60
 8002e60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e6e:	463b      	mov	r3, r7
 8002e70:	2204      	movs	r2, #4
 8002e72:	4619      	mov	r1, r3
 8002e74:	4807      	ldr	r0, [pc, #28]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002e76:	f006 f963 	bl	8009140 <HAL_TIM_PWM_ConfigChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002e80:	f7ff fa46 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e84:	4803      	ldr	r0, [pc, #12]	@ (8002e94 <MX_TIM2_Init+0xe8>)
 8002e86:	f000 f951 	bl	800312c <HAL_TIM_MspPostInit>

}
 8002e8a:	bf00      	nop
 8002e8c:	3738      	adds	r7, #56	@ 0x38
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000dc0 	.word	0x20000dc0

08002e98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08e      	sub	sp, #56	@ 0x38
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	615a      	str	r2, [r3, #20]
 8002ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eca:	4b2d      	ldr	r3, [pc, #180]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8002f84 <MX_TIM3_Init+0xec>)
 8002ece:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002ed2:	22a9      	movs	r2, #169	@ 0xa9
 8002ed4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002edc:	4b28      	ldr	r3, [pc, #160]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002ede:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002ee2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee4:	4b26      	ldr	r3, [pc, #152]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002eea:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002eec:	2280      	movs	r2, #128	@ 0x80
 8002eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ef0:	4823      	ldr	r0, [pc, #140]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002ef2:	f005 fba1 	bl	8008638 <HAL_TIM_Base_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002efc:	f7ff fa08 	bl	8002310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	481c      	ldr	r0, [pc, #112]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002f0e:	f006 fa2b 	bl	8009368 <HAL_TIM_ConfigClockSource>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f18:	f7ff f9fa 	bl	8002310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f1c:	4818      	ldr	r0, [pc, #96]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002f1e:	f005 fc4d 	bl	80087bc <HAL_TIM_PWM_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f28:	f7ff f9f2 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4811      	ldr	r0, [pc, #68]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002f3c:	f007 f866 	bl	800a00c <HAL_TIMEx_MasterConfigSynchronization>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f46:	f7ff f9e3 	bl	8002310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f4a:	2360      	movs	r3, #96	@ 0x60
 8002f4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4807      	ldr	r0, [pc, #28]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002f62:	f006 f8ed 	bl	8009140 <HAL_TIM_PWM_ConfigChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002f6c:	f7ff f9d0 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f70:	4803      	ldr	r0, [pc, #12]	@ (8002f80 <MX_TIM3_Init+0xe8>)
 8002f72:	f000 f8db 	bl	800312c <HAL_TIM_MspPostInit>

}
 8002f76:	bf00      	nop
 8002f78:	3738      	adds	r7, #56	@ 0x38
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000e0c 	.word	0x20000e0c
 8002f84:	40000400 	.word	0x40000400

08002f88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f8e:	f107 0310 	add.w	r3, r7, #16
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003020 <MX_TIM4_Init+0x98>)
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8003024 <MX_TIM4_Init+0x9c>)
 8002faa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8002fac:	4b1c      	ldr	r3, [pc, #112]	@ (8003020 <MX_TIM4_Init+0x98>)
 8002fae:	f244 2267 	movw	r2, #16999	@ 0x4267
 8002fb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003020 <MX_TIM4_Init+0x98>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8002fba:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <MX_TIM4_Init+0x98>)
 8002fbc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002fc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc2:	4b17      	ldr	r3, [pc, #92]	@ (8003020 <MX_TIM4_Init+0x98>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc8:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <MX_TIM4_Init+0x98>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fce:	4814      	ldr	r0, [pc, #80]	@ (8003020 <MX_TIM4_Init+0x98>)
 8002fd0:	f005 fb32 	bl	8008638 <HAL_TIM_Base_Init>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002fda:	f7ff f999 	bl	8002310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	4619      	mov	r1, r3
 8002fea:	480d      	ldr	r0, [pc, #52]	@ (8003020 <MX_TIM4_Init+0x98>)
 8002fec:	f006 f9bc 	bl	8009368 <HAL_TIM_ConfigClockSource>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002ff6:	f7ff f98b 	bl	8002310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4806      	ldr	r0, [pc, #24]	@ (8003020 <MX_TIM4_Init+0x98>)
 8003008:	f007 f800 	bl	800a00c <HAL_TIMEx_MasterConfigSynchronization>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8003012:	f7ff f97d 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003016:	bf00      	nop
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000e58 	.word	0x20000e58
 8003024:	40000800 	.word	0x40000800

08003028 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003038:	d13e      	bne.n	80030b8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800303a:	4b37      	ldr	r3, [pc, #220]	@ (8003118 <HAL_TIM_Base_MspInit+0xf0>)
 800303c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303e:	4a36      	ldr	r2, [pc, #216]	@ (8003118 <HAL_TIM_Base_MspInit+0xf0>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6593      	str	r3, [r2, #88]	@ 0x58
 8003046:	4b34      	ldr	r3, [pc, #208]	@ (8003118 <HAL_TIM_Base_MspInit+0xf0>)
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8003052:	4b32      	ldr	r3, [pc, #200]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 8003054:	4a32      	ldr	r2, [pc, #200]	@ (8003120 <HAL_TIM_Base_MspInit+0xf8>)
 8003056:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8003058:	4b30      	ldr	r3, [pc, #192]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 800305a:	2239      	movs	r2, #57	@ 0x39
 800305c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800305e:	4b2f      	ldr	r3, [pc, #188]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 8003060:	2210      	movs	r2, #16
 8003062:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003064:	4b2d      	ldr	r3, [pc, #180]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800306a:	4b2c      	ldr	r3, [pc, #176]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 800306c:	2280      	movs	r2, #128	@ 0x80
 800306e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003070:	4b2a      	ldr	r3, [pc, #168]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 8003072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003076:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003078:	4b28      	ldr	r3, [pc, #160]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 800307a:	2200      	movs	r2, #0
 800307c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 800307e:	4b27      	ldr	r3, [pc, #156]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 8003080:	2200      	movs	r2, #0
 8003082:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003084:	4b25      	ldr	r3, [pc, #148]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 8003086:	2200      	movs	r2, #0
 8003088:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 800308a:	4824      	ldr	r0, [pc, #144]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 800308c:	f002 fd46 	bl	8005b1c <HAL_DMA_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8003096:	f7ff f93b 	bl	8002310 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1f      	ldr	r2, [pc, #124]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28
 80030a0:	4a1e      	ldr	r2, [pc, #120]	@ (800311c <HAL_TIM_Base_MspInit+0xf4>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2105      	movs	r1, #5
 80030aa:	201c      	movs	r0, #28
 80030ac:	f002 fd0e 	bl	8005acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030b0:	201c      	movs	r0, #28
 80030b2:	f002 fd25 	bl	8005b00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80030b6:	e02a      	b.n	800310e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <HAL_TIM_Base_MspInit+0xfc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10c      	bne.n	80030dc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030c2:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <HAL_TIM_Base_MspInit+0xf0>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	4a14      	ldr	r2, [pc, #80]	@ (8003118 <HAL_TIM_Base_MspInit+0xf0>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ce:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_TIM_Base_MspInit+0xf0>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
}
 80030da:	e018      	b.n	800310e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a11      	ldr	r2, [pc, #68]	@ (8003128 <HAL_TIM_Base_MspInit+0x100>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d113      	bne.n	800310e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <HAL_TIM_Base_MspInit+0xf0>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003118 <HAL_TIM_Base_MspInit+0xf0>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <HAL_TIM_Base_MspInit+0xf0>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);
 80030fe:	2200      	movs	r2, #0
 8003100:	2106      	movs	r1, #6
 8003102:	201e      	movs	r0, #30
 8003104:	f002 fce2 	bl	8005acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003108:	201e      	movs	r0, #30
 800310a:	f002 fcf9 	bl	8005b00 <HAL_NVIC_EnableIRQ>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	20000ea4 	.word	0x20000ea4
 8003120:	40020008 	.word	0x40020008
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800

0800312c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	@ 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314c:	d11d      	bne.n	800318a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	4b21      	ldr	r3, [pc, #132]	@ (80031d4 <HAL_TIM_MspPostInit+0xa8>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003152:	4a20      	ldr	r2, [pc, #128]	@ (80031d4 <HAL_TIM_MspPostInit+0xa8>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800315a:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <HAL_TIM_MspPostInit+0xa8>)
 800315c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003166:	2302      	movs	r3, #2
 8003168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003172:	2301      	movs	r3, #1
 8003174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003176:	2301      	movs	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4619      	mov	r1, r3
 8003180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003184:	f003 f808 	bl	8006198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003188:	e020      	b.n	80031cc <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM3)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <HAL_TIM_MspPostInit+0xac>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003194:	4b0f      	ldr	r3, [pc, #60]	@ (80031d4 <HAL_TIM_MspPostInit+0xa8>)
 8003196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003198:	4a0e      	ldr	r2, [pc, #56]	@ (80031d4 <HAL_TIM_MspPostInit+0xa8>)
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031a0:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <HAL_TIM_MspPostInit+0xa8>)
 80031a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031ac:	2340      	movs	r3, #64	@ 0x40
 80031ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b0:	2302      	movs	r3, #2
 80031b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2300      	movs	r3, #0
 80031ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031bc:	2302      	movs	r3, #2
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4619      	mov	r1, r3
 80031c6:	4805      	ldr	r0, [pc, #20]	@ (80031dc <HAL_TIM_MspPostInit+0xb0>)
 80031c8:	f002 ffe6 	bl	8006198 <HAL_GPIO_Init>
}
 80031cc:	bf00      	nop
 80031ce:	3728      	adds	r7, #40	@ 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40000400 	.word	0x40000400
 80031dc:	48000800 	.word	0x48000800

080031e0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80031e4:	4b21      	ldr	r3, [pc, #132]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 80031e6:	4a22      	ldr	r2, [pc, #136]	@ (8003270 <MX_LPUART1_UART_Init+0x90>)
 80031e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80031ea:	4b20      	ldr	r3, [pc, #128]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 80031ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031f2:	4b1e      	ldr	r3, [pc, #120]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80031f8:	4b1c      	ldr	r3, [pc, #112]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80031fe:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003204:	4b19      	ldr	r3, [pc, #100]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 8003206:	220c      	movs	r2, #12
 8003208:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320a:	4b18      	ldr	r3, [pc, #96]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003210:	4b16      	ldr	r3, [pc, #88]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 8003212:	2200      	movs	r2, #0
 8003214:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003216:	4b15      	ldr	r3, [pc, #84]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 8003218:	2200      	movs	r2, #0
 800321a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800321c:	4b13      	ldr	r3, [pc, #76]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 800321e:	2200      	movs	r2, #0
 8003220:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003222:	4812      	ldr	r0, [pc, #72]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 8003224:	f006 ffba 	bl	800a19c <HAL_UART_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800322e:	f7ff f86f 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003232:	2100      	movs	r1, #0
 8003234:	480d      	ldr	r0, [pc, #52]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 8003236:	f008 fc9d 	bl	800bb74 <HAL_UARTEx_SetTxFifoThreshold>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8003240:	f7ff f866 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003244:	2100      	movs	r1, #0
 8003246:	4809      	ldr	r0, [pc, #36]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 8003248:	f008 fcd2 	bl	800bbf0 <HAL_UARTEx_SetRxFifoThreshold>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8003252:	f7ff f85d 	bl	8002310 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003256:	4805      	ldr	r0, [pc, #20]	@ (800326c <MX_LPUART1_UART_Init+0x8c>)
 8003258:	f008 fc53 	bl	800bb02 <HAL_UARTEx_DisableFifoMode>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8003262:	f7ff f855 	bl	8002310 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20001088 	.word	0x20001088
 8003270:	40008000 	.word	0x40008000

08003274 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b09c      	sub	sp, #112	@ 0x70
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800328c:	f107 0318 	add.w	r3, r7, #24
 8003290:	2244      	movs	r2, #68	@ 0x44
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f00f f870 	bl	801237a <memset>
  if(uartHandle->Instance==LPUART1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a5b      	ldr	r2, [pc, #364]	@ (800340c <HAL_UART_MspInit+0x198>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	f040 80af 	bne.w	8003404 <HAL_UART_MspInit+0x190>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80032a6:	2320      	movs	r3, #32
 80032a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80032aa:	2300      	movs	r3, #0
 80032ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ae:	f107 0318 	add.w	r3, r7, #24
 80032b2:	4618      	mov	r0, r3
 80032b4:	f004 fba2 	bl	80079fc <HAL_RCCEx_PeriphCLKConfig>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80032be:	f7ff f827 	bl	8002310 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80032c2:	4b53      	ldr	r3, [pc, #332]	@ (8003410 <HAL_UART_MspInit+0x19c>)
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	4a52      	ldr	r2, [pc, #328]	@ (8003410 <HAL_UART_MspInit+0x19c>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80032ce:	4b50      	ldr	r3, [pc, #320]	@ (8003410 <HAL_UART_MspInit+0x19c>)
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	4b4d      	ldr	r3, [pc, #308]	@ (8003410 <HAL_UART_MspInit+0x19c>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032de:	4a4c      	ldr	r2, [pc, #304]	@ (8003410 <HAL_UART_MspInit+0x19c>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003410 <HAL_UART_MspInit+0x19c>)
 80032e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	4b47      	ldr	r3, [pc, #284]	@ (8003410 <HAL_UART_MspInit+0x19c>)
 80032f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f6:	4a46      	ldr	r2, [pc, #280]	@ (8003410 <HAL_UART_MspInit+0x19c>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032fe:	4b44      	ldr	r3, [pc, #272]	@ (8003410 <HAL_UART_MspInit+0x19c>)
 8003300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800330a:	2308      	movs	r3, #8
 800330c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800331a:	230c      	movs	r3, #12
 800331c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003322:	4619      	mov	r1, r3
 8003324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003328:	f002 ff36 	bl	8006198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800332c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003330:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333a:	2300      	movs	r3, #0
 800333c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800333e:	2308      	movs	r3, #8
 8003340:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003342:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003346:	4619      	mov	r1, r3
 8003348:	4832      	ldr	r0, [pc, #200]	@ (8003414 <HAL_UART_MspInit+0x1a0>)
 800334a:	f002 ff25 	bl	8006198 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 800334e:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 8003350:	4a32      	ldr	r2, [pc, #200]	@ (800341c <HAL_UART_MspInit+0x1a8>)
 8003352:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003354:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 8003356:	2222      	movs	r2, #34	@ 0x22
 8003358:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800335a:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003360:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003366:	4b2c      	ldr	r3, [pc, #176]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 8003368:	2280      	movs	r2, #128	@ 0x80
 800336a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800336c:	4b2a      	ldr	r3, [pc, #168]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003372:	4b29      	ldr	r3, [pc, #164]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8003378:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 800337a:	2220      	movs	r2, #32
 800337c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 8003380:	2200      	movs	r2, #0
 8003382:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003384:	4824      	ldr	r0, [pc, #144]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 8003386:	f002 fbc9 	bl	8005b1c <HAL_DMA_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8003390:	f7fe ffbe 	bl	8002310 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a20      	ldr	r2, [pc, #128]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 8003398:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800339c:	4a1e      	ldr	r2, [pc, #120]	@ (8003418 <HAL_UART_MspInit+0x1a4>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80033a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003424 <HAL_UART_MspInit+0x1b0>)
 80033a6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80033a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033aa:	2223      	movs	r2, #35	@ 0x23
 80033ac:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033b0:	2210      	movs	r2, #16
 80033b2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033ba:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033bc:	2280      	movs	r2, #128	@ 0x80
 80033be:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033c0:	4b17      	ldr	r3, [pc, #92]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033c6:	4b16      	ldr	r3, [pc, #88]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80033cc:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033d2:	4b13      	ldr	r3, [pc, #76]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80033d8:	4811      	ldr	r0, [pc, #68]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033da:	f002 fb9f 	bl	8005b1c <HAL_DMA_Init>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 80033e4:	f7fe ff94 	bl	8002310 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033ec:	67da      	str	r2, [r3, #124]	@ 0x7c
 80033ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003420 <HAL_UART_MspInit+0x1ac>)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80033f4:	2200      	movs	r2, #0
 80033f6:	2105      	movs	r1, #5
 80033f8:	205b      	movs	r0, #91	@ 0x5b
 80033fa:	f002 fb67 	bl	8005acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80033fe:	205b      	movs	r0, #91	@ 0x5b
 8003400:	f002 fb7e 	bl	8005b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003404:	bf00      	nop
 8003406:	3770      	adds	r7, #112	@ 0x70
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40008000 	.word	0x40008000
 8003410:	40021000 	.word	0x40021000
 8003414:	48000400 	.word	0x48000400
 8003418:	2000111c 	.word	0x2000111c
 800341c:	40020030 	.word	0x40020030
 8003420:	2000117c 	.word	0x2000117c
 8003424:	40020044 	.word	0x40020044

08003428 <HAL_UART_RxCpltCallback>:
  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==LPUART1){
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a13      	ldr	r2, [pc, #76]	@ (8003484 <HAL_UART_RxCpltCallback+0x5c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d11e      	bne.n	8003478 <HAL_UART_RxCpltCallback+0x50>
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 800343a:	2340      	movs	r3, #64	@ 0x40
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	e018      	b.n	8003472 <HAL_UART_RxCpltCallback+0x4a>
            circular_buffer[write_index] = dma_rx_buffer[i];
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_UART_RxCpltCallback+0x60>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	4619      	mov	r1, r3
 8003448:	4a10      	ldr	r2, [pc, #64]	@ (800348c <HAL_UART_RxCpltCallback+0x64>)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4413      	add	r3, r2
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <HAL_UART_RxCpltCallback+0x68>)
 8003452:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 8003454:	4b0c      	ldr	r3, [pc, #48]	@ (8003488 <HAL_UART_RxCpltCallback+0x60>)
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	3301      	adds	r3, #1
 800345c:	425a      	negs	r2, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	bf58      	it	pl
 8003464:	4253      	negpl	r3, r2
 8003466:	b29a      	uxth	r2, r3
 8003468:	4b07      	ldr	r3, [pc, #28]	@ (8003488 <HAL_UART_RxCpltCallback+0x60>)
 800346a:	801a      	strh	r2, [r3, #0]
        for (int i = DMA_CHUNK_SIZE / 2; i < DMA_CHUNK_SIZE; i++) {
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3301      	adds	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b7f      	cmp	r3, #127	@ 0x7f
 8003476:	dde3      	ble.n	8003440 <HAL_UART_RxCpltCallback+0x18>
        }
	}


}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40008000 	.word	0x40008000
 8003488:	20001084 	.word	0x20001084
 800348c:	20000f04 	.word	0x20000f04
 8003490:	20000f84 	.word	0x20000f84

08003494 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a13      	ldr	r2, [pc, #76]	@ (80034f0 <HAL_UART_RxHalfCpltCallback+0x5c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d11e      	bne.n	80034e4 <HAL_UART_RxHalfCpltCallback+0x50>
    {
        // Copier les 1ers 64 octets
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e018      	b.n	80034de <HAL_UART_RxHalfCpltCallback+0x4a>
            circular_buffer[write_index] = dma_rx_buffer[i];
 80034ac:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_UART_RxHalfCpltCallback+0x60>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	4619      	mov	r1, r3
 80034b4:	4a10      	ldr	r2, [pc, #64]	@ (80034f8 <HAL_UART_RxHalfCpltCallback+0x64>)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <HAL_UART_RxHalfCpltCallback+0x68>)
 80034be:	545a      	strb	r2, [r3, r1]
            write_index = (write_index + 1) % CIRC_BUF_SIZE;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <HAL_UART_RxHalfCpltCallback+0x60>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	425a      	negs	r2, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	bf58      	it	pl
 80034d0:	4253      	negpl	r3, r2
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <HAL_UART_RxHalfCpltCallback+0x60>)
 80034d6:	801a      	strh	r2, [r3, #0]
        for (int i = 0; i < DMA_CHUNK_SIZE / 2; i++) {
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	3301      	adds	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80034e2:	dde3      	ble.n	80034ac <HAL_UART_RxHalfCpltCallback+0x18>
        }
    }
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40008000 	.word	0x40008000
 80034f4:	20001084 	.word	0x20001084
 80034f8:	20000f04 	.word	0x20000f04
 80034fc:	20000f84 	.word	0x20000f84

08003500 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a05      	ldr	r2, [pc, #20]	@ (8003524 <HAL_UART_TxCpltCallback+0x24>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d104      	bne.n	800351c <HAL_UART_TxCpltCallback+0x1c>
    {
        osSemaphoreRelease(uartTxDoneHandle);
 8003512:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_UART_TxCpltCallback+0x28>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f00b fbe2 	bl	800ece0 <osSemaphoreRelease>
    }
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40008000 	.word	0x40008000
 8003528:	20000354 	.word	0x20000354

0800352c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003534:	f000 fd2e 	bl	8003f94 <HAL_GetTick>
 8003538:	4603      	mov	r3, r0
 800353a:	4a04      	ldr	r2, [pc, #16]	@ (800354c <SPI_Timer_On+0x20>)
 800353c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800353e:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <SPI_Timer_On+0x24>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200011e0 	.word	0x200011e0
 8003550:	200011e4 	.word	0x200011e4

08003554 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003558:	f000 fd1c 	bl	8003f94 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <SPI_Timer_Status+0x24>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1ad2      	subs	r2, r2, r3
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <SPI_Timer_Status+0x28>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	bf34      	ite	cc
 800356c:	2301      	movcc	r3, #1
 800356e:	2300      	movcs	r3, #0
 8003570:	b2db      	uxtb	r3, r3
}
 8003572:	4618      	mov	r0, r3
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	200011e0 	.word	0x200011e0
 800357c:	200011e4 	.word	0x200011e4

08003580 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af02      	add	r7, sp, #8
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800358a:	f107 020f 	add.w	r2, r7, #15
 800358e:	1df9      	adds	r1, r7, #7
 8003590:	2332      	movs	r3, #50	@ 0x32
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2301      	movs	r3, #1
 8003596:	4804      	ldr	r0, [pc, #16]	@ (80035a8 <xchg_spi+0x28>)
 8003598:	f004 fccb 	bl	8007f32 <HAL_SPI_TransmitReceive>
    return rxDat;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000c38 	.word	0x20000c38

080035ac <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e00a      	b.n	80035d2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	18d4      	adds	r4, r2, r3
 80035c2:	20ff      	movs	r0, #255	@ 0xff
 80035c4:	f7ff ffdc 	bl	8003580 <xchg_spi>
 80035c8:	4603      	mov	r3, r0
 80035ca:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d3f0      	bcc.n	80035bc <rcvr_spi_multi+0x10>
	}
}
 80035da:	bf00      	nop
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd90      	pop	{r4, r7, pc}

080035e4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e009      	b.n	8003608 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ffbf 	bl	8003580 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3301      	adds	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d3f1      	bcc.n	80035f4 <xmit_spi_multi+0x10>
	}
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003622:	f000 fcb7 	bl	8003f94 <HAL_GetTick>
 8003626:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800362c:	20ff      	movs	r0, #255	@ 0xff
 800362e:	f7ff ffa7 	bl	8003580 <xchg_spi>
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2bff      	cmp	r3, #255	@ 0xff
 800363a:	d007      	beq.n	800364c <wait_ready+0x32>
 800363c:	f000 fcaa 	bl	8003f94 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d8ef      	bhi.n	800362c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	2bff      	cmp	r3, #255	@ 0xff
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003664:	2201      	movs	r2, #1
 8003666:	2110      	movs	r1, #16
 8003668:	4803      	ldr	r0, [pc, #12]	@ (8003678 <despiselect+0x18>)
 800366a:	f002 ff17 	bl	800649c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800366e:	20ff      	movs	r0, #255	@ 0xff
 8003670:	f7ff ff86 	bl	8003580 <xchg_spi>

}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	48000800 	.word	0x48000800

0800367c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003680:	2200      	movs	r2, #0
 8003682:	2110      	movs	r1, #16
 8003684:	4809      	ldr	r0, [pc, #36]	@ (80036ac <spiselect+0x30>)
 8003686:	f002 ff09 	bl	800649c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800368a:	20ff      	movs	r0, #255	@ 0xff
 800368c:	f7ff ff78 	bl	8003580 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003690:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003694:	f7ff ffc1 	bl	800361a <wait_ready>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <spiselect+0x26>
 800369e:	2301      	movs	r3, #1
 80036a0:	e002      	b.n	80036a8 <spiselect+0x2c>

	despiselect();
 80036a2:	f7ff ffdd 	bl	8003660 <despiselect>
	return 0;	/* Timeout */
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	48000800 	.word	0x48000800

080036b0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80036ba:	20c8      	movs	r0, #200	@ 0xc8
 80036bc:	f7ff ff36 	bl	800352c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80036c0:	20ff      	movs	r0, #255	@ 0xff
 80036c2:	f7ff ff5d 	bl	8003580 <xchg_spi>
 80036c6:	4603      	mov	r3, r0
 80036c8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2bff      	cmp	r3, #255	@ 0xff
 80036ce:	d104      	bne.n	80036da <rcvr_datablock+0x2a>
 80036d0:	f7ff ff40 	bl	8003554 <SPI_Timer_Status>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f2      	bne.n	80036c0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80036de:	d001      	beq.n	80036e4 <rcvr_datablock+0x34>
 80036e0:	2300      	movs	r3, #0
 80036e2:	e00a      	b.n	80036fa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80036e4:	6839      	ldr	r1, [r7, #0]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ff60 	bl	80035ac <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80036ec:	20ff      	movs	r0, #255	@ 0xff
 80036ee:	f7ff ff47 	bl	8003580 <xchg_spi>
 80036f2:	20ff      	movs	r0, #255	@ 0xff
 80036f4:	f7ff ff44 	bl	8003580 <xchg_spi>

	return 1;						/* Function succeeded */
 80036f8:	2301      	movs	r3, #1
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800370e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003712:	f7ff ff82 	bl	800361a <wait_ready>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <xmit_datablock+0x1e>
 800371c:	2300      	movs	r3, #0
 800371e:	e01e      	b.n	800375e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff ff2c 	bl	8003580 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	2bfd      	cmp	r3, #253	@ 0xfd
 800372c:	d016      	beq.n	800375c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800372e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ff56 	bl	80035e4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003738:	20ff      	movs	r0, #255	@ 0xff
 800373a:	f7ff ff21 	bl	8003580 <xchg_spi>
 800373e:	20ff      	movs	r0, #255	@ 0xff
 8003740:	f7ff ff1e 	bl	8003580 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003744:	20ff      	movs	r0, #255	@ 0xff
 8003746:	f7ff ff1b 	bl	8003580 <xchg_spi>
 800374a:	4603      	mov	r3, r0
 800374c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2b05      	cmp	r3, #5
 8003756:	d001      	beq.n	800375c <xmit_datablock+0x5a>
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <xmit_datablock+0x5c>
	}
	return 1;
 800375c:	2301      	movs	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	6039      	str	r1, [r7, #0]
 8003770:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	2b00      	cmp	r3, #0
 8003778:	da0e      	bge.n	8003798 <send_cmd+0x32>
		cmd &= 0x7F;
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003780:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003782:	2100      	movs	r1, #0
 8003784:	2037      	movs	r0, #55	@ 0x37
 8003786:	f7ff ffee 	bl	8003766 <send_cmd>
 800378a:	4603      	mov	r3, r0
 800378c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800378e:	7bbb      	ldrb	r3, [r7, #14]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d901      	bls.n	8003798 <send_cmd+0x32>
 8003794:	7bbb      	ldrb	r3, [r7, #14]
 8003796:	e051      	b.n	800383c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d008      	beq.n	80037b0 <send_cmd+0x4a>
		despiselect();
 800379e:	f7ff ff5f 	bl	8003660 <despiselect>
		if (!spiselect()) return 0xFF;
 80037a2:	f7ff ff6b 	bl	800367c <spiselect>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <send_cmd+0x4a>
 80037ac:	23ff      	movs	r3, #255	@ 0xff
 80037ae:	e045      	b.n	800383c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fee1 	bl	8003580 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	0e1b      	lsrs	r3, r3, #24
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fedb 	bl	8003580 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fed5 	bl	8003580 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fecf 	bl	8003580 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff feca 	bl	8003580 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <send_cmd+0x94>
 80037f6:	2395      	movs	r3, #149	@ 0x95
 80037f8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d101      	bne.n	8003804 <send_cmd+0x9e>
 8003800:	2387      	movs	r3, #135	@ 0x87
 8003802:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff feba 	bl	8003580 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d102      	bne.n	8003818 <send_cmd+0xb2>
 8003812:	20ff      	movs	r0, #255	@ 0xff
 8003814:	f7ff feb4 	bl	8003580 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003818:	230a      	movs	r3, #10
 800381a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800381c:	20ff      	movs	r0, #255	@ 0xff
 800381e:	f7ff feaf 	bl	8003580 <xchg_spi>
 8003822:	4603      	mov	r3, r0
 8003824:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800382a:	2b00      	cmp	r3, #0
 800382c:	da05      	bge.n	800383a <send_cmd+0xd4>
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	3b01      	subs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <send_cmd+0xb6>

	return res;							/* Return received response */
 800383a:	7bbb      	ldrb	r3, [r7, #14]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <USER_SPI_initialize+0x14>
 8003854:	2301      	movs	r3, #1
 8003856:	e0d6      	b.n	8003a06 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003858:	4b6d      	ldr	r3, [pc, #436]	@ (8003a10 <USER_SPI_initialize+0x1cc>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <USER_SPI_initialize+0x2a>
 8003866:	4b6a      	ldr	r3, [pc, #424]	@ (8003a10 <USER_SPI_initialize+0x1cc>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e0cb      	b.n	8003a06 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800386e:	4b69      	ldr	r3, [pc, #420]	@ (8003a14 <USER_SPI_initialize+0x1d0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003878:	4b66      	ldr	r3, [pc, #408]	@ (8003a14 <USER_SPI_initialize+0x1d0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8003880:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003882:	230a      	movs	r3, #10
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e005      	b.n	8003894 <USER_SPI_initialize+0x50>
 8003888:	20ff      	movs	r0, #255	@ 0xff
 800388a:	f7ff fe79 	bl	8003580 <xchg_spi>
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	3b01      	subs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f6      	bne.n	8003888 <USER_SPI_initialize+0x44>

	ty = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800389e:	2100      	movs	r1, #0
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7ff ff60 	bl	8003766 <send_cmd>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	f040 808b 	bne.w	80039c4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80038ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038b2:	f7ff fe3b 	bl	800352c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80038b6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80038ba:	2008      	movs	r0, #8
 80038bc:	f7ff ff53 	bl	8003766 <send_cmd>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d151      	bne.n	800396a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	e00d      	b.n	80038e8 <USER_SPI_initialize+0xa4>
 80038cc:	7bfc      	ldrb	r4, [r7, #15]
 80038ce:	20ff      	movs	r0, #255	@ 0xff
 80038d0:	f7ff fe56 	bl	8003580 <xchg_spi>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	f104 0310 	add.w	r3, r4, #16
 80038dc:	443b      	add	r3, r7
 80038de:	f803 2c08 	strb.w	r2, [r3, #-8]
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	3301      	adds	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d9ee      	bls.n	80038cc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80038ee:	7abb      	ldrb	r3, [r7, #10]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d167      	bne.n	80039c4 <USER_SPI_initialize+0x180>
 80038f4:	7afb      	ldrb	r3, [r7, #11]
 80038f6:	2baa      	cmp	r3, #170	@ 0xaa
 80038f8:	d164      	bne.n	80039c4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80038fa:	bf00      	nop
 80038fc:	f7ff fe2a 	bl	8003554 <SPI_Timer_Status>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <USER_SPI_initialize+0xd2>
 8003906:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800390a:	20a9      	movs	r0, #169	@ 0xa9
 800390c:	f7ff ff2b 	bl	8003766 <send_cmd>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f2      	bne.n	80038fc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003916:	f7ff fe1d 	bl	8003554 <SPI_Timer_Status>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d051      	beq.n	80039c4 <USER_SPI_initialize+0x180>
 8003920:	2100      	movs	r1, #0
 8003922:	203a      	movs	r0, #58	@ 0x3a
 8003924:	f7ff ff1f 	bl	8003766 <send_cmd>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d14a      	bne.n	80039c4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
 8003932:	e00d      	b.n	8003950 <USER_SPI_initialize+0x10c>
 8003934:	7bfc      	ldrb	r4, [r7, #15]
 8003936:	20ff      	movs	r0, #255	@ 0xff
 8003938:	f7ff fe22 	bl	8003580 <xchg_spi>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	f104 0310 	add.w	r3, r4, #16
 8003944:	443b      	add	r3, r7
 8003946:	f803 2c08 	strb.w	r2, [r3, #-8]
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	3301      	adds	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d9ee      	bls.n	8003934 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003956:	7a3b      	ldrb	r3, [r7, #8]
 8003958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <USER_SPI_initialize+0x120>
 8003960:	230c      	movs	r3, #12
 8003962:	e000      	b.n	8003966 <USER_SPI_initialize+0x122>
 8003964:	2304      	movs	r3, #4
 8003966:	737b      	strb	r3, [r7, #13]
 8003968:	e02c      	b.n	80039c4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800396a:	2100      	movs	r1, #0
 800396c:	20a9      	movs	r0, #169	@ 0xa9
 800396e:	f7ff fefa 	bl	8003766 <send_cmd>
 8003972:	4603      	mov	r3, r0
 8003974:	2b01      	cmp	r3, #1
 8003976:	d804      	bhi.n	8003982 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003978:	2302      	movs	r3, #2
 800397a:	737b      	strb	r3, [r7, #13]
 800397c:	23a9      	movs	r3, #169	@ 0xa9
 800397e:	73bb      	strb	r3, [r7, #14]
 8003980:	e003      	b.n	800398a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003982:	2301      	movs	r3, #1
 8003984:	737b      	strb	r3, [r7, #13]
 8003986:	2301      	movs	r3, #1
 8003988:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800398a:	bf00      	nop
 800398c:	f7ff fde2 	bl	8003554 <SPI_Timer_Status>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <USER_SPI_initialize+0x162>
 8003996:	7bbb      	ldrb	r3, [r7, #14]
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fee3 	bl	8003766 <send_cmd>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f2      	bne.n	800398c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80039a6:	f7ff fdd5 	bl	8003554 <SPI_Timer_Status>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <USER_SPI_initialize+0x17c>
 80039b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039b4:	2010      	movs	r0, #16
 80039b6:	f7ff fed6 	bl	8003766 <send_cmd>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <USER_SPI_initialize+0x180>
				ty = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80039c4:	4a14      	ldr	r2, [pc, #80]	@ (8003a18 <USER_SPI_initialize+0x1d4>)
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
 80039c8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80039ca:	f7ff fe49 	bl	8003660 <despiselect>

	if (ty) {			/* OK */
 80039ce:	7b7b      	ldrb	r3, [r7, #13]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d012      	beq.n	80039fa <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80039d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a14 <USER_SPI_initialize+0x1d0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80039de:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <USER_SPI_initialize+0x1d0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0210 	orr.w	r2, r2, #16
 80039e6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <USER_SPI_initialize+0x1cc>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <USER_SPI_initialize+0x1cc>)
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e002      	b.n	8003a00 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80039fa:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <USER_SPI_initialize+0x1cc>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003a00:	4b03      	ldr	r3, [pc, #12]	@ (8003a10 <USER_SPI_initialize+0x1cc>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	2000000c 	.word	0x2000000c
 8003a14:	20000c38 	.word	0x20000c38
 8003a18:	200011dc 	.word	0x200011dc

08003a1c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <USER_SPI_status+0x14>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e002      	b.n	8003a36 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003a30:	4b04      	ldr	r3, [pc, #16]	@ (8003a44 <USER_SPI_status+0x28>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b2db      	uxtb	r3, r3
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4603      	mov	r3, r0
 8003a56:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <USER_SPI_read+0x1c>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <USER_SPI_read+0x20>
 8003a64:	2304      	movs	r3, #4
 8003a66:	e04d      	b.n	8003b04 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003a68:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <USER_SPI_read+0xc4>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <USER_SPI_read+0x32>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e044      	b.n	8003b04 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003a7a:	4b25      	ldr	r3, [pc, #148]	@ (8003b10 <USER_SPI_read+0xc8>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <USER_SPI_read+0x44>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	025b      	lsls	r3, r3, #9
 8003a8a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d111      	bne.n	8003ab6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	2011      	movs	r0, #17
 8003a96:	f7ff fe66 	bl	8003766 <send_cmd>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d129      	bne.n	8003af4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003aa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003aa4:	68b8      	ldr	r0, [r7, #8]
 8003aa6:	f7ff fe03 	bl	80036b0 <rcvr_datablock>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d021      	beq.n	8003af4 <USER_SPI_read+0xac>
			count = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	e01e      	b.n	8003af4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	2012      	movs	r0, #18
 8003aba:	f7ff fe54 	bl	8003766 <send_cmd>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d117      	bne.n	8003af4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003ac4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ac8:	68b8      	ldr	r0, [r7, #8]
 8003aca:	f7ff fdf1 	bl	80036b0 <rcvr_datablock>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <USER_SPI_read+0xa2>
				buff += 512;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ada:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ed      	bne.n	8003ac4 <USER_SPI_read+0x7c>
 8003ae8:	e000      	b.n	8003aec <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003aea:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003aec:	2100      	movs	r1, #0
 8003aee:	200c      	movs	r0, #12
 8003af0:	f7ff fe39 	bl	8003766 <send_cmd>
		}
	}
	despiselect();
 8003af4:	f7ff fdb4 	bl	8003660 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	2000000c 	.word	0x2000000c
 8003b10:	200011dc 	.word	0x200011dc

08003b14 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	4603      	mov	r3, r0
 8003b22:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <USER_SPI_write+0x1c>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <USER_SPI_write+0x20>
 8003b30:	2304      	movs	r3, #4
 8003b32:	e063      	b.n	8003bfc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003b34:	4b33      	ldr	r3, [pc, #204]	@ (8003c04 <USER_SPI_write+0xf0>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <USER_SPI_write+0x32>
 8003b42:	2303      	movs	r3, #3
 8003b44:	e05a      	b.n	8003bfc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003b46:	4b2f      	ldr	r3, [pc, #188]	@ (8003c04 <USER_SPI_write+0xf0>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <USER_SPI_write+0x44>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e051      	b.n	8003bfc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003b58:	4b2b      	ldr	r3, [pc, #172]	@ (8003c08 <USER_SPI_write+0xf4>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <USER_SPI_write+0x56>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	025b      	lsls	r3, r3, #9
 8003b68:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d110      	bne.n	8003b92 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	2018      	movs	r0, #24
 8003b74:	f7ff fdf7 	bl	8003766 <send_cmd>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d136      	bne.n	8003bec <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003b7e:	21fe      	movs	r1, #254	@ 0xfe
 8003b80:	68b8      	ldr	r0, [r7, #8]
 8003b82:	f7ff fdbe 	bl	8003702 <xmit_datablock>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02f      	beq.n	8003bec <USER_SPI_write+0xd8>
			count = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	e02c      	b.n	8003bec <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003b92:	4b1d      	ldr	r3, [pc, #116]	@ (8003c08 <USER_SPI_write+0xf4>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	f003 0306 	and.w	r3, r3, #6
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <USER_SPI_write+0x92>
 8003b9e:	6839      	ldr	r1, [r7, #0]
 8003ba0:	2097      	movs	r0, #151	@ 0x97
 8003ba2:	f7ff fde0 	bl	8003766 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	2019      	movs	r0, #25
 8003baa:	f7ff fddc 	bl	8003766 <send_cmd>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11b      	bne.n	8003bec <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003bb4:	21fc      	movs	r1, #252	@ 0xfc
 8003bb6:	68b8      	ldr	r0, [r7, #8]
 8003bb8:	f7ff fda3 	bl	8003702 <xmit_datablock>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <USER_SPI_write+0xc4>
				buff += 512;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003bc8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1ee      	bne.n	8003bb4 <USER_SPI_write+0xa0>
 8003bd6:	e000      	b.n	8003bda <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003bd8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003bda:	21fd      	movs	r1, #253	@ 0xfd
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7ff fd90 	bl	8003702 <xmit_datablock>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <USER_SPI_write+0xd8>
 8003be8:	2301      	movs	r3, #1
 8003bea:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003bec:	f7ff fd38 	bl	8003660 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf14      	ite	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	2300      	moveq	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	2000000c 	.word	0x2000000c
 8003c08:	200011dc 	.word	0x200011dc

08003c0c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08c      	sub	sp, #48	@ 0x30
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	603a      	str	r2, [r7, #0]
 8003c16:	71fb      	strb	r3, [r7, #7]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <USER_SPI_ioctl+0x1a>
 8003c22:	2304      	movs	r3, #4
 8003c24:	e15a      	b.n	8003edc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003c26:	4baf      	ldr	r3, [pc, #700]	@ (8003ee4 <USER_SPI_ioctl+0x2d8>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <USER_SPI_ioctl+0x2c>
 8003c34:	2303      	movs	r3, #3
 8003c36:	e151      	b.n	8003edc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8003c3e:	79bb      	ldrb	r3, [r7, #6]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	f200 8136 	bhi.w	8003eb2 <USER_SPI_ioctl+0x2a6>
 8003c46:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <USER_SPI_ioctl+0x40>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003c61 	.word	0x08003c61
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003eb3 	.word	0x08003eb3
 8003c58:	08003d21 	.word	0x08003d21
 8003c5c:	08003e17 	.word	0x08003e17
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003c60:	f7ff fd0c 	bl	800367c <spiselect>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8127 	beq.w	8003eba <USER_SPI_ioctl+0x2ae>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003c72:	e122      	b.n	8003eba <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003c74:	2100      	movs	r1, #0
 8003c76:	2009      	movs	r0, #9
 8003c78:	f7ff fd75 	bl	8003766 <send_cmd>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 811d 	bne.w	8003ebe <USER_SPI_ioctl+0x2b2>
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	2110      	movs	r1, #16
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fd10 	bl	80036b0 <rcvr_datablock>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8113 	beq.w	8003ebe <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003c98:	7b3b      	ldrb	r3, [r7, #12]
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d111      	bne.n	8003cc6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003ca2:	7d7b      	ldrb	r3, [r7, #21]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	7d3b      	ldrb	r3, [r7, #20]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	4413      	add	r3, r2
 8003cac:	461a      	mov	r2, r3
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3301      	adds	r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	029a      	lsls	r2, r3, #10
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e028      	b.n	8003d18 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003cc6:	7c7b      	ldrb	r3, [r7, #17]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	7dbb      	ldrb	r3, [r7, #22]
 8003cd0:	09db      	lsrs	r3, r3, #7
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	7d7b      	ldrb	r3, [r7, #21]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 0306 	and.w	r3, r3, #6
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003cee:	7d3b      	ldrb	r3, [r7, #20]
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	441a      	add	r2, r3
 8003cfc:	7cbb      	ldrb	r3, [r7, #18]
 8003cfe:	029b      	lsls	r3, r3, #10
 8003d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d04:	4413      	add	r3, r2
 8003d06:	3301      	adds	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003d0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d0e:	3b09      	subs	r3, #9
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	409a      	lsls	r2, r3
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003d1e:	e0ce      	b.n	8003ebe <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003d20:	4b71      	ldr	r3, [pc, #452]	@ (8003ee8 <USER_SPI_ioctl+0x2dc>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d031      	beq.n	8003d90 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	208d      	movs	r0, #141	@ 0x8d
 8003d30:	f7ff fd19 	bl	8003766 <send_cmd>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 80c3 	bne.w	8003ec2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003d3c:	20ff      	movs	r0, #255	@ 0xff
 8003d3e:	f7ff fc1f 	bl	8003580 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003d42:	f107 030c 	add.w	r3, r7, #12
 8003d46:	2110      	movs	r1, #16
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fcb1 	bl	80036b0 <rcvr_datablock>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80b6 	beq.w	8003ec2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003d56:	2330      	movs	r3, #48	@ 0x30
 8003d58:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003d5c:	e007      	b.n	8003d6e <USER_SPI_ioctl+0x162>
 8003d5e:	20ff      	movs	r0, #255	@ 0xff
 8003d60:	f7ff fc0e 	bl	8003580 <xchg_spi>
 8003d64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003d6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f3      	bne.n	8003d5e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003d76:	7dbb      	ldrb	r3, [r7, #22]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2310      	movs	r3, #16
 8003d80:	fa03 f202 	lsl.w	r2, r3, r2
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003d8e:	e098      	b.n	8003ec2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003d90:	2100      	movs	r1, #0
 8003d92:	2009      	movs	r0, #9
 8003d94:	f7ff fce7 	bl	8003766 <send_cmd>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f040 8091 	bne.w	8003ec2 <USER_SPI_ioctl+0x2b6>
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	2110      	movs	r1, #16
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fc82 	bl	80036b0 <rcvr_datablock>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8087 	beq.w	8003ec2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003db4:	4b4c      	ldr	r3, [pc, #304]	@ (8003ee8 <USER_SPI_ioctl+0x2dc>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d012      	beq.n	8003de6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003dc0:	7dbb      	ldrb	r3, [r7, #22]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003dc8:	7dfa      	ldrb	r2, [r7, #23]
 8003dca:	09d2      	lsrs	r2, r2, #7
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	4413      	add	r3, r2
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	7e7b      	ldrb	r3, [r7, #25]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e013      	b.n	8003e0e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003de6:	7dbb      	ldrb	r3, [r7, #22]
 8003de8:	109b      	asrs	r3, r3, #2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	3301      	adds	r3, #1
 8003df2:	7dfa      	ldrb	r2, [r7, #23]
 8003df4:	00d2      	lsls	r2, r2, #3
 8003df6:	f002 0218 	and.w	r2, r2, #24
 8003dfa:	7df9      	ldrb	r1, [r7, #23]
 8003dfc:	0949      	lsrs	r1, r1, #5
 8003dfe:	b2c9      	uxtb	r1, r1
 8003e00:	440a      	add	r2, r1
 8003e02:	3201      	adds	r2, #1
 8003e04:	fb02 f303 	mul.w	r3, r2, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003e14:	e055      	b.n	8003ec2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003e16:	4b34      	ldr	r3, [pc, #208]	@ (8003ee8 <USER_SPI_ioctl+0x2dc>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	f003 0306 	and.w	r3, r3, #6
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d051      	beq.n	8003ec6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003e22:	f107 020c 	add.w	r2, r7, #12
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	210b      	movs	r1, #11
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff feee 	bl	8003c0c <USER_SPI_ioctl>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d149      	bne.n	8003eca <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003e36:	7b3b      	ldrb	r3, [r7, #12]
 8003e38:	099b      	lsrs	r3, r3, #6
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d104      	bne.n	8003e4a <USER_SPI_ioctl+0x23e>
 8003e40:	7dbb      	ldrb	r3, [r7, #22]
 8003e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d041      	beq.n	8003ece <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	623b      	str	r3, [r7, #32]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8003e5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ee8 <USER_SPI_ioctl+0x2dc>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8003e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e68:	025b      	lsls	r3, r3, #9
 8003e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	025b      	lsls	r3, r3, #9
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8003e72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e74:	2020      	movs	r0, #32
 8003e76:	f7ff fc76 	bl	8003766 <send_cmd>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d128      	bne.n	8003ed2 <USER_SPI_ioctl+0x2c6>
 8003e80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e82:	2021      	movs	r0, #33	@ 0x21
 8003e84:	f7ff fc6f 	bl	8003766 <send_cmd>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d121      	bne.n	8003ed2 <USER_SPI_ioctl+0x2c6>
 8003e8e:	2100      	movs	r1, #0
 8003e90:	2026      	movs	r0, #38	@ 0x26
 8003e92:	f7ff fc68 	bl	8003766 <send_cmd>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d11a      	bne.n	8003ed2 <USER_SPI_ioctl+0x2c6>
 8003e9c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003ea0:	f7ff fbbb 	bl	800361a <wait_ready>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d013      	beq.n	8003ed2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003eb0:	e00f      	b.n	8003ed2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003eb8:	e00c      	b.n	8003ed4 <USER_SPI_ioctl+0x2c8>
		break;
 8003eba:	bf00      	nop
 8003ebc:	e00a      	b.n	8003ed4 <USER_SPI_ioctl+0x2c8>
		break;
 8003ebe:	bf00      	nop
 8003ec0:	e008      	b.n	8003ed4 <USER_SPI_ioctl+0x2c8>
		break;
 8003ec2:	bf00      	nop
 8003ec4:	e006      	b.n	8003ed4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <USER_SPI_ioctl+0x2c8>
		break;
 8003ed2:	bf00      	nop
	}

	despiselect();
 8003ed4:	f7ff fbc4 	bl	8003660 <despiselect>

	return res;
 8003ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3730      	adds	r7, #48	@ 0x30
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	2000000c 	.word	0x2000000c
 8003ee8:	200011dc 	.word	0x200011dc

08003eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003eec:	480d      	ldr	r0, [pc, #52]	@ (8003f24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ef0:	f7fe fd34 	bl	800295c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ef4:	480c      	ldr	r0, [pc, #48]	@ (8003f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ef6:	490d      	ldr	r1, [pc, #52]	@ (8003f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f30 <LoopForever+0xe>)
  movs r3, #0
 8003efa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003efc:	e002      	b.n	8003f04 <LoopCopyDataInit>

08003efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f02:	3304      	adds	r3, #4

08003f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f08:	d3f9      	bcc.n	8003efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f38 <LoopForever+0x16>)
  movs r3, #0
 8003f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f10:	e001      	b.n	8003f16 <LoopFillZerobss>

08003f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f14:	3204      	adds	r2, #4

08003f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f18:	d3fb      	bcc.n	8003f12 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003f1a:	f00e fae5 	bl	80124e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f1e:	f7fe f8e5 	bl	80020ec <main>

08003f22 <LoopForever>:

LoopForever:
    b LoopForever
 8003f22:	e7fe      	b.n	8003f22 <LoopForever>
  ldr   r0, =_estack
 8003f24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f2c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003f30:	08016a84 	.word	0x08016a84
  ldr r2, =_sbss
 8003f34:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003f38:	200043e8 	.word	0x200043e8

08003f3c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f3c:	e7fe      	b.n	8003f3c <COMP1_2_3_IRQHandler>

08003f3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f48:	2003      	movs	r0, #3
 8003f4a:	f001 fdb4 	bl	8005ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f4e:	200f      	movs	r0, #15
 8003f50:	f7fe fb0a 	bl	8002568 <HAL_InitTick>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	71fb      	strb	r3, [r7, #7]
 8003f5e:	e001      	b.n	8003f64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f60:	f7fe fad8 	bl	8002514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f64:	79fb      	ldrb	r3, [r7, #7]

}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f74:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <HAL_IncTick+0x1c>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <HAL_IncTick+0x20>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4a03      	ldr	r2, [pc, #12]	@ (8003f8c <HAL_IncTick+0x1c>)
 8003f80:	6013      	str	r3, [r2, #0]
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	200011e8 	.word	0x200011e8
 8003f90:	20000014 	.word	0x20000014

08003f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return uwTick;
 8003f98:	4b03      	ldr	r3, [pc, #12]	@ (8003fa8 <HAL_GetTick+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	200011e8 	.word	0x200011e8

08003fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fb4:	f7ff ffee 	bl	8003f94 <HAL_GetTick>
 8003fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d004      	beq.n	8003fd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fc6:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <HAL_Delay+0x40>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fd0:	bf00      	nop
 8003fd2:	f7ff ffdf 	bl	8003f94 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d8f7      	bhi.n	8003fd2 <HAL_Delay+0x26>
  {
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000014 	.word	0x20000014

08003ff0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3360      	adds	r3, #96	@ 0x60
 800406a:	461a      	mov	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b08      	ldr	r3, [pc, #32]	@ (800409c <LL_ADC_SetOffset+0x44>)
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	03fff000 	.word	0x03fff000

080040a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3360      	adds	r3, #96	@ 0x60
 80040ae:	461a      	mov	r2, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3360      	adds	r3, #96	@ 0x60
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004102:	b480      	push	{r7}
 8004104:	b087      	sub	sp, #28
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3360      	adds	r3, #96	@ 0x60
 8004112:	461a      	mov	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	431a      	orrs	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3360      	adds	r3, #96	@ 0x60
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	431a      	orrs	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	615a      	str	r2, [r3, #20]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b087      	sub	sp, #28
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3330      	adds	r3, #48	@ 0x30
 80041ca:	461a      	mov	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	4413      	add	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	211f      	movs	r1, #31
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	401a      	ands	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0e9b      	lsrs	r3, r3, #26
 80041f2:	f003 011f 	and.w	r1, r3, #31
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	431a      	orrs	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800421e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3314      	adds	r3, #20
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	0e5b      	lsrs	r3, r3, #25
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	4413      	add	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	0d1b      	lsrs	r3, r3, #20
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2107      	movs	r1, #7
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	401a      	ands	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0d1b      	lsrs	r3, r3, #20
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	431a      	orrs	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a8:	43db      	mvns	r3, r3
 80042aa:	401a      	ands	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0318 	and.w	r3, r3, #24
 80042b2:	4908      	ldr	r1, [pc, #32]	@ (80042d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042b4:	40d9      	lsrs	r1, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	400b      	ands	r3, r1
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	431a      	orrs	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	0007ffff 	.word	0x0007ffff

080042d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 031f 	and.w	r3, r3, #31
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004320:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6093      	str	r3, [r2, #8]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004348:	d101      	bne.n	800434e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800436c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004370:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004398:	d101      	bne.n	800439e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043c0:	f043 0201 	orr.w	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <LL_ADC_IsEnabled+0x18>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <LL_ADC_IsEnabled+0x1a>
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800440a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800440e:	f043 0204 	orr.w	r2, r3, #4
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b04      	cmp	r3, #4
 8004434:	d101      	bne.n	800443a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b08      	cmp	r3, #8
 800445a:	d101      	bne.n	8004460 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b089      	sub	sp, #36	@ 0x24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e167      	b.n	800475a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fc fe81 	bl	80011a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff3f 	bl	8004334 <LL_ADC_IsDeepPowerDownEnabled>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff25 	bl	8004310 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff5a 	bl	8004384 <LL_ADC_IsInternalRegulatorEnabled>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d115      	bne.n	8004502 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ff3e 	bl	800435c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e0:	4ba0      	ldr	r3, [pc, #640]	@ (8004764 <HAL_ADC_Init+0x2f4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	099b      	lsrs	r3, r3, #6
 80044e6:	4aa0      	ldr	r2, [pc, #640]	@ (8004768 <HAL_ADC_Init+0x2f8>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	3301      	adds	r3, #1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044f4:	e002      	b.n	80044fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f9      	bne.n	80044f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff3c 	bl	8004384 <LL_ADC_IsInternalRegulatorEnabled>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10d      	bne.n	800452e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004516:	f043 0210 	orr.w	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004522:	f043 0201 	orr.w	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff ff75 	bl	8004422 <LL_ADC_REG_IsConversionOngoing>
 8004538:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	f040 8100 	bne.w	8004748 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80fc 	bne.w	8004748 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004554:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004558:	f043 0202 	orr.w	r2, r3, #2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff ff35 	bl	80043d4 <LL_ADC_IsEnabled>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d111      	bne.n	8004594 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004570:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004574:	f7ff ff2e 	bl	80043d4 <LL_ADC_IsEnabled>
 8004578:	4604      	mov	r4, r0
 800457a:	487c      	ldr	r0, [pc, #496]	@ (800476c <HAL_ADC_Init+0x2fc>)
 800457c:	f7ff ff2a 	bl	80043d4 <LL_ADC_IsEnabled>
 8004580:	4603      	mov	r3, r0
 8004582:	4323      	orrs	r3, r4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4619      	mov	r1, r3
 800458e:	4878      	ldr	r0, [pc, #480]	@ (8004770 <HAL_ADC_Init+0x300>)
 8004590:	f7ff fd2e 	bl	8003ff0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7f5b      	ldrb	r3, [r3, #29]
 8004598:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800459e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80045a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80045aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d106      	bne.n	80045d0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c6:	3b01      	subs	r3, #1
 80045c8:	045b      	lsls	r3, r3, #17
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	4b60      	ldr	r3, [pc, #384]	@ (8004774 <HAL_ADC_Init+0x304>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	69b9      	ldr	r1, [r7, #24]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff ff14 	bl	8004448 <LL_ADC_INJ_IsConversionOngoing>
 8004620:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d16d      	bne.n	8004704 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d16a      	bne.n	8004704 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004632:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800463a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800464a:	f023 0302 	bic.w	r3, r3, #2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	69b9      	ldr	r1, [r7, #24]
 8004654:	430b      	orrs	r3, r1
 8004656:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d017      	beq.n	8004690 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800466e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004678:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800467c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6911      	ldr	r1, [r2, #16]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	430b      	orrs	r3, r1
 800468a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800468e:	e013      	b.n	80046b8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800469e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80046b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d118      	bne.n	80046f4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046d8:	4311      	orrs	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80046de:	4311      	orrs	r1, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046e4:	430a      	orrs	r2, r1
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	611a      	str	r2, [r3, #16]
 80046f2:	e007      	b.n	8004704 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10c      	bne.n	8004726 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004712:	f023 010f 	bic.w	r1, r3, #15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	1e5a      	subs	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30
 8004724:	e007      	b.n	8004736 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 020f 	bic.w	r2, r2, #15
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	f043 0201 	orr.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004746:	e007      	b.n	8004758 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474c:	f043 0210 	orr.w	r2, r3, #16
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004758:	7ffb      	ldrb	r3, [r7, #31]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3724      	adds	r7, #36	@ 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd90      	pop	{r4, r7, pc}
 8004762:	bf00      	nop
 8004764:	20000008 	.word	0x20000008
 8004768:	053e2d63 	.word	0x053e2d63
 800476c:	50000100 	.word	0x50000100
 8004770:	50000300 	.word	0x50000300
 8004774:	fff04007 	.word	0xfff04007

08004778 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004784:	4851      	ldr	r0, [pc, #324]	@ (80048cc <HAL_ADC_Start_DMA+0x154>)
 8004786:	f7ff fda7 	bl	80042d8 <LL_ADC_GetMultimode>
 800478a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fe46 	bl	8004422 <LL_ADC_REG_IsConversionOngoing>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	f040 808f 	bne.w	80048bc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_ADC_Start_DMA+0x34>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e08a      	b.n	80048c2 <HAL_ADC_Start_DMA+0x14a>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b05      	cmp	r3, #5
 80047be:	d002      	beq.n	80047c6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b09      	cmp	r3, #9
 80047c4:	d173      	bne.n	80048ae <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 feb2 	bl	8005530 <ADC_Enable>
 80047cc:	4603      	mov	r3, r0
 80047ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d166      	bne.n	80048a4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a38      	ldr	r2, [pc, #224]	@ (80048d0 <HAL_ADC_Start_DMA+0x158>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d002      	beq.n	80047fa <HAL_ADC_Start_DMA+0x82>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	e001      	b.n	80047fe <HAL_ADC_Start_DMA+0x86>
 80047fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	4293      	cmp	r3, r2
 8004804:	d002      	beq.n	800480c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d105      	bne.n	8004818 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004810:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d006      	beq.n	8004832 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004828:	f023 0206 	bic.w	r2, r3, #6
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004830:	e002      	b.n	8004838 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	4a25      	ldr	r2, [pc, #148]	@ (80048d4 <HAL_ADC_Start_DMA+0x15c>)
 800483e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004844:	4a24      	ldr	r2, [pc, #144]	@ (80048d8 <HAL_ADC_Start_DMA+0x160>)
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484c:	4a23      	ldr	r2, [pc, #140]	@ (80048dc <HAL_ADC_Start_DMA+0x164>)
 800484e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	221c      	movs	r2, #28
 8004856:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0210 	orr.w	r2, r2, #16
 800486e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3340      	adds	r3, #64	@ 0x40
 800488a:	4619      	mov	r1, r3
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f001 f9ec 	bl	8005c6c <HAL_DMA_Start_IT>
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fdac 	bl	80043fa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80048a2:	e00d      	b.n	80048c0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80048ac:	e008      	b.n	80048c0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80048ba:	e001      	b.n	80048c0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
 80048be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	50000300 	.word	0x50000300
 80048d0:	50000100 	.word	0x50000100
 80048d4:	0800563d 	.word	0x0800563d
 80048d8:	08005715 	.word	0x08005715
 80048dc:	08005731 	.word	0x08005731

080048e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	@ 0x28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80048e8:	2300      	movs	r3, #0
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048fc:	4883      	ldr	r0, [pc, #524]	@ (8004b0c <HAL_ADC_IRQHandler+0x22c>)
 80048fe:	f7ff fceb 	bl	80042d8 <LL_ADC_GetMultimode>
 8004902:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d017      	beq.n	800493e <HAL_ADC_IRQHandler+0x5e>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d012      	beq.n	800493e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004928:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 ff65 	bl	8005800 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2202      	movs	r2, #2
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <HAL_ADC_IRQHandler+0x72>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8085 	beq.w	8004a68 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d07f      	beq.n	8004a68 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004978:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fc05 	bl	8004194 <LL_ADC_REG_IsTriggerSourceSWStart>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d064      	beq.n	8004a5a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a5e      	ldr	r2, [pc, #376]	@ (8004b10 <HAL_ADC_IRQHandler+0x230>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d002      	beq.n	80049a0 <HAL_ADC_IRQHandler+0xc0>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	e001      	b.n	80049a4 <HAL_ADC_IRQHandler+0xc4>
 80049a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d008      	beq.n	80049be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	d002      	beq.n	80049be <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b09      	cmp	r3, #9
 80049bc:	d104      	bne.n	80049c8 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	e00d      	b.n	80049e4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a50      	ldr	r2, [pc, #320]	@ (8004b10 <HAL_ADC_IRQHandler+0x230>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d002      	beq.n	80049d8 <HAL_ADC_IRQHandler+0xf8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	e001      	b.n	80049dc <HAL_ADC_IRQHandler+0xfc>
 80049d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049dc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d135      	bne.n	8004a5a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d12e      	bne.n	8004a5a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fd0e 	bl	8004422 <LL_ADC_REG_IsConversionOngoing>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11a      	bne.n	8004a42 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 020c 	bic.w	r2, r2, #12
 8004a1a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d112      	bne.n	8004a5a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a38:	f043 0201 	orr.w	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a40:	e00b      	b.n	8004a5a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a46:	f043 0210 	orr.w	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a52:	f043 0201 	orr.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc fc2c 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	220c      	movs	r2, #12
 8004a66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <HAL_ADC_IRQHandler+0x19c>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 809e 	beq.w	8004bc4 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8098 	beq.w	8004bc4 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fbae 	bl	8004212 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004ab6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fb69 	bl	8004194 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ac2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a11      	ldr	r2, [pc, #68]	@ (8004b10 <HAL_ADC_IRQHandler+0x230>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d002      	beq.n	8004ad4 <HAL_ADC_IRQHandler+0x1f4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	e001      	b.n	8004ad8 <HAL_ADC_IRQHandler+0x1f8>
 8004ad4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d008      	beq.n	8004af2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b06      	cmp	r3, #6
 8004aea:	d002      	beq.n	8004af2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b07      	cmp	r3, #7
 8004af0:	d104      	bne.n	8004afc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	623b      	str	r3, [r7, #32]
 8004afa:	e011      	b.n	8004b20 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a03      	ldr	r2, [pc, #12]	@ (8004b10 <HAL_ADC_IRQHandler+0x230>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d006      	beq.n	8004b14 <HAL_ADC_IRQHandler+0x234>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	e005      	b.n	8004b18 <HAL_ADC_IRQHandler+0x238>
 8004b0c:	50000300 	.word	0x50000300
 8004b10:	50000100 	.word	0x50000100
 8004b14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004b18:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d047      	beq.n	8004bb6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_ADC_IRQHandler+0x260>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d03f      	beq.n	8004bb6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d13a      	bne.n	8004bb6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4a:	2b40      	cmp	r3, #64	@ 0x40
 8004b4c:	d133      	bne.n	8004bb6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d12e      	bne.n	8004bb6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fc73 	bl	8004448 <LL_ADC_INJ_IsConversionOngoing>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11a      	bne.n	8004b9e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b76:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d112      	bne.n	8004bb6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b94:	f043 0201 	orr.w	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b9c:	e00b      	b.n	8004bb6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba2:	f043 0210 	orr.w	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bae:	f043 0201 	orr.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fdfa 	bl	80057b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2260      	movs	r2, #96	@ 0x60
 8004bc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d011      	beq.n	8004bf2 <HAL_ADC_IRQHandler+0x312>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f89f 	bl	8004d28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2280      	movs	r2, #128	@ 0x80
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <HAL_ADC_IRQHandler+0x342>
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fde0 	bl	80057d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <HAL_ADC_IRQHandler+0x372>
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00d      	beq.n	8004c52 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fdd2 	bl	80057ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d036      	beq.n	8004cca <HAL_ADC_IRQHandler+0x3ea>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d031      	beq.n	8004cca <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c72:	e014      	b.n	8004c9e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d008      	beq.n	8004c8c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c7a:	4825      	ldr	r0, [pc, #148]	@ (8004d10 <HAL_ADC_IRQHandler+0x430>)
 8004c7c:	f7ff fb3a 	bl	80042f4 <LL_ADC_GetMultiDMATransfer>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004c86:	2301      	movs	r3, #1
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8a:	e008      	b.n	8004c9e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d10e      	bne.n	8004cc2 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb4:	f043 0202 	orr.w	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f83d 	bl	8004d3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d018      	beq.n	8004d06 <HAL_ADC_IRQHandler+0x426>
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d013      	beq.n	8004d06 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cee:	f043 0208 	orr.w	r2, r3, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cfe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fd5f 	bl	80057c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004d06:	bf00      	nop
 8004d08:	3728      	adds	r7, #40	@ 0x28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	50000300 	.word	0x50000300

08004d14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b0b6      	sub	sp, #216	@ 0xd8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x22>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e3c8      	b.n	8005504 <HAL_ADC_ConfigChannel+0x7b4>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fb4f 	bl	8004422 <LL_ADC_REG_IsConversionOngoing>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f040 83ad 	bne.w	80054e6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6859      	ldr	r1, [r3, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f7ff fa0e 	bl	80041ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fb3d 	bl	8004422 <LL_ADC_REG_IsConversionOngoing>
 8004da8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fb49 	bl	8004448 <LL_ADC_INJ_IsConversionOngoing>
 8004db6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 81d9 	bne.w	8005176 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f040 81d4 	bne.w	8005176 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd6:	d10f      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2200      	movs	r2, #0
 8004de2:	4619      	mov	r1, r3
 8004de4:	f7ff fa28 	bl	8004238 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff f9bc 	bl	800416e <LL_ADC_SetSamplingTimeCommonConfig>
 8004df6:	e00e      	b.n	8004e16 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6819      	ldr	r1, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	461a      	mov	r2, r3
 8004e06:	f7ff fa17 	bl	8004238 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff f9ac 	bl	800416e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	08db      	lsrs	r3, r3, #3
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d022      	beq.n	8004e7e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6919      	ldr	r1, [r3, #16]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e48:	f7ff f906 	bl	8004058 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6919      	ldr	r1, [r3, #16]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f7ff f952 	bl	8004102 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d102      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x124>
 8004e6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e72:	e000      	b.n	8004e76 <HAL_ADC_ConfigChannel+0x126>
 8004e74:	2300      	movs	r3, #0
 8004e76:	461a      	mov	r2, r3
 8004e78:	f7ff f95e 	bl	8004138 <LL_ADC_SetOffsetSaturation>
 8004e7c:	e17b      	b.n	8005176 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff f90b 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x15a>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff f900 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	0e9b      	lsrs	r3, r3, #26
 8004ea4:	f003 021f 	and.w	r2, r3, #31
 8004ea8:	e01e      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x198>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff f8f5 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ec0:	fa93 f3a3 	rbit	r3, r3
 8004ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ec8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004ed0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004ed8:	2320      	movs	r3, #32
 8004eda:	e004      	b.n	8004ee6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004edc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ee0:	fab3 f383 	clz	r3, r3
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x1b0>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	0e9b      	lsrs	r3, r3, #26
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	e018      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x1e2>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004f0c:	fa93 f3a3 	rbit	r3, r3
 8004f10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004f24:	2320      	movs	r3, #32
 8004f26:	e004      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004f28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f2c:	fab3 f383 	clz	r3, r3
 8004f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d106      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff f8c4 	bl	80040cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff f8a8 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x220>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2101      	movs	r1, #1
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff f89d 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004f66:	4603      	mov	r3, r0
 8004f68:	0e9b      	lsrs	r3, r3, #26
 8004f6a:	f003 021f 	and.w	r2, r3, #31
 8004f6e:	e01e      	b.n	8004fae <HAL_ADC_ConfigChannel+0x25e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2101      	movs	r1, #1
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff f892 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f86:	fa93 f3a3 	rbit	r3, r3
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004f96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004f9e:	2320      	movs	r3, #32
 8004fa0:	e004      	b.n	8004fac <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004fa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004fa6:	fab3 f383 	clz	r3, r3
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <HAL_ADC_ConfigChannel+0x276>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	0e9b      	lsrs	r3, r3, #26
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	e018      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x2a8>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fd2:	fa93 f3a3 	rbit	r3, r3
 8004fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004fda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004fea:	2320      	movs	r3, #32
 8004fec:	e004      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d106      	bne.n	800500a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2200      	movs	r2, #0
 8005002:	2101      	movs	r1, #1
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff f861 	bl	80040cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2102      	movs	r1, #2
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff f845 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8005016:	4603      	mov	r3, r0
 8005018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x2e6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2102      	movs	r1, #2
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff f83a 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 800502c:	4603      	mov	r3, r0
 800502e:	0e9b      	lsrs	r3, r3, #26
 8005030:	f003 021f 	and.w	r2, r3, #31
 8005034:	e01e      	b.n	8005074 <HAL_ADC_ConfigChannel+0x324>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2102      	movs	r1, #2
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff f82f 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8005042:	4603      	mov	r3, r0
 8005044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800504c:	fa93 f3a3 	rbit	r3, r3
 8005050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005054:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005058:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800505c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005064:	2320      	movs	r3, #32
 8005066:	e004      	b.n	8005072 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005068:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800506c:	fab3 f383 	clz	r3, r3
 8005070:	b2db      	uxtb	r3, r3
 8005072:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <HAL_ADC_ConfigChannel+0x33c>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	0e9b      	lsrs	r3, r3, #26
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	e016      	b.n	80050ba <HAL_ADC_ConfigChannel+0x36a>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800509e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80050a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80050ac:	2320      	movs	r3, #32
 80050ae:	e004      	b.n	80050ba <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80050b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050b4:	fab3 f383 	clz	r3, r3
 80050b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d106      	bne.n	80050cc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	2102      	movs	r1, #2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff f800 	bl	80040cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2103      	movs	r1, #3
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe ffe4 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 80050d8:	4603      	mov	r3, r0
 80050da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x3a8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2103      	movs	r1, #3
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe ffd9 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 80050ee:	4603      	mov	r3, r0
 80050f0:	0e9b      	lsrs	r3, r3, #26
 80050f2:	f003 021f 	and.w	r2, r3, #31
 80050f6:	e017      	b.n	8005128 <HAL_ADC_ConfigChannel+0x3d8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2103      	movs	r1, #3
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe ffce 	bl	80040a0 <LL_ADC_GetOffsetChannel>
 8005104:	4603      	mov	r3, r0
 8005106:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800510a:	fa93 f3a3 	rbit	r3, r3
 800510e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005110:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005112:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005114:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800511a:	2320      	movs	r3, #32
 800511c:	e003      	b.n	8005126 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800511e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005120:	fab3 f383 	clz	r3, r3
 8005124:	b2db      	uxtb	r3, r3
 8005126:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005130:	2b00      	cmp	r3, #0
 8005132:	d105      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x3f0>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	0e9b      	lsrs	r3, r3, #26
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	e011      	b.n	8005164 <HAL_ADC_ConfigChannel+0x414>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005148:	fa93 f3a3 	rbit	r3, r3
 800514c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800514e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005150:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005158:	2320      	movs	r3, #32
 800515a:	e003      	b.n	8005164 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800515c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800515e:	fab3 f383 	clz	r3, r3
 8005162:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005164:	429a      	cmp	r2, r3
 8005166:	d106      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2200      	movs	r2, #0
 800516e:	2103      	movs	r1, #3
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe ffab 	bl	80040cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff f92a 	bl	80043d4 <LL_ADC_IsEnabled>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 8140 	bne.w	8005408 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	461a      	mov	r2, r3
 8005196:	f7ff f87b 	bl	8004290 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	4a8f      	ldr	r2, [pc, #572]	@ (80053dc <HAL_ADC_ConfigChannel+0x68c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	f040 8131 	bne.w	8005408 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10b      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x47e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	0e9b      	lsrs	r3, r3, #26
 80051bc:	3301      	adds	r3, #1
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	2b09      	cmp	r3, #9
 80051c4:	bf94      	ite	ls
 80051c6:	2301      	movls	r3, #1
 80051c8:	2300      	movhi	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	e019      	b.n	8005202 <HAL_ADC_ConfigChannel+0x4b2>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051d6:	fa93 f3a3 	rbit	r3, r3
 80051da:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80051dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051de:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80051e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80051e6:	2320      	movs	r3, #32
 80051e8:	e003      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80051ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051ec:	fab3 f383 	clz	r3, r3
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	3301      	adds	r3, #1
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	2b09      	cmp	r3, #9
 80051fa:	bf94      	ite	ls
 80051fc:	2301      	movls	r3, #1
 80051fe:	2300      	movhi	r3, #0
 8005200:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005202:	2b00      	cmp	r3, #0
 8005204:	d079      	beq.n	80052fa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800520e:	2b00      	cmp	r3, #0
 8005210:	d107      	bne.n	8005222 <HAL_ADC_ConfigChannel+0x4d2>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	0e9b      	lsrs	r3, r3, #26
 8005218:	3301      	adds	r3, #1
 800521a:	069b      	lsls	r3, r3, #26
 800521c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005220:	e015      	b.n	800524e <HAL_ADC_ConfigChannel+0x4fe>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005232:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800523a:	2320      	movs	r3, #32
 800523c:	e003      	b.n	8005246 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800523e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005240:	fab3 f383 	clz	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	3301      	adds	r3, #1
 8005248:	069b      	lsls	r3, r3, #26
 800524a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <HAL_ADC_ConfigChannel+0x51e>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	0e9b      	lsrs	r3, r3, #26
 8005260:	3301      	adds	r3, #1
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	2101      	movs	r1, #1
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	e017      	b.n	800529e <HAL_ADC_ConfigChannel+0x54e>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005276:	fa93 f3a3 	rbit	r3, r3
 800527a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800527c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800527e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005286:	2320      	movs	r3, #32
 8005288:	e003      	b.n	8005292 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800528a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800528c:	fab3 f383 	clz	r3, r3
 8005290:	b2db      	uxtb	r3, r3
 8005292:	3301      	adds	r3, #1
 8005294:	f003 031f 	and.w	r3, r3, #31
 8005298:	2101      	movs	r1, #1
 800529a:	fa01 f303 	lsl.w	r3, r1, r3
 800529e:	ea42 0103 	orr.w	r1, r2, r3
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x574>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	0e9b      	lsrs	r3, r3, #26
 80052b4:	3301      	adds	r3, #1
 80052b6:	f003 021f 	and.w	r2, r3, #31
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	051b      	lsls	r3, r3, #20
 80052c2:	e018      	b.n	80052f6 <HAL_ADC_ConfigChannel+0x5a6>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	fa93 f3a3 	rbit	r3, r3
 80052d0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80052d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80052d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80052dc:	2320      	movs	r3, #32
 80052de:	e003      	b.n	80052e8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80052e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e2:	fab3 f383 	clz	r3, r3
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	3301      	adds	r3, #1
 80052ea:	f003 021f 	and.w	r2, r3, #31
 80052ee:	4613      	mov	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052f6:	430b      	orrs	r3, r1
 80052f8:	e081      	b.n	80053fe <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005302:	2b00      	cmp	r3, #0
 8005304:	d107      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x5c6>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	0e9b      	lsrs	r3, r3, #26
 800530c:	3301      	adds	r3, #1
 800530e:	069b      	lsls	r3, r3, #26
 8005310:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005314:	e015      	b.n	8005342 <HAL_ADC_ConfigChannel+0x5f2>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005326:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800532e:	2320      	movs	r3, #32
 8005330:	e003      	b.n	800533a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	3301      	adds	r3, #1
 800533c:	069b      	lsls	r3, r3, #26
 800533e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <HAL_ADC_ConfigChannel+0x612>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	0e9b      	lsrs	r3, r3, #26
 8005354:	3301      	adds	r3, #1
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2101      	movs	r1, #1
 800535c:	fa01 f303 	lsl.w	r3, r1, r3
 8005360:	e017      	b.n	8005392 <HAL_ADC_ConfigChannel+0x642>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	fa93 f3a3 	rbit	r3, r3
 800536e:	61fb      	str	r3, [r7, #28]
  return result;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800537a:	2320      	movs	r3, #32
 800537c:	e003      	b.n	8005386 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	3301      	adds	r3, #1
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2101      	movs	r1, #1
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	ea42 0103 	orr.w	r1, r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10d      	bne.n	80053be <HAL_ADC_ConfigChannel+0x66e>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	0e9b      	lsrs	r3, r3, #26
 80053a8:	3301      	adds	r3, #1
 80053aa:	f003 021f 	and.w	r2, r3, #31
 80053ae:	4613      	mov	r3, r2
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	4413      	add	r3, r2
 80053b4:	3b1e      	subs	r3, #30
 80053b6:	051b      	lsls	r3, r3, #20
 80053b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053bc:	e01e      	b.n	80053fc <HAL_ADC_ConfigChannel+0x6ac>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	fa93 f3a3 	rbit	r3, r3
 80053ca:	613b      	str	r3, [r7, #16]
  return result;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80053d6:	2320      	movs	r3, #32
 80053d8:	e006      	b.n	80053e8 <HAL_ADC_ConfigChannel+0x698>
 80053da:	bf00      	nop
 80053dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	3301      	adds	r3, #1
 80053ea:	f003 021f 	and.w	r2, r3, #31
 80053ee:	4613      	mov	r3, r2
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4413      	add	r3, r2
 80053f4:	3b1e      	subs	r3, #30
 80053f6:	051b      	lsls	r3, r3, #20
 80053f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005402:	4619      	mov	r1, r3
 8005404:	f7fe ff18 	bl	8004238 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b3f      	ldr	r3, [pc, #252]	@ (800550c <HAL_ADC_ConfigChannel+0x7bc>)
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d071      	beq.n	80054f8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005414:	483e      	ldr	r0, [pc, #248]	@ (8005510 <HAL_ADC_ConfigChannel+0x7c0>)
 8005416:	f7fe fe11 	bl	800403c <LL_ADC_GetCommonPathInternalCh>
 800541a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a3c      	ldr	r2, [pc, #240]	@ (8005514 <HAL_ADC_ConfigChannel+0x7c4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <HAL_ADC_ConfigChannel+0x6e2>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3a      	ldr	r2, [pc, #232]	@ (8005518 <HAL_ADC_ConfigChannel+0x7c8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d127      	bne.n	8005482 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d121      	bne.n	8005482 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005446:	d157      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800544c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005450:	4619      	mov	r1, r3
 8005452:	482f      	ldr	r0, [pc, #188]	@ (8005510 <HAL_ADC_ConfigChannel+0x7c0>)
 8005454:	f7fe fddf 	bl	8004016 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005458:	4b30      	ldr	r3, [pc, #192]	@ (800551c <HAL_ADC_ConfigChannel+0x7cc>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	099b      	lsrs	r3, r3, #6
 800545e:	4a30      	ldr	r2, [pc, #192]	@ (8005520 <HAL_ADC_ConfigChannel+0x7d0>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	099b      	lsrs	r3, r3, #6
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	4613      	mov	r3, r2
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005472:	e002      	b.n	800547a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3b01      	subs	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f9      	bne.n	8005474 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005480:	e03a      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a27      	ldr	r2, [pc, #156]	@ (8005524 <HAL_ADC_ConfigChannel+0x7d4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d113      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800548c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005490:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10d      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a22      	ldr	r2, [pc, #136]	@ (8005528 <HAL_ADC_ConfigChannel+0x7d8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d02a      	beq.n	80054f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054aa:	4619      	mov	r1, r3
 80054ac:	4818      	ldr	r0, [pc, #96]	@ (8005510 <HAL_ADC_ConfigChannel+0x7c0>)
 80054ae:	f7fe fdb2 	bl	8004016 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054b2:	e021      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1c      	ldr	r2, [pc, #112]	@ (800552c <HAL_ADC_ConfigChannel+0x7dc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d11c      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d116      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a16      	ldr	r2, [pc, #88]	@ (8005528 <HAL_ADC_ConfigChannel+0x7d8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d011      	beq.n	80054f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80054dc:	4619      	mov	r1, r3
 80054de:	480c      	ldr	r0, [pc, #48]	@ (8005510 <HAL_ADC_ConfigChannel+0x7c0>)
 80054e0:	f7fe fd99 	bl	8004016 <LL_ADC_SetCommonPathInternalCh>
 80054e4:	e008      	b.n	80054f8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ea:	f043 0220 	orr.w	r2, r3, #32
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005500:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005504:	4618      	mov	r0, r3
 8005506:	37d8      	adds	r7, #216	@ 0xd8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	80080000 	.word	0x80080000
 8005510:	50000300 	.word	0x50000300
 8005514:	c3210000 	.word	0xc3210000
 8005518:	90c00010 	.word	0x90c00010
 800551c:	20000008 	.word	0x20000008
 8005520:	053e2d63 	.word	0x053e2d63
 8005524:	c7520000 	.word	0xc7520000
 8005528:	50000100 	.word	0x50000100
 800552c:	cb840000 	.word	0xcb840000

08005530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005538:	2300      	movs	r3, #0
 800553a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe ff47 	bl	80043d4 <LL_ADC_IsEnabled>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d169      	bne.n	8005620 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	4b36      	ldr	r3, [pc, #216]	@ (800562c <ADC_Enable+0xfc>)
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555e:	f043 0210 	orr.w	r2, r3, #16
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556a:	f043 0201 	orr.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e055      	b.n	8005622 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe ff16 	bl	80043ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005580:	482b      	ldr	r0, [pc, #172]	@ (8005630 <ADC_Enable+0x100>)
 8005582:	f7fe fd5b 	bl	800403c <LL_ADC_GetCommonPathInternalCh>
 8005586:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005590:	4b28      	ldr	r3, [pc, #160]	@ (8005634 <ADC_Enable+0x104>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	099b      	lsrs	r3, r3, #6
 8005596:	4a28      	ldr	r2, [pc, #160]	@ (8005638 <ADC_Enable+0x108>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	099b      	lsrs	r3, r3, #6
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	4613      	mov	r3, r2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4413      	add	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80055aa:	e002      	b.n	80055b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f9      	bne.n	80055ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80055b8:	f7fe fcec 	bl	8003f94 <HAL_GetTick>
 80055bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055be:	e028      	b.n	8005612 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fe ff05 	bl	80043d4 <LL_ADC_IsEnabled>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe fee9 	bl	80043ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055da:	f7fe fcdb 	bl	8003f94 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d914      	bls.n	8005612 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d00d      	beq.n	8005612 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fa:	f043 0210 	orr.w	r2, r3, #16
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e007      	b.n	8005622 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b01      	cmp	r3, #1
 800561e:	d1cf      	bne.n	80055c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	8000003f 	.word	0x8000003f
 8005630:	50000300 	.word	0x50000300
 8005634:	20000008 	.word	0x20000008
 8005638:	053e2d63 	.word	0x053e2d63

0800563c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005652:	2b00      	cmp	r3, #0
 8005654:	d14b      	bne.n	80056ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d021      	beq.n	80056b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe fd8d 	bl	8004194 <LL_ADC_REG_IsTriggerSourceSWStart>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d032      	beq.n	80056e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d12b      	bne.n	80056e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005692:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d11f      	bne.n	80056e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056aa:	f043 0201 	orr.w	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056b2:	e018      	b.n	80056e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d111      	bne.n	80056e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d105      	bne.n	80056e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056de:	f043 0201 	orr.w	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7fb fde6 	bl	80012b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056ec:	e00e      	b.n	800570c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fb1e 	bl	8004d3c <HAL_ADC_ErrorCallback>
}
 8005700:	e004      	b.n	800570c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005720:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff faf6 	bl	8004d14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005742:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff faf0 	bl	8004d3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <LL_ADC_IsEnabled>:
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <LL_ADC_IsEnabled+0x18>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <LL_ADC_IsEnabled+0x1a>
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <LL_ADC_REG_IsConversionOngoing>:
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b04      	cmp	r3, #4
 800579c:	d101      	bne.n	80057a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b0a1      	sub	sp, #132	@ 0x84
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800582e:	2302      	movs	r3, #2
 8005830:	e08b      	b.n	800594a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800583a:	2300      	movs	r3, #0
 800583c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800583e:	2300      	movs	r3, #0
 8005840:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800584a:	d102      	bne.n	8005852 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800584c:	4b41      	ldr	r3, [pc, #260]	@ (8005954 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	e001      	b.n	8005856 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005860:	f043 0220 	orr.w	r2, r3, #32
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e06a      	b.n	800594a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff ff87 	bl	800578a <LL_ADC_REG_IsConversionOngoing>
 800587c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff ff81 	bl	800578a <LL_ADC_REG_IsConversionOngoing>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d14c      	bne.n	8005928 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800588e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005890:	2b00      	cmp	r3, #0
 8005892:	d149      	bne.n	8005928 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005894:	4b30      	ldr	r3, [pc, #192]	@ (8005958 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005896:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d028      	beq.n	80058f2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80058a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80058b2:	035b      	lsls	r3, r3, #13
 80058b4:	430b      	orrs	r3, r1
 80058b6:	431a      	orrs	r2, r3
 80058b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80058c0:	f7ff ff50 	bl	8005764 <LL_ADC_IsEnabled>
 80058c4:	4604      	mov	r4, r0
 80058c6:	4823      	ldr	r0, [pc, #140]	@ (8005954 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80058c8:	f7ff ff4c 	bl	8005764 <LL_ADC_IsEnabled>
 80058cc:	4603      	mov	r3, r0
 80058ce:	4323      	orrs	r3, r4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d133      	bne.n	800593c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80058d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80058dc:	f023 030f 	bic.w	r3, r3, #15
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	6811      	ldr	r1, [r2, #0]
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	6892      	ldr	r2, [r2, #8]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	431a      	orrs	r2, r3
 80058ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ee:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80058f0:	e024      	b.n	800593c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80058f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058fe:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005902:	f7ff ff2f 	bl	8005764 <LL_ADC_IsEnabled>
 8005906:	4604      	mov	r4, r0
 8005908:	4812      	ldr	r0, [pc, #72]	@ (8005954 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800590a:	f7ff ff2b 	bl	8005764 <LL_ADC_IsEnabled>
 800590e:	4603      	mov	r3, r0
 8005910:	4323      	orrs	r3, r4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d112      	bne.n	800593c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800591e:	f023 030f 	bic.w	r3, r3, #15
 8005922:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005924:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005926:	e009      	b.n	800593c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800593a:	e000      	b.n	800593e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800593c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005946:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800594a:	4618      	mov	r0, r3
 800594c:	3784      	adds	r7, #132	@ 0x84
 800594e:	46bd      	mov	sp, r7
 8005950:	bd90      	pop	{r4, r7, pc}
 8005952:	bf00      	nop
 8005954:	50000100 	.word	0x50000100
 8005958:	50000300 	.word	0x50000300

0800595c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800596c:	4b0c      	ldr	r3, [pc, #48]	@ (80059a0 <__NVIC_SetPriorityGrouping+0x44>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005978:	4013      	ands	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800598c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800598e:	4a04      	ldr	r2, [pc, #16]	@ (80059a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	60d3      	str	r3, [r2, #12]
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	e000ed00 	.word	0xe000ed00

080059a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059a8:	4b04      	ldr	r3, [pc, #16]	@ (80059bc <__NVIC_GetPriorityGrouping+0x18>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	f003 0307 	and.w	r3, r3, #7
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	e000ed00 	.word	0xe000ed00

080059c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	db0b      	blt.n	80059ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	f003 021f 	and.w	r2, r3, #31
 80059d8:	4907      	ldr	r1, [pc, #28]	@ (80059f8 <__NVIC_EnableIRQ+0x38>)
 80059da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2001      	movs	r0, #1
 80059e2:	fa00 f202 	lsl.w	r2, r0, r2
 80059e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	e000e100 	.word	0xe000e100

080059fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	6039      	str	r1, [r7, #0]
 8005a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	db0a      	blt.n	8005a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	490c      	ldr	r1, [pc, #48]	@ (8005a48 <__NVIC_SetPriority+0x4c>)
 8005a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1a:	0112      	lsls	r2, r2, #4
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	440b      	add	r3, r1
 8005a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a24:	e00a      	b.n	8005a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4908      	ldr	r1, [pc, #32]	@ (8005a4c <__NVIC_SetPriority+0x50>)
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	3b04      	subs	r3, #4
 8005a34:	0112      	lsls	r2, r2, #4
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	440b      	add	r3, r1
 8005a3a:	761a      	strb	r2, [r3, #24]
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000e100 	.word	0xe000e100
 8005a4c:	e000ed00 	.word	0xe000ed00

08005a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b089      	sub	sp, #36	@ 0x24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f1c3 0307 	rsb	r3, r3, #7
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	bf28      	it	cs
 8005a6e:	2304      	movcs	r3, #4
 8005a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3304      	adds	r3, #4
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d902      	bls.n	8005a80 <NVIC_EncodePriority+0x30>
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3b03      	subs	r3, #3
 8005a7e:	e000      	b.n	8005a82 <NVIC_EncodePriority+0x32>
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a84:	f04f 32ff 	mov.w	r2, #4294967295
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	43da      	mvns	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	401a      	ands	r2, r3
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a98:	f04f 31ff 	mov.w	r1, #4294967295
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa2:	43d9      	mvns	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aa8:	4313      	orrs	r3, r2
         );
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3724      	adds	r7, #36	@ 0x24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff ff4c 	bl	800595c <__NVIC_SetPriorityGrouping>
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ada:	f7ff ff63 	bl	80059a4 <__NVIC_GetPriorityGrouping>
 8005ade:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	6978      	ldr	r0, [r7, #20]
 8005ae6:	f7ff ffb3 	bl	8005a50 <NVIC_EncodePriority>
 8005aea:	4602      	mov	r2, r0
 8005aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ff82 	bl	80059fc <__NVIC_SetPriority>
}
 8005af8:	bf00      	nop
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ff56 	bl	80059c0 <__NVIC_EnableIRQ>
}
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e08d      	b.n	8005c4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	4b47      	ldr	r3, [pc, #284]	@ (8005c54 <HAL_DMA_Init+0x138>)
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d80f      	bhi.n	8005b5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4b45      	ldr	r3, [pc, #276]	@ (8005c58 <HAL_DMA_Init+0x13c>)
 8005b42:	4413      	add	r3, r2
 8005b44:	4a45      	ldr	r2, [pc, #276]	@ (8005c5c <HAL_DMA_Init+0x140>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	091b      	lsrs	r3, r3, #4
 8005b4c:	009a      	lsls	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a42      	ldr	r2, [pc, #264]	@ (8005c60 <HAL_DMA_Init+0x144>)
 8005b56:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b58:	e00e      	b.n	8005b78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4b40      	ldr	r3, [pc, #256]	@ (8005c64 <HAL_DMA_Init+0x148>)
 8005b62:	4413      	add	r3, r2
 8005b64:	4a3d      	ldr	r2, [pc, #244]	@ (8005c5c <HAL_DMA_Init+0x140>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	009a      	lsls	r2, r3, #2
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a3c      	ldr	r2, [pc, #240]	@ (8005c68 <HAL_DMA_Init+0x14c>)
 8005b76:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa82 	bl	80060d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bd8:	d102      	bne.n	8005be0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005bf4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d010      	beq.n	8005c20 <HAL_DMA_Init+0x104>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d80c      	bhi.n	8005c20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 faa2 	bl	8006150 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	e008      	b.n	8005c32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40020407 	.word	0x40020407
 8005c58:	bffdfff8 	.word	0xbffdfff8
 8005c5c:	cccccccd 	.word	0xcccccccd
 8005c60:	40020000 	.word	0x40020000
 8005c64:	bffdfbf8 	.word	0xbffdfbf8
 8005c68:	40020400 	.word	0x40020400

08005c6c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_DMA_Start_IT+0x20>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e066      	b.n	8005d5a <HAL_DMA_Start_IT+0xee>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d155      	bne.n	8005d4c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0201 	bic.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f9c7 	bl	8006058 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 020e 	orr.w	r2, r2, #14
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e00f      	b.n	8005d04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0204 	bic.w	r2, r2, #4
 8005cf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 020a 	orr.w	r2, r2, #10
 8005d02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d20:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d38:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0201 	orr.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e005      	b.n	8005d58 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
 8005d56:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d005      	beq.n	8005d86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
 8005d84:	e037      	b.n	8005df6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 020e 	bic.w	r2, r2, #14
 8005d94:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005da4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	f003 021f 	and.w	r2, r3, #31
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005dd2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00c      	beq.n	8005df6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005df4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d00d      	beq.n	8005e48 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	73fb      	strb	r3, [r7, #15]
 8005e46:	e047      	b.n	8005ed8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 020e 	bic.w	r2, r2, #14
 8005e56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0201 	bic.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7c:	f003 021f 	and.w	r2, r3, #31
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	2101      	movs	r1, #1
 8005e86:	fa01 f202 	lsl.w	r2, r1, r2
 8005e8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005eb6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
    }
  }
  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2204      	movs	r2, #4
 8005f04:	409a      	lsls	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d026      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x7a>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d021      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d107      	bne.n	8005f36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0204 	bic.w	r2, r2, #4
 8005f34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3a:	f003 021f 	and.w	r2, r3, #31
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	2104      	movs	r1, #4
 8005f44:	fa01 f202 	lsl.w	r2, r1, r2
 8005f48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d071      	beq.n	8006036 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f5a:	e06c      	b.n	8006036 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	2202      	movs	r2, #2
 8005f66:	409a      	lsls	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d02e      	beq.n	8005fce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d029      	beq.n	8005fce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 020a 	bic.w	r2, r2, #10
 8005f96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa4:	f003 021f 	and.w	r2, r3, #31
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	2102      	movs	r1, #2
 8005fae:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d038      	beq.n	8006036 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005fcc:	e033      	b.n	8006036 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	409a      	lsls	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d02a      	beq.n	8006038 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d025      	beq.n	8006038 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 020e 	bic.w	r2, r2, #14
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006000:	f003 021f 	and.w	r2, r3, #31
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f202 	lsl.w	r2, r1, r2
 800600e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602a:	2b00      	cmp	r3, #0
 800602c:	d004      	beq.n	8006038 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006036:	bf00      	nop
 8006038:	bf00      	nop
}
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800606e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006080:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f003 021f 	and.w	r2, r3, #31
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	2101      	movs	r1, #1
 8006090:	fa01 f202 	lsl.w	r2, r1, r2
 8006094:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d108      	bne.n	80060b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060b6:	e007      	b.n	80060c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	60da      	str	r2, [r3, #12]
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	4b16      	ldr	r3, [pc, #88]	@ (800613c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d802      	bhi.n	80060ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80060e8:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e001      	b.n	80060f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80060ee:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80060f0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	3b08      	subs	r3, #8
 80060fe:	4a12      	ldr	r2, [pc, #72]	@ (8006148 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006100:	fba2 2303 	umull	r2, r3, r2, r3
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610c:	089b      	lsrs	r3, r3, #2
 800610e:	009a      	lsls	r2, r3, #2
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	461a      	mov	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a0b      	ldr	r2, [pc, #44]	@ (800614c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800611e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	2201      	movs	r2, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40020407 	.word	0x40020407
 8006140:	40020800 	.word	0x40020800
 8006144:	40020820 	.word	0x40020820
 8006148:	cccccccd 	.word	0xcccccccd
 800614c:	40020880 	.word	0x40020880

08006150 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a08      	ldr	r2, [pc, #32]	@ (8006194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006172:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3b01      	subs	r3, #1
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2201      	movs	r2, #1
 800617e:	409a      	lsls	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	1000823f 	.word	0x1000823f
 8006194:	40020940 	.word	0x40020940

08006198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80061a6:	e15a      	b.n	800645e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	2101      	movs	r1, #1
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	fa01 f303 	lsl.w	r3, r1, r3
 80061b4:	4013      	ands	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 814c 	beq.w	8006458 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d005      	beq.n	80061d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d130      	bne.n	800623a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	2203      	movs	r2, #3
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	43db      	mvns	r3, r3
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4013      	ands	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800620e:	2201      	movs	r2, #1
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4013      	ands	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	091b      	lsrs	r3, r3, #4
 8006224:	f003 0201 	and.w	r2, r3, #1
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	fa02 f303 	lsl.w	r3, r2, r3
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b03      	cmp	r3, #3
 8006244:	d017      	beq.n	8006276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	2203      	movs	r2, #3
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4013      	ands	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d123      	bne.n	80062ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	08da      	lsrs	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3208      	adds	r2, #8
 800628a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	220f      	movs	r2, #15
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4013      	ands	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	08da      	lsrs	r2, r3, #3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3208      	adds	r2, #8
 80062c4:	6939      	ldr	r1, [r7, #16]
 80062c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	2203      	movs	r2, #3
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	43db      	mvns	r3, r3
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4013      	ands	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f003 0203 	and.w	r2, r3, #3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 80a6 	beq.w	8006458 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800630c:	4b5b      	ldr	r3, [pc, #364]	@ (800647c <HAL_GPIO_Init+0x2e4>)
 800630e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006310:	4a5a      	ldr	r2, [pc, #360]	@ (800647c <HAL_GPIO_Init+0x2e4>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	6613      	str	r3, [r2, #96]	@ 0x60
 8006318:	4b58      	ldr	r3, [pc, #352]	@ (800647c <HAL_GPIO_Init+0x2e4>)
 800631a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006324:	4a56      	ldr	r2, [pc, #344]	@ (8006480 <HAL_GPIO_Init+0x2e8>)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	089b      	lsrs	r3, r3, #2
 800632a:	3302      	adds	r3, #2
 800632c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	220f      	movs	r2, #15
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	43db      	mvns	r3, r3
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4013      	ands	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800634e:	d01f      	beq.n	8006390 <HAL_GPIO_Init+0x1f8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a4c      	ldr	r2, [pc, #304]	@ (8006484 <HAL_GPIO_Init+0x2ec>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d019      	beq.n	800638c <HAL_GPIO_Init+0x1f4>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a4b      	ldr	r2, [pc, #300]	@ (8006488 <HAL_GPIO_Init+0x2f0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d013      	beq.n	8006388 <HAL_GPIO_Init+0x1f0>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a4a      	ldr	r2, [pc, #296]	@ (800648c <HAL_GPIO_Init+0x2f4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00d      	beq.n	8006384 <HAL_GPIO_Init+0x1ec>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a49      	ldr	r2, [pc, #292]	@ (8006490 <HAL_GPIO_Init+0x2f8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <HAL_GPIO_Init+0x1e8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a48      	ldr	r2, [pc, #288]	@ (8006494 <HAL_GPIO_Init+0x2fc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d101      	bne.n	800637c <HAL_GPIO_Init+0x1e4>
 8006378:	2305      	movs	r3, #5
 800637a:	e00a      	b.n	8006392 <HAL_GPIO_Init+0x1fa>
 800637c:	2306      	movs	r3, #6
 800637e:	e008      	b.n	8006392 <HAL_GPIO_Init+0x1fa>
 8006380:	2304      	movs	r3, #4
 8006382:	e006      	b.n	8006392 <HAL_GPIO_Init+0x1fa>
 8006384:	2303      	movs	r3, #3
 8006386:	e004      	b.n	8006392 <HAL_GPIO_Init+0x1fa>
 8006388:	2302      	movs	r3, #2
 800638a:	e002      	b.n	8006392 <HAL_GPIO_Init+0x1fa>
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <HAL_GPIO_Init+0x1fa>
 8006390:	2300      	movs	r3, #0
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	f002 0203 	and.w	r2, r2, #3
 8006398:	0092      	lsls	r2, r2, #2
 800639a:	4093      	lsls	r3, r2
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063a2:	4937      	ldr	r1, [pc, #220]	@ (8006480 <HAL_GPIO_Init+0x2e8>)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	089b      	lsrs	r3, r3, #2
 80063a8:	3302      	adds	r3, #2
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80063b0:	4b39      	ldr	r3, [pc, #228]	@ (8006498 <HAL_GPIO_Init+0x300>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	43db      	mvns	r3, r3
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4013      	ands	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063d4:	4a30      	ldr	r2, [pc, #192]	@ (8006498 <HAL_GPIO_Init+0x300>)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063da:	4b2f      	ldr	r3, [pc, #188]	@ (8006498 <HAL_GPIO_Init+0x300>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	43db      	mvns	r3, r3
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4013      	ands	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063fe:	4a26      	ldr	r2, [pc, #152]	@ (8006498 <HAL_GPIO_Init+0x300>)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006404:	4b24      	ldr	r3, [pc, #144]	@ (8006498 <HAL_GPIO_Init+0x300>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	43db      	mvns	r3, r3
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4013      	ands	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006428:	4a1b      	ldr	r2, [pc, #108]	@ (8006498 <HAL_GPIO_Init+0x300>)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800642e:	4b1a      	ldr	r3, [pc, #104]	@ (8006498 <HAL_GPIO_Init+0x300>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	43db      	mvns	r3, r3
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	4013      	ands	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006452:	4a11      	ldr	r2, [pc, #68]	@ (8006498 <HAL_GPIO_Init+0x300>)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	3301      	adds	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	fa22 f303 	lsr.w	r3, r2, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	f47f ae9d 	bne.w	80061a8 <HAL_GPIO_Init+0x10>
  }
}
 800646e:	bf00      	nop
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	40021000 	.word	0x40021000
 8006480:	40010000 	.word	0x40010000
 8006484:	48000400 	.word	0x48000400
 8006488:	48000800 	.word	0x48000800
 800648c:	48000c00 	.word	0x48000c00
 8006490:	48001000 	.word	0x48001000
 8006494:	48001400 	.word	0x48001400
 8006498:	40010400 	.word	0x40010400

0800649c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	807b      	strh	r3, [r7, #2]
 80064a8:	4613      	mov	r3, r2
 80064aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064ac:	787b      	ldrb	r3, [r7, #1]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064b2:	887a      	ldrh	r2, [r7, #2]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064b8:	e002      	b.n	80064c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064ba:	887a      	ldrh	r2, [r7, #2]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064d6:	4b08      	ldr	r3, [pc, #32]	@ (80064f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	4013      	ands	r3, r2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064e2:	4a05      	ldr	r2, [pc, #20]	@ (80064f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 f806 	bl	80064fc <HAL_GPIO_EXTI_Callback>
  }
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40010400 	.word	0x40010400

080064fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e08d      	b.n	8006640 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7fb fbd3 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2224      	movs	r2, #36	@ 0x24
 8006542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0201 	bic.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006562:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006572:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d107      	bne.n	800658c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006588:	609a      	str	r2, [r3, #8]
 800658a:	e006      	b.n	800659a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006598:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d108      	bne.n	80065b4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065b0:	605a      	str	r2, [r3, #4]
 80065b2:	e007      	b.n	80065c4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6812      	ldr	r2, [r2, #0]
 80065ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80065d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69d9      	ldr	r1, [r3, #28]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1a      	ldr	r2, [r3, #32]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	461a      	mov	r2, r3
 8006654:	460b      	mov	r3, r1
 8006656:	817b      	strh	r3, [r7, #10]
 8006658:	4613      	mov	r3, r2
 800665a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b20      	cmp	r3, #32
 8006666:	f040 80fd 	bne.w	8006864 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_I2C_Master_Transmit+0x30>
 8006674:	2302      	movs	r3, #2
 8006676:	e0f6      	b.n	8006866 <HAL_I2C_Master_Transmit+0x21e>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006680:	f7fd fc88 	bl	8003f94 <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	2319      	movs	r3, #25
 800668c:	2201      	movs	r2, #1
 800668e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f914 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e0e1      	b.n	8006866 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2221      	movs	r2, #33	@ 0x21
 80066a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2210      	movs	r2, #16
 80066ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	893a      	ldrh	r2, [r7, #8]
 80066c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2bff      	cmp	r3, #255	@ 0xff
 80066d2:	d906      	bls.n	80066e2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	22ff      	movs	r2, #255	@ 0xff
 80066d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80066da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e007      	b.n	80066f2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80066ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d024      	beq.n	8006744 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800672e:	b2db      	uxtb	r3, r3
 8006730:	3301      	adds	r3, #1
 8006732:	b2da      	uxtb	r2, r3
 8006734:	8979      	ldrh	r1, [r7, #10]
 8006736:	4b4e      	ldr	r3, [pc, #312]	@ (8006870 <HAL_I2C_Master_Transmit+0x228>)
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 fa83 	bl	8006c48 <I2C_TransferConfig>
 8006742:	e066      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006748:	b2da      	uxtb	r2, r3
 800674a:	8979      	ldrh	r1, [r7, #10]
 800674c:	4b48      	ldr	r3, [pc, #288]	@ (8006870 <HAL_I2C_Master_Transmit+0x228>)
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fa78 	bl	8006c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006758:	e05b      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	6a39      	ldr	r1, [r7, #32]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f907 	bl	8006972 <I2C_WaitOnTXISFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e07b      	b.n	8006866 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	781a      	ldrb	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d034      	beq.n	8006812 <HAL_I2C_Master_Transmit+0x1ca>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d130      	bne.n	8006812 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	2200      	movs	r2, #0
 80067b8:	2180      	movs	r1, #128	@ 0x80
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 f880 	bl	80068c0 <I2C_WaitOnFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e04d      	b.n	8006866 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2bff      	cmp	r3, #255	@ 0xff
 80067d2:	d90e      	bls.n	80067f2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	22ff      	movs	r2, #255	@ 0xff
 80067d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	8979      	ldrh	r1, [r7, #10]
 80067e2:	2300      	movs	r3, #0
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fa2c 	bl	8006c48 <I2C_TransferConfig>
 80067f0:	e00f      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006800:	b2da      	uxtb	r2, r3
 8006802:	8979      	ldrh	r1, [r7, #10]
 8006804:	2300      	movs	r3, #0
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 fa1b 	bl	8006c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006816:	b29b      	uxth	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d19e      	bne.n	800675a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	6a39      	ldr	r1, [r7, #32]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f8ed 	bl	8006a00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e01a      	b.n	8006866 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2220      	movs	r2, #32
 8006836:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6859      	ldr	r1, [r3, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b0c      	ldr	r3, [pc, #48]	@ (8006874 <HAL_I2C_Master_Transmit+0x22c>)
 8006844:	400b      	ands	r3, r1
 8006846:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	e000      	b.n	8006866 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006864:	2302      	movs	r3, #2
  }
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	80002000 	.word	0x80002000
 8006874:	fe00e800 	.word	0xfe00e800

08006878 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d103      	bne.n	8006896 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2200      	movs	r2, #0
 8006894:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d007      	beq.n	80068b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	619a      	str	r2, [r3, #24]
  }
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068d0:	e03b      	b.n	800694a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f8d6 	bl	8006a88 <I2C_IsErrorOccurred>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e041      	b.n	800696a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d02d      	beq.n	800694a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ee:	f7fd fb51 	bl	8003f94 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d302      	bcc.n	8006904 <I2C_WaitOnFlagUntilTimeout+0x44>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d122      	bne.n	800694a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4013      	ands	r3, r2
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	429a      	cmp	r2, r3
 8006912:	bf0c      	ite	eq
 8006914:	2301      	moveq	r3, #1
 8006916:	2300      	movne	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	429a      	cmp	r2, r3
 8006920:	d113      	bne.n	800694a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	f043 0220 	orr.w	r2, r3, #32
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2220      	movs	r2, #32
 8006932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e00f      	b.n	800696a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4013      	ands	r3, r2
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	429a      	cmp	r2, r3
 8006958:	bf0c      	ite	eq
 800695a:	2301      	moveq	r3, #1
 800695c:	2300      	movne	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	429a      	cmp	r2, r3
 8006966:	d0b4      	beq.n	80068d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800697e:	e033      	b.n	80069e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f87f 	bl	8006a88 <I2C_IsErrorOccurred>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e031      	b.n	80069f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699a:	d025      	beq.n	80069e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699c:	f7fd fafa 	bl	8003f94 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d302      	bcc.n	80069b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d11a      	bne.n	80069e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d013      	beq.n	80069e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c4:	f043 0220 	orr.w	r2, r3, #32
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e007      	b.n	80069f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d1c4      	bne.n	8006980 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a0c:	e02f      	b.n	8006a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f838 	bl	8006a88 <I2C_IsErrorOccurred>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e02d      	b.n	8006a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a22:	f7fd fab7 	bl	8003f94 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d302      	bcc.n	8006a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11a      	bne.n	8006a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d013      	beq.n	8006a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4a:	f043 0220 	orr.w	r2, r3, #32
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e007      	b.n	8006a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d1c8      	bne.n	8006a0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	@ 0x28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d068      	beq.n	8006b86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2210      	movs	r2, #16
 8006aba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006abc:	e049      	b.n	8006b52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d045      	beq.n	8006b52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ac6:	f7fd fa65 	bl	8003f94 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d302      	bcc.n	8006adc <I2C_IsErrorOccurred+0x54>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d13a      	bne.n	8006b52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ae6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006afe:	d121      	bne.n	8006b44 <I2C_IsErrorOccurred+0xbc>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b06:	d01d      	beq.n	8006b44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b08:	7cfb      	ldrb	r3, [r7, #19]
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d01a      	beq.n	8006b44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b1e:	f7fd fa39 	bl	8003f94 <HAL_GetTick>
 8006b22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b24:	e00e      	b.n	8006b44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b26:	f7fd fa35 	bl	8003f94 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b19      	cmp	r3, #25
 8006b32:	d907      	bls.n	8006b44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	f043 0320 	orr.w	r3, r3, #32
 8006b3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006b42:	e006      	b.n	8006b52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	d1e9      	bne.n	8006b26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d003      	beq.n	8006b68 <I2C_IsErrorOccurred+0xe0>
 8006b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0aa      	beq.n	8006abe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2220      	movs	r2, #32
 8006b76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	f043 0304 	orr.w	r3, r3, #4
 8006b7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	f043 0308 	orr.w	r3, r3, #8
 8006bc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006bca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	f043 0302 	orr.w	r3, r3, #2
 8006be2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01c      	beq.n	8006c36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fe3b 	bl	8006878 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6859      	ldr	r1, [r3, #4]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c44 <I2C_IsErrorOccurred+0x1bc>)
 8006c0e:	400b      	ands	r3, r1
 8006c10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3728      	adds	r7, #40	@ 0x28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	fe00e800 	.word	0xfe00e800

08006c48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	607b      	str	r3, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	817b      	strh	r3, [r7, #10]
 8006c56:	4613      	mov	r3, r2
 8006c58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c5a:	897b      	ldrh	r3, [r7, #10]
 8006c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c60:	7a7b      	ldrb	r3, [r7, #9]
 8006c62:	041b      	lsls	r3, r3, #16
 8006c64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	0d5b      	lsrs	r3, r3, #21
 8006c82:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006c86:	4b08      	ldr	r3, [pc, #32]	@ (8006ca8 <I2C_TransferConfig+0x60>)
 8006c88:	430b      	orrs	r3, r1
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	ea02 0103 	and.w	r1, r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	03ff63ff 	.word	0x03ff63ff

08006cac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	d138      	bne.n	8006d34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e032      	b.n	8006d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2224      	movs	r2, #36	@ 0x24
 8006cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006cfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6819      	ldr	r1, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	e000      	b.n	8006d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
  }
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d139      	bne.n	8006dcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e033      	b.n	8006dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2224      	movs	r2, #36	@ 0x24
 8006d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e000      	b.n	8006dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dcc:	2302      	movs	r3, #2
  }
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
	...

08006ddc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d141      	bne.n	8006e6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006dea:	4b4b      	ldr	r3, [pc, #300]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df6:	d131      	bne.n	8006e5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006df8:	4b47      	ldr	r3, [pc, #284]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dfe:	4a46      	ldr	r2, [pc, #280]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e08:	4b43      	ldr	r3, [pc, #268]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e10:	4a41      	ldr	r2, [pc, #260]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e18:	4b40      	ldr	r3, [pc, #256]	@ (8006f1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2232      	movs	r2, #50	@ 0x32
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	4a3f      	ldr	r2, [pc, #252]	@ (8006f20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	0c9b      	lsrs	r3, r3, #18
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e2e:	e002      	b.n	8006e36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e36:	4b38      	ldr	r3, [pc, #224]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e42:	d102      	bne.n	8006e4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f2      	bne.n	8006e30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e4a:	4b33      	ldr	r3, [pc, #204]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e56:	d158      	bne.n	8006f0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e057      	b.n	8006f0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e62:	4a2d      	ldr	r2, [pc, #180]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e6c:	e04d      	b.n	8006f0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e74:	d141      	bne.n	8006efa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e76:	4b28      	ldr	r3, [pc, #160]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e82:	d131      	bne.n	8006ee8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e84:	4b24      	ldr	r3, [pc, #144]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e8a:	4a23      	ldr	r2, [pc, #140]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e94:	4b20      	ldr	r3, [pc, #128]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ea2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2232      	movs	r2, #50	@ 0x32
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	4a1c      	ldr	r2, [pc, #112]	@ (8006f20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	0c9b      	lsrs	r3, r3, #18
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eba:	e002      	b.n	8006ec2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ec2:	4b15      	ldr	r3, [pc, #84]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ece:	d102      	bne.n	8006ed6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f2      	bne.n	8006ebc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ed6:	4b10      	ldr	r3, [pc, #64]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee2:	d112      	bne.n	8006f0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e011      	b.n	8006f0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eee:	4a0a      	ldr	r2, [pc, #40]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006ef8:	e007      	b.n	8006f0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006efa:	4b07      	ldr	r3, [pc, #28]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f02:	4a05      	ldr	r2, [pc, #20]	@ (8006f18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	40007000 	.word	0x40007000
 8006f1c:	20000008 	.word	0x20000008
 8006f20:	431bde83 	.word	0x431bde83

08006f24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006f28:	4b05      	ldr	r3, [pc, #20]	@ (8006f40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4a04      	ldr	r2, [pc, #16]	@ (8006f40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006f2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f32:	6093      	str	r3, [r2, #8]
}
 8006f34:	bf00      	nop
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40007000 	.word	0x40007000

08006f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e2fe      	b.n	8007554 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d075      	beq.n	800704e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f62:	4b97      	ldr	r3, [pc, #604]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 030c 	and.w	r3, r3, #12
 8006f6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f6c:	4b94      	ldr	r3, [pc, #592]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b0c      	cmp	r3, #12
 8006f7a:	d102      	bne.n	8006f82 <HAL_RCC_OscConfig+0x3e>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d002      	beq.n	8006f88 <HAL_RCC_OscConfig+0x44>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d10b      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f88:	4b8d      	ldr	r3, [pc, #564]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d05b      	beq.n	800704c <HAL_RCC_OscConfig+0x108>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d157      	bne.n	800704c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e2d9      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa8:	d106      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x74>
 8006faa:	4b85      	ldr	r3, [pc, #532]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a84      	ldr	r2, [pc, #528]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e01d      	b.n	8006ff4 <HAL_RCC_OscConfig+0xb0>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fc0:	d10c      	bne.n	8006fdc <HAL_RCC_OscConfig+0x98>
 8006fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a7e      	ldr	r2, [pc, #504]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	4b7c      	ldr	r3, [pc, #496]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a7b      	ldr	r2, [pc, #492]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e00b      	b.n	8006ff4 <HAL_RCC_OscConfig+0xb0>
 8006fdc:	4b78      	ldr	r3, [pc, #480]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a77      	ldr	r2, [pc, #476]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	4b75      	ldr	r3, [pc, #468]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a74      	ldr	r2, [pc, #464]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8006fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d013      	beq.n	8007024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffc:	f7fc ffca 	bl	8003f94 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007004:	f7fc ffc6 	bl	8003f94 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b64      	cmp	r3, #100	@ 0x64
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e29e      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007016:	4b6a      	ldr	r3, [pc, #424]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0f0      	beq.n	8007004 <HAL_RCC_OscConfig+0xc0>
 8007022:	e014      	b.n	800704e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007024:	f7fc ffb6 	bl	8003f94 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800702c:	f7fc ffb2 	bl	8003f94 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b64      	cmp	r3, #100	@ 0x64
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e28a      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800703e:	4b60      	ldr	r3, [pc, #384]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f0      	bne.n	800702c <HAL_RCC_OscConfig+0xe8>
 800704a:	e000      	b.n	800704e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800704c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d075      	beq.n	8007146 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800705a:	4b59      	ldr	r3, [pc, #356]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 030c 	and.w	r3, r3, #12
 8007062:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007064:	4b56      	ldr	r3, [pc, #344]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0303 	and.w	r3, r3, #3
 800706c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b0c      	cmp	r3, #12
 8007072:	d102      	bne.n	800707a <HAL_RCC_OscConfig+0x136>
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d002      	beq.n	8007080 <HAL_RCC_OscConfig+0x13c>
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b04      	cmp	r3, #4
 800707e:	d11f      	bne.n	80070c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007080:	4b4f      	ldr	r3, [pc, #316]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_OscConfig+0x154>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e25d      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007098:	4b49      	ldr	r3, [pc, #292]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	061b      	lsls	r3, r3, #24
 80070a6:	4946      	ldr	r1, [pc, #280]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070ac:	4b45      	ldr	r3, [pc, #276]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fb fa59 	bl	8002568 <HAL_InitTick>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d043      	beq.n	8007144 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e249      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d023      	beq.n	8007110 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070c8:	4b3d      	ldr	r3, [pc, #244]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a3c      	ldr	r2, [pc, #240]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 80070ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d4:	f7fc ff5e 	bl	8003f94 <HAL_GetTick>
 80070d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070da:	e008      	b.n	80070ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070dc:	f7fc ff5a 	bl	8003f94 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e232      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ee:	4b34      	ldr	r3, [pc, #208]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0f0      	beq.n	80070dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070fa:	4b31      	ldr	r3, [pc, #196]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	061b      	lsls	r3, r3, #24
 8007108:	492d      	ldr	r1, [pc, #180]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 800710a:	4313      	orrs	r3, r2
 800710c:	604b      	str	r3, [r1, #4]
 800710e:	e01a      	b.n	8007146 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007110:	4b2b      	ldr	r3, [pc, #172]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2a      	ldr	r2, [pc, #168]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007116:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800711a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711c:	f7fc ff3a 	bl	8003f94 <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007124:	f7fc ff36 	bl	8003f94 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e20e      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007136:	4b22      	ldr	r3, [pc, #136]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f0      	bne.n	8007124 <HAL_RCC_OscConfig+0x1e0>
 8007142:	e000      	b.n	8007146 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007144:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d041      	beq.n	80071d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01c      	beq.n	8007194 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800715a:	4b19      	ldr	r3, [pc, #100]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 800715c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007160:	4a17      	ldr	r2, [pc, #92]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800716a:	f7fc ff13 	bl	8003f94 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007172:	f7fc ff0f 	bl	8003f94 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e1e7      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007184:	4b0e      	ldr	r3, [pc, #56]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007186:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0ef      	beq.n	8007172 <HAL_RCC_OscConfig+0x22e>
 8007192:	e020      	b.n	80071d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007194:	4b0a      	ldr	r3, [pc, #40]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 8007196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800719a:	4a09      	ldr	r2, [pc, #36]	@ (80071c0 <HAL_RCC_OscConfig+0x27c>)
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a4:	f7fc fef6 	bl	8003f94 <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071aa:	e00d      	b.n	80071c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071ac:	f7fc fef2 	bl	8003f94 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d906      	bls.n	80071c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e1ca      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
 80071be:	bf00      	nop
 80071c0:	40021000 	.word	0x40021000
 80071c4:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071c8:	4b8c      	ldr	r3, [pc, #560]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80071ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1ea      	bne.n	80071ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 80a6 	beq.w	8007330 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071e4:	2300      	movs	r3, #0
 80071e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071e8:	4b84      	ldr	r3, [pc, #528]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80071ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_RCC_OscConfig+0x2b4>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <HAL_RCC_OscConfig+0x2b6>
 80071f8:	2300      	movs	r3, #0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00d      	beq.n	800721a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071fe:	4b7f      	ldr	r3, [pc, #508]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007202:	4a7e      	ldr	r2, [pc, #504]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007208:	6593      	str	r3, [r2, #88]	@ 0x58
 800720a:	4b7c      	ldr	r3, [pc, #496]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 800720c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007216:	2301      	movs	r3, #1
 8007218:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800721a:	4b79      	ldr	r3, [pc, #484]	@ (8007400 <HAL_RCC_OscConfig+0x4bc>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007222:	2b00      	cmp	r3, #0
 8007224:	d118      	bne.n	8007258 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007226:	4b76      	ldr	r3, [pc, #472]	@ (8007400 <HAL_RCC_OscConfig+0x4bc>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a75      	ldr	r2, [pc, #468]	@ (8007400 <HAL_RCC_OscConfig+0x4bc>)
 800722c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007232:	f7fc feaf 	bl	8003f94 <HAL_GetTick>
 8007236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007238:	e008      	b.n	800724c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800723a:	f7fc feab 	bl	8003f94 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b02      	cmp	r3, #2
 8007246:	d901      	bls.n	800724c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e183      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800724c:	4b6c      	ldr	r3, [pc, #432]	@ (8007400 <HAL_RCC_OscConfig+0x4bc>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0f0      	beq.n	800723a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d108      	bne.n	8007272 <HAL_RCC_OscConfig+0x32e>
 8007260:	4b66      	ldr	r3, [pc, #408]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007266:	4a65      	ldr	r2, [pc, #404]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007270:	e024      	b.n	80072bc <HAL_RCC_OscConfig+0x378>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b05      	cmp	r3, #5
 8007278:	d110      	bne.n	800729c <HAL_RCC_OscConfig+0x358>
 800727a:	4b60      	ldr	r3, [pc, #384]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 800727c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007280:	4a5e      	ldr	r2, [pc, #376]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007282:	f043 0304 	orr.w	r3, r3, #4
 8007286:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800728a:	4b5c      	ldr	r3, [pc, #368]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 800728c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007290:	4a5a      	ldr	r2, [pc, #360]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800729a:	e00f      	b.n	80072bc <HAL_RCC_OscConfig+0x378>
 800729c:	4b57      	ldr	r3, [pc, #348]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a2:	4a56      	ldr	r2, [pc, #344]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80072ac:	4b53      	ldr	r3, [pc, #332]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b2:	4a52      	ldr	r2, [pc, #328]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80072b4:	f023 0304 	bic.w	r3, r3, #4
 80072b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d016      	beq.n	80072f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c4:	f7fc fe66 	bl	8003f94 <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072ca:	e00a      	b.n	80072e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072cc:	f7fc fe62 	bl	8003f94 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072da:	4293      	cmp	r3, r2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e138      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072e2:	4b46      	ldr	r3, [pc, #280]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80072e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0ed      	beq.n	80072cc <HAL_RCC_OscConfig+0x388>
 80072f0:	e015      	b.n	800731e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f2:	f7fc fe4f 	bl	8003f94 <HAL_GetTick>
 80072f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072f8:	e00a      	b.n	8007310 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072fa:	f7fc fe4b 	bl	8003f94 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007308:	4293      	cmp	r3, r2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e121      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007310:	4b3a      	ldr	r3, [pc, #232]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1ed      	bne.n	80072fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800731e:	7ffb      	ldrb	r3, [r7, #31]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d105      	bne.n	8007330 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007324:	4b35      	ldr	r3, [pc, #212]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007328:	4a34      	ldr	r2, [pc, #208]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 800732a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800732e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	d03c      	beq.n	80073b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01c      	beq.n	800737e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007344:	4b2d      	ldr	r3, [pc, #180]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007346:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800734a:	4a2c      	ldr	r2, [pc, #176]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007354:	f7fc fe1e 	bl	8003f94 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800735c:	f7fc fe1a 	bl	8003f94 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e0f2      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800736e:	4b23      	ldr	r3, [pc, #140]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007370:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0ef      	beq.n	800735c <HAL_RCC_OscConfig+0x418>
 800737c:	e01b      	b.n	80073b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800737e:	4b1f      	ldr	r3, [pc, #124]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007380:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007384:	4a1d      	ldr	r2, [pc, #116]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738e:	f7fc fe01 	bl	8003f94 <HAL_GetTick>
 8007392:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007394:	e008      	b.n	80073a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007396:	f7fc fdfd 	bl	8003f94 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e0d5      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073a8:	4b14      	ldr	r3, [pc, #80]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80073aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1ef      	bne.n	8007396 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 80c9 	beq.w	8007552 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073c0:	4b0e      	ldr	r3, [pc, #56]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f003 030c 	and.w	r3, r3, #12
 80073c8:	2b0c      	cmp	r3, #12
 80073ca:	f000 8083 	beq.w	80074d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d15e      	bne.n	8007494 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073d6:	4b09      	ldr	r3, [pc, #36]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a08      	ldr	r2, [pc, #32]	@ (80073fc <HAL_RCC_OscConfig+0x4b8>)
 80073dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e2:	f7fc fdd7 	bl	8003f94 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073e8:	e00c      	b.n	8007404 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ea:	f7fc fdd3 	bl	8003f94 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d905      	bls.n	8007404 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e0ab      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
 80073fc:	40021000 	.word	0x40021000
 8007400:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007404:	4b55      	ldr	r3, [pc, #340]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1ec      	bne.n	80073ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007410:	4b52      	ldr	r3, [pc, #328]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	4b52      	ldr	r3, [pc, #328]	@ (8007560 <HAL_RCC_OscConfig+0x61c>)
 8007416:	4013      	ands	r3, r2
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6a11      	ldr	r1, [r2, #32]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007420:	3a01      	subs	r2, #1
 8007422:	0112      	lsls	r2, r2, #4
 8007424:	4311      	orrs	r1, r2
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800742a:	0212      	lsls	r2, r2, #8
 800742c:	4311      	orrs	r1, r2
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007432:	0852      	lsrs	r2, r2, #1
 8007434:	3a01      	subs	r2, #1
 8007436:	0552      	lsls	r2, r2, #21
 8007438:	4311      	orrs	r1, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800743e:	0852      	lsrs	r2, r2, #1
 8007440:	3a01      	subs	r2, #1
 8007442:	0652      	lsls	r2, r2, #25
 8007444:	4311      	orrs	r1, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800744a:	06d2      	lsls	r2, r2, #27
 800744c:	430a      	orrs	r2, r1
 800744e:	4943      	ldr	r1, [pc, #268]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 8007450:	4313      	orrs	r3, r2
 8007452:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007454:	4b41      	ldr	r3, [pc, #260]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a40      	ldr	r2, [pc, #256]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 800745a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800745e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007460:	4b3e      	ldr	r3, [pc, #248]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	4a3d      	ldr	r2, [pc, #244]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 8007466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800746a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746c:	f7fc fd92 	bl	8003f94 <HAL_GetTick>
 8007470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007474:	f7fc fd8e 	bl	8003f94 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e066      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007486:	4b35      	ldr	r3, [pc, #212]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0f0      	beq.n	8007474 <HAL_RCC_OscConfig+0x530>
 8007492:	e05e      	b.n	8007552 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007494:	4b31      	ldr	r3, [pc, #196]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a30      	ldr	r2, [pc, #192]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 800749a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800749e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a0:	f7fc fd78 	bl	8003f94 <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a8:	f7fc fd74 	bl	8003f94 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e04c      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074ba:	4b28      	ldr	r3, [pc, #160]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f0      	bne.n	80074a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074c6:	4b25      	ldr	r3, [pc, #148]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 80074c8:	68da      	ldr	r2, [r3, #12]
 80074ca:	4924      	ldr	r1, [pc, #144]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 80074cc:	4b25      	ldr	r3, [pc, #148]	@ (8007564 <HAL_RCC_OscConfig+0x620>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	60cb      	str	r3, [r1, #12]
 80074d2:	e03e      	b.n	8007552 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e039      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80074e0:	4b1e      	ldr	r3, [pc, #120]	@ (800755c <HAL_RCC_OscConfig+0x618>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f003 0203 	and.w	r2, r3, #3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d12c      	bne.n	800754e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fe:	3b01      	subs	r3, #1
 8007500:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007502:	429a      	cmp	r2, r3
 8007504:	d123      	bne.n	800754e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007510:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007512:	429a      	cmp	r2, r3
 8007514:	d11b      	bne.n	800754e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007522:	429a      	cmp	r2, r3
 8007524:	d113      	bne.n	800754e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	3b01      	subs	r3, #1
 8007534:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007536:	429a      	cmp	r2, r3
 8007538:	d109      	bne.n	800754e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	3b01      	subs	r3, #1
 8007548:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800754a:	429a      	cmp	r2, r3
 800754c:	d001      	beq.n	8007552 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	40021000 	.word	0x40021000
 8007560:	019f800c 	.word	0x019f800c
 8007564:	feeefffc 	.word	0xfeeefffc

08007568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e11e      	b.n	80077be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007580:	4b91      	ldr	r3, [pc, #580]	@ (80077c8 <HAL_RCC_ClockConfig+0x260>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d910      	bls.n	80075b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800758e:	4b8e      	ldr	r3, [pc, #568]	@ (80077c8 <HAL_RCC_ClockConfig+0x260>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f023 020f 	bic.w	r2, r3, #15
 8007596:	498c      	ldr	r1, [pc, #560]	@ (80077c8 <HAL_RCC_ClockConfig+0x260>)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	4313      	orrs	r3, r2
 800759c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800759e:	4b8a      	ldr	r3, [pc, #552]	@ (80077c8 <HAL_RCC_ClockConfig+0x260>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d001      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e106      	b.n	80077be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d073      	beq.n	80076a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d129      	bne.n	8007618 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075c4:	4b81      	ldr	r3, [pc, #516]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0f4      	b.n	80077be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80075d4:	f000 f9ce 	bl	8007974 <RCC_GetSysClockFreqFromPLLSource>
 80075d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	4a7c      	ldr	r2, [pc, #496]	@ (80077d0 <HAL_RCC_ClockConfig+0x268>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d93f      	bls.n	8007662 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075e2:	4b7a      	ldr	r3, [pc, #488]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d009      	beq.n	8007602 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d033      	beq.n	8007662 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d12f      	bne.n	8007662 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007602:	4b72      	ldr	r3, [pc, #456]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800760a:	4a70      	ldr	r2, [pc, #448]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 800760c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007610:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007612:	2380      	movs	r3, #128	@ 0x80
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	e024      	b.n	8007662 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d107      	bne.n	8007630 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007620:	4b6a      	ldr	r3, [pc, #424]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d109      	bne.n	8007640 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e0c6      	b.n	80077be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007630:	4b66      	ldr	r3, [pc, #408]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e0be      	b.n	80077be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007640:	f000 f8ce 	bl	80077e0 <HAL_RCC_GetSysClockFreq>
 8007644:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	4a61      	ldr	r2, [pc, #388]	@ (80077d0 <HAL_RCC_ClockConfig+0x268>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d909      	bls.n	8007662 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800764e:	4b5f      	ldr	r3, [pc, #380]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007656:	4a5d      	ldr	r2, [pc, #372]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800765c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800765e:	2380      	movs	r3, #128	@ 0x80
 8007660:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007662:	4b5a      	ldr	r3, [pc, #360]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f023 0203 	bic.w	r2, r3, #3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	4957      	ldr	r1, [pc, #348]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007670:	4313      	orrs	r3, r2
 8007672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007674:	f7fc fc8e 	bl	8003f94 <HAL_GetTick>
 8007678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800767a:	e00a      	b.n	8007692 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800767c:	f7fc fc8a 	bl	8003f94 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800768a:	4293      	cmp	r3, r2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e095      	b.n	80077be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007692:	4b4e      	ldr	r3, [pc, #312]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 020c 	and.w	r2, r3, #12
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d1eb      	bne.n	800767c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d023      	beq.n	80076f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076bc:	4b43      	ldr	r3, [pc, #268]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	4a42      	ldr	r2, [pc, #264]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 80076c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80076d4:	4b3d      	ldr	r3, [pc, #244]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076dc:	4a3b      	ldr	r2, [pc, #236]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 80076de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80076e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076e4:	4b39      	ldr	r3, [pc, #228]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	4936      	ldr	r1, [pc, #216]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	608b      	str	r3, [r1, #8]
 80076f6:	e008      	b.n	800770a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b80      	cmp	r3, #128	@ 0x80
 80076fc:	d105      	bne.n	800770a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80076fe:	4b33      	ldr	r3, [pc, #204]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	4a32      	ldr	r2, [pc, #200]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007704:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007708:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800770a:	4b2f      	ldr	r3, [pc, #188]	@ (80077c8 <HAL_RCC_ClockConfig+0x260>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d21d      	bcs.n	8007754 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007718:	4b2b      	ldr	r3, [pc, #172]	@ (80077c8 <HAL_RCC_ClockConfig+0x260>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f023 020f 	bic.w	r2, r3, #15
 8007720:	4929      	ldr	r1, [pc, #164]	@ (80077c8 <HAL_RCC_ClockConfig+0x260>)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	4313      	orrs	r3, r2
 8007726:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007728:	f7fc fc34 	bl	8003f94 <HAL_GetTick>
 800772c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800772e:	e00a      	b.n	8007746 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007730:	f7fc fc30 	bl	8003f94 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800773e:	4293      	cmp	r3, r2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e03b      	b.n	80077be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007746:	4b20      	ldr	r3, [pc, #128]	@ (80077c8 <HAL_RCC_ClockConfig+0x260>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d1ed      	bne.n	8007730 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	d008      	beq.n	8007772 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007760:	4b1a      	ldr	r3, [pc, #104]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	4917      	ldr	r1, [pc, #92]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 800776e:	4313      	orrs	r3, r2
 8007770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0308 	and.w	r3, r3, #8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800777e:	4b13      	ldr	r3, [pc, #76]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	490f      	ldr	r1, [pc, #60]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 800778e:	4313      	orrs	r3, r2
 8007790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007792:	f000 f825 	bl	80077e0 <HAL_RCC_GetSysClockFreq>
 8007796:	4602      	mov	r2, r0
 8007798:	4b0c      	ldr	r3, [pc, #48]	@ (80077cc <HAL_RCC_ClockConfig+0x264>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	091b      	lsrs	r3, r3, #4
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	490c      	ldr	r1, [pc, #48]	@ (80077d4 <HAL_RCC_ClockConfig+0x26c>)
 80077a4:	5ccb      	ldrb	r3, [r1, r3]
 80077a6:	f003 031f 	and.w	r3, r3, #31
 80077aa:	fa22 f303 	lsr.w	r3, r2, r3
 80077ae:	4a0a      	ldr	r2, [pc, #40]	@ (80077d8 <HAL_RCC_ClockConfig+0x270>)
 80077b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077b2:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <HAL_RCC_ClockConfig+0x274>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fa fed6 	bl	8002568 <HAL_InitTick>
 80077bc:	4603      	mov	r3, r0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40022000 	.word	0x40022000
 80077cc:	40021000 	.word	0x40021000
 80077d0:	04c4b400 	.word	0x04c4b400
 80077d4:	08016570 	.word	0x08016570
 80077d8:	20000008 	.word	0x20000008
 80077dc:	20000010 	.word	0x20000010

080077e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80077e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 030c 	and.w	r3, r3, #12
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d102      	bne.n	80077f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077f2:	4b2a      	ldr	r3, [pc, #168]	@ (800789c <HAL_RCC_GetSysClockFreq+0xbc>)
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	e047      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80077f8:	4b27      	ldr	r3, [pc, #156]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f003 030c 	and.w	r3, r3, #12
 8007800:	2b08      	cmp	r3, #8
 8007802:	d102      	bne.n	800780a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007804:	4b25      	ldr	r3, [pc, #148]	@ (800789c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007806:	613b      	str	r3, [r7, #16]
 8007808:	e03e      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800780a:	4b23      	ldr	r3, [pc, #140]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 030c 	and.w	r3, r3, #12
 8007812:	2b0c      	cmp	r3, #12
 8007814:	d136      	bne.n	8007884 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007816:	4b20      	ldr	r3, [pc, #128]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007820:	4b1d      	ldr	r3, [pc, #116]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	091b      	lsrs	r3, r3, #4
 8007826:	f003 030f 	and.w	r3, r3, #15
 800782a:	3301      	adds	r3, #1
 800782c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b03      	cmp	r3, #3
 8007832:	d10c      	bne.n	800784e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007834:	4a19      	ldr	r2, [pc, #100]	@ (800789c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	fbb2 f3f3 	udiv	r3, r2, r3
 800783c:	4a16      	ldr	r2, [pc, #88]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800783e:	68d2      	ldr	r2, [r2, #12]
 8007840:	0a12      	lsrs	r2, r2, #8
 8007842:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007846:	fb02 f303 	mul.w	r3, r2, r3
 800784a:	617b      	str	r3, [r7, #20]
      break;
 800784c:	e00c      	b.n	8007868 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800784e:	4a13      	ldr	r2, [pc, #76]	@ (800789c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	fbb2 f3f3 	udiv	r3, r2, r3
 8007856:	4a10      	ldr	r2, [pc, #64]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007858:	68d2      	ldr	r2, [r2, #12]
 800785a:	0a12      	lsrs	r2, r2, #8
 800785c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007860:	fb02 f303 	mul.w	r3, r2, r3
 8007864:	617b      	str	r3, [r7, #20]
      break;
 8007866:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007868:	4b0b      	ldr	r3, [pc, #44]	@ (8007898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	0e5b      	lsrs	r3, r3, #25
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	3301      	adds	r3, #1
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	e001      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007888:	693b      	ldr	r3, [r7, #16]
}
 800788a:	4618      	mov	r0, r3
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	40021000 	.word	0x40021000
 800789c:	00f42400 	.word	0x00f42400

080078a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078a4:	4b03      	ldr	r3, [pc, #12]	@ (80078b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078a6:	681b      	ldr	r3, [r3, #0]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20000008 	.word	0x20000008

080078b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80078bc:	f7ff fff0 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 80078c0:	4602      	mov	r2, r0
 80078c2:	4b06      	ldr	r3, [pc, #24]	@ (80078dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	4904      	ldr	r1, [pc, #16]	@ (80078e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078ce:	5ccb      	ldrb	r3, [r1, r3]
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078d8:	4618      	mov	r0, r3
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40021000 	.word	0x40021000
 80078e0:	08016580 	.word	0x08016580

080078e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80078e8:	f7ff ffda 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 80078ec:	4602      	mov	r2, r0
 80078ee:	4b06      	ldr	r3, [pc, #24]	@ (8007908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	0adb      	lsrs	r3, r3, #11
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	4904      	ldr	r1, [pc, #16]	@ (800790c <HAL_RCC_GetPCLK2Freq+0x28>)
 80078fa:	5ccb      	ldrb	r3, [r1, r3]
 80078fc:	f003 031f 	and.w	r3, r3, #31
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007904:	4618      	mov	r0, r3
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40021000 	.word	0x40021000
 800790c:	08016580 	.word	0x08016580

08007910 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	220f      	movs	r2, #15
 800791e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007920:	4b12      	ldr	r3, [pc, #72]	@ (800796c <HAL_RCC_GetClockConfig+0x5c>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 0203 	and.w	r2, r3, #3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800792c:	4b0f      	ldr	r3, [pc, #60]	@ (800796c <HAL_RCC_GetClockConfig+0x5c>)
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007938:	4b0c      	ldr	r3, [pc, #48]	@ (800796c <HAL_RCC_GetClockConfig+0x5c>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007944:	4b09      	ldr	r3, [pc, #36]	@ (800796c <HAL_RCC_GetClockConfig+0x5c>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	08db      	lsrs	r3, r3, #3
 800794a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007952:	4b07      	ldr	r3, [pc, #28]	@ (8007970 <HAL_RCC_GetClockConfig+0x60>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 020f 	and.w	r2, r3, #15
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	601a      	str	r2, [r3, #0]
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40021000 	.word	0x40021000
 8007970:	40022000 	.word	0x40022000

08007974 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800797a:	4b1e      	ldr	r3, [pc, #120]	@ (80079f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007984:	4b1b      	ldr	r3, [pc, #108]	@ (80079f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	091b      	lsrs	r3, r3, #4
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	3301      	adds	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d10c      	bne.n	80079b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007998:	4a17      	ldr	r2, [pc, #92]	@ (80079f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a0:	4a14      	ldr	r2, [pc, #80]	@ (80079f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079a2:	68d2      	ldr	r2, [r2, #12]
 80079a4:	0a12      	lsrs	r2, r2, #8
 80079a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	617b      	str	r3, [r7, #20]
    break;
 80079b0:	e00c      	b.n	80079cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079b2:	4a11      	ldr	r2, [pc, #68]	@ (80079f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ba:	4a0e      	ldr	r2, [pc, #56]	@ (80079f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079bc:	68d2      	ldr	r2, [r2, #12]
 80079be:	0a12      	lsrs	r2, r2, #8
 80079c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]
    break;
 80079ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079cc:	4b09      	ldr	r3, [pc, #36]	@ (80079f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	0e5b      	lsrs	r3, r3, #25
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	3301      	adds	r3, #1
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80079e6:	687b      	ldr	r3, [r7, #4]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	40021000 	.word	0x40021000
 80079f8:	00f42400 	.word	0x00f42400

080079fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a04:	2300      	movs	r3, #0
 8007a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a08:	2300      	movs	r3, #0
 8007a0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 8098 	beq.w	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a1e:	4b43      	ldr	r3, [pc, #268]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10d      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a2a:	4b40      	ldr	r3, [pc, #256]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a36:	4b3d      	ldr	r3, [pc, #244]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a3e:	60bb      	str	r3, [r7, #8]
 8007a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a42:	2301      	movs	r3, #1
 8007a44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a46:	4b3a      	ldr	r3, [pc, #232]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a39      	ldr	r2, [pc, #228]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a52:	f7fc fa9f 	bl	8003f94 <HAL_GetTick>
 8007a56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a58:	e009      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a5a:	f7fc fa9b 	bl	8003f94 <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d902      	bls.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	74fb      	strb	r3, [r7, #19]
        break;
 8007a6c:	e005      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a6e:	4b30      	ldr	r3, [pc, #192]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0ef      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007a7a:	7cfb      	ldrb	r3, [r7, #19]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d159      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a80:	4b2a      	ldr	r3, [pc, #168]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01e      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d019      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a9c:	4b23      	ldr	r3, [pc, #140]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007aa8:	4b20      	ldr	r3, [pc, #128]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aae:	4a1f      	ldr	r2, [pc, #124]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007abe:	4a1b      	ldr	r2, [pc, #108]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ac8:	4a18      	ldr	r2, [pc, #96]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d016      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ada:	f7fc fa5b 	bl	8003f94 <HAL_GetTick>
 8007ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ae0:	e00b      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae2:	f7fc fa57 	bl	8003f94 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d902      	bls.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	74fb      	strb	r3, [r7, #19]
            break;
 8007af8:	e006      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007afa:	4b0c      	ldr	r3, [pc, #48]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0ec      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b08:	7cfb      	ldrb	r3, [r7, #19]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10b      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b0e:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	4903      	ldr	r1, [pc, #12]	@ (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007b24:	e008      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b26:	7cfb      	ldrb	r3, [r7, #19]
 8007b28:	74bb      	strb	r3, [r7, #18]
 8007b2a:	e005      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b34:	7cfb      	ldrb	r3, [r7, #19]
 8007b36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b38:	7c7b      	ldrb	r3, [r7, #17]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d105      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b3e:	4ba6      	ldr	r3, [pc, #664]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b42:	4aa5      	ldr	r2, [pc, #660]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b56:	4ba0      	ldr	r3, [pc, #640]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5c:	f023 0203 	bic.w	r2, r3, #3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	499c      	ldr	r1, [pc, #624]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b78:	4b97      	ldr	r3, [pc, #604]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b7e:	f023 020c 	bic.w	r2, r3, #12
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	4994      	ldr	r1, [pc, #592]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0304 	and.w	r3, r3, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	498b      	ldr	r1, [pc, #556]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bbc:	4b86      	ldr	r3, [pc, #536]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	4983      	ldr	r1, [pc, #524]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bde:	4b7e      	ldr	r3, [pc, #504]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	497a      	ldr	r1, [pc, #488]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c00:	4b75      	ldr	r3, [pc, #468]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	4972      	ldr	r1, [pc, #456]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c22:	4b6d      	ldr	r3, [pc, #436]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	4969      	ldr	r1, [pc, #420]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c44:	4b64      	ldr	r3, [pc, #400]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	4961      	ldr	r1, [pc, #388]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c66:	4b5c      	ldr	r3, [pc, #368]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c74:	4958      	ldr	r1, [pc, #352]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d015      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c88:	4b53      	ldr	r3, [pc, #332]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c96:	4950      	ldr	r1, [pc, #320]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ca6:	d105      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	4a4a      	ldr	r2, [pc, #296]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cb2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d015      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cc0:	4b45      	ldr	r3, [pc, #276]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cce:	4942      	ldr	r1, [pc, #264]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cde:	d105      	bne.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cea:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d015      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cf8:	4b37      	ldr	r3, [pc, #220]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d06:	4934      	ldr	r1, [pc, #208]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d16:	d105      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d18:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d015      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d30:	4b29      	ldr	r3, [pc, #164]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d3e:	4926      	ldr	r1, [pc, #152]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d4e:	d105      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d50:	4b21      	ldr	r3, [pc, #132]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	4a20      	ldr	r2, [pc, #128]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d015      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d68:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d76:	4918      	ldr	r1, [pc, #96]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d86:	d105      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d88:	4b13      	ldr	r3, [pc, #76]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	4a12      	ldr	r2, [pc, #72]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d015      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007da0:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dae:	490a      	ldr	r1, [pc, #40]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dbe:	d105      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007dc0:	4b05      	ldr	r3, [pc, #20]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	4a04      	ldr	r2, [pc, #16]	@ (8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007dcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40021000 	.word	0x40021000

08007ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e09d      	b.n	8007f2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d108      	bne.n	8007e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dfe:	d009      	beq.n	8007e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	61da      	str	r2, [r3, #28]
 8007e06:	e005      	b.n	8007e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fa fb2e 	bl	8002490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e54:	d902      	bls.n	8007e5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	e002      	b.n	8007e62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e6a:	d007      	beq.n	8007e7c <HAL_SPI_Init+0xa0>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e74:	d002      	beq.n	8007e7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ebe:	ea42 0103 	orr.w	r1, r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	0c1b      	lsrs	r3, r3, #16
 8007ed8:	f003 0204 	and.w	r2, r3, #4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ef8:	ea42 0103 	orr.w	r1, r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b08a      	sub	sp, #40	@ 0x28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f40:	2301      	movs	r3, #1
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f44:	f7fc f826 	bl	8003f94 <HAL_GetTick>
 8007f48:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f50:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007f58:	887b      	ldrh	r3, [r7, #2]
 8007f5a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007f5c:	887b      	ldrh	r3, [r7, #2]
 8007f5e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f60:	7ffb      	ldrb	r3, [r7, #31]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d00c      	beq.n	8007f80 <HAL_SPI_TransmitReceive+0x4e>
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f6c:	d106      	bne.n	8007f7c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d102      	bne.n	8007f7c <HAL_SPI_TransmitReceive+0x4a>
 8007f76:	7ffb      	ldrb	r3, [r7, #31]
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d001      	beq.n	8007f80 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e1f3      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x60>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <HAL_SPI_TransmitReceive+0x60>
 8007f8c:	887b      	ldrh	r3, [r7, #2]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e1e8      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_SPI_TransmitReceive+0x72>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e1e1      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d003      	beq.n	8007fc0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2205      	movs	r2, #5
 8007fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	887a      	ldrh	r2, [r7, #2]
 8007fd0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	887a      	ldrh	r2, [r7, #2]
 8007fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	887a      	ldrh	r2, [r7, #2]
 8007fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	887a      	ldrh	r2, [r7, #2]
 8007fec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008002:	d802      	bhi.n	800800a <HAL_SPI_TransmitReceive+0xd8>
 8008004:	8abb      	ldrh	r3, [r7, #20]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d908      	bls.n	800801c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008018:	605a      	str	r2, [r3, #4]
 800801a:	e007      	b.n	800802c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008036:	2b40      	cmp	r3, #64	@ 0x40
 8008038:	d007      	beq.n	800804a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008052:	f240 8083 	bls.w	800815c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_SPI_TransmitReceive+0x132>
 800805e:	8afb      	ldrh	r3, [r7, #22]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d16f      	bne.n	8008144 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	881a      	ldrh	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008088:	e05c      	b.n	8008144 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b02      	cmp	r3, #2
 8008096:	d11b      	bne.n	80080d0 <HAL_SPI_TransmitReceive+0x19e>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800809c:	b29b      	uxth	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d016      	beq.n	80080d0 <HAL_SPI_TransmitReceive+0x19e>
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d113      	bne.n	80080d0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ac:	881a      	ldrh	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	1c9a      	adds	r2, r3, #2
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d11c      	bne.n	8008118 <HAL_SPI_TransmitReceive+0x1e6>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d016      	beq.n	8008118 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f4:	b292      	uxth	r2, r2
 80080f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fc:	1c9a      	adds	r2, r3, #2
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008114:	2301      	movs	r3, #1
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008118:	f7fb ff3c 	bl	8003f94 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008124:	429a      	cmp	r2, r3
 8008126:	d80d      	bhi.n	8008144 <HAL_SPI_TransmitReceive+0x212>
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812e:	d009      	beq.n	8008144 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e111      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d19d      	bne.n	800808a <HAL_SPI_TransmitReceive+0x158>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d197      	bne.n	800808a <HAL_SPI_TransmitReceive+0x158>
 800815a:	e0e5      	b.n	8008328 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_SPI_TransmitReceive+0x23a>
 8008164:	8afb      	ldrh	r3, [r7, #22]
 8008166:	2b01      	cmp	r3, #1
 8008168:	f040 80d1 	bne.w	800830e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b01      	cmp	r3, #1
 8008174:	d912      	bls.n	800819c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817a:	881a      	ldrh	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008186:	1c9a      	adds	r2, r3, #2
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008190:	b29b      	uxth	r3, r3
 8008192:	3b02      	subs	r3, #2
 8008194:	b29a      	uxth	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800819a:	e0b8      	b.n	800830e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081c2:	e0a4      	b.n	800830e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d134      	bne.n	800823c <HAL_SPI_TransmitReceive+0x30a>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d02f      	beq.n	800823c <HAL_SPI_TransmitReceive+0x30a>
 80081dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d12c      	bne.n	800823c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d912      	bls.n	8008212 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f0:	881a      	ldrh	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fc:	1c9a      	adds	r2, r3, #2
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008206:	b29b      	uxth	r3, r3
 8008208:	3b02      	subs	r3, #2
 800820a:	b29a      	uxth	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008210:	e012      	b.n	8008238 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	330c      	adds	r3, #12
 800821c:	7812      	ldrb	r2, [r2, #0]
 800821e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b01      	subs	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b01      	cmp	r3, #1
 8008248:	d148      	bne.n	80082dc <HAL_SPI_TransmitReceive+0x3aa>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008250:	b29b      	uxth	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d042      	beq.n	80082dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b01      	cmp	r3, #1
 8008260:	d923      	bls.n	80082aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826c:	b292      	uxth	r2, r2
 800826e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008274:	1c9a      	adds	r2, r3, #2
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b02      	subs	r3, #2
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008292:	b29b      	uxth	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	d81f      	bhi.n	80082d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082a6:	605a      	str	r2, [r3, #4]
 80082a8:	e016      	b.n	80082d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f103 020c 	add.w	r2, r3, #12
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	7812      	ldrb	r2, [r2, #0]
 80082b8:	b2d2      	uxtb	r2, r2
 80082ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	3b01      	subs	r3, #1
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082d8:	2301      	movs	r3, #1
 80082da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80082dc:	f7fb fe5a 	bl	8003f94 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d803      	bhi.n	80082f4 <HAL_SPI_TransmitReceive+0x3c2>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f2:	d102      	bne.n	80082fa <HAL_SPI_TransmitReceive+0x3c8>
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e02c      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	f47f af55 	bne.w	80081c4 <HAL_SPI_TransmitReceive+0x292>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	f47f af4e 	bne.w	80081c4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008328:	6a3a      	ldr	r2, [r7, #32]
 800832a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f93d 	bl	80085ac <SPI_EndRxTxTransaction>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d008      	beq.n	800834a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e00e      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008366:	2300      	movs	r3, #0
  }
}
 8008368:	4618      	mov	r0, r3
 800836a:	3728      	adds	r7, #40	@ 0x28
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	4613      	mov	r3, r2
 800837e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008380:	f7fb fe08 	bl	8003f94 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008388:	1a9b      	subs	r3, r3, r2
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	4413      	add	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008390:	f7fb fe00 	bl	8003f94 <HAL_GetTick>
 8008394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008396:	4b39      	ldr	r3, [pc, #228]	@ (800847c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	015b      	lsls	r3, r3, #5
 800839c:	0d1b      	lsrs	r3, r3, #20
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	fb02 f303 	mul.w	r3, r2, r3
 80083a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083a6:	e054      	b.n	8008452 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ae:	d050      	beq.n	8008452 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083b0:	f7fb fdf0 	bl	8003f94 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d902      	bls.n	80083c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d13d      	bne.n	8008442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083de:	d111      	bne.n	8008404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083e8:	d004      	beq.n	80083f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f2:	d107      	bne.n	8008404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800840c:	d10f      	bne.n	800842e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800842c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e017      	b.n	8008472 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	3b01      	subs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689a      	ldr	r2, [r3, #8]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4013      	ands	r3, r2
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	429a      	cmp	r2, r3
 8008460:	bf0c      	ite	eq
 8008462:	2301      	moveq	r3, #1
 8008464:	2300      	movne	r3, #0
 8008466:	b2db      	uxtb	r3, r3
 8008468:	461a      	mov	r2, r3
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	429a      	cmp	r2, r3
 800846e:	d19b      	bne.n	80083a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3720      	adds	r7, #32
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20000008 	.word	0x20000008

08008480 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08a      	sub	sp, #40	@ 0x28
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
 800848c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008492:	f7fb fd7f 	bl	8003f94 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	1a9b      	subs	r3, r3, r2
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	4413      	add	r3, r2
 80084a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80084a2:	f7fb fd77 	bl	8003f94 <HAL_GetTick>
 80084a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084b0:	4b3d      	ldr	r3, [pc, #244]	@ (80085a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	00da      	lsls	r2, r3, #3
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	0d1b      	lsrs	r3, r3, #20
 80084c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c2:	fb02 f303 	mul.w	r3, r2, r3
 80084c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80084c8:	e060      	b.n	800858c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80084d0:	d107      	bne.n	80084e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d104      	bne.n	80084e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e8:	d050      	beq.n	800858c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084ea:	f7fb fd53 	bl	8003f94 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d902      	bls.n	8008500 <SPI_WaitFifoStateUntilTimeout+0x80>
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d13d      	bne.n	800857c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800850e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008518:	d111      	bne.n	800853e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008522:	d004      	beq.n	800852e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800852c:	d107      	bne.n	800853e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800853c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008546:	d10f      	bne.n	8008568 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008566:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e010      	b.n	800859e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	3b01      	subs	r3, #1
 800858a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4013      	ands	r3, r2
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	429a      	cmp	r2, r3
 800859a:	d196      	bne.n	80084ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3728      	adds	r7, #40	@ 0x28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000008 	.word	0x20000008

080085ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2200      	movs	r2, #0
 80085c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f7ff ff5b 	bl	8008480 <SPI_WaitFifoStateUntilTimeout>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085d4:	f043 0220 	orr.w	r2, r3, #32
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e027      	b.n	8008630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2200      	movs	r2, #0
 80085e8:	2180      	movs	r1, #128	@ 0x80
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff fec0 	bl	8008370 <SPI_WaitFlagStateUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d007      	beq.n	8008606 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085fa:	f043 0220 	orr.w	r2, r3, #32
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e014      	b.n	8008630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2200      	movs	r2, #0
 800860e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff ff34 	bl	8008480 <SPI_WaitFifoStateUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e000      	b.n	8008630 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e049      	b.n	80086de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7fa fce2 	bl	8003028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3304      	adds	r3, #4
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f001 f874 	bl	8009764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d001      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e04a      	b.n	8008796 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0201 	orr.w	r2, r2, #1
 8008716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a21      	ldr	r2, [pc, #132]	@ (80087a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d018      	beq.n	8008754 <HAL_TIM_Base_Start_IT+0x6c>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800872a:	d013      	beq.n	8008754 <HAL_TIM_Base_Start_IT+0x6c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a1d      	ldr	r2, [pc, #116]	@ (80087a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d00e      	beq.n	8008754 <HAL_TIM_Base_Start_IT+0x6c>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a1c      	ldr	r2, [pc, #112]	@ (80087ac <HAL_TIM_Base_Start_IT+0xc4>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d009      	beq.n	8008754 <HAL_TIM_Base_Start_IT+0x6c>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a1a      	ldr	r2, [pc, #104]	@ (80087b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d004      	beq.n	8008754 <HAL_TIM_Base_Start_IT+0x6c>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a19      	ldr	r2, [pc, #100]	@ (80087b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d115      	bne.n	8008780 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	4b17      	ldr	r3, [pc, #92]	@ (80087b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800875c:	4013      	ands	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b06      	cmp	r3, #6
 8008764:	d015      	beq.n	8008792 <HAL_TIM_Base_Start_IT+0xaa>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800876c:	d011      	beq.n	8008792 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0201 	orr.w	r2, r2, #1
 800877c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877e:	e008      	b.n	8008792 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e000      	b.n	8008794 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008792:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40012c00 	.word	0x40012c00
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40013400 	.word	0x40013400
 80087b4:	40014000 	.word	0x40014000
 80087b8:	00010007 	.word	0x00010007

080087bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e049      	b.n	8008862 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d106      	bne.n	80087e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f841 	bl	800886a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f000 ffb2 	bl	8009764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d109      	bne.n	80088ac <HAL_TIM_PWM_Start_DMA+0x2c>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	bf0c      	ite	eq
 80088a4:	2301      	moveq	r3, #1
 80088a6:	2300      	movne	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	e03c      	b.n	8008926 <HAL_TIM_PWM_Start_DMA+0xa6>
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d109      	bne.n	80088c6 <HAL_TIM_PWM_Start_DMA+0x46>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	bf0c      	ite	eq
 80088be:	2301      	moveq	r3, #1
 80088c0:	2300      	movne	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	e02f      	b.n	8008926 <HAL_TIM_PWM_Start_DMA+0xa6>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d109      	bne.n	80088e0 <HAL_TIM_PWM_Start_DMA+0x60>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	bf0c      	ite	eq
 80088d8:	2301      	moveq	r3, #1
 80088da:	2300      	movne	r3, #0
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	e022      	b.n	8008926 <HAL_TIM_PWM_Start_DMA+0xa6>
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b0c      	cmp	r3, #12
 80088e4:	d109      	bne.n	80088fa <HAL_TIM_PWM_Start_DMA+0x7a>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	bf0c      	ite	eq
 80088f2:	2301      	moveq	r3, #1
 80088f4:	2300      	movne	r3, #0
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	e015      	b.n	8008926 <HAL_TIM_PWM_Start_DMA+0xa6>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b10      	cmp	r3, #16
 80088fe:	d109      	bne.n	8008914 <HAL_TIM_PWM_Start_DMA+0x94>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	bf0c      	ite	eq
 800890c:	2301      	moveq	r3, #1
 800890e:	2300      	movne	r3, #0
 8008910:	b2db      	uxtb	r3, r3
 8008912:	e008      	b.n	8008926 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	bf0c      	ite	eq
 8008920:	2301      	moveq	r3, #1
 8008922:	2300      	movne	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800892a:	2302      	movs	r3, #2
 800892c:	e1a6      	b.n	8008c7c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d109      	bne.n	8008948 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	bf0c      	ite	eq
 8008940:	2301      	moveq	r3, #1
 8008942:	2300      	movne	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	e03c      	b.n	80089c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b04      	cmp	r3, #4
 800894c:	d109      	bne.n	8008962 <HAL_TIM_PWM_Start_DMA+0xe2>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b01      	cmp	r3, #1
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	e02f      	b.n	80089c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2b08      	cmp	r3, #8
 8008966:	d109      	bne.n	800897c <HAL_TIM_PWM_Start_DMA+0xfc>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	bf0c      	ite	eq
 8008974:	2301      	moveq	r3, #1
 8008976:	2300      	movne	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	e022      	b.n	80089c2 <HAL_TIM_PWM_Start_DMA+0x142>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b0c      	cmp	r3, #12
 8008980:	d109      	bne.n	8008996 <HAL_TIM_PWM_Start_DMA+0x116>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b01      	cmp	r3, #1
 800898c:	bf0c      	ite	eq
 800898e:	2301      	moveq	r3, #1
 8008990:	2300      	movne	r3, #0
 8008992:	b2db      	uxtb	r3, r3
 8008994:	e015      	b.n	80089c2 <HAL_TIM_PWM_Start_DMA+0x142>
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b10      	cmp	r3, #16
 800899a:	d109      	bne.n	80089b0 <HAL_TIM_PWM_Start_DMA+0x130>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	bf0c      	ite	eq
 80089a8:	2301      	moveq	r3, #1
 80089aa:	2300      	movne	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	e008      	b.n	80089c2 <HAL_TIM_PWM_Start_DMA+0x142>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	bf0c      	ite	eq
 80089bc:	2301      	moveq	r3, #1
 80089be:	2300      	movne	r3, #0
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d034      	beq.n	8008a30 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <HAL_TIM_PWM_Start_DMA+0x152>
 80089cc:	887b      	ldrh	r3, [r7, #2]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e152      	b.n	8008c7c <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d104      	bne.n	80089e6 <HAL_TIM_PWM_Start_DMA+0x166>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089e4:	e026      	b.n	8008a34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b04      	cmp	r3, #4
 80089ea:	d104      	bne.n	80089f6 <HAL_TIM_PWM_Start_DMA+0x176>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2202      	movs	r2, #2
 80089f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089f4:	e01e      	b.n	8008a34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d104      	bne.n	8008a06 <HAL_TIM_PWM_Start_DMA+0x186>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2202      	movs	r2, #2
 8008a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a04:	e016      	b.n	8008a34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b0c      	cmp	r3, #12
 8008a0a:	d104      	bne.n	8008a16 <HAL_TIM_PWM_Start_DMA+0x196>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a14:	e00e      	b.n	8008a34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b10      	cmp	r3, #16
 8008a1a:	d104      	bne.n	8008a26 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a24:	e006      	b.n	8008a34 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a2e:	e001      	b.n	8008a34 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e123      	b.n	8008c7c <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2b0c      	cmp	r3, #12
 8008a38:	f200 80ae 	bhi.w	8008b98 <HAL_TIM_PWM_Start_DMA+0x318>
 8008a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a44 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a42:	bf00      	nop
 8008a44:	08008a79 	.word	0x08008a79
 8008a48:	08008b99 	.word	0x08008b99
 8008a4c:	08008b99 	.word	0x08008b99
 8008a50:	08008b99 	.word	0x08008b99
 8008a54:	08008ac1 	.word	0x08008ac1
 8008a58:	08008b99 	.word	0x08008b99
 8008a5c:	08008b99 	.word	0x08008b99
 8008a60:	08008b99 	.word	0x08008b99
 8008a64:	08008b09 	.word	0x08008b09
 8008a68:	08008b99 	.word	0x08008b99
 8008a6c:	08008b99 	.word	0x08008b99
 8008a70:	08008b99 	.word	0x08008b99
 8008a74:	08008b51 	.word	0x08008b51
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7c:	4a81      	ldr	r2, [pc, #516]	@ (8008c84 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	4a80      	ldr	r2, [pc, #512]	@ (8008c88 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008a86:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8c:	4a7f      	ldr	r2, [pc, #508]	@ (8008c8c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008a8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3334      	adds	r3, #52	@ 0x34
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	887b      	ldrh	r3, [r7, #2]
 8008aa0:	f7fd f8e4 	bl	8005c6c <HAL_DMA_Start_IT>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e0e6      	b.n	8008c7c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008abc:	60da      	str	r2, [r3, #12]
      break;
 8008abe:	e06e      	b.n	8008b9e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac4:	4a6f      	ldr	r2, [pc, #444]	@ (8008c84 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008acc:	4a6e      	ldr	r2, [pc, #440]	@ (8008c88 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008ace:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad4:	4a6d      	ldr	r2, [pc, #436]	@ (8008c8c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008ad6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3338      	adds	r3, #56	@ 0x38
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	887b      	ldrh	r3, [r7, #2]
 8008ae8:	f7fd f8c0 	bl	8005c6c <HAL_DMA_Start_IT>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e0c2      	b.n	8008c7c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b04:	60da      	str	r2, [r3, #12]
      break;
 8008b06:	e04a      	b.n	8008b9e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b0c:	4a5d      	ldr	r2, [pc, #372]	@ (8008c84 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b14:	4a5c      	ldr	r2, [pc, #368]	@ (8008c88 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008b16:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1c:	4a5b      	ldr	r2, [pc, #364]	@ (8008c8c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008b1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	333c      	adds	r3, #60	@ 0x3c
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	887b      	ldrh	r3, [r7, #2]
 8008b30:	f7fd f89c 	bl	8005c6c <HAL_DMA_Start_IT>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e09e      	b.n	8008c7c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b4c:	60da      	str	r2, [r3, #12]
      break;
 8008b4e:	e026      	b.n	8008b9e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b54:	4a4b      	ldr	r2, [pc, #300]	@ (8008c84 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008b56:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8008c88 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008b5e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b64:	4a49      	ldr	r2, [pc, #292]	@ (8008c8c <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008b66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3340      	adds	r3, #64	@ 0x40
 8008b74:	461a      	mov	r2, r3
 8008b76:	887b      	ldrh	r3, [r7, #2]
 8008b78:	f7fd f878 	bl	8005c6c <HAL_DMA_Start_IT>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e07a      	b.n	8008c7c <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68da      	ldr	r2, [r3, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b94:	60da      	str	r2, [r3, #12]
      break;
 8008b96:	e002      	b.n	8008b9e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d16a      	bne.n	8008c7a <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f001 fa07 	bl	8009fc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a36      	ldr	r2, [pc, #216]	@ (8008c90 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d013      	beq.n	8008be4 <HAL_TIM_PWM_Start_DMA+0x364>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a34      	ldr	r2, [pc, #208]	@ (8008c94 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00e      	beq.n	8008be4 <HAL_TIM_PWM_Start_DMA+0x364>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a33      	ldr	r2, [pc, #204]	@ (8008c98 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d009      	beq.n	8008be4 <HAL_TIM_PWM_Start_DMA+0x364>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a31      	ldr	r2, [pc, #196]	@ (8008c9c <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <HAL_TIM_PWM_Start_DMA+0x364>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a30      	ldr	r2, [pc, #192]	@ (8008ca0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d101      	bne.n	8008be8 <HAL_TIM_PWM_Start_DMA+0x368>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e000      	b.n	8008bea <HAL_TIM_PWM_Start_DMA+0x36a>
 8008be8:	2300      	movs	r3, #0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d007      	beq.n	8008bfe <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a23      	ldr	r2, [pc, #140]	@ (8008c90 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d018      	beq.n	8008c3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c10:	d013      	beq.n	8008c3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a23      	ldr	r2, [pc, #140]	@ (8008ca4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00e      	beq.n	8008c3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a21      	ldr	r2, [pc, #132]	@ (8008ca8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d009      	beq.n	8008c3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8008c94 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d004      	beq.n	8008c3a <HAL_TIM_PWM_Start_DMA+0x3ba>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a18      	ldr	r2, [pc, #96]	@ (8008c98 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d115      	bne.n	8008c66 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	4b1a      	ldr	r3, [pc, #104]	@ (8008cac <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008c42:	4013      	ands	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b06      	cmp	r3, #6
 8008c4a:	d015      	beq.n	8008c78 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c52:	d011      	beq.n	8008c78 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f042 0201 	orr.w	r2, r2, #1
 8008c62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c64:	e008      	b.n	8008c78 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 0201 	orr.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	e000      	b.n	8008c7a <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c78:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	08009653 	.word	0x08009653
 8008c88:	080096fb 	.word	0x080096fb
 8008c8c:	080095c1 	.word	0x080095c1
 8008c90:	40012c00 	.word	0x40012c00
 8008c94:	40013400 	.word	0x40013400
 8008c98:	40014000 	.word	0x40014000
 8008c9c:	40014400 	.word	0x40014400
 8008ca0:	40014800 	.word	0x40014800
 8008ca4:	40000400 	.word	0x40000400
 8008ca8:	40000800 	.word	0x40000800
 8008cac:	00010007 	.word	0x00010007

08008cb0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b0c      	cmp	r3, #12
 8008cc2:	d855      	bhi.n	8008d70 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ccc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d71 	.word	0x08008d71
 8008cd4:	08008d71 	.word	0x08008d71
 8008cd8:	08008d71 	.word	0x08008d71
 8008cdc:	08008d1d 	.word	0x08008d1d
 8008ce0:	08008d71 	.word	0x08008d71
 8008ce4:	08008d71 	.word	0x08008d71
 8008ce8:	08008d71 	.word	0x08008d71
 8008cec:	08008d39 	.word	0x08008d39
 8008cf0:	08008d71 	.word	0x08008d71
 8008cf4:	08008d71 	.word	0x08008d71
 8008cf8:	08008d71 	.word	0x08008d71
 8008cfc:	08008d55 	.word	0x08008d55
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008d0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fd f87d 	bl	8005e14 <HAL_DMA_Abort_IT>
      break;
 8008d1a:	e02c      	b.n	8008d76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fd f86f 	bl	8005e14 <HAL_DMA_Abort_IT>
      break;
 8008d36:	e01e      	b.n	8008d76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fd f861 	bl	8005e14 <HAL_DMA_Abort_IT>
      break;
 8008d52:	e010      	b.n	8008d76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008d62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fd f853 	bl	8005e14 <HAL_DMA_Abort_IT>
      break;
 8008d6e:	e002      	b.n	8008d76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	73fb      	strb	r3, [r7, #15]
      break;
 8008d74:	bf00      	nop
  }

  if (status == HAL_OK)
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f040 8081 	bne.w	8008e80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2200      	movs	r2, #0
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 f91a 	bl	8009fc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a3e      	ldr	r2, [pc, #248]	@ (8008e8c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d013      	beq.n	8008dbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a3d      	ldr	r2, [pc, #244]	@ (8008e90 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00e      	beq.n	8008dbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a3b      	ldr	r2, [pc, #236]	@ (8008e94 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d009      	beq.n	8008dbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a3a      	ldr	r2, [pc, #232]	@ (8008e98 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d004      	beq.n	8008dbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a38      	ldr	r2, [pc, #224]	@ (8008e9c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d101      	bne.n	8008dc2 <HAL_TIM_PWM_Stop_DMA+0x112>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d017      	beq.n	8008df8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6a1a      	ldr	r2, [r3, #32]
 8008dce:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10f      	bne.n	8008df8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6a1a      	ldr	r2, [r3, #32]
 8008dde:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008de2:	4013      	ands	r3, r2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d107      	bne.n	8008df8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008df6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6a1a      	ldr	r2, [r3, #32]
 8008dfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008e02:	4013      	ands	r3, r2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10f      	bne.n	8008e28 <HAL_TIM_PWM_Stop_DMA+0x178>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6a1a      	ldr	r2, [r3, #32]
 8008e0e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008e12:	4013      	ands	r3, r2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d107      	bne.n	8008e28 <HAL_TIM_PWM_Stop_DMA+0x178>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0201 	bic.w	r2, r2, #1
 8008e26:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d104      	bne.n	8008e38 <HAL_TIM_PWM_Stop_DMA+0x188>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e36:	e023      	b.n	8008e80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d104      	bne.n	8008e48 <HAL_TIM_PWM_Stop_DMA+0x198>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e46:	e01b      	b.n	8008e80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d104      	bne.n	8008e58 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e56:	e013      	b.n	8008e80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2b0c      	cmp	r3, #12
 8008e5c:	d104      	bne.n	8008e68 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e66:	e00b      	b.n	8008e80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2b10      	cmp	r3, #16
 8008e6c:	d104      	bne.n	8008e78 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e76:	e003      	b.n	8008e80 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	40012c00 	.word	0x40012c00
 8008e90:	40013400 	.word	0x40013400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d020      	beq.n	8008f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01b      	beq.n	8008f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f06f 0202 	mvn.w	r2, #2
 8008ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fb40 	bl	8009570 <HAL_TIM_IC_CaptureCallback>
 8008ef0:	e005      	b.n	8008efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fb32 	bl	800955c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7f9 f8ed 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d020      	beq.n	8008f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01b      	beq.n	8008f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f06f 0204 	mvn.w	r2, #4
 8008f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fb1a 	bl	8009570 <HAL_TIM_IC_CaptureCallback>
 8008f3c:	e005      	b.n	8008f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fb0c 	bl	800955c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7f9 f8c7 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f003 0308 	and.w	r3, r3, #8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d020      	beq.n	8008f9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f003 0308 	and.w	r3, r3, #8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d01b      	beq.n	8008f9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0208 	mvn.w	r2, #8
 8008f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2204      	movs	r2, #4
 8008f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 faf4 	bl	8009570 <HAL_TIM_IC_CaptureCallback>
 8008f88:	e005      	b.n	8008f96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fae6 	bl	800955c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7f9 f8a1 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f003 0310 	and.w	r3, r3, #16
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d020      	beq.n	8008fe8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01b      	beq.n	8008fe8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f06f 0210 	mvn.w	r2, #16
 8008fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 face 	bl	8009570 <HAL_TIM_IC_CaptureCallback>
 8008fd4:	e005      	b.n	8008fe2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fac0 	bl	800955c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7f9 f87b 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00c      	beq.n	800900c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d007      	beq.n	800900c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f06f 0201 	mvn.w	r2, #1
 8009004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7f9 f970 	bl	80022ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009012:	2b00      	cmp	r3, #0
 8009014:	d104      	bne.n	8009020 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00c      	beq.n	800903a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009026:	2b00      	cmp	r3, #0
 8009028:	d007      	beq.n	800903a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f001 f875 	bl	800a124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00c      	beq.n	800905e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d007      	beq.n	800905e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 f86d 	bl	800a138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00c      	beq.n	8009082 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800907a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fa8b 	bl	8009598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f003 0320 	and.w	r3, r3, #32
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00c      	beq.n	80090a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b00      	cmp	r3, #0
 8009094:	d007      	beq.n	80090a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f06f 0220 	mvn.w	r2, #32
 800909e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f001 f835 	bl	800a110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00c      	beq.n	80090ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80090c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 f841 	bl	800a14c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00c      	beq.n	80090ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80090e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 f839 	bl	800a160 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00c      	beq.n	8009112 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800910a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 f831 	bl	800a174 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00c      	beq.n	8009136 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800912e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 f829 	bl	800a188 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800915a:	2302      	movs	r3, #2
 800915c:	e0ff      	b.n	800935e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b14      	cmp	r3, #20
 800916a:	f200 80f0 	bhi.w	800934e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800916e:	a201      	add	r2, pc, #4	@ (adr r2, 8009174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	080091c9 	.word	0x080091c9
 8009178:	0800934f 	.word	0x0800934f
 800917c:	0800934f 	.word	0x0800934f
 8009180:	0800934f 	.word	0x0800934f
 8009184:	08009209 	.word	0x08009209
 8009188:	0800934f 	.word	0x0800934f
 800918c:	0800934f 	.word	0x0800934f
 8009190:	0800934f 	.word	0x0800934f
 8009194:	0800924b 	.word	0x0800924b
 8009198:	0800934f 	.word	0x0800934f
 800919c:	0800934f 	.word	0x0800934f
 80091a0:	0800934f 	.word	0x0800934f
 80091a4:	0800928b 	.word	0x0800928b
 80091a8:	0800934f 	.word	0x0800934f
 80091ac:	0800934f 	.word	0x0800934f
 80091b0:	0800934f 	.word	0x0800934f
 80091b4:	080092cd 	.word	0x080092cd
 80091b8:	0800934f 	.word	0x0800934f
 80091bc:	0800934f 	.word	0x0800934f
 80091c0:	0800934f 	.word	0x0800934f
 80091c4:	0800930d 	.word	0x0800930d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fb64 	bl	800989c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0208 	orr.w	r2, r2, #8
 80091e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0204 	bic.w	r2, r2, #4
 80091f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6999      	ldr	r1, [r3, #24]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	619a      	str	r2, [r3, #24]
      break;
 8009206:	e0a5      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fbd4 	bl	80099bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	699a      	ldr	r2, [r3, #24]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6999      	ldr	r1, [r3, #24]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	021a      	lsls	r2, r3, #8
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	619a      	str	r2, [r3, #24]
      break;
 8009248:	e084      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68b9      	ldr	r1, [r7, #8]
 8009250:	4618      	mov	r0, r3
 8009252:	f000 fc3d 	bl	8009ad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69da      	ldr	r2, [r3, #28]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f042 0208 	orr.w	r2, r2, #8
 8009264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69da      	ldr	r2, [r3, #28]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f022 0204 	bic.w	r2, r2, #4
 8009274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	69d9      	ldr	r1, [r3, #28]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	61da      	str	r2, [r3, #28]
      break;
 8009288:	e064      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fca5 	bl	8009be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69da      	ldr	r2, [r3, #28]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69d9      	ldr	r1, [r3, #28]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	021a      	lsls	r2, r3, #8
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	61da      	str	r2, [r3, #28]
      break;
 80092ca:	e043      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fd0e 	bl	8009cf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f042 0208 	orr.w	r2, r2, #8
 80092e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0204 	bic.w	r2, r2, #4
 80092f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	691a      	ldr	r2, [r3, #16]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800930a:	e023      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fd52 	bl	8009dbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009326:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009336:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	021a      	lsls	r2, r3, #8
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800934c:	e002      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	75fb      	strb	r3, [r7, #23]
      break;
 8009352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop

08009368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800937c:	2b01      	cmp	r3, #1
 800937e:	d101      	bne.n	8009384 <HAL_TIM_ConfigClockSource+0x1c>
 8009380:	2302      	movs	r3, #2
 8009382:	e0de      	b.n	8009542 <HAL_TIM_ConfigClockSource+0x1da>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80093a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80093a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a63      	ldr	r2, [pc, #396]	@ (800954c <HAL_TIM_ConfigClockSource+0x1e4>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	f000 80a9 	beq.w	8009516 <HAL_TIM_ConfigClockSource+0x1ae>
 80093c4:	4a61      	ldr	r2, [pc, #388]	@ (800954c <HAL_TIM_ConfigClockSource+0x1e4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	f200 80ae 	bhi.w	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 80093cc:	4a60      	ldr	r2, [pc, #384]	@ (8009550 <HAL_TIM_ConfigClockSource+0x1e8>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	f000 80a1 	beq.w	8009516 <HAL_TIM_ConfigClockSource+0x1ae>
 80093d4:	4a5e      	ldr	r2, [pc, #376]	@ (8009550 <HAL_TIM_ConfigClockSource+0x1e8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	f200 80a6 	bhi.w	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 80093dc:	4a5d      	ldr	r2, [pc, #372]	@ (8009554 <HAL_TIM_ConfigClockSource+0x1ec>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	f000 8099 	beq.w	8009516 <HAL_TIM_ConfigClockSource+0x1ae>
 80093e4:	4a5b      	ldr	r2, [pc, #364]	@ (8009554 <HAL_TIM_ConfigClockSource+0x1ec>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	f200 809e 	bhi.w	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 80093ec:	4a5a      	ldr	r2, [pc, #360]	@ (8009558 <HAL_TIM_ConfigClockSource+0x1f0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	f000 8091 	beq.w	8009516 <HAL_TIM_ConfigClockSource+0x1ae>
 80093f4:	4a58      	ldr	r2, [pc, #352]	@ (8009558 <HAL_TIM_ConfigClockSource+0x1f0>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	f200 8096 	bhi.w	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 80093fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009400:	f000 8089 	beq.w	8009516 <HAL_TIM_ConfigClockSource+0x1ae>
 8009404:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009408:	f200 808e 	bhi.w	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 800940c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009410:	d03e      	beq.n	8009490 <HAL_TIM_ConfigClockSource+0x128>
 8009412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009416:	f200 8087 	bhi.w	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 800941a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800941e:	f000 8086 	beq.w	800952e <HAL_TIM_ConfigClockSource+0x1c6>
 8009422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009426:	d87f      	bhi.n	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 8009428:	2b70      	cmp	r3, #112	@ 0x70
 800942a:	d01a      	beq.n	8009462 <HAL_TIM_ConfigClockSource+0xfa>
 800942c:	2b70      	cmp	r3, #112	@ 0x70
 800942e:	d87b      	bhi.n	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 8009430:	2b60      	cmp	r3, #96	@ 0x60
 8009432:	d050      	beq.n	80094d6 <HAL_TIM_ConfigClockSource+0x16e>
 8009434:	2b60      	cmp	r3, #96	@ 0x60
 8009436:	d877      	bhi.n	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 8009438:	2b50      	cmp	r3, #80	@ 0x50
 800943a:	d03c      	beq.n	80094b6 <HAL_TIM_ConfigClockSource+0x14e>
 800943c:	2b50      	cmp	r3, #80	@ 0x50
 800943e:	d873      	bhi.n	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 8009440:	2b40      	cmp	r3, #64	@ 0x40
 8009442:	d058      	beq.n	80094f6 <HAL_TIM_ConfigClockSource+0x18e>
 8009444:	2b40      	cmp	r3, #64	@ 0x40
 8009446:	d86f      	bhi.n	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 8009448:	2b30      	cmp	r3, #48	@ 0x30
 800944a:	d064      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x1ae>
 800944c:	2b30      	cmp	r3, #48	@ 0x30
 800944e:	d86b      	bhi.n	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 8009450:	2b20      	cmp	r3, #32
 8009452:	d060      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x1ae>
 8009454:	2b20      	cmp	r3, #32
 8009456:	d867      	bhi.n	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d05c      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x1ae>
 800945c:	2b10      	cmp	r3, #16
 800945e:	d05a      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x1ae>
 8009460:	e062      	b.n	8009528 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009472:	f000 fd85 	bl	8009f80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68ba      	ldr	r2, [r7, #8]
 800948c:	609a      	str	r2, [r3, #8]
      break;
 800948e:	e04f      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094a0:	f000 fd6e 	bl	8009f80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689a      	ldr	r2, [r3, #8]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094b2:	609a      	str	r2, [r3, #8]
      break;
 80094b4:	e03c      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094c2:	461a      	mov	r2, r3
 80094c4:	f000 fce0 	bl	8009e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2150      	movs	r1, #80	@ 0x50
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fd39 	bl	8009f46 <TIM_ITRx_SetConfig>
      break;
 80094d4:	e02c      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094e2:	461a      	mov	r2, r3
 80094e4:	f000 fcff 	bl	8009ee6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2160      	movs	r1, #96	@ 0x60
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 fd29 	bl	8009f46 <TIM_ITRx_SetConfig>
      break;
 80094f4:	e01c      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009502:	461a      	mov	r2, r3
 8009504:	f000 fcc0 	bl	8009e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2140      	movs	r1, #64	@ 0x40
 800950e:	4618      	mov	r0, r3
 8009510:	f000 fd19 	bl	8009f46 <TIM_ITRx_SetConfig>
      break;
 8009514:	e00c      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4619      	mov	r1, r3
 8009520:	4610      	mov	r0, r2
 8009522:	f000 fd10 	bl	8009f46 <TIM_ITRx_SetConfig>
      break;
 8009526:	e003      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	73fb      	strb	r3, [r7, #15]
      break;
 800952c:	e000      	b.n	8009530 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800952e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009540:	7bfb      	ldrb	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	00100070 	.word	0x00100070
 8009550:	00100040 	.word	0x00100040
 8009554:	00100030 	.word	0x00100030
 8009558:	00100020 	.word	0x00100020

0800955c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d107      	bne.n	80095e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2201      	movs	r2, #1
 80095dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095e6:	e02a      	b.n	800963e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d107      	bne.n	8009602 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2202      	movs	r2, #2
 80095f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009600:	e01d      	b.n	800963e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	429a      	cmp	r2, r3
 800960a:	d107      	bne.n	800961c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2204      	movs	r2, #4
 8009610:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800961a:	e010      	b.n	800963e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	429a      	cmp	r2, r3
 8009624:	d107      	bne.n	8009636 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2208      	movs	r2, #8
 800962a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009634:	e003      	b.n	800963e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff ffb4 	bl	80095ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	771a      	strb	r2, [r3, #28]
}
 800964a:	bf00      	nop
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	429a      	cmp	r2, r3
 8009668:	d10b      	bne.n	8009682 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2201      	movs	r2, #1
 800966e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d136      	bne.n	80096e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009680:	e031      	b.n	80096e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	429a      	cmp	r2, r3
 800968a:	d10b      	bne.n	80096a4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2202      	movs	r2, #2
 8009690:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d125      	bne.n	80096e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096a2:	e020      	b.n	80096e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d10b      	bne.n	80096c6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2204      	movs	r2, #4
 80096b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d114      	bne.n	80096e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096c4:	e00f      	b.n	80096e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d10a      	bne.n	80096e6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2208      	movs	r2, #8
 80096d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d103      	bne.n	80096e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7f8 fcf6 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	771a      	strb	r2, [r3, #28]
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009706:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	429a      	cmp	r2, r3
 8009710:	d103      	bne.n	800971a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	771a      	strb	r2, [r3, #28]
 8009718:	e019      	b.n	800974e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d103      	bne.n	800972c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2202      	movs	r2, #2
 8009728:	771a      	strb	r2, [r3, #28]
 800972a:	e010      	b.n	800974e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	429a      	cmp	r2, r3
 8009734:	d103      	bne.n	800973e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2204      	movs	r2, #4
 800973a:	771a      	strb	r2, [r3, #28]
 800973c:	e007      	b.n	800974e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d102      	bne.n	800974e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2208      	movs	r2, #8
 800974c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f7ff ff18 	bl	8009584 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	771a      	strb	r2, [r3, #28]
}
 800975a:	bf00      	nop
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a42      	ldr	r2, [pc, #264]	@ (8009880 <TIM_Base_SetConfig+0x11c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00f      	beq.n	800979c <TIM_Base_SetConfig+0x38>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009782:	d00b      	beq.n	800979c <TIM_Base_SetConfig+0x38>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a3f      	ldr	r2, [pc, #252]	@ (8009884 <TIM_Base_SetConfig+0x120>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d007      	beq.n	800979c <TIM_Base_SetConfig+0x38>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a3e      	ldr	r2, [pc, #248]	@ (8009888 <TIM_Base_SetConfig+0x124>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d003      	beq.n	800979c <TIM_Base_SetConfig+0x38>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a3d      	ldr	r2, [pc, #244]	@ (800988c <TIM_Base_SetConfig+0x128>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d108      	bne.n	80097ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a33      	ldr	r2, [pc, #204]	@ (8009880 <TIM_Base_SetConfig+0x11c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d01b      	beq.n	80097ee <TIM_Base_SetConfig+0x8a>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097bc:	d017      	beq.n	80097ee <TIM_Base_SetConfig+0x8a>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a30      	ldr	r2, [pc, #192]	@ (8009884 <TIM_Base_SetConfig+0x120>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d013      	beq.n	80097ee <TIM_Base_SetConfig+0x8a>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a2f      	ldr	r2, [pc, #188]	@ (8009888 <TIM_Base_SetConfig+0x124>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00f      	beq.n	80097ee <TIM_Base_SetConfig+0x8a>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a2e      	ldr	r2, [pc, #184]	@ (800988c <TIM_Base_SetConfig+0x128>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d00b      	beq.n	80097ee <TIM_Base_SetConfig+0x8a>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009890 <TIM_Base_SetConfig+0x12c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d007      	beq.n	80097ee <TIM_Base_SetConfig+0x8a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a2c      	ldr	r2, [pc, #176]	@ (8009894 <TIM_Base_SetConfig+0x130>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d003      	beq.n	80097ee <TIM_Base_SetConfig+0x8a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a2b      	ldr	r2, [pc, #172]	@ (8009898 <TIM_Base_SetConfig+0x134>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d108      	bne.n	8009800 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	4313      	orrs	r3, r2
 800980c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a16      	ldr	r2, [pc, #88]	@ (8009880 <TIM_Base_SetConfig+0x11c>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d00f      	beq.n	800984c <TIM_Base_SetConfig+0xe8>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a17      	ldr	r2, [pc, #92]	@ (800988c <TIM_Base_SetConfig+0x128>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d00b      	beq.n	800984c <TIM_Base_SetConfig+0xe8>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a16      	ldr	r2, [pc, #88]	@ (8009890 <TIM_Base_SetConfig+0x12c>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d007      	beq.n	800984c <TIM_Base_SetConfig+0xe8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a15      	ldr	r2, [pc, #84]	@ (8009894 <TIM_Base_SetConfig+0x130>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d003      	beq.n	800984c <TIM_Base_SetConfig+0xe8>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a14      	ldr	r2, [pc, #80]	@ (8009898 <TIM_Base_SetConfig+0x134>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d103      	bne.n	8009854 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b01      	cmp	r3, #1
 8009864:	d105      	bne.n	8009872 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	f023 0201 	bic.w	r2, r3, #1
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	611a      	str	r2, [r3, #16]
  }
}
 8009872:	bf00      	nop
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	40012c00 	.word	0x40012c00
 8009884:	40000400 	.word	0x40000400
 8009888:	40000800 	.word	0x40000800
 800988c:	40013400 	.word	0x40013400
 8009890:	40014000 	.word	0x40014000
 8009894:	40014400 	.word	0x40014400
 8009898:	40014800 	.word	0x40014800

0800989c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	f023 0201 	bic.w	r2, r3, #1
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 0303 	bic.w	r3, r3, #3
 80098d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4313      	orrs	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f023 0302 	bic.w	r3, r3, #2
 80098e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a2c      	ldr	r2, [pc, #176]	@ (80099a8 <TIM_OC1_SetConfig+0x10c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d00f      	beq.n	800991c <TIM_OC1_SetConfig+0x80>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a2b      	ldr	r2, [pc, #172]	@ (80099ac <TIM_OC1_SetConfig+0x110>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d00b      	beq.n	800991c <TIM_OC1_SetConfig+0x80>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a2a      	ldr	r2, [pc, #168]	@ (80099b0 <TIM_OC1_SetConfig+0x114>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d007      	beq.n	800991c <TIM_OC1_SetConfig+0x80>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a29      	ldr	r2, [pc, #164]	@ (80099b4 <TIM_OC1_SetConfig+0x118>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d003      	beq.n	800991c <TIM_OC1_SetConfig+0x80>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a28      	ldr	r2, [pc, #160]	@ (80099b8 <TIM_OC1_SetConfig+0x11c>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d10c      	bne.n	8009936 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	f023 0308 	bic.w	r3, r3, #8
 8009922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	4313      	orrs	r3, r2
 800992c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f023 0304 	bic.w	r3, r3, #4
 8009934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a1b      	ldr	r2, [pc, #108]	@ (80099a8 <TIM_OC1_SetConfig+0x10c>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d00f      	beq.n	800995e <TIM_OC1_SetConfig+0xc2>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a1a      	ldr	r2, [pc, #104]	@ (80099ac <TIM_OC1_SetConfig+0x110>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d00b      	beq.n	800995e <TIM_OC1_SetConfig+0xc2>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a19      	ldr	r2, [pc, #100]	@ (80099b0 <TIM_OC1_SetConfig+0x114>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d007      	beq.n	800995e <TIM_OC1_SetConfig+0xc2>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a18      	ldr	r2, [pc, #96]	@ (80099b4 <TIM_OC1_SetConfig+0x118>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d003      	beq.n	800995e <TIM_OC1_SetConfig+0xc2>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a17      	ldr	r2, [pc, #92]	@ (80099b8 <TIM_OC1_SetConfig+0x11c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d111      	bne.n	8009982 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800996c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	4313      	orrs	r3, r2
 8009980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	621a      	str	r2, [r3, #32]
}
 800999c:	bf00      	nop
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	40012c00 	.word	0x40012c00
 80099ac:	40013400 	.word	0x40013400
 80099b0:	40014000 	.word	0x40014000
 80099b4:	40014400 	.word	0x40014400
 80099b8:	40014800 	.word	0x40014800

080099bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	f023 0210 	bic.w	r2, r3, #16
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f023 0320 	bic.w	r3, r3, #32
 8009a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	011b      	lsls	r3, r3, #4
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a28      	ldr	r2, [pc, #160]	@ (8009abc <TIM_OC2_SetConfig+0x100>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d003      	beq.n	8009a28 <TIM_OC2_SetConfig+0x6c>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a27      	ldr	r2, [pc, #156]	@ (8009ac0 <TIM_OC2_SetConfig+0x104>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d10d      	bne.n	8009a44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a1d      	ldr	r2, [pc, #116]	@ (8009abc <TIM_OC2_SetConfig+0x100>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d00f      	beq.n	8009a6c <TIM_OC2_SetConfig+0xb0>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac0 <TIM_OC2_SetConfig+0x104>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d00b      	beq.n	8009a6c <TIM_OC2_SetConfig+0xb0>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac4 <TIM_OC2_SetConfig+0x108>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d007      	beq.n	8009a6c <TIM_OC2_SetConfig+0xb0>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ac8 <TIM_OC2_SetConfig+0x10c>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d003      	beq.n	8009a6c <TIM_OC2_SetConfig+0xb0>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a19      	ldr	r2, [pc, #100]	@ (8009acc <TIM_OC2_SetConfig+0x110>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d113      	bne.n	8009a94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	693a      	ldr	r2, [r7, #16]
 8009a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	621a      	str	r2, [r3, #32]
}
 8009aae:	bf00      	nop
 8009ab0:	371c      	adds	r7, #28
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	40012c00 	.word	0x40012c00
 8009ac0:	40013400 	.word	0x40013400
 8009ac4:	40014000 	.word	0x40014000
 8009ac8:	40014400 	.word	0x40014400
 8009acc:	40014800 	.word	0x40014800

08009ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 0303 	bic.w	r3, r3, #3
 8009b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a27      	ldr	r2, [pc, #156]	@ (8009bcc <TIM_OC3_SetConfig+0xfc>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d003      	beq.n	8009b3a <TIM_OC3_SetConfig+0x6a>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a26      	ldr	r2, [pc, #152]	@ (8009bd0 <TIM_OC3_SetConfig+0x100>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d10d      	bne.n	8009b56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a1c      	ldr	r2, [pc, #112]	@ (8009bcc <TIM_OC3_SetConfig+0xfc>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d00f      	beq.n	8009b7e <TIM_OC3_SetConfig+0xae>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a1b      	ldr	r2, [pc, #108]	@ (8009bd0 <TIM_OC3_SetConfig+0x100>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d00b      	beq.n	8009b7e <TIM_OC3_SetConfig+0xae>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a1a      	ldr	r2, [pc, #104]	@ (8009bd4 <TIM_OC3_SetConfig+0x104>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d007      	beq.n	8009b7e <TIM_OC3_SetConfig+0xae>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a19      	ldr	r2, [pc, #100]	@ (8009bd8 <TIM_OC3_SetConfig+0x108>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d003      	beq.n	8009b7e <TIM_OC3_SetConfig+0xae>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a18      	ldr	r2, [pc, #96]	@ (8009bdc <TIM_OC3_SetConfig+0x10c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d113      	bne.n	8009ba6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	011b      	lsls	r3, r3, #4
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	621a      	str	r2, [r3, #32]
}
 8009bc0:	bf00      	nop
 8009bc2:	371c      	adds	r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	40012c00 	.word	0x40012c00
 8009bd0:	40013400 	.word	0x40013400
 8009bd4:	40014000 	.word	0x40014000
 8009bd8:	40014400 	.word	0x40014400
 8009bdc:	40014800 	.word	0x40014800

08009be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	031b      	lsls	r3, r3, #12
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a28      	ldr	r2, [pc, #160]	@ (8009ce0 <TIM_OC4_SetConfig+0x100>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d003      	beq.n	8009c4c <TIM_OC4_SetConfig+0x6c>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a27      	ldr	r2, [pc, #156]	@ (8009ce4 <TIM_OC4_SetConfig+0x104>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d10d      	bne.n	8009c68 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	031b      	lsls	r3, r3, #12
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8009ce0 <TIM_OC4_SetConfig+0x100>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d00f      	beq.n	8009c90 <TIM_OC4_SetConfig+0xb0>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a1c      	ldr	r2, [pc, #112]	@ (8009ce4 <TIM_OC4_SetConfig+0x104>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d00b      	beq.n	8009c90 <TIM_OC4_SetConfig+0xb0>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ce8 <TIM_OC4_SetConfig+0x108>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d007      	beq.n	8009c90 <TIM_OC4_SetConfig+0xb0>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a1a      	ldr	r2, [pc, #104]	@ (8009cec <TIM_OC4_SetConfig+0x10c>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d003      	beq.n	8009c90 <TIM_OC4_SetConfig+0xb0>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a19      	ldr	r2, [pc, #100]	@ (8009cf0 <TIM_OC4_SetConfig+0x110>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d113      	bne.n	8009cb8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	019b      	lsls	r3, r3, #6
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	019b      	lsls	r3, r3, #6
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	621a      	str	r2, [r3, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	40012c00 	.word	0x40012c00
 8009ce4:	40013400 	.word	0x40013400
 8009ce8:	40014000 	.word	0x40014000
 8009cec:	40014400 	.word	0x40014400
 8009cf0:	40014800 	.word	0x40014800

08009cf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009d38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	041b      	lsls	r3, r3, #16
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a17      	ldr	r2, [pc, #92]	@ (8009da8 <TIM_OC5_SetConfig+0xb4>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d00f      	beq.n	8009d6e <TIM_OC5_SetConfig+0x7a>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a16      	ldr	r2, [pc, #88]	@ (8009dac <TIM_OC5_SetConfig+0xb8>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d00b      	beq.n	8009d6e <TIM_OC5_SetConfig+0x7a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a15      	ldr	r2, [pc, #84]	@ (8009db0 <TIM_OC5_SetConfig+0xbc>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d007      	beq.n	8009d6e <TIM_OC5_SetConfig+0x7a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a14      	ldr	r2, [pc, #80]	@ (8009db4 <TIM_OC5_SetConfig+0xc0>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d003      	beq.n	8009d6e <TIM_OC5_SetConfig+0x7a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a13      	ldr	r2, [pc, #76]	@ (8009db8 <TIM_OC5_SetConfig+0xc4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d109      	bne.n	8009d82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	021b      	lsls	r3, r3, #8
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	621a      	str	r2, [r3, #32]
}
 8009d9c:	bf00      	nop
 8009d9e:	371c      	adds	r7, #28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	40012c00 	.word	0x40012c00
 8009dac:	40013400 	.word	0x40013400
 8009db0:	40014000 	.word	0x40014000
 8009db4:	40014400 	.word	0x40014400
 8009db8:	40014800 	.word	0x40014800

08009dbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	021b      	lsls	r3, r3, #8
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	051b      	lsls	r3, r3, #20
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a18      	ldr	r2, [pc, #96]	@ (8009e74 <TIM_OC6_SetConfig+0xb8>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00f      	beq.n	8009e38 <TIM_OC6_SetConfig+0x7c>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a17      	ldr	r2, [pc, #92]	@ (8009e78 <TIM_OC6_SetConfig+0xbc>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d00b      	beq.n	8009e38 <TIM_OC6_SetConfig+0x7c>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a16      	ldr	r2, [pc, #88]	@ (8009e7c <TIM_OC6_SetConfig+0xc0>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d007      	beq.n	8009e38 <TIM_OC6_SetConfig+0x7c>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a15      	ldr	r2, [pc, #84]	@ (8009e80 <TIM_OC6_SetConfig+0xc4>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d003      	beq.n	8009e38 <TIM_OC6_SetConfig+0x7c>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a14      	ldr	r2, [pc, #80]	@ (8009e84 <TIM_OC6_SetConfig+0xc8>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d109      	bne.n	8009e4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	029b      	lsls	r3, r3, #10
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	621a      	str	r2, [r3, #32]
}
 8009e66:	bf00      	nop
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	40012c00 	.word	0x40012c00
 8009e78:	40013400 	.word	0x40013400
 8009e7c:	40014000 	.word	0x40014000
 8009e80:	40014400 	.word	0x40014400
 8009e84:	40014800 	.word	0x40014800

08009e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6a1b      	ldr	r3, [r3, #32]
 8009e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	f023 0201 	bic.w	r2, r3, #1
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	011b      	lsls	r3, r3, #4
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f023 030a 	bic.w	r3, r3, #10
 8009ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	621a      	str	r2, [r3, #32]
}
 8009eda:	bf00      	nop
 8009edc:	371c      	adds	r7, #28
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b087      	sub	sp, #28
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	f023 0210 	bic.w	r2, r3, #16
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	031b      	lsls	r3, r3, #12
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	011b      	lsls	r3, r3, #4
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	621a      	str	r2, [r3, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	f043 0307 	orr.w	r3, r3, #7
 8009f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	609a      	str	r2, [r3, #8]
}
 8009f74:	bf00      	nop
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	021a      	lsls	r2, r3, #8
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	609a      	str	r2, [r3, #8]
}
 8009fb4:	bf00      	nop
 8009fb6:	371c      	adds	r7, #28
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b087      	sub	sp, #28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f003 031f 	and.w	r3, r3, #31
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6a1a      	ldr	r2, [r3, #32]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	43db      	mvns	r3, r3
 8009fe2:	401a      	ands	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6a1a      	ldr	r2, [r3, #32]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	f003 031f 	and.w	r3, r3, #31
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	621a      	str	r2, [r3, #32]
}
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
	...

0800a00c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d101      	bne.n	800a024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a020:	2302      	movs	r3, #2
 800a022:	e065      	b.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a2c      	ldr	r2, [pc, #176]	@ (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d004      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a2b      	ldr	r2, [pc, #172]	@ (800a100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d108      	bne.n	800a06a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a05e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	4313      	orrs	r3, r2
 800a068:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a074:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a1b      	ldr	r2, [pc, #108]	@ (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d018      	beq.n	800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a09a:	d013      	beq.n	800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a18      	ldr	r2, [pc, #96]	@ (800a104 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d00e      	beq.n	800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a17      	ldr	r2, [pc, #92]	@ (800a108 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d009      	beq.n	800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a12      	ldr	r2, [pc, #72]	@ (800a100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d004      	beq.n	800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a13      	ldr	r2, [pc, #76]	@ (800a10c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d10c      	bne.n	800a0de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	40012c00 	.word	0x40012c00
 800a100:	40013400 	.word	0x40013400
 800a104:	40000400 	.word	0x40000400
 800a108:	40000800 	.word	0x40000800
 800a10c:	40014000 	.word	0x40014000

0800a110 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e042      	b.n	800a234 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d106      	bne.n	800a1c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7f9 f857 	bl	8003274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2224      	movs	r2, #36	@ 0x24
 800a1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f022 0201 	bic.w	r2, r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f001 f834 	bl	800b254 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fd65 	bl	800acbc <UART_SetConfig>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d101      	bne.n	800a1fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e01b      	b.n	800a234 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a20a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a21a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f042 0201 	orr.w	r2, r2, #1
 800a22a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f001 f8b3 	bl	800b398 <UART_CheckIdleState>
 800a232:	4603      	mov	r3, r0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	@ 0x28
 800a240:	af02      	add	r7, sp, #8
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	4613      	mov	r3, r2
 800a24a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a252:	2b20      	cmp	r3, #32
 800a254:	d17b      	bne.n	800a34e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <HAL_UART_Transmit+0x26>
 800a25c:	88fb      	ldrh	r3, [r7, #6]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e074      	b.n	800a350 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2221      	movs	r2, #33	@ 0x21
 800a272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a276:	f7f9 fe8d 	bl	8003f94 <HAL_GetTick>
 800a27a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	88fa      	ldrh	r2, [r7, #6]
 800a280:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	88fa      	ldrh	r2, [r7, #6]
 800a288:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a294:	d108      	bne.n	800a2a8 <HAL_UART_Transmit+0x6c>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	e003      	b.n	800a2b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2b0:	e030      	b.n	800a314 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2180      	movs	r1, #128	@ 0x80
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f001 f915 	bl	800b4ec <UART_WaitOnFlagUntilTimeout>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d005      	beq.n	800a2d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e03d      	b.n	800a350 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10b      	bne.n	800a2f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	3302      	adds	r3, #2
 800a2ee:	61bb      	str	r3, [r7, #24]
 800a2f0:	e007      	b.n	800a302 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	781a      	ldrb	r2, [r3, #0]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	3301      	adds	r3, #1
 800a300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a308:	b29b      	uxth	r3, r3
 800a30a:	3b01      	subs	r3, #1
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1c8      	bne.n	800a2b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	2200      	movs	r2, #0
 800a328:	2140      	movs	r1, #64	@ 0x40
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f001 f8de 	bl	800b4ec <UART_WaitOnFlagUntilTimeout>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2220      	movs	r2, #32
 800a33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e006      	b.n	800a350 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2220      	movs	r2, #32
 800a346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	e000      	b.n	800a350 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a34e:	2302      	movs	r3, #2
  }
}
 800a350:	4618      	mov	r0, r3
 800a352:	3720      	adds	r7, #32
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08a      	sub	sp, #40	@ 0x28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	4613      	mov	r3, r2
 800a364:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d137      	bne.n	800a3e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <HAL_UART_Receive_DMA+0x24>
 800a376:	88fb      	ldrh	r3, [r7, #6]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e030      	b.n	800a3e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a18      	ldr	r2, [pc, #96]	@ (800a3ec <HAL_UART_Receive_DMA+0x94>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d01f      	beq.n	800a3d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d018      	beq.n	800a3d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	e853 3f00 	ldrex	r3, [r3]
 800a3aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3bc:	623b      	str	r3, [r7, #32]
 800a3be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	69f9      	ldr	r1, [r7, #28]
 800a3c2:	6a3a      	ldr	r2, [r7, #32]
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e6      	bne.n	800a39e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a3d0:	88fb      	ldrh	r3, [r7, #6]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	68b9      	ldr	r1, [r7, #8]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f001 f8f6 	bl	800b5c8 <UART_Start_Receive_DMA>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	e000      	b.n	800a3e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a3e0:	2302      	movs	r3, #2
  }
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3728      	adds	r7, #40	@ 0x28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	40008000 	.word	0x40008000

0800a3f0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b0a0      	sub	sp, #128	@ 0x80
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a406:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a408:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800a40c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a416:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a418:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a41c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a41e:	e841 2300 	strex	r3, r2, [r1]
 800a422:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a424:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1e6      	bne.n	800a3f8 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3308      	adds	r3, #8
 800a430:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a434:	e853 3f00 	ldrex	r3, [r3]
 800a438:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a43a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a43c:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800a440:	f023 0301 	bic.w	r3, r3, #1
 800a444:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3308      	adds	r3, #8
 800a44c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a44e:	657a      	str	r2, [r7, #84]	@ 0x54
 800a450:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a452:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a454:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a456:	e841 2300 	strex	r3, r2, [r1]
 800a45a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a45c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1e3      	bne.n	800a42a <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a466:	2b01      	cmp	r3, #1
 800a468:	d118      	bne.n	800a49c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47a:	f023 0310 	bic.w	r3, r3, #16
 800a47e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a488:	643b      	str	r3, [r7, #64]	@ 0x40
 800a48a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a48e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e6      	bne.n	800a46a <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4a6:	2b80      	cmp	r3, #128	@ 0x80
 800a4a8:	d137      	bne.n	800a51a <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	e853 3f00 	ldrex	r3, [r3]
 800a4b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4c0:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3308      	adds	r3, #8
 800a4c8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a4ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4d2:	e841 2300 	strex	r3, r2, [r1]
 800a4d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1e5      	bne.n	800a4aa <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d019      	beq.n	800a51a <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fb fc35 	bl	8005d62 <HAL_DMA_Abort>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00d      	beq.n	800a51a <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a502:	4618      	mov	r0, r3
 800a504:	f7fb fd9c 	bl	8006040 <HAL_DMA_GetError>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	d105      	bne.n	800a51a <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2210      	movs	r2, #16
 800a512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e073      	b.n	800a602 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a524:	2b40      	cmp	r3, #64	@ 0x40
 800a526:	d13b      	bne.n	800a5a0 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3308      	adds	r3, #8
 800a52e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	e853 3f00 	ldrex	r3, [r3]
 800a536:	60bb      	str	r3, [r7, #8]
   return(result);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a53e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3308      	adds	r3, #8
 800a546:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a548:	61ba      	str	r2, [r7, #24]
 800a54a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54c:	6979      	ldr	r1, [r7, #20]
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	e841 2300 	strex	r3, r2, [r1]
 800a554:	613b      	str	r3, [r7, #16]
   return(result);
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e5      	bne.n	800a528 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01c      	beq.n	800a5a0 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a56c:	2200      	movs	r2, #0
 800a56e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a576:	4618      	mov	r0, r3
 800a578:	f7fb fbf3 	bl	8005d62 <HAL_DMA_Abort>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00e      	beq.n	800a5a0 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fb fd59 	bl	8006040 <HAL_DMA_GetError>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b20      	cmp	r3, #32
 800a592:	d105      	bne.n	800a5a0 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2210      	movs	r2, #16
 800a598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e030      	b.n	800a602 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	220f      	movs	r2, #15
 800a5b6:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5c0:	d107      	bne.n	800a5d2 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	699a      	ldr	r2, [r3, #24]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f042 0210 	orr.w	r2, r2, #16
 800a5d0:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	699a      	ldr	r2, [r3, #24]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f042 0208 	orr.w	r2, r2, #8
 800a5e0:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3780      	adds	r7, #128	@ 0x80
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b0ba      	sub	sp, #232	@ 0xe8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a632:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a636:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a63a:	4013      	ands	r3, r2
 800a63c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a644:	2b00      	cmp	r3, #0
 800a646:	d11b      	bne.n	800a680 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a64c:	f003 0320 	and.w	r3, r3, #32
 800a650:	2b00      	cmp	r3, #0
 800a652:	d015      	beq.n	800a680 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a658:	f003 0320 	and.w	r3, r3, #32
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d105      	bne.n	800a66c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d009      	beq.n	800a680 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 8300 	beq.w	800ac76 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	4798      	blx	r3
      }
      return;
 800a67e:	e2fa      	b.n	800ac76 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 8123 	beq.w	800a8d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a68a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a68e:	4b8d      	ldr	r3, [pc, #564]	@ (800a8c4 <HAL_UART_IRQHandler+0x2b8>)
 800a690:	4013      	ands	r3, r2
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a696:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a69a:	4b8b      	ldr	r3, [pc, #556]	@ (800a8c8 <HAL_UART_IRQHandler+0x2bc>)
 800a69c:	4013      	ands	r3, r2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 8116 	beq.w	800a8d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d011      	beq.n	800a6d4 <HAL_UART_IRQHandler+0xc8>
 800a6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00b      	beq.n	800a6d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6ca:	f043 0201 	orr.w	r2, r3, #1
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6d8:	f003 0302 	and.w	r3, r3, #2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d011      	beq.n	800a704 <HAL_UART_IRQHandler+0xf8>
 800a6e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00b      	beq.n	800a704 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6fa:	f043 0204 	orr.w	r2, r3, #4
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d011      	beq.n	800a734 <HAL_UART_IRQHandler+0x128>
 800a710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00b      	beq.n	800a734 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2204      	movs	r2, #4
 800a722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a72a:	f043 0202 	orr.w	r2, r3, #2
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a738:	f003 0308 	and.w	r3, r3, #8
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d017      	beq.n	800a770 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a744:	f003 0320 	and.w	r3, r3, #32
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d105      	bne.n	800a758 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a74c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a750:	4b5c      	ldr	r3, [pc, #368]	@ (800a8c4 <HAL_UART_IRQHandler+0x2b8>)
 800a752:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00b      	beq.n	800a770 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2208      	movs	r2, #8
 800a75e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a766:	f043 0208 	orr.w	r2, r3, #8
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d012      	beq.n	800a7a2 <HAL_UART_IRQHandler+0x196>
 800a77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a780:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00c      	beq.n	800a7a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a798:	f043 0220 	orr.w	r2, r3, #32
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 8266 	beq.w	800ac7a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b2:	f003 0320 	and.w	r3, r3, #32
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d013      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7be:	f003 0320 	and.w	r3, r3, #32
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d105      	bne.n	800a7d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d007      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d003      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7f6:	2b40      	cmp	r3, #64	@ 0x40
 800a7f8:	d005      	beq.n	800a806 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a802:	2b00      	cmp	r3, #0
 800a804:	d054      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 ffc5 	bl	800b796 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a816:	2b40      	cmp	r3, #64	@ 0x40
 800a818:	d146      	bne.n	800a8a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3308      	adds	r3, #8
 800a820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3308      	adds	r3, #8
 800a842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a84a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a85e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1d9      	bne.n	800a81a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d017      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a876:	4a15      	ldr	r2, [pc, #84]	@ (800a8cc <HAL_UART_IRQHandler+0x2c0>)
 800a878:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a880:	4618      	mov	r0, r3
 800a882:	f7fb fac7 	bl	8005e14 <HAL_DMA_Abort_IT>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d019      	beq.n	800a8c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a89a:	4610      	mov	r0, r2
 800a89c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a89e:	e00f      	b.n	800a8c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f9f5 	bl	800ac90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a6:	e00b      	b.n	800a8c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f9f1 	bl	800ac90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ae:	e007      	b.n	800a8c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f9ed 	bl	800ac90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a8be:	e1dc      	b.n	800ac7a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c0:	bf00      	nop
    return;
 800a8c2:	e1da      	b.n	800ac7a <HAL_UART_IRQHandler+0x66e>
 800a8c4:	10000001 	.word	0x10000001
 800a8c8:	04000120 	.word	0x04000120
 800a8cc:	0800ba4d 	.word	0x0800ba4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	f040 8170 	bne.w	800abba <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8de:	f003 0310 	and.w	r3, r3, #16
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 8169 	beq.w	800abba <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ec:	f003 0310 	and.w	r3, r3, #16
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 8162 	beq.w	800abba <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2210      	movs	r2, #16
 800a8fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a908:	2b40      	cmp	r3, #64	@ 0x40
 800a90a:	f040 80d8 	bne.w	800aabe <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a91c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 80af 	beq.w	800aa84 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a92c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a930:	429a      	cmp	r2, r3
 800a932:	f080 80a7 	bcs.w	800aa84 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a93c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f040 8087 	bne.w	800aa62 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a968:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a96c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	461a      	mov	r2, r3
 800a97a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a97e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a982:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a986:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a98a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a98e:	e841 2300 	strex	r3, r2, [r1]
 800a992:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1da      	bne.n	800a954 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a9ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3308      	adds	r3, #8
 800a9be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a9c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a9ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a9d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e1      	bne.n	800a99e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3308      	adds	r3, #8
 800a9e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a9ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a9fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aa0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e3      	bne.n	800a9da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2220      	movs	r2, #32
 800aa16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa28:	e853 3f00 	ldrex	r3, [r3]
 800aa2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa30:	f023 0310 	bic.w	r3, r3, #16
 800aa34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa42:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa4a:	e841 2300 	strex	r3, r2, [r1]
 800aa4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1e4      	bne.n	800aa20 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fb f980 	bl	8005d62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2202      	movs	r2, #2
 800aa66:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	1ad3      	subs	r3, r2, r3
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f911 	bl	800aca4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aa82:	e0fc      	b.n	800ac7e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	f040 80f5 	bne.w	800ac7e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0320 	and.w	r3, r3, #32
 800aaa2:	2b20      	cmp	r3, #32
 800aaa4:	f040 80eb 	bne.w	800ac7e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2202      	movs	r2, #2
 800aaac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f8f4 	bl	800aca4 <HAL_UARTEx_RxEventCallback>
      return;
 800aabc:	e0df      	b.n	800ac7e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aad8:	b29b      	uxth	r3, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 80d1 	beq.w	800ac82 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800aae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 80cc 	beq.w	800ac82 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf2:	e853 3f00 	ldrex	r3, [r3]
 800aaf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aafa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aafe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	461a      	mov	r2, r3
 800ab08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab14:	e841 2300 	strex	r3, r2, [r1]
 800ab18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e4      	bne.n	800aaea <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3308      	adds	r3, #8
 800ab26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	623b      	str	r3, [r7, #32]
   return(result);
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab36:	f023 0301 	bic.w	r3, r3, #1
 800ab3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3308      	adds	r3, #8
 800ab44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab48:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab50:	e841 2300 	strex	r3, r2, [r1]
 800ab54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1e1      	bne.n	800ab20 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2220      	movs	r2, #32
 800ab60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f023 0310 	bic.w	r3, r3, #16
 800ab84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	69b9      	ldr	r1, [r7, #24]
 800ab98:	69fa      	ldr	r2, [r7, #28]
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	617b      	str	r3, [r7, #20]
   return(result);
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e4      	bne.n	800ab70 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2202      	movs	r2, #2
 800abaa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f876 	bl	800aca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abb8:	e063      	b.n	800ac82 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00e      	beq.n	800abe4 <HAL_UART_IRQHandler+0x5d8>
 800abc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d008      	beq.n	800abe4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800abda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 ff72 	bl	800bac6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abe2:	e051      	b.n	800ac88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800abe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abec:	2b00      	cmp	r3, #0
 800abee:	d014      	beq.n	800ac1a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800abf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d105      	bne.n	800ac08 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800abfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d008      	beq.n	800ac1a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d03a      	beq.n	800ac86 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	4798      	blx	r3
    }
    return;
 800ac18:	e035      	b.n	800ac86 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d009      	beq.n	800ac3a <HAL_UART_IRQHandler+0x62e>
 800ac26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d003      	beq.n	800ac3a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 ff1c 	bl	800ba70 <UART_EndTransmit_IT>
    return;
 800ac38:	e026      	b.n	800ac88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d009      	beq.n	800ac5a <HAL_UART_IRQHandler+0x64e>
 800ac46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 ff4b 	bl	800baee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac58:	e016      	b.n	800ac88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d010      	beq.n	800ac88 <HAL_UART_IRQHandler+0x67c>
 800ac66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	da0c      	bge.n	800ac88 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 ff33 	bl	800bada <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac74:	e008      	b.n	800ac88 <HAL_UART_IRQHandler+0x67c>
      return;
 800ac76:	bf00      	nop
 800ac78:	e006      	b.n	800ac88 <HAL_UART_IRQHandler+0x67c>
    return;
 800ac7a:	bf00      	nop
 800ac7c:	e004      	b.n	800ac88 <HAL_UART_IRQHandler+0x67c>
      return;
 800ac7e:	bf00      	nop
 800ac80:	e002      	b.n	800ac88 <HAL_UART_IRQHandler+0x67c>
      return;
 800ac82:	bf00      	nop
 800ac84:	e000      	b.n	800ac88 <HAL_UART_IRQHandler+0x67c>
    return;
 800ac86:	bf00      	nop
  }
}
 800ac88:	37e8      	adds	r7, #232	@ 0xe8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop

0800ac90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acc0:	b08c      	sub	sp, #48	@ 0x30
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	689a      	ldr	r2, [r3, #8]
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	431a      	orrs	r2, r3
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	431a      	orrs	r2, r3
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	4bab      	ldr	r3, [pc, #684]	@ (800af98 <UART_SetConfig+0x2dc>)
 800acec:	4013      	ands	r3, r2
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	6812      	ldr	r2, [r2, #0]
 800acf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acf4:	430b      	orrs	r3, r1
 800acf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	68da      	ldr	r2, [r3, #12]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4aa0      	ldr	r2, [pc, #640]	@ (800af9c <UART_SetConfig+0x2e0>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d004      	beq.n	800ad28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad24:	4313      	orrs	r3, r2
 800ad26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ad32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	6812      	ldr	r2, [r2, #0]
 800ad3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad46:	f023 010f 	bic.w	r1, r3, #15
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a91      	ldr	r2, [pc, #580]	@ (800afa0 <UART_SetConfig+0x2e4>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d125      	bne.n	800adac <UART_SetConfig+0xf0>
 800ad60:	4b90      	ldr	r3, [pc, #576]	@ (800afa4 <UART_SetConfig+0x2e8>)
 800ad62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	d81a      	bhi.n	800ada4 <UART_SetConfig+0xe8>
 800ad6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad74 <UART_SetConfig+0xb8>)
 800ad70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad74:	0800ad85 	.word	0x0800ad85
 800ad78:	0800ad95 	.word	0x0800ad95
 800ad7c:	0800ad8d 	.word	0x0800ad8d
 800ad80:	0800ad9d 	.word	0x0800ad9d
 800ad84:	2301      	movs	r3, #1
 800ad86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad8a:	e0d6      	b.n	800af3a <UART_SetConfig+0x27e>
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad92:	e0d2      	b.n	800af3a <UART_SetConfig+0x27e>
 800ad94:	2304      	movs	r3, #4
 800ad96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ad9a:	e0ce      	b.n	800af3a <UART_SetConfig+0x27e>
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ada2:	e0ca      	b.n	800af3a <UART_SetConfig+0x27e>
 800ada4:	2310      	movs	r3, #16
 800ada6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800adaa:	e0c6      	b.n	800af3a <UART_SetConfig+0x27e>
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a7d      	ldr	r2, [pc, #500]	@ (800afa8 <UART_SetConfig+0x2ec>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d138      	bne.n	800ae28 <UART_SetConfig+0x16c>
 800adb6:	4b7b      	ldr	r3, [pc, #492]	@ (800afa4 <UART_SetConfig+0x2e8>)
 800adb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adbc:	f003 030c 	and.w	r3, r3, #12
 800adc0:	2b0c      	cmp	r3, #12
 800adc2:	d82d      	bhi.n	800ae20 <UART_SetConfig+0x164>
 800adc4:	a201      	add	r2, pc, #4	@ (adr r2, 800adcc <UART_SetConfig+0x110>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800ae01 	.word	0x0800ae01
 800add0:	0800ae21 	.word	0x0800ae21
 800add4:	0800ae21 	.word	0x0800ae21
 800add8:	0800ae21 	.word	0x0800ae21
 800addc:	0800ae11 	.word	0x0800ae11
 800ade0:	0800ae21 	.word	0x0800ae21
 800ade4:	0800ae21 	.word	0x0800ae21
 800ade8:	0800ae21 	.word	0x0800ae21
 800adec:	0800ae09 	.word	0x0800ae09
 800adf0:	0800ae21 	.word	0x0800ae21
 800adf4:	0800ae21 	.word	0x0800ae21
 800adf8:	0800ae21 	.word	0x0800ae21
 800adfc:	0800ae19 	.word	0x0800ae19
 800ae00:	2300      	movs	r3, #0
 800ae02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae06:	e098      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae08:	2302      	movs	r3, #2
 800ae0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae0e:	e094      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae10:	2304      	movs	r3, #4
 800ae12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae16:	e090      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae18:	2308      	movs	r3, #8
 800ae1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae1e:	e08c      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae20:	2310      	movs	r3, #16
 800ae22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae26:	e088      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a5f      	ldr	r2, [pc, #380]	@ (800afac <UART_SetConfig+0x2f0>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d125      	bne.n	800ae7e <UART_SetConfig+0x1c2>
 800ae32:	4b5c      	ldr	r3, [pc, #368]	@ (800afa4 <UART_SetConfig+0x2e8>)
 800ae34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ae3c:	2b30      	cmp	r3, #48	@ 0x30
 800ae3e:	d016      	beq.n	800ae6e <UART_SetConfig+0x1b2>
 800ae40:	2b30      	cmp	r3, #48	@ 0x30
 800ae42:	d818      	bhi.n	800ae76 <UART_SetConfig+0x1ba>
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	d00a      	beq.n	800ae5e <UART_SetConfig+0x1a2>
 800ae48:	2b20      	cmp	r3, #32
 800ae4a:	d814      	bhi.n	800ae76 <UART_SetConfig+0x1ba>
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <UART_SetConfig+0x19a>
 800ae50:	2b10      	cmp	r3, #16
 800ae52:	d008      	beq.n	800ae66 <UART_SetConfig+0x1aa>
 800ae54:	e00f      	b.n	800ae76 <UART_SetConfig+0x1ba>
 800ae56:	2300      	movs	r3, #0
 800ae58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae5c:	e06d      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae5e:	2302      	movs	r3, #2
 800ae60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae64:	e069      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae66:	2304      	movs	r3, #4
 800ae68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae6c:	e065      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae6e:	2308      	movs	r3, #8
 800ae70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae74:	e061      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae76:	2310      	movs	r3, #16
 800ae78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae7c:	e05d      	b.n	800af3a <UART_SetConfig+0x27e>
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a4b      	ldr	r2, [pc, #300]	@ (800afb0 <UART_SetConfig+0x2f4>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d125      	bne.n	800aed4 <UART_SetConfig+0x218>
 800ae88:	4b46      	ldr	r3, [pc, #280]	@ (800afa4 <UART_SetConfig+0x2e8>)
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae92:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae94:	d016      	beq.n	800aec4 <UART_SetConfig+0x208>
 800ae96:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae98:	d818      	bhi.n	800aecc <UART_SetConfig+0x210>
 800ae9a:	2b80      	cmp	r3, #128	@ 0x80
 800ae9c:	d00a      	beq.n	800aeb4 <UART_SetConfig+0x1f8>
 800ae9e:	2b80      	cmp	r3, #128	@ 0x80
 800aea0:	d814      	bhi.n	800aecc <UART_SetConfig+0x210>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <UART_SetConfig+0x1f0>
 800aea6:	2b40      	cmp	r3, #64	@ 0x40
 800aea8:	d008      	beq.n	800aebc <UART_SetConfig+0x200>
 800aeaa:	e00f      	b.n	800aecc <UART_SetConfig+0x210>
 800aeac:	2300      	movs	r3, #0
 800aeae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb2:	e042      	b.n	800af3a <UART_SetConfig+0x27e>
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeba:	e03e      	b.n	800af3a <UART_SetConfig+0x27e>
 800aebc:	2304      	movs	r3, #4
 800aebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aec2:	e03a      	b.n	800af3a <UART_SetConfig+0x27e>
 800aec4:	2308      	movs	r3, #8
 800aec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeca:	e036      	b.n	800af3a <UART_SetConfig+0x27e>
 800aecc:	2310      	movs	r3, #16
 800aece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aed2:	e032      	b.n	800af3a <UART_SetConfig+0x27e>
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a30      	ldr	r2, [pc, #192]	@ (800af9c <UART_SetConfig+0x2e0>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d12a      	bne.n	800af34 <UART_SetConfig+0x278>
 800aede:	4b31      	ldr	r3, [pc, #196]	@ (800afa4 <UART_SetConfig+0x2e8>)
 800aee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aee8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aeec:	d01a      	beq.n	800af24 <UART_SetConfig+0x268>
 800aeee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aef2:	d81b      	bhi.n	800af2c <UART_SetConfig+0x270>
 800aef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aef8:	d00c      	beq.n	800af14 <UART_SetConfig+0x258>
 800aefa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aefe:	d815      	bhi.n	800af2c <UART_SetConfig+0x270>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d003      	beq.n	800af0c <UART_SetConfig+0x250>
 800af04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af08:	d008      	beq.n	800af1c <UART_SetConfig+0x260>
 800af0a:	e00f      	b.n	800af2c <UART_SetConfig+0x270>
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af12:	e012      	b.n	800af3a <UART_SetConfig+0x27e>
 800af14:	2302      	movs	r3, #2
 800af16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af1a:	e00e      	b.n	800af3a <UART_SetConfig+0x27e>
 800af1c:	2304      	movs	r3, #4
 800af1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af22:	e00a      	b.n	800af3a <UART_SetConfig+0x27e>
 800af24:	2308      	movs	r3, #8
 800af26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af2a:	e006      	b.n	800af3a <UART_SetConfig+0x27e>
 800af2c:	2310      	movs	r3, #16
 800af2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af32:	e002      	b.n	800af3a <UART_SetConfig+0x27e>
 800af34:	2310      	movs	r3, #16
 800af36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a17      	ldr	r2, [pc, #92]	@ (800af9c <UART_SetConfig+0x2e0>)
 800af40:	4293      	cmp	r3, r2
 800af42:	f040 80a8 	bne.w	800b096 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af4a:	2b08      	cmp	r3, #8
 800af4c:	d834      	bhi.n	800afb8 <UART_SetConfig+0x2fc>
 800af4e:	a201      	add	r2, pc, #4	@ (adr r2, 800af54 <UART_SetConfig+0x298>)
 800af50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af54:	0800af79 	.word	0x0800af79
 800af58:	0800afb9 	.word	0x0800afb9
 800af5c:	0800af81 	.word	0x0800af81
 800af60:	0800afb9 	.word	0x0800afb9
 800af64:	0800af87 	.word	0x0800af87
 800af68:	0800afb9 	.word	0x0800afb9
 800af6c:	0800afb9 	.word	0x0800afb9
 800af70:	0800afb9 	.word	0x0800afb9
 800af74:	0800af8f 	.word	0x0800af8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af78:	f7fc fc9e 	bl	80078b8 <HAL_RCC_GetPCLK1Freq>
 800af7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af7e:	e021      	b.n	800afc4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af80:	4b0c      	ldr	r3, [pc, #48]	@ (800afb4 <UART_SetConfig+0x2f8>)
 800af82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af84:	e01e      	b.n	800afc4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af86:	f7fc fc2b 	bl	80077e0 <HAL_RCC_GetSysClockFreq>
 800af8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af8c:	e01a      	b.n	800afc4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af94:	e016      	b.n	800afc4 <UART_SetConfig+0x308>
 800af96:	bf00      	nop
 800af98:	cfff69f3 	.word	0xcfff69f3
 800af9c:	40008000 	.word	0x40008000
 800afa0:	40013800 	.word	0x40013800
 800afa4:	40021000 	.word	0x40021000
 800afa8:	40004400 	.word	0x40004400
 800afac:	40004800 	.word	0x40004800
 800afb0:	40004c00 	.word	0x40004c00
 800afb4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800afb8:	2300      	movs	r3, #0
 800afba:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800afc2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 812a 	beq.w	800b220 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd0:	4a9e      	ldr	r2, [pc, #632]	@ (800b24c <UART_SetConfig+0x590>)
 800afd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afd6:	461a      	mov	r2, r3
 800afd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afda:	fbb3 f3f2 	udiv	r3, r3, r2
 800afde:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	4613      	mov	r3, r2
 800afe6:	005b      	lsls	r3, r3, #1
 800afe8:	4413      	add	r3, r2
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	429a      	cmp	r2, r3
 800afee:	d305      	bcc.n	800affc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d903      	bls.n	800b004 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b002:	e10d      	b.n	800b220 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b006:	2200      	movs	r2, #0
 800b008:	60bb      	str	r3, [r7, #8]
 800b00a:	60fa      	str	r2, [r7, #12]
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b010:	4a8e      	ldr	r2, [pc, #568]	@ (800b24c <UART_SetConfig+0x590>)
 800b012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b016:	b29b      	uxth	r3, r3
 800b018:	2200      	movs	r2, #0
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	607a      	str	r2, [r7, #4]
 800b01e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b026:	f7f5 fe57 	bl	8000cd8 <__aeabi_uldivmod>
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	4610      	mov	r0, r2
 800b030:	4619      	mov	r1, r3
 800b032:	f04f 0200 	mov.w	r2, #0
 800b036:	f04f 0300 	mov.w	r3, #0
 800b03a:	020b      	lsls	r3, r1, #8
 800b03c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b040:	0202      	lsls	r2, r0, #8
 800b042:	6979      	ldr	r1, [r7, #20]
 800b044:	6849      	ldr	r1, [r1, #4]
 800b046:	0849      	lsrs	r1, r1, #1
 800b048:	2000      	movs	r0, #0
 800b04a:	460c      	mov	r4, r1
 800b04c:	4605      	mov	r5, r0
 800b04e:	eb12 0804 	adds.w	r8, r2, r4
 800b052:	eb43 0905 	adc.w	r9, r3, r5
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	469a      	mov	sl, r3
 800b05e:	4693      	mov	fp, r2
 800b060:	4652      	mov	r2, sl
 800b062:	465b      	mov	r3, fp
 800b064:	4640      	mov	r0, r8
 800b066:	4649      	mov	r1, r9
 800b068:	f7f5 fe36 	bl	8000cd8 <__aeabi_uldivmod>
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	4613      	mov	r3, r2
 800b072:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b07a:	d308      	bcc.n	800b08e <UART_SetConfig+0x3d2>
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b082:	d204      	bcs.n	800b08e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6a3a      	ldr	r2, [r7, #32]
 800b08a:	60da      	str	r2, [r3, #12]
 800b08c:	e0c8      	b.n	800b220 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b094:	e0c4      	b.n	800b220 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	69db      	ldr	r3, [r3, #28]
 800b09a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b09e:	d167      	bne.n	800b170 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800b0a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0a4:	2b08      	cmp	r3, #8
 800b0a6:	d828      	bhi.n	800b0fa <UART_SetConfig+0x43e>
 800b0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b0 <UART_SetConfig+0x3f4>)
 800b0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ae:	bf00      	nop
 800b0b0:	0800b0d5 	.word	0x0800b0d5
 800b0b4:	0800b0dd 	.word	0x0800b0dd
 800b0b8:	0800b0e5 	.word	0x0800b0e5
 800b0bc:	0800b0fb 	.word	0x0800b0fb
 800b0c0:	0800b0eb 	.word	0x0800b0eb
 800b0c4:	0800b0fb 	.word	0x0800b0fb
 800b0c8:	0800b0fb 	.word	0x0800b0fb
 800b0cc:	0800b0fb 	.word	0x0800b0fb
 800b0d0:	0800b0f3 	.word	0x0800b0f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0d4:	f7fc fbf0 	bl	80078b8 <HAL_RCC_GetPCLK1Freq>
 800b0d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0da:	e014      	b.n	800b106 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0dc:	f7fc fc02 	bl	80078e4 <HAL_RCC_GetPCLK2Freq>
 800b0e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0e2:	e010      	b.n	800b106 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0e4:	4b5a      	ldr	r3, [pc, #360]	@ (800b250 <UART_SetConfig+0x594>)
 800b0e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0e8:	e00d      	b.n	800b106 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0ea:	f7fc fb79 	bl	80077e0 <HAL_RCC_GetSysClockFreq>
 800b0ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b0f0:	e009      	b.n	800b106 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b0f8:	e005      	b.n	800b106 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 8089 	beq.w	800b220 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b112:	4a4e      	ldr	r2, [pc, #312]	@ (800b24c <UART_SetConfig+0x590>)
 800b114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b118:	461a      	mov	r2, r3
 800b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b120:	005a      	lsls	r2, r3, #1
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	085b      	lsrs	r3, r3, #1
 800b128:	441a      	add	r2, r3
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b132:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	2b0f      	cmp	r3, #15
 800b138:	d916      	bls.n	800b168 <UART_SetConfig+0x4ac>
 800b13a:	6a3b      	ldr	r3, [r7, #32]
 800b13c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b140:	d212      	bcs.n	800b168 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b142:	6a3b      	ldr	r3, [r7, #32]
 800b144:	b29b      	uxth	r3, r3
 800b146:	f023 030f 	bic.w	r3, r3, #15
 800b14a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	085b      	lsrs	r3, r3, #1
 800b150:	b29b      	uxth	r3, r3
 800b152:	f003 0307 	and.w	r3, r3, #7
 800b156:	b29a      	uxth	r2, r3
 800b158:	8bfb      	ldrh	r3, [r7, #30]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	8bfa      	ldrh	r2, [r7, #30]
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	e05b      	b.n	800b220 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b16e:	e057      	b.n	800b220 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b170:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b174:	2b08      	cmp	r3, #8
 800b176:	d828      	bhi.n	800b1ca <UART_SetConfig+0x50e>
 800b178:	a201      	add	r2, pc, #4	@ (adr r2, 800b180 <UART_SetConfig+0x4c4>)
 800b17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17e:	bf00      	nop
 800b180:	0800b1a5 	.word	0x0800b1a5
 800b184:	0800b1ad 	.word	0x0800b1ad
 800b188:	0800b1b5 	.word	0x0800b1b5
 800b18c:	0800b1cb 	.word	0x0800b1cb
 800b190:	0800b1bb 	.word	0x0800b1bb
 800b194:	0800b1cb 	.word	0x0800b1cb
 800b198:	0800b1cb 	.word	0x0800b1cb
 800b19c:	0800b1cb 	.word	0x0800b1cb
 800b1a0:	0800b1c3 	.word	0x0800b1c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1a4:	f7fc fb88 	bl	80078b8 <HAL_RCC_GetPCLK1Freq>
 800b1a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b1aa:	e014      	b.n	800b1d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1ac:	f7fc fb9a 	bl	80078e4 <HAL_RCC_GetPCLK2Freq>
 800b1b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b1b2:	e010      	b.n	800b1d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1b4:	4b26      	ldr	r3, [pc, #152]	@ (800b250 <UART_SetConfig+0x594>)
 800b1b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b1b8:	e00d      	b.n	800b1d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1ba:	f7fc fb11 	bl	80077e0 <HAL_RCC_GetSysClockFreq>
 800b1be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b1c0:	e009      	b.n	800b1d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b1c8:	e005      	b.n	800b1d6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b1d4:	bf00      	nop
    }

    if (pclk != 0U)
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d021      	beq.n	800b220 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e0:	4a1a      	ldr	r2, [pc, #104]	@ (800b24c <UART_SetConfig+0x590>)
 800b1e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	085b      	lsrs	r3, r3, #1
 800b1f4:	441a      	add	r2, r3
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	2b0f      	cmp	r3, #15
 800b204:	d909      	bls.n	800b21a <UART_SetConfig+0x55e>
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b20c:	d205      	bcs.n	800b21a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	b29a      	uxth	r2, r3
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	60da      	str	r2, [r3, #12]
 800b218:	e002      	b.n	800b220 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	2201      	movs	r2, #1
 800b224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2200      	movs	r2, #0
 800b234:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	2200      	movs	r2, #0
 800b23a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b23c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b240:	4618      	mov	r0, r3
 800b242:	3730      	adds	r7, #48	@ 0x30
 800b244:	46bd      	mov	sp, r7
 800b246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b24a:	bf00      	nop
 800b24c:	08016588 	.word	0x08016588
 800b250:	00f42400 	.word	0x00f42400

0800b254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b260:	f003 0308 	and.w	r3, r3, #8
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00a      	beq.n	800b27e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	430a      	orrs	r2, r1
 800b27c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00a      	beq.n	800b2a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	430a      	orrs	r2, r1
 800b29e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a4:	f003 0302 	and.w	r3, r3, #2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00a      	beq.n	800b2c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c6:	f003 0304 	and.w	r3, r3, #4
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00a      	beq.n	800b2e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	430a      	orrs	r2, r1
 800b2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e8:	f003 0310 	and.w	r3, r3, #16
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00a      	beq.n	800b306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	430a      	orrs	r2, r1
 800b304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b30a:	f003 0320 	and.w	r3, r3, #32
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00a      	beq.n	800b328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	430a      	orrs	r2, r1
 800b326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b330:	2b00      	cmp	r3, #0
 800b332:	d01a      	beq.n	800b36a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	430a      	orrs	r2, r1
 800b348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b34e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b352:	d10a      	bne.n	800b36a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	430a      	orrs	r2, r1
 800b368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00a      	beq.n	800b38c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	430a      	orrs	r2, r1
 800b38a:	605a      	str	r2, [r3, #4]
  }
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b098      	sub	sp, #96	@ 0x60
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b3a8:	f7f8 fdf4 	bl	8003f94 <HAL_GetTick>
 800b3ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0308 	and.w	r3, r3, #8
 800b3b8:	2b08      	cmp	r3, #8
 800b3ba:	d12f      	bne.n	800b41c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f88e 	bl	800b4ec <UART_WaitOnFlagUntilTimeout>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d022      	beq.n	800b41c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3de:	e853 3f00 	ldrex	r3, [r3]
 800b3e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b3fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3fc:	e841 2300 	strex	r3, r2, [r1]
 800b400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e6      	bne.n	800b3d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b418:	2303      	movs	r3, #3
 800b41a:	e063      	b.n	800b4e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0304 	and.w	r3, r3, #4
 800b426:	2b04      	cmp	r3, #4
 800b428:	d149      	bne.n	800b4be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b42a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b432:	2200      	movs	r2, #0
 800b434:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f857 	bl	800b4ec <UART_WaitOnFlagUntilTimeout>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d03c      	beq.n	800b4be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44c:	e853 3f00 	ldrex	r3, [r3]
 800b450:	623b      	str	r3, [r7, #32]
   return(result);
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b458:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b462:	633b      	str	r3, [r7, #48]	@ 0x30
 800b464:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b46a:	e841 2300 	strex	r3, r2, [r1]
 800b46e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1e6      	bne.n	800b444 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3308      	adds	r3, #8
 800b47c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	e853 3f00 	ldrex	r3, [r3]
 800b484:	60fb      	str	r3, [r7, #12]
   return(result);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f023 0301 	bic.w	r3, r3, #1
 800b48c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3308      	adds	r3, #8
 800b494:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b496:	61fa      	str	r2, [r7, #28]
 800b498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49a:	69b9      	ldr	r1, [r7, #24]
 800b49c:	69fa      	ldr	r2, [r7, #28]
 800b49e:	e841 2300 	strex	r3, r2, [r1]
 800b4a2:	617b      	str	r3, [r7, #20]
   return(result);
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1e5      	bne.n	800b476 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2220      	movs	r2, #32
 800b4ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e012      	b.n	800b4e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2220      	movs	r2, #32
 800b4c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2220      	movs	r2, #32
 800b4ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3758      	adds	r7, #88	@ 0x58
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4fc:	e04f      	b.n	800b59e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b504:	d04b      	beq.n	800b59e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b506:	f7f8 fd45 	bl	8003f94 <HAL_GetTick>
 800b50a:	4602      	mov	r2, r0
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	69ba      	ldr	r2, [r7, #24]
 800b512:	429a      	cmp	r2, r3
 800b514:	d302      	bcc.n	800b51c <UART_WaitOnFlagUntilTimeout+0x30>
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d101      	bne.n	800b520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b51c:	2303      	movs	r3, #3
 800b51e:	e04e      	b.n	800b5be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0304 	and.w	r3, r3, #4
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d037      	beq.n	800b59e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2b80      	cmp	r3, #128	@ 0x80
 800b532:	d034      	beq.n	800b59e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	2b40      	cmp	r3, #64	@ 0x40
 800b538:	d031      	beq.n	800b59e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	f003 0308 	and.w	r3, r3, #8
 800b544:	2b08      	cmp	r3, #8
 800b546:	d110      	bne.n	800b56a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2208      	movs	r2, #8
 800b54e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f000 f920 	bl	800b796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2208      	movs	r2, #8
 800b55a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e029      	b.n	800b5be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	69db      	ldr	r3, [r3, #28]
 800b570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b578:	d111      	bne.n	800b59e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f000 f906 	bl	800b796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2220      	movs	r2, #32
 800b58e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b59a:	2303      	movs	r3, #3
 800b59c:	e00f      	b.n	800b5be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	69da      	ldr	r2, [r3, #28]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	bf0c      	ite	eq
 800b5ae:	2301      	moveq	r3, #1
 800b5b0:	2300      	movne	r3, #0
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d0a0      	beq.n	800b4fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
	...

0800b5c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b096      	sub	sp, #88	@ 0x58
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	88fa      	ldrh	r2, [r7, #6]
 800b5e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2222      	movs	r2, #34	@ 0x22
 800b5f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d02d      	beq.n	800b65a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b604:	4a40      	ldr	r2, [pc, #256]	@ (800b708 <UART_Start_Receive_DMA+0x140>)
 800b606:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b60e:	4a3f      	ldr	r2, [pc, #252]	@ (800b70c <UART_Start_Receive_DMA+0x144>)
 800b610:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b618:	4a3d      	ldr	r2, [pc, #244]	@ (800b710 <UART_Start_Receive_DMA+0x148>)
 800b61a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b622:	2200      	movs	r2, #0
 800b624:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3324      	adds	r3, #36	@ 0x24
 800b632:	4619      	mov	r1, r3
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b638:	461a      	mov	r2, r3
 800b63a:	88fb      	ldrh	r3, [r7, #6]
 800b63c:	f7fa fb16 	bl	8005c6c <HAL_DMA_Start_IT>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d009      	beq.n	800b65a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2210      	movs	r2, #16
 800b64a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2220      	movs	r2, #32
 800b652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e051      	b.n	800b6fe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d018      	beq.n	800b694 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b676:	657b      	str	r3, [r7, #84]	@ 0x54
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	461a      	mov	r2, r3
 800b67e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b680:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b682:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b684:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b688:	e841 2300 	strex	r3, r2, [r1]
 800b68c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b68e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1e6      	bne.n	800b662 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3308      	adds	r3, #8
 800b69a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69e:	e853 3f00 	ldrex	r3, [r3]
 800b6a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a6:	f043 0301 	orr.w	r3, r3, #1
 800b6aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b6b4:	637a      	str	r2, [r7, #52]	@ 0x34
 800b6b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b6ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6bc:	e841 2300 	strex	r3, r2, [r1]
 800b6c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e5      	bne.n	800b694 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	3308      	adds	r3, #8
 800b6ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	e853 3f00 	ldrex	r3, [r3]
 800b6d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b6e8:	623a      	str	r2, [r7, #32]
 800b6ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ec:	69f9      	ldr	r1, [r7, #28]
 800b6ee:	6a3a      	ldr	r2, [r7, #32]
 800b6f0:	e841 2300 	strex	r3, r2, [r1]
 800b6f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1e5      	bne.n	800b6c8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3758      	adds	r7, #88	@ 0x58
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	0800b863 	.word	0x0800b863
 800b70c:	0800b98f 	.word	0x0800b98f
 800b710:	0800b9cd 	.word	0x0800b9cd

0800b714 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b714:	b480      	push	{r7}
 800b716:	b08f      	sub	sp, #60	@ 0x3c
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b722:	6a3b      	ldr	r3, [r7, #32]
 800b724:	e853 3f00 	ldrex	r3, [r3]
 800b728:	61fb      	str	r3, [r7, #28]
   return(result);
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b730:	637b      	str	r3, [r7, #52]	@ 0x34
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b73c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b742:	e841 2300 	strex	r3, r2, [r1]
 800b746:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1e6      	bne.n	800b71c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3308      	adds	r3, #8
 800b754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	e853 3f00 	ldrex	r3, [r3]
 800b75c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b764:	633b      	str	r3, [r7, #48]	@ 0x30
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3308      	adds	r3, #8
 800b76c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b76e:	61ba      	str	r2, [r7, #24]
 800b770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b772:	6979      	ldr	r1, [r7, #20]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	e841 2300 	strex	r3, r2, [r1]
 800b77a:	613b      	str	r3, [r7, #16]
   return(result);
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1e5      	bne.n	800b74e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2220      	movs	r2, #32
 800b786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b78a:	bf00      	nop
 800b78c:	373c      	adds	r7, #60	@ 0x3c
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b796:	b480      	push	{r7}
 800b798:	b095      	sub	sp, #84	@ 0x54
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a6:	e853 3f00 	ldrex	r3, [r3]
 800b7aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b7c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b7c4:	e841 2300 	strex	r3, r2, [r1]
 800b7c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e6      	bne.n	800b79e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7e6:	f023 0301 	bic.w	r3, r3, #1
 800b7ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e3      	bne.n	800b7d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d118      	bne.n	800b842 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	e853 3f00 	ldrex	r3, [r3]
 800b81c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	f023 0310 	bic.w	r3, r3, #16
 800b824:	647b      	str	r3, [r7, #68]	@ 0x44
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b82e:	61bb      	str	r3, [r7, #24]
 800b830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b832:	6979      	ldr	r1, [r7, #20]
 800b834:	69ba      	ldr	r2, [r7, #24]
 800b836:	e841 2300 	strex	r3, r2, [r1]
 800b83a:	613b      	str	r3, [r7, #16]
   return(result);
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1e6      	bne.n	800b810 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2220      	movs	r2, #32
 800b846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b856:	bf00      	nop
 800b858:	3754      	adds	r7, #84	@ 0x54
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b09c      	sub	sp, #112	@ 0x70
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b86e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 0320 	and.w	r3, r3, #32
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d171      	bne.n	800b962 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b87e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b880:	2200      	movs	r2, #0
 800b882:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b88e:	e853 3f00 	ldrex	r3, [r3]
 800b892:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b896:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b89a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b89c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8ac:	e841 2300 	strex	r3, r2, [r1]
 800b8b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e6      	bne.n	800b886 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3308      	adds	r3, #8
 800b8be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c2:	e853 3f00 	ldrex	r3, [r3]
 800b8c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ca:	f023 0301 	bic.w	r3, r3, #1
 800b8ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800b8d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b8d8:	647a      	str	r2, [r7, #68]	@ 0x44
 800b8da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8e0:	e841 2300 	strex	r3, r2, [r1]
 800b8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e5      	bne.n	800b8b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f6:	e853 3f00 	ldrex	r3, [r3]
 800b8fa:	623b      	str	r3, [r7, #32]
   return(result);
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b902:	663b      	str	r3, [r7, #96]	@ 0x60
 800b904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3308      	adds	r3, #8
 800b90a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b90c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e5      	bne.n	800b8ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b922:	2220      	movs	r2, #32
 800b924:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b92a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d118      	bne.n	800b962 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f023 0310 	bic.w	r3, r3, #16
 800b944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b94e:	61fb      	str	r3, [r7, #28]
 800b950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b952:	69b9      	ldr	r1, [r7, #24]
 800b954:	69fa      	ldr	r2, [r7, #28]
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	617b      	str	r3, [r7, #20]
   return(result);
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e6      	bne.n	800b930 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b964:	2200      	movs	r2, #0
 800b966:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b96a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d107      	bne.n	800b980 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b972:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b976:	4619      	mov	r1, r3
 800b978:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b97a:	f7ff f993 	bl	800aca4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b97e:	e002      	b.n	800b986 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b980:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b982:	f7f7 fd51 	bl	8003428 <HAL_UART_RxCpltCallback>
}
 800b986:	bf00      	nop
 800b988:	3770      	adds	r7, #112	@ 0x70
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b99a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d109      	bne.n	800b9be <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b9b0:	085b      	lsrs	r3, r3, #1
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f7ff f974 	bl	800aca4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b9bc:	e002      	b.n	800b9c4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f7f7 fd68 	bl	8003494 <HAL_UART_RxHalfCpltCallback>
}
 800b9c4:	bf00      	nop
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9f4:	2b80      	cmp	r3, #128	@ 0x80
 800b9f6:	d109      	bne.n	800ba0c <UART_DMAError+0x40>
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2b21      	cmp	r3, #33	@ 0x21
 800b9fc:	d106      	bne.n	800ba0c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ba06:	6978      	ldr	r0, [r7, #20]
 800ba08:	f7ff fe84 	bl	800b714 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba16:	2b40      	cmp	r3, #64	@ 0x40
 800ba18:	d109      	bne.n	800ba2e <UART_DMAError+0x62>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b22      	cmp	r3, #34	@ 0x22
 800ba1e:	d106      	bne.n	800ba2e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ba28:	6978      	ldr	r0, [r7, #20]
 800ba2a:	f7ff feb4 	bl	800b796 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba34:	f043 0210 	orr.w	r2, r3, #16
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba3e:	6978      	ldr	r0, [r7, #20]
 800ba40:	f7ff f926 	bl	800ac90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba44:	bf00      	nop
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f7ff f914 	bl	800ac90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba68:	bf00      	nop
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b088      	sub	sp, #32
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	e853 3f00 	ldrex	r3, [r3]
 800ba84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	461a      	mov	r2, r3
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	61bb      	str	r3, [r7, #24]
 800ba98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9a:	6979      	ldr	r1, [r7, #20]
 800ba9c:	69ba      	ldr	r2, [r7, #24]
 800ba9e:	e841 2300 	strex	r3, r2, [r1]
 800baa2:	613b      	str	r3, [r7, #16]
   return(result);
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1e6      	bne.n	800ba78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2220      	movs	r2, #32
 800baae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7f7 fd21 	bl	8003500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800babe:	bf00      	nop
 800bac0:	3720      	adds	r7, #32
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bace:	bf00      	nop
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800baf6:	bf00      	nop
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b085      	sub	sp, #20
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d101      	bne.n	800bb18 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb14:	2302      	movs	r3, #2
 800bb16:	e027      	b.n	800bb68 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2224      	movs	r2, #36	@ 0x24
 800bb24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f022 0201 	bic.w	r2, r2, #1
 800bb3e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3714      	adds	r7, #20
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d101      	bne.n	800bb8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e02d      	b.n	800bbe8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2224      	movs	r2, #36	@ 0x24
 800bb98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f022 0201 	bic.w	r2, r2, #1
 800bbb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f84f 	bl	800bc6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2220      	movs	r2, #32
 800bbda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d101      	bne.n	800bc08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc04:	2302      	movs	r3, #2
 800bc06:	e02d      	b.n	800bc64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2224      	movs	r2, #36	@ 0x24
 800bc14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f022 0201 	bic.w	r2, r2, #1
 800bc2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	430a      	orrs	r2, r1
 800bc42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f811 	bl	800bc6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2220      	movs	r2, #32
 800bc56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d108      	bne.n	800bc8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc8c:	e031      	b.n	800bcf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc8e:	2308      	movs	r3, #8
 800bc90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc92:	2308      	movs	r3, #8
 800bc94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	0e5b      	lsrs	r3, r3, #25
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	f003 0307 	and.w	r3, r3, #7
 800bca4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	0f5b      	lsrs	r3, r3, #29
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	f003 0307 	and.w	r3, r3, #7
 800bcb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcb6:	7bbb      	ldrb	r3, [r7, #14]
 800bcb8:	7b3a      	ldrb	r2, [r7, #12]
 800bcba:	4911      	ldr	r1, [pc, #68]	@ (800bd00 <UARTEx_SetNbDataToProcess+0x94>)
 800bcbc:	5c8a      	ldrb	r2, [r1, r2]
 800bcbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcc2:	7b3a      	ldrb	r2, [r7, #12]
 800bcc4:	490f      	ldr	r1, [pc, #60]	@ (800bd04 <UARTEx_SetNbDataToProcess+0x98>)
 800bcc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcc8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
 800bcd6:	7b7a      	ldrb	r2, [r7, #13]
 800bcd8:	4909      	ldr	r1, [pc, #36]	@ (800bd00 <UARTEx_SetNbDataToProcess+0x94>)
 800bcda:	5c8a      	ldrb	r2, [r1, r2]
 800bcdc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bce0:	7b7a      	ldrb	r2, [r7, #13]
 800bce2:	4908      	ldr	r1, [pc, #32]	@ (800bd04 <UARTEx_SetNbDataToProcess+0x98>)
 800bce4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bce6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bcf2:	bf00      	nop
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	080165a0 	.word	0x080165a0
 800bd04:	080165a8 	.word	0x080165a8

0800bd08 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800bd0c:	4907      	ldr	r1, [pc, #28]	@ (800bd2c <MX_FATFS_Init+0x24>)
 800bd0e:	4808      	ldr	r0, [pc, #32]	@ (800bd30 <MX_FATFS_Init+0x28>)
 800bd10:	f002 fe24 	bl	800e95c <FATFS_LinkDriver>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d002      	beq.n	800bd20 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800bd1a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1e:	e003      	b.n	800bd28 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800bd20:	4b04      	ldr	r3, [pc, #16]	@ (800bd34 <MX_FATFS_Init+0x2c>)
 800bd22:	2201      	movs	r2, #1
 800bd24:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800bd26:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	200011ec 	.word	0x200011ec
 800bd30:	20000018 	.word	0x20000018
 800bd34:	200011f0 	.word	0x200011f0

0800bd38 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bd3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800bd52:	79fb      	ldrb	r3, [r7, #7]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f7 fd75 	bl	8003844 <USER_SPI_initialize>
 800bd5a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7f7 fe53 	bl	8003a1c <USER_SPI_status>
 800bd76:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60b9      	str	r1, [r7, #8]
 800bd88:	607a      	str	r2, [r7, #4]
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800bd90:	7bf8      	ldrb	r0, [r7, #15]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	f7f7 fe56 	bl	8003a48 <USER_SPI_read>
 800bd9c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b084      	sub	sp, #16
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
 800bdb0:	603b      	str	r3, [r7, #0]
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800bdb6:	7bf8      	ldrb	r0, [r7, #15]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	68b9      	ldr	r1, [r7, #8]
 800bdbe:	f7f7 fea9 	bl	8003b14 <USER_SPI_write>
 800bdc2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	603a      	str	r2, [r7, #0]
 800bdd6:	71fb      	strb	r3, [r7, #7]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800bddc:	79b9      	ldrb	r1, [r7, #6]
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	683a      	ldr	r2, [r7, #0]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7f7 ff12 	bl	8003c0c <USER_SPI_ioctl>
 800bde8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
	...

0800bdf4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	4a08      	ldr	r2, [pc, #32]	@ (800be24 <disk_status+0x30>)
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	4413      	add	r3, r2
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	79fa      	ldrb	r2, [r7, #7]
 800be0c:	4905      	ldr	r1, [pc, #20]	@ (800be24 <disk_status+0x30>)
 800be0e:	440a      	add	r2, r1
 800be10:	7a12      	ldrb	r2, [r2, #8]
 800be12:	4610      	mov	r0, r2
 800be14:	4798      	blx	r3
 800be16:	4603      	mov	r3, r0
 800be18:	73fb      	strb	r3, [r7, #15]
  return stat;
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	2000121c 	.word	0x2000121c

0800be28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800be36:	79fb      	ldrb	r3, [r7, #7]
 800be38:	4a0d      	ldr	r2, [pc, #52]	@ (800be70 <disk_initialize+0x48>)
 800be3a:	5cd3      	ldrb	r3, [r2, r3]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d111      	bne.n	800be64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800be40:	79fb      	ldrb	r3, [r7, #7]
 800be42:	4a0b      	ldr	r2, [pc, #44]	@ (800be70 <disk_initialize+0x48>)
 800be44:	2101      	movs	r1, #1
 800be46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	4a09      	ldr	r2, [pc, #36]	@ (800be70 <disk_initialize+0x48>)
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4413      	add	r3, r2
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	79fa      	ldrb	r2, [r7, #7]
 800be56:	4906      	ldr	r1, [pc, #24]	@ (800be70 <disk_initialize+0x48>)
 800be58:	440a      	add	r2, r1
 800be5a:	7a12      	ldrb	r2, [r2, #8]
 800be5c:	4610      	mov	r0, r2
 800be5e:	4798      	blx	r3
 800be60:	4603      	mov	r3, r0
 800be62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800be64:	7bfb      	ldrb	r3, [r7, #15]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	2000121c 	.word	0x2000121c

0800be74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800be74:	b590      	push	{r4, r7, lr}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60b9      	str	r1, [r7, #8]
 800be7c:	607a      	str	r2, [r7, #4]
 800be7e:	603b      	str	r3, [r7, #0]
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800be84:	7bfb      	ldrb	r3, [r7, #15]
 800be86:	4a0a      	ldr	r2, [pc, #40]	@ (800beb0 <disk_read+0x3c>)
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4413      	add	r3, r2
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	689c      	ldr	r4, [r3, #8]
 800be90:	7bfb      	ldrb	r3, [r7, #15]
 800be92:	4a07      	ldr	r2, [pc, #28]	@ (800beb0 <disk_read+0x3c>)
 800be94:	4413      	add	r3, r2
 800be96:	7a18      	ldrb	r0, [r3, #8]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	68b9      	ldr	r1, [r7, #8]
 800be9e:	47a0      	blx	r4
 800bea0:	4603      	mov	r3, r0
 800bea2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd90      	pop	{r4, r7, pc}
 800beae:	bf00      	nop
 800beb0:	2000121c 	.word	0x2000121c

0800beb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800beb4:	b590      	push	{r4, r7, lr}
 800beb6:	b087      	sub	sp, #28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60b9      	str	r1, [r7, #8]
 800bebc:	607a      	str	r2, [r7, #4]
 800bebe:	603b      	str	r3, [r7, #0]
 800bec0:	4603      	mov	r3, r0
 800bec2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	4a0a      	ldr	r2, [pc, #40]	@ (800bef0 <disk_write+0x3c>)
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	68dc      	ldr	r4, [r3, #12]
 800bed0:	7bfb      	ldrb	r3, [r7, #15]
 800bed2:	4a07      	ldr	r2, [pc, #28]	@ (800bef0 <disk_write+0x3c>)
 800bed4:	4413      	add	r3, r2
 800bed6:	7a18      	ldrb	r0, [r3, #8]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	68b9      	ldr	r1, [r7, #8]
 800bede:	47a0      	blx	r4
 800bee0:	4603      	mov	r3, r0
 800bee2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	371c      	adds	r7, #28
 800beea:	46bd      	mov	sp, r7
 800beec:	bd90      	pop	{r4, r7, pc}
 800beee:	bf00      	nop
 800bef0:	2000121c 	.word	0x2000121c

0800bef4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	4603      	mov	r3, r0
 800befc:	603a      	str	r2, [r7, #0]
 800befe:	71fb      	strb	r3, [r7, #7]
 800bf00:	460b      	mov	r3, r1
 800bf02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bf04:	79fb      	ldrb	r3, [r7, #7]
 800bf06:	4a09      	ldr	r2, [pc, #36]	@ (800bf2c <disk_ioctl+0x38>)
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	79fa      	ldrb	r2, [r7, #7]
 800bf12:	4906      	ldr	r1, [pc, #24]	@ (800bf2c <disk_ioctl+0x38>)
 800bf14:	440a      	add	r2, r1
 800bf16:	7a10      	ldrb	r0, [r2, #8]
 800bf18:	79b9      	ldrb	r1, [r7, #6]
 800bf1a:	683a      	ldr	r2, [r7, #0]
 800bf1c:	4798      	blx	r3
 800bf1e:	4603      	mov	r3, r0
 800bf20:	73fb      	strb	r3, [r7, #15]
  return res;
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	2000121c 	.word	0x2000121c

0800bf30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bf40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bf44:	021b      	lsls	r3, r3, #8
 800bf46:	b21a      	sxth	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	b21b      	sxth	r3, r3
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	b21b      	sxth	r3, r3
 800bf52:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bf54:	89fb      	ldrh	r3, [r7, #14]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bf62:	b480      	push	{r7}
 800bf64:	b085      	sub	sp, #20
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	3303      	adds	r3, #3
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	021b      	lsls	r3, r3, #8
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	3202      	adds	r2, #2
 800bf7a:	7812      	ldrb	r2, [r2, #0]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	3201      	adds	r2, #1
 800bf88:	7812      	ldrb	r2, [r2, #0]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	021b      	lsls	r3, r3, #8
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	7812      	ldrb	r2, [r2, #0]
 800bf96:	4313      	orrs	r3, r2
 800bf98:	60fb      	str	r3, [r7, #12]
	return rv;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	607a      	str	r2, [r7, #4]
 800bfba:	887a      	ldrh	r2, [r7, #2]
 800bfbc:	b2d2      	uxtb	r2, r2
 800bfbe:	701a      	strb	r2, [r3, #0]
 800bfc0:	887b      	ldrh	r3, [r7, #2]
 800bfc2:	0a1b      	lsrs	r3, r3, #8
 800bfc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	1c5a      	adds	r2, r3, #1
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	887a      	ldrh	r2, [r7, #2]
 800bfce:	b2d2      	uxtb	r2, r2
 800bfd0:	701a      	strb	r2, [r3, #0]
}
 800bfd2:	bf00      	nop
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	607a      	str	r2, [r7, #4]
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	b2d2      	uxtb	r2, r2
 800bff2:	701a      	strb	r2, [r3, #0]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	0a1b      	lsrs	r3, r3, #8
 800bff8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	b2d2      	uxtb	r2, r2
 800c004:	701a      	strb	r2, [r3, #0]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	0a1b      	lsrs	r3, r3, #8
 800c00a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	1c5a      	adds	r2, r3, #1
 800c010:	607a      	str	r2, [r7, #4]
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	b2d2      	uxtb	r2, r2
 800c016:	701a      	strb	r2, [r3, #0]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	0a1b      	lsrs	r3, r3, #8
 800c01c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	1c5a      	adds	r2, r3, #1
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	b2d2      	uxtb	r2, r2
 800c028:	701a      	strb	r2, [r3, #0]
}
 800c02a:	bf00      	nop
 800c02c:	370c      	adds	r7, #12
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c036:	b480      	push	{r7}
 800c038:	b087      	sub	sp, #28
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	60f8      	str	r0, [r7, #12]
 800c03e:	60b9      	str	r1, [r7, #8]
 800c040:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00d      	beq.n	800c06c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	1c53      	adds	r3, r2, #1
 800c054:	613b      	str	r3, [r7, #16]
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	1c59      	adds	r1, r3, #1
 800c05a:	6179      	str	r1, [r7, #20]
 800c05c:	7812      	ldrb	r2, [r2, #0]
 800c05e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	3b01      	subs	r3, #1
 800c064:	607b      	str	r3, [r7, #4]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1f1      	bne.n	800c050 <mem_cpy+0x1a>
	}
}
 800c06c:	bf00      	nop
 800c06e:	371c      	adds	r7, #28
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c078:	b480      	push	{r7}
 800c07a:	b087      	sub	sp, #28
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	617a      	str	r2, [r7, #20]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	3b01      	subs	r3, #1
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1f3      	bne.n	800c088 <mem_set+0x10>
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	371c      	adds	r7, #28
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c0ae:	b480      	push	{r7}
 800c0b0:	b089      	sub	sp, #36	@ 0x24
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	60f8      	str	r0, [r7, #12]
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	61fb      	str	r3, [r7, #28]
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	1c5a      	adds	r2, r3, #1
 800c0ca:	61fa      	str	r2, [r7, #28]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	1c5a      	adds	r2, r3, #1
 800c0d4:	61ba      	str	r2, [r7, #24]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	1acb      	subs	r3, r1, r3
 800c0da:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	607b      	str	r3, [r7, #4]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <mem_cmp+0x40>
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d0eb      	beq.n	800c0c6 <mem_cmp+0x18>

	return r;
 800c0ee:	697b      	ldr	r3, [r7, #20]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3724      	adds	r7, #36	@ 0x24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c106:	e002      	b.n	800c10e <chk_chr+0x12>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	3301      	adds	r3, #1
 800c10c:	607b      	str	r3, [r7, #4]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d005      	beq.n	800c122 <chk_chr+0x26>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	4293      	cmp	r3, r2
 800c120:	d1f2      	bne.n	800c108 <chk_chr+0xc>
	return *str;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	781b      	ldrb	r3, [r3, #0]
}
 800c126:	4618      	mov	r0, r3
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b082      	sub	sp, #8
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d009      	beq.n	800c154 <lock_fs+0x22>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	4618      	mov	r0, r3
 800c146:	f002 fc42 	bl	800e9ce <ff_req_grant>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <lock_fs+0x22>
 800c150:	2301      	movs	r3, #1
 800c152:	e000      	b.n	800c156 <lock_fs+0x24>
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3708      	adds	r7, #8
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b082      	sub	sp, #8
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	460b      	mov	r3, r1
 800c168:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d00d      	beq.n	800c18c <unlock_fs+0x2e>
 800c170:	78fb      	ldrb	r3, [r7, #3]
 800c172:	2b0c      	cmp	r3, #12
 800c174:	d00a      	beq.n	800c18c <unlock_fs+0x2e>
 800c176:	78fb      	ldrb	r3, [r7, #3]
 800c178:	2b0b      	cmp	r3, #11
 800c17a:	d007      	beq.n	800c18c <unlock_fs+0x2e>
 800c17c:	78fb      	ldrb	r3, [r7, #3]
 800c17e:	2b0f      	cmp	r3, #15
 800c180:	d004      	beq.n	800c18c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	4618      	mov	r0, r3
 800c188:	f002 fc36 	bl	800e9f8 <ff_rel_grant>
	}
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c19e:	2300      	movs	r3, #0
 800c1a0:	60bb      	str	r3, [r7, #8]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	e029      	b.n	800c1fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c1a8:	4a27      	ldr	r2, [pc, #156]	@ (800c248 <chk_lock+0xb4>)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	011b      	lsls	r3, r3, #4
 800c1ae:	4413      	add	r3, r2
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d01d      	beq.n	800c1f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1b6:	4a24      	ldr	r2, [pc, #144]	@ (800c248 <chk_lock+0xb4>)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	011b      	lsls	r3, r3, #4
 800c1bc:	4413      	add	r3, r2
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d116      	bne.n	800c1f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c1c8:	4a1f      	ldr	r2, [pc, #124]	@ (800c248 <chk_lock+0xb4>)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	011b      	lsls	r3, r3, #4
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d10c      	bne.n	800c1f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1dc:	4a1a      	ldr	r2, [pc, #104]	@ (800c248 <chk_lock+0xb4>)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	011b      	lsls	r3, r3, #4
 800c1e2:	4413      	add	r3, r2
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d102      	bne.n	800c1f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c1f0:	e007      	b.n	800c202 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	60fb      	str	r3, [r7, #12]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d9d2      	bls.n	800c1a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2b02      	cmp	r3, #2
 800c206:	d109      	bne.n	800c21c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d102      	bne.n	800c214 <chk_lock+0x80>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b02      	cmp	r3, #2
 800c212:	d101      	bne.n	800c218 <chk_lock+0x84>
 800c214:	2300      	movs	r3, #0
 800c216:	e010      	b.n	800c23a <chk_lock+0xa6>
 800c218:	2312      	movs	r3, #18
 800c21a:	e00e      	b.n	800c23a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d108      	bne.n	800c234 <chk_lock+0xa0>
 800c222:	4a09      	ldr	r2, [pc, #36]	@ (800c248 <chk_lock+0xb4>)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	011b      	lsls	r3, r3, #4
 800c228:	4413      	add	r3, r2
 800c22a:	330c      	adds	r3, #12
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c232:	d101      	bne.n	800c238 <chk_lock+0xa4>
 800c234:	2310      	movs	r3, #16
 800c236:	e000      	b.n	800c23a <chk_lock+0xa6>
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	200011fc 	.word	0x200011fc

0800c24c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c252:	2300      	movs	r3, #0
 800c254:	607b      	str	r3, [r7, #4]
 800c256:	e002      	b.n	800c25e <enq_lock+0x12>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	3301      	adds	r3, #1
 800c25c:	607b      	str	r3, [r7, #4]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d806      	bhi.n	800c272 <enq_lock+0x26>
 800c264:	4a09      	ldr	r2, [pc, #36]	@ (800c28c <enq_lock+0x40>)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	011b      	lsls	r3, r3, #4
 800c26a:	4413      	add	r3, r2
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1f2      	bne.n	800c258 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b02      	cmp	r3, #2
 800c276:	bf14      	ite	ne
 800c278:	2301      	movne	r3, #1
 800c27a:	2300      	moveq	r3, #0
 800c27c:	b2db      	uxtb	r3, r3
}
 800c27e:	4618      	mov	r0, r3
 800c280:	370c      	adds	r7, #12
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	200011fc 	.word	0x200011fc

0800c290 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c29a:	2300      	movs	r3, #0
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	e01f      	b.n	800c2e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c2a0:	4a41      	ldr	r2, [pc, #260]	@ (800c3a8 <inc_lock+0x118>)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	011b      	lsls	r3, r3, #4
 800c2a6:	4413      	add	r3, r2
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d113      	bne.n	800c2da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c2b2:	4a3d      	ldr	r2, [pc, #244]	@ (800c3a8 <inc_lock+0x118>)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	011b      	lsls	r3, r3, #4
 800c2b8:	4413      	add	r3, r2
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d109      	bne.n	800c2da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c2c6:	4a38      	ldr	r2, [pc, #224]	@ (800c3a8 <inc_lock+0x118>)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	4413      	add	r3, r2
 800c2ce:	3308      	adds	r3, #8
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d006      	beq.n	800c2e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	60fb      	str	r3, [r7, #12]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d9dc      	bls.n	800c2a0 <inc_lock+0x10>
 800c2e6:	e000      	b.n	800c2ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c2e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d132      	bne.n	800c356 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	e002      	b.n	800c2fc <inc_lock+0x6c>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d806      	bhi.n	800c310 <inc_lock+0x80>
 800c302:	4a29      	ldr	r2, [pc, #164]	@ (800c3a8 <inc_lock+0x118>)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	4413      	add	r3, r2
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1f2      	bne.n	800c2f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b02      	cmp	r3, #2
 800c314:	d101      	bne.n	800c31a <inc_lock+0x8a>
 800c316:	2300      	movs	r3, #0
 800c318:	e040      	b.n	800c39c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	4922      	ldr	r1, [pc, #136]	@ (800c3a8 <inc_lock+0x118>)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	011b      	lsls	r3, r3, #4
 800c324:	440b      	add	r3, r1
 800c326:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689a      	ldr	r2, [r3, #8]
 800c32c:	491e      	ldr	r1, [pc, #120]	@ (800c3a8 <inc_lock+0x118>)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	011b      	lsls	r3, r3, #4
 800c332:	440b      	add	r3, r1
 800c334:	3304      	adds	r3, #4
 800c336:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	695a      	ldr	r2, [r3, #20]
 800c33c:	491a      	ldr	r1, [pc, #104]	@ (800c3a8 <inc_lock+0x118>)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	011b      	lsls	r3, r3, #4
 800c342:	440b      	add	r3, r1
 800c344:	3308      	adds	r3, #8
 800c346:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c348:	4a17      	ldr	r2, [pc, #92]	@ (800c3a8 <inc_lock+0x118>)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	011b      	lsls	r3, r3, #4
 800c34e:	4413      	add	r3, r2
 800c350:	330c      	adds	r3, #12
 800c352:	2200      	movs	r2, #0
 800c354:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d009      	beq.n	800c370 <inc_lock+0xe0>
 800c35c:	4a12      	ldr	r2, [pc, #72]	@ (800c3a8 <inc_lock+0x118>)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	011b      	lsls	r3, r3, #4
 800c362:	4413      	add	r3, r2
 800c364:	330c      	adds	r3, #12
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <inc_lock+0xe0>
 800c36c:	2300      	movs	r3, #0
 800c36e:	e015      	b.n	800c39c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d108      	bne.n	800c388 <inc_lock+0xf8>
 800c376:	4a0c      	ldr	r2, [pc, #48]	@ (800c3a8 <inc_lock+0x118>)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	011b      	lsls	r3, r3, #4
 800c37c:	4413      	add	r3, r2
 800c37e:	330c      	adds	r3, #12
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	3301      	adds	r3, #1
 800c384:	b29a      	uxth	r2, r3
 800c386:	e001      	b.n	800c38c <inc_lock+0xfc>
 800c388:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c38c:	4906      	ldr	r1, [pc, #24]	@ (800c3a8 <inc_lock+0x118>)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	011b      	lsls	r3, r3, #4
 800c392:	440b      	add	r3, r1
 800c394:	330c      	adds	r3, #12
 800c396:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3301      	adds	r3, #1
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr
 800c3a8:	200011fc 	.word	0x200011fc

0800c3ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	607b      	str	r3, [r7, #4]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d825      	bhi.n	800c40c <dec_lock+0x60>
		n = Files[i].ctr;
 800c3c0:	4a17      	ldr	r2, [pc, #92]	@ (800c420 <dec_lock+0x74>)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	011b      	lsls	r3, r3, #4
 800c3c6:	4413      	add	r3, r2
 800c3c8:	330c      	adds	r3, #12
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c3ce:	89fb      	ldrh	r3, [r7, #14]
 800c3d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3d4:	d101      	bne.n	800c3da <dec_lock+0x2e>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c3da:	89fb      	ldrh	r3, [r7, #14]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <dec_lock+0x3a>
 800c3e0:	89fb      	ldrh	r3, [r7, #14]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c3e6:	4a0e      	ldr	r2, [pc, #56]	@ (800c420 <dec_lock+0x74>)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	011b      	lsls	r3, r3, #4
 800c3ec:	4413      	add	r3, r2
 800c3ee:	330c      	adds	r3, #12
 800c3f0:	89fa      	ldrh	r2, [r7, #14]
 800c3f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c3f4:	89fb      	ldrh	r3, [r7, #14]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d105      	bne.n	800c406 <dec_lock+0x5a>
 800c3fa:	4a09      	ldr	r2, [pc, #36]	@ (800c420 <dec_lock+0x74>)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	4413      	add	r3, r2
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	737b      	strb	r3, [r7, #13]
 800c40a:	e001      	b.n	800c410 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c40c:	2302      	movs	r3, #2
 800c40e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c410:	7b7b      	ldrb	r3, [r7, #13]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	200011fc 	.word	0x200011fc

0800c424 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c42c:	2300      	movs	r3, #0
 800c42e:	60fb      	str	r3, [r7, #12]
 800c430:	e010      	b.n	800c454 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c432:	4a0d      	ldr	r2, [pc, #52]	@ (800c468 <clear_lock+0x44>)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	011b      	lsls	r3, r3, #4
 800c438:	4413      	add	r3, r2
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d105      	bne.n	800c44e <clear_lock+0x2a>
 800c442:	4a09      	ldr	r2, [pc, #36]	@ (800c468 <clear_lock+0x44>)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	011b      	lsls	r3, r3, #4
 800c448:	4413      	add	r3, r2
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	60fb      	str	r3, [r7, #12]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d9eb      	bls.n	800c432 <clear_lock+0xe>
	}
}
 800c45a:	bf00      	nop
 800c45c:	bf00      	nop
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	200011fc 	.word	0x200011fc

0800c46c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	78db      	ldrb	r3, [r3, #3]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d034      	beq.n	800c4ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c484:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	7858      	ldrb	r0, [r3, #1]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c490:	2301      	movs	r3, #1
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	f7ff fd0e 	bl	800beb4 <disk_write>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	73fb      	strb	r3, [r7, #15]
 800c4a2:	e022      	b.n	800c4ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ae:	697a      	ldr	r2, [r7, #20]
 800c4b0:	1ad2      	subs	r2, r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d217      	bcs.n	800c4ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	789b      	ldrb	r3, [r3, #2]
 800c4be:	613b      	str	r3, [r7, #16]
 800c4c0:	e010      	b.n	800c4e4 <sync_window+0x78>
					wsect += fs->fsize;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7858      	ldrb	r0, [r3, #1]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	f7ff fceb 	bl	800beb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	613b      	str	r3, [r7, #16]
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d8eb      	bhi.n	800c4c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c4fe:	2300      	movs	r3, #0
 800c500:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d01b      	beq.n	800c544 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff ffad 	bl	800c46c <sync_window>
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c516:	7bfb      	ldrb	r3, [r7, #15]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d113      	bne.n	800c544 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	7858      	ldrb	r0, [r3, #1]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c526:	2301      	movs	r3, #1
 800c528:	683a      	ldr	r2, [r7, #0]
 800c52a:	f7ff fca3 	bl	800be74 <disk_read>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d004      	beq.n	800c53e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c534:	f04f 33ff 	mov.w	r3, #4294967295
 800c538:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800c544:	7bfb      	ldrb	r3, [r7, #15]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
	...

0800c550 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff ff87 	bl	800c46c <sync_window>
 800c55e:	4603      	mov	r3, r0
 800c560:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c562:	7bfb      	ldrb	r3, [r7, #15]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d158      	bne.n	800c61a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b03      	cmp	r3, #3
 800c56e:	d148      	bne.n	800c602 <sync_fs+0xb2>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	791b      	ldrb	r3, [r3, #4]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d144      	bne.n	800c602 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	3334      	adds	r3, #52	@ 0x34
 800c57c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c580:	2100      	movs	r1, #0
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff fd78 	bl	800c078 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	3334      	adds	r3, #52	@ 0x34
 800c58c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c590:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff fd07 	bl	800bfa8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3334      	adds	r3, #52	@ 0x34
 800c59e:	4921      	ldr	r1, [pc, #132]	@ (800c624 <sync_fs+0xd4>)
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7ff fd1c 	bl	800bfde <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	3334      	adds	r3, #52	@ 0x34
 800c5aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c5ae:	491e      	ldr	r1, [pc, #120]	@ (800c628 <sync_fs+0xd8>)
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7ff fd14 	bl	800bfde <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	3334      	adds	r3, #52	@ 0x34
 800c5ba:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	f7ff fd0a 	bl	800bfde <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3334      	adds	r3, #52	@ 0x34
 800c5ce:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f7ff fd00 	bl	800bfde <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7858      	ldrb	r0, [r3, #1]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	f7ff fc5c 	bl	800beb4 <disk_write>
			fs->fsi_flag = 0;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	785b      	ldrb	r3, [r3, #1]
 800c606:	2200      	movs	r2, #0
 800c608:	2100      	movs	r1, #0
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7ff fc72 	bl	800bef4 <disk_ioctl>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <sync_fs+0xca>
 800c616:	2301      	movs	r3, #1
 800c618:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	41615252 	.word	0x41615252
 800c628:	61417272 	.word	0x61417272

0800c62c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	3b02      	subs	r3, #2
 800c63a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	3b02      	subs	r3, #2
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	429a      	cmp	r2, r3
 800c646:	d301      	bcc.n	800c64c <clust2sect+0x20>
 800c648:	2300      	movs	r3, #0
 800c64a:	e008      	b.n	800c65e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	895b      	ldrh	r3, [r3, #10]
 800c650:	461a      	mov	r2, r3
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	fb03 f202 	mul.w	r2, r3, r2
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c65c:	4413      	add	r3, r2
}
 800c65e:	4618      	mov	r0, r3
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr

0800c66a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b086      	sub	sp, #24
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d904      	bls.n	800c68a <get_fat+0x20>
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d302      	bcc.n	800c690 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c68a:	2301      	movs	r3, #1
 800c68c:	617b      	str	r3, [r7, #20]
 800c68e:	e08e      	b.n	800c7ae <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c690:	f04f 33ff 	mov.w	r3, #4294967295
 800c694:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	d061      	beq.n	800c762 <get_fat+0xf8>
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	dc7b      	bgt.n	800c79a <get_fat+0x130>
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d002      	beq.n	800c6ac <get_fat+0x42>
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d041      	beq.n	800c72e <get_fat+0xc4>
 800c6aa:	e076      	b.n	800c79a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	60fb      	str	r3, [r7, #12]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	085b      	lsrs	r3, r3, #1
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	0a5b      	lsrs	r3, r3, #9
 800c6c2:	4413      	add	r3, r2
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6938      	ldr	r0, [r7, #16]
 800c6c8:	f7ff ff14 	bl	800c4f4 <move_window>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d166      	bne.n	800c7a0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	60fa      	str	r2, [r7, #12]
 800c6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	4413      	add	r3, r2
 800c6e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c6e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	0a5b      	lsrs	r3, r3, #9
 800c6ee:	4413      	add	r3, r2
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	6938      	ldr	r0, [r7, #16]
 800c6f4:	f7ff fefe 	bl	800c4f4 <move_window>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d152      	bne.n	800c7a4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c704:	693a      	ldr	r2, [r7, #16]
 800c706:	4413      	add	r3, r2
 800c708:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c70c:	021b      	lsls	r3, r3, #8
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	4313      	orrs	r3, r2
 800c712:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d002      	beq.n	800c724 <get_fat+0xba>
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	091b      	lsrs	r3, r3, #4
 800c722:	e002      	b.n	800c72a <get_fat+0xc0>
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c72a:	617b      	str	r3, [r7, #20]
			break;
 800c72c:	e03f      	b.n	800c7ae <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	0a1b      	lsrs	r3, r3, #8
 800c736:	4413      	add	r3, r2
 800c738:	4619      	mov	r1, r3
 800c73a:	6938      	ldr	r0, [r7, #16]
 800c73c:	f7ff feda 	bl	800c4f4 <move_window>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d130      	bne.n	800c7a8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	005b      	lsls	r3, r3, #1
 800c750:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c754:	4413      	add	r3, r2
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff fbea 	bl	800bf30 <ld_word>
 800c75c:	4603      	mov	r3, r0
 800c75e:	617b      	str	r3, [r7, #20]
			break;
 800c760:	e025      	b.n	800c7ae <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	09db      	lsrs	r3, r3, #7
 800c76a:	4413      	add	r3, r2
 800c76c:	4619      	mov	r1, r3
 800c76e:	6938      	ldr	r0, [r7, #16]
 800c770:	f7ff fec0 	bl	800c4f4 <move_window>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d118      	bne.n	800c7ac <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c788:	4413      	add	r3, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7ff fbe9 	bl	800bf62 <ld_dword>
 800c790:	4603      	mov	r3, r0
 800c792:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c796:	617b      	str	r3, [r7, #20]
			break;
 800c798:	e009      	b.n	800c7ae <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c79a:	2301      	movs	r3, #1
 800c79c:	617b      	str	r3, [r7, #20]
 800c79e:	e006      	b.n	800c7ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7a0:	bf00      	nop
 800c7a2:	e004      	b.n	800c7ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7a4:	bf00      	nop
 800c7a6:	e002      	b.n	800c7ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7a8:	bf00      	nop
 800c7aa:	e000      	b.n	800c7ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7ac:	bf00      	nop
		}
	}

	return val;
 800c7ae:	697b      	ldr	r3, [r7, #20]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c7b8:	b590      	push	{r4, r7, lr}
 800c7ba:	b089      	sub	sp, #36	@ 0x24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	f240 80d9 	bls.w	800c982 <put_fat+0x1ca>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	f080 80d3 	bcs.w	800c982 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b03      	cmp	r3, #3
 800c7e2:	f000 8096 	beq.w	800c912 <put_fat+0x15a>
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	f300 80cb 	bgt.w	800c982 <put_fat+0x1ca>
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d002      	beq.n	800c7f6 <put_fat+0x3e>
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	d06e      	beq.n	800c8d2 <put_fat+0x11a>
 800c7f4:	e0c5      	b.n	800c982 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	61bb      	str	r3, [r7, #24]
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	085b      	lsrs	r3, r3, #1
 800c7fe:	69ba      	ldr	r2, [r7, #24]
 800c800:	4413      	add	r3, r2
 800c802:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	0a5b      	lsrs	r3, r3, #9
 800c80c:	4413      	add	r3, r2
 800c80e:	4619      	mov	r1, r3
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f7ff fe6f 	bl	800c4f4 <move_window>
 800c816:	4603      	mov	r3, r0
 800c818:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c81a:	7ffb      	ldrb	r3, [r7, #31]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f040 80a9 	bne.w	800c974 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	1c59      	adds	r1, r3, #1
 800c82c:	61b9      	str	r1, [r7, #24]
 800c82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c832:	4413      	add	r3, r2
 800c834:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00d      	beq.n	800c85c <put_fat+0xa4>
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	b25b      	sxtb	r3, r3
 800c846:	f003 030f 	and.w	r3, r3, #15
 800c84a:	b25a      	sxtb	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	b25b      	sxtb	r3, r3
 800c850:	011b      	lsls	r3, r3, #4
 800c852:	b25b      	sxtb	r3, r3
 800c854:	4313      	orrs	r3, r2
 800c856:	b25b      	sxtb	r3, r3
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	e001      	b.n	800c860 <put_fat+0xa8>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2201      	movs	r2, #1
 800c868:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	0a5b      	lsrs	r3, r3, #9
 800c872:	4413      	add	r3, r2
 800c874:	4619      	mov	r1, r3
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f7ff fe3c 	bl	800c4f4 <move_window>
 800c87c:	4603      	mov	r3, r0
 800c87e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c880:	7ffb      	ldrb	r3, [r7, #31]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d178      	bne.n	800c978 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c892:	4413      	add	r3, r2
 800c894:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	f003 0301 	and.w	r3, r3, #1
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <put_fat+0xf0>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	091b      	lsrs	r3, r3, #4
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	e00e      	b.n	800c8c6 <put_fat+0x10e>
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	b25b      	sxtb	r3, r3
 800c8ae:	f023 030f 	bic.w	r3, r3, #15
 800c8b2:	b25a      	sxtb	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	0a1b      	lsrs	r3, r3, #8
 800c8b8:	b25b      	sxtb	r3, r3
 800c8ba:	f003 030f 	and.w	r3, r3, #15
 800c8be:	b25b      	sxtb	r3, r3
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	b25b      	sxtb	r3, r3
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	70da      	strb	r2, [r3, #3]
			break;
 800c8d0:	e057      	b.n	800c982 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	0a1b      	lsrs	r3, r3, #8
 800c8da:	4413      	add	r3, r2
 800c8dc:	4619      	mov	r1, r3
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f7ff fe08 	bl	800c4f4 <move_window>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8e8:	7ffb      	ldrb	r3, [r7, #31]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d146      	bne.n	800c97c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c8fc:	4413      	add	r3, r2
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	b292      	uxth	r2, r2
 800c902:	4611      	mov	r1, r2
 800c904:	4618      	mov	r0, r3
 800c906:	f7ff fb4f 	bl	800bfa8 <st_word>
			fs->wflag = 1;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2201      	movs	r2, #1
 800c90e:	70da      	strb	r2, [r3, #3]
			break;
 800c910:	e037      	b.n	800c982 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	09db      	lsrs	r3, r3, #7
 800c91a:	4413      	add	r3, r2
 800c91c:	4619      	mov	r1, r3
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f7ff fde8 	bl	800c4f4 <move_window>
 800c924:	4603      	mov	r3, r0
 800c926:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c928:	7ffb      	ldrb	r3, [r7, #31]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d128      	bne.n	800c980 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c942:	4413      	add	r3, r2
 800c944:	4618      	mov	r0, r3
 800c946:	f7ff fb0c 	bl	800bf62 <ld_dword>
 800c94a:	4603      	mov	r3, r0
 800c94c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c950:	4323      	orrs	r3, r4
 800c952:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c962:	4413      	add	r3, r2
 800c964:	6879      	ldr	r1, [r7, #4]
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff fb39 	bl	800bfde <st_dword>
			fs->wflag = 1;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2201      	movs	r2, #1
 800c970:	70da      	strb	r2, [r3, #3]
			break;
 800c972:	e006      	b.n	800c982 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c974:	bf00      	nop
 800c976:	e004      	b.n	800c982 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c978:	bf00      	nop
 800c97a:	e002      	b.n	800c982 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c97c:	bf00      	nop
 800c97e:	e000      	b.n	800c982 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c980:	bf00      	nop
		}
	}
	return res;
 800c982:	7ffb      	ldrb	r3, [r7, #31]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3724      	adds	r7, #36	@ 0x24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd90      	pop	{r4, r7, pc}

0800c98c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b088      	sub	sp, #32
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c998:	2300      	movs	r3, #0
 800c99a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d904      	bls.n	800c9b2 <remove_chain+0x26>
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d301      	bcc.n	800c9b6 <remove_chain+0x2a>
 800c9b2:	2302      	movs	r3, #2
 800c9b4:	e04b      	b.n	800ca4e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00c      	beq.n	800c9d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c0:	6879      	ldr	r1, [r7, #4]
 800c9c2:	69b8      	ldr	r0, [r7, #24]
 800c9c4:	f7ff fef8 	bl	800c7b8 <put_fat>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c9cc:	7ffb      	ldrb	r3, [r7, #31]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d001      	beq.n	800c9d6 <remove_chain+0x4a>
 800c9d2:	7ffb      	ldrb	r3, [r7, #31]
 800c9d4:	e03b      	b.n	800ca4e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c9d6:	68b9      	ldr	r1, [r7, #8]
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f7ff fe46 	bl	800c66a <get_fat>
 800c9de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d031      	beq.n	800ca4a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d101      	bne.n	800c9f0 <remove_chain+0x64>
 800c9ec:	2302      	movs	r3, #2
 800c9ee:	e02e      	b.n	800ca4e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f6:	d101      	bne.n	800c9fc <remove_chain+0x70>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e028      	b.n	800ca4e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	68b9      	ldr	r1, [r7, #8]
 800ca00:	69b8      	ldr	r0, [r7, #24]
 800ca02:	f7ff fed9 	bl	800c7b8 <put_fat>
 800ca06:	4603      	mov	r3, r0
 800ca08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ca0a:	7ffb      	ldrb	r3, [r7, #31]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <remove_chain+0x88>
 800ca10:	7ffb      	ldrb	r3, [r7, #31]
 800ca12:	e01c      	b.n	800ca4e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	695a      	ldr	r2, [r3, #20]
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	699b      	ldr	r3, [r3, #24]
 800ca1c:	3b02      	subs	r3, #2
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d20b      	bcs.n	800ca3a <remove_chain+0xae>
			fs->free_clst++;
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	695b      	ldr	r3, [r3, #20]
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	791b      	ldrb	r3, [r3, #4]
 800ca30:	f043 0301 	orr.w	r3, r3, #1
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	699b      	ldr	r3, [r3, #24]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d3c6      	bcc.n	800c9d6 <remove_chain+0x4a>
 800ca48:	e000      	b.n	800ca4c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ca4a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3720      	adds	r7, #32
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b088      	sub	sp, #32
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10d      	bne.n	800ca88 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d004      	beq.n	800ca82 <create_chain+0x2c>
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	699b      	ldr	r3, [r3, #24]
 800ca7c:	69ba      	ldr	r2, [r7, #24]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d31b      	bcc.n	800caba <create_chain+0x64>
 800ca82:	2301      	movs	r3, #1
 800ca84:	61bb      	str	r3, [r7, #24]
 800ca86:	e018      	b.n	800caba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7ff fded 	bl	800c66a <get_fat>
 800ca90:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d801      	bhi.n	800ca9c <create_chain+0x46>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e070      	b.n	800cb7e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa2:	d101      	bne.n	800caa8 <create_chain+0x52>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	e06a      	b.n	800cb7e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d201      	bcs.n	800cab6 <create_chain+0x60>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	e063      	b.n	800cb7e <create_chain+0x128>
		scl = clst;
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	3301      	adds	r3, #1
 800cac2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	69fa      	ldr	r2, [r7, #28]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d307      	bcc.n	800cade <create_chain+0x88>
				ncl = 2;
 800cace:	2302      	movs	r3, #2
 800cad0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cad2:	69fa      	ldr	r2, [r7, #28]
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d901      	bls.n	800cade <create_chain+0x88>
 800cada:	2300      	movs	r3, #0
 800cadc:	e04f      	b.n	800cb7e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cade:	69f9      	ldr	r1, [r7, #28]
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7ff fdc2 	bl	800c66a <get_fat>
 800cae6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00e      	beq.n	800cb0c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d003      	beq.n	800cafc <create_chain+0xa6>
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafa:	d101      	bne.n	800cb00 <create_chain+0xaa>
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	e03e      	b.n	800cb7e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cb00:	69fa      	ldr	r2, [r7, #28]
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d1da      	bne.n	800cabe <create_chain+0x68>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e038      	b.n	800cb7e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cb0c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cb0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb12:	69f9      	ldr	r1, [r7, #28]
 800cb14:	6938      	ldr	r0, [r7, #16]
 800cb16:	f7ff fe4f 	bl	800c7b8 <put_fat>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cb1e:	7dfb      	ldrb	r3, [r7, #23]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d109      	bne.n	800cb38 <create_chain+0xe2>
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d006      	beq.n	800cb38 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cb2a:	69fa      	ldr	r2, [r7, #28]
 800cb2c:	6839      	ldr	r1, [r7, #0]
 800cb2e:	6938      	ldr	r0, [r7, #16]
 800cb30:	f7ff fe42 	bl	800c7b8 <put_fat>
 800cb34:	4603      	mov	r3, r0
 800cb36:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d116      	bne.n	800cb6c <create_chain+0x116>
		fs->last_clst = ncl;
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	69fa      	ldr	r2, [r7, #28]
 800cb42:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	695a      	ldr	r2, [r3, #20]
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	3b02      	subs	r3, #2
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d804      	bhi.n	800cb5c <create_chain+0x106>
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	1e5a      	subs	r2, r3, #1
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	791b      	ldrb	r3, [r3, #4]
 800cb60:	f043 0301 	orr.w	r3, r3, #1
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	711a      	strb	r2, [r3, #4]
 800cb6a:	e007      	b.n	800cb7c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d102      	bne.n	800cb78 <create_chain+0x122>
 800cb72:	f04f 33ff 	mov.w	r3, #4294967295
 800cb76:	e000      	b.n	800cb7a <create_chain+0x124>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cb7c:	69fb      	ldr	r3, [r7, #28]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3720      	adds	r7, #32
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cb86:	b480      	push	{r7}
 800cb88:	b087      	sub	sp, #28
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	0a5b      	lsrs	r3, r3, #9
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	8952      	ldrh	r2, [r2, #10]
 800cba6:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbaa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	1d1a      	adds	r2, r3, #4
 800cbb0:	613a      	str	r2, [r7, #16]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <clmt_clust+0x3a>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	e010      	b.n	800cbe2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cbc0:	697a      	ldr	r2, [r7, #20]
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d307      	bcc.n	800cbd8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cbc8:	697a      	ldr	r2, [r7, #20]
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	617b      	str	r3, [r7, #20]
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	3304      	adds	r3, #4
 800cbd4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cbd6:	e7e9      	b.n	800cbac <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cbd8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	4413      	add	r3, r2
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	371c      	adds	r7, #28
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr

0800cbee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b086      	sub	sp, #24
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc04:	d204      	bcs.n	800cc10 <dir_sdi+0x22>
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	f003 031f 	and.w	r3, r3, #31
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d001      	beq.n	800cc14 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cc10:	2302      	movs	r3, #2
 800cc12:	e063      	b.n	800ccdc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <dir_sdi+0x46>
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	d902      	bls.n	800cc34 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc32:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10c      	bne.n	800cc54 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	095b      	lsrs	r3, r3, #5
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	8912      	ldrh	r2, [r2, #8]
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d301      	bcc.n	800cc4a <dir_sdi+0x5c>
 800cc46:	2302      	movs	r3, #2
 800cc48:	e048      	b.n	800ccdc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	61da      	str	r2, [r3, #28]
 800cc52:	e029      	b.n	800cca8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	895b      	ldrh	r3, [r3, #10]
 800cc58:	025b      	lsls	r3, r3, #9
 800cc5a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cc5c:	e019      	b.n	800cc92 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6979      	ldr	r1, [r7, #20]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff fd01 	bl	800c66a <get_fat>
 800cc68:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc70:	d101      	bne.n	800cc76 <dir_sdi+0x88>
 800cc72:	2301      	movs	r3, #1
 800cc74:	e032      	b.n	800ccdc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d904      	bls.n	800cc86 <dir_sdi+0x98>
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	699b      	ldr	r3, [r3, #24]
 800cc80:	697a      	ldr	r2, [r7, #20]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d301      	bcc.n	800cc8a <dir_sdi+0x9c>
 800cc86:	2302      	movs	r3, #2
 800cc88:	e028      	b.n	800ccdc <dir_sdi+0xee>
			ofs -= csz;
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d2e1      	bcs.n	800cc5e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cc9a:	6979      	ldr	r1, [r7, #20]
 800cc9c:	6938      	ldr	r0, [r7, #16]
 800cc9e:	f7ff fcc5 	bl	800c62c <clust2sect>
 800cca2:	4602      	mov	r2, r0
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	697a      	ldr	r2, [r7, #20]
 800ccac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	69db      	ldr	r3, [r3, #28]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <dir_sdi+0xcc>
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	e010      	b.n	800ccdc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	69da      	ldr	r2, [r3, #28]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	0a5b      	lsrs	r3, r3, #9
 800ccc2:	441a      	add	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd4:	441a      	add	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3718      	adds	r7, #24
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	695b      	ldr	r3, [r3, #20]
 800ccf8:	3320      	adds	r3, #32
 800ccfa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	69db      	ldr	r3, [r3, #28]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d003      	beq.n	800cd0c <dir_next+0x28>
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cd0a:	d301      	bcc.n	800cd10 <dir_next+0x2c>
 800cd0c:	2304      	movs	r3, #4
 800cd0e:	e0aa      	b.n	800ce66 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f040 8098 	bne.w	800ce4c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	69db      	ldr	r3, [r3, #28]
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10b      	bne.n	800cd46 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	095b      	lsrs	r3, r3, #5
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	8912      	ldrh	r2, [r2, #8]
 800cd36:	4293      	cmp	r3, r2
 800cd38:	f0c0 8088 	bcc.w	800ce4c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	61da      	str	r2, [r3, #28]
 800cd42:	2304      	movs	r3, #4
 800cd44:	e08f      	b.n	800ce66 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	0a5b      	lsrs	r3, r3, #9
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	8952      	ldrh	r2, [r2, #10]
 800cd4e:	3a01      	subs	r2, #1
 800cd50:	4013      	ands	r3, r2
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d17a      	bne.n	800ce4c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4610      	mov	r0, r2
 800cd60:	f7ff fc83 	bl	800c66a <get_fat>
 800cd64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d801      	bhi.n	800cd70 <dir_next+0x8c>
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	e07a      	b.n	800ce66 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd76:	d101      	bne.n	800cd7c <dir_next+0x98>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e074      	b.n	800ce66 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	699b      	ldr	r3, [r3, #24]
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d358      	bcc.n	800ce38 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d104      	bne.n	800cd96 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	61da      	str	r2, [r3, #28]
 800cd92:	2304      	movs	r3, #4
 800cd94:	e067      	b.n	800ce66 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	699b      	ldr	r3, [r3, #24]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4610      	mov	r0, r2
 800cda0:	f7ff fe59 	bl	800ca56 <create_chain>
 800cda4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d101      	bne.n	800cdb0 <dir_next+0xcc>
 800cdac:	2307      	movs	r3, #7
 800cdae:	e05a      	b.n	800ce66 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d101      	bne.n	800cdba <dir_next+0xd6>
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	e055      	b.n	800ce66 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc0:	d101      	bne.n	800cdc6 <dir_next+0xe2>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e04f      	b.n	800ce66 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f7ff fb50 	bl	800c46c <sync_window>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <dir_next+0xf2>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e047      	b.n	800ce66 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3334      	adds	r3, #52	@ 0x34
 800cdda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdde:	2100      	movs	r1, #0
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff f949 	bl	800c078 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cde6:	2300      	movs	r3, #0
 800cde8:	613b      	str	r3, [r7, #16]
 800cdea:	6979      	ldr	r1, [r7, #20]
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f7ff fc1d 	bl	800c62c <clust2sect>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	631a      	str	r2, [r3, #48]	@ 0x30
 800cdf8:	e012      	b.n	800ce20 <dir_next+0x13c>
						fs->wflag = 1;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f7ff fb33 	bl	800c46c <sync_window>
 800ce06:	4603      	mov	r3, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d001      	beq.n	800ce10 <dir_next+0x12c>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e02a      	b.n	800ce66 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	3301      	adds	r3, #1
 800ce14:	613b      	str	r3, [r7, #16]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce1a:	1c5a      	adds	r2, r3, #1
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	895b      	ldrh	r3, [r3, #10]
 800ce24:	461a      	mov	r2, r3
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d3e6      	bcc.n	800cdfa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	1ad2      	subs	r2, r2, r3
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ce3e:	6979      	ldr	r1, [r7, #20]
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f7ff fbf3 	bl	800c62c <clust2sect>
 800ce46:	4602      	mov	r2, r0
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce5e:	441a      	add	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3718      	adds	r7, #24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b086      	sub	sp, #24
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ce7e:	2100      	movs	r1, #0
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7ff feb4 	bl	800cbee <dir_sdi>
 800ce86:	4603      	mov	r3, r0
 800ce88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ce8a:	7dfb      	ldrb	r3, [r7, #23]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d12b      	bne.n	800cee8 <dir_alloc+0x7a>
		n = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	69db      	ldr	r3, [r3, #28]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f7ff fb2a 	bl	800c4f4 <move_window>
 800cea0:	4603      	mov	r3, r0
 800cea2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cea4:	7dfb      	ldrb	r3, [r7, #23]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d11d      	bne.n	800cee6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	2be5      	cmp	r3, #229	@ 0xe5
 800ceb2:	d004      	beq.n	800cebe <dir_alloc+0x50>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6a1b      	ldr	r3, [r3, #32]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d107      	bne.n	800cece <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	3301      	adds	r3, #1
 800cec2:	613b      	str	r3, [r7, #16]
 800cec4:	693a      	ldr	r2, [r7, #16]
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d102      	bne.n	800ced2 <dir_alloc+0x64>
 800cecc:	e00c      	b.n	800cee8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cece:	2300      	movs	r3, #0
 800ced0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ced2:	2101      	movs	r1, #1
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7ff ff05 	bl	800cce4 <dir_next>
 800ceda:	4603      	mov	r3, r0
 800cedc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d0d7      	beq.n	800ce94 <dir_alloc+0x26>
 800cee4:	e000      	b.n	800cee8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cee6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	2b04      	cmp	r3, #4
 800ceec:	d101      	bne.n	800cef2 <dir_alloc+0x84>
 800ceee:	2307      	movs	r3, #7
 800cef0:	75fb      	strb	r3, [r7, #23]
	return res;
 800cef2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3718      	adds	r7, #24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	331a      	adds	r3, #26
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff f810 	bl	800bf30 <ld_word>
 800cf10:	4603      	mov	r3, r0
 800cf12:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b03      	cmp	r3, #3
 800cf1a:	d109      	bne.n	800cf30 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	3314      	adds	r3, #20
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7ff f805 	bl	800bf30 <ld_word>
 800cf26:	4603      	mov	r3, r0
 800cf28:	041b      	lsls	r3, r3, #16
 800cf2a:	68fa      	ldr	r2, [r7, #12]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cf30:	68fb      	ldr	r3, [r7, #12]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b084      	sub	sp, #16
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	60f8      	str	r0, [r7, #12]
 800cf42:	60b9      	str	r1, [r7, #8]
 800cf44:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	331a      	adds	r3, #26
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	b292      	uxth	r2, r2
 800cf4e:	4611      	mov	r1, r2
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff f829 	bl	800bfa8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b03      	cmp	r3, #3
 800cf5c:	d109      	bne.n	800cf72 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	f103 0214 	add.w	r2, r3, #20
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	0c1b      	lsrs	r3, r3, #16
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	f7ff f81b 	bl	800bfa8 <st_word>
	}
}
 800cf72:	bf00      	nop
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b086      	sub	sp, #24
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cf88:	2100      	movs	r1, #0
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff fe2f 	bl	800cbee <dir_sdi>
 800cf90:	4603      	mov	r3, r0
 800cf92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d001      	beq.n	800cf9e <dir_find+0x24>
 800cf9a:	7dfb      	ldrb	r3, [r7, #23]
 800cf9c:	e03e      	b.n	800d01c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	69db      	ldr	r3, [r3, #28]
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6938      	ldr	r0, [r7, #16]
 800cfa6:	f7ff faa5 	bl	800c4f4 <move_window>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d12f      	bne.n	800d014 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6a1b      	ldr	r3, [r3, #32]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cfbc:	7bfb      	ldrb	r3, [r7, #15]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d102      	bne.n	800cfc8 <dir_find+0x4e>
 800cfc2:	2304      	movs	r3, #4
 800cfc4:	75fb      	strb	r3, [r7, #23]
 800cfc6:	e028      	b.n	800d01a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a1b      	ldr	r3, [r3, #32]
 800cfcc:	330b      	adds	r3, #11
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6a1b      	ldr	r3, [r3, #32]
 800cfde:	330b      	adds	r3, #11
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	f003 0308 	and.w	r3, r3, #8
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10a      	bne.n	800d000 <dir_find+0x86>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a18      	ldr	r0, [r3, #32]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	3324      	adds	r3, #36	@ 0x24
 800cff2:	220b      	movs	r2, #11
 800cff4:	4619      	mov	r1, r3
 800cff6:	f7ff f85a 	bl	800c0ae <mem_cmp>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00b      	beq.n	800d018 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d000:	2100      	movs	r1, #0
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7ff fe6e 	bl	800cce4 <dir_next>
 800d008:	4603      	mov	r3, r0
 800d00a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d00c:	7dfb      	ldrb	r3, [r7, #23]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d0c5      	beq.n	800cf9e <dir_find+0x24>
 800d012:	e002      	b.n	800d01a <dir_find+0xa0>
		if (res != FR_OK) break;
 800d014:	bf00      	nop
 800d016:	e000      	b.n	800d01a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d018:	bf00      	nop

	return res;
 800d01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3718      	adds	r7, #24
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d032:	2101      	movs	r1, #1
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f7ff ff1a 	bl	800ce6e <dir_alloc>
 800d03a:	4603      	mov	r3, r0
 800d03c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d11c      	bne.n	800d07e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	69db      	ldr	r3, [r3, #28]
 800d048:	4619      	mov	r1, r3
 800d04a:	68b8      	ldr	r0, [r7, #8]
 800d04c:	f7ff fa52 	bl	800c4f4 <move_window>
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d054:	7bfb      	ldrb	r3, [r7, #15]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d111      	bne.n	800d07e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a1b      	ldr	r3, [r3, #32]
 800d05e:	2220      	movs	r2, #32
 800d060:	2100      	movs	r1, #0
 800d062:	4618      	mov	r0, r3
 800d064:	f7ff f808 	bl	800c078 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a18      	ldr	r0, [r3, #32]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3324      	adds	r3, #36	@ 0x24
 800d070:	220b      	movs	r2, #11
 800d072:	4619      	mov	r1, r3
 800d074:	f7fe ffdf 	bl	800c036 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2201      	movs	r2, #1
 800d07c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b088      	sub	sp, #32
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	60fb      	str	r3, [r7, #12]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3324      	adds	r3, #36	@ 0x24
 800d09c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d09e:	220b      	movs	r2, #11
 800d0a0:	2120      	movs	r1, #32
 800d0a2:	68b8      	ldr	r0, [r7, #8]
 800d0a4:	f7fe ffe8 	bl	800c078 <mem_set>
	si = i = 0; ni = 8;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	613b      	str	r3, [r7, #16]
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	61fb      	str	r3, [r7, #28]
 800d0b0:	2308      	movs	r3, #8
 800d0b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	61fa      	str	r2, [r7, #28]
 800d0ba:	68fa      	ldr	r2, [r7, #12]
 800d0bc:	4413      	add	r3, r2
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d0c2:	7efb      	ldrb	r3, [r7, #27]
 800d0c4:	2b20      	cmp	r3, #32
 800d0c6:	d94e      	bls.n	800d166 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d0c8:	7efb      	ldrb	r3, [r7, #27]
 800d0ca:	2b2f      	cmp	r3, #47	@ 0x2f
 800d0cc:	d006      	beq.n	800d0dc <create_name+0x54>
 800d0ce:	7efb      	ldrb	r3, [r7, #27]
 800d0d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800d0d2:	d110      	bne.n	800d0f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d0d4:	e002      	b.n	800d0dc <create_name+0x54>
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	61fb      	str	r3, [r7, #28]
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d0e6:	d0f6      	beq.n	800d0d6 <create_name+0x4e>
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b5c      	cmp	r3, #92	@ 0x5c
 800d0f2:	d0f0      	beq.n	800d0d6 <create_name+0x4e>
			break;
 800d0f4:	e038      	b.n	800d168 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d0f6:	7efb      	ldrb	r3, [r7, #27]
 800d0f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0fa:	d003      	beq.n	800d104 <create_name+0x7c>
 800d0fc:	693a      	ldr	r2, [r7, #16]
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	429a      	cmp	r2, r3
 800d102:	d30c      	bcc.n	800d11e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	2b0b      	cmp	r3, #11
 800d108:	d002      	beq.n	800d110 <create_name+0x88>
 800d10a:	7efb      	ldrb	r3, [r7, #27]
 800d10c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d10e:	d001      	beq.n	800d114 <create_name+0x8c>
 800d110:	2306      	movs	r3, #6
 800d112:	e044      	b.n	800d19e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d114:	2308      	movs	r3, #8
 800d116:	613b      	str	r3, [r7, #16]
 800d118:	230b      	movs	r3, #11
 800d11a:	617b      	str	r3, [r7, #20]
			continue;
 800d11c:	e022      	b.n	800d164 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d11e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d122:	2b00      	cmp	r3, #0
 800d124:	da04      	bge.n	800d130 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d126:	7efb      	ldrb	r3, [r7, #27]
 800d128:	3b80      	subs	r3, #128	@ 0x80
 800d12a:	4a1f      	ldr	r2, [pc, #124]	@ (800d1a8 <create_name+0x120>)
 800d12c:	5cd3      	ldrb	r3, [r2, r3]
 800d12e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d130:	7efb      	ldrb	r3, [r7, #27]
 800d132:	4619      	mov	r1, r3
 800d134:	481d      	ldr	r0, [pc, #116]	@ (800d1ac <create_name+0x124>)
 800d136:	f7fe ffe1 	bl	800c0fc <chk_chr>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <create_name+0xbc>
 800d140:	2306      	movs	r3, #6
 800d142:	e02c      	b.n	800d19e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d144:	7efb      	ldrb	r3, [r7, #27]
 800d146:	2b60      	cmp	r3, #96	@ 0x60
 800d148:	d905      	bls.n	800d156 <create_name+0xce>
 800d14a:	7efb      	ldrb	r3, [r7, #27]
 800d14c:	2b7a      	cmp	r3, #122	@ 0x7a
 800d14e:	d802      	bhi.n	800d156 <create_name+0xce>
 800d150:	7efb      	ldrb	r3, [r7, #27]
 800d152:	3b20      	subs	r3, #32
 800d154:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	613a      	str	r2, [r7, #16]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	4413      	add	r3, r2
 800d160:	7efa      	ldrb	r2, [r7, #27]
 800d162:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d164:	e7a6      	b.n	800d0b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d166:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	441a      	add	r2, r3
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <create_name+0xf4>
 800d178:	2306      	movs	r3, #6
 800d17a:	e010      	b.n	800d19e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	2be5      	cmp	r3, #229	@ 0xe5
 800d182:	d102      	bne.n	800d18a <create_name+0x102>
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	2205      	movs	r2, #5
 800d188:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d18a:	7efb      	ldrb	r3, [r7, #27]
 800d18c:	2b20      	cmp	r3, #32
 800d18e:	d801      	bhi.n	800d194 <create_name+0x10c>
 800d190:	2204      	movs	r2, #4
 800d192:	e000      	b.n	800d196 <create_name+0x10e>
 800d194:	2200      	movs	r2, #0
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	330b      	adds	r3, #11
 800d19a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d19c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3720      	adds	r7, #32
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	080165b0 	.word	0x080165b0
 800d1ac:	08016524 	.word	0x08016524

0800d1b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d1c4:	e002      	b.n	800d1cc <follow_path+0x1c>
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	603b      	str	r3, [r7, #0]
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d1d2:	d0f8      	beq.n	800d1c6 <follow_path+0x16>
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	2b5c      	cmp	r3, #92	@ 0x5c
 800d1da:	d0f4      	beq.n	800d1c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	2b1f      	cmp	r3, #31
 800d1e8:	d80a      	bhi.n	800d200 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2280      	movs	r2, #128	@ 0x80
 800d1ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff fcfa 	bl	800cbee <dir_sdi>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	75fb      	strb	r3, [r7, #23]
 800d1fe:	e043      	b.n	800d288 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d200:	463b      	mov	r3, r7
 800d202:	4619      	mov	r1, r3
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7ff ff3f 	bl	800d088 <create_name>
 800d20a:	4603      	mov	r3, r0
 800d20c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d20e:	7dfb      	ldrb	r3, [r7, #23]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d134      	bne.n	800d27e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff feb0 	bl	800cf7a <dir_find>
 800d21a:	4603      	mov	r3, r0
 800d21c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d224:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d226:	7dfb      	ldrb	r3, [r7, #23]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00a      	beq.n	800d242 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d22c:	7dfb      	ldrb	r3, [r7, #23]
 800d22e:	2b04      	cmp	r3, #4
 800d230:	d127      	bne.n	800d282 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d232:	7afb      	ldrb	r3, [r7, #11]
 800d234:	f003 0304 	and.w	r3, r3, #4
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d122      	bne.n	800d282 <follow_path+0xd2>
 800d23c:	2305      	movs	r3, #5
 800d23e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d240:	e01f      	b.n	800d282 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d242:	7afb      	ldrb	r3, [r7, #11]
 800d244:	f003 0304 	and.w	r3, r3, #4
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d11c      	bne.n	800d286 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	799b      	ldrb	r3, [r3, #6]
 800d250:	f003 0310 	and.w	r3, r3, #16
 800d254:	2b00      	cmp	r3, #0
 800d256:	d102      	bne.n	800d25e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d258:	2305      	movs	r3, #5
 800d25a:	75fb      	strb	r3, [r7, #23]
 800d25c:	e014      	b.n	800d288 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	695b      	ldr	r3, [r3, #20]
 800d268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d26c:	4413      	add	r3, r2
 800d26e:	4619      	mov	r1, r3
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f7ff fe43 	bl	800cefc <ld_clust>
 800d276:	4602      	mov	r2, r0
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d27c:	e7c0      	b.n	800d200 <follow_path+0x50>
			if (res != FR_OK) break;
 800d27e:	bf00      	nop
 800d280:	e002      	b.n	800d288 <follow_path+0xd8>
				break;
 800d282:	bf00      	nop
 800d284:	e000      	b.n	800d288 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d286:	bf00      	nop
			}
		}
	}

	return res;
 800d288:	7dfb      	ldrb	r3, [r7, #23]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3718      	adds	r7, #24
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d292:	b480      	push	{r7}
 800d294:	b087      	sub	sp, #28
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d29a:	f04f 33ff 	mov.w	r3, #4294967295
 800d29e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d031      	beq.n	800d30c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	617b      	str	r3, [r7, #20]
 800d2ae:	e002      	b.n	800d2b6 <get_ldnumber+0x24>
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	617b      	str	r3, [r7, #20]
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b20      	cmp	r3, #32
 800d2bc:	d903      	bls.n	800d2c6 <get_ldnumber+0x34>
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2b3a      	cmp	r3, #58	@ 0x3a
 800d2c4:	d1f4      	bne.n	800d2b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	2b3a      	cmp	r3, #58	@ 0x3a
 800d2cc:	d11c      	bne.n	800d308 <get_ldnumber+0x76>
			tp = *path;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	60fa      	str	r2, [r7, #12]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	3b30      	subs	r3, #48	@ 0x30
 800d2de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b09      	cmp	r3, #9
 800d2e4:	d80e      	bhi.n	800d304 <get_ldnumber+0x72>
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d10a      	bne.n	800d304 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d107      	bne.n	800d304 <get_ldnumber+0x72>
					vol = (int)i;
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	617b      	str	r3, [r7, #20]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	697a      	ldr	r2, [r7, #20]
 800d302:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	e002      	b.n	800d30e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d308:	2300      	movs	r3, #0
 800d30a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d30c:	693b      	ldr	r3, [r7, #16]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	371c      	adds	r7, #28
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
	...

0800d31c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	70da      	strb	r2, [r3, #3]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f04f 32ff 	mov.w	r2, #4294967295
 800d332:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7ff f8dc 	bl	800c4f4 <move_window>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d001      	beq.n	800d346 <check_fs+0x2a>
 800d342:	2304      	movs	r3, #4
 800d344:	e038      	b.n	800d3b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	3334      	adds	r3, #52	@ 0x34
 800d34a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fe fdee 	bl	800bf30 <ld_word>
 800d354:	4603      	mov	r3, r0
 800d356:	461a      	mov	r2, r3
 800d358:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d001      	beq.n	800d364 <check_fs+0x48>
 800d360:	2303      	movs	r3, #3
 800d362:	e029      	b.n	800d3b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d36a:	2be9      	cmp	r3, #233	@ 0xe9
 800d36c:	d009      	beq.n	800d382 <check_fs+0x66>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d374:	2beb      	cmp	r3, #235	@ 0xeb
 800d376:	d11e      	bne.n	800d3b6 <check_fs+0x9a>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d37e:	2b90      	cmp	r3, #144	@ 0x90
 800d380:	d119      	bne.n	800d3b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	3334      	adds	r3, #52	@ 0x34
 800d386:	3336      	adds	r3, #54	@ 0x36
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fe fdea 	bl	800bf62 <ld_dword>
 800d38e:	4603      	mov	r3, r0
 800d390:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d394:	4a0a      	ldr	r2, [pc, #40]	@ (800d3c0 <check_fs+0xa4>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d101      	bne.n	800d39e <check_fs+0x82>
 800d39a:	2300      	movs	r3, #0
 800d39c:	e00c      	b.n	800d3b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	3334      	adds	r3, #52	@ 0x34
 800d3a2:	3352      	adds	r3, #82	@ 0x52
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe fddc 	bl	800bf62 <ld_dword>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	4a05      	ldr	r2, [pc, #20]	@ (800d3c4 <check_fs+0xa8>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d101      	bne.n	800d3b6 <check_fs+0x9a>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e000      	b.n	800d3b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d3b6:	2302      	movs	r3, #2
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	00544146 	.word	0x00544146
 800d3c4:	33544146 	.word	0x33544146

0800d3c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b096      	sub	sp, #88	@ 0x58
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f7ff ff58 	bl	800d292 <get_ldnumber>
 800d3e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	da01      	bge.n	800d3ee <find_volume+0x26>
 800d3ea:	230b      	movs	r3, #11
 800d3ec:	e235      	b.n	800d85a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d3ee:	4aa5      	ldr	r2, [pc, #660]	@ (800d684 <find_volume+0x2bc>)
 800d3f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d101      	bne.n	800d402 <find_volume+0x3a>
 800d3fe:	230c      	movs	r3, #12
 800d400:	e22b      	b.n	800d85a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800d402:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d404:	f7fe fe95 	bl	800c132 <lock_fs>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <find_volume+0x4a>
 800d40e:	230f      	movs	r3, #15
 800d410:	e223      	b.n	800d85a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d416:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	f023 0301 	bic.w	r3, r3, #1
 800d41e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d01a      	beq.n	800d45e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42a:	785b      	ldrb	r3, [r3, #1]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fe fce1 	bl	800bdf4 <disk_status>
 800d432:	4603      	mov	r3, r0
 800d434:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d438:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10c      	bne.n	800d45e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d444:	79fb      	ldrb	r3, [r7, #7]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d007      	beq.n	800d45a <find_volume+0x92>
 800d44a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d44e:	f003 0304 	and.w	r3, r3, #4
 800d452:	2b00      	cmp	r3, #0
 800d454:	d001      	beq.n	800d45a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d456:	230a      	movs	r3, #10
 800d458:	e1ff      	b.n	800d85a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800d45a:	2300      	movs	r3, #0
 800d45c:	e1fd      	b.n	800d85a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d460:	2200      	movs	r2, #0
 800d462:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d466:	b2da      	uxtb	r2, r3
 800d468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46e:	785b      	ldrb	r3, [r3, #1]
 800d470:	4618      	mov	r0, r3
 800d472:	f7fe fcd9 	bl	800be28 <disk_initialize>
 800d476:	4603      	mov	r3, r0
 800d478:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d47c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	2b00      	cmp	r3, #0
 800d486:	d001      	beq.n	800d48c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d488:	2303      	movs	r3, #3
 800d48a:	e1e6      	b.n	800d85a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d48c:	79fb      	ldrb	r3, [r7, #7]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d007      	beq.n	800d4a2 <find_volume+0xda>
 800d492:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d496:	f003 0304 	and.w	r3, r3, #4
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d001      	beq.n	800d4a2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d49e:	230a      	movs	r3, #10
 800d4a0:	e1db      	b.n	800d85a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d4a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d4a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d4aa:	f7ff ff37 	bl	800d31c <check_fs>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d4b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d149      	bne.n	800d550 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d4bc:	2300      	movs	r3, #0
 800d4be:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4c0:	e01e      	b.n	800d500 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d4c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4ca:	011b      	lsls	r3, r3, #4
 800d4cc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d4d0:	4413      	add	r3, r2
 800d4d2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d6:	3304      	adds	r3, #4
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d006      	beq.n	800d4ec <find_volume+0x124>
 800d4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fe fd3d 	bl	800bf62 <ld_dword>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	e000      	b.n	800d4ee <find_volume+0x126>
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	3358      	adds	r3, #88	@ 0x58
 800d4f4:	443b      	add	r3, r7
 800d4f6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d4fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800d500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d502:	2b03      	cmp	r3, #3
 800d504:	d9dd      	bls.n	800d4c2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d506:	2300      	movs	r3, #0
 800d508:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d50a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <find_volume+0x14e>
 800d510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d512:	3b01      	subs	r3, #1
 800d514:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	3358      	adds	r3, #88	@ 0x58
 800d51c:	443b      	add	r3, r7
 800d51e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d522:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d526:	2b00      	cmp	r3, #0
 800d528:	d005      	beq.n	800d536 <find_volume+0x16e>
 800d52a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d52c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d52e:	f7ff fef5 	bl	800d31c <check_fs>
 800d532:	4603      	mov	r3, r0
 800d534:	e000      	b.n	800d538 <find_volume+0x170>
 800d536:	2303      	movs	r3, #3
 800d538:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d53c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d540:	2b01      	cmp	r3, #1
 800d542:	d905      	bls.n	800d550 <find_volume+0x188>
 800d544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d546:	3301      	adds	r3, #1
 800d548:	643b      	str	r3, [r7, #64]	@ 0x40
 800d54a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d54c:	2b03      	cmp	r3, #3
 800d54e:	d9e2      	bls.n	800d516 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d550:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d554:	2b04      	cmp	r3, #4
 800d556:	d101      	bne.n	800d55c <find_volume+0x194>
 800d558:	2301      	movs	r3, #1
 800d55a:	e17e      	b.n	800d85a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d55c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d560:	2b01      	cmp	r3, #1
 800d562:	d901      	bls.n	800d568 <find_volume+0x1a0>
 800d564:	230d      	movs	r3, #13
 800d566:	e178      	b.n	800d85a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d56a:	3334      	adds	r3, #52	@ 0x34
 800d56c:	330b      	adds	r3, #11
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fe fcde 	bl	800bf30 <ld_word>
 800d574:	4603      	mov	r3, r0
 800d576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d57a:	d001      	beq.n	800d580 <find_volume+0x1b8>
 800d57c:	230d      	movs	r3, #13
 800d57e:	e16c      	b.n	800d85a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d582:	3334      	adds	r3, #52	@ 0x34
 800d584:	3316      	adds	r3, #22
 800d586:	4618      	mov	r0, r3
 800d588:	f7fe fcd2 	bl	800bf30 <ld_word>
 800d58c:	4603      	mov	r3, r0
 800d58e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d592:	2b00      	cmp	r3, #0
 800d594:	d106      	bne.n	800d5a4 <find_volume+0x1dc>
 800d596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d598:	3334      	adds	r3, #52	@ 0x34
 800d59a:	3324      	adds	r3, #36	@ 0x24
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fe fce0 	bl	800bf62 <ld_dword>
 800d5a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d5a8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ac:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5b6:	789b      	ldrb	r3, [r3, #2]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d005      	beq.n	800d5c8 <find_volume+0x200>
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5be:	789b      	ldrb	r3, [r3, #2]
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d001      	beq.n	800d5c8 <find_volume+0x200>
 800d5c4:	230d      	movs	r3, #13
 800d5c6:	e148      	b.n	800d85a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ca:	789b      	ldrb	r3, [r3, #2]
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5d0:	fb02 f303 	mul.w	r3, r2, r3
 800d5d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5dc:	461a      	mov	r2, r3
 800d5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e4:	895b      	ldrh	r3, [r3, #10]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d008      	beq.n	800d5fc <find_volume+0x234>
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ec:	895b      	ldrh	r3, [r3, #10]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f2:	895b      	ldrh	r3, [r3, #10]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	4013      	ands	r3, r2
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <find_volume+0x238>
 800d5fc:	230d      	movs	r3, #13
 800d5fe:	e12c      	b.n	800d85a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d602:	3334      	adds	r3, #52	@ 0x34
 800d604:	3311      	adds	r3, #17
 800d606:	4618      	mov	r0, r3
 800d608:	f7fe fc92 	bl	800bf30 <ld_word>
 800d60c:	4603      	mov	r3, r0
 800d60e:	461a      	mov	r2, r3
 800d610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d612:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d616:	891b      	ldrh	r3, [r3, #8]
 800d618:	f003 030f 	and.w	r3, r3, #15
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d001      	beq.n	800d626 <find_volume+0x25e>
 800d622:	230d      	movs	r3, #13
 800d624:	e119      	b.n	800d85a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d628:	3334      	adds	r3, #52	@ 0x34
 800d62a:	3313      	adds	r3, #19
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fc7f 	bl	800bf30 <ld_word>
 800d632:	4603      	mov	r3, r0
 800d634:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d106      	bne.n	800d64a <find_volume+0x282>
 800d63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63e:	3334      	adds	r3, #52	@ 0x34
 800d640:	3320      	adds	r3, #32
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe fc8d 	bl	800bf62 <ld_dword>
 800d648:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64c:	3334      	adds	r3, #52	@ 0x34
 800d64e:	330e      	adds	r3, #14
 800d650:	4618      	mov	r0, r3
 800d652:	f7fe fc6d 	bl	800bf30 <ld_word>
 800d656:	4603      	mov	r3, r0
 800d658:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d65a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d101      	bne.n	800d664 <find_volume+0x29c>
 800d660:	230d      	movs	r3, #13
 800d662:	e0fa      	b.n	800d85a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d664:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d668:	4413      	add	r3, r2
 800d66a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d66c:	8912      	ldrh	r2, [r2, #8]
 800d66e:	0912      	lsrs	r2, r2, #4
 800d670:	b292      	uxth	r2, r2
 800d672:	4413      	add	r3, r2
 800d674:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d204      	bcs.n	800d688 <find_volume+0x2c0>
 800d67e:	230d      	movs	r3, #13
 800d680:	e0eb      	b.n	800d85a <find_volume+0x492>
 800d682:	bf00      	nop
 800d684:	200011f4 	.word	0x200011f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d690:	8952      	ldrh	r2, [r2, #10]
 800d692:	fbb3 f3f2 	udiv	r3, r3, r2
 800d696:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <find_volume+0x2da>
 800d69e:	230d      	movs	r3, #13
 800d6a0:	e0db      	b.n	800d85a <find_volume+0x492>
		fmt = FS_FAT32;
 800d6a2:	2303      	movs	r3, #3
 800d6a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6aa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d802      	bhi.n	800d6b8 <find_volume+0x2f0>
 800d6b2:	2302      	movs	r3, #2
 800d6b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ba:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d802      	bhi.n	800d6c8 <find_volume+0x300>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ca:	1c9a      	adds	r2, r3, #2
 800d6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ce:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d6d4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d6d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d6d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6da:	441a      	add	r2, r3
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6de:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d6e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e4:	441a      	add	r2, r3
 800d6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800d6ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d11e      	bne.n	800d730 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f4:	3334      	adds	r3, #52	@ 0x34
 800d6f6:	332a      	adds	r3, #42	@ 0x2a
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe fc19 	bl	800bf30 <ld_word>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <find_volume+0x340>
 800d704:	230d      	movs	r3, #13
 800d706:	e0a8      	b.n	800d85a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70a:	891b      	ldrh	r3, [r3, #8]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d001      	beq.n	800d714 <find_volume+0x34c>
 800d710:	230d      	movs	r3, #13
 800d712:	e0a2      	b.n	800d85a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d716:	3334      	adds	r3, #52	@ 0x34
 800d718:	332c      	adds	r3, #44	@ 0x2c
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fe fc21 	bl	800bf62 <ld_dword>
 800d720:	4602      	mov	r2, r0
 800d722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d724:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d728:	699b      	ldr	r3, [r3, #24]
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d72e:	e01f      	b.n	800d770 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d732:	891b      	ldrh	r3, [r3, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d101      	bne.n	800d73c <find_volume+0x374>
 800d738:	230d      	movs	r3, #13
 800d73a:	e08e      	b.n	800d85a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d73e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d742:	441a      	add	r2, r3
 800d744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d746:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d748:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d103      	bne.n	800d758 <find_volume+0x390>
 800d750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	e00a      	b.n	800d76e <find_volume+0x3a6>
 800d758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75a:	699a      	ldr	r2, [r3, #24]
 800d75c:	4613      	mov	r3, r2
 800d75e:	005b      	lsls	r3, r3, #1
 800d760:	4413      	add	r3, r2
 800d762:	085a      	lsrs	r2, r3, #1
 800d764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	f003 0301 	and.w	r3, r3, #1
 800d76c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d76e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d772:	69da      	ldr	r2, [r3, #28]
 800d774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d776:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d77a:	0a5b      	lsrs	r3, r3, #9
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d201      	bcs.n	800d784 <find_volume+0x3bc>
 800d780:	230d      	movs	r3, #13
 800d782:	e06a      	b.n	800d85a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d786:	f04f 32ff 	mov.w	r2, #4294967295
 800d78a:	615a      	str	r2, [r3, #20]
 800d78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d78e:	695a      	ldr	r2, [r3, #20]
 800d790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d792:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d796:	2280      	movs	r2, #128	@ 0x80
 800d798:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d79a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d79e:	2b03      	cmp	r3, #3
 800d7a0:	d149      	bne.n	800d836 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a4:	3334      	adds	r3, #52	@ 0x34
 800d7a6:	3330      	adds	r3, #48	@ 0x30
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fe fbc1 	bl	800bf30 <ld_word>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	d140      	bne.n	800d836 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d7b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7bc:	f7fe fe9a 	bl	800c4f4 <move_window>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d137      	bne.n	800d836 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ce:	3334      	adds	r3, #52	@ 0x34
 800d7d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7fe fbab 	bl	800bf30 <ld_word>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	461a      	mov	r2, r3
 800d7de:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d127      	bne.n	800d836 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e8:	3334      	adds	r3, #52	@ 0x34
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fe fbb9 	bl	800bf62 <ld_dword>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	4a1c      	ldr	r2, [pc, #112]	@ (800d864 <find_volume+0x49c>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d11e      	bne.n	800d836 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fa:	3334      	adds	r3, #52	@ 0x34
 800d7fc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d800:	4618      	mov	r0, r3
 800d802:	f7fe fbae 	bl	800bf62 <ld_dword>
 800d806:	4603      	mov	r3, r0
 800d808:	4a17      	ldr	r2, [pc, #92]	@ (800d868 <find_volume+0x4a0>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d113      	bne.n	800d836 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d810:	3334      	adds	r3, #52	@ 0x34
 800d812:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d816:	4618      	mov	r0, r3
 800d818:	f7fe fba3 	bl	800bf62 <ld_dword>
 800d81c:	4602      	mov	r2, r0
 800d81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d820:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d824:	3334      	adds	r3, #52	@ 0x34
 800d826:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe fb99 	bl	800bf62 <ld_dword>
 800d830:	4602      	mov	r2, r0
 800d832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d834:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d838:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d83c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d83e:	4b0b      	ldr	r3, [pc, #44]	@ (800d86c <find_volume+0x4a4>)
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	3301      	adds	r3, #1
 800d844:	b29a      	uxth	r2, r3
 800d846:	4b09      	ldr	r3, [pc, #36]	@ (800d86c <find_volume+0x4a4>)
 800d848:	801a      	strh	r2, [r3, #0]
 800d84a:	4b08      	ldr	r3, [pc, #32]	@ (800d86c <find_volume+0x4a4>)
 800d84c:	881a      	ldrh	r2, [r3, #0]
 800d84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d850:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d852:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d854:	f7fe fde6 	bl	800c424 <clear_lock>
#endif
	return FR_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3758      	adds	r7, #88	@ 0x58
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	41615252 	.word	0x41615252
 800d868:	61417272 	.word	0x61417272
 800d86c:	200011f8 	.word	0x200011f8

0800d870 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d87a:	2309      	movs	r3, #9
 800d87c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d02e      	beq.n	800d8e2 <validate+0x72>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d02a      	beq.n	800d8e2 <validate+0x72>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d025      	beq.n	800d8e2 <validate+0x72>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	889a      	ldrh	r2, [r3, #4]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	88db      	ldrh	r3, [r3, #6]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d11e      	bne.n	800d8e2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fe fc42 	bl	800c132 <lock_fs>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d014      	beq.n	800d8de <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	785b      	ldrb	r3, [r3, #1]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7fe fa9a 	bl	800bdf4 <disk_status>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d102      	bne.n	800d8d0 <validate+0x60>
				res = FR_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	73fb      	strb	r3, [r7, #15]
 800d8ce:	e008      	b.n	800d8e2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fe fc41 	bl	800c15e <unlock_fs>
 800d8dc:	e001      	b.n	800d8e2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d8de:	230f      	movs	r3, #15
 800d8e0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d102      	bne.n	800d8ee <validate+0x7e>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	e000      	b.n	800d8f0 <validate+0x80>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	683a      	ldr	r2, [r7, #0]
 800d8f2:	6013      	str	r3, [r2, #0]
	return res;
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b088      	sub	sp, #32
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	4613      	mov	r3, r2
 800d90c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d912:	f107 0310 	add.w	r3, r7, #16
 800d916:	4618      	mov	r0, r3
 800d918:	f7ff fcbb 	bl	800d292 <get_ldnumber>
 800d91c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	2b00      	cmp	r3, #0
 800d922:	da01      	bge.n	800d928 <f_mount+0x28>
 800d924:	230b      	movs	r3, #11
 800d926:	e048      	b.n	800d9ba <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d928:	4a26      	ldr	r2, [pc, #152]	@ (800d9c4 <f_mount+0xc4>)
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d930:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00f      	beq.n	800d958 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d938:	69b8      	ldr	r0, [r7, #24]
 800d93a:	f7fe fd73 	bl	800c424 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	4618      	mov	r0, r3
 800d944:	f001 f837 	bl	800e9b6 <ff_del_syncobj>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d101      	bne.n	800d952 <f_mount+0x52>
 800d94e:	2302      	movs	r3, #2
 800d950:	e033      	b.n	800d9ba <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	2200      	movs	r2, #0
 800d956:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00f      	beq.n	800d97e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2200      	movs	r2, #0
 800d962:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	b2da      	uxtb	r2, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	330c      	adds	r3, #12
 800d96c:	4619      	mov	r1, r3
 800d96e:	4610      	mov	r0, r2
 800d970:	f001 f803 	bl	800e97a <ff_cre_syncobj>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <f_mount+0x7e>
 800d97a:	2302      	movs	r3, #2
 800d97c:	e01d      	b.n	800d9ba <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	4910      	ldr	r1, [pc, #64]	@ (800d9c4 <f_mount+0xc4>)
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d002      	beq.n	800d994 <f_mount+0x94>
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d001      	beq.n	800d998 <f_mount+0x98>
 800d994:	2300      	movs	r3, #0
 800d996:	e010      	b.n	800d9ba <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d998:	f107 010c 	add.w	r1, r7, #12
 800d99c:	f107 0308 	add.w	r3, r7, #8
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7ff fd10 	bl	800d3c8 <find_volume>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	7dfa      	ldrb	r2, [r7, #23]
 800d9b0:	4611      	mov	r1, r2
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe fbd3 	bl	800c15e <unlock_fs>
 800d9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3720      	adds	r7, #32
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	200011f4 	.word	0x200011f4

0800d9c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b098      	sub	sp, #96	@ 0x60
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d101      	bne.n	800d9e0 <f_open+0x18>
 800d9dc:	2309      	movs	r3, #9
 800d9de:	e1b0      	b.n	800dd42 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d9e0:	79fb      	ldrb	r3, [r7, #7]
 800d9e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d9e8:	79fa      	ldrb	r2, [r7, #7]
 800d9ea:	f107 0110 	add.w	r1, r7, #16
 800d9ee:	f107 0308 	add.w	r3, r7, #8
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7ff fce8 	bl	800d3c8 <find_volume>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d9fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da02:	2b00      	cmp	r3, #0
 800da04:	f040 818d 	bne.w	800dd22 <f_open+0x35a>
		dj.obj.fs = fs;
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	f107 0314 	add.w	r3, r7, #20
 800da12:	4611      	mov	r1, r2
 800da14:	4618      	mov	r0, r3
 800da16:	f7ff fbcb 	bl	800d1b0 <follow_path>
 800da1a:	4603      	mov	r3, r0
 800da1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800da20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da24:	2b00      	cmp	r3, #0
 800da26:	d118      	bne.n	800da5a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800da28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800da2c:	b25b      	sxtb	r3, r3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	da03      	bge.n	800da3a <f_open+0x72>
				res = FR_INVALID_NAME;
 800da32:	2306      	movs	r3, #6
 800da34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800da38:	e00f      	b.n	800da5a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da3a:	79fb      	ldrb	r3, [r7, #7]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	bf8c      	ite	hi
 800da40:	2301      	movhi	r3, #1
 800da42:	2300      	movls	r3, #0
 800da44:	b2db      	uxtb	r3, r3
 800da46:	461a      	mov	r2, r3
 800da48:	f107 0314 	add.w	r3, r7, #20
 800da4c:	4611      	mov	r1, r2
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fe fba0 	bl	800c194 <chk_lock>
 800da54:	4603      	mov	r3, r0
 800da56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	f003 031c 	and.w	r3, r3, #28
 800da60:	2b00      	cmp	r3, #0
 800da62:	d07f      	beq.n	800db64 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800da64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d017      	beq.n	800da9c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800da6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800da70:	2b04      	cmp	r3, #4
 800da72:	d10e      	bne.n	800da92 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800da74:	f7fe fbea 	bl	800c24c <enq_lock>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d006      	beq.n	800da8c <f_open+0xc4>
 800da7e:	f107 0314 	add.w	r3, r7, #20
 800da82:	4618      	mov	r0, r3
 800da84:	f7ff face 	bl	800d024 <dir_register>
 800da88:	4603      	mov	r3, r0
 800da8a:	e000      	b.n	800da8e <f_open+0xc6>
 800da8c:	2312      	movs	r3, #18
 800da8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800da92:	79fb      	ldrb	r3, [r7, #7]
 800da94:	f043 0308 	orr.w	r3, r3, #8
 800da98:	71fb      	strb	r3, [r7, #7]
 800da9a:	e010      	b.n	800dabe <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800da9c:	7ebb      	ldrb	r3, [r7, #26]
 800da9e:	f003 0311 	and.w	r3, r3, #17
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d003      	beq.n	800daae <f_open+0xe6>
					res = FR_DENIED;
 800daa6:	2307      	movs	r3, #7
 800daa8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800daac:	e007      	b.n	800dabe <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800daae:	79fb      	ldrb	r3, [r7, #7]
 800dab0:	f003 0304 	and.w	r3, r3, #4
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <f_open+0xf6>
 800dab8:	2308      	movs	r3, #8
 800daba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dabe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d168      	bne.n	800db98 <f_open+0x1d0>
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	f003 0308 	and.w	r3, r3, #8
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d063      	beq.n	800db98 <f_open+0x1d0>
				dw = GET_FATTIME();
 800dad0:	f7fe f932 	bl	800bd38 <get_fattime>
 800dad4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad8:	330e      	adds	r3, #14
 800dada:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fe fa7e 	bl	800bfde <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dae4:	3316      	adds	r3, #22
 800dae6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe fa78 	bl	800bfde <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800daee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daf0:	330b      	adds	r3, #11
 800daf2:	2220      	movs	r2, #32
 800daf4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dafa:	4611      	mov	r1, r2
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7ff f9fd 	bl	800cefc <ld_clust>
 800db02:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800db08:	2200      	movs	r2, #0
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7ff fa15 	bl	800cf3a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800db10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db12:	331c      	adds	r3, #28
 800db14:	2100      	movs	r1, #0
 800db16:	4618      	mov	r0, r3
 800db18:	f7fe fa61 	bl	800bfde <st_dword>
					fs->wflag = 1;
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	2201      	movs	r2, #1
 800db20:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800db22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db24:	2b00      	cmp	r3, #0
 800db26:	d037      	beq.n	800db98 <f_open+0x1d0>
						dw = fs->winsect;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db2c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800db2e:	f107 0314 	add.w	r3, r7, #20
 800db32:	2200      	movs	r2, #0
 800db34:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe ff28 	bl	800c98c <remove_chain>
 800db3c:	4603      	mov	r3, r0
 800db3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800db42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db46:	2b00      	cmp	r3, #0
 800db48:	d126      	bne.n	800db98 <f_open+0x1d0>
							res = move_window(fs, dw);
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fe fcd0 	bl	800c4f4 <move_window>
 800db54:	4603      	mov	r3, r0
 800db56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800db5e:	3a01      	subs	r2, #1
 800db60:	611a      	str	r2, [r3, #16]
 800db62:	e019      	b.n	800db98 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800db64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d115      	bne.n	800db98 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800db6c:	7ebb      	ldrb	r3, [r7, #26]
 800db6e:	f003 0310 	and.w	r3, r3, #16
 800db72:	2b00      	cmp	r3, #0
 800db74:	d003      	beq.n	800db7e <f_open+0x1b6>
					res = FR_NO_FILE;
 800db76:	2304      	movs	r3, #4
 800db78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800db7c:	e00c      	b.n	800db98 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800db7e:	79fb      	ldrb	r3, [r7, #7]
 800db80:	f003 0302 	and.w	r3, r3, #2
 800db84:	2b00      	cmp	r3, #0
 800db86:	d007      	beq.n	800db98 <f_open+0x1d0>
 800db88:	7ebb      	ldrb	r3, [r7, #26]
 800db8a:	f003 0301 	and.w	r3, r3, #1
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d002      	beq.n	800db98 <f_open+0x1d0>
						res = FR_DENIED;
 800db92:	2307      	movs	r3, #7
 800db94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800db98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d126      	bne.n	800dbee <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dba0:	79fb      	ldrb	r3, [r7, #7]
 800dba2:	f003 0308 	and.w	r3, r3, #8
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800dbaa:	79fb      	ldrb	r3, [r7, #7]
 800dbac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbb0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800dbba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	bf8c      	ite	hi
 800dbc6:	2301      	movhi	r3, #1
 800dbc8:	2300      	movls	r3, #0
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	461a      	mov	r2, r3
 800dbce:	f107 0314 	add.w	r3, r7, #20
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fe fb5b 	bl	800c290 <inc_lock>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d102      	bne.n	800dbee <f_open+0x226>
 800dbe8:	2302      	movs	r3, #2
 800dbea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dbee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f040 8095 	bne.w	800dd22 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff f97c 	bl	800cefc <ld_clust>
 800dc04:	4602      	mov	r2, r0
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dc0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc0c:	331c      	adds	r3, #28
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7fe f9a7 	bl	800bf62 <ld_dword>
 800dc14:	4602      	mov	r2, r0
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dc20:	693a      	ldr	r2, [r7, #16]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	88da      	ldrh	r2, [r3, #6]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	79fa      	ldrb	r2, [r7, #7]
 800dc32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2200      	movs	r2, #0
 800dc38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2200      	movs	r2, #0
 800dc44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3330      	adds	r3, #48	@ 0x30
 800dc4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc4e:	2100      	movs	r1, #0
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fe fa11 	bl	800c078 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dc56:	79fb      	ldrb	r3, [r7, #7]
 800dc58:	f003 0320 	and.w	r3, r3, #32
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d060      	beq.n	800dd22 <f_open+0x35a>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d05c      	beq.n	800dd22 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	68da      	ldr	r2, [r3, #12]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	895b      	ldrh	r3, [r3, #10]
 800dc74:	025b      	lsls	r3, r3, #9
 800dc76:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc84:	e016      	b.n	800dcb4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fe fced 	bl	800c66a <get_fat>
 800dc90:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dc92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d802      	bhi.n	800dc9e <f_open+0x2d6>
 800dc98:	2302      	movs	r3, #2
 800dc9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dc9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca4:	d102      	bne.n	800dcac <f_open+0x2e4>
 800dca6:	2301      	movs	r3, #1
 800dca8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dcac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dcae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	657b      	str	r3, [r7, #84]	@ 0x54
 800dcb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d103      	bne.n	800dcc4 <f_open+0x2fc>
 800dcbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dcbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d8e0      	bhi.n	800dc86 <f_open+0x2be>
				}
				fp->clust = clst;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dcc8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dcca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d127      	bne.n	800dd22 <f_open+0x35a>
 800dcd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d022      	beq.n	800dd22 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe fca3 	bl	800c62c <clust2sect>
 800dce6:	6478      	str	r0, [r7, #68]	@ 0x44
 800dce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d103      	bne.n	800dcf6 <f_open+0x32e>
						res = FR_INT_ERR;
 800dcee:	2302      	movs	r3, #2
 800dcf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dcf4:	e015      	b.n	800dd22 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dcf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcf8:	0a5a      	lsrs	r2, r3, #9
 800dcfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcfc:	441a      	add	r2, r3
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	7858      	ldrb	r0, [r3, #1]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6a1a      	ldr	r2, [r3, #32]
 800dd10:	2301      	movs	r3, #1
 800dd12:	f7fe f8af 	bl	800be74 <disk_read>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <f_open+0x35a>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dd22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d002      	beq.n	800dd30 <f_open+0x368>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800dd36:	4611      	mov	r1, r2
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fe fa10 	bl	800c15e <unlock_fs>
 800dd3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3760      	adds	r7, #96	@ 0x60
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b08c      	sub	sp, #48	@ 0x30
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	60f8      	str	r0, [r7, #12]
 800dd52:	60b9      	str	r1, [r7, #8]
 800dd54:	607a      	str	r2, [r7, #4]
 800dd56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f107 0210 	add.w	r2, r7, #16
 800dd68:	4611      	mov	r1, r2
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7ff fd80 	bl	800d870 <validate>
 800dd70:	4603      	mov	r3, r0
 800dd72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dd76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d107      	bne.n	800dd8e <f_write+0x44>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	7d5b      	ldrb	r3, [r3, #21]
 800dd82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800dd86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d009      	beq.n	800dda2 <f_write+0x58>
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800dd94:	4611      	mov	r1, r2
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe f9e1 	bl	800c15e <unlock_fs>
 800dd9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dda0:	e173      	b.n	800e08a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	7d1b      	ldrb	r3, [r3, #20]
 800dda6:	f003 0302 	and.w	r3, r3, #2
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d106      	bne.n	800ddbc <f_write+0x72>
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	2107      	movs	r1, #7
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe f9d3 	bl	800c15e <unlock_fs>
 800ddb8:	2307      	movs	r3, #7
 800ddba:	e166      	b.n	800e08a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	699a      	ldr	r2, [r3, #24]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	441a      	add	r2, r3
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	699b      	ldr	r3, [r3, #24]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	f080 814b 	bcs.w	800e064 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	699b      	ldr	r3, [r3, #24]
 800ddd2:	43db      	mvns	r3, r3
 800ddd4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ddd6:	e145      	b.n	800e064 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	699b      	ldr	r3, [r3, #24]
 800dddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	f040 8101 	bne.w	800dfe8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	699b      	ldr	r3, [r3, #24]
 800ddea:	0a5b      	lsrs	r3, r3, #9
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	8952      	ldrh	r2, [r2, #10]
 800ddf0:	3a01      	subs	r2, #1
 800ddf2:	4013      	ands	r3, r2
 800ddf4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d14d      	bne.n	800de98 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10c      	bne.n	800de1e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800de0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d11a      	bne.n	800de46 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2100      	movs	r1, #0
 800de14:	4618      	mov	r0, r3
 800de16:	f7fe fe1e 	bl	800ca56 <create_chain>
 800de1a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800de1c:	e013      	b.n	800de46 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de22:	2b00      	cmp	r3, #0
 800de24:	d007      	beq.n	800de36 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	4619      	mov	r1, r3
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f7fe feaa 	bl	800cb86 <clmt_clust>
 800de32:	62b8      	str	r0, [r7, #40]	@ 0x28
 800de34:	e007      	b.n	800de46 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	69db      	ldr	r3, [r3, #28]
 800de3c:	4619      	mov	r1, r3
 800de3e:	4610      	mov	r0, r2
 800de40:	f7fe fe09 	bl	800ca56 <create_chain>
 800de44:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f000 8110 	beq.w	800e06e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800de4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de50:	2b01      	cmp	r3, #1
 800de52:	d109      	bne.n	800de68 <f_write+0x11e>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2202      	movs	r2, #2
 800de58:	755a      	strb	r2, [r3, #21]
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	2102      	movs	r1, #2
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fe f97d 	bl	800c15e <unlock_fs>
 800de64:	2302      	movs	r3, #2
 800de66:	e110      	b.n	800e08a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6e:	d109      	bne.n	800de84 <f_write+0x13a>
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2201      	movs	r2, #1
 800de74:	755a      	strb	r2, [r3, #21]
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	2101      	movs	r1, #1
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fe f96f 	bl	800c15e <unlock_fs>
 800de80:	2301      	movs	r3, #1
 800de82:	e102      	b.n	800e08a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de88:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	689b      	ldr	r3, [r3, #8]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d102      	bne.n	800de98 <f_write+0x14e>
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	7d1b      	ldrb	r3, [r3, #20]
 800de9c:	b25b      	sxtb	r3, r3
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	da1d      	bge.n	800dede <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	7858      	ldrb	r0, [r3, #1]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6a1a      	ldr	r2, [r3, #32]
 800deb0:	2301      	movs	r3, #1
 800deb2:	f7fd ffff 	bl	800beb4 <disk_write>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d009      	beq.n	800ded0 <f_write+0x186>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2201      	movs	r2, #1
 800dec0:	755a      	strb	r2, [r3, #21]
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	2101      	movs	r1, #1
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fe f949 	bl	800c15e <unlock_fs>
 800decc:	2301      	movs	r3, #1
 800dece:	e0dc      	b.n	800e08a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	7d1b      	ldrb	r3, [r3, #20]
 800ded4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	69db      	ldr	r3, [r3, #28]
 800dee4:	4619      	mov	r1, r3
 800dee6:	4610      	mov	r0, r2
 800dee8:	f7fe fba0 	bl	800c62c <clust2sect>
 800deec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d109      	bne.n	800df08 <f_write+0x1be>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2202      	movs	r2, #2
 800def8:	755a      	strb	r2, [r3, #21]
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	2102      	movs	r1, #2
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe f92d 	bl	800c15e <unlock_fs>
 800df04:	2302      	movs	r3, #2
 800df06:	e0c0      	b.n	800e08a <f_write+0x340>
			sect += csect;
 800df08:	697a      	ldr	r2, [r7, #20]
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	4413      	add	r3, r2
 800df0e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	0a5b      	lsrs	r3, r3, #9
 800df14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800df16:	6a3b      	ldr	r3, [r7, #32]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d041      	beq.n	800dfa0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800df1c:	69ba      	ldr	r2, [r7, #24]
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	4413      	add	r3, r2
 800df22:	693a      	ldr	r2, [r7, #16]
 800df24:	8952      	ldrh	r2, [r2, #10]
 800df26:	4293      	cmp	r3, r2
 800df28:	d905      	bls.n	800df36 <f_write+0x1ec>
					cc = fs->csize - csect;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	895b      	ldrh	r3, [r3, #10]
 800df2e:	461a      	mov	r2, r3
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	7858      	ldrb	r0, [r3, #1]
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	69f9      	ldr	r1, [r7, #28]
 800df40:	f7fd ffb8 	bl	800beb4 <disk_write>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d009      	beq.n	800df5e <f_write+0x214>
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2201      	movs	r2, #1
 800df4e:	755a      	strb	r2, [r3, #21]
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	2101      	movs	r1, #1
 800df54:	4618      	mov	r0, r3
 800df56:	f7fe f902 	bl	800c15e <unlock_fs>
 800df5a:	2301      	movs	r3, #1
 800df5c:	e095      	b.n	800e08a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6a1a      	ldr	r2, [r3, #32]
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	6a3a      	ldr	r2, [r7, #32]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d915      	bls.n	800df98 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6a1a      	ldr	r2, [r3, #32]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	025b      	lsls	r3, r3, #9
 800df7c:	69fa      	ldr	r2, [r7, #28]
 800df7e:	4413      	add	r3, r2
 800df80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df84:	4619      	mov	r1, r3
 800df86:	f7fe f856 	bl	800c036 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	7d1b      	ldrb	r3, [r3, #20]
 800df8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df92:	b2da      	uxtb	r2, r3
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800df98:	6a3b      	ldr	r3, [r7, #32]
 800df9a:	025b      	lsls	r3, r3, #9
 800df9c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800df9e:	e044      	b.n	800e02a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6a1b      	ldr	r3, [r3, #32]
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d01b      	beq.n	800dfe2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	699a      	ldr	r2, [r3, #24]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d215      	bcs.n	800dfe2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	7858      	ldrb	r0, [r3, #1]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	697a      	ldr	r2, [r7, #20]
 800dfc4:	f7fd ff56 	bl	800be74 <disk_read>
 800dfc8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d009      	beq.n	800dfe2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	755a      	strb	r2, [r3, #21]
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fe f8c0 	bl	800c15e <unlock_fs>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e053      	b.n	800e08a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	697a      	ldr	r2, [r7, #20]
 800dfe6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	699b      	ldr	r3, [r3, #24]
 800dfec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dff0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dff4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d901      	bls.n	800e002 <f_write+0x2b8>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	699b      	ldr	r3, [r3, #24]
 800e00c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e010:	4413      	add	r3, r2
 800e012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e014:	69f9      	ldr	r1, [r7, #28]
 800e016:	4618      	mov	r0, r3
 800e018:	f7fe f80d 	bl	800c036 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	7d1b      	ldrb	r3, [r3, #20]
 800e020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e024:	b2da      	uxtb	r2, r3
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e02a:	69fa      	ldr	r2, [r7, #28]
 800e02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e02e:	4413      	add	r3, r2
 800e030:	61fb      	str	r3, [r7, #28]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	699a      	ldr	r2, [r3, #24]
 800e036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e038:	441a      	add	r2, r3
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	619a      	str	r2, [r3, #24]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	68da      	ldr	r2, [r3, #12]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	699b      	ldr	r3, [r3, #24]
 800e046:	429a      	cmp	r2, r3
 800e048:	bf38      	it	cc
 800e04a:	461a      	movcc	r2, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	60da      	str	r2, [r3, #12]
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e056:	441a      	add	r2, r3
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2b00      	cmp	r3, #0
 800e068:	f47f aeb6 	bne.w	800ddd8 <f_write+0x8e>
 800e06c:	e000      	b.n	800e070 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e06e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	7d1b      	ldrb	r3, [r3, #20]
 800e074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	2100      	movs	r1, #0
 800e082:	4618      	mov	r0, r3
 800e084:	f7fe f86b 	bl	800c15e <unlock_fs>
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3730      	adds	r7, #48	@ 0x30
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b086      	sub	sp, #24
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f107 0208 	add.w	r2, r7, #8
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7ff fbe4 	bl	800d870 <validate>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e0ac:	7dfb      	ldrb	r3, [r7, #23]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d16d      	bne.n	800e18e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	7d1b      	ldrb	r3, [r3, #20]
 800e0b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d067      	beq.n	800e18e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	7d1b      	ldrb	r3, [r3, #20]
 800e0c2:	b25b      	sxtb	r3, r3
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	da1a      	bge.n	800e0fe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	7858      	ldrb	r0, [r3, #1]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a1a      	ldr	r2, [r3, #32]
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	f7fd feec 	bl	800beb4 <disk_write>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d006      	beq.n	800e0f0 <f_sync+0x5e>
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	2101      	movs	r1, #1
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fe f839 	bl	800c15e <unlock_fs>
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	e055      	b.n	800e19c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7d1b      	ldrb	r3, [r3, #20]
 800e0f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e0fe:	f7fd fe1b 	bl	800bd38 <get_fattime>
 800e102:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e104:	68ba      	ldr	r2, [r7, #8]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e10a:	4619      	mov	r1, r3
 800e10c:	4610      	mov	r0, r2
 800e10e:	f7fe f9f1 	bl	800c4f4 <move_window>
 800e112:	4603      	mov	r3, r0
 800e114:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e116:	7dfb      	ldrb	r3, [r7, #23]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d138      	bne.n	800e18e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e120:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	330b      	adds	r3, #11
 800e126:	781a      	ldrb	r2, [r3, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	330b      	adds	r3, #11
 800e12c:	f042 0220 	orr.w	r2, r2, #32
 800e130:	b2d2      	uxtb	r2, r2
 800e132:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6818      	ldr	r0, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	461a      	mov	r2, r3
 800e13e:	68f9      	ldr	r1, [r7, #12]
 800e140:	f7fe fefb 	bl	800cf3a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f103 021c 	add.w	r2, r3, #28
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	4619      	mov	r1, r3
 800e150:	4610      	mov	r0, r2
 800e152:	f7fd ff44 	bl	800bfde <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	3316      	adds	r3, #22
 800e15a:	6939      	ldr	r1, [r7, #16]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fd ff3e 	bl	800bfde <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	3312      	adds	r3, #18
 800e166:	2100      	movs	r1, #0
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fd ff1d 	bl	800bfa8 <st_word>
					fs->wflag = 1;
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	2201      	movs	r2, #1
 800e172:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	4618      	mov	r0, r3
 800e178:	f7fe f9ea 	bl	800c550 <sync_fs>
 800e17c:	4603      	mov	r3, r0
 800e17e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	7d1b      	ldrb	r3, [r3, #20]
 800e184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	7dfa      	ldrb	r2, [r7, #23]
 800e192:	4611      	mov	r1, r2
 800e194:	4618      	mov	r0, r3
 800e196:	f7fd ffe2 	bl	800c15e <unlock_fs>
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7ff ff70 	bl	800e092 <f_sync>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e1b6:	7bfb      	ldrb	r3, [r7, #15]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d11d      	bne.n	800e1f8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f107 0208 	add.w	r2, r7, #8
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7ff fb53 	bl	800d870 <validate>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d111      	bne.n	800e1f8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	691b      	ldr	r3, [r3, #16]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7fe f8e7 	bl	800c3ac <dec_lock>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e1e2:	7bfb      	ldrb	r3, [r7, #15]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d102      	bne.n	800e1ee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fd ffb3 	bl	800c15e <unlock_fs>
#endif
		}
	}
	return res;
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3710      	adds	r7, #16
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b090      	sub	sp, #64	@ 0x40
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
 800e20a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f107 0208 	add.w	r2, r7, #8
 800e212:	4611      	mov	r1, r2
 800e214:	4618      	mov	r0, r3
 800e216:	f7ff fb2b 	bl	800d870 <validate>
 800e21a:	4603      	mov	r3, r0
 800e21c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e220:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e224:	2b00      	cmp	r3, #0
 800e226:	d103      	bne.n	800e230 <f_lseek+0x2e>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	7d5b      	ldrb	r3, [r3, #21]
 800e22c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e230:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e234:	2b00      	cmp	r3, #0
 800e236:	d009      	beq.n	800e24c <f_lseek+0x4a>
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e23e:	4611      	mov	r1, r2
 800e240:	4618      	mov	r0, r3
 800e242:	f7fd ff8c 	bl	800c15e <unlock_fs>
 800e246:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e24a:	e229      	b.n	800e6a0 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e250:	2b00      	cmp	r3, #0
 800e252:	f000 80ea 	beq.w	800e42a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e25c:	d164      	bne.n	800e328 <f_lseek+0x126>
			tbl = fp->cltbl;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e262:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e266:	1d1a      	adds	r2, r3, #4
 800e268:	627a      	str	r2, [r7, #36]	@ 0x24
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	617b      	str	r3, [r7, #20]
 800e26e:	2302      	movs	r3, #2
 800e270:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d044      	beq.n	800e308 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e280:	613b      	str	r3, [r7, #16]
 800e282:	2300      	movs	r3, #0
 800e284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e288:	3302      	adds	r3, #2
 800e28a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e28e:	60fb      	str	r3, [r7, #12]
 800e290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e292:	3301      	adds	r3, #1
 800e294:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe f9e5 	bl	800c66a <get_fat>
 800e2a0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d809      	bhi.n	800e2bc <f_lseek+0xba>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	755a      	strb	r2, [r3, #21]
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	2102      	movs	r1, #2
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fd ff53 	bl	800c15e <unlock_fs>
 800e2b8:	2302      	movs	r3, #2
 800e2ba:	e1f1      	b.n	800e6a0 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c2:	d109      	bne.n	800e2d8 <f_lseek+0xd6>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	755a      	strb	r2, [r3, #21]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	2101      	movs	r1, #1
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fd ff45 	bl	800c15e <unlock_fs>
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	e1e3      	b.n	800e6a0 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d0d4      	beq.n	800e28c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e2e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d809      	bhi.n	800e2fe <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ec:	1d1a      	adds	r2, r3, #4
 800e2ee:	627a      	str	r2, [r7, #36]	@ 0x24
 800e2f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f6:	1d1a      	adds	r2, r3, #4
 800e2f8:	627a      	str	r2, [r7, #36]	@ 0x24
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	699b      	ldr	r3, [r3, #24]
 800e302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e304:	429a      	cmp	r2, r3
 800e306:	d3ba      	bcc.n	800e27e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e30c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e30e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	429a      	cmp	r2, r3
 800e316:	d803      	bhi.n	800e320 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800e318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	e1b6      	b.n	800e68e <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e320:	2311      	movs	r3, #17
 800e322:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e326:	e1b2      	b.n	800e68e <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	683a      	ldr	r2, [r7, #0]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d902      	bls.n	800e338 <f_lseek+0x136>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	683a      	ldr	r2, [r7, #0]
 800e33c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	f000 81a4 	beq.w	800e68e <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	3b01      	subs	r3, #1
 800e34a:	4619      	mov	r1, r3
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7fe fc1a 	bl	800cb86 <clmt_clust>
 800e352:	4602      	mov	r2, r0
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	69db      	ldr	r3, [r3, #28]
 800e35e:	4619      	mov	r1, r3
 800e360:	4610      	mov	r0, r2
 800e362:	f7fe f963 	bl	800c62c <clust2sect>
 800e366:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e368:	69bb      	ldr	r3, [r7, #24]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d109      	bne.n	800e382 <f_lseek+0x180>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2202      	movs	r2, #2
 800e372:	755a      	strb	r2, [r3, #21]
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	2102      	movs	r1, #2
 800e378:	4618      	mov	r0, r3
 800e37a:	f7fd fef0 	bl	800c15e <unlock_fs>
 800e37e:	2302      	movs	r3, #2
 800e380:	e18e      	b.n	800e6a0 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	3b01      	subs	r3, #1
 800e386:	0a5b      	lsrs	r3, r3, #9
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	8952      	ldrh	r2, [r2, #10]
 800e38c:	3a01      	subs	r2, #1
 800e38e:	4013      	ands	r3, r2
 800e390:	69ba      	ldr	r2, [r7, #24]
 800e392:	4413      	add	r3, r2
 800e394:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	699b      	ldr	r3, [r3, #24]
 800e39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	f000 8175 	beq.w	800e68e <f_lseek+0x48c>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a1b      	ldr	r3, [r3, #32]
 800e3a8:	69ba      	ldr	r2, [r7, #24]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	f000 816f 	beq.w	800e68e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	7d1b      	ldrb	r3, [r3, #20]
 800e3b4:	b25b      	sxtb	r3, r3
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	da1d      	bge.n	800e3f6 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	7858      	ldrb	r0, [r3, #1]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6a1a      	ldr	r2, [r3, #32]
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	f7fd fd73 	bl	800beb4 <disk_write>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d009      	beq.n	800e3e8 <f_lseek+0x1e6>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	755a      	strb	r2, [r3, #21]
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	2101      	movs	r1, #1
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fd febd 	bl	800c15e <unlock_fs>
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e15b      	b.n	800e6a0 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	7d1b      	ldrb	r3, [r3, #20]
 800e3ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	7858      	ldrb	r0, [r3, #1]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e400:	2301      	movs	r3, #1
 800e402:	69ba      	ldr	r2, [r7, #24]
 800e404:	f7fd fd36 	bl	800be74 <disk_read>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d009      	beq.n	800e422 <f_lseek+0x220>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2201      	movs	r2, #1
 800e412:	755a      	strb	r2, [r3, #21]
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	2101      	movs	r1, #1
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fd fea0 	bl	800c15e <unlock_fs>
 800e41e:	2301      	movs	r3, #1
 800e420:	e13e      	b.n	800e6a0 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	69ba      	ldr	r2, [r7, #24]
 800e426:	621a      	str	r2, [r3, #32]
 800e428:	e131      	b.n	800e68e <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	683a      	ldr	r2, [r7, #0]
 800e430:	429a      	cmp	r2, r3
 800e432:	d908      	bls.n	800e446 <f_lseek+0x244>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	7d1b      	ldrb	r3, [r3, #20]
 800e438:	f003 0302 	and.w	r3, r3, #2
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e44c:	2300      	movs	r3, #0
 800e44e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e454:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f000 80c0 	beq.w	800e5de <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	895b      	ldrh	r3, [r3, #10]
 800e462:	025b      	lsls	r3, r3, #9
 800e464:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e466:	6a3b      	ldr	r3, [r7, #32]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d01b      	beq.n	800e4a4 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	1e5a      	subs	r2, r3, #1
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	fbb2 f2f3 	udiv	r2, r2, r3
 800e476:	6a3b      	ldr	r3, [r7, #32]
 800e478:	1e59      	subs	r1, r3, #1
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e480:	429a      	cmp	r2, r3
 800e482:	d30f      	bcc.n	800e4a4 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e484:	6a3b      	ldr	r3, [r7, #32]
 800e486:	1e5a      	subs	r2, r3, #1
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	425b      	negs	r3, r3
 800e48c:	401a      	ands	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	683a      	ldr	r2, [r7, #0]
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	69db      	ldr	r3, [r3, #28]
 800e4a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e4a2:	e02c      	b.n	800e4fe <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	689b      	ldr	r3, [r3, #8]
 800e4a8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d123      	bne.n	800e4f8 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fe face 	bl	800ca56 <create_chain>
 800e4ba:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d109      	bne.n	800e4d6 <f_lseek+0x2d4>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2202      	movs	r2, #2
 800e4c6:	755a      	strb	r2, [r3, #21]
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	2102      	movs	r1, #2
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fd fe46 	bl	800c15e <unlock_fs>
 800e4d2:	2302      	movs	r3, #2
 800e4d4:	e0e4      	b.n	800e6a0 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4dc:	d109      	bne.n	800e4f2 <f_lseek+0x2f0>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	755a      	strb	r2, [r3, #21]
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fd fe38 	bl	800c15e <unlock_fs>
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e0d6      	b.n	800e6a0 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4f6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4fc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e500:	2b00      	cmp	r3, #0
 800e502:	d06c      	beq.n	800e5de <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800e504:	e044      	b.n	800e590 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800e506:	683a      	ldr	r2, [r7, #0]
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	1ad3      	subs	r3, r2, r3
 800e50c:	603b      	str	r3, [r7, #0]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	699a      	ldr	r2, [r3, #24]
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	441a      	add	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	7d1b      	ldrb	r3, [r3, #20]
 800e51e:	f003 0302 	and.w	r3, r3, #2
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00b      	beq.n	800e53e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fe fa93 	bl	800ca56 <create_chain>
 800e530:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e534:	2b00      	cmp	r3, #0
 800e536:	d108      	bne.n	800e54a <f_lseek+0x348>
							ofs = 0; break;
 800e538:	2300      	movs	r3, #0
 800e53a:	603b      	str	r3, [r7, #0]
 800e53c:	e02c      	b.n	800e598 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e542:	4618      	mov	r0, r3
 800e544:	f7fe f891 	bl	800c66a <get_fat>
 800e548:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e550:	d109      	bne.n	800e566 <f_lseek+0x364>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	755a      	strb	r2, [r3, #21]
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	2101      	movs	r1, #1
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7fd fdfe 	bl	800c15e <unlock_fs>
 800e562:	2301      	movs	r3, #1
 800e564:	e09c      	b.n	800e6a0 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d904      	bls.n	800e576 <f_lseek+0x374>
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	699b      	ldr	r3, [r3, #24]
 800e570:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e572:	429a      	cmp	r2, r3
 800e574:	d309      	bcc.n	800e58a <f_lseek+0x388>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2202      	movs	r2, #2
 800e57a:	755a      	strb	r2, [r3, #21]
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2102      	movs	r1, #2
 800e580:	4618      	mov	r0, r3
 800e582:	f7fd fdec 	bl	800c15e <unlock_fs>
 800e586:	2302      	movs	r3, #2
 800e588:	e08a      	b.n	800e6a0 <f_lseek+0x49e>
					fp->clust = clst;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e58e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e590:	683a      	ldr	r2, [r7, #0]
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	429a      	cmp	r2, r3
 800e596:	d8b6      	bhi.n	800e506 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	699a      	ldr	r2, [r3, #24]
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	441a      	add	r2, r3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d017      	beq.n	800e5de <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe f83a 	bl	800c62c <clust2sect>
 800e5b8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d109      	bne.n	800e5d4 <f_lseek+0x3d2>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	755a      	strb	r2, [r3, #21]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	2102      	movs	r1, #2
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fd fdc7 	bl	800c15e <unlock_fs>
 800e5d0:	2302      	movs	r3, #2
 800e5d2:	e065      	b.n	800e6a0 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	0a5b      	lsrs	r3, r3, #9
 800e5d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5da:	4413      	add	r3, r2
 800e5dc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	699a      	ldr	r2, [r3, #24]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d90a      	bls.n	800e600 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	699a      	ldr	r2, [r3, #24]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	7d1b      	ldrb	r3, [r3, #20]
 800e5f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5fa:	b2da      	uxtb	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	699b      	ldr	r3, [r3, #24]
 800e604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d040      	beq.n	800e68e <f_lseek+0x48c>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6a1b      	ldr	r3, [r3, #32]
 800e610:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e612:	429a      	cmp	r2, r3
 800e614:	d03b      	beq.n	800e68e <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	7d1b      	ldrb	r3, [r3, #20]
 800e61a:	b25b      	sxtb	r3, r3
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	da1d      	bge.n	800e65c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	7858      	ldrb	r0, [r3, #1]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6a1a      	ldr	r2, [r3, #32]
 800e62e:	2301      	movs	r3, #1
 800e630:	f7fd fc40 	bl	800beb4 <disk_write>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d009      	beq.n	800e64e <f_lseek+0x44c>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2201      	movs	r2, #1
 800e63e:	755a      	strb	r2, [r3, #21]
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	2101      	movs	r1, #1
 800e644:	4618      	mov	r0, r3
 800e646:	f7fd fd8a 	bl	800c15e <unlock_fs>
 800e64a:	2301      	movs	r3, #1
 800e64c:	e028      	b.n	800e6a0 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	7d1b      	ldrb	r3, [r3, #20]
 800e652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e656:	b2da      	uxtb	r2, r3
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	7858      	ldrb	r0, [r3, #1]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e666:	2301      	movs	r3, #1
 800e668:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e66a:	f7fd fc03 	bl	800be74 <disk_read>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d009      	beq.n	800e688 <f_lseek+0x486>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	755a      	strb	r2, [r3, #21]
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	2101      	movs	r1, #1
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fd fd6d 	bl	800c15e <unlock_fs>
 800e684:	2301      	movs	r3, #1
 800e686:	e00b      	b.n	800e6a0 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e68c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e694:	4611      	mov	r1, r2
 800e696:	4618      	mov	r0, r3
 800e698:	f7fd fd61 	bl	800c15e <unlock_fs>
 800e69c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3740      	adds	r7, #64	@ 0x40
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b096      	sub	sp, #88	@ 0x58
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800e6b0:	f107 0108 	add.w	r1, r7, #8
 800e6b4:	1d3b      	adds	r3, r7, #4
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe fe85 	bl	800d3c8 <find_volume>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800e6c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f040 80ec 	bne.w	800e8aa <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	f107 030c 	add.w	r3, r7, #12
 800e6d8:	4611      	mov	r1, r2
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fe fd68 	bl	800d1b0 <follow_path>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800e6e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d102      	bne.n	800e6f4 <f_mkdir+0x4c>
 800e6ee:	2308      	movs	r3, #8
 800e6f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800e6f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e6f8:	2b04      	cmp	r3, #4
 800e6fa:	f040 80d6 	bne.w	800e8aa <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800e6fe:	f107 030c 	add.w	r3, r7, #12
 800e702:	2100      	movs	r1, #0
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe f9a6 	bl	800ca56 <create_chain>
 800e70a:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	895b      	ldrh	r3, [r3, #10]
 800e710:	025b      	lsls	r3, r3, #9
 800e712:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800e714:	2300      	movs	r3, #0
 800e716:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800e71a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d102      	bne.n	800e726 <f_mkdir+0x7e>
 800e720:	2307      	movs	r3, #7
 800e722:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800e726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d102      	bne.n	800e732 <f_mkdir+0x8a>
 800e72c:	2302      	movs	r3, #2
 800e72e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e738:	d102      	bne.n	800e740 <f_mkdir+0x98>
 800e73a:	2301      	movs	r3, #1
 800e73c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800e740:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e744:	2b00      	cmp	r3, #0
 800e746:	d106      	bne.n	800e756 <f_mkdir+0xae>
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fd fe8e 	bl	800c46c <sync_window>
 800e750:	4603      	mov	r3, r0
 800e752:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800e756:	f7fd faef 	bl	800bd38 <get_fattime>
 800e75a:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800e75c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e760:	2b00      	cmp	r3, #0
 800e762:	d16a      	bne.n	800e83a <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fd ff5f 	bl	800c62c <clust2sect>
 800e76e:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	3334      	adds	r3, #52	@ 0x34
 800e774:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800e776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e77a:	2100      	movs	r1, #0
 800e77c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e77e:	f7fd fc7b 	bl	800c078 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800e782:	220b      	movs	r2, #11
 800e784:	2120      	movs	r1, #32
 800e786:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e788:	f7fd fc76 	bl	800c078 <mem_set>
					dir[DIR_Name] = '.';
 800e78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e78e:	222e      	movs	r2, #46	@ 0x2e
 800e790:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800e792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e794:	330b      	adds	r3, #11
 800e796:	2210      	movs	r2, #16
 800e798:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800e79a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e79c:	3316      	adds	r3, #22
 800e79e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fd fc1c 	bl	800bfde <st_dword>
					st_clust(fs, dir, dcl);
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe fbc4 	bl	800cf3a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800e7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7b4:	3320      	adds	r3, #32
 800e7b6:	2220      	movs	r2, #32
 800e7b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fd fc3b 	bl	800c036 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800e7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7c2:	3321      	adds	r3, #33	@ 0x21
 800e7c4:	222e      	movs	r2, #46	@ 0x2e
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	2b03      	cmp	r3, #3
 800e7d2:	d106      	bne.n	800e7e2 <f_mkdir+0x13a>
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d101      	bne.n	800e7e2 <f_mkdir+0x13a>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800e7e2:	68b8      	ldr	r0, [r7, #8]
 800e7e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7e6:	3320      	adds	r3, #32
 800e7e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	f7fe fba5 	bl	800cf3a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	895b      	ldrh	r3, [r3, #10]
 800e7f4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e7f6:	e01b      	b.n	800e830 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800e7f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e7fe:	68ba      	ldr	r2, [r7, #8]
 800e800:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2201      	movs	r2, #1
 800e806:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fd fe2e 	bl	800c46c <sync_window>
 800e810:	4603      	mov	r3, r0
 800e812:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800e816:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d10c      	bne.n	800e838 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800e81e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e822:	2100      	movs	r1, #0
 800e824:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e826:	f7fd fc27 	bl	800c078 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800e82a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e82c:	3b01      	subs	r3, #1
 800e82e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e832:	2b00      	cmp	r3, #0
 800e834:	d1e0      	bne.n	800e7f8 <f_mkdir+0x150>
 800e836:	e000      	b.n	800e83a <f_mkdir+0x192>
					if (res != FR_OK) break;
 800e838:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800e83a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d107      	bne.n	800e852 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800e842:	f107 030c 	add.w	r3, r7, #12
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe fbec 	bl	800d024 <dir_register>
 800e84c:	4603      	mov	r3, r0
 800e84e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800e852:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e856:	2b00      	cmp	r3, #0
 800e858:	d120      	bne.n	800e89c <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800e85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800e85e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e860:	3316      	adds	r3, #22
 800e862:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e864:	4618      	mov	r0, r3
 800e866:	f7fd fbba 	bl	800bfde <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e86e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e870:	4618      	mov	r0, r3
 800e872:	f7fe fb62 	bl	800cf3a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800e876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e878:	330b      	adds	r3, #11
 800e87a:	2210      	movs	r2, #16
 800e87c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	2201      	movs	r2, #1
 800e882:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800e884:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10e      	bne.n	800e8aa <f_mkdir+0x202>
					res = sync_fs(fs);
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fd fe5e 	bl	800c550 <sync_fs>
 800e894:	4603      	mov	r3, r0
 800e896:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800e89a:	e006      	b.n	800e8aa <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800e89c:	f107 030c 	add.w	r3, r7, #12
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe f871 	bl	800c98c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e8b0:	4611      	mov	r1, r2
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fd fc53 	bl	800c15e <unlock_fs>
 800e8b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3758      	adds	r7, #88	@ 0x58
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b087      	sub	sp, #28
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e8da:	4b1f      	ldr	r3, [pc, #124]	@ (800e958 <FATFS_LinkDriverEx+0x94>)
 800e8dc:	7a5b      	ldrb	r3, [r3, #9]
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d131      	bne.n	800e948 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e8e4:	4b1c      	ldr	r3, [pc, #112]	@ (800e958 <FATFS_LinkDriverEx+0x94>)
 800e8e6:	7a5b      	ldrb	r3, [r3, #9]
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	4b1a      	ldr	r3, [pc, #104]	@ (800e958 <FATFS_LinkDriverEx+0x94>)
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e8f2:	4b19      	ldr	r3, [pc, #100]	@ (800e958 <FATFS_LinkDriverEx+0x94>)
 800e8f4:	7a5b      	ldrb	r3, [r3, #9]
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	4a17      	ldr	r2, [pc, #92]	@ (800e958 <FATFS_LinkDriverEx+0x94>)
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	4413      	add	r3, r2
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e902:	4b15      	ldr	r3, [pc, #84]	@ (800e958 <FATFS_LinkDriverEx+0x94>)
 800e904:	7a5b      	ldrb	r3, [r3, #9]
 800e906:	b2db      	uxtb	r3, r3
 800e908:	461a      	mov	r2, r3
 800e90a:	4b13      	ldr	r3, [pc, #76]	@ (800e958 <FATFS_LinkDriverEx+0x94>)
 800e90c:	4413      	add	r3, r2
 800e90e:	79fa      	ldrb	r2, [r7, #7]
 800e910:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e912:	4b11      	ldr	r3, [pc, #68]	@ (800e958 <FATFS_LinkDriverEx+0x94>)
 800e914:	7a5b      	ldrb	r3, [r3, #9]
 800e916:	b2db      	uxtb	r3, r3
 800e918:	1c5a      	adds	r2, r3, #1
 800e91a:	b2d1      	uxtb	r1, r2
 800e91c:	4a0e      	ldr	r2, [pc, #56]	@ (800e958 <FATFS_LinkDriverEx+0x94>)
 800e91e:	7251      	strb	r1, [r2, #9]
 800e920:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e922:	7dbb      	ldrb	r3, [r7, #22]
 800e924:	3330      	adds	r3, #48	@ 0x30
 800e926:	b2da      	uxtb	r2, r3
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	3301      	adds	r3, #1
 800e930:	223a      	movs	r2, #58	@ 0x3a
 800e932:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	3302      	adds	r3, #2
 800e938:	222f      	movs	r2, #47	@ 0x2f
 800e93a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	3303      	adds	r3, #3
 800e940:	2200      	movs	r2, #0
 800e942:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e944:	2300      	movs	r3, #0
 800e946:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e948:	7dfb      	ldrb	r3, [r7, #23]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	371c      	adds	r7, #28
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	2000121c 	.word	0x2000121c

0800e95c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e966:	2200      	movs	r2, #0
 800e968:	6839      	ldr	r1, [r7, #0]
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7ff ffaa 	bl	800e8c4 <FATFS_LinkDriverEx>
 800e970:	4603      	mov	r3, r0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b084      	sub	sp, #16
 800e97e:	af00      	add	r7, sp, #0
 800e980:	4603      	mov	r3, r0
 800e982:	6039      	str	r1, [r7, #0]
 800e984:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800e986:	2300      	movs	r3, #0
 800e988:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800e98a:	f107 0308 	add.w	r3, r7, #8
 800e98e:	2101      	movs	r1, #1
 800e990:	4618      	mov	r0, r3
 800e992:	f000 f939 	bl	800ec08 <osSemaphoreCreate>
 800e996:	4602      	mov	r2, r0
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	bf14      	ite	ne
 800e9a4:	2301      	movne	r3, #1
 800e9a6:	2300      	moveq	r3, #0
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	60fb      	str	r3, [r7, #12]

    return ret;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b082      	sub	sp, #8
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 f9c4 	bl	800ed4c <osSemaphoreDelete>
#endif
    return 1;
 800e9c4:	2301      	movs	r3, #1
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b084      	sub	sp, #16
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800e9da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 f930 	bl	800ec44 <osSemaphoreWait>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d101      	bne.n	800e9ee <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 f96d 	bl	800ece0 <osSemaphoreRelease>
#endif
}
 800ea06:	bf00      	nop
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b085      	sub	sp, #20
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	4603      	mov	r3, r0
 800ea16:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ea1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea20:	2b84      	cmp	r3, #132	@ 0x84
 800ea22:	d005      	beq.n	800ea30 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ea24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	3303      	adds	r3, #3
 800ea2e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ea30:	68fb      	ldr	r3, [r7, #12]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3714      	adds	r7, #20
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr

0800ea3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ea3e:	b480      	push	{r7}
 800ea40:	b083      	sub	sp, #12
 800ea42:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea44:	f3ef 8305 	mrs	r3, IPSR
 800ea48:	607b      	str	r3, [r7, #4]
  return(result);
 800ea4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	bf14      	ite	ne
 800ea50:	2301      	movne	r3, #1
 800ea52:	2300      	moveq	r3, #0
 800ea54:	b2db      	uxtb	r3, r3
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ea66:	f001 fa6b 	bl	800ff40 <vTaskStartScheduler>
  
  return osOK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ea70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af02      	add	r7, sp, #8
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	685c      	ldr	r4, [r3, #4]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea86:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff ffbd 	bl	800ea0e <makeFreeRtosPriority>
 800ea94:	4602      	mov	r2, r0
 800ea96:	f107 030c 	add.w	r3, r7, #12
 800ea9a:	9301      	str	r3, [sp, #4]
 800ea9c:	9200      	str	r2, [sp, #0]
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	4632      	mov	r2, r6
 800eaa2:	4629      	mov	r1, r5
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f000 ffad 	bl	800fa04 <xTaskCreate>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d001      	beq.n	800eab4 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800eab0:	2300      	movs	r3, #0
 800eab2:	e000      	b.n	800eab6 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800eab4:	68fb      	ldr	r3, [r7, #12]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3714      	adds	r7, #20
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eabe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b084      	sub	sp, #16
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d001      	beq.n	800ead4 <osDelay+0x16>
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	e000      	b.n	800ead6 <osDelay+0x18>
 800ead4:	2301      	movs	r3, #1
 800ead6:	4618      	mov	r0, r3
 800ead8:	f001 f968 	bl	800fdac <vTaskDelay>
  
  return osOK;
 800eadc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b082      	sub	sp, #8
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800eaee:	2001      	movs	r0, #1
 800eaf0:	f000 fada 	bl	800f0a8 <xQueueCreateMutex>
 800eaf4:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
	...

0800eb00 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d101      	bne.n	800eb18 <osMutexWait+0x18>
    return osErrorParameter;
 800eb14:	2380      	movs	r3, #128	@ 0x80
 800eb16:	e03a      	b.n	800eb8e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb22:	d103      	bne.n	800eb2c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800eb24:	f04f 33ff 	mov.w	r3, #4294967295
 800eb28:	60fb      	str	r3, [r7, #12]
 800eb2a:	e009      	b.n	800eb40 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d006      	beq.n	800eb40 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d101      	bne.n	800eb40 <osMutexWait+0x40>
      ticks = 1;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800eb40:	f7ff ff7d 	bl	800ea3e <inHandlerMode>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d017      	beq.n	800eb7a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800eb4a:	f107 0308 	add.w	r3, r7, #8
 800eb4e:	461a      	mov	r2, r3
 800eb50:	2100      	movs	r1, #0
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fd62 	bl	800f61c <xQueueReceiveFromISR>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d001      	beq.n	800eb62 <osMutexWait+0x62>
      return osErrorOS;
 800eb5e:	23ff      	movs	r3, #255	@ 0xff
 800eb60:	e015      	b.n	800eb8e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d011      	beq.n	800eb8c <osMutexWait+0x8c>
 800eb68:	4b0b      	ldr	r3, [pc, #44]	@ (800eb98 <osMutexWait+0x98>)
 800eb6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb6e:	601a      	str	r2, [r3, #0]
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	f3bf 8f6f 	isb	sy
 800eb78:	e008      	b.n	800eb8c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800eb7a:	68f9      	ldr	r1, [r7, #12]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 fc3d 	bl	800f3fc <xQueueSemaphoreTake>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d001      	beq.n	800eb8c <osMutexWait+0x8c>
    return osErrorOS;
 800eb88:	23ff      	movs	r3, #255	@ 0xff
 800eb8a:	e000      	b.n	800eb8e <osMutexWait+0x8e>
  }
  
  return osOK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3710      	adds	r7, #16
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	e000ed04 	.word	0xe000ed04

0800eb9c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ebac:	f7ff ff47 	bl	800ea3e <inHandlerMode>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d016      	beq.n	800ebe4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ebb6:	f107 0308 	add.w	r3, r7, #8
 800ebba:	4619      	mov	r1, r3
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f000 fb8d 	bl	800f2dc <xQueueGiveFromISR>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d001      	beq.n	800ebcc <osMutexRelease+0x30>
      return osErrorOS;
 800ebc8:	23ff      	movs	r3, #255	@ 0xff
 800ebca:	e017      	b.n	800ebfc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d013      	beq.n	800ebfa <osMutexRelease+0x5e>
 800ebd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ec04 <osMutexRelease+0x68>)
 800ebd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebd8:	601a      	str	r2, [r3, #0]
 800ebda:	f3bf 8f4f 	dsb	sy
 800ebde:	f3bf 8f6f 	isb	sy
 800ebe2:	e00a      	b.n	800ebfa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	2100      	movs	r1, #0
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 fa74 	bl	800f0d8 <xQueueGenericSend>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d001      	beq.n	800ebfa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ebf6:	23ff      	movs	r3, #255	@ 0xff
 800ebf8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	e000ed04 	.word	0xe000ed04

0800ec08 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d110      	bne.n	800ec3a <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800ec18:	2203      	movs	r2, #3
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	2001      	movs	r0, #1
 800ec1e:	f000 f9d3 	bl	800efc8 <xQueueGenericCreate>
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d005      	beq.n	800ec36 <osSemaphoreCreate+0x2e>
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	2100      	movs	r1, #0
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f000 fa51 	bl	800f0d8 <xQueueGenericSend>
    return sema;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	e000      	b.n	800ec3c <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800ec3a:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3710      	adds	r7, #16
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ec4e:	2300      	movs	r3, #0
 800ec50:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d101      	bne.n	800ec5c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ec58:	2380      	movs	r3, #128	@ 0x80
 800ec5a:	e03a      	b.n	800ecd2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec66:	d103      	bne.n	800ec70 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ec68:	f04f 33ff 	mov.w	r3, #4294967295
 800ec6c:	60fb      	str	r3, [r7, #12]
 800ec6e:	e009      	b.n	800ec84 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d006      	beq.n	800ec84 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d101      	bne.n	800ec84 <osSemaphoreWait+0x40>
      ticks = 1;
 800ec80:	2301      	movs	r3, #1
 800ec82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ec84:	f7ff fedb 	bl	800ea3e <inHandlerMode>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d017      	beq.n	800ecbe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ec8e:	f107 0308 	add.w	r3, r7, #8
 800ec92:	461a      	mov	r2, r3
 800ec94:	2100      	movs	r1, #0
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fcc0 	bl	800f61c <xQueueReceiveFromISR>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d001      	beq.n	800eca6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800eca2:	23ff      	movs	r3, #255	@ 0xff
 800eca4:	e015      	b.n	800ecd2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d011      	beq.n	800ecd0 <osSemaphoreWait+0x8c>
 800ecac:	4b0b      	ldr	r3, [pc, #44]	@ (800ecdc <osSemaphoreWait+0x98>)
 800ecae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	f3bf 8f4f 	dsb	sy
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	e008      	b.n	800ecd0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ecbe:	68f9      	ldr	r1, [r7, #12]
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 fb9b 	bl	800f3fc <xQueueSemaphoreTake>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d001      	beq.n	800ecd0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800eccc:	23ff      	movs	r3, #255	@ 0xff
 800ecce:	e000      	b.n	800ecd2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ecd0:	2300      	movs	r3, #0
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3710      	adds	r7, #16
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	e000ed04 	.word	0xe000ed04

0800ece0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ecec:	2300      	movs	r3, #0
 800ecee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ecf0:	f7ff fea5 	bl	800ea3e <inHandlerMode>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d016      	beq.n	800ed28 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ecfa:	f107 0308 	add.w	r3, r7, #8
 800ecfe:	4619      	mov	r1, r3
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 faeb 	bl	800f2dc <xQueueGiveFromISR>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d001      	beq.n	800ed10 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ed0c:	23ff      	movs	r3, #255	@ 0xff
 800ed0e:	e017      	b.n	800ed40 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d013      	beq.n	800ed3e <osSemaphoreRelease+0x5e>
 800ed16:	4b0c      	ldr	r3, [pc, #48]	@ (800ed48 <osSemaphoreRelease+0x68>)
 800ed18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	f3bf 8f4f 	dsb	sy
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	e00a      	b.n	800ed3e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ed28:	2300      	movs	r3, #0
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f9d2 	bl	800f0d8 <xQueueGenericSend>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d001      	beq.n	800ed3e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ed3a:	23ff      	movs	r3, #255	@ 0xff
 800ed3c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3710      	adds	r7, #16
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	e000ed04 	.word	0xe000ed04

0800ed4c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ed54:	f7ff fe73 	bl	800ea3e <inHandlerMode>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ed5e:	2382      	movs	r3, #130	@ 0x82
 800ed60:	e003      	b.n	800ed6a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 fcdc 	bl	800f720 <vQueueDelete>

  return osOK; 
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b082      	sub	sp, #8
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f001 f84c 	bl	800fe18 <vTaskSuspend>
  
  return osOK;
 800ed80:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ed8a:	b480      	push	{r7}
 800ed8c:	b083      	sub	sp, #12
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f103 0208 	add.w	r2, r3, #8
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eda2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f103 0208 	add.w	r2, r3, #8
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f103 0208 	add.w	r2, r3, #8
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800edbe:	bf00      	nop
 800edc0:	370c      	adds	r7, #12
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr

0800edca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800edca:	b480      	push	{r7}
 800edcc:	b083      	sub	sp, #12
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800edd8:	bf00      	nop
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ede4:	b480      	push	{r7}
 800ede6:	b085      	sub	sp, #20
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	689a      	ldr	r2, [r3, #8]
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	689b      	ldr	r3, [r3, #8]
 800ee06:	683a      	ldr	r2, [r7, #0]
 800ee08:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	683a      	ldr	r2, [r7, #0]
 800ee0e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	1c5a      	adds	r2, r3, #1
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	601a      	str	r2, [r3, #0]
}
 800ee20:	bf00      	nop
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr

0800ee2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b085      	sub	sp, #20
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee42:	d103      	bne.n	800ee4c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	691b      	ldr	r3, [r3, #16]
 800ee48:	60fb      	str	r3, [r7, #12]
 800ee4a:	e00c      	b.n	800ee66 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	3308      	adds	r3, #8
 800ee50:	60fb      	str	r3, [r7, #12]
 800ee52:	e002      	b.n	800ee5a <vListInsert+0x2e>
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	60fb      	str	r3, [r7, #12]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d2f6      	bcs.n	800ee54 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	685a      	ldr	r2, [r3, #4]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	683a      	ldr	r2, [r7, #0]
 800ee74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]
}
 800ee92:	bf00      	nop
 800ee94:	3714      	adds	r7, #20
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ee9e:	b480      	push	{r7}
 800eea0:	b085      	sub	sp, #20
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	691b      	ldr	r3, [r3, #16]
 800eeaa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	6892      	ldr	r2, [r2, #8]
 800eeb4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	6852      	ldr	r2, [r2, #4]
 800eebe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d103      	bne.n	800eed2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2200      	movs	r2, #0
 800eed6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	1e5a      	subs	r2, r3, #1
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3714      	adds	r7, #20
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
	...

0800eef4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d10b      	bne.n	800ef20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ef08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef0c:	f383 8811 	msr	BASEPRI, r3
 800ef10:	f3bf 8f6f 	isb	sy
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ef1a:	bf00      	nop
 800ef1c:	bf00      	nop
 800ef1e:	e7fd      	b.n	800ef1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ef20:	f001 ff5a 	bl	8010dd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef2c:	68f9      	ldr	r1, [r7, #12]
 800ef2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ef30:	fb01 f303 	mul.w	r3, r1, r3
 800ef34:	441a      	add	r2, r3
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef50:	3b01      	subs	r3, #1
 800ef52:	68f9      	ldr	r1, [r7, #12]
 800ef54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ef56:	fb01 f303 	mul.w	r3, r1, r3
 800ef5a:	441a      	add	r2, r3
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	22ff      	movs	r2, #255	@ 0xff
 800ef64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	22ff      	movs	r2, #255	@ 0xff
 800ef6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d114      	bne.n	800efa0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d01a      	beq.n	800efb4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	3310      	adds	r3, #16
 800ef82:	4618      	mov	r0, r3
 800ef84:	f001 fa2e 	bl	80103e4 <xTaskRemoveFromEventList>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d012      	beq.n	800efb4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ef8e:	4b0d      	ldr	r3, [pc, #52]	@ (800efc4 <xQueueGenericReset+0xd0>)
 800ef90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	f3bf 8f4f 	dsb	sy
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	e009      	b.n	800efb4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	3310      	adds	r3, #16
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff fef0 	bl	800ed8a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	3324      	adds	r3, #36	@ 0x24
 800efae:	4618      	mov	r0, r3
 800efb0:	f7ff feeb 	bl	800ed8a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800efb4:	f001 ff42 	bl	8010e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800efb8:	2301      	movs	r3, #1
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	e000ed04 	.word	0xe000ed04

0800efc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08a      	sub	sp, #40	@ 0x28
 800efcc:	af02      	add	r7, sp, #8
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	4613      	mov	r3, r2
 800efd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d10b      	bne.n	800eff4 <xQueueGenericCreate+0x2c>
	__asm volatile
 800efdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe0:	f383 8811 	msr	BASEPRI, r3
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	613b      	str	r3, [r7, #16]
}
 800efee:	bf00      	nop
 800eff0:	bf00      	nop
 800eff2:	e7fd      	b.n	800eff0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	68ba      	ldr	r2, [r7, #8]
 800eff8:	fb02 f303 	mul.w	r3, r2, r3
 800effc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	3348      	adds	r3, #72	@ 0x48
 800f002:	4618      	mov	r0, r3
 800f004:	f002 f80a 	bl	801101c <pvPortMalloc>
 800f008:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00d      	beq.n	800f02c <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	3348      	adds	r3, #72	@ 0x48
 800f018:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f01a:	79fa      	ldrb	r2, [r7, #7]
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	4613      	mov	r3, r2
 800f022:	697a      	ldr	r2, [r7, #20]
 800f024:	68b9      	ldr	r1, [r7, #8]
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f000 f805 	bl	800f036 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f02c:	69bb      	ldr	r3, [r7, #24]
	}
 800f02e:	4618      	mov	r0, r3
 800f030:	3720      	adds	r7, #32
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f036:	b580      	push	{r7, lr}
 800f038:	b084      	sub	sp, #16
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	60f8      	str	r0, [r7, #12]
 800f03e:	60b9      	str	r1, [r7, #8]
 800f040:	607a      	str	r2, [r7, #4]
 800f042:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d103      	bne.n	800f052 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	69ba      	ldr	r2, [r7, #24]
 800f04e:	601a      	str	r2, [r3, #0]
 800f050:	e002      	b.n	800f058 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f064:	2101      	movs	r1, #1
 800f066:	69b8      	ldr	r0, [r7, #24]
 800f068:	f7ff ff44 	bl	800eef4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f06c:	bf00      	nop
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00e      	beq.n	800f0a0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f094:	2300      	movs	r3, #0
 800f096:	2200      	movs	r2, #0
 800f098:	2100      	movs	r1, #0
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 f81c 	bl	800f0d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	617b      	str	r3, [r7, #20]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f0ba:	79fb      	ldrb	r3, [r7, #7]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	6939      	ldr	r1, [r7, #16]
 800f0c0:	6978      	ldr	r0, [r7, #20]
 800f0c2:	f7ff ff81 	bl	800efc8 <xQueueGenericCreate>
 800f0c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f7ff ffd3 	bl	800f074 <prvInitialiseMutex>

		return xNewQueue;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
	}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3718      	adds	r7, #24
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b08e      	sub	sp, #56	@ 0x38
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
 800f0e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d10b      	bne.n	800f10c <xQueueGenericSend+0x34>
	__asm volatile
 800f0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f8:	f383 8811 	msr	BASEPRI, r3
 800f0fc:	f3bf 8f6f 	isb	sy
 800f100:	f3bf 8f4f 	dsb	sy
 800f104:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f106:	bf00      	nop
 800f108:	bf00      	nop
 800f10a:	e7fd      	b.n	800f108 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d103      	bne.n	800f11a <xQueueGenericSend+0x42>
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <xQueueGenericSend+0x46>
 800f11a:	2301      	movs	r3, #1
 800f11c:	e000      	b.n	800f120 <xQueueGenericSend+0x48>
 800f11e:	2300      	movs	r3, #0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d10b      	bne.n	800f13c <xQueueGenericSend+0x64>
	__asm volatile
 800f124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f128:	f383 8811 	msr	BASEPRI, r3
 800f12c:	f3bf 8f6f 	isb	sy
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f136:	bf00      	nop
 800f138:	bf00      	nop
 800f13a:	e7fd      	b.n	800f138 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d103      	bne.n	800f14a <xQueueGenericSend+0x72>
 800f142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f146:	2b01      	cmp	r3, #1
 800f148:	d101      	bne.n	800f14e <xQueueGenericSend+0x76>
 800f14a:	2301      	movs	r3, #1
 800f14c:	e000      	b.n	800f150 <xQueueGenericSend+0x78>
 800f14e:	2300      	movs	r3, #0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10b      	bne.n	800f16c <xQueueGenericSend+0x94>
	__asm volatile
 800f154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f158:	f383 8811 	msr	BASEPRI, r3
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	623b      	str	r3, [r7, #32]
}
 800f166:	bf00      	nop
 800f168:	bf00      	nop
 800f16a:	e7fd      	b.n	800f168 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f16c:	f001 fae0 	bl	8010730 <xTaskGetSchedulerState>
 800f170:	4603      	mov	r3, r0
 800f172:	2b00      	cmp	r3, #0
 800f174:	d102      	bne.n	800f17c <xQueueGenericSend+0xa4>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d101      	bne.n	800f180 <xQueueGenericSend+0xa8>
 800f17c:	2301      	movs	r3, #1
 800f17e:	e000      	b.n	800f182 <xQueueGenericSend+0xaa>
 800f180:	2300      	movs	r3, #0
 800f182:	2b00      	cmp	r3, #0
 800f184:	d10b      	bne.n	800f19e <xQueueGenericSend+0xc6>
	__asm volatile
 800f186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f18a:	f383 8811 	msr	BASEPRI, r3
 800f18e:	f3bf 8f6f 	isb	sy
 800f192:	f3bf 8f4f 	dsb	sy
 800f196:	61fb      	str	r3, [r7, #28]
}
 800f198:	bf00      	nop
 800f19a:	bf00      	nop
 800f19c:	e7fd      	b.n	800f19a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f19e:	f001 fe1b 	bl	8010dd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d302      	bcc.n	800f1b4 <xQueueGenericSend+0xdc>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d129      	bne.n	800f208 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	68b9      	ldr	r1, [r7, #8]
 800f1b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f1ba:	f000 fae8 	bl	800f78e <prvCopyDataToQueue>
 800f1be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d010      	beq.n	800f1ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ca:	3324      	adds	r3, #36	@ 0x24
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f001 f909 	bl	80103e4 <xTaskRemoveFromEventList>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d013      	beq.n	800f200 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f1d8:	4b3f      	ldr	r3, [pc, #252]	@ (800f2d8 <xQueueGenericSend+0x200>)
 800f1da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1de:	601a      	str	r2, [r3, #0]
 800f1e0:	f3bf 8f4f 	dsb	sy
 800f1e4:	f3bf 8f6f 	isb	sy
 800f1e8:	e00a      	b.n	800f200 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d007      	beq.n	800f200 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f1f0:	4b39      	ldr	r3, [pc, #228]	@ (800f2d8 <xQueueGenericSend+0x200>)
 800f1f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1f6:	601a      	str	r2, [r3, #0]
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f200:	f001 fe1c 	bl	8010e3c <vPortExitCritical>
				return pdPASS;
 800f204:	2301      	movs	r3, #1
 800f206:	e063      	b.n	800f2d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d103      	bne.n	800f216 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f20e:	f001 fe15 	bl	8010e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f212:	2300      	movs	r3, #0
 800f214:	e05c      	b.n	800f2d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d106      	bne.n	800f22a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f21c:	f107 0314 	add.w	r3, r7, #20
 800f220:	4618      	mov	r0, r3
 800f222:	f001 f943 	bl	80104ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f226:	2301      	movs	r3, #1
 800f228:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f22a:	f001 fe07 	bl	8010e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f22e:	f000 fed9 	bl	800ffe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f232:	f001 fdd1 	bl	8010dd8 <vPortEnterCritical>
 800f236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f238:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f23c:	b25b      	sxtb	r3, r3
 800f23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f242:	d103      	bne.n	800f24c <xQueueGenericSend+0x174>
 800f244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f246:	2200      	movs	r2, #0
 800f248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f252:	b25b      	sxtb	r3, r3
 800f254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f258:	d103      	bne.n	800f262 <xQueueGenericSend+0x18a>
 800f25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f25c:	2200      	movs	r2, #0
 800f25e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f262:	f001 fdeb 	bl	8010e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f266:	1d3a      	adds	r2, r7, #4
 800f268:	f107 0314 	add.w	r3, r7, #20
 800f26c:	4611      	mov	r1, r2
 800f26e:	4618      	mov	r0, r3
 800f270:	f001 f932 	bl	80104d8 <xTaskCheckForTimeOut>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d124      	bne.n	800f2c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f27a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f27c:	f000 fb7f 	bl	800f97e <prvIsQueueFull>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d018      	beq.n	800f2b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f288:	3310      	adds	r3, #16
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	4611      	mov	r1, r2
 800f28e:	4618      	mov	r0, r3
 800f290:	f001 f882 	bl	8010398 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f296:	f000 fb0a 	bl	800f8ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f29a:	f000 feb1 	bl	8010000 <xTaskResumeAll>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f47f af7c 	bne.w	800f19e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f2a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f2d8 <xQueueGenericSend+0x200>)
 800f2a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	f3bf 8f4f 	dsb	sy
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	e772      	b.n	800f19e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f2b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2ba:	f000 faf8 	bl	800f8ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2be:	f000 fe9f 	bl	8010000 <xTaskResumeAll>
 800f2c2:	e76c      	b.n	800f19e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f2c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2c6:	f000 faf2 	bl	800f8ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2ca:	f000 fe99 	bl	8010000 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f2ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3738      	adds	r7, #56	@ 0x38
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	e000ed04 	.word	0xe000ed04

0800f2dc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b08e      	sub	sp, #56	@ 0x38
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10b      	bne.n	800f308 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2f4:	f383 8811 	msr	BASEPRI, r3
 800f2f8:	f3bf 8f6f 	isb	sy
 800f2fc:	f3bf 8f4f 	dsb	sy
 800f300:	623b      	str	r3, [r7, #32]
}
 800f302:	bf00      	nop
 800f304:	bf00      	nop
 800f306:	e7fd      	b.n	800f304 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00b      	beq.n	800f328 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f314:	f383 8811 	msr	BASEPRI, r3
 800f318:	f3bf 8f6f 	isb	sy
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	61fb      	str	r3, [r7, #28]
}
 800f322:	bf00      	nop
 800f324:	bf00      	nop
 800f326:	e7fd      	b.n	800f324 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d103      	bne.n	800f338 <xQueueGiveFromISR+0x5c>
 800f330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d101      	bne.n	800f33c <xQueueGiveFromISR+0x60>
 800f338:	2301      	movs	r3, #1
 800f33a:	e000      	b.n	800f33e <xQueueGiveFromISR+0x62>
 800f33c:	2300      	movs	r3, #0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d10b      	bne.n	800f35a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f346:	f383 8811 	msr	BASEPRI, r3
 800f34a:	f3bf 8f6f 	isb	sy
 800f34e:	f3bf 8f4f 	dsb	sy
 800f352:	61bb      	str	r3, [r7, #24]
}
 800f354:	bf00      	nop
 800f356:	bf00      	nop
 800f358:	e7fd      	b.n	800f356 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f35a:	f001 fe1d 	bl	8010f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f35e:	f3ef 8211 	mrs	r2, BASEPRI
 800f362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f366:	f383 8811 	msr	BASEPRI, r3
 800f36a:	f3bf 8f6f 	isb	sy
 800f36e:	f3bf 8f4f 	dsb	sy
 800f372:	617a      	str	r2, [r7, #20]
 800f374:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f376:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f378:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f37e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f386:	429a      	cmp	r2, r3
 800f388:	d22b      	bcs.n	800f3e2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f38c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f396:	1c5a      	adds	r2, r3, #1
 800f398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f39a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f39c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a4:	d112      	bne.n	800f3cc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d016      	beq.n	800f3dc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b0:	3324      	adds	r3, #36	@ 0x24
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f001 f816 	bl	80103e4 <xTaskRemoveFromEventList>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00e      	beq.n	800f3dc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00b      	beq.n	800f3dc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	e007      	b.n	800f3dc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	b25a      	sxtb	r2, r3
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3e0:	e001      	b.n	800f3e6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f3f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3738      	adds	r7, #56	@ 0x38
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08e      	sub	sp, #56	@ 0x38
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f406:	2300      	movs	r3, #0
 800f408:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f40e:	2300      	movs	r3, #0
 800f410:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f414:	2b00      	cmp	r3, #0
 800f416:	d10b      	bne.n	800f430 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800f418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f41c:	f383 8811 	msr	BASEPRI, r3
 800f420:	f3bf 8f6f 	isb	sy
 800f424:	f3bf 8f4f 	dsb	sy
 800f428:	623b      	str	r3, [r7, #32]
}
 800f42a:	bf00      	nop
 800f42c:	bf00      	nop
 800f42e:	e7fd      	b.n	800f42c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f434:	2b00      	cmp	r3, #0
 800f436:	d00b      	beq.n	800f450 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800f438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43c:	f383 8811 	msr	BASEPRI, r3
 800f440:	f3bf 8f6f 	isb	sy
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	61fb      	str	r3, [r7, #28]
}
 800f44a:	bf00      	nop
 800f44c:	bf00      	nop
 800f44e:	e7fd      	b.n	800f44c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f450:	f001 f96e 	bl	8010730 <xTaskGetSchedulerState>
 800f454:	4603      	mov	r3, r0
 800f456:	2b00      	cmp	r3, #0
 800f458:	d102      	bne.n	800f460 <xQueueSemaphoreTake+0x64>
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d101      	bne.n	800f464 <xQueueSemaphoreTake+0x68>
 800f460:	2301      	movs	r3, #1
 800f462:	e000      	b.n	800f466 <xQueueSemaphoreTake+0x6a>
 800f464:	2300      	movs	r3, #0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d10b      	bne.n	800f482 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800f46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f46e:	f383 8811 	msr	BASEPRI, r3
 800f472:	f3bf 8f6f 	isb	sy
 800f476:	f3bf 8f4f 	dsb	sy
 800f47a:	61bb      	str	r3, [r7, #24]
}
 800f47c:	bf00      	nop
 800f47e:	bf00      	nop
 800f480:	e7fd      	b.n	800f47e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f482:	f001 fca9 	bl	8010dd8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f48a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d024      	beq.n	800f4dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f494:	1e5a      	subs	r2, r3, #1
 800f496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f498:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d104      	bne.n	800f4ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f4a2:	f001 faf1 	bl	8010a88 <pvTaskIncrementMutexHeldCount>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00f      	beq.n	800f4d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b6:	3310      	adds	r3, #16
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f000 ff93 	bl	80103e4 <xTaskRemoveFromEventList>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d007      	beq.n	800f4d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f4c4:	4b54      	ldr	r3, [pc, #336]	@ (800f618 <xQueueSemaphoreTake+0x21c>)
 800f4c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4ca:	601a      	str	r2, [r3, #0]
 800f4cc:	f3bf 8f4f 	dsb	sy
 800f4d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f4d4:	f001 fcb2 	bl	8010e3c <vPortExitCritical>
				return pdPASS;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	e098      	b.n	800f60e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d112      	bne.n	800f508 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d00b      	beq.n	800f500 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800f4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ec:	f383 8811 	msr	BASEPRI, r3
 800f4f0:	f3bf 8f6f 	isb	sy
 800f4f4:	f3bf 8f4f 	dsb	sy
 800f4f8:	617b      	str	r3, [r7, #20]
}
 800f4fa:	bf00      	nop
 800f4fc:	bf00      	nop
 800f4fe:	e7fd      	b.n	800f4fc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f500:	f001 fc9c 	bl	8010e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f504:	2300      	movs	r3, #0
 800f506:	e082      	b.n	800f60e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d106      	bne.n	800f51c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f50e:	f107 030c 	add.w	r3, r7, #12
 800f512:	4618      	mov	r0, r3
 800f514:	f000 ffca 	bl	80104ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f518:	2301      	movs	r3, #1
 800f51a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f51c:	f001 fc8e 	bl	8010e3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f520:	f000 fd60 	bl	800ffe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f524:	f001 fc58 	bl	8010dd8 <vPortEnterCritical>
 800f528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f52a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f52e:	b25b      	sxtb	r3, r3
 800f530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f534:	d103      	bne.n	800f53e <xQueueSemaphoreTake+0x142>
 800f536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f538:	2200      	movs	r2, #0
 800f53a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f540:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f544:	b25b      	sxtb	r3, r3
 800f546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54a:	d103      	bne.n	800f554 <xQueueSemaphoreTake+0x158>
 800f54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f54e:	2200      	movs	r2, #0
 800f550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f554:	f001 fc72 	bl	8010e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f558:	463a      	mov	r2, r7
 800f55a:	f107 030c 	add.w	r3, r7, #12
 800f55e:	4611      	mov	r1, r2
 800f560:	4618      	mov	r0, r3
 800f562:	f000 ffb9 	bl	80104d8 <xTaskCheckForTimeOut>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d132      	bne.n	800f5d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f56c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f56e:	f000 f9f0 	bl	800f952 <prvIsQueueEmpty>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d026      	beq.n	800f5c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d109      	bne.n	800f594 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800f580:	f001 fc2a 	bl	8010dd8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f586:	689b      	ldr	r3, [r3, #8]
 800f588:	4618      	mov	r0, r3
 800f58a:	f001 f8ef 	bl	801076c <xTaskPriorityInherit>
 800f58e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800f590:	f001 fc54 	bl	8010e3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f596:	3324      	adds	r3, #36	@ 0x24
 800f598:	683a      	ldr	r2, [r7, #0]
 800f59a:	4611      	mov	r1, r2
 800f59c:	4618      	mov	r0, r3
 800f59e:	f000 fefb 	bl	8010398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f5a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5a4:	f000 f983 	bl	800f8ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f5a8:	f000 fd2a 	bl	8010000 <xTaskResumeAll>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f47f af67 	bne.w	800f482 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800f5b4:	4b18      	ldr	r3, [pc, #96]	@ (800f618 <xQueueSemaphoreTake+0x21c>)
 800f5b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5ba:	601a      	str	r2, [r3, #0]
 800f5bc:	f3bf 8f4f 	dsb	sy
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	e75d      	b.n	800f482 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f5c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5c8:	f000 f971 	bl	800f8ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f5cc:	f000 fd18 	bl	8010000 <xTaskResumeAll>
 800f5d0:	e757      	b.n	800f482 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f5d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5d4:	f000 f96b 	bl	800f8ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f5d8:	f000 fd12 	bl	8010000 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f5dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5de:	f000 f9b8 	bl	800f952 <prvIsQueueEmpty>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	f43f af4c 	beq.w	800f482 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d00d      	beq.n	800f60c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800f5f0:	f001 fbf2 	bl	8010dd8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f5f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5f6:	f000 f8b2 	bl	800f75e <prvGetDisinheritPriorityAfterTimeout>
 800f5fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5fe:	689b      	ldr	r3, [r3, #8]
 800f600:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f602:	4618      	mov	r0, r3
 800f604:	f001 f9b0 	bl	8010968 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f608:	f001 fc18 	bl	8010e3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f60c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3738      	adds	r7, #56	@ 0x38
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	e000ed04 	.word	0xe000ed04

0800f61c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b08e      	sub	sp, #56	@ 0x38
 800f620:	af00      	add	r7, sp, #0
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d10b      	bne.n	800f64a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800f632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	623b      	str	r3, [r7, #32]
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop
 800f648:	e7fd      	b.n	800f646 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d103      	bne.n	800f658 <xQueueReceiveFromISR+0x3c>
 800f650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f654:	2b00      	cmp	r3, #0
 800f656:	d101      	bne.n	800f65c <xQueueReceiveFromISR+0x40>
 800f658:	2301      	movs	r3, #1
 800f65a:	e000      	b.n	800f65e <xQueueReceiveFromISR+0x42>
 800f65c:	2300      	movs	r3, #0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10b      	bne.n	800f67a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800f662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f666:	f383 8811 	msr	BASEPRI, r3
 800f66a:	f3bf 8f6f 	isb	sy
 800f66e:	f3bf 8f4f 	dsb	sy
 800f672:	61fb      	str	r3, [r7, #28]
}
 800f674:	bf00      	nop
 800f676:	bf00      	nop
 800f678:	e7fd      	b.n	800f676 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f67a:	f001 fc8d 	bl	8010f98 <vPortValidateInterruptPriority>
	__asm volatile
 800f67e:	f3ef 8211 	mrs	r2, BASEPRI
 800f682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f686:	f383 8811 	msr	BASEPRI, r3
 800f68a:	f3bf 8f6f 	isb	sy
 800f68e:	f3bf 8f4f 	dsb	sy
 800f692:	61ba      	str	r2, [r7, #24]
 800f694:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f696:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f698:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f69e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d02f      	beq.n	800f706 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f6ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f6b0:	68b9      	ldr	r1, [r7, #8]
 800f6b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6b4:	f000 f8d5 	bl	800f862 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ba:	1e5a      	subs	r2, r3, #1
 800f6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f6c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6c8:	d112      	bne.n	800f6f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6cc:	691b      	ldr	r3, [r3, #16]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d016      	beq.n	800f700 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d4:	3310      	adds	r3, #16
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f000 fe84 	bl	80103e4 <xTaskRemoveFromEventList>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00e      	beq.n	800f700 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00b      	beq.n	800f700 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	601a      	str	r2, [r3, #0]
 800f6ee:	e007      	b.n	800f700 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	b25a      	sxtb	r2, r3
 800f6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800f700:	2301      	movs	r3, #1
 800f702:	637b      	str	r3, [r7, #52]	@ 0x34
 800f704:	e001      	b.n	800f70a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800f706:	2300      	movs	r3, #0
 800f708:	637b      	str	r3, [r7, #52]	@ 0x34
 800f70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f70c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	f383 8811 	msr	BASEPRI, r3
}
 800f714:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3738      	adds	r7, #56	@ 0x38
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10b      	bne.n	800f74a <vQueueDelete+0x2a>
	__asm volatile
 800f732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f736:	f383 8811 	msr	BASEPRI, r3
 800f73a:	f3bf 8f6f 	isb	sy
 800f73e:	f3bf 8f4f 	dsb	sy
 800f742:	60bb      	str	r3, [r7, #8]
}
 800f744:	bf00      	nop
 800f746:	bf00      	nop
 800f748:	e7fd      	b.n	800f746 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f000 f930 	bl	800f9b0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f001 fd31 	bl	80111b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f756:	bf00      	nop
 800f758:	3710      	adds	r7, #16
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f75e:	b480      	push	{r7}
 800f760:	b085      	sub	sp, #20
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d006      	beq.n	800f77c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f1c3 0307 	rsb	r3, r3, #7
 800f778:	60fb      	str	r3, [r7, #12]
 800f77a:	e001      	b.n	800f780 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f77c:	2300      	movs	r3, #0
 800f77e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f780:	68fb      	ldr	r3, [r7, #12]
	}
 800f782:	4618      	mov	r0, r3
 800f784:	3714      	adds	r7, #20
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr

0800f78e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b086      	sub	sp, #24
 800f792:	af00      	add	r7, sp, #0
 800f794:	60f8      	str	r0, [r7, #12]
 800f796:	60b9      	str	r1, [r7, #8]
 800f798:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f79a:	2300      	movs	r3, #0
 800f79c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d10d      	bne.n	800f7c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d14d      	bne.n	800f850 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f001 f84d 	bl	8010858 <xTaskPriorityDisinherit>
 800f7be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	609a      	str	r2, [r3, #8]
 800f7c6:	e043      	b.n	800f850 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d119      	bne.n	800f802 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6858      	ldr	r0, [r3, #4]
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	68b9      	ldr	r1, [r7, #8]
 800f7da:	f002 feac 	bl	8012536 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	685a      	ldr	r2, [r3, #4]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7e6:	441a      	add	r2, r3
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	685a      	ldr	r2, [r3, #4]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d32b      	bcc.n	800f850 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	605a      	str	r2, [r3, #4]
 800f800:	e026      	b.n	800f850 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	68d8      	ldr	r0, [r3, #12]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f80a:	461a      	mov	r2, r3
 800f80c:	68b9      	ldr	r1, [r7, #8]
 800f80e:	f002 fe92 	bl	8012536 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	68da      	ldr	r2, [r3, #12]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f81a:	425b      	negs	r3, r3
 800f81c:	441a      	add	r2, r3
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	68da      	ldr	r2, [r3, #12]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d207      	bcs.n	800f83e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	689a      	ldr	r2, [r3, #8]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f836:	425b      	negs	r3, r3
 800f838:	441a      	add	r2, r3
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2b02      	cmp	r3, #2
 800f842:	d105      	bne.n	800f850 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d002      	beq.n	800f850 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	3b01      	subs	r3, #1
 800f84e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	1c5a      	adds	r2, r3, #1
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f858:	697b      	ldr	r3, [r7, #20]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3718      	adds	r7, #24
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f870:	2b00      	cmp	r3, #0
 800f872:	d018      	beq.n	800f8a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	68da      	ldr	r2, [r3, #12]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f87c:	441a      	add	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	68da      	ldr	r2, [r3, #12]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d303      	bcc.n	800f896 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68d9      	ldr	r1, [r3, #12]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f89e:	461a      	mov	r2, r3
 800f8a0:	6838      	ldr	r0, [r7, #0]
 800f8a2:	f002 fe48 	bl	8012536 <memcpy>
	}
}
 800f8a6:	bf00      	nop
 800f8a8:	3708      	adds	r7, #8
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b084      	sub	sp, #16
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f8b6:	f001 fa8f 	bl	8010dd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f8c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8c2:	e011      	b.n	800f8e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d012      	beq.n	800f8f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3324      	adds	r3, #36	@ 0x24
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f000 fd87 	bl	80103e4 <xTaskRemoveFromEventList>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f8dc:	f000 fe60 	bl	80105a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f8e0:	7bfb      	ldrb	r3, [r7, #15]
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	dce9      	bgt.n	800f8c4 <prvUnlockQueue+0x16>
 800f8f0:	e000      	b.n	800f8f4 <prvUnlockQueue+0x46>
					break;
 800f8f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	22ff      	movs	r2, #255	@ 0xff
 800f8f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f8fc:	f001 fa9e 	bl	8010e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f900:	f001 fa6a 	bl	8010dd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f90a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f90c:	e011      	b.n	800f932 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	691b      	ldr	r3, [r3, #16]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d012      	beq.n	800f93c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	3310      	adds	r3, #16
 800f91a:	4618      	mov	r0, r3
 800f91c:	f000 fd62 	bl	80103e4 <xTaskRemoveFromEventList>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d001      	beq.n	800f92a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f926:	f000 fe3b 	bl	80105a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f92a:	7bbb      	ldrb	r3, [r7, #14]
 800f92c:	3b01      	subs	r3, #1
 800f92e:	b2db      	uxtb	r3, r3
 800f930:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f936:	2b00      	cmp	r3, #0
 800f938:	dce9      	bgt.n	800f90e <prvUnlockQueue+0x60>
 800f93a:	e000      	b.n	800f93e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f93c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	22ff      	movs	r2, #255	@ 0xff
 800f942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f946:	f001 fa79 	bl	8010e3c <vPortExitCritical>
}
 800f94a:	bf00      	nop
 800f94c:	3710      	adds	r7, #16
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}

0800f952 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f952:	b580      	push	{r7, lr}
 800f954:	b084      	sub	sp, #16
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f95a:	f001 fa3d 	bl	8010dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f962:	2b00      	cmp	r3, #0
 800f964:	d102      	bne.n	800f96c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f966:	2301      	movs	r3, #1
 800f968:	60fb      	str	r3, [r7, #12]
 800f96a:	e001      	b.n	800f970 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f96c:	2300      	movs	r3, #0
 800f96e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f970:	f001 fa64 	bl	8010e3c <vPortExitCritical>

	return xReturn;
 800f974:	68fb      	ldr	r3, [r7, #12]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b084      	sub	sp, #16
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f986:	f001 fa27 	bl	8010dd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f992:	429a      	cmp	r2, r3
 800f994:	d102      	bne.n	800f99c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f996:	2301      	movs	r3, #1
 800f998:	60fb      	str	r3, [r7, #12]
 800f99a:	e001      	b.n	800f9a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f99c:	2300      	movs	r3, #0
 800f99e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f9a0:	f001 fa4c 	bl	8010e3c <vPortExitCritical>

	return xReturn;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
	...

0800f9b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	60fb      	str	r3, [r7, #12]
 800f9bc:	e016      	b.n	800f9ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f9be:	4a10      	ldr	r2, [pc, #64]	@ (800fa00 <vQueueUnregisterQueue+0x50>)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	4413      	add	r3, r2
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d10b      	bne.n	800f9e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f9ce:	4a0c      	ldr	r2, [pc, #48]	@ (800fa00 <vQueueUnregisterQueue+0x50>)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2100      	movs	r1, #0
 800f9d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f9d8:	4a09      	ldr	r2, [pc, #36]	@ (800fa00 <vQueueUnregisterQueue+0x50>)
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	00db      	lsls	r3, r3, #3
 800f9de:	4413      	add	r3, r2
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	605a      	str	r2, [r3, #4]
				break;
 800f9e4:	e006      	b.n	800f9f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	60fb      	str	r3, [r7, #12]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2b07      	cmp	r3, #7
 800f9f0:	d9e5      	bls.n	800f9be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f9f2:	bf00      	nop
 800f9f4:	bf00      	nop
 800f9f6:	3714      	adds	r7, #20
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr
 800fa00:	20001228 	.word	0x20001228

0800fa04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08c      	sub	sp, #48	@ 0x30
 800fa08:	af04      	add	r7, sp, #16
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	603b      	str	r3, [r7, #0]
 800fa10:	4613      	mov	r3, r2
 800fa12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fa14:	88fb      	ldrh	r3, [r7, #6]
 800fa16:	009b      	lsls	r3, r3, #2
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f001 faff 	bl	801101c <pvPortMalloc>
 800fa1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00e      	beq.n	800fa44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fa26:	20a0      	movs	r0, #160	@ 0xa0
 800fa28:	f001 faf8 	bl	801101c <pvPortMalloc>
 800fa2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d003      	beq.n	800fa3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	697a      	ldr	r2, [r7, #20]
 800fa38:	631a      	str	r2, [r3, #48]	@ 0x30
 800fa3a:	e005      	b.n	800fa48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fa3c:	6978      	ldr	r0, [r7, #20]
 800fa3e:	f001 fbbb 	bl	80111b8 <vPortFree>
 800fa42:	e001      	b.n	800fa48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fa44:	2300      	movs	r3, #0
 800fa46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d013      	beq.n	800fa76 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fa4e:	88fa      	ldrh	r2, [r7, #6]
 800fa50:	2300      	movs	r3, #0
 800fa52:	9303      	str	r3, [sp, #12]
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	9302      	str	r3, [sp, #8]
 800fa58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa5a:	9301      	str	r3, [sp, #4]
 800fa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa5e:	9300      	str	r3, [sp, #0]
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	68b9      	ldr	r1, [r7, #8]
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f000 f80f 	bl	800fa88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa6a:	69f8      	ldr	r0, [r7, #28]
 800fa6c:	f000 f8b4 	bl	800fbd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fa70:	2301      	movs	r3, #1
 800fa72:	61bb      	str	r3, [r7, #24]
 800fa74:	e002      	b.n	800fa7c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fa76:	f04f 33ff 	mov.w	r3, #4294967295
 800fa7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fa7c:	69bb      	ldr	r3, [r7, #24]
	}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3720      	adds	r7, #32
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
	...

0800fa88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b088      	sub	sp, #32
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
 800fa94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	461a      	mov	r2, r3
 800faa0:	21a5      	movs	r1, #165	@ 0xa5
 800faa2:	f002 fc6a 	bl	801237a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800faa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fab0:	3b01      	subs	r3, #1
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	4413      	add	r3, r2
 800fab6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	f023 0307 	bic.w	r3, r3, #7
 800fabe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	f003 0307 	and.w	r3, r3, #7
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00b      	beq.n	800fae2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800faca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800face:	f383 8811 	msr	BASEPRI, r3
 800fad2:	f3bf 8f6f 	isb	sy
 800fad6:	f3bf 8f4f 	dsb	sy
 800fada:	617b      	str	r3, [r7, #20]
}
 800fadc:	bf00      	nop
 800fade:	bf00      	nop
 800fae0:	e7fd      	b.n	800fade <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d01f      	beq.n	800fb28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fae8:	2300      	movs	r3, #0
 800faea:	61fb      	str	r3, [r7, #28]
 800faec:	e012      	b.n	800fb14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800faee:	68ba      	ldr	r2, [r7, #8]
 800faf0:	69fb      	ldr	r3, [r7, #28]
 800faf2:	4413      	add	r3, r2
 800faf4:	7819      	ldrb	r1, [r3, #0]
 800faf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800faf8:	69fb      	ldr	r3, [r7, #28]
 800fafa:	4413      	add	r3, r2
 800fafc:	3334      	adds	r3, #52	@ 0x34
 800fafe:	460a      	mov	r2, r1
 800fb00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	4413      	add	r3, r2
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d006      	beq.n	800fb1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fb0e:	69fb      	ldr	r3, [r7, #28]
 800fb10:	3301      	adds	r3, #1
 800fb12:	61fb      	str	r3, [r7, #28]
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	2b0f      	cmp	r3, #15
 800fb18:	d9e9      	bls.n	800faee <prvInitialiseNewTask+0x66>
 800fb1a:	e000      	b.n	800fb1e <prvInitialiseNewTask+0x96>
			{
				break;
 800fb1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb20:	2200      	movs	r2, #0
 800fb22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fb26:	e003      	b.n	800fb30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb32:	2b06      	cmp	r3, #6
 800fb34:	d901      	bls.n	800fb3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fb36:	2306      	movs	r3, #6
 800fb38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb44:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb48:	2200      	movs	r2, #0
 800fb4a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb4e:	3304      	adds	r3, #4
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7ff f93a 	bl	800edca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb58:	3318      	adds	r3, #24
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7ff f935 	bl	800edca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb68:	f1c3 0207 	rsb	r2, r3, #7
 800fb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb88:	334c      	adds	r3, #76	@ 0x4c
 800fb8a:	224c      	movs	r2, #76	@ 0x4c
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f002 fbf3 	bl	801237a <memset>
 800fb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb96:	4a0d      	ldr	r2, [pc, #52]	@ (800fbcc <prvInitialiseNewTask+0x144>)
 800fb98:	651a      	str	r2, [r3, #80]	@ 0x50
 800fb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb9c:	4a0c      	ldr	r2, [pc, #48]	@ (800fbd0 <prvInitialiseNewTask+0x148>)
 800fb9e:	655a      	str	r2, [r3, #84]	@ 0x54
 800fba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba2:	4a0c      	ldr	r2, [pc, #48]	@ (800fbd4 <prvInitialiseNewTask+0x14c>)
 800fba4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fba6:	683a      	ldr	r2, [r7, #0]
 800fba8:	68f9      	ldr	r1, [r7, #12]
 800fbaa:	69b8      	ldr	r0, [r7, #24]
 800fbac:	f000 ffe6 	bl	8010b7c <pxPortInitialiseStack>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d002      	beq.n	800fbc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbc2:	bf00      	nop
 800fbc4:	3720      	adds	r7, #32
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	2000429c 	.word	0x2000429c
 800fbd0:	20004304 	.word	0x20004304
 800fbd4:	2000436c 	.word	0x2000436c

0800fbd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fbe0:	f001 f8fa 	bl	8010dd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fbe4:	4b2a      	ldr	r3, [pc, #168]	@ (800fc90 <prvAddNewTaskToReadyList+0xb8>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	4a29      	ldr	r2, [pc, #164]	@ (800fc90 <prvAddNewTaskToReadyList+0xb8>)
 800fbec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fbee:	4b29      	ldr	r3, [pc, #164]	@ (800fc94 <prvAddNewTaskToReadyList+0xbc>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d109      	bne.n	800fc0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fbf6:	4a27      	ldr	r2, [pc, #156]	@ (800fc94 <prvAddNewTaskToReadyList+0xbc>)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fbfc:	4b24      	ldr	r3, [pc, #144]	@ (800fc90 <prvAddNewTaskToReadyList+0xb8>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d110      	bne.n	800fc26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc04:	f000 fcf0 	bl	80105e8 <prvInitialiseTaskLists>
 800fc08:	e00d      	b.n	800fc26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fc0a:	4b23      	ldr	r3, [pc, #140]	@ (800fc98 <prvAddNewTaskToReadyList+0xc0>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d109      	bne.n	800fc26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fc12:	4b20      	ldr	r3, [pc, #128]	@ (800fc94 <prvAddNewTaskToReadyList+0xbc>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d802      	bhi.n	800fc26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fc20:	4a1c      	ldr	r2, [pc, #112]	@ (800fc94 <prvAddNewTaskToReadyList+0xbc>)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fc26:	4b1d      	ldr	r3, [pc, #116]	@ (800fc9c <prvAddNewTaskToReadyList+0xc4>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	4a1b      	ldr	r2, [pc, #108]	@ (800fc9c <prvAddNewTaskToReadyList+0xc4>)
 800fc2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc34:	2201      	movs	r2, #1
 800fc36:	409a      	lsls	r2, r3
 800fc38:	4b19      	ldr	r3, [pc, #100]	@ (800fca0 <prvAddNewTaskToReadyList+0xc8>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	4a18      	ldr	r2, [pc, #96]	@ (800fca0 <prvAddNewTaskToReadyList+0xc8>)
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc46:	4613      	mov	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4413      	add	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	4a15      	ldr	r2, [pc, #84]	@ (800fca4 <prvAddNewTaskToReadyList+0xcc>)
 800fc50:	441a      	add	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	3304      	adds	r3, #4
 800fc56:	4619      	mov	r1, r3
 800fc58:	4610      	mov	r0, r2
 800fc5a:	f7ff f8c3 	bl	800ede4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fc5e:	f001 f8ed 	bl	8010e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fc62:	4b0d      	ldr	r3, [pc, #52]	@ (800fc98 <prvAddNewTaskToReadyList+0xc0>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00e      	beq.n	800fc88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fc6a:	4b0a      	ldr	r3, [pc, #40]	@ (800fc94 <prvAddNewTaskToReadyList+0xbc>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d207      	bcs.n	800fc88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fc78:	4b0b      	ldr	r3, [pc, #44]	@ (800fca8 <prvAddNewTaskToReadyList+0xd0>)
 800fc7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc7e:	601a      	str	r2, [r3, #0]
 800fc80:	f3bf 8f4f 	dsb	sy
 800fc84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc88:	bf00      	nop
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	20001368 	.word	0x20001368
 800fc94:	20001268 	.word	0x20001268
 800fc98:	20001374 	.word	0x20001374
 800fc9c:	20001384 	.word	0x20001384
 800fca0:	20001370 	.word	0x20001370
 800fca4:	2000126c 	.word	0x2000126c
 800fca8:	e000ed04 	.word	0xe000ed04

0800fcac <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b08a      	sub	sp, #40	@ 0x28
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10b      	bne.n	800fcd8 <vTaskDelayUntil+0x2c>
	__asm volatile
 800fcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc4:	f383 8811 	msr	BASEPRI, r3
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	f3bf 8f4f 	dsb	sy
 800fcd0:	617b      	str	r3, [r7, #20]
}
 800fcd2:	bf00      	nop
 800fcd4:	bf00      	nop
 800fcd6:	e7fd      	b.n	800fcd4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d10b      	bne.n	800fcf6 <vTaskDelayUntil+0x4a>
	__asm volatile
 800fcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	613b      	str	r3, [r7, #16]
}
 800fcf0:	bf00      	nop
 800fcf2:	bf00      	nop
 800fcf4:	e7fd      	b.n	800fcf2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800fcf6:	4b2a      	ldr	r3, [pc, #168]	@ (800fda0 <vTaskDelayUntil+0xf4>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d00b      	beq.n	800fd16 <vTaskDelayUntil+0x6a>
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	60fb      	str	r3, [r7, #12]
}
 800fd10:	bf00      	nop
 800fd12:	bf00      	nop
 800fd14:	e7fd      	b.n	800fd12 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800fd16:	f000 f965 	bl	800ffe4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800fd1a:	4b22      	ldr	r3, [pc, #136]	@ (800fda4 <vTaskDelayUntil+0xf8>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	683a      	ldr	r2, [r7, #0]
 800fd26:	4413      	add	r3, r2
 800fd28:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	6a3a      	ldr	r2, [r7, #32]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d20b      	bcs.n	800fd4c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	69fa      	ldr	r2, [r7, #28]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d211      	bcs.n	800fd62 <vTaskDelayUntil+0xb6>
 800fd3e:	69fa      	ldr	r2, [r7, #28]
 800fd40:	6a3b      	ldr	r3, [r7, #32]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d90d      	bls.n	800fd62 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800fd46:	2301      	movs	r3, #1
 800fd48:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd4a:	e00a      	b.n	800fd62 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	69fa      	ldr	r2, [r7, #28]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d303      	bcc.n	800fd5e <vTaskDelayUntil+0xb2>
 800fd56:	69fa      	ldr	r2, [r7, #28]
 800fd58:	6a3b      	ldr	r3, [r7, #32]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d901      	bls.n	800fd62 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800fd5e:	2301      	movs	r3, #1
 800fd60:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	69fa      	ldr	r2, [r7, #28]
 800fd66:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800fd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d006      	beq.n	800fd7c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800fd6e:	69fa      	ldr	r2, [r7, #28]
 800fd70:	6a3b      	ldr	r3, [r7, #32]
 800fd72:	1ad3      	subs	r3, r2, r3
 800fd74:	2100      	movs	r1, #0
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 fe9a 	bl	8010ab0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800fd7c:	f000 f940 	bl	8010000 <xTaskResumeAll>
 800fd80:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d107      	bne.n	800fd98 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800fd88:	4b07      	ldr	r3, [pc, #28]	@ (800fda8 <vTaskDelayUntil+0xfc>)
 800fd8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd8e:	601a      	str	r2, [r3, #0]
 800fd90:	f3bf 8f4f 	dsb	sy
 800fd94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd98:	bf00      	nop
 800fd9a:	3728      	adds	r7, #40	@ 0x28
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	20001390 	.word	0x20001390
 800fda4:	2000136c 	.word	0x2000136c
 800fda8:	e000ed04 	.word	0xe000ed04

0800fdac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d018      	beq.n	800fdf0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fdbe:	4b14      	ldr	r3, [pc, #80]	@ (800fe10 <vTaskDelay+0x64>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00b      	beq.n	800fdde <vTaskDelay+0x32>
	__asm volatile
 800fdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdca:	f383 8811 	msr	BASEPRI, r3
 800fdce:	f3bf 8f6f 	isb	sy
 800fdd2:	f3bf 8f4f 	dsb	sy
 800fdd6:	60bb      	str	r3, [r7, #8]
}
 800fdd8:	bf00      	nop
 800fdda:	bf00      	nop
 800fddc:	e7fd      	b.n	800fdda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fdde:	f000 f901 	bl	800ffe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fde2:	2100      	movs	r1, #0
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fe63 	bl	8010ab0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fdea:	f000 f909 	bl	8010000 <xTaskResumeAll>
 800fdee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d107      	bne.n	800fe06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800fdf6:	4b07      	ldr	r3, [pc, #28]	@ (800fe14 <vTaskDelay+0x68>)
 800fdf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdfc:	601a      	str	r2, [r3, #0]
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe06:	bf00      	nop
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	20001390 	.word	0x20001390
 800fe14:	e000ed04 	.word	0xe000ed04

0800fe18 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fe20:	f000 ffda 	bl	8010dd8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d102      	bne.n	800fe30 <vTaskSuspend+0x18>
 800fe2a:	4b3d      	ldr	r3, [pc, #244]	@ (800ff20 <vTaskSuspend+0x108>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	e000      	b.n	800fe32 <vTaskSuspend+0x1a>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	3304      	adds	r3, #4
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f7ff f830 	bl	800ee9e <uxListRemove>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d115      	bne.n	800fe70 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe48:	4936      	ldr	r1, [pc, #216]	@ (800ff24 <vTaskSuspend+0x10c>)
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	4413      	add	r3, r2
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	440b      	add	r3, r1
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d10a      	bne.n	800fe70 <vTaskSuspend+0x58>
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe5e:	2201      	movs	r2, #1
 800fe60:	fa02 f303 	lsl.w	r3, r2, r3
 800fe64:	43da      	mvns	r2, r3
 800fe66:	4b30      	ldr	r3, [pc, #192]	@ (800ff28 <vTaskSuspend+0x110>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4013      	ands	r3, r2
 800fe6c:	4a2e      	ldr	r2, [pc, #184]	@ (800ff28 <vTaskSuspend+0x110>)
 800fe6e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d004      	beq.n	800fe82 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	3318      	adds	r3, #24
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7ff f80e 	bl	800ee9e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	3304      	adds	r3, #4
 800fe86:	4619      	mov	r1, r3
 800fe88:	4828      	ldr	r0, [pc, #160]	@ (800ff2c <vTaskSuspend+0x114>)
 800fe8a:	f7fe ffab 	bl	800ede4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d103      	bne.n	800fea2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800fea2:	f000 ffcb 	bl	8010e3c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800fea6:	4b22      	ldr	r3, [pc, #136]	@ (800ff30 <vTaskSuspend+0x118>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d005      	beq.n	800feba <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800feae:	f000 ff93 	bl	8010dd8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800feb2:	f000 fc1d 	bl	80106f0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800feb6:	f000 ffc1 	bl	8010e3c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800feba:	4b19      	ldr	r3, [pc, #100]	@ (800ff20 <vTaskSuspend+0x108>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	68fa      	ldr	r2, [r7, #12]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d128      	bne.n	800ff16 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800fec4:	4b1a      	ldr	r3, [pc, #104]	@ (800ff30 <vTaskSuspend+0x118>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d018      	beq.n	800fefe <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800fecc:	4b19      	ldr	r3, [pc, #100]	@ (800ff34 <vTaskSuspend+0x11c>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00b      	beq.n	800feec <vTaskSuspend+0xd4>
	__asm volatile
 800fed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fed8:	f383 8811 	msr	BASEPRI, r3
 800fedc:	f3bf 8f6f 	isb	sy
 800fee0:	f3bf 8f4f 	dsb	sy
 800fee4:	60bb      	str	r3, [r7, #8]
}
 800fee6:	bf00      	nop
 800fee8:	bf00      	nop
 800feea:	e7fd      	b.n	800fee8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800feec:	4b12      	ldr	r3, [pc, #72]	@ (800ff38 <vTaskSuspend+0x120>)
 800feee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fef2:	601a      	str	r2, [r3, #0]
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fefc:	e00b      	b.n	800ff16 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800fefe:	4b0b      	ldr	r3, [pc, #44]	@ (800ff2c <vTaskSuspend+0x114>)
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	4b0e      	ldr	r3, [pc, #56]	@ (800ff3c <vTaskSuspend+0x124>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d103      	bne.n	800ff12 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800ff0a:	4b05      	ldr	r3, [pc, #20]	@ (800ff20 <vTaskSuspend+0x108>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	601a      	str	r2, [r3, #0]
	}
 800ff10:	e001      	b.n	800ff16 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800ff12:	f000 f9dd 	bl	80102d0 <vTaskSwitchContext>
	}
 800ff16:	bf00      	nop
 800ff18:	3710      	adds	r7, #16
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	20001268 	.word	0x20001268
 800ff24:	2000126c 	.word	0x2000126c
 800ff28:	20001370 	.word	0x20001370
 800ff2c:	20001354 	.word	0x20001354
 800ff30:	20001374 	.word	0x20001374
 800ff34:	20001390 	.word	0x20001390
 800ff38:	e000ed04 	.word	0xe000ed04
 800ff3c:	20001368 	.word	0x20001368

0800ff40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b086      	sub	sp, #24
 800ff44:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ff46:	4b1f      	ldr	r3, [pc, #124]	@ (800ffc4 <vTaskStartScheduler+0x84>)
 800ff48:	9301      	str	r3, [sp, #4]
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	9300      	str	r3, [sp, #0]
 800ff4e:	2300      	movs	r3, #0
 800ff50:	2280      	movs	r2, #128	@ 0x80
 800ff52:	491d      	ldr	r1, [pc, #116]	@ (800ffc8 <vTaskStartScheduler+0x88>)
 800ff54:	481d      	ldr	r0, [pc, #116]	@ (800ffcc <vTaskStartScheduler+0x8c>)
 800ff56:	f7ff fd55 	bl	800fa04 <xTaskCreate>
 800ff5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d11b      	bne.n	800ff9a <vTaskStartScheduler+0x5a>
	__asm volatile
 800ff62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff66:	f383 8811 	msr	BASEPRI, r3
 800ff6a:	f3bf 8f6f 	isb	sy
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	60bb      	str	r3, [r7, #8]
}
 800ff74:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff76:	4b16      	ldr	r3, [pc, #88]	@ (800ffd0 <vTaskStartScheduler+0x90>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	334c      	adds	r3, #76	@ 0x4c
 800ff7c:	4a15      	ldr	r2, [pc, #84]	@ (800ffd4 <vTaskStartScheduler+0x94>)
 800ff7e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff80:	4b15      	ldr	r3, [pc, #84]	@ (800ffd8 <vTaskStartScheduler+0x98>)
 800ff82:	f04f 32ff 	mov.w	r2, #4294967295
 800ff86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff88:	4b14      	ldr	r3, [pc, #80]	@ (800ffdc <vTaskStartScheduler+0x9c>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff8e:	4b14      	ldr	r3, [pc, #80]	@ (800ffe0 <vTaskStartScheduler+0xa0>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff94:	f000 fe7c 	bl	8010c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff98:	e00f      	b.n	800ffba <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa0:	d10b      	bne.n	800ffba <vTaskStartScheduler+0x7a>
	__asm volatile
 800ffa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	607b      	str	r3, [r7, #4]
}
 800ffb4:	bf00      	nop
 800ffb6:	bf00      	nop
 800ffb8:	e7fd      	b.n	800ffb6 <vTaskStartScheduler+0x76>
}
 800ffba:	bf00      	nop
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	2000138c 	.word	0x2000138c
 800ffc8:	08016568 	.word	0x08016568
 800ffcc:	080105b9 	.word	0x080105b9
 800ffd0:	20001268 	.word	0x20001268
 800ffd4:	2000003c 	.word	0x2000003c
 800ffd8:	20001388 	.word	0x20001388
 800ffdc:	20001374 	.word	0x20001374
 800ffe0:	2000136c 	.word	0x2000136c

0800ffe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ffe8:	4b04      	ldr	r3, [pc, #16]	@ (800fffc <vTaskSuspendAll+0x18>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	3301      	adds	r3, #1
 800ffee:	4a03      	ldr	r2, [pc, #12]	@ (800fffc <vTaskSuspendAll+0x18>)
 800fff0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fff2:	bf00      	nop
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr
 800fffc:	20001390 	.word	0x20001390

08010000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010006:	2300      	movs	r3, #0
 8010008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801000a:	2300      	movs	r3, #0
 801000c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801000e:	4b42      	ldr	r3, [pc, #264]	@ (8010118 <xTaskResumeAll+0x118>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d10b      	bne.n	801002e <xTaskResumeAll+0x2e>
	__asm volatile
 8010016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801001a:	f383 8811 	msr	BASEPRI, r3
 801001e:	f3bf 8f6f 	isb	sy
 8010022:	f3bf 8f4f 	dsb	sy
 8010026:	603b      	str	r3, [r7, #0]
}
 8010028:	bf00      	nop
 801002a:	bf00      	nop
 801002c:	e7fd      	b.n	801002a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801002e:	f000 fed3 	bl	8010dd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010032:	4b39      	ldr	r3, [pc, #228]	@ (8010118 <xTaskResumeAll+0x118>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	3b01      	subs	r3, #1
 8010038:	4a37      	ldr	r2, [pc, #220]	@ (8010118 <xTaskResumeAll+0x118>)
 801003a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801003c:	4b36      	ldr	r3, [pc, #216]	@ (8010118 <xTaskResumeAll+0x118>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d161      	bne.n	8010108 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010044:	4b35      	ldr	r3, [pc, #212]	@ (801011c <xTaskResumeAll+0x11c>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d05d      	beq.n	8010108 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801004c:	e02e      	b.n	80100ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801004e:	4b34      	ldr	r3, [pc, #208]	@ (8010120 <xTaskResumeAll+0x120>)
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	3318      	adds	r3, #24
 801005a:	4618      	mov	r0, r3
 801005c:	f7fe ff1f 	bl	800ee9e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	3304      	adds	r3, #4
 8010064:	4618      	mov	r0, r3
 8010066:	f7fe ff1a 	bl	800ee9e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801006e:	2201      	movs	r2, #1
 8010070:	409a      	lsls	r2, r3
 8010072:	4b2c      	ldr	r3, [pc, #176]	@ (8010124 <xTaskResumeAll+0x124>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4313      	orrs	r3, r2
 8010078:	4a2a      	ldr	r2, [pc, #168]	@ (8010124 <xTaskResumeAll+0x124>)
 801007a:	6013      	str	r3, [r2, #0]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010080:	4613      	mov	r3, r2
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	4413      	add	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4a27      	ldr	r2, [pc, #156]	@ (8010128 <xTaskResumeAll+0x128>)
 801008a:	441a      	add	r2, r3
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	3304      	adds	r3, #4
 8010090:	4619      	mov	r1, r3
 8010092:	4610      	mov	r0, r2
 8010094:	f7fe fea6 	bl	800ede4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801009c:	4b23      	ldr	r3, [pc, #140]	@ (801012c <xTaskResumeAll+0x12c>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d302      	bcc.n	80100ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80100a6:	4b22      	ldr	r3, [pc, #136]	@ (8010130 <xTaskResumeAll+0x130>)
 80100a8:	2201      	movs	r2, #1
 80100aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80100ac:	4b1c      	ldr	r3, [pc, #112]	@ (8010120 <xTaskResumeAll+0x120>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d1cc      	bne.n	801004e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80100ba:	f000 fb19 	bl	80106f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80100be:	4b1d      	ldr	r3, [pc, #116]	@ (8010134 <xTaskResumeAll+0x134>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d010      	beq.n	80100ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80100ca:	f000 f847 	bl	801015c <xTaskIncrementTick>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80100d4:	4b16      	ldr	r3, [pc, #88]	@ (8010130 <xTaskResumeAll+0x130>)
 80100d6:	2201      	movs	r2, #1
 80100d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	3b01      	subs	r3, #1
 80100de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d1f1      	bne.n	80100ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80100e6:	4b13      	ldr	r3, [pc, #76]	@ (8010134 <xTaskResumeAll+0x134>)
 80100e8:	2200      	movs	r2, #0
 80100ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80100ec:	4b10      	ldr	r3, [pc, #64]	@ (8010130 <xTaskResumeAll+0x130>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d009      	beq.n	8010108 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80100f4:	2301      	movs	r3, #1
 80100f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80100f8:	4b0f      	ldr	r3, [pc, #60]	@ (8010138 <xTaskResumeAll+0x138>)
 80100fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100fe:	601a      	str	r2, [r3, #0]
 8010100:	f3bf 8f4f 	dsb	sy
 8010104:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010108:	f000 fe98 	bl	8010e3c <vPortExitCritical>

	return xAlreadyYielded;
 801010c:	68bb      	ldr	r3, [r7, #8]
}
 801010e:	4618      	mov	r0, r3
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	20001390 	.word	0x20001390
 801011c:	20001368 	.word	0x20001368
 8010120:	20001328 	.word	0x20001328
 8010124:	20001370 	.word	0x20001370
 8010128:	2000126c 	.word	0x2000126c
 801012c:	20001268 	.word	0x20001268
 8010130:	2000137c 	.word	0x2000137c
 8010134:	20001378 	.word	0x20001378
 8010138:	e000ed04 	.word	0xe000ed04

0801013c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010142:	4b05      	ldr	r3, [pc, #20]	@ (8010158 <xTaskGetTickCount+0x1c>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010148:	687b      	ldr	r3, [r7, #4]
}
 801014a:	4618      	mov	r0, r3
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop
 8010158:	2000136c 	.word	0x2000136c

0801015c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b086      	sub	sp, #24
 8010160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010162:	2300      	movs	r3, #0
 8010164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010166:	4b4f      	ldr	r3, [pc, #316]	@ (80102a4 <xTaskIncrementTick+0x148>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	f040 808f 	bne.w	801028e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010170:	4b4d      	ldr	r3, [pc, #308]	@ (80102a8 <xTaskIncrementTick+0x14c>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	3301      	adds	r3, #1
 8010176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010178:	4a4b      	ldr	r2, [pc, #300]	@ (80102a8 <xTaskIncrementTick+0x14c>)
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d121      	bne.n	80101c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010184:	4b49      	ldr	r3, [pc, #292]	@ (80102ac <xTaskIncrementTick+0x150>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00b      	beq.n	80101a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 801018e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010192:	f383 8811 	msr	BASEPRI, r3
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	f3bf 8f4f 	dsb	sy
 801019e:	603b      	str	r3, [r7, #0]
}
 80101a0:	bf00      	nop
 80101a2:	bf00      	nop
 80101a4:	e7fd      	b.n	80101a2 <xTaskIncrementTick+0x46>
 80101a6:	4b41      	ldr	r3, [pc, #260]	@ (80102ac <xTaskIncrementTick+0x150>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	60fb      	str	r3, [r7, #12]
 80101ac:	4b40      	ldr	r3, [pc, #256]	@ (80102b0 <xTaskIncrementTick+0x154>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a3e      	ldr	r2, [pc, #248]	@ (80102ac <xTaskIncrementTick+0x150>)
 80101b2:	6013      	str	r3, [r2, #0]
 80101b4:	4a3e      	ldr	r2, [pc, #248]	@ (80102b0 <xTaskIncrementTick+0x154>)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	6013      	str	r3, [r2, #0]
 80101ba:	4b3e      	ldr	r3, [pc, #248]	@ (80102b4 <xTaskIncrementTick+0x158>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	3301      	adds	r3, #1
 80101c0:	4a3c      	ldr	r2, [pc, #240]	@ (80102b4 <xTaskIncrementTick+0x158>)
 80101c2:	6013      	str	r3, [r2, #0]
 80101c4:	f000 fa94 	bl	80106f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80101c8:	4b3b      	ldr	r3, [pc, #236]	@ (80102b8 <xTaskIncrementTick+0x15c>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	693a      	ldr	r2, [r7, #16]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d348      	bcc.n	8010264 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101d2:	4b36      	ldr	r3, [pc, #216]	@ (80102ac <xTaskIncrementTick+0x150>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d104      	bne.n	80101e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101dc:	4b36      	ldr	r3, [pc, #216]	@ (80102b8 <xTaskIncrementTick+0x15c>)
 80101de:	f04f 32ff 	mov.w	r2, #4294967295
 80101e2:	601a      	str	r2, [r3, #0]
					break;
 80101e4:	e03e      	b.n	8010264 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e6:	4b31      	ldr	r3, [pc, #196]	@ (80102ac <xTaskIncrementTick+0x150>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	68db      	ldr	r3, [r3, #12]
 80101ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80101f6:	693a      	ldr	r2, [r7, #16]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d203      	bcs.n	8010206 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101fe:	4a2e      	ldr	r2, [pc, #184]	@ (80102b8 <xTaskIncrementTick+0x15c>)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010204:	e02e      	b.n	8010264 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	3304      	adds	r3, #4
 801020a:	4618      	mov	r0, r3
 801020c:	f7fe fe47 	bl	800ee9e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010214:	2b00      	cmp	r3, #0
 8010216:	d004      	beq.n	8010222 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	3318      	adds	r3, #24
 801021c:	4618      	mov	r0, r3
 801021e:	f7fe fe3e 	bl	800ee9e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010226:	2201      	movs	r2, #1
 8010228:	409a      	lsls	r2, r3
 801022a:	4b24      	ldr	r3, [pc, #144]	@ (80102bc <xTaskIncrementTick+0x160>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4313      	orrs	r3, r2
 8010230:	4a22      	ldr	r2, [pc, #136]	@ (80102bc <xTaskIncrementTick+0x160>)
 8010232:	6013      	str	r3, [r2, #0]
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010238:	4613      	mov	r3, r2
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	4413      	add	r3, r2
 801023e:	009b      	lsls	r3, r3, #2
 8010240:	4a1f      	ldr	r2, [pc, #124]	@ (80102c0 <xTaskIncrementTick+0x164>)
 8010242:	441a      	add	r2, r3
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	3304      	adds	r3, #4
 8010248:	4619      	mov	r1, r3
 801024a:	4610      	mov	r0, r2
 801024c:	f7fe fdca 	bl	800ede4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010254:	4b1b      	ldr	r3, [pc, #108]	@ (80102c4 <xTaskIncrementTick+0x168>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801025a:	429a      	cmp	r2, r3
 801025c:	d3b9      	bcc.n	80101d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801025e:	2301      	movs	r3, #1
 8010260:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010262:	e7b6      	b.n	80101d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010264:	4b17      	ldr	r3, [pc, #92]	@ (80102c4 <xTaskIncrementTick+0x168>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801026a:	4915      	ldr	r1, [pc, #84]	@ (80102c0 <xTaskIncrementTick+0x164>)
 801026c:	4613      	mov	r3, r2
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	4413      	add	r3, r2
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	440b      	add	r3, r1
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d901      	bls.n	8010280 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801027c:	2301      	movs	r3, #1
 801027e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010280:	4b11      	ldr	r3, [pc, #68]	@ (80102c8 <xTaskIncrementTick+0x16c>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d007      	beq.n	8010298 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010288:	2301      	movs	r3, #1
 801028a:	617b      	str	r3, [r7, #20]
 801028c:	e004      	b.n	8010298 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801028e:	4b0f      	ldr	r3, [pc, #60]	@ (80102cc <xTaskIncrementTick+0x170>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3301      	adds	r3, #1
 8010294:	4a0d      	ldr	r2, [pc, #52]	@ (80102cc <xTaskIncrementTick+0x170>)
 8010296:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010298:	697b      	ldr	r3, [r7, #20]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3718      	adds	r7, #24
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	20001390 	.word	0x20001390
 80102a8:	2000136c 	.word	0x2000136c
 80102ac:	20001320 	.word	0x20001320
 80102b0:	20001324 	.word	0x20001324
 80102b4:	20001380 	.word	0x20001380
 80102b8:	20001388 	.word	0x20001388
 80102bc:	20001370 	.word	0x20001370
 80102c0:	2000126c 	.word	0x2000126c
 80102c4:	20001268 	.word	0x20001268
 80102c8:	2000137c 	.word	0x2000137c
 80102cc:	20001378 	.word	0x20001378

080102d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80102d0:	b480      	push	{r7}
 80102d2:	b087      	sub	sp, #28
 80102d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80102d6:	4b2a      	ldr	r3, [pc, #168]	@ (8010380 <vTaskSwitchContext+0xb0>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d003      	beq.n	80102e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80102de:	4b29      	ldr	r3, [pc, #164]	@ (8010384 <vTaskSwitchContext+0xb4>)
 80102e0:	2201      	movs	r2, #1
 80102e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80102e4:	e045      	b.n	8010372 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80102e6:	4b27      	ldr	r3, [pc, #156]	@ (8010384 <vTaskSwitchContext+0xb4>)
 80102e8:	2200      	movs	r2, #0
 80102ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102ec:	4b26      	ldr	r3, [pc, #152]	@ (8010388 <vTaskSwitchContext+0xb8>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	fab3 f383 	clz	r3, r3
 80102f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80102fa:	7afb      	ldrb	r3, [r7, #11]
 80102fc:	f1c3 031f 	rsb	r3, r3, #31
 8010300:	617b      	str	r3, [r7, #20]
 8010302:	4922      	ldr	r1, [pc, #136]	@ (801038c <vTaskSwitchContext+0xbc>)
 8010304:	697a      	ldr	r2, [r7, #20]
 8010306:	4613      	mov	r3, r2
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	4413      	add	r3, r2
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	440b      	add	r3, r1
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d10b      	bne.n	801032e <vTaskSwitchContext+0x5e>
	__asm volatile
 8010316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801031a:	f383 8811 	msr	BASEPRI, r3
 801031e:	f3bf 8f6f 	isb	sy
 8010322:	f3bf 8f4f 	dsb	sy
 8010326:	607b      	str	r3, [r7, #4]
}
 8010328:	bf00      	nop
 801032a:	bf00      	nop
 801032c:	e7fd      	b.n	801032a <vTaskSwitchContext+0x5a>
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	4613      	mov	r3, r2
 8010332:	009b      	lsls	r3, r3, #2
 8010334:	4413      	add	r3, r2
 8010336:	009b      	lsls	r3, r3, #2
 8010338:	4a14      	ldr	r2, [pc, #80]	@ (801038c <vTaskSwitchContext+0xbc>)
 801033a:	4413      	add	r3, r2
 801033c:	613b      	str	r3, [r7, #16]
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	685a      	ldr	r2, [r3, #4]
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	605a      	str	r2, [r3, #4]
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	685a      	ldr	r2, [r3, #4]
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	3308      	adds	r3, #8
 8010350:	429a      	cmp	r2, r3
 8010352:	d104      	bne.n	801035e <vTaskSwitchContext+0x8e>
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	685a      	ldr	r2, [r3, #4]
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	605a      	str	r2, [r3, #4]
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	4a0a      	ldr	r2, [pc, #40]	@ (8010390 <vTaskSwitchContext+0xc0>)
 8010366:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010368:	4b09      	ldr	r3, [pc, #36]	@ (8010390 <vTaskSwitchContext+0xc0>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	334c      	adds	r3, #76	@ 0x4c
 801036e:	4a09      	ldr	r2, [pc, #36]	@ (8010394 <vTaskSwitchContext+0xc4>)
 8010370:	6013      	str	r3, [r2, #0]
}
 8010372:	bf00      	nop
 8010374:	371c      	adds	r7, #28
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop
 8010380:	20001390 	.word	0x20001390
 8010384:	2000137c 	.word	0x2000137c
 8010388:	20001370 	.word	0x20001370
 801038c:	2000126c 	.word	0x2000126c
 8010390:	20001268 	.word	0x20001268
 8010394:	2000003c 	.word	0x2000003c

08010398 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d10b      	bne.n	80103c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80103a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ac:	f383 8811 	msr	BASEPRI, r3
 80103b0:	f3bf 8f6f 	isb	sy
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	60fb      	str	r3, [r7, #12]
}
 80103ba:	bf00      	nop
 80103bc:	bf00      	nop
 80103be:	e7fd      	b.n	80103bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103c0:	4b07      	ldr	r3, [pc, #28]	@ (80103e0 <vTaskPlaceOnEventList+0x48>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3318      	adds	r3, #24
 80103c6:	4619      	mov	r1, r3
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7fe fd2f 	bl	800ee2c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80103ce:	2101      	movs	r1, #1
 80103d0:	6838      	ldr	r0, [r7, #0]
 80103d2:	f000 fb6d 	bl	8010ab0 <prvAddCurrentTaskToDelayedList>
}
 80103d6:	bf00      	nop
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	20001268 	.word	0x20001268

080103e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d10b      	bne.n	8010412 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80103fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103fe:	f383 8811 	msr	BASEPRI, r3
 8010402:	f3bf 8f6f 	isb	sy
 8010406:	f3bf 8f4f 	dsb	sy
 801040a:	60fb      	str	r3, [r7, #12]
}
 801040c:	bf00      	nop
 801040e:	bf00      	nop
 8010410:	e7fd      	b.n	801040e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	3318      	adds	r3, #24
 8010416:	4618      	mov	r0, r3
 8010418:	f7fe fd41 	bl	800ee9e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801041c:	4b1d      	ldr	r3, [pc, #116]	@ (8010494 <xTaskRemoveFromEventList+0xb0>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d11c      	bne.n	801045e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	3304      	adds	r3, #4
 8010428:	4618      	mov	r0, r3
 801042a:	f7fe fd38 	bl	800ee9e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010432:	2201      	movs	r2, #1
 8010434:	409a      	lsls	r2, r3
 8010436:	4b18      	ldr	r3, [pc, #96]	@ (8010498 <xTaskRemoveFromEventList+0xb4>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4313      	orrs	r3, r2
 801043c:	4a16      	ldr	r2, [pc, #88]	@ (8010498 <xTaskRemoveFromEventList+0xb4>)
 801043e:	6013      	str	r3, [r2, #0]
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010444:	4613      	mov	r3, r2
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4413      	add	r3, r2
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	4a13      	ldr	r2, [pc, #76]	@ (801049c <xTaskRemoveFromEventList+0xb8>)
 801044e:	441a      	add	r2, r3
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	3304      	adds	r3, #4
 8010454:	4619      	mov	r1, r3
 8010456:	4610      	mov	r0, r2
 8010458:	f7fe fcc4 	bl	800ede4 <vListInsertEnd>
 801045c:	e005      	b.n	801046a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	3318      	adds	r3, #24
 8010462:	4619      	mov	r1, r3
 8010464:	480e      	ldr	r0, [pc, #56]	@ (80104a0 <xTaskRemoveFromEventList+0xbc>)
 8010466:	f7fe fcbd 	bl	800ede4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801046e:	4b0d      	ldr	r3, [pc, #52]	@ (80104a4 <xTaskRemoveFromEventList+0xc0>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010474:	429a      	cmp	r2, r3
 8010476:	d905      	bls.n	8010484 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010478:	2301      	movs	r3, #1
 801047a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801047c:	4b0a      	ldr	r3, [pc, #40]	@ (80104a8 <xTaskRemoveFromEventList+0xc4>)
 801047e:	2201      	movs	r2, #1
 8010480:	601a      	str	r2, [r3, #0]
 8010482:	e001      	b.n	8010488 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010484:	2300      	movs	r3, #0
 8010486:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010488:	697b      	ldr	r3, [r7, #20]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3718      	adds	r7, #24
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	20001390 	.word	0x20001390
 8010498:	20001370 	.word	0x20001370
 801049c:	2000126c 	.word	0x2000126c
 80104a0:	20001328 	.word	0x20001328
 80104a4:	20001268 	.word	0x20001268
 80104a8:	2000137c 	.word	0x2000137c

080104ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80104b4:	4b06      	ldr	r3, [pc, #24]	@ (80104d0 <vTaskInternalSetTimeOutState+0x24>)
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80104bc:	4b05      	ldr	r3, [pc, #20]	@ (80104d4 <vTaskInternalSetTimeOutState+0x28>)
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	605a      	str	r2, [r3, #4]
}
 80104c4:	bf00      	nop
 80104c6:	370c      	adds	r7, #12
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr
 80104d0:	20001380 	.word	0x20001380
 80104d4:	2000136c 	.word	0x2000136c

080104d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b088      	sub	sp, #32
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d10b      	bne.n	8010500 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80104e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104ec:	f383 8811 	msr	BASEPRI, r3
 80104f0:	f3bf 8f6f 	isb	sy
 80104f4:	f3bf 8f4f 	dsb	sy
 80104f8:	613b      	str	r3, [r7, #16]
}
 80104fa:	bf00      	nop
 80104fc:	bf00      	nop
 80104fe:	e7fd      	b.n	80104fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d10b      	bne.n	801051e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801050a:	f383 8811 	msr	BASEPRI, r3
 801050e:	f3bf 8f6f 	isb	sy
 8010512:	f3bf 8f4f 	dsb	sy
 8010516:	60fb      	str	r3, [r7, #12]
}
 8010518:	bf00      	nop
 801051a:	bf00      	nop
 801051c:	e7fd      	b.n	801051a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801051e:	f000 fc5b 	bl	8010dd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010522:	4b1d      	ldr	r3, [pc, #116]	@ (8010598 <xTaskCheckForTimeOut+0xc0>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	685b      	ldr	r3, [r3, #4]
 801052c:	69ba      	ldr	r2, [r7, #24]
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053a:	d102      	bne.n	8010542 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801053c:	2300      	movs	r3, #0
 801053e:	61fb      	str	r3, [r7, #28]
 8010540:	e023      	b.n	801058a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	4b15      	ldr	r3, [pc, #84]	@ (801059c <xTaskCheckForTimeOut+0xc4>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	429a      	cmp	r2, r3
 801054c:	d007      	beq.n	801055e <xTaskCheckForTimeOut+0x86>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	69ba      	ldr	r2, [r7, #24]
 8010554:	429a      	cmp	r2, r3
 8010556:	d302      	bcc.n	801055e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010558:	2301      	movs	r3, #1
 801055a:	61fb      	str	r3, [r7, #28]
 801055c:	e015      	b.n	801058a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	697a      	ldr	r2, [r7, #20]
 8010564:	429a      	cmp	r2, r3
 8010566:	d20b      	bcs.n	8010580 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	1ad2      	subs	r2, r2, r3
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7ff ff99 	bl	80104ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801057a:	2300      	movs	r3, #0
 801057c:	61fb      	str	r3, [r7, #28]
 801057e:	e004      	b.n	801058a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	2200      	movs	r2, #0
 8010584:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010586:	2301      	movs	r3, #1
 8010588:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801058a:	f000 fc57 	bl	8010e3c <vPortExitCritical>

	return xReturn;
 801058e:	69fb      	ldr	r3, [r7, #28]
}
 8010590:	4618      	mov	r0, r3
 8010592:	3720      	adds	r7, #32
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	2000136c 	.word	0x2000136c
 801059c:	20001380 	.word	0x20001380

080105a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80105a0:	b480      	push	{r7}
 80105a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80105a4:	4b03      	ldr	r3, [pc, #12]	@ (80105b4 <vTaskMissedYield+0x14>)
 80105a6:	2201      	movs	r2, #1
 80105a8:	601a      	str	r2, [r3, #0]
}
 80105aa:	bf00      	nop
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr
 80105b4:	2000137c 	.word	0x2000137c

080105b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80105c0:	f000 f852 	bl	8010668 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80105c4:	4b06      	ldr	r3, [pc, #24]	@ (80105e0 <prvIdleTask+0x28>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d9f9      	bls.n	80105c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80105cc:	4b05      	ldr	r3, [pc, #20]	@ (80105e4 <prvIdleTask+0x2c>)
 80105ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105d2:	601a      	str	r2, [r3, #0]
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80105dc:	e7f0      	b.n	80105c0 <prvIdleTask+0x8>
 80105de:	bf00      	nop
 80105e0:	2000126c 	.word	0x2000126c
 80105e4:	e000ed04 	.word	0xe000ed04

080105e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105ee:	2300      	movs	r3, #0
 80105f0:	607b      	str	r3, [r7, #4]
 80105f2:	e00c      	b.n	801060e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	4613      	mov	r3, r2
 80105f8:	009b      	lsls	r3, r3, #2
 80105fa:	4413      	add	r3, r2
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	4a12      	ldr	r2, [pc, #72]	@ (8010648 <prvInitialiseTaskLists+0x60>)
 8010600:	4413      	add	r3, r2
 8010602:	4618      	mov	r0, r3
 8010604:	f7fe fbc1 	bl	800ed8a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	3301      	adds	r3, #1
 801060c:	607b      	str	r3, [r7, #4]
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2b06      	cmp	r3, #6
 8010612:	d9ef      	bls.n	80105f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010614:	480d      	ldr	r0, [pc, #52]	@ (801064c <prvInitialiseTaskLists+0x64>)
 8010616:	f7fe fbb8 	bl	800ed8a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801061a:	480d      	ldr	r0, [pc, #52]	@ (8010650 <prvInitialiseTaskLists+0x68>)
 801061c:	f7fe fbb5 	bl	800ed8a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010620:	480c      	ldr	r0, [pc, #48]	@ (8010654 <prvInitialiseTaskLists+0x6c>)
 8010622:	f7fe fbb2 	bl	800ed8a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010626:	480c      	ldr	r0, [pc, #48]	@ (8010658 <prvInitialiseTaskLists+0x70>)
 8010628:	f7fe fbaf 	bl	800ed8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801062c:	480b      	ldr	r0, [pc, #44]	@ (801065c <prvInitialiseTaskLists+0x74>)
 801062e:	f7fe fbac 	bl	800ed8a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010632:	4b0b      	ldr	r3, [pc, #44]	@ (8010660 <prvInitialiseTaskLists+0x78>)
 8010634:	4a05      	ldr	r2, [pc, #20]	@ (801064c <prvInitialiseTaskLists+0x64>)
 8010636:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010638:	4b0a      	ldr	r3, [pc, #40]	@ (8010664 <prvInitialiseTaskLists+0x7c>)
 801063a:	4a05      	ldr	r2, [pc, #20]	@ (8010650 <prvInitialiseTaskLists+0x68>)
 801063c:	601a      	str	r2, [r3, #0]
}
 801063e:	bf00      	nop
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	2000126c 	.word	0x2000126c
 801064c:	200012f8 	.word	0x200012f8
 8010650:	2000130c 	.word	0x2000130c
 8010654:	20001328 	.word	0x20001328
 8010658:	2000133c 	.word	0x2000133c
 801065c:	20001354 	.word	0x20001354
 8010660:	20001320 	.word	0x20001320
 8010664:	20001324 	.word	0x20001324

08010668 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801066e:	e019      	b.n	80106a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010670:	f000 fbb2 	bl	8010dd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010674:	4b10      	ldr	r3, [pc, #64]	@ (80106b8 <prvCheckTasksWaitingTermination+0x50>)
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	3304      	adds	r3, #4
 8010680:	4618      	mov	r0, r3
 8010682:	f7fe fc0c 	bl	800ee9e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010686:	4b0d      	ldr	r3, [pc, #52]	@ (80106bc <prvCheckTasksWaitingTermination+0x54>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	3b01      	subs	r3, #1
 801068c:	4a0b      	ldr	r2, [pc, #44]	@ (80106bc <prvCheckTasksWaitingTermination+0x54>)
 801068e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010690:	4b0b      	ldr	r3, [pc, #44]	@ (80106c0 <prvCheckTasksWaitingTermination+0x58>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	3b01      	subs	r3, #1
 8010696:	4a0a      	ldr	r2, [pc, #40]	@ (80106c0 <prvCheckTasksWaitingTermination+0x58>)
 8010698:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801069a:	f000 fbcf 	bl	8010e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f000 f810 	bl	80106c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106a4:	4b06      	ldr	r3, [pc, #24]	@ (80106c0 <prvCheckTasksWaitingTermination+0x58>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1e1      	bne.n	8010670 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80106ac:	bf00      	nop
 80106ae:	bf00      	nop
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	2000133c 	.word	0x2000133c
 80106bc:	20001368 	.word	0x20001368
 80106c0:	20001350 	.word	0x20001350

080106c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	334c      	adds	r3, #76	@ 0x4c
 80106d0:	4618      	mov	r0, r3
 80106d2:	f001 fe6f 	bl	80123b4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80106da:	4618      	mov	r0, r3
 80106dc:	f000 fd6c 	bl	80111b8 <vPortFree>
			vPortFree( pxTCB );
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f000 fd69 	bl	80111b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80106e6:	bf00      	nop
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
	...

080106f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80106f6:	4b0c      	ldr	r3, [pc, #48]	@ (8010728 <prvResetNextTaskUnblockTime+0x38>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d104      	bne.n	801070a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010700:	4b0a      	ldr	r3, [pc, #40]	@ (801072c <prvResetNextTaskUnblockTime+0x3c>)
 8010702:	f04f 32ff 	mov.w	r2, #4294967295
 8010706:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010708:	e008      	b.n	801071c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801070a:	4b07      	ldr	r3, [pc, #28]	@ (8010728 <prvResetNextTaskUnblockTime+0x38>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	4a04      	ldr	r2, [pc, #16]	@ (801072c <prvResetNextTaskUnblockTime+0x3c>)
 801071a:	6013      	str	r3, [r2, #0]
}
 801071c:	bf00      	nop
 801071e:	370c      	adds	r7, #12
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr
 8010728:	20001320 	.word	0x20001320
 801072c:	20001388 	.word	0x20001388

08010730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010736:	4b0b      	ldr	r3, [pc, #44]	@ (8010764 <xTaskGetSchedulerState+0x34>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d102      	bne.n	8010744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801073e:	2301      	movs	r3, #1
 8010740:	607b      	str	r3, [r7, #4]
 8010742:	e008      	b.n	8010756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010744:	4b08      	ldr	r3, [pc, #32]	@ (8010768 <xTaskGetSchedulerState+0x38>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d102      	bne.n	8010752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801074c:	2302      	movs	r3, #2
 801074e:	607b      	str	r3, [r7, #4]
 8010750:	e001      	b.n	8010756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010752:	2300      	movs	r3, #0
 8010754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010756:	687b      	ldr	r3, [r7, #4]
	}
 8010758:	4618      	mov	r0, r3
 801075a:	370c      	adds	r7, #12
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr
 8010764:	20001374 	.word	0x20001374
 8010768:	20001390 	.word	0x20001390

0801076c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010778:	2300      	movs	r3, #0
 801077a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d05e      	beq.n	8010840 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010786:	4b31      	ldr	r3, [pc, #196]	@ (801084c <xTaskPriorityInherit+0xe0>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801078c:	429a      	cmp	r2, r3
 801078e:	d24e      	bcs.n	801082e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	699b      	ldr	r3, [r3, #24]
 8010794:	2b00      	cmp	r3, #0
 8010796:	db06      	blt.n	80107a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010798:	4b2c      	ldr	r3, [pc, #176]	@ (801084c <xTaskPriorityInherit+0xe0>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801079e:	f1c3 0207 	rsb	r2, r3, #7
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	6959      	ldr	r1, [r3, #20]
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107ae:	4613      	mov	r3, r2
 80107b0:	009b      	lsls	r3, r3, #2
 80107b2:	4413      	add	r3, r2
 80107b4:	009b      	lsls	r3, r3, #2
 80107b6:	4a26      	ldr	r2, [pc, #152]	@ (8010850 <xTaskPriorityInherit+0xe4>)
 80107b8:	4413      	add	r3, r2
 80107ba:	4299      	cmp	r1, r3
 80107bc:	d12f      	bne.n	801081e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	3304      	adds	r3, #4
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fe fb6b 	bl	800ee9e <uxListRemove>
 80107c8:	4603      	mov	r3, r0
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d10a      	bne.n	80107e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107d2:	2201      	movs	r2, #1
 80107d4:	fa02 f303 	lsl.w	r3, r2, r3
 80107d8:	43da      	mvns	r2, r3
 80107da:	4b1e      	ldr	r3, [pc, #120]	@ (8010854 <xTaskPriorityInherit+0xe8>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4013      	ands	r3, r2
 80107e0:	4a1c      	ldr	r2, [pc, #112]	@ (8010854 <xTaskPriorityInherit+0xe8>)
 80107e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80107e4:	4b19      	ldr	r3, [pc, #100]	@ (801084c <xTaskPriorityInherit+0xe0>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107f2:	2201      	movs	r2, #1
 80107f4:	409a      	lsls	r2, r3
 80107f6:	4b17      	ldr	r3, [pc, #92]	@ (8010854 <xTaskPriorityInherit+0xe8>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4313      	orrs	r3, r2
 80107fc:	4a15      	ldr	r2, [pc, #84]	@ (8010854 <xTaskPriorityInherit+0xe8>)
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010804:	4613      	mov	r3, r2
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	4413      	add	r3, r2
 801080a:	009b      	lsls	r3, r3, #2
 801080c:	4a10      	ldr	r2, [pc, #64]	@ (8010850 <xTaskPriorityInherit+0xe4>)
 801080e:	441a      	add	r2, r3
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	3304      	adds	r3, #4
 8010814:	4619      	mov	r1, r3
 8010816:	4610      	mov	r0, r2
 8010818:	f7fe fae4 	bl	800ede4 <vListInsertEnd>
 801081c:	e004      	b.n	8010828 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801081e:	4b0b      	ldr	r3, [pc, #44]	@ (801084c <xTaskPriorityInherit+0xe0>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010828:	2301      	movs	r3, #1
 801082a:	60fb      	str	r3, [r7, #12]
 801082c:	e008      	b.n	8010840 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010832:	4b06      	ldr	r3, [pc, #24]	@ (801084c <xTaskPriorityInherit+0xe0>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010838:	429a      	cmp	r2, r3
 801083a:	d201      	bcs.n	8010840 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801083c:	2301      	movs	r3, #1
 801083e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010840:	68fb      	ldr	r3, [r7, #12]
	}
 8010842:	4618      	mov	r0, r3
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	20001268 	.word	0x20001268
 8010850:	2000126c 	.word	0x2000126c
 8010854:	20001370 	.word	0x20001370

08010858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010858:	b580      	push	{r7, lr}
 801085a:	b086      	sub	sp, #24
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010864:	2300      	movs	r3, #0
 8010866:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d070      	beq.n	8010950 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801086e:	4b3b      	ldr	r3, [pc, #236]	@ (801095c <xTaskPriorityDisinherit+0x104>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	693a      	ldr	r2, [r7, #16]
 8010874:	429a      	cmp	r2, r3
 8010876:	d00b      	beq.n	8010890 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801087c:	f383 8811 	msr	BASEPRI, r3
 8010880:	f3bf 8f6f 	isb	sy
 8010884:	f3bf 8f4f 	dsb	sy
 8010888:	60fb      	str	r3, [r7, #12]
}
 801088a:	bf00      	nop
 801088c:	bf00      	nop
 801088e:	e7fd      	b.n	801088c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010894:	2b00      	cmp	r3, #0
 8010896:	d10b      	bne.n	80108b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801089c:	f383 8811 	msr	BASEPRI, r3
 80108a0:	f3bf 8f6f 	isb	sy
 80108a4:	f3bf 8f4f 	dsb	sy
 80108a8:	60bb      	str	r3, [r7, #8]
}
 80108aa:	bf00      	nop
 80108ac:	bf00      	nop
 80108ae:	e7fd      	b.n	80108ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108b4:	1e5a      	subs	r2, r3, #1
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d044      	beq.n	8010950 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d140      	bne.n	8010950 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	3304      	adds	r3, #4
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fe fae3 	bl	800ee9e <uxListRemove>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d115      	bne.n	801090a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108e2:	491f      	ldr	r1, [pc, #124]	@ (8010960 <xTaskPriorityDisinherit+0x108>)
 80108e4:	4613      	mov	r3, r2
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	4413      	add	r3, r2
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	440b      	add	r3, r1
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d10a      	bne.n	801090a <xTaskPriorityDisinherit+0xb2>
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108f8:	2201      	movs	r2, #1
 80108fa:	fa02 f303 	lsl.w	r3, r2, r3
 80108fe:	43da      	mvns	r2, r3
 8010900:	4b18      	ldr	r3, [pc, #96]	@ (8010964 <xTaskPriorityDisinherit+0x10c>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4013      	ands	r3, r2
 8010906:	4a17      	ldr	r2, [pc, #92]	@ (8010964 <xTaskPriorityDisinherit+0x10c>)
 8010908:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010916:	f1c3 0207 	rsb	r2, r3, #7
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010922:	2201      	movs	r2, #1
 8010924:	409a      	lsls	r2, r3
 8010926:	4b0f      	ldr	r3, [pc, #60]	@ (8010964 <xTaskPriorityDisinherit+0x10c>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	4313      	orrs	r3, r2
 801092c:	4a0d      	ldr	r2, [pc, #52]	@ (8010964 <xTaskPriorityDisinherit+0x10c>)
 801092e:	6013      	str	r3, [r2, #0]
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010934:	4613      	mov	r3, r2
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	4413      	add	r3, r2
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	4a08      	ldr	r2, [pc, #32]	@ (8010960 <xTaskPriorityDisinherit+0x108>)
 801093e:	441a      	add	r2, r3
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	3304      	adds	r3, #4
 8010944:	4619      	mov	r1, r3
 8010946:	4610      	mov	r0, r2
 8010948:	f7fe fa4c 	bl	800ede4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801094c:	2301      	movs	r3, #1
 801094e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010950:	697b      	ldr	r3, [r7, #20]
	}
 8010952:	4618      	mov	r0, r3
 8010954:	3718      	adds	r7, #24
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	20001268 	.word	0x20001268
 8010960:	2000126c 	.word	0x2000126c
 8010964:	20001370 	.word	0x20001370

08010968 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010968:	b580      	push	{r7, lr}
 801096a:	b088      	sub	sp, #32
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010976:	2301      	movs	r3, #1
 8010978:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d079      	beq.n	8010a74 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010984:	2b00      	cmp	r3, #0
 8010986:	d10b      	bne.n	80109a0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801098c:	f383 8811 	msr	BASEPRI, r3
 8010990:	f3bf 8f6f 	isb	sy
 8010994:	f3bf 8f4f 	dsb	sy
 8010998:	60fb      	str	r3, [r7, #12]
}
 801099a:	bf00      	nop
 801099c:	bf00      	nop
 801099e:	e7fd      	b.n	801099c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80109a0:	69bb      	ldr	r3, [r7, #24]
 80109a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109a4:	683a      	ldr	r2, [r7, #0]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d902      	bls.n	80109b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	61fb      	str	r3, [r7, #28]
 80109ae:	e002      	b.n	80109b6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80109b0:	69bb      	ldr	r3, [r7, #24]
 80109b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ba:	69fa      	ldr	r2, [r7, #28]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d059      	beq.n	8010a74 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80109c0:	69bb      	ldr	r3, [r7, #24]
 80109c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80109c4:	697a      	ldr	r2, [r7, #20]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d154      	bne.n	8010a74 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80109ca:	4b2c      	ldr	r3, [pc, #176]	@ (8010a7c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	69ba      	ldr	r2, [r7, #24]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d10b      	bne.n	80109ec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80109d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d8:	f383 8811 	msr	BASEPRI, r3
 80109dc:	f3bf 8f6f 	isb	sy
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	60bb      	str	r3, [r7, #8]
}
 80109e6:	bf00      	nop
 80109e8:	bf00      	nop
 80109ea:	e7fd      	b.n	80109e8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80109f2:	69bb      	ldr	r3, [r7, #24]
 80109f4:	69fa      	ldr	r2, [r7, #28]
 80109f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80109f8:	69bb      	ldr	r3, [r7, #24]
 80109fa:	699b      	ldr	r3, [r3, #24]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	db04      	blt.n	8010a0a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	f1c3 0207 	rsb	r2, r3, #7
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	6959      	ldr	r1, [r3, #20]
 8010a0e:	693a      	ldr	r2, [r7, #16]
 8010a10:	4613      	mov	r3, r2
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	4413      	add	r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	4a19      	ldr	r2, [pc, #100]	@ (8010a80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a1a:	4413      	add	r3, r2
 8010a1c:	4299      	cmp	r1, r3
 8010a1e:	d129      	bne.n	8010a74 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a20:	69bb      	ldr	r3, [r7, #24]
 8010a22:	3304      	adds	r3, #4
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fe fa3a 	bl	800ee9e <uxListRemove>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10a      	bne.n	8010a46 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010a30:	69bb      	ldr	r3, [r7, #24]
 8010a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a34:	2201      	movs	r2, #1
 8010a36:	fa02 f303 	lsl.w	r3, r2, r3
 8010a3a:	43da      	mvns	r2, r3
 8010a3c:	4b11      	ldr	r3, [pc, #68]	@ (8010a84 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4013      	ands	r3, r2
 8010a42:	4a10      	ldr	r2, [pc, #64]	@ (8010a84 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010a44:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010a46:	69bb      	ldr	r3, [r7, #24]
 8010a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	409a      	lsls	r2, r3
 8010a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8010a84 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4313      	orrs	r3, r2
 8010a54:	4a0b      	ldr	r2, [pc, #44]	@ (8010a84 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010a56:	6013      	str	r3, [r2, #0]
 8010a58:	69bb      	ldr	r3, [r7, #24]
 8010a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	4413      	add	r3, r2
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4a06      	ldr	r2, [pc, #24]	@ (8010a80 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010a66:	441a      	add	r2, r3
 8010a68:	69bb      	ldr	r3, [r7, #24]
 8010a6a:	3304      	adds	r3, #4
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	4610      	mov	r0, r2
 8010a70:	f7fe f9b8 	bl	800ede4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a74:	bf00      	nop
 8010a76:	3720      	adds	r7, #32
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	20001268 	.word	0x20001268
 8010a80:	2000126c 	.word	0x2000126c
 8010a84:	20001370 	.word	0x20001370

08010a88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010a88:	b480      	push	{r7}
 8010a8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010a8c:	4b07      	ldr	r3, [pc, #28]	@ (8010aac <pvTaskIncrementMutexHeldCount+0x24>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d004      	beq.n	8010a9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010a94:	4b05      	ldr	r3, [pc, #20]	@ (8010aac <pvTaskIncrementMutexHeldCount+0x24>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010a9a:	3201      	adds	r2, #1
 8010a9c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8010a9e:	4b03      	ldr	r3, [pc, #12]	@ (8010aac <pvTaskIncrementMutexHeldCount+0x24>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
	}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr
 8010aac:	20001268 	.word	0x20001268

08010ab0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010aba:	4b29      	ldr	r3, [pc, #164]	@ (8010b60 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ac0:	4b28      	ldr	r3, [pc, #160]	@ (8010b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	3304      	adds	r3, #4
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7fe f9e9 	bl	800ee9e <uxListRemove>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d10b      	bne.n	8010aea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010ad2:	4b24      	ldr	r3, [pc, #144]	@ (8010b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ad8:	2201      	movs	r2, #1
 8010ada:	fa02 f303 	lsl.w	r3, r2, r3
 8010ade:	43da      	mvns	r2, r3
 8010ae0:	4b21      	ldr	r3, [pc, #132]	@ (8010b68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	4013      	ands	r3, r2
 8010ae6:	4a20      	ldr	r2, [pc, #128]	@ (8010b68 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010ae8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010af0:	d10a      	bne.n	8010b08 <prvAddCurrentTaskToDelayedList+0x58>
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d007      	beq.n	8010b08 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010af8:	4b1a      	ldr	r3, [pc, #104]	@ (8010b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	3304      	adds	r3, #4
 8010afe:	4619      	mov	r1, r3
 8010b00:	481a      	ldr	r0, [pc, #104]	@ (8010b6c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010b02:	f7fe f96f 	bl	800ede4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010b06:	e026      	b.n	8010b56 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010b08:	68fa      	ldr	r2, [r7, #12]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010b10:	4b14      	ldr	r3, [pc, #80]	@ (8010b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d209      	bcs.n	8010b34 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b20:	4b13      	ldr	r3, [pc, #76]	@ (8010b70 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	4b0f      	ldr	r3, [pc, #60]	@ (8010b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	3304      	adds	r3, #4
 8010b2a:	4619      	mov	r1, r3
 8010b2c:	4610      	mov	r0, r2
 8010b2e:	f7fe f97d 	bl	800ee2c <vListInsert>
}
 8010b32:	e010      	b.n	8010b56 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010b34:	4b0f      	ldr	r3, [pc, #60]	@ (8010b74 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	4b0a      	ldr	r3, [pc, #40]	@ (8010b64 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	3304      	adds	r3, #4
 8010b3e:	4619      	mov	r1, r3
 8010b40:	4610      	mov	r0, r2
 8010b42:	f7fe f973 	bl	800ee2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010b46:	4b0c      	ldr	r3, [pc, #48]	@ (8010b78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	68ba      	ldr	r2, [r7, #8]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d202      	bcs.n	8010b56 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010b50:	4a09      	ldr	r2, [pc, #36]	@ (8010b78 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	6013      	str	r3, [r2, #0]
}
 8010b56:	bf00      	nop
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	2000136c 	.word	0x2000136c
 8010b64:	20001268 	.word	0x20001268
 8010b68:	20001370 	.word	0x20001370
 8010b6c:	20001354 	.word	0x20001354
 8010b70:	20001324 	.word	0x20001324
 8010b74:	20001320 	.word	0x20001320
 8010b78:	20001388 	.word	0x20001388

08010b7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b085      	sub	sp, #20
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	3b04      	subs	r3, #4
 8010b8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	3b04      	subs	r3, #4
 8010b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	f023 0201 	bic.w	r2, r3, #1
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	3b04      	subs	r3, #4
 8010baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010bac:	4a0c      	ldr	r2, [pc, #48]	@ (8010be0 <pxPortInitialiseStack+0x64>)
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	3b14      	subs	r3, #20
 8010bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	3b04      	subs	r3, #4
 8010bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f06f 0202 	mvn.w	r2, #2
 8010bca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	3b20      	subs	r3, #32
 8010bd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3714      	adds	r7, #20
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr
 8010be0:	08010be5 	.word	0x08010be5

08010be4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010be4:	b480      	push	{r7}
 8010be6:	b085      	sub	sp, #20
 8010be8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010bee:	4b13      	ldr	r3, [pc, #76]	@ (8010c3c <prvTaskExitError+0x58>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf6:	d00b      	beq.n	8010c10 <prvTaskExitError+0x2c>
	__asm volatile
 8010bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bfc:	f383 8811 	msr	BASEPRI, r3
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	60fb      	str	r3, [r7, #12]
}
 8010c0a:	bf00      	nop
 8010c0c:	bf00      	nop
 8010c0e:	e7fd      	b.n	8010c0c <prvTaskExitError+0x28>
	__asm volatile
 8010c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c14:	f383 8811 	msr	BASEPRI, r3
 8010c18:	f3bf 8f6f 	isb	sy
 8010c1c:	f3bf 8f4f 	dsb	sy
 8010c20:	60bb      	str	r3, [r7, #8]
}
 8010c22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c24:	bf00      	nop
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d0fc      	beq.n	8010c26 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c2c:	bf00      	nop
 8010c2e:	bf00      	nop
 8010c30:	3714      	adds	r7, #20
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop
 8010c3c:	2000002c 	.word	0x2000002c

08010c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c40:	4b07      	ldr	r3, [pc, #28]	@ (8010c60 <pxCurrentTCBConst2>)
 8010c42:	6819      	ldr	r1, [r3, #0]
 8010c44:	6808      	ldr	r0, [r1, #0]
 8010c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4a:	f380 8809 	msr	PSP, r0
 8010c4e:	f3bf 8f6f 	isb	sy
 8010c52:	f04f 0000 	mov.w	r0, #0
 8010c56:	f380 8811 	msr	BASEPRI, r0
 8010c5a:	4770      	bx	lr
 8010c5c:	f3af 8000 	nop.w

08010c60 <pxCurrentTCBConst2>:
 8010c60:	20001268 	.word	0x20001268
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c64:	bf00      	nop
 8010c66:	bf00      	nop

08010c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c68:	4808      	ldr	r0, [pc, #32]	@ (8010c8c <prvPortStartFirstTask+0x24>)
 8010c6a:	6800      	ldr	r0, [r0, #0]
 8010c6c:	6800      	ldr	r0, [r0, #0]
 8010c6e:	f380 8808 	msr	MSP, r0
 8010c72:	f04f 0000 	mov.w	r0, #0
 8010c76:	f380 8814 	msr	CONTROL, r0
 8010c7a:	b662      	cpsie	i
 8010c7c:	b661      	cpsie	f
 8010c7e:	f3bf 8f4f 	dsb	sy
 8010c82:	f3bf 8f6f 	isb	sy
 8010c86:	df00      	svc	0
 8010c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010c8a:	bf00      	nop
 8010c8c:	e000ed08 	.word	0xe000ed08

08010c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b086      	sub	sp, #24
 8010c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c96:	4b47      	ldr	r3, [pc, #284]	@ (8010db4 <xPortStartScheduler+0x124>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a47      	ldr	r2, [pc, #284]	@ (8010db8 <xPortStartScheduler+0x128>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d10b      	bne.n	8010cb8 <xPortStartScheduler+0x28>
	__asm volatile
 8010ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ca4:	f383 8811 	msr	BASEPRI, r3
 8010ca8:	f3bf 8f6f 	isb	sy
 8010cac:	f3bf 8f4f 	dsb	sy
 8010cb0:	60fb      	str	r3, [r7, #12]
}
 8010cb2:	bf00      	nop
 8010cb4:	bf00      	nop
 8010cb6:	e7fd      	b.n	8010cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8010db4 <xPortStartScheduler+0x124>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8010dbc <xPortStartScheduler+0x12c>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d10b      	bne.n	8010cda <xPortStartScheduler+0x4a>
	__asm volatile
 8010cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cc6:	f383 8811 	msr	BASEPRI, r3
 8010cca:	f3bf 8f6f 	isb	sy
 8010cce:	f3bf 8f4f 	dsb	sy
 8010cd2:	613b      	str	r3, [r7, #16]
}
 8010cd4:	bf00      	nop
 8010cd6:	bf00      	nop
 8010cd8:	e7fd      	b.n	8010cd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010cda:	4b39      	ldr	r3, [pc, #228]	@ (8010dc0 <xPortStartScheduler+0x130>)
 8010cdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	b2db      	uxtb	r3, r3
 8010ce4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	22ff      	movs	r2, #255	@ 0xff
 8010cea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010cf4:	78fb      	ldrb	r3, [r7, #3]
 8010cf6:	b2db      	uxtb	r3, r3
 8010cf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010cfc:	b2da      	uxtb	r2, r3
 8010cfe:	4b31      	ldr	r3, [pc, #196]	@ (8010dc4 <xPortStartScheduler+0x134>)
 8010d00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010d02:	4b31      	ldr	r3, [pc, #196]	@ (8010dc8 <xPortStartScheduler+0x138>)
 8010d04:	2207      	movs	r2, #7
 8010d06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d08:	e009      	b.n	8010d1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8010d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8010dc8 <xPortStartScheduler+0x138>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	3b01      	subs	r3, #1
 8010d10:	4a2d      	ldr	r2, [pc, #180]	@ (8010dc8 <xPortStartScheduler+0x138>)
 8010d12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010d14:	78fb      	ldrb	r3, [r7, #3]
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	005b      	lsls	r3, r3, #1
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d1e:	78fb      	ldrb	r3, [r7, #3]
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d26:	2b80      	cmp	r3, #128	@ 0x80
 8010d28:	d0ef      	beq.n	8010d0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d2a:	4b27      	ldr	r3, [pc, #156]	@ (8010dc8 <xPortStartScheduler+0x138>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f1c3 0307 	rsb	r3, r3, #7
 8010d32:	2b04      	cmp	r3, #4
 8010d34:	d00b      	beq.n	8010d4e <xPortStartScheduler+0xbe>
	__asm volatile
 8010d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d3a:	f383 8811 	msr	BASEPRI, r3
 8010d3e:	f3bf 8f6f 	isb	sy
 8010d42:	f3bf 8f4f 	dsb	sy
 8010d46:	60bb      	str	r3, [r7, #8]
}
 8010d48:	bf00      	nop
 8010d4a:	bf00      	nop
 8010d4c:	e7fd      	b.n	8010d4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8010dc8 <xPortStartScheduler+0x138>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	021b      	lsls	r3, r3, #8
 8010d54:	4a1c      	ldr	r2, [pc, #112]	@ (8010dc8 <xPortStartScheduler+0x138>)
 8010d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d58:	4b1b      	ldr	r3, [pc, #108]	@ (8010dc8 <xPortStartScheduler+0x138>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010d60:	4a19      	ldr	r2, [pc, #100]	@ (8010dc8 <xPortStartScheduler+0x138>)
 8010d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	b2da      	uxtb	r2, r3
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d6c:	4b17      	ldr	r3, [pc, #92]	@ (8010dcc <xPortStartScheduler+0x13c>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a16      	ldr	r2, [pc, #88]	@ (8010dcc <xPortStartScheduler+0x13c>)
 8010d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d78:	4b14      	ldr	r3, [pc, #80]	@ (8010dcc <xPortStartScheduler+0x13c>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	4a13      	ldr	r2, [pc, #76]	@ (8010dcc <xPortStartScheduler+0x13c>)
 8010d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d84:	f000 f8da 	bl	8010f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d88:	4b11      	ldr	r3, [pc, #68]	@ (8010dd0 <xPortStartScheduler+0x140>)
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d8e:	f000 f8f9 	bl	8010f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d92:	4b10      	ldr	r3, [pc, #64]	@ (8010dd4 <xPortStartScheduler+0x144>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	4a0f      	ldr	r2, [pc, #60]	@ (8010dd4 <xPortStartScheduler+0x144>)
 8010d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d9e:	f7ff ff63 	bl	8010c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010da2:	f7ff fa95 	bl	80102d0 <vTaskSwitchContext>
	prvTaskExitError();
 8010da6:	f7ff ff1d 	bl	8010be4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010daa:	2300      	movs	r3, #0
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3718      	adds	r7, #24
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	e000ed00 	.word	0xe000ed00
 8010db8:	410fc271 	.word	0x410fc271
 8010dbc:	410fc270 	.word	0x410fc270
 8010dc0:	e000e400 	.word	0xe000e400
 8010dc4:	20001394 	.word	0x20001394
 8010dc8:	20001398 	.word	0x20001398
 8010dcc:	e000ed20 	.word	0xe000ed20
 8010dd0:	2000002c 	.word	0x2000002c
 8010dd4:	e000ef34 	.word	0xe000ef34

08010dd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010dd8:	b480      	push	{r7}
 8010dda:	b083      	sub	sp, #12
 8010ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8010dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010de2:	f383 8811 	msr	BASEPRI, r3
 8010de6:	f3bf 8f6f 	isb	sy
 8010dea:	f3bf 8f4f 	dsb	sy
 8010dee:	607b      	str	r3, [r7, #4]
}
 8010df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010df2:	4b10      	ldr	r3, [pc, #64]	@ (8010e34 <vPortEnterCritical+0x5c>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	3301      	adds	r3, #1
 8010df8:	4a0e      	ldr	r2, [pc, #56]	@ (8010e34 <vPortEnterCritical+0x5c>)
 8010dfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8010e34 <vPortEnterCritical+0x5c>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d110      	bne.n	8010e26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010e04:	4b0c      	ldr	r3, [pc, #48]	@ (8010e38 <vPortEnterCritical+0x60>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00b      	beq.n	8010e26 <vPortEnterCritical+0x4e>
	__asm volatile
 8010e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e12:	f383 8811 	msr	BASEPRI, r3
 8010e16:	f3bf 8f6f 	isb	sy
 8010e1a:	f3bf 8f4f 	dsb	sy
 8010e1e:	603b      	str	r3, [r7, #0]
}
 8010e20:	bf00      	nop
 8010e22:	bf00      	nop
 8010e24:	e7fd      	b.n	8010e22 <vPortEnterCritical+0x4a>
	}
}
 8010e26:	bf00      	nop
 8010e28:	370c      	adds	r7, #12
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop
 8010e34:	2000002c 	.word	0x2000002c
 8010e38:	e000ed04 	.word	0xe000ed04

08010e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	b083      	sub	sp, #12
 8010e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e42:	4b12      	ldr	r3, [pc, #72]	@ (8010e8c <vPortExitCritical+0x50>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d10b      	bne.n	8010e62 <vPortExitCritical+0x26>
	__asm volatile
 8010e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e4e:	f383 8811 	msr	BASEPRI, r3
 8010e52:	f3bf 8f6f 	isb	sy
 8010e56:	f3bf 8f4f 	dsb	sy
 8010e5a:	607b      	str	r3, [r7, #4]
}
 8010e5c:	bf00      	nop
 8010e5e:	bf00      	nop
 8010e60:	e7fd      	b.n	8010e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e62:	4b0a      	ldr	r3, [pc, #40]	@ (8010e8c <vPortExitCritical+0x50>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	3b01      	subs	r3, #1
 8010e68:	4a08      	ldr	r2, [pc, #32]	@ (8010e8c <vPortExitCritical+0x50>)
 8010e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e6c:	4b07      	ldr	r3, [pc, #28]	@ (8010e8c <vPortExitCritical+0x50>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d105      	bne.n	8010e80 <vPortExitCritical+0x44>
 8010e74:	2300      	movs	r3, #0
 8010e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	f383 8811 	msr	BASEPRI, r3
}
 8010e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr
 8010e8c:	2000002c 	.word	0x2000002c

08010e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e90:	f3ef 8009 	mrs	r0, PSP
 8010e94:	f3bf 8f6f 	isb	sy
 8010e98:	4b15      	ldr	r3, [pc, #84]	@ (8010ef0 <pxCurrentTCBConst>)
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	f01e 0f10 	tst.w	lr, #16
 8010ea0:	bf08      	it	eq
 8010ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eaa:	6010      	str	r0, [r2, #0]
 8010eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010eb4:	f380 8811 	msr	BASEPRI, r0
 8010eb8:	f3bf 8f4f 	dsb	sy
 8010ebc:	f3bf 8f6f 	isb	sy
 8010ec0:	f7ff fa06 	bl	80102d0 <vTaskSwitchContext>
 8010ec4:	f04f 0000 	mov.w	r0, #0
 8010ec8:	f380 8811 	msr	BASEPRI, r0
 8010ecc:	bc09      	pop	{r0, r3}
 8010ece:	6819      	ldr	r1, [r3, #0]
 8010ed0:	6808      	ldr	r0, [r1, #0]
 8010ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed6:	f01e 0f10 	tst.w	lr, #16
 8010eda:	bf08      	it	eq
 8010edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010ee0:	f380 8809 	msr	PSP, r0
 8010ee4:	f3bf 8f6f 	isb	sy
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop
 8010eec:	f3af 8000 	nop.w

08010ef0 <pxCurrentTCBConst>:
 8010ef0:	20001268 	.word	0x20001268
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ef4:	bf00      	nop
 8010ef6:	bf00      	nop

08010ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	607b      	str	r3, [r7, #4]
}
 8010f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010f12:	f7ff f923 	bl	801015c <xTaskIncrementTick>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d003      	beq.n	8010f24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f1c:	4b06      	ldr	r3, [pc, #24]	@ (8010f38 <SysTick_Handler+0x40>)
 8010f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f22:	601a      	str	r2, [r3, #0]
 8010f24:	2300      	movs	r3, #0
 8010f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	f383 8811 	msr	BASEPRI, r3
}
 8010f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	e000ed04 	.word	0xe000ed04

08010f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f40:	4b0b      	ldr	r3, [pc, #44]	@ (8010f70 <vPortSetupTimerInterrupt+0x34>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f46:	4b0b      	ldr	r3, [pc, #44]	@ (8010f74 <vPortSetupTimerInterrupt+0x38>)
 8010f48:	2200      	movs	r2, #0
 8010f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f78 <vPortSetupTimerInterrupt+0x3c>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4a0a      	ldr	r2, [pc, #40]	@ (8010f7c <vPortSetupTimerInterrupt+0x40>)
 8010f52:	fba2 2303 	umull	r2, r3, r2, r3
 8010f56:	099b      	lsrs	r3, r3, #6
 8010f58:	4a09      	ldr	r2, [pc, #36]	@ (8010f80 <vPortSetupTimerInterrupt+0x44>)
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f5e:	4b04      	ldr	r3, [pc, #16]	@ (8010f70 <vPortSetupTimerInterrupt+0x34>)
 8010f60:	2207      	movs	r2, #7
 8010f62:	601a      	str	r2, [r3, #0]
}
 8010f64:	bf00      	nop
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr
 8010f6e:	bf00      	nop
 8010f70:	e000e010 	.word	0xe000e010
 8010f74:	e000e018 	.word	0xe000e018
 8010f78:	20000008 	.word	0x20000008
 8010f7c:	10624dd3 	.word	0x10624dd3
 8010f80:	e000e014 	.word	0xe000e014

08010f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010f94 <vPortEnableVFP+0x10>
 8010f88:	6801      	ldr	r1, [r0, #0]
 8010f8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010f8e:	6001      	str	r1, [r0, #0]
 8010f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f92:	bf00      	nop
 8010f94:	e000ed88 	.word	0xe000ed88

08010f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f9e:	f3ef 8305 	mrs	r3, IPSR
 8010fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2b0f      	cmp	r3, #15
 8010fa8:	d915      	bls.n	8010fd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010faa:	4a18      	ldr	r2, [pc, #96]	@ (801100c <vPortValidateInterruptPriority+0x74>)
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	4413      	add	r3, r2
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010fb4:	4b16      	ldr	r3, [pc, #88]	@ (8011010 <vPortValidateInterruptPriority+0x78>)
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	7afa      	ldrb	r2, [r7, #11]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d20b      	bcs.n	8010fd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fc2:	f383 8811 	msr	BASEPRI, r3
 8010fc6:	f3bf 8f6f 	isb	sy
 8010fca:	f3bf 8f4f 	dsb	sy
 8010fce:	607b      	str	r3, [r7, #4]
}
 8010fd0:	bf00      	nop
 8010fd2:	bf00      	nop
 8010fd4:	e7fd      	b.n	8010fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8011014 <vPortValidateInterruptPriority+0x7c>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010fde:	4b0e      	ldr	r3, [pc, #56]	@ (8011018 <vPortValidateInterruptPriority+0x80>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d90b      	bls.n	8010ffe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fea:	f383 8811 	msr	BASEPRI, r3
 8010fee:	f3bf 8f6f 	isb	sy
 8010ff2:	f3bf 8f4f 	dsb	sy
 8010ff6:	603b      	str	r3, [r7, #0]
}
 8010ff8:	bf00      	nop
 8010ffa:	bf00      	nop
 8010ffc:	e7fd      	b.n	8010ffa <vPortValidateInterruptPriority+0x62>
	}
 8010ffe:	bf00      	nop
 8011000:	3714      	adds	r7, #20
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	e000e3f0 	.word	0xe000e3f0
 8011010:	20001394 	.word	0x20001394
 8011014:	e000ed0c 	.word	0xe000ed0c
 8011018:	20001398 	.word	0x20001398

0801101c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b08a      	sub	sp, #40	@ 0x28
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011024:	2300      	movs	r3, #0
 8011026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011028:	f7fe ffdc 	bl	800ffe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801102c:	4b5c      	ldr	r3, [pc, #368]	@ (80111a0 <pvPortMalloc+0x184>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d101      	bne.n	8011038 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011034:	f000 f924 	bl	8011280 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011038:	4b5a      	ldr	r3, [pc, #360]	@ (80111a4 <pvPortMalloc+0x188>)
 801103a:	681a      	ldr	r2, [r3, #0]
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	4013      	ands	r3, r2
 8011040:	2b00      	cmp	r3, #0
 8011042:	f040 8095 	bne.w	8011170 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d01e      	beq.n	801108a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801104c:	2208      	movs	r2, #8
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4413      	add	r3, r2
 8011052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f003 0307 	and.w	r3, r3, #7
 801105a:	2b00      	cmp	r3, #0
 801105c:	d015      	beq.n	801108a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f023 0307 	bic.w	r3, r3, #7
 8011064:	3308      	adds	r3, #8
 8011066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f003 0307 	and.w	r3, r3, #7
 801106e:	2b00      	cmp	r3, #0
 8011070:	d00b      	beq.n	801108a <pvPortMalloc+0x6e>
	__asm volatile
 8011072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011076:	f383 8811 	msr	BASEPRI, r3
 801107a:	f3bf 8f6f 	isb	sy
 801107e:	f3bf 8f4f 	dsb	sy
 8011082:	617b      	str	r3, [r7, #20]
}
 8011084:	bf00      	nop
 8011086:	bf00      	nop
 8011088:	e7fd      	b.n	8011086 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d06f      	beq.n	8011170 <pvPortMalloc+0x154>
 8011090:	4b45      	ldr	r3, [pc, #276]	@ (80111a8 <pvPortMalloc+0x18c>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	429a      	cmp	r2, r3
 8011098:	d86a      	bhi.n	8011170 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801109a:	4b44      	ldr	r3, [pc, #272]	@ (80111ac <pvPortMalloc+0x190>)
 801109c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801109e:	4b43      	ldr	r3, [pc, #268]	@ (80111ac <pvPortMalloc+0x190>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110a4:	e004      	b.n	80110b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80110a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80110aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	687a      	ldr	r2, [r7, #4]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d903      	bls.n	80110c2 <pvPortMalloc+0xa6>
 80110ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d1f1      	bne.n	80110a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80110c2:	4b37      	ldr	r3, [pc, #220]	@ (80111a0 <pvPortMalloc+0x184>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d051      	beq.n	8011170 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80110cc:	6a3b      	ldr	r3, [r7, #32]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	2208      	movs	r2, #8
 80110d2:	4413      	add	r3, r2
 80110d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80110d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	6a3b      	ldr	r3, [r7, #32]
 80110dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80110de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e0:	685a      	ldr	r2, [r3, #4]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	1ad2      	subs	r2, r2, r3
 80110e6:	2308      	movs	r3, #8
 80110e8:	005b      	lsls	r3, r3, #1
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d920      	bls.n	8011130 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80110ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	4413      	add	r3, r2
 80110f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	f003 0307 	and.w	r3, r3, #7
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00b      	beq.n	8011118 <pvPortMalloc+0xfc>
	__asm volatile
 8011100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011104:	f383 8811 	msr	BASEPRI, r3
 8011108:	f3bf 8f6f 	isb	sy
 801110c:	f3bf 8f4f 	dsb	sy
 8011110:	613b      	str	r3, [r7, #16]
}
 8011112:	bf00      	nop
 8011114:	bf00      	nop
 8011116:	e7fd      	b.n	8011114 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801111a:	685a      	ldr	r2, [r3, #4]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	1ad2      	subs	r2, r2, r3
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801112a:	69b8      	ldr	r0, [r7, #24]
 801112c:	f000 f90a 	bl	8011344 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011130:	4b1d      	ldr	r3, [pc, #116]	@ (80111a8 <pvPortMalloc+0x18c>)
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011136:	685b      	ldr	r3, [r3, #4]
 8011138:	1ad3      	subs	r3, r2, r3
 801113a:	4a1b      	ldr	r2, [pc, #108]	@ (80111a8 <pvPortMalloc+0x18c>)
 801113c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801113e:	4b1a      	ldr	r3, [pc, #104]	@ (80111a8 <pvPortMalloc+0x18c>)
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	4b1b      	ldr	r3, [pc, #108]	@ (80111b0 <pvPortMalloc+0x194>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	429a      	cmp	r2, r3
 8011148:	d203      	bcs.n	8011152 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801114a:	4b17      	ldr	r3, [pc, #92]	@ (80111a8 <pvPortMalloc+0x18c>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	4a18      	ldr	r2, [pc, #96]	@ (80111b0 <pvPortMalloc+0x194>)
 8011150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011154:	685a      	ldr	r2, [r3, #4]
 8011156:	4b13      	ldr	r3, [pc, #76]	@ (80111a4 <pvPortMalloc+0x188>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	431a      	orrs	r2, r3
 801115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801115e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011162:	2200      	movs	r2, #0
 8011164:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011166:	4b13      	ldr	r3, [pc, #76]	@ (80111b4 <pvPortMalloc+0x198>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	3301      	adds	r3, #1
 801116c:	4a11      	ldr	r2, [pc, #68]	@ (80111b4 <pvPortMalloc+0x198>)
 801116e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011170:	f7fe ff46 	bl	8010000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	f003 0307 	and.w	r3, r3, #7
 801117a:	2b00      	cmp	r3, #0
 801117c:	d00b      	beq.n	8011196 <pvPortMalloc+0x17a>
	__asm volatile
 801117e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011182:	f383 8811 	msr	BASEPRI, r3
 8011186:	f3bf 8f6f 	isb	sy
 801118a:	f3bf 8f4f 	dsb	sy
 801118e:	60fb      	str	r3, [r7, #12]
}
 8011190:	bf00      	nop
 8011192:	bf00      	nop
 8011194:	e7fd      	b.n	8011192 <pvPortMalloc+0x176>
	return pvReturn;
 8011196:	69fb      	ldr	r3, [r7, #28]
}
 8011198:	4618      	mov	r0, r3
 801119a:	3728      	adds	r7, #40	@ 0x28
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	20004284 	.word	0x20004284
 80111a4:	20004298 	.word	0x20004298
 80111a8:	20004288 	.word	0x20004288
 80111ac:	2000427c 	.word	0x2000427c
 80111b0:	2000428c 	.word	0x2000428c
 80111b4:	20004290 	.word	0x20004290

080111b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d04f      	beq.n	801126a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80111ca:	2308      	movs	r3, #8
 80111cc:	425b      	negs	r3, r3
 80111ce:	697a      	ldr	r2, [r7, #20]
 80111d0:	4413      	add	r3, r2
 80111d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	685a      	ldr	r2, [r3, #4]
 80111dc:	4b25      	ldr	r3, [pc, #148]	@ (8011274 <vPortFree+0xbc>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4013      	ands	r3, r2
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d10b      	bne.n	80111fe <vPortFree+0x46>
	__asm volatile
 80111e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111ea:	f383 8811 	msr	BASEPRI, r3
 80111ee:	f3bf 8f6f 	isb	sy
 80111f2:	f3bf 8f4f 	dsb	sy
 80111f6:	60fb      	str	r3, [r7, #12]
}
 80111f8:	bf00      	nop
 80111fa:	bf00      	nop
 80111fc:	e7fd      	b.n	80111fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d00b      	beq.n	801121e <vPortFree+0x66>
	__asm volatile
 8011206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801120a:	f383 8811 	msr	BASEPRI, r3
 801120e:	f3bf 8f6f 	isb	sy
 8011212:	f3bf 8f4f 	dsb	sy
 8011216:	60bb      	str	r3, [r7, #8]
}
 8011218:	bf00      	nop
 801121a:	bf00      	nop
 801121c:	e7fd      	b.n	801121a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801121e:	693b      	ldr	r3, [r7, #16]
 8011220:	685a      	ldr	r2, [r3, #4]
 8011222:	4b14      	ldr	r3, [pc, #80]	@ (8011274 <vPortFree+0xbc>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	4013      	ands	r3, r2
 8011228:	2b00      	cmp	r3, #0
 801122a:	d01e      	beq.n	801126a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d11a      	bne.n	801126a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	685a      	ldr	r2, [r3, #4]
 8011238:	4b0e      	ldr	r3, [pc, #56]	@ (8011274 <vPortFree+0xbc>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	43db      	mvns	r3, r3
 801123e:	401a      	ands	r2, r3
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011244:	f7fe fece 	bl	800ffe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	685a      	ldr	r2, [r3, #4]
 801124c:	4b0a      	ldr	r3, [pc, #40]	@ (8011278 <vPortFree+0xc0>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	4413      	add	r3, r2
 8011252:	4a09      	ldr	r2, [pc, #36]	@ (8011278 <vPortFree+0xc0>)
 8011254:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011256:	6938      	ldr	r0, [r7, #16]
 8011258:	f000 f874 	bl	8011344 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801125c:	4b07      	ldr	r3, [pc, #28]	@ (801127c <vPortFree+0xc4>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	3301      	adds	r3, #1
 8011262:	4a06      	ldr	r2, [pc, #24]	@ (801127c <vPortFree+0xc4>)
 8011264:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011266:	f7fe fecb 	bl	8010000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801126a:	bf00      	nop
 801126c:	3718      	adds	r7, #24
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
 8011272:	bf00      	nop
 8011274:	20004298 	.word	0x20004298
 8011278:	20004288 	.word	0x20004288
 801127c:	20004294 	.word	0x20004294

08011280 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011286:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 801128a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801128c:	4b27      	ldr	r3, [pc, #156]	@ (801132c <prvHeapInit+0xac>)
 801128e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	f003 0307 	and.w	r3, r3, #7
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00c      	beq.n	80112b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	3307      	adds	r3, #7
 801129e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f023 0307 	bic.w	r3, r3, #7
 80112a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	4a1f      	ldr	r2, [pc, #124]	@ (801132c <prvHeapInit+0xac>)
 80112b0:	4413      	add	r3, r2
 80112b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80112b8:	4a1d      	ldr	r2, [pc, #116]	@ (8011330 <prvHeapInit+0xb0>)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80112be:	4b1c      	ldr	r3, [pc, #112]	@ (8011330 <prvHeapInit+0xb0>)
 80112c0:	2200      	movs	r2, #0
 80112c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	68ba      	ldr	r2, [r7, #8]
 80112c8:	4413      	add	r3, r2
 80112ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80112cc:	2208      	movs	r2, #8
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	1a9b      	subs	r3, r3, r2
 80112d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f023 0307 	bic.w	r3, r3, #7
 80112da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	4a15      	ldr	r2, [pc, #84]	@ (8011334 <prvHeapInit+0xb4>)
 80112e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80112e2:	4b14      	ldr	r3, [pc, #80]	@ (8011334 <prvHeapInit+0xb4>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2200      	movs	r2, #0
 80112e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80112ea:	4b12      	ldr	r3, [pc, #72]	@ (8011334 <prvHeapInit+0xb4>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2200      	movs	r2, #0
 80112f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	68fa      	ldr	r2, [r7, #12]
 80112fa:	1ad2      	subs	r2, r2, r3
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011300:	4b0c      	ldr	r3, [pc, #48]	@ (8011334 <prvHeapInit+0xb4>)
 8011302:	681a      	ldr	r2, [r3, #0]
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	685b      	ldr	r3, [r3, #4]
 801130c:	4a0a      	ldr	r2, [pc, #40]	@ (8011338 <prvHeapInit+0xb8>)
 801130e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	4a09      	ldr	r2, [pc, #36]	@ (801133c <prvHeapInit+0xbc>)
 8011316:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011318:	4b09      	ldr	r3, [pc, #36]	@ (8011340 <prvHeapInit+0xc0>)
 801131a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801131e:	601a      	str	r2, [r3, #0]
}
 8011320:	bf00      	nop
 8011322:	3714      	adds	r7, #20
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr
 801132c:	2000139c 	.word	0x2000139c
 8011330:	2000427c 	.word	0x2000427c
 8011334:	20004284 	.word	0x20004284
 8011338:	2000428c 	.word	0x2000428c
 801133c:	20004288 	.word	0x20004288
 8011340:	20004298 	.word	0x20004298

08011344 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801134c:	4b28      	ldr	r3, [pc, #160]	@ (80113f0 <prvInsertBlockIntoFreeList+0xac>)
 801134e:	60fb      	str	r3, [r7, #12]
 8011350:	e002      	b.n	8011358 <prvInsertBlockIntoFreeList+0x14>
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	60fb      	str	r3, [r7, #12]
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	429a      	cmp	r2, r3
 8011360:	d8f7      	bhi.n	8011352 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	4413      	add	r3, r2
 801136e:	687a      	ldr	r2, [r7, #4]
 8011370:	429a      	cmp	r2, r3
 8011372:	d108      	bne.n	8011386 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	441a      	add	r2, r3
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	68ba      	ldr	r2, [r7, #8]
 8011390:	441a      	add	r2, r3
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	429a      	cmp	r2, r3
 8011398:	d118      	bne.n	80113cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681a      	ldr	r2, [r3, #0]
 801139e:	4b15      	ldr	r3, [pc, #84]	@ (80113f4 <prvInsertBlockIntoFreeList+0xb0>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d00d      	beq.n	80113c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	685a      	ldr	r2, [r3, #4]
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	441a      	add	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	601a      	str	r2, [r3, #0]
 80113c0:	e008      	b.n	80113d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80113c2:	4b0c      	ldr	r3, [pc, #48]	@ (80113f4 <prvInsertBlockIntoFreeList+0xb0>)
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	601a      	str	r2, [r3, #0]
 80113ca:	e003      	b.n	80113d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80113d4:	68fa      	ldr	r2, [r7, #12]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d002      	beq.n	80113e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113e2:	bf00      	nop
 80113e4:	3714      	adds	r7, #20
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr
 80113ee:	bf00      	nop
 80113f0:	2000427c 	.word	0x2000427c
 80113f4:	20004284 	.word	0x20004284

080113f8 <__cvt>:
 80113f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113fc:	ec57 6b10 	vmov	r6, r7, d0
 8011400:	2f00      	cmp	r7, #0
 8011402:	460c      	mov	r4, r1
 8011404:	4619      	mov	r1, r3
 8011406:	463b      	mov	r3, r7
 8011408:	bfbb      	ittet	lt
 801140a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801140e:	461f      	movlt	r7, r3
 8011410:	2300      	movge	r3, #0
 8011412:	232d      	movlt	r3, #45	@ 0x2d
 8011414:	700b      	strb	r3, [r1, #0]
 8011416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011418:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801141c:	4691      	mov	r9, r2
 801141e:	f023 0820 	bic.w	r8, r3, #32
 8011422:	bfbc      	itt	lt
 8011424:	4632      	movlt	r2, r6
 8011426:	4616      	movlt	r6, r2
 8011428:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801142c:	d005      	beq.n	801143a <__cvt+0x42>
 801142e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011432:	d100      	bne.n	8011436 <__cvt+0x3e>
 8011434:	3401      	adds	r4, #1
 8011436:	2102      	movs	r1, #2
 8011438:	e000      	b.n	801143c <__cvt+0x44>
 801143a:	2103      	movs	r1, #3
 801143c:	ab03      	add	r3, sp, #12
 801143e:	9301      	str	r3, [sp, #4]
 8011440:	ab02      	add	r3, sp, #8
 8011442:	9300      	str	r3, [sp, #0]
 8011444:	ec47 6b10 	vmov	d0, r6, r7
 8011448:	4653      	mov	r3, sl
 801144a:	4622      	mov	r2, r4
 801144c:	f001 f910 	bl	8012670 <_dtoa_r>
 8011450:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011454:	4605      	mov	r5, r0
 8011456:	d119      	bne.n	801148c <__cvt+0x94>
 8011458:	f019 0f01 	tst.w	r9, #1
 801145c:	d00e      	beq.n	801147c <__cvt+0x84>
 801145e:	eb00 0904 	add.w	r9, r0, r4
 8011462:	2200      	movs	r2, #0
 8011464:	2300      	movs	r3, #0
 8011466:	4630      	mov	r0, r6
 8011468:	4639      	mov	r1, r7
 801146a:	f7ef fb55 	bl	8000b18 <__aeabi_dcmpeq>
 801146e:	b108      	cbz	r0, 8011474 <__cvt+0x7c>
 8011470:	f8cd 900c 	str.w	r9, [sp, #12]
 8011474:	2230      	movs	r2, #48	@ 0x30
 8011476:	9b03      	ldr	r3, [sp, #12]
 8011478:	454b      	cmp	r3, r9
 801147a:	d31e      	bcc.n	80114ba <__cvt+0xc2>
 801147c:	9b03      	ldr	r3, [sp, #12]
 801147e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011480:	1b5b      	subs	r3, r3, r5
 8011482:	4628      	mov	r0, r5
 8011484:	6013      	str	r3, [r2, #0]
 8011486:	b004      	add	sp, #16
 8011488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801148c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011490:	eb00 0904 	add.w	r9, r0, r4
 8011494:	d1e5      	bne.n	8011462 <__cvt+0x6a>
 8011496:	7803      	ldrb	r3, [r0, #0]
 8011498:	2b30      	cmp	r3, #48	@ 0x30
 801149a:	d10a      	bne.n	80114b2 <__cvt+0xba>
 801149c:	2200      	movs	r2, #0
 801149e:	2300      	movs	r3, #0
 80114a0:	4630      	mov	r0, r6
 80114a2:	4639      	mov	r1, r7
 80114a4:	f7ef fb38 	bl	8000b18 <__aeabi_dcmpeq>
 80114a8:	b918      	cbnz	r0, 80114b2 <__cvt+0xba>
 80114aa:	f1c4 0401 	rsb	r4, r4, #1
 80114ae:	f8ca 4000 	str.w	r4, [sl]
 80114b2:	f8da 3000 	ldr.w	r3, [sl]
 80114b6:	4499      	add	r9, r3
 80114b8:	e7d3      	b.n	8011462 <__cvt+0x6a>
 80114ba:	1c59      	adds	r1, r3, #1
 80114bc:	9103      	str	r1, [sp, #12]
 80114be:	701a      	strb	r2, [r3, #0]
 80114c0:	e7d9      	b.n	8011476 <__cvt+0x7e>

080114c2 <__exponent>:
 80114c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114c4:	2900      	cmp	r1, #0
 80114c6:	bfba      	itte	lt
 80114c8:	4249      	neglt	r1, r1
 80114ca:	232d      	movlt	r3, #45	@ 0x2d
 80114cc:	232b      	movge	r3, #43	@ 0x2b
 80114ce:	2909      	cmp	r1, #9
 80114d0:	7002      	strb	r2, [r0, #0]
 80114d2:	7043      	strb	r3, [r0, #1]
 80114d4:	dd29      	ble.n	801152a <__exponent+0x68>
 80114d6:	f10d 0307 	add.w	r3, sp, #7
 80114da:	461d      	mov	r5, r3
 80114dc:	270a      	movs	r7, #10
 80114de:	461a      	mov	r2, r3
 80114e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80114e4:	fb07 1416 	mls	r4, r7, r6, r1
 80114e8:	3430      	adds	r4, #48	@ 0x30
 80114ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80114ee:	460c      	mov	r4, r1
 80114f0:	2c63      	cmp	r4, #99	@ 0x63
 80114f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80114f6:	4631      	mov	r1, r6
 80114f8:	dcf1      	bgt.n	80114de <__exponent+0x1c>
 80114fa:	3130      	adds	r1, #48	@ 0x30
 80114fc:	1e94      	subs	r4, r2, #2
 80114fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011502:	1c41      	adds	r1, r0, #1
 8011504:	4623      	mov	r3, r4
 8011506:	42ab      	cmp	r3, r5
 8011508:	d30a      	bcc.n	8011520 <__exponent+0x5e>
 801150a:	f10d 0309 	add.w	r3, sp, #9
 801150e:	1a9b      	subs	r3, r3, r2
 8011510:	42ac      	cmp	r4, r5
 8011512:	bf88      	it	hi
 8011514:	2300      	movhi	r3, #0
 8011516:	3302      	adds	r3, #2
 8011518:	4403      	add	r3, r0
 801151a:	1a18      	subs	r0, r3, r0
 801151c:	b003      	add	sp, #12
 801151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011520:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011524:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011528:	e7ed      	b.n	8011506 <__exponent+0x44>
 801152a:	2330      	movs	r3, #48	@ 0x30
 801152c:	3130      	adds	r1, #48	@ 0x30
 801152e:	7083      	strb	r3, [r0, #2]
 8011530:	70c1      	strb	r1, [r0, #3]
 8011532:	1d03      	adds	r3, r0, #4
 8011534:	e7f1      	b.n	801151a <__exponent+0x58>
	...

08011538 <_printf_float>:
 8011538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801153c:	b08d      	sub	sp, #52	@ 0x34
 801153e:	460c      	mov	r4, r1
 8011540:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011544:	4616      	mov	r6, r2
 8011546:	461f      	mov	r7, r3
 8011548:	4605      	mov	r5, r0
 801154a:	f000 ff1f 	bl	801238c <_localeconv_r>
 801154e:	6803      	ldr	r3, [r0, #0]
 8011550:	9304      	str	r3, [sp, #16]
 8011552:	4618      	mov	r0, r3
 8011554:	f7ee feb4 	bl	80002c0 <strlen>
 8011558:	2300      	movs	r3, #0
 801155a:	930a      	str	r3, [sp, #40]	@ 0x28
 801155c:	f8d8 3000 	ldr.w	r3, [r8]
 8011560:	9005      	str	r0, [sp, #20]
 8011562:	3307      	adds	r3, #7
 8011564:	f023 0307 	bic.w	r3, r3, #7
 8011568:	f103 0208 	add.w	r2, r3, #8
 801156c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011570:	f8d4 b000 	ldr.w	fp, [r4]
 8011574:	f8c8 2000 	str.w	r2, [r8]
 8011578:	e9d3 8900 	ldrd	r8, r9, [r3]
 801157c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011580:	9307      	str	r3, [sp, #28]
 8011582:	f8cd 8018 	str.w	r8, [sp, #24]
 8011586:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801158a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801158e:	4b9c      	ldr	r3, [pc, #624]	@ (8011800 <_printf_float+0x2c8>)
 8011590:	f04f 32ff 	mov.w	r2, #4294967295
 8011594:	f7ef faf2 	bl	8000b7c <__aeabi_dcmpun>
 8011598:	bb70      	cbnz	r0, 80115f8 <_printf_float+0xc0>
 801159a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801159e:	4b98      	ldr	r3, [pc, #608]	@ (8011800 <_printf_float+0x2c8>)
 80115a0:	f04f 32ff 	mov.w	r2, #4294967295
 80115a4:	f7ef facc 	bl	8000b40 <__aeabi_dcmple>
 80115a8:	bb30      	cbnz	r0, 80115f8 <_printf_float+0xc0>
 80115aa:	2200      	movs	r2, #0
 80115ac:	2300      	movs	r3, #0
 80115ae:	4640      	mov	r0, r8
 80115b0:	4649      	mov	r1, r9
 80115b2:	f7ef fabb 	bl	8000b2c <__aeabi_dcmplt>
 80115b6:	b110      	cbz	r0, 80115be <_printf_float+0x86>
 80115b8:	232d      	movs	r3, #45	@ 0x2d
 80115ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80115be:	4a91      	ldr	r2, [pc, #580]	@ (8011804 <_printf_float+0x2cc>)
 80115c0:	4b91      	ldr	r3, [pc, #580]	@ (8011808 <_printf_float+0x2d0>)
 80115c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80115c6:	bf8c      	ite	hi
 80115c8:	4690      	movhi	r8, r2
 80115ca:	4698      	movls	r8, r3
 80115cc:	2303      	movs	r3, #3
 80115ce:	6123      	str	r3, [r4, #16]
 80115d0:	f02b 0304 	bic.w	r3, fp, #4
 80115d4:	6023      	str	r3, [r4, #0]
 80115d6:	f04f 0900 	mov.w	r9, #0
 80115da:	9700      	str	r7, [sp, #0]
 80115dc:	4633      	mov	r3, r6
 80115de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80115e0:	4621      	mov	r1, r4
 80115e2:	4628      	mov	r0, r5
 80115e4:	f000 f9d2 	bl	801198c <_printf_common>
 80115e8:	3001      	adds	r0, #1
 80115ea:	f040 808d 	bne.w	8011708 <_printf_float+0x1d0>
 80115ee:	f04f 30ff 	mov.w	r0, #4294967295
 80115f2:	b00d      	add	sp, #52	@ 0x34
 80115f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f8:	4642      	mov	r2, r8
 80115fa:	464b      	mov	r3, r9
 80115fc:	4640      	mov	r0, r8
 80115fe:	4649      	mov	r1, r9
 8011600:	f7ef fabc 	bl	8000b7c <__aeabi_dcmpun>
 8011604:	b140      	cbz	r0, 8011618 <_printf_float+0xe0>
 8011606:	464b      	mov	r3, r9
 8011608:	2b00      	cmp	r3, #0
 801160a:	bfbc      	itt	lt
 801160c:	232d      	movlt	r3, #45	@ 0x2d
 801160e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011612:	4a7e      	ldr	r2, [pc, #504]	@ (801180c <_printf_float+0x2d4>)
 8011614:	4b7e      	ldr	r3, [pc, #504]	@ (8011810 <_printf_float+0x2d8>)
 8011616:	e7d4      	b.n	80115c2 <_printf_float+0x8a>
 8011618:	6863      	ldr	r3, [r4, #4]
 801161a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801161e:	9206      	str	r2, [sp, #24]
 8011620:	1c5a      	adds	r2, r3, #1
 8011622:	d13b      	bne.n	801169c <_printf_float+0x164>
 8011624:	2306      	movs	r3, #6
 8011626:	6063      	str	r3, [r4, #4]
 8011628:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801162c:	2300      	movs	r3, #0
 801162e:	6022      	str	r2, [r4, #0]
 8011630:	9303      	str	r3, [sp, #12]
 8011632:	ab0a      	add	r3, sp, #40	@ 0x28
 8011634:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011638:	ab09      	add	r3, sp, #36	@ 0x24
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	6861      	ldr	r1, [r4, #4]
 801163e:	ec49 8b10 	vmov	d0, r8, r9
 8011642:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011646:	4628      	mov	r0, r5
 8011648:	f7ff fed6 	bl	80113f8 <__cvt>
 801164c:	9b06      	ldr	r3, [sp, #24]
 801164e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011650:	2b47      	cmp	r3, #71	@ 0x47
 8011652:	4680      	mov	r8, r0
 8011654:	d129      	bne.n	80116aa <_printf_float+0x172>
 8011656:	1cc8      	adds	r0, r1, #3
 8011658:	db02      	blt.n	8011660 <_printf_float+0x128>
 801165a:	6863      	ldr	r3, [r4, #4]
 801165c:	4299      	cmp	r1, r3
 801165e:	dd41      	ble.n	80116e4 <_printf_float+0x1ac>
 8011660:	f1aa 0a02 	sub.w	sl, sl, #2
 8011664:	fa5f fa8a 	uxtb.w	sl, sl
 8011668:	3901      	subs	r1, #1
 801166a:	4652      	mov	r2, sl
 801166c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011670:	9109      	str	r1, [sp, #36]	@ 0x24
 8011672:	f7ff ff26 	bl	80114c2 <__exponent>
 8011676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011678:	1813      	adds	r3, r2, r0
 801167a:	2a01      	cmp	r2, #1
 801167c:	4681      	mov	r9, r0
 801167e:	6123      	str	r3, [r4, #16]
 8011680:	dc02      	bgt.n	8011688 <_printf_float+0x150>
 8011682:	6822      	ldr	r2, [r4, #0]
 8011684:	07d2      	lsls	r2, r2, #31
 8011686:	d501      	bpl.n	801168c <_printf_float+0x154>
 8011688:	3301      	adds	r3, #1
 801168a:	6123      	str	r3, [r4, #16]
 801168c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011690:	2b00      	cmp	r3, #0
 8011692:	d0a2      	beq.n	80115da <_printf_float+0xa2>
 8011694:	232d      	movs	r3, #45	@ 0x2d
 8011696:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801169a:	e79e      	b.n	80115da <_printf_float+0xa2>
 801169c:	9a06      	ldr	r2, [sp, #24]
 801169e:	2a47      	cmp	r2, #71	@ 0x47
 80116a0:	d1c2      	bne.n	8011628 <_printf_float+0xf0>
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1c0      	bne.n	8011628 <_printf_float+0xf0>
 80116a6:	2301      	movs	r3, #1
 80116a8:	e7bd      	b.n	8011626 <_printf_float+0xee>
 80116aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80116ae:	d9db      	bls.n	8011668 <_printf_float+0x130>
 80116b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80116b4:	d118      	bne.n	80116e8 <_printf_float+0x1b0>
 80116b6:	2900      	cmp	r1, #0
 80116b8:	6863      	ldr	r3, [r4, #4]
 80116ba:	dd0b      	ble.n	80116d4 <_printf_float+0x19c>
 80116bc:	6121      	str	r1, [r4, #16]
 80116be:	b913      	cbnz	r3, 80116c6 <_printf_float+0x18e>
 80116c0:	6822      	ldr	r2, [r4, #0]
 80116c2:	07d0      	lsls	r0, r2, #31
 80116c4:	d502      	bpl.n	80116cc <_printf_float+0x194>
 80116c6:	3301      	adds	r3, #1
 80116c8:	440b      	add	r3, r1
 80116ca:	6123      	str	r3, [r4, #16]
 80116cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80116ce:	f04f 0900 	mov.w	r9, #0
 80116d2:	e7db      	b.n	801168c <_printf_float+0x154>
 80116d4:	b913      	cbnz	r3, 80116dc <_printf_float+0x1a4>
 80116d6:	6822      	ldr	r2, [r4, #0]
 80116d8:	07d2      	lsls	r2, r2, #31
 80116da:	d501      	bpl.n	80116e0 <_printf_float+0x1a8>
 80116dc:	3302      	adds	r3, #2
 80116de:	e7f4      	b.n	80116ca <_printf_float+0x192>
 80116e0:	2301      	movs	r3, #1
 80116e2:	e7f2      	b.n	80116ca <_printf_float+0x192>
 80116e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80116e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116ea:	4299      	cmp	r1, r3
 80116ec:	db05      	blt.n	80116fa <_printf_float+0x1c2>
 80116ee:	6823      	ldr	r3, [r4, #0]
 80116f0:	6121      	str	r1, [r4, #16]
 80116f2:	07d8      	lsls	r0, r3, #31
 80116f4:	d5ea      	bpl.n	80116cc <_printf_float+0x194>
 80116f6:	1c4b      	adds	r3, r1, #1
 80116f8:	e7e7      	b.n	80116ca <_printf_float+0x192>
 80116fa:	2900      	cmp	r1, #0
 80116fc:	bfd4      	ite	le
 80116fe:	f1c1 0202 	rsble	r2, r1, #2
 8011702:	2201      	movgt	r2, #1
 8011704:	4413      	add	r3, r2
 8011706:	e7e0      	b.n	80116ca <_printf_float+0x192>
 8011708:	6823      	ldr	r3, [r4, #0]
 801170a:	055a      	lsls	r2, r3, #21
 801170c:	d407      	bmi.n	801171e <_printf_float+0x1e6>
 801170e:	6923      	ldr	r3, [r4, #16]
 8011710:	4642      	mov	r2, r8
 8011712:	4631      	mov	r1, r6
 8011714:	4628      	mov	r0, r5
 8011716:	47b8      	blx	r7
 8011718:	3001      	adds	r0, #1
 801171a:	d12b      	bne.n	8011774 <_printf_float+0x23c>
 801171c:	e767      	b.n	80115ee <_printf_float+0xb6>
 801171e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011722:	f240 80dd 	bls.w	80118e0 <_printf_float+0x3a8>
 8011726:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801172a:	2200      	movs	r2, #0
 801172c:	2300      	movs	r3, #0
 801172e:	f7ef f9f3 	bl	8000b18 <__aeabi_dcmpeq>
 8011732:	2800      	cmp	r0, #0
 8011734:	d033      	beq.n	801179e <_printf_float+0x266>
 8011736:	4a37      	ldr	r2, [pc, #220]	@ (8011814 <_printf_float+0x2dc>)
 8011738:	2301      	movs	r3, #1
 801173a:	4631      	mov	r1, r6
 801173c:	4628      	mov	r0, r5
 801173e:	47b8      	blx	r7
 8011740:	3001      	adds	r0, #1
 8011742:	f43f af54 	beq.w	80115ee <_printf_float+0xb6>
 8011746:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801174a:	4543      	cmp	r3, r8
 801174c:	db02      	blt.n	8011754 <_printf_float+0x21c>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	07d8      	lsls	r0, r3, #31
 8011752:	d50f      	bpl.n	8011774 <_printf_float+0x23c>
 8011754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011758:	4631      	mov	r1, r6
 801175a:	4628      	mov	r0, r5
 801175c:	47b8      	blx	r7
 801175e:	3001      	adds	r0, #1
 8011760:	f43f af45 	beq.w	80115ee <_printf_float+0xb6>
 8011764:	f04f 0900 	mov.w	r9, #0
 8011768:	f108 38ff 	add.w	r8, r8, #4294967295
 801176c:	f104 0a1a 	add.w	sl, r4, #26
 8011770:	45c8      	cmp	r8, r9
 8011772:	dc09      	bgt.n	8011788 <_printf_float+0x250>
 8011774:	6823      	ldr	r3, [r4, #0]
 8011776:	079b      	lsls	r3, r3, #30
 8011778:	f100 8103 	bmi.w	8011982 <_printf_float+0x44a>
 801177c:	68e0      	ldr	r0, [r4, #12]
 801177e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011780:	4298      	cmp	r0, r3
 8011782:	bfb8      	it	lt
 8011784:	4618      	movlt	r0, r3
 8011786:	e734      	b.n	80115f2 <_printf_float+0xba>
 8011788:	2301      	movs	r3, #1
 801178a:	4652      	mov	r2, sl
 801178c:	4631      	mov	r1, r6
 801178e:	4628      	mov	r0, r5
 8011790:	47b8      	blx	r7
 8011792:	3001      	adds	r0, #1
 8011794:	f43f af2b 	beq.w	80115ee <_printf_float+0xb6>
 8011798:	f109 0901 	add.w	r9, r9, #1
 801179c:	e7e8      	b.n	8011770 <_printf_float+0x238>
 801179e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	dc39      	bgt.n	8011818 <_printf_float+0x2e0>
 80117a4:	4a1b      	ldr	r2, [pc, #108]	@ (8011814 <_printf_float+0x2dc>)
 80117a6:	2301      	movs	r3, #1
 80117a8:	4631      	mov	r1, r6
 80117aa:	4628      	mov	r0, r5
 80117ac:	47b8      	blx	r7
 80117ae:	3001      	adds	r0, #1
 80117b0:	f43f af1d 	beq.w	80115ee <_printf_float+0xb6>
 80117b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80117b8:	ea59 0303 	orrs.w	r3, r9, r3
 80117bc:	d102      	bne.n	80117c4 <_printf_float+0x28c>
 80117be:	6823      	ldr	r3, [r4, #0]
 80117c0:	07d9      	lsls	r1, r3, #31
 80117c2:	d5d7      	bpl.n	8011774 <_printf_float+0x23c>
 80117c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117c8:	4631      	mov	r1, r6
 80117ca:	4628      	mov	r0, r5
 80117cc:	47b8      	blx	r7
 80117ce:	3001      	adds	r0, #1
 80117d0:	f43f af0d 	beq.w	80115ee <_printf_float+0xb6>
 80117d4:	f04f 0a00 	mov.w	sl, #0
 80117d8:	f104 0b1a 	add.w	fp, r4, #26
 80117dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117de:	425b      	negs	r3, r3
 80117e0:	4553      	cmp	r3, sl
 80117e2:	dc01      	bgt.n	80117e8 <_printf_float+0x2b0>
 80117e4:	464b      	mov	r3, r9
 80117e6:	e793      	b.n	8011710 <_printf_float+0x1d8>
 80117e8:	2301      	movs	r3, #1
 80117ea:	465a      	mov	r2, fp
 80117ec:	4631      	mov	r1, r6
 80117ee:	4628      	mov	r0, r5
 80117f0:	47b8      	blx	r7
 80117f2:	3001      	adds	r0, #1
 80117f4:	f43f aefb 	beq.w	80115ee <_printf_float+0xb6>
 80117f8:	f10a 0a01 	add.w	sl, sl, #1
 80117fc:	e7ee      	b.n	80117dc <_printf_float+0x2a4>
 80117fe:	bf00      	nop
 8011800:	7fefffff 	.word	0x7fefffff
 8011804:	08016634 	.word	0x08016634
 8011808:	08016630 	.word	0x08016630
 801180c:	0801663c 	.word	0x0801663c
 8011810:	08016638 	.word	0x08016638
 8011814:	08016640 	.word	0x08016640
 8011818:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801181a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801181e:	4553      	cmp	r3, sl
 8011820:	bfa8      	it	ge
 8011822:	4653      	movge	r3, sl
 8011824:	2b00      	cmp	r3, #0
 8011826:	4699      	mov	r9, r3
 8011828:	dc36      	bgt.n	8011898 <_printf_float+0x360>
 801182a:	f04f 0b00 	mov.w	fp, #0
 801182e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011832:	f104 021a 	add.w	r2, r4, #26
 8011836:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011838:	9306      	str	r3, [sp, #24]
 801183a:	eba3 0309 	sub.w	r3, r3, r9
 801183e:	455b      	cmp	r3, fp
 8011840:	dc31      	bgt.n	80118a6 <_printf_float+0x36e>
 8011842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011844:	459a      	cmp	sl, r3
 8011846:	dc3a      	bgt.n	80118be <_printf_float+0x386>
 8011848:	6823      	ldr	r3, [r4, #0]
 801184a:	07da      	lsls	r2, r3, #31
 801184c:	d437      	bmi.n	80118be <_printf_float+0x386>
 801184e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011850:	ebaa 0903 	sub.w	r9, sl, r3
 8011854:	9b06      	ldr	r3, [sp, #24]
 8011856:	ebaa 0303 	sub.w	r3, sl, r3
 801185a:	4599      	cmp	r9, r3
 801185c:	bfa8      	it	ge
 801185e:	4699      	movge	r9, r3
 8011860:	f1b9 0f00 	cmp.w	r9, #0
 8011864:	dc33      	bgt.n	80118ce <_printf_float+0x396>
 8011866:	f04f 0800 	mov.w	r8, #0
 801186a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801186e:	f104 0b1a 	add.w	fp, r4, #26
 8011872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011874:	ebaa 0303 	sub.w	r3, sl, r3
 8011878:	eba3 0309 	sub.w	r3, r3, r9
 801187c:	4543      	cmp	r3, r8
 801187e:	f77f af79 	ble.w	8011774 <_printf_float+0x23c>
 8011882:	2301      	movs	r3, #1
 8011884:	465a      	mov	r2, fp
 8011886:	4631      	mov	r1, r6
 8011888:	4628      	mov	r0, r5
 801188a:	47b8      	blx	r7
 801188c:	3001      	adds	r0, #1
 801188e:	f43f aeae 	beq.w	80115ee <_printf_float+0xb6>
 8011892:	f108 0801 	add.w	r8, r8, #1
 8011896:	e7ec      	b.n	8011872 <_printf_float+0x33a>
 8011898:	4642      	mov	r2, r8
 801189a:	4631      	mov	r1, r6
 801189c:	4628      	mov	r0, r5
 801189e:	47b8      	blx	r7
 80118a0:	3001      	adds	r0, #1
 80118a2:	d1c2      	bne.n	801182a <_printf_float+0x2f2>
 80118a4:	e6a3      	b.n	80115ee <_printf_float+0xb6>
 80118a6:	2301      	movs	r3, #1
 80118a8:	4631      	mov	r1, r6
 80118aa:	4628      	mov	r0, r5
 80118ac:	9206      	str	r2, [sp, #24]
 80118ae:	47b8      	blx	r7
 80118b0:	3001      	adds	r0, #1
 80118b2:	f43f ae9c 	beq.w	80115ee <_printf_float+0xb6>
 80118b6:	9a06      	ldr	r2, [sp, #24]
 80118b8:	f10b 0b01 	add.w	fp, fp, #1
 80118bc:	e7bb      	b.n	8011836 <_printf_float+0x2fe>
 80118be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118c2:	4631      	mov	r1, r6
 80118c4:	4628      	mov	r0, r5
 80118c6:	47b8      	blx	r7
 80118c8:	3001      	adds	r0, #1
 80118ca:	d1c0      	bne.n	801184e <_printf_float+0x316>
 80118cc:	e68f      	b.n	80115ee <_printf_float+0xb6>
 80118ce:	9a06      	ldr	r2, [sp, #24]
 80118d0:	464b      	mov	r3, r9
 80118d2:	4442      	add	r2, r8
 80118d4:	4631      	mov	r1, r6
 80118d6:	4628      	mov	r0, r5
 80118d8:	47b8      	blx	r7
 80118da:	3001      	adds	r0, #1
 80118dc:	d1c3      	bne.n	8011866 <_printf_float+0x32e>
 80118de:	e686      	b.n	80115ee <_printf_float+0xb6>
 80118e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80118e4:	f1ba 0f01 	cmp.w	sl, #1
 80118e8:	dc01      	bgt.n	80118ee <_printf_float+0x3b6>
 80118ea:	07db      	lsls	r3, r3, #31
 80118ec:	d536      	bpl.n	801195c <_printf_float+0x424>
 80118ee:	2301      	movs	r3, #1
 80118f0:	4642      	mov	r2, r8
 80118f2:	4631      	mov	r1, r6
 80118f4:	4628      	mov	r0, r5
 80118f6:	47b8      	blx	r7
 80118f8:	3001      	adds	r0, #1
 80118fa:	f43f ae78 	beq.w	80115ee <_printf_float+0xb6>
 80118fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011902:	4631      	mov	r1, r6
 8011904:	4628      	mov	r0, r5
 8011906:	47b8      	blx	r7
 8011908:	3001      	adds	r0, #1
 801190a:	f43f ae70 	beq.w	80115ee <_printf_float+0xb6>
 801190e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011912:	2200      	movs	r2, #0
 8011914:	2300      	movs	r3, #0
 8011916:	f10a 3aff 	add.w	sl, sl, #4294967295
 801191a:	f7ef f8fd 	bl	8000b18 <__aeabi_dcmpeq>
 801191e:	b9c0      	cbnz	r0, 8011952 <_printf_float+0x41a>
 8011920:	4653      	mov	r3, sl
 8011922:	f108 0201 	add.w	r2, r8, #1
 8011926:	4631      	mov	r1, r6
 8011928:	4628      	mov	r0, r5
 801192a:	47b8      	blx	r7
 801192c:	3001      	adds	r0, #1
 801192e:	d10c      	bne.n	801194a <_printf_float+0x412>
 8011930:	e65d      	b.n	80115ee <_printf_float+0xb6>
 8011932:	2301      	movs	r3, #1
 8011934:	465a      	mov	r2, fp
 8011936:	4631      	mov	r1, r6
 8011938:	4628      	mov	r0, r5
 801193a:	47b8      	blx	r7
 801193c:	3001      	adds	r0, #1
 801193e:	f43f ae56 	beq.w	80115ee <_printf_float+0xb6>
 8011942:	f108 0801 	add.w	r8, r8, #1
 8011946:	45d0      	cmp	r8, sl
 8011948:	dbf3      	blt.n	8011932 <_printf_float+0x3fa>
 801194a:	464b      	mov	r3, r9
 801194c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011950:	e6df      	b.n	8011712 <_printf_float+0x1da>
 8011952:	f04f 0800 	mov.w	r8, #0
 8011956:	f104 0b1a 	add.w	fp, r4, #26
 801195a:	e7f4      	b.n	8011946 <_printf_float+0x40e>
 801195c:	2301      	movs	r3, #1
 801195e:	4642      	mov	r2, r8
 8011960:	e7e1      	b.n	8011926 <_printf_float+0x3ee>
 8011962:	2301      	movs	r3, #1
 8011964:	464a      	mov	r2, r9
 8011966:	4631      	mov	r1, r6
 8011968:	4628      	mov	r0, r5
 801196a:	47b8      	blx	r7
 801196c:	3001      	adds	r0, #1
 801196e:	f43f ae3e 	beq.w	80115ee <_printf_float+0xb6>
 8011972:	f108 0801 	add.w	r8, r8, #1
 8011976:	68e3      	ldr	r3, [r4, #12]
 8011978:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801197a:	1a5b      	subs	r3, r3, r1
 801197c:	4543      	cmp	r3, r8
 801197e:	dcf0      	bgt.n	8011962 <_printf_float+0x42a>
 8011980:	e6fc      	b.n	801177c <_printf_float+0x244>
 8011982:	f04f 0800 	mov.w	r8, #0
 8011986:	f104 0919 	add.w	r9, r4, #25
 801198a:	e7f4      	b.n	8011976 <_printf_float+0x43e>

0801198c <_printf_common>:
 801198c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011990:	4616      	mov	r6, r2
 8011992:	4698      	mov	r8, r3
 8011994:	688a      	ldr	r2, [r1, #8]
 8011996:	690b      	ldr	r3, [r1, #16]
 8011998:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801199c:	4293      	cmp	r3, r2
 801199e:	bfb8      	it	lt
 80119a0:	4613      	movlt	r3, r2
 80119a2:	6033      	str	r3, [r6, #0]
 80119a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80119a8:	4607      	mov	r7, r0
 80119aa:	460c      	mov	r4, r1
 80119ac:	b10a      	cbz	r2, 80119b2 <_printf_common+0x26>
 80119ae:	3301      	adds	r3, #1
 80119b0:	6033      	str	r3, [r6, #0]
 80119b2:	6823      	ldr	r3, [r4, #0]
 80119b4:	0699      	lsls	r1, r3, #26
 80119b6:	bf42      	ittt	mi
 80119b8:	6833      	ldrmi	r3, [r6, #0]
 80119ba:	3302      	addmi	r3, #2
 80119bc:	6033      	strmi	r3, [r6, #0]
 80119be:	6825      	ldr	r5, [r4, #0]
 80119c0:	f015 0506 	ands.w	r5, r5, #6
 80119c4:	d106      	bne.n	80119d4 <_printf_common+0x48>
 80119c6:	f104 0a19 	add.w	sl, r4, #25
 80119ca:	68e3      	ldr	r3, [r4, #12]
 80119cc:	6832      	ldr	r2, [r6, #0]
 80119ce:	1a9b      	subs	r3, r3, r2
 80119d0:	42ab      	cmp	r3, r5
 80119d2:	dc26      	bgt.n	8011a22 <_printf_common+0x96>
 80119d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80119d8:	6822      	ldr	r2, [r4, #0]
 80119da:	3b00      	subs	r3, #0
 80119dc:	bf18      	it	ne
 80119de:	2301      	movne	r3, #1
 80119e0:	0692      	lsls	r2, r2, #26
 80119e2:	d42b      	bmi.n	8011a3c <_printf_common+0xb0>
 80119e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80119e8:	4641      	mov	r1, r8
 80119ea:	4638      	mov	r0, r7
 80119ec:	47c8      	blx	r9
 80119ee:	3001      	adds	r0, #1
 80119f0:	d01e      	beq.n	8011a30 <_printf_common+0xa4>
 80119f2:	6823      	ldr	r3, [r4, #0]
 80119f4:	6922      	ldr	r2, [r4, #16]
 80119f6:	f003 0306 	and.w	r3, r3, #6
 80119fa:	2b04      	cmp	r3, #4
 80119fc:	bf02      	ittt	eq
 80119fe:	68e5      	ldreq	r5, [r4, #12]
 8011a00:	6833      	ldreq	r3, [r6, #0]
 8011a02:	1aed      	subeq	r5, r5, r3
 8011a04:	68a3      	ldr	r3, [r4, #8]
 8011a06:	bf0c      	ite	eq
 8011a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a0c:	2500      	movne	r5, #0
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	bfc4      	itt	gt
 8011a12:	1a9b      	subgt	r3, r3, r2
 8011a14:	18ed      	addgt	r5, r5, r3
 8011a16:	2600      	movs	r6, #0
 8011a18:	341a      	adds	r4, #26
 8011a1a:	42b5      	cmp	r5, r6
 8011a1c:	d11a      	bne.n	8011a54 <_printf_common+0xc8>
 8011a1e:	2000      	movs	r0, #0
 8011a20:	e008      	b.n	8011a34 <_printf_common+0xa8>
 8011a22:	2301      	movs	r3, #1
 8011a24:	4652      	mov	r2, sl
 8011a26:	4641      	mov	r1, r8
 8011a28:	4638      	mov	r0, r7
 8011a2a:	47c8      	blx	r9
 8011a2c:	3001      	adds	r0, #1
 8011a2e:	d103      	bne.n	8011a38 <_printf_common+0xac>
 8011a30:	f04f 30ff 	mov.w	r0, #4294967295
 8011a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a38:	3501      	adds	r5, #1
 8011a3a:	e7c6      	b.n	80119ca <_printf_common+0x3e>
 8011a3c:	18e1      	adds	r1, r4, r3
 8011a3e:	1c5a      	adds	r2, r3, #1
 8011a40:	2030      	movs	r0, #48	@ 0x30
 8011a42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011a46:	4422      	add	r2, r4
 8011a48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011a4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011a50:	3302      	adds	r3, #2
 8011a52:	e7c7      	b.n	80119e4 <_printf_common+0x58>
 8011a54:	2301      	movs	r3, #1
 8011a56:	4622      	mov	r2, r4
 8011a58:	4641      	mov	r1, r8
 8011a5a:	4638      	mov	r0, r7
 8011a5c:	47c8      	blx	r9
 8011a5e:	3001      	adds	r0, #1
 8011a60:	d0e6      	beq.n	8011a30 <_printf_common+0xa4>
 8011a62:	3601      	adds	r6, #1
 8011a64:	e7d9      	b.n	8011a1a <_printf_common+0x8e>
	...

08011a68 <_printf_i>:
 8011a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a6c:	7e0f      	ldrb	r7, [r1, #24]
 8011a6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011a70:	2f78      	cmp	r7, #120	@ 0x78
 8011a72:	4691      	mov	r9, r2
 8011a74:	4680      	mov	r8, r0
 8011a76:	460c      	mov	r4, r1
 8011a78:	469a      	mov	sl, r3
 8011a7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011a7e:	d807      	bhi.n	8011a90 <_printf_i+0x28>
 8011a80:	2f62      	cmp	r7, #98	@ 0x62
 8011a82:	d80a      	bhi.n	8011a9a <_printf_i+0x32>
 8011a84:	2f00      	cmp	r7, #0
 8011a86:	f000 80d1 	beq.w	8011c2c <_printf_i+0x1c4>
 8011a8a:	2f58      	cmp	r7, #88	@ 0x58
 8011a8c:	f000 80b8 	beq.w	8011c00 <_printf_i+0x198>
 8011a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011a98:	e03a      	b.n	8011b10 <_printf_i+0xa8>
 8011a9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011a9e:	2b15      	cmp	r3, #21
 8011aa0:	d8f6      	bhi.n	8011a90 <_printf_i+0x28>
 8011aa2:	a101      	add	r1, pc, #4	@ (adr r1, 8011aa8 <_printf_i+0x40>)
 8011aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011aa8:	08011b01 	.word	0x08011b01
 8011aac:	08011b15 	.word	0x08011b15
 8011ab0:	08011a91 	.word	0x08011a91
 8011ab4:	08011a91 	.word	0x08011a91
 8011ab8:	08011a91 	.word	0x08011a91
 8011abc:	08011a91 	.word	0x08011a91
 8011ac0:	08011b15 	.word	0x08011b15
 8011ac4:	08011a91 	.word	0x08011a91
 8011ac8:	08011a91 	.word	0x08011a91
 8011acc:	08011a91 	.word	0x08011a91
 8011ad0:	08011a91 	.word	0x08011a91
 8011ad4:	08011c13 	.word	0x08011c13
 8011ad8:	08011b3f 	.word	0x08011b3f
 8011adc:	08011bcd 	.word	0x08011bcd
 8011ae0:	08011a91 	.word	0x08011a91
 8011ae4:	08011a91 	.word	0x08011a91
 8011ae8:	08011c35 	.word	0x08011c35
 8011aec:	08011a91 	.word	0x08011a91
 8011af0:	08011b3f 	.word	0x08011b3f
 8011af4:	08011a91 	.word	0x08011a91
 8011af8:	08011a91 	.word	0x08011a91
 8011afc:	08011bd5 	.word	0x08011bd5
 8011b00:	6833      	ldr	r3, [r6, #0]
 8011b02:	1d1a      	adds	r2, r3, #4
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	6032      	str	r2, [r6, #0]
 8011b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011b0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011b10:	2301      	movs	r3, #1
 8011b12:	e09c      	b.n	8011c4e <_printf_i+0x1e6>
 8011b14:	6833      	ldr	r3, [r6, #0]
 8011b16:	6820      	ldr	r0, [r4, #0]
 8011b18:	1d19      	adds	r1, r3, #4
 8011b1a:	6031      	str	r1, [r6, #0]
 8011b1c:	0606      	lsls	r6, r0, #24
 8011b1e:	d501      	bpl.n	8011b24 <_printf_i+0xbc>
 8011b20:	681d      	ldr	r5, [r3, #0]
 8011b22:	e003      	b.n	8011b2c <_printf_i+0xc4>
 8011b24:	0645      	lsls	r5, r0, #25
 8011b26:	d5fb      	bpl.n	8011b20 <_printf_i+0xb8>
 8011b28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011b2c:	2d00      	cmp	r5, #0
 8011b2e:	da03      	bge.n	8011b38 <_printf_i+0xd0>
 8011b30:	232d      	movs	r3, #45	@ 0x2d
 8011b32:	426d      	negs	r5, r5
 8011b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b38:	4858      	ldr	r0, [pc, #352]	@ (8011c9c <_printf_i+0x234>)
 8011b3a:	230a      	movs	r3, #10
 8011b3c:	e011      	b.n	8011b62 <_printf_i+0xfa>
 8011b3e:	6821      	ldr	r1, [r4, #0]
 8011b40:	6833      	ldr	r3, [r6, #0]
 8011b42:	0608      	lsls	r0, r1, #24
 8011b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8011b48:	d402      	bmi.n	8011b50 <_printf_i+0xe8>
 8011b4a:	0649      	lsls	r1, r1, #25
 8011b4c:	bf48      	it	mi
 8011b4e:	b2ad      	uxthmi	r5, r5
 8011b50:	2f6f      	cmp	r7, #111	@ 0x6f
 8011b52:	4852      	ldr	r0, [pc, #328]	@ (8011c9c <_printf_i+0x234>)
 8011b54:	6033      	str	r3, [r6, #0]
 8011b56:	bf14      	ite	ne
 8011b58:	230a      	movne	r3, #10
 8011b5a:	2308      	moveq	r3, #8
 8011b5c:	2100      	movs	r1, #0
 8011b5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011b62:	6866      	ldr	r6, [r4, #4]
 8011b64:	60a6      	str	r6, [r4, #8]
 8011b66:	2e00      	cmp	r6, #0
 8011b68:	db05      	blt.n	8011b76 <_printf_i+0x10e>
 8011b6a:	6821      	ldr	r1, [r4, #0]
 8011b6c:	432e      	orrs	r6, r5
 8011b6e:	f021 0104 	bic.w	r1, r1, #4
 8011b72:	6021      	str	r1, [r4, #0]
 8011b74:	d04b      	beq.n	8011c0e <_printf_i+0x1a6>
 8011b76:	4616      	mov	r6, r2
 8011b78:	fbb5 f1f3 	udiv	r1, r5, r3
 8011b7c:	fb03 5711 	mls	r7, r3, r1, r5
 8011b80:	5dc7      	ldrb	r7, [r0, r7]
 8011b82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011b86:	462f      	mov	r7, r5
 8011b88:	42bb      	cmp	r3, r7
 8011b8a:	460d      	mov	r5, r1
 8011b8c:	d9f4      	bls.n	8011b78 <_printf_i+0x110>
 8011b8e:	2b08      	cmp	r3, #8
 8011b90:	d10b      	bne.n	8011baa <_printf_i+0x142>
 8011b92:	6823      	ldr	r3, [r4, #0]
 8011b94:	07df      	lsls	r7, r3, #31
 8011b96:	d508      	bpl.n	8011baa <_printf_i+0x142>
 8011b98:	6923      	ldr	r3, [r4, #16]
 8011b9a:	6861      	ldr	r1, [r4, #4]
 8011b9c:	4299      	cmp	r1, r3
 8011b9e:	bfde      	ittt	le
 8011ba0:	2330      	movle	r3, #48	@ 0x30
 8011ba2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011ba6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011baa:	1b92      	subs	r2, r2, r6
 8011bac:	6122      	str	r2, [r4, #16]
 8011bae:	f8cd a000 	str.w	sl, [sp]
 8011bb2:	464b      	mov	r3, r9
 8011bb4:	aa03      	add	r2, sp, #12
 8011bb6:	4621      	mov	r1, r4
 8011bb8:	4640      	mov	r0, r8
 8011bba:	f7ff fee7 	bl	801198c <_printf_common>
 8011bbe:	3001      	adds	r0, #1
 8011bc0:	d14a      	bne.n	8011c58 <_printf_i+0x1f0>
 8011bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc6:	b004      	add	sp, #16
 8011bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bcc:	6823      	ldr	r3, [r4, #0]
 8011bce:	f043 0320 	orr.w	r3, r3, #32
 8011bd2:	6023      	str	r3, [r4, #0]
 8011bd4:	4832      	ldr	r0, [pc, #200]	@ (8011ca0 <_printf_i+0x238>)
 8011bd6:	2778      	movs	r7, #120	@ 0x78
 8011bd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011bdc:	6823      	ldr	r3, [r4, #0]
 8011bde:	6831      	ldr	r1, [r6, #0]
 8011be0:	061f      	lsls	r7, r3, #24
 8011be2:	f851 5b04 	ldr.w	r5, [r1], #4
 8011be6:	d402      	bmi.n	8011bee <_printf_i+0x186>
 8011be8:	065f      	lsls	r7, r3, #25
 8011bea:	bf48      	it	mi
 8011bec:	b2ad      	uxthmi	r5, r5
 8011bee:	6031      	str	r1, [r6, #0]
 8011bf0:	07d9      	lsls	r1, r3, #31
 8011bf2:	bf44      	itt	mi
 8011bf4:	f043 0320 	orrmi.w	r3, r3, #32
 8011bf8:	6023      	strmi	r3, [r4, #0]
 8011bfa:	b11d      	cbz	r5, 8011c04 <_printf_i+0x19c>
 8011bfc:	2310      	movs	r3, #16
 8011bfe:	e7ad      	b.n	8011b5c <_printf_i+0xf4>
 8011c00:	4826      	ldr	r0, [pc, #152]	@ (8011c9c <_printf_i+0x234>)
 8011c02:	e7e9      	b.n	8011bd8 <_printf_i+0x170>
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	f023 0320 	bic.w	r3, r3, #32
 8011c0a:	6023      	str	r3, [r4, #0]
 8011c0c:	e7f6      	b.n	8011bfc <_printf_i+0x194>
 8011c0e:	4616      	mov	r6, r2
 8011c10:	e7bd      	b.n	8011b8e <_printf_i+0x126>
 8011c12:	6833      	ldr	r3, [r6, #0]
 8011c14:	6825      	ldr	r5, [r4, #0]
 8011c16:	6961      	ldr	r1, [r4, #20]
 8011c18:	1d18      	adds	r0, r3, #4
 8011c1a:	6030      	str	r0, [r6, #0]
 8011c1c:	062e      	lsls	r6, r5, #24
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	d501      	bpl.n	8011c26 <_printf_i+0x1be>
 8011c22:	6019      	str	r1, [r3, #0]
 8011c24:	e002      	b.n	8011c2c <_printf_i+0x1c4>
 8011c26:	0668      	lsls	r0, r5, #25
 8011c28:	d5fb      	bpl.n	8011c22 <_printf_i+0x1ba>
 8011c2a:	8019      	strh	r1, [r3, #0]
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	6123      	str	r3, [r4, #16]
 8011c30:	4616      	mov	r6, r2
 8011c32:	e7bc      	b.n	8011bae <_printf_i+0x146>
 8011c34:	6833      	ldr	r3, [r6, #0]
 8011c36:	1d1a      	adds	r2, r3, #4
 8011c38:	6032      	str	r2, [r6, #0]
 8011c3a:	681e      	ldr	r6, [r3, #0]
 8011c3c:	6862      	ldr	r2, [r4, #4]
 8011c3e:	2100      	movs	r1, #0
 8011c40:	4630      	mov	r0, r6
 8011c42:	f7ee faed 	bl	8000220 <memchr>
 8011c46:	b108      	cbz	r0, 8011c4c <_printf_i+0x1e4>
 8011c48:	1b80      	subs	r0, r0, r6
 8011c4a:	6060      	str	r0, [r4, #4]
 8011c4c:	6863      	ldr	r3, [r4, #4]
 8011c4e:	6123      	str	r3, [r4, #16]
 8011c50:	2300      	movs	r3, #0
 8011c52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c56:	e7aa      	b.n	8011bae <_printf_i+0x146>
 8011c58:	6923      	ldr	r3, [r4, #16]
 8011c5a:	4632      	mov	r2, r6
 8011c5c:	4649      	mov	r1, r9
 8011c5e:	4640      	mov	r0, r8
 8011c60:	47d0      	blx	sl
 8011c62:	3001      	adds	r0, #1
 8011c64:	d0ad      	beq.n	8011bc2 <_printf_i+0x15a>
 8011c66:	6823      	ldr	r3, [r4, #0]
 8011c68:	079b      	lsls	r3, r3, #30
 8011c6a:	d413      	bmi.n	8011c94 <_printf_i+0x22c>
 8011c6c:	68e0      	ldr	r0, [r4, #12]
 8011c6e:	9b03      	ldr	r3, [sp, #12]
 8011c70:	4298      	cmp	r0, r3
 8011c72:	bfb8      	it	lt
 8011c74:	4618      	movlt	r0, r3
 8011c76:	e7a6      	b.n	8011bc6 <_printf_i+0x15e>
 8011c78:	2301      	movs	r3, #1
 8011c7a:	4632      	mov	r2, r6
 8011c7c:	4649      	mov	r1, r9
 8011c7e:	4640      	mov	r0, r8
 8011c80:	47d0      	blx	sl
 8011c82:	3001      	adds	r0, #1
 8011c84:	d09d      	beq.n	8011bc2 <_printf_i+0x15a>
 8011c86:	3501      	adds	r5, #1
 8011c88:	68e3      	ldr	r3, [r4, #12]
 8011c8a:	9903      	ldr	r1, [sp, #12]
 8011c8c:	1a5b      	subs	r3, r3, r1
 8011c8e:	42ab      	cmp	r3, r5
 8011c90:	dcf2      	bgt.n	8011c78 <_printf_i+0x210>
 8011c92:	e7eb      	b.n	8011c6c <_printf_i+0x204>
 8011c94:	2500      	movs	r5, #0
 8011c96:	f104 0619 	add.w	r6, r4, #25
 8011c9a:	e7f5      	b.n	8011c88 <_printf_i+0x220>
 8011c9c:	08016642 	.word	0x08016642
 8011ca0:	08016653 	.word	0x08016653

08011ca4 <_scanf_float>:
 8011ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca8:	b087      	sub	sp, #28
 8011caa:	4691      	mov	r9, r2
 8011cac:	9303      	str	r3, [sp, #12]
 8011cae:	688b      	ldr	r3, [r1, #8]
 8011cb0:	1e5a      	subs	r2, r3, #1
 8011cb2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011cb6:	bf81      	itttt	hi
 8011cb8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011cbc:	eb03 0b05 	addhi.w	fp, r3, r5
 8011cc0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011cc4:	608b      	strhi	r3, [r1, #8]
 8011cc6:	680b      	ldr	r3, [r1, #0]
 8011cc8:	460a      	mov	r2, r1
 8011cca:	f04f 0500 	mov.w	r5, #0
 8011cce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011cd2:	f842 3b1c 	str.w	r3, [r2], #28
 8011cd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011cda:	4680      	mov	r8, r0
 8011cdc:	460c      	mov	r4, r1
 8011cde:	bf98      	it	ls
 8011ce0:	f04f 0b00 	movls.w	fp, #0
 8011ce4:	9201      	str	r2, [sp, #4]
 8011ce6:	4616      	mov	r6, r2
 8011ce8:	46aa      	mov	sl, r5
 8011cea:	462f      	mov	r7, r5
 8011cec:	9502      	str	r5, [sp, #8]
 8011cee:	68a2      	ldr	r2, [r4, #8]
 8011cf0:	b15a      	cbz	r2, 8011d0a <_scanf_float+0x66>
 8011cf2:	f8d9 3000 	ldr.w	r3, [r9]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	2b4e      	cmp	r3, #78	@ 0x4e
 8011cfa:	d863      	bhi.n	8011dc4 <_scanf_float+0x120>
 8011cfc:	2b40      	cmp	r3, #64	@ 0x40
 8011cfe:	d83b      	bhi.n	8011d78 <_scanf_float+0xd4>
 8011d00:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011d04:	b2c8      	uxtb	r0, r1
 8011d06:	280e      	cmp	r0, #14
 8011d08:	d939      	bls.n	8011d7e <_scanf_float+0xda>
 8011d0a:	b11f      	cbz	r7, 8011d14 <_scanf_float+0x70>
 8011d0c:	6823      	ldr	r3, [r4, #0]
 8011d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011d12:	6023      	str	r3, [r4, #0]
 8011d14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d18:	f1ba 0f01 	cmp.w	sl, #1
 8011d1c:	f200 8114 	bhi.w	8011f48 <_scanf_float+0x2a4>
 8011d20:	9b01      	ldr	r3, [sp, #4]
 8011d22:	429e      	cmp	r6, r3
 8011d24:	f200 8105 	bhi.w	8011f32 <_scanf_float+0x28e>
 8011d28:	2001      	movs	r0, #1
 8011d2a:	b007      	add	sp, #28
 8011d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d30:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011d34:	2a0d      	cmp	r2, #13
 8011d36:	d8e8      	bhi.n	8011d0a <_scanf_float+0x66>
 8011d38:	a101      	add	r1, pc, #4	@ (adr r1, 8011d40 <_scanf_float+0x9c>)
 8011d3a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011d3e:	bf00      	nop
 8011d40:	08011e89 	.word	0x08011e89
 8011d44:	08011d0b 	.word	0x08011d0b
 8011d48:	08011d0b 	.word	0x08011d0b
 8011d4c:	08011d0b 	.word	0x08011d0b
 8011d50:	08011ee5 	.word	0x08011ee5
 8011d54:	08011ebf 	.word	0x08011ebf
 8011d58:	08011d0b 	.word	0x08011d0b
 8011d5c:	08011d0b 	.word	0x08011d0b
 8011d60:	08011e97 	.word	0x08011e97
 8011d64:	08011d0b 	.word	0x08011d0b
 8011d68:	08011d0b 	.word	0x08011d0b
 8011d6c:	08011d0b 	.word	0x08011d0b
 8011d70:	08011d0b 	.word	0x08011d0b
 8011d74:	08011e53 	.word	0x08011e53
 8011d78:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011d7c:	e7da      	b.n	8011d34 <_scanf_float+0x90>
 8011d7e:	290e      	cmp	r1, #14
 8011d80:	d8c3      	bhi.n	8011d0a <_scanf_float+0x66>
 8011d82:	a001      	add	r0, pc, #4	@ (adr r0, 8011d88 <_scanf_float+0xe4>)
 8011d84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011d88:	08011e43 	.word	0x08011e43
 8011d8c:	08011d0b 	.word	0x08011d0b
 8011d90:	08011e43 	.word	0x08011e43
 8011d94:	08011ed3 	.word	0x08011ed3
 8011d98:	08011d0b 	.word	0x08011d0b
 8011d9c:	08011de5 	.word	0x08011de5
 8011da0:	08011e29 	.word	0x08011e29
 8011da4:	08011e29 	.word	0x08011e29
 8011da8:	08011e29 	.word	0x08011e29
 8011dac:	08011e29 	.word	0x08011e29
 8011db0:	08011e29 	.word	0x08011e29
 8011db4:	08011e29 	.word	0x08011e29
 8011db8:	08011e29 	.word	0x08011e29
 8011dbc:	08011e29 	.word	0x08011e29
 8011dc0:	08011e29 	.word	0x08011e29
 8011dc4:	2b6e      	cmp	r3, #110	@ 0x6e
 8011dc6:	d809      	bhi.n	8011ddc <_scanf_float+0x138>
 8011dc8:	2b60      	cmp	r3, #96	@ 0x60
 8011dca:	d8b1      	bhi.n	8011d30 <_scanf_float+0x8c>
 8011dcc:	2b54      	cmp	r3, #84	@ 0x54
 8011dce:	d07b      	beq.n	8011ec8 <_scanf_float+0x224>
 8011dd0:	2b59      	cmp	r3, #89	@ 0x59
 8011dd2:	d19a      	bne.n	8011d0a <_scanf_float+0x66>
 8011dd4:	2d07      	cmp	r5, #7
 8011dd6:	d198      	bne.n	8011d0a <_scanf_float+0x66>
 8011dd8:	2508      	movs	r5, #8
 8011dda:	e02f      	b.n	8011e3c <_scanf_float+0x198>
 8011ddc:	2b74      	cmp	r3, #116	@ 0x74
 8011dde:	d073      	beq.n	8011ec8 <_scanf_float+0x224>
 8011de0:	2b79      	cmp	r3, #121	@ 0x79
 8011de2:	e7f6      	b.n	8011dd2 <_scanf_float+0x12e>
 8011de4:	6821      	ldr	r1, [r4, #0]
 8011de6:	05c8      	lsls	r0, r1, #23
 8011de8:	d51e      	bpl.n	8011e28 <_scanf_float+0x184>
 8011dea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011dee:	6021      	str	r1, [r4, #0]
 8011df0:	3701      	adds	r7, #1
 8011df2:	f1bb 0f00 	cmp.w	fp, #0
 8011df6:	d003      	beq.n	8011e00 <_scanf_float+0x15c>
 8011df8:	3201      	adds	r2, #1
 8011dfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011dfe:	60a2      	str	r2, [r4, #8]
 8011e00:	68a3      	ldr	r3, [r4, #8]
 8011e02:	3b01      	subs	r3, #1
 8011e04:	60a3      	str	r3, [r4, #8]
 8011e06:	6923      	ldr	r3, [r4, #16]
 8011e08:	3301      	adds	r3, #1
 8011e0a:	6123      	str	r3, [r4, #16]
 8011e0c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011e10:	3b01      	subs	r3, #1
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	f8c9 3004 	str.w	r3, [r9, #4]
 8011e18:	f340 8082 	ble.w	8011f20 <_scanf_float+0x27c>
 8011e1c:	f8d9 3000 	ldr.w	r3, [r9]
 8011e20:	3301      	adds	r3, #1
 8011e22:	f8c9 3000 	str.w	r3, [r9]
 8011e26:	e762      	b.n	8011cee <_scanf_float+0x4a>
 8011e28:	eb1a 0105 	adds.w	r1, sl, r5
 8011e2c:	f47f af6d 	bne.w	8011d0a <_scanf_float+0x66>
 8011e30:	6822      	ldr	r2, [r4, #0]
 8011e32:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011e36:	6022      	str	r2, [r4, #0]
 8011e38:	460d      	mov	r5, r1
 8011e3a:	468a      	mov	sl, r1
 8011e3c:	f806 3b01 	strb.w	r3, [r6], #1
 8011e40:	e7de      	b.n	8011e00 <_scanf_float+0x15c>
 8011e42:	6822      	ldr	r2, [r4, #0]
 8011e44:	0610      	lsls	r0, r2, #24
 8011e46:	f57f af60 	bpl.w	8011d0a <_scanf_float+0x66>
 8011e4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011e4e:	6022      	str	r2, [r4, #0]
 8011e50:	e7f4      	b.n	8011e3c <_scanf_float+0x198>
 8011e52:	f1ba 0f00 	cmp.w	sl, #0
 8011e56:	d10c      	bne.n	8011e72 <_scanf_float+0x1ce>
 8011e58:	b977      	cbnz	r7, 8011e78 <_scanf_float+0x1d4>
 8011e5a:	6822      	ldr	r2, [r4, #0]
 8011e5c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011e60:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011e64:	d108      	bne.n	8011e78 <_scanf_float+0x1d4>
 8011e66:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011e6a:	6022      	str	r2, [r4, #0]
 8011e6c:	f04f 0a01 	mov.w	sl, #1
 8011e70:	e7e4      	b.n	8011e3c <_scanf_float+0x198>
 8011e72:	f1ba 0f02 	cmp.w	sl, #2
 8011e76:	d050      	beq.n	8011f1a <_scanf_float+0x276>
 8011e78:	2d01      	cmp	r5, #1
 8011e7a:	d002      	beq.n	8011e82 <_scanf_float+0x1de>
 8011e7c:	2d04      	cmp	r5, #4
 8011e7e:	f47f af44 	bne.w	8011d0a <_scanf_float+0x66>
 8011e82:	3501      	adds	r5, #1
 8011e84:	b2ed      	uxtb	r5, r5
 8011e86:	e7d9      	b.n	8011e3c <_scanf_float+0x198>
 8011e88:	f1ba 0f01 	cmp.w	sl, #1
 8011e8c:	f47f af3d 	bne.w	8011d0a <_scanf_float+0x66>
 8011e90:	f04f 0a02 	mov.w	sl, #2
 8011e94:	e7d2      	b.n	8011e3c <_scanf_float+0x198>
 8011e96:	b975      	cbnz	r5, 8011eb6 <_scanf_float+0x212>
 8011e98:	2f00      	cmp	r7, #0
 8011e9a:	f47f af37 	bne.w	8011d0c <_scanf_float+0x68>
 8011e9e:	6822      	ldr	r2, [r4, #0]
 8011ea0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011ea4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011ea8:	f040 8103 	bne.w	80120b2 <_scanf_float+0x40e>
 8011eac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011eb0:	6022      	str	r2, [r4, #0]
 8011eb2:	2501      	movs	r5, #1
 8011eb4:	e7c2      	b.n	8011e3c <_scanf_float+0x198>
 8011eb6:	2d03      	cmp	r5, #3
 8011eb8:	d0e3      	beq.n	8011e82 <_scanf_float+0x1de>
 8011eba:	2d05      	cmp	r5, #5
 8011ebc:	e7df      	b.n	8011e7e <_scanf_float+0x1da>
 8011ebe:	2d02      	cmp	r5, #2
 8011ec0:	f47f af23 	bne.w	8011d0a <_scanf_float+0x66>
 8011ec4:	2503      	movs	r5, #3
 8011ec6:	e7b9      	b.n	8011e3c <_scanf_float+0x198>
 8011ec8:	2d06      	cmp	r5, #6
 8011eca:	f47f af1e 	bne.w	8011d0a <_scanf_float+0x66>
 8011ece:	2507      	movs	r5, #7
 8011ed0:	e7b4      	b.n	8011e3c <_scanf_float+0x198>
 8011ed2:	6822      	ldr	r2, [r4, #0]
 8011ed4:	0591      	lsls	r1, r2, #22
 8011ed6:	f57f af18 	bpl.w	8011d0a <_scanf_float+0x66>
 8011eda:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011ede:	6022      	str	r2, [r4, #0]
 8011ee0:	9702      	str	r7, [sp, #8]
 8011ee2:	e7ab      	b.n	8011e3c <_scanf_float+0x198>
 8011ee4:	6822      	ldr	r2, [r4, #0]
 8011ee6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011eea:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011eee:	d005      	beq.n	8011efc <_scanf_float+0x258>
 8011ef0:	0550      	lsls	r0, r2, #21
 8011ef2:	f57f af0a 	bpl.w	8011d0a <_scanf_float+0x66>
 8011ef6:	2f00      	cmp	r7, #0
 8011ef8:	f000 80db 	beq.w	80120b2 <_scanf_float+0x40e>
 8011efc:	0591      	lsls	r1, r2, #22
 8011efe:	bf58      	it	pl
 8011f00:	9902      	ldrpl	r1, [sp, #8]
 8011f02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011f06:	bf58      	it	pl
 8011f08:	1a79      	subpl	r1, r7, r1
 8011f0a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011f0e:	bf58      	it	pl
 8011f10:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011f14:	6022      	str	r2, [r4, #0]
 8011f16:	2700      	movs	r7, #0
 8011f18:	e790      	b.n	8011e3c <_scanf_float+0x198>
 8011f1a:	f04f 0a03 	mov.w	sl, #3
 8011f1e:	e78d      	b.n	8011e3c <_scanf_float+0x198>
 8011f20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011f24:	4649      	mov	r1, r9
 8011f26:	4640      	mov	r0, r8
 8011f28:	4798      	blx	r3
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	f43f aedf 	beq.w	8011cee <_scanf_float+0x4a>
 8011f30:	e6eb      	b.n	8011d0a <_scanf_float+0x66>
 8011f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011f36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011f3a:	464a      	mov	r2, r9
 8011f3c:	4640      	mov	r0, r8
 8011f3e:	4798      	blx	r3
 8011f40:	6923      	ldr	r3, [r4, #16]
 8011f42:	3b01      	subs	r3, #1
 8011f44:	6123      	str	r3, [r4, #16]
 8011f46:	e6eb      	b.n	8011d20 <_scanf_float+0x7c>
 8011f48:	1e6b      	subs	r3, r5, #1
 8011f4a:	2b06      	cmp	r3, #6
 8011f4c:	d824      	bhi.n	8011f98 <_scanf_float+0x2f4>
 8011f4e:	2d02      	cmp	r5, #2
 8011f50:	d836      	bhi.n	8011fc0 <_scanf_float+0x31c>
 8011f52:	9b01      	ldr	r3, [sp, #4]
 8011f54:	429e      	cmp	r6, r3
 8011f56:	f67f aee7 	bls.w	8011d28 <_scanf_float+0x84>
 8011f5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011f5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011f62:	464a      	mov	r2, r9
 8011f64:	4640      	mov	r0, r8
 8011f66:	4798      	blx	r3
 8011f68:	6923      	ldr	r3, [r4, #16]
 8011f6a:	3b01      	subs	r3, #1
 8011f6c:	6123      	str	r3, [r4, #16]
 8011f6e:	e7f0      	b.n	8011f52 <_scanf_float+0x2ae>
 8011f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011f74:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011f78:	464a      	mov	r2, r9
 8011f7a:	4640      	mov	r0, r8
 8011f7c:	4798      	blx	r3
 8011f7e:	6923      	ldr	r3, [r4, #16]
 8011f80:	3b01      	subs	r3, #1
 8011f82:	6123      	str	r3, [r4, #16]
 8011f84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f88:	fa5f fa8a 	uxtb.w	sl, sl
 8011f8c:	f1ba 0f02 	cmp.w	sl, #2
 8011f90:	d1ee      	bne.n	8011f70 <_scanf_float+0x2cc>
 8011f92:	3d03      	subs	r5, #3
 8011f94:	b2ed      	uxtb	r5, r5
 8011f96:	1b76      	subs	r6, r6, r5
 8011f98:	6823      	ldr	r3, [r4, #0]
 8011f9a:	05da      	lsls	r2, r3, #23
 8011f9c:	d530      	bpl.n	8012000 <_scanf_float+0x35c>
 8011f9e:	055b      	lsls	r3, r3, #21
 8011fa0:	d511      	bpl.n	8011fc6 <_scanf_float+0x322>
 8011fa2:	9b01      	ldr	r3, [sp, #4]
 8011fa4:	429e      	cmp	r6, r3
 8011fa6:	f67f aebf 	bls.w	8011d28 <_scanf_float+0x84>
 8011faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011fae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011fb2:	464a      	mov	r2, r9
 8011fb4:	4640      	mov	r0, r8
 8011fb6:	4798      	blx	r3
 8011fb8:	6923      	ldr	r3, [r4, #16]
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	6123      	str	r3, [r4, #16]
 8011fbe:	e7f0      	b.n	8011fa2 <_scanf_float+0x2fe>
 8011fc0:	46aa      	mov	sl, r5
 8011fc2:	46b3      	mov	fp, r6
 8011fc4:	e7de      	b.n	8011f84 <_scanf_float+0x2e0>
 8011fc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011fca:	6923      	ldr	r3, [r4, #16]
 8011fcc:	2965      	cmp	r1, #101	@ 0x65
 8011fce:	f103 33ff 	add.w	r3, r3, #4294967295
 8011fd2:	f106 35ff 	add.w	r5, r6, #4294967295
 8011fd6:	6123      	str	r3, [r4, #16]
 8011fd8:	d00c      	beq.n	8011ff4 <_scanf_float+0x350>
 8011fda:	2945      	cmp	r1, #69	@ 0x45
 8011fdc:	d00a      	beq.n	8011ff4 <_scanf_float+0x350>
 8011fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011fe2:	464a      	mov	r2, r9
 8011fe4:	4640      	mov	r0, r8
 8011fe6:	4798      	blx	r3
 8011fe8:	6923      	ldr	r3, [r4, #16]
 8011fea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	1eb5      	subs	r5, r6, #2
 8011ff2:	6123      	str	r3, [r4, #16]
 8011ff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ff8:	464a      	mov	r2, r9
 8011ffa:	4640      	mov	r0, r8
 8011ffc:	4798      	blx	r3
 8011ffe:	462e      	mov	r6, r5
 8012000:	6822      	ldr	r2, [r4, #0]
 8012002:	f012 0210 	ands.w	r2, r2, #16
 8012006:	d001      	beq.n	801200c <_scanf_float+0x368>
 8012008:	2000      	movs	r0, #0
 801200a:	e68e      	b.n	8011d2a <_scanf_float+0x86>
 801200c:	7032      	strb	r2, [r6, #0]
 801200e:	6823      	ldr	r3, [r4, #0]
 8012010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8012014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012018:	d125      	bne.n	8012066 <_scanf_float+0x3c2>
 801201a:	9b02      	ldr	r3, [sp, #8]
 801201c:	429f      	cmp	r7, r3
 801201e:	d00a      	beq.n	8012036 <_scanf_float+0x392>
 8012020:	1bda      	subs	r2, r3, r7
 8012022:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8012026:	429e      	cmp	r6, r3
 8012028:	bf28      	it	cs
 801202a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801202e:	4922      	ldr	r1, [pc, #136]	@ (80120b8 <_scanf_float+0x414>)
 8012030:	4630      	mov	r0, r6
 8012032:	f000 f93d 	bl	80122b0 <siprintf>
 8012036:	9901      	ldr	r1, [sp, #4]
 8012038:	2200      	movs	r2, #0
 801203a:	4640      	mov	r0, r8
 801203c:	f002 fc94 	bl	8014968 <_strtod_r>
 8012040:	9b03      	ldr	r3, [sp, #12]
 8012042:	6821      	ldr	r1, [r4, #0]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f011 0f02 	tst.w	r1, #2
 801204a:	ec57 6b10 	vmov	r6, r7, d0
 801204e:	f103 0204 	add.w	r2, r3, #4
 8012052:	d015      	beq.n	8012080 <_scanf_float+0x3dc>
 8012054:	9903      	ldr	r1, [sp, #12]
 8012056:	600a      	str	r2, [r1, #0]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	e9c3 6700 	strd	r6, r7, [r3]
 801205e:	68e3      	ldr	r3, [r4, #12]
 8012060:	3301      	adds	r3, #1
 8012062:	60e3      	str	r3, [r4, #12]
 8012064:	e7d0      	b.n	8012008 <_scanf_float+0x364>
 8012066:	9b04      	ldr	r3, [sp, #16]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d0e4      	beq.n	8012036 <_scanf_float+0x392>
 801206c:	9905      	ldr	r1, [sp, #20]
 801206e:	230a      	movs	r3, #10
 8012070:	3101      	adds	r1, #1
 8012072:	4640      	mov	r0, r8
 8012074:	f002 fcf8 	bl	8014a68 <_strtol_r>
 8012078:	9b04      	ldr	r3, [sp, #16]
 801207a:	9e05      	ldr	r6, [sp, #20]
 801207c:	1ac2      	subs	r2, r0, r3
 801207e:	e7d0      	b.n	8012022 <_scanf_float+0x37e>
 8012080:	f011 0f04 	tst.w	r1, #4
 8012084:	9903      	ldr	r1, [sp, #12]
 8012086:	600a      	str	r2, [r1, #0]
 8012088:	d1e6      	bne.n	8012058 <_scanf_float+0x3b4>
 801208a:	681d      	ldr	r5, [r3, #0]
 801208c:	4632      	mov	r2, r6
 801208e:	463b      	mov	r3, r7
 8012090:	4630      	mov	r0, r6
 8012092:	4639      	mov	r1, r7
 8012094:	f7ee fd72 	bl	8000b7c <__aeabi_dcmpun>
 8012098:	b128      	cbz	r0, 80120a6 <_scanf_float+0x402>
 801209a:	4808      	ldr	r0, [pc, #32]	@ (80120bc <_scanf_float+0x418>)
 801209c:	f000 fa5a 	bl	8012554 <nanf>
 80120a0:	ed85 0a00 	vstr	s0, [r5]
 80120a4:	e7db      	b.n	801205e <_scanf_float+0x3ba>
 80120a6:	4630      	mov	r0, r6
 80120a8:	4639      	mov	r1, r7
 80120aa:	f7ee fdc5 	bl	8000c38 <__aeabi_d2f>
 80120ae:	6028      	str	r0, [r5, #0]
 80120b0:	e7d5      	b.n	801205e <_scanf_float+0x3ba>
 80120b2:	2700      	movs	r7, #0
 80120b4:	e62e      	b.n	8011d14 <_scanf_float+0x70>
 80120b6:	bf00      	nop
 80120b8:	08016664 	.word	0x08016664
 80120bc:	080167a5 	.word	0x080167a5

080120c0 <std>:
 80120c0:	2300      	movs	r3, #0
 80120c2:	b510      	push	{r4, lr}
 80120c4:	4604      	mov	r4, r0
 80120c6:	e9c0 3300 	strd	r3, r3, [r0]
 80120ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80120ce:	6083      	str	r3, [r0, #8]
 80120d0:	8181      	strh	r1, [r0, #12]
 80120d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80120d4:	81c2      	strh	r2, [r0, #14]
 80120d6:	6183      	str	r3, [r0, #24]
 80120d8:	4619      	mov	r1, r3
 80120da:	2208      	movs	r2, #8
 80120dc:	305c      	adds	r0, #92	@ 0x5c
 80120de:	f000 f94c 	bl	801237a <memset>
 80120e2:	4b0d      	ldr	r3, [pc, #52]	@ (8012118 <std+0x58>)
 80120e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80120e6:	4b0d      	ldr	r3, [pc, #52]	@ (801211c <std+0x5c>)
 80120e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80120ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012120 <std+0x60>)
 80120ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80120ee:	4b0d      	ldr	r3, [pc, #52]	@ (8012124 <std+0x64>)
 80120f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80120f2:	4b0d      	ldr	r3, [pc, #52]	@ (8012128 <std+0x68>)
 80120f4:	6224      	str	r4, [r4, #32]
 80120f6:	429c      	cmp	r4, r3
 80120f8:	d006      	beq.n	8012108 <std+0x48>
 80120fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80120fe:	4294      	cmp	r4, r2
 8012100:	d002      	beq.n	8012108 <std+0x48>
 8012102:	33d0      	adds	r3, #208	@ 0xd0
 8012104:	429c      	cmp	r4, r3
 8012106:	d105      	bne.n	8012114 <std+0x54>
 8012108:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801210c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012110:	f000 ba0e 	b.w	8012530 <__retarget_lock_init_recursive>
 8012114:	bd10      	pop	{r4, pc}
 8012116:	bf00      	nop
 8012118:	080122f5 	.word	0x080122f5
 801211c:	08012317 	.word	0x08012317
 8012120:	0801234f 	.word	0x0801234f
 8012124:	08012373 	.word	0x08012373
 8012128:	2000429c 	.word	0x2000429c

0801212c <stdio_exit_handler>:
 801212c:	4a02      	ldr	r2, [pc, #8]	@ (8012138 <stdio_exit_handler+0xc>)
 801212e:	4903      	ldr	r1, [pc, #12]	@ (801213c <stdio_exit_handler+0x10>)
 8012130:	4803      	ldr	r0, [pc, #12]	@ (8012140 <stdio_exit_handler+0x14>)
 8012132:	f000 b869 	b.w	8012208 <_fwalk_sglue>
 8012136:	bf00      	nop
 8012138:	20000030 	.word	0x20000030
 801213c:	08014e25 	.word	0x08014e25
 8012140:	20000040 	.word	0x20000040

08012144 <cleanup_stdio>:
 8012144:	6841      	ldr	r1, [r0, #4]
 8012146:	4b0c      	ldr	r3, [pc, #48]	@ (8012178 <cleanup_stdio+0x34>)
 8012148:	4299      	cmp	r1, r3
 801214a:	b510      	push	{r4, lr}
 801214c:	4604      	mov	r4, r0
 801214e:	d001      	beq.n	8012154 <cleanup_stdio+0x10>
 8012150:	f002 fe68 	bl	8014e24 <_fflush_r>
 8012154:	68a1      	ldr	r1, [r4, #8]
 8012156:	4b09      	ldr	r3, [pc, #36]	@ (801217c <cleanup_stdio+0x38>)
 8012158:	4299      	cmp	r1, r3
 801215a:	d002      	beq.n	8012162 <cleanup_stdio+0x1e>
 801215c:	4620      	mov	r0, r4
 801215e:	f002 fe61 	bl	8014e24 <_fflush_r>
 8012162:	68e1      	ldr	r1, [r4, #12]
 8012164:	4b06      	ldr	r3, [pc, #24]	@ (8012180 <cleanup_stdio+0x3c>)
 8012166:	4299      	cmp	r1, r3
 8012168:	d004      	beq.n	8012174 <cleanup_stdio+0x30>
 801216a:	4620      	mov	r0, r4
 801216c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012170:	f002 be58 	b.w	8014e24 <_fflush_r>
 8012174:	bd10      	pop	{r4, pc}
 8012176:	bf00      	nop
 8012178:	2000429c 	.word	0x2000429c
 801217c:	20004304 	.word	0x20004304
 8012180:	2000436c 	.word	0x2000436c

08012184 <global_stdio_init.part.0>:
 8012184:	b510      	push	{r4, lr}
 8012186:	4b0b      	ldr	r3, [pc, #44]	@ (80121b4 <global_stdio_init.part.0+0x30>)
 8012188:	4c0b      	ldr	r4, [pc, #44]	@ (80121b8 <global_stdio_init.part.0+0x34>)
 801218a:	4a0c      	ldr	r2, [pc, #48]	@ (80121bc <global_stdio_init.part.0+0x38>)
 801218c:	601a      	str	r2, [r3, #0]
 801218e:	4620      	mov	r0, r4
 8012190:	2200      	movs	r2, #0
 8012192:	2104      	movs	r1, #4
 8012194:	f7ff ff94 	bl	80120c0 <std>
 8012198:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801219c:	2201      	movs	r2, #1
 801219e:	2109      	movs	r1, #9
 80121a0:	f7ff ff8e 	bl	80120c0 <std>
 80121a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80121a8:	2202      	movs	r2, #2
 80121aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121ae:	2112      	movs	r1, #18
 80121b0:	f7ff bf86 	b.w	80120c0 <std>
 80121b4:	200043d4 	.word	0x200043d4
 80121b8:	2000429c 	.word	0x2000429c
 80121bc:	0801212d 	.word	0x0801212d

080121c0 <__sfp_lock_acquire>:
 80121c0:	4801      	ldr	r0, [pc, #4]	@ (80121c8 <__sfp_lock_acquire+0x8>)
 80121c2:	f000 b9b6 	b.w	8012532 <__retarget_lock_acquire_recursive>
 80121c6:	bf00      	nop
 80121c8:	200043dd 	.word	0x200043dd

080121cc <__sfp_lock_release>:
 80121cc:	4801      	ldr	r0, [pc, #4]	@ (80121d4 <__sfp_lock_release+0x8>)
 80121ce:	f000 b9b1 	b.w	8012534 <__retarget_lock_release_recursive>
 80121d2:	bf00      	nop
 80121d4:	200043dd 	.word	0x200043dd

080121d8 <__sinit>:
 80121d8:	b510      	push	{r4, lr}
 80121da:	4604      	mov	r4, r0
 80121dc:	f7ff fff0 	bl	80121c0 <__sfp_lock_acquire>
 80121e0:	6a23      	ldr	r3, [r4, #32]
 80121e2:	b11b      	cbz	r3, 80121ec <__sinit+0x14>
 80121e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121e8:	f7ff bff0 	b.w	80121cc <__sfp_lock_release>
 80121ec:	4b04      	ldr	r3, [pc, #16]	@ (8012200 <__sinit+0x28>)
 80121ee:	6223      	str	r3, [r4, #32]
 80121f0:	4b04      	ldr	r3, [pc, #16]	@ (8012204 <__sinit+0x2c>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1f5      	bne.n	80121e4 <__sinit+0xc>
 80121f8:	f7ff ffc4 	bl	8012184 <global_stdio_init.part.0>
 80121fc:	e7f2      	b.n	80121e4 <__sinit+0xc>
 80121fe:	bf00      	nop
 8012200:	08012145 	.word	0x08012145
 8012204:	200043d4 	.word	0x200043d4

08012208 <_fwalk_sglue>:
 8012208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801220c:	4607      	mov	r7, r0
 801220e:	4688      	mov	r8, r1
 8012210:	4614      	mov	r4, r2
 8012212:	2600      	movs	r6, #0
 8012214:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012218:	f1b9 0901 	subs.w	r9, r9, #1
 801221c:	d505      	bpl.n	801222a <_fwalk_sglue+0x22>
 801221e:	6824      	ldr	r4, [r4, #0]
 8012220:	2c00      	cmp	r4, #0
 8012222:	d1f7      	bne.n	8012214 <_fwalk_sglue+0xc>
 8012224:	4630      	mov	r0, r6
 8012226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801222a:	89ab      	ldrh	r3, [r5, #12]
 801222c:	2b01      	cmp	r3, #1
 801222e:	d907      	bls.n	8012240 <_fwalk_sglue+0x38>
 8012230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012234:	3301      	adds	r3, #1
 8012236:	d003      	beq.n	8012240 <_fwalk_sglue+0x38>
 8012238:	4629      	mov	r1, r5
 801223a:	4638      	mov	r0, r7
 801223c:	47c0      	blx	r8
 801223e:	4306      	orrs	r6, r0
 8012240:	3568      	adds	r5, #104	@ 0x68
 8012242:	e7e9      	b.n	8012218 <_fwalk_sglue+0x10>

08012244 <sniprintf>:
 8012244:	b40c      	push	{r2, r3}
 8012246:	b530      	push	{r4, r5, lr}
 8012248:	4b18      	ldr	r3, [pc, #96]	@ (80122ac <sniprintf+0x68>)
 801224a:	1e0c      	subs	r4, r1, #0
 801224c:	681d      	ldr	r5, [r3, #0]
 801224e:	b09d      	sub	sp, #116	@ 0x74
 8012250:	da08      	bge.n	8012264 <sniprintf+0x20>
 8012252:	238b      	movs	r3, #139	@ 0x8b
 8012254:	602b      	str	r3, [r5, #0]
 8012256:	f04f 30ff 	mov.w	r0, #4294967295
 801225a:	b01d      	add	sp, #116	@ 0x74
 801225c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012260:	b002      	add	sp, #8
 8012262:	4770      	bx	lr
 8012264:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012268:	f8ad 3014 	strh.w	r3, [sp, #20]
 801226c:	f04f 0300 	mov.w	r3, #0
 8012270:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012272:	bf14      	ite	ne
 8012274:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012278:	4623      	moveq	r3, r4
 801227a:	9304      	str	r3, [sp, #16]
 801227c:	9307      	str	r3, [sp, #28]
 801227e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012282:	9002      	str	r0, [sp, #8]
 8012284:	9006      	str	r0, [sp, #24]
 8012286:	f8ad 3016 	strh.w	r3, [sp, #22]
 801228a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801228c:	ab21      	add	r3, sp, #132	@ 0x84
 801228e:	a902      	add	r1, sp, #8
 8012290:	4628      	mov	r0, r5
 8012292:	9301      	str	r3, [sp, #4]
 8012294:	f002 fc46 	bl	8014b24 <_svfiprintf_r>
 8012298:	1c43      	adds	r3, r0, #1
 801229a:	bfbc      	itt	lt
 801229c:	238b      	movlt	r3, #139	@ 0x8b
 801229e:	602b      	strlt	r3, [r5, #0]
 80122a0:	2c00      	cmp	r4, #0
 80122a2:	d0da      	beq.n	801225a <sniprintf+0x16>
 80122a4:	9b02      	ldr	r3, [sp, #8]
 80122a6:	2200      	movs	r2, #0
 80122a8:	701a      	strb	r2, [r3, #0]
 80122aa:	e7d6      	b.n	801225a <sniprintf+0x16>
 80122ac:	2000003c 	.word	0x2000003c

080122b0 <siprintf>:
 80122b0:	b40e      	push	{r1, r2, r3}
 80122b2:	b510      	push	{r4, lr}
 80122b4:	b09d      	sub	sp, #116	@ 0x74
 80122b6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80122b8:	9002      	str	r0, [sp, #8]
 80122ba:	9006      	str	r0, [sp, #24]
 80122bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80122c0:	480a      	ldr	r0, [pc, #40]	@ (80122ec <siprintf+0x3c>)
 80122c2:	9107      	str	r1, [sp, #28]
 80122c4:	9104      	str	r1, [sp, #16]
 80122c6:	490a      	ldr	r1, [pc, #40]	@ (80122f0 <siprintf+0x40>)
 80122c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80122cc:	9105      	str	r1, [sp, #20]
 80122ce:	2400      	movs	r4, #0
 80122d0:	a902      	add	r1, sp, #8
 80122d2:	6800      	ldr	r0, [r0, #0]
 80122d4:	9301      	str	r3, [sp, #4]
 80122d6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80122d8:	f002 fc24 	bl	8014b24 <_svfiprintf_r>
 80122dc:	9b02      	ldr	r3, [sp, #8]
 80122de:	701c      	strb	r4, [r3, #0]
 80122e0:	b01d      	add	sp, #116	@ 0x74
 80122e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122e6:	b003      	add	sp, #12
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop
 80122ec:	2000003c 	.word	0x2000003c
 80122f0:	ffff0208 	.word	0xffff0208

080122f4 <__sread>:
 80122f4:	b510      	push	{r4, lr}
 80122f6:	460c      	mov	r4, r1
 80122f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122fc:	f000 f8ca 	bl	8012494 <_read_r>
 8012300:	2800      	cmp	r0, #0
 8012302:	bfab      	itete	ge
 8012304:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012306:	89a3      	ldrhlt	r3, [r4, #12]
 8012308:	181b      	addge	r3, r3, r0
 801230a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801230e:	bfac      	ite	ge
 8012310:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012312:	81a3      	strhlt	r3, [r4, #12]
 8012314:	bd10      	pop	{r4, pc}

08012316 <__swrite>:
 8012316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801231a:	461f      	mov	r7, r3
 801231c:	898b      	ldrh	r3, [r1, #12]
 801231e:	05db      	lsls	r3, r3, #23
 8012320:	4605      	mov	r5, r0
 8012322:	460c      	mov	r4, r1
 8012324:	4616      	mov	r6, r2
 8012326:	d505      	bpl.n	8012334 <__swrite+0x1e>
 8012328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801232c:	2302      	movs	r3, #2
 801232e:	2200      	movs	r2, #0
 8012330:	f000 f89e 	bl	8012470 <_lseek_r>
 8012334:	89a3      	ldrh	r3, [r4, #12]
 8012336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801233a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801233e:	81a3      	strh	r3, [r4, #12]
 8012340:	4632      	mov	r2, r6
 8012342:	463b      	mov	r3, r7
 8012344:	4628      	mov	r0, r5
 8012346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801234a:	f000 b8b5 	b.w	80124b8 <_write_r>

0801234e <__sseek>:
 801234e:	b510      	push	{r4, lr}
 8012350:	460c      	mov	r4, r1
 8012352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012356:	f000 f88b 	bl	8012470 <_lseek_r>
 801235a:	1c43      	adds	r3, r0, #1
 801235c:	89a3      	ldrh	r3, [r4, #12]
 801235e:	bf15      	itete	ne
 8012360:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012362:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012366:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801236a:	81a3      	strheq	r3, [r4, #12]
 801236c:	bf18      	it	ne
 801236e:	81a3      	strhne	r3, [r4, #12]
 8012370:	bd10      	pop	{r4, pc}

08012372 <__sclose>:
 8012372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012376:	f000 b80d 	b.w	8012394 <_close_r>

0801237a <memset>:
 801237a:	4402      	add	r2, r0
 801237c:	4603      	mov	r3, r0
 801237e:	4293      	cmp	r3, r2
 8012380:	d100      	bne.n	8012384 <memset+0xa>
 8012382:	4770      	bx	lr
 8012384:	f803 1b01 	strb.w	r1, [r3], #1
 8012388:	e7f9      	b.n	801237e <memset+0x4>
	...

0801238c <_localeconv_r>:
 801238c:	4800      	ldr	r0, [pc, #0]	@ (8012390 <_localeconv_r+0x4>)
 801238e:	4770      	bx	lr
 8012390:	2000017c 	.word	0x2000017c

08012394 <_close_r>:
 8012394:	b538      	push	{r3, r4, r5, lr}
 8012396:	4d06      	ldr	r5, [pc, #24]	@ (80123b0 <_close_r+0x1c>)
 8012398:	2300      	movs	r3, #0
 801239a:	4604      	mov	r4, r0
 801239c:	4608      	mov	r0, r1
 801239e:	602b      	str	r3, [r5, #0]
 80123a0:	f7f0 fa72 	bl	8002888 <_close>
 80123a4:	1c43      	adds	r3, r0, #1
 80123a6:	d102      	bne.n	80123ae <_close_r+0x1a>
 80123a8:	682b      	ldr	r3, [r5, #0]
 80123aa:	b103      	cbz	r3, 80123ae <_close_r+0x1a>
 80123ac:	6023      	str	r3, [r4, #0]
 80123ae:	bd38      	pop	{r3, r4, r5, pc}
 80123b0:	200043d8 	.word	0x200043d8

080123b4 <_reclaim_reent>:
 80123b4:	4b2d      	ldr	r3, [pc, #180]	@ (801246c <_reclaim_reent+0xb8>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	4283      	cmp	r3, r0
 80123ba:	b570      	push	{r4, r5, r6, lr}
 80123bc:	4604      	mov	r4, r0
 80123be:	d053      	beq.n	8012468 <_reclaim_reent+0xb4>
 80123c0:	69c3      	ldr	r3, [r0, #28]
 80123c2:	b31b      	cbz	r3, 801240c <_reclaim_reent+0x58>
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	b163      	cbz	r3, 80123e2 <_reclaim_reent+0x2e>
 80123c8:	2500      	movs	r5, #0
 80123ca:	69e3      	ldr	r3, [r4, #28]
 80123cc:	68db      	ldr	r3, [r3, #12]
 80123ce:	5959      	ldr	r1, [r3, r5]
 80123d0:	b9b1      	cbnz	r1, 8012400 <_reclaim_reent+0x4c>
 80123d2:	3504      	adds	r5, #4
 80123d4:	2d80      	cmp	r5, #128	@ 0x80
 80123d6:	d1f8      	bne.n	80123ca <_reclaim_reent+0x16>
 80123d8:	69e3      	ldr	r3, [r4, #28]
 80123da:	4620      	mov	r0, r4
 80123dc:	68d9      	ldr	r1, [r3, #12]
 80123de:	f000 ff17 	bl	8013210 <_free_r>
 80123e2:	69e3      	ldr	r3, [r4, #28]
 80123e4:	6819      	ldr	r1, [r3, #0]
 80123e6:	b111      	cbz	r1, 80123ee <_reclaim_reent+0x3a>
 80123e8:	4620      	mov	r0, r4
 80123ea:	f000 ff11 	bl	8013210 <_free_r>
 80123ee:	69e3      	ldr	r3, [r4, #28]
 80123f0:	689d      	ldr	r5, [r3, #8]
 80123f2:	b15d      	cbz	r5, 801240c <_reclaim_reent+0x58>
 80123f4:	4629      	mov	r1, r5
 80123f6:	4620      	mov	r0, r4
 80123f8:	682d      	ldr	r5, [r5, #0]
 80123fa:	f000 ff09 	bl	8013210 <_free_r>
 80123fe:	e7f8      	b.n	80123f2 <_reclaim_reent+0x3e>
 8012400:	680e      	ldr	r6, [r1, #0]
 8012402:	4620      	mov	r0, r4
 8012404:	f000 ff04 	bl	8013210 <_free_r>
 8012408:	4631      	mov	r1, r6
 801240a:	e7e1      	b.n	80123d0 <_reclaim_reent+0x1c>
 801240c:	6961      	ldr	r1, [r4, #20]
 801240e:	b111      	cbz	r1, 8012416 <_reclaim_reent+0x62>
 8012410:	4620      	mov	r0, r4
 8012412:	f000 fefd 	bl	8013210 <_free_r>
 8012416:	69e1      	ldr	r1, [r4, #28]
 8012418:	b111      	cbz	r1, 8012420 <_reclaim_reent+0x6c>
 801241a:	4620      	mov	r0, r4
 801241c:	f000 fef8 	bl	8013210 <_free_r>
 8012420:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012422:	b111      	cbz	r1, 801242a <_reclaim_reent+0x76>
 8012424:	4620      	mov	r0, r4
 8012426:	f000 fef3 	bl	8013210 <_free_r>
 801242a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801242c:	b111      	cbz	r1, 8012434 <_reclaim_reent+0x80>
 801242e:	4620      	mov	r0, r4
 8012430:	f000 feee 	bl	8013210 <_free_r>
 8012434:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012436:	b111      	cbz	r1, 801243e <_reclaim_reent+0x8a>
 8012438:	4620      	mov	r0, r4
 801243a:	f000 fee9 	bl	8013210 <_free_r>
 801243e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012440:	b111      	cbz	r1, 8012448 <_reclaim_reent+0x94>
 8012442:	4620      	mov	r0, r4
 8012444:	f000 fee4 	bl	8013210 <_free_r>
 8012448:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801244a:	b111      	cbz	r1, 8012452 <_reclaim_reent+0x9e>
 801244c:	4620      	mov	r0, r4
 801244e:	f000 fedf 	bl	8013210 <_free_r>
 8012452:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012454:	b111      	cbz	r1, 801245c <_reclaim_reent+0xa8>
 8012456:	4620      	mov	r0, r4
 8012458:	f000 feda 	bl	8013210 <_free_r>
 801245c:	6a23      	ldr	r3, [r4, #32]
 801245e:	b11b      	cbz	r3, 8012468 <_reclaim_reent+0xb4>
 8012460:	4620      	mov	r0, r4
 8012462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012466:	4718      	bx	r3
 8012468:	bd70      	pop	{r4, r5, r6, pc}
 801246a:	bf00      	nop
 801246c:	2000003c 	.word	0x2000003c

08012470 <_lseek_r>:
 8012470:	b538      	push	{r3, r4, r5, lr}
 8012472:	4d07      	ldr	r5, [pc, #28]	@ (8012490 <_lseek_r+0x20>)
 8012474:	4604      	mov	r4, r0
 8012476:	4608      	mov	r0, r1
 8012478:	4611      	mov	r1, r2
 801247a:	2200      	movs	r2, #0
 801247c:	602a      	str	r2, [r5, #0]
 801247e:	461a      	mov	r2, r3
 8012480:	f7f0 fa29 	bl	80028d6 <_lseek>
 8012484:	1c43      	adds	r3, r0, #1
 8012486:	d102      	bne.n	801248e <_lseek_r+0x1e>
 8012488:	682b      	ldr	r3, [r5, #0]
 801248a:	b103      	cbz	r3, 801248e <_lseek_r+0x1e>
 801248c:	6023      	str	r3, [r4, #0]
 801248e:	bd38      	pop	{r3, r4, r5, pc}
 8012490:	200043d8 	.word	0x200043d8

08012494 <_read_r>:
 8012494:	b538      	push	{r3, r4, r5, lr}
 8012496:	4d07      	ldr	r5, [pc, #28]	@ (80124b4 <_read_r+0x20>)
 8012498:	4604      	mov	r4, r0
 801249a:	4608      	mov	r0, r1
 801249c:	4611      	mov	r1, r2
 801249e:	2200      	movs	r2, #0
 80124a0:	602a      	str	r2, [r5, #0]
 80124a2:	461a      	mov	r2, r3
 80124a4:	f7f0 f9b7 	bl	8002816 <_read>
 80124a8:	1c43      	adds	r3, r0, #1
 80124aa:	d102      	bne.n	80124b2 <_read_r+0x1e>
 80124ac:	682b      	ldr	r3, [r5, #0]
 80124ae:	b103      	cbz	r3, 80124b2 <_read_r+0x1e>
 80124b0:	6023      	str	r3, [r4, #0]
 80124b2:	bd38      	pop	{r3, r4, r5, pc}
 80124b4:	200043d8 	.word	0x200043d8

080124b8 <_write_r>:
 80124b8:	b538      	push	{r3, r4, r5, lr}
 80124ba:	4d07      	ldr	r5, [pc, #28]	@ (80124d8 <_write_r+0x20>)
 80124bc:	4604      	mov	r4, r0
 80124be:	4608      	mov	r0, r1
 80124c0:	4611      	mov	r1, r2
 80124c2:	2200      	movs	r2, #0
 80124c4:	602a      	str	r2, [r5, #0]
 80124c6:	461a      	mov	r2, r3
 80124c8:	f7f0 f9c2 	bl	8002850 <_write>
 80124cc:	1c43      	adds	r3, r0, #1
 80124ce:	d102      	bne.n	80124d6 <_write_r+0x1e>
 80124d0:	682b      	ldr	r3, [r5, #0]
 80124d2:	b103      	cbz	r3, 80124d6 <_write_r+0x1e>
 80124d4:	6023      	str	r3, [r4, #0]
 80124d6:	bd38      	pop	{r3, r4, r5, pc}
 80124d8:	200043d8 	.word	0x200043d8

080124dc <__errno>:
 80124dc:	4b01      	ldr	r3, [pc, #4]	@ (80124e4 <__errno+0x8>)
 80124de:	6818      	ldr	r0, [r3, #0]
 80124e0:	4770      	bx	lr
 80124e2:	bf00      	nop
 80124e4:	2000003c 	.word	0x2000003c

080124e8 <__libc_init_array>:
 80124e8:	b570      	push	{r4, r5, r6, lr}
 80124ea:	4d0d      	ldr	r5, [pc, #52]	@ (8012520 <__libc_init_array+0x38>)
 80124ec:	4c0d      	ldr	r4, [pc, #52]	@ (8012524 <__libc_init_array+0x3c>)
 80124ee:	1b64      	subs	r4, r4, r5
 80124f0:	10a4      	asrs	r4, r4, #2
 80124f2:	2600      	movs	r6, #0
 80124f4:	42a6      	cmp	r6, r4
 80124f6:	d109      	bne.n	801250c <__libc_init_array+0x24>
 80124f8:	4d0b      	ldr	r5, [pc, #44]	@ (8012528 <__libc_init_array+0x40>)
 80124fa:	4c0c      	ldr	r4, [pc, #48]	@ (801252c <__libc_init_array+0x44>)
 80124fc:	f003 ff3e 	bl	801637c <_init>
 8012500:	1b64      	subs	r4, r4, r5
 8012502:	10a4      	asrs	r4, r4, #2
 8012504:	2600      	movs	r6, #0
 8012506:	42a6      	cmp	r6, r4
 8012508:	d105      	bne.n	8012516 <__libc_init_array+0x2e>
 801250a:	bd70      	pop	{r4, r5, r6, pc}
 801250c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012510:	4798      	blx	r3
 8012512:	3601      	adds	r6, #1
 8012514:	e7ee      	b.n	80124f4 <__libc_init_array+0xc>
 8012516:	f855 3b04 	ldr.w	r3, [r5], #4
 801251a:	4798      	blx	r3
 801251c:	3601      	adds	r6, #1
 801251e:	e7f2      	b.n	8012506 <__libc_init_array+0x1e>
 8012520:	08016a7c 	.word	0x08016a7c
 8012524:	08016a7c 	.word	0x08016a7c
 8012528:	08016a7c 	.word	0x08016a7c
 801252c:	08016a80 	.word	0x08016a80

08012530 <__retarget_lock_init_recursive>:
 8012530:	4770      	bx	lr

08012532 <__retarget_lock_acquire_recursive>:
 8012532:	4770      	bx	lr

08012534 <__retarget_lock_release_recursive>:
 8012534:	4770      	bx	lr

08012536 <memcpy>:
 8012536:	440a      	add	r2, r1
 8012538:	4291      	cmp	r1, r2
 801253a:	f100 33ff 	add.w	r3, r0, #4294967295
 801253e:	d100      	bne.n	8012542 <memcpy+0xc>
 8012540:	4770      	bx	lr
 8012542:	b510      	push	{r4, lr}
 8012544:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012548:	f803 4f01 	strb.w	r4, [r3, #1]!
 801254c:	4291      	cmp	r1, r2
 801254e:	d1f9      	bne.n	8012544 <memcpy+0xe>
 8012550:	bd10      	pop	{r4, pc}
	...

08012554 <nanf>:
 8012554:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801255c <nanf+0x8>
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	7fc00000 	.word	0x7fc00000

08012560 <quorem>:
 8012560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012564:	6903      	ldr	r3, [r0, #16]
 8012566:	690c      	ldr	r4, [r1, #16]
 8012568:	42a3      	cmp	r3, r4
 801256a:	4607      	mov	r7, r0
 801256c:	db7e      	blt.n	801266c <quorem+0x10c>
 801256e:	3c01      	subs	r4, #1
 8012570:	f101 0814 	add.w	r8, r1, #20
 8012574:	00a3      	lsls	r3, r4, #2
 8012576:	f100 0514 	add.w	r5, r0, #20
 801257a:	9300      	str	r3, [sp, #0]
 801257c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012580:	9301      	str	r3, [sp, #4]
 8012582:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801258a:	3301      	adds	r3, #1
 801258c:	429a      	cmp	r2, r3
 801258e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012592:	fbb2 f6f3 	udiv	r6, r2, r3
 8012596:	d32e      	bcc.n	80125f6 <quorem+0x96>
 8012598:	f04f 0a00 	mov.w	sl, #0
 801259c:	46c4      	mov	ip, r8
 801259e:	46ae      	mov	lr, r5
 80125a0:	46d3      	mov	fp, sl
 80125a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80125a6:	b298      	uxth	r0, r3
 80125a8:	fb06 a000 	mla	r0, r6, r0, sl
 80125ac:	0c02      	lsrs	r2, r0, #16
 80125ae:	0c1b      	lsrs	r3, r3, #16
 80125b0:	fb06 2303 	mla	r3, r6, r3, r2
 80125b4:	f8de 2000 	ldr.w	r2, [lr]
 80125b8:	b280      	uxth	r0, r0
 80125ba:	b292      	uxth	r2, r2
 80125bc:	1a12      	subs	r2, r2, r0
 80125be:	445a      	add	r2, fp
 80125c0:	f8de 0000 	ldr.w	r0, [lr]
 80125c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80125ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80125d2:	b292      	uxth	r2, r2
 80125d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80125d8:	45e1      	cmp	r9, ip
 80125da:	f84e 2b04 	str.w	r2, [lr], #4
 80125de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80125e2:	d2de      	bcs.n	80125a2 <quorem+0x42>
 80125e4:	9b00      	ldr	r3, [sp, #0]
 80125e6:	58eb      	ldr	r3, [r5, r3]
 80125e8:	b92b      	cbnz	r3, 80125f6 <quorem+0x96>
 80125ea:	9b01      	ldr	r3, [sp, #4]
 80125ec:	3b04      	subs	r3, #4
 80125ee:	429d      	cmp	r5, r3
 80125f0:	461a      	mov	r2, r3
 80125f2:	d32f      	bcc.n	8012654 <quorem+0xf4>
 80125f4:	613c      	str	r4, [r7, #16]
 80125f6:	4638      	mov	r0, r7
 80125f8:	f001 f9c6 	bl	8013988 <__mcmp>
 80125fc:	2800      	cmp	r0, #0
 80125fe:	db25      	blt.n	801264c <quorem+0xec>
 8012600:	4629      	mov	r1, r5
 8012602:	2000      	movs	r0, #0
 8012604:	f858 2b04 	ldr.w	r2, [r8], #4
 8012608:	f8d1 c000 	ldr.w	ip, [r1]
 801260c:	fa1f fe82 	uxth.w	lr, r2
 8012610:	fa1f f38c 	uxth.w	r3, ip
 8012614:	eba3 030e 	sub.w	r3, r3, lr
 8012618:	4403      	add	r3, r0
 801261a:	0c12      	lsrs	r2, r2, #16
 801261c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012620:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012624:	b29b      	uxth	r3, r3
 8012626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801262a:	45c1      	cmp	r9, r8
 801262c:	f841 3b04 	str.w	r3, [r1], #4
 8012630:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012634:	d2e6      	bcs.n	8012604 <quorem+0xa4>
 8012636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801263a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801263e:	b922      	cbnz	r2, 801264a <quorem+0xea>
 8012640:	3b04      	subs	r3, #4
 8012642:	429d      	cmp	r5, r3
 8012644:	461a      	mov	r2, r3
 8012646:	d30b      	bcc.n	8012660 <quorem+0x100>
 8012648:	613c      	str	r4, [r7, #16]
 801264a:	3601      	adds	r6, #1
 801264c:	4630      	mov	r0, r6
 801264e:	b003      	add	sp, #12
 8012650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012654:	6812      	ldr	r2, [r2, #0]
 8012656:	3b04      	subs	r3, #4
 8012658:	2a00      	cmp	r2, #0
 801265a:	d1cb      	bne.n	80125f4 <quorem+0x94>
 801265c:	3c01      	subs	r4, #1
 801265e:	e7c6      	b.n	80125ee <quorem+0x8e>
 8012660:	6812      	ldr	r2, [r2, #0]
 8012662:	3b04      	subs	r3, #4
 8012664:	2a00      	cmp	r2, #0
 8012666:	d1ef      	bne.n	8012648 <quorem+0xe8>
 8012668:	3c01      	subs	r4, #1
 801266a:	e7ea      	b.n	8012642 <quorem+0xe2>
 801266c:	2000      	movs	r0, #0
 801266e:	e7ee      	b.n	801264e <quorem+0xee>

08012670 <_dtoa_r>:
 8012670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	69c7      	ldr	r7, [r0, #28]
 8012676:	b097      	sub	sp, #92	@ 0x5c
 8012678:	ed8d 0b04 	vstr	d0, [sp, #16]
 801267c:	ec55 4b10 	vmov	r4, r5, d0
 8012680:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8012682:	9107      	str	r1, [sp, #28]
 8012684:	4681      	mov	r9, r0
 8012686:	920c      	str	r2, [sp, #48]	@ 0x30
 8012688:	9311      	str	r3, [sp, #68]	@ 0x44
 801268a:	b97f      	cbnz	r7, 80126ac <_dtoa_r+0x3c>
 801268c:	2010      	movs	r0, #16
 801268e:	f000 fe09 	bl	80132a4 <malloc>
 8012692:	4602      	mov	r2, r0
 8012694:	f8c9 001c 	str.w	r0, [r9, #28]
 8012698:	b920      	cbnz	r0, 80126a4 <_dtoa_r+0x34>
 801269a:	4ba9      	ldr	r3, [pc, #676]	@ (8012940 <_dtoa_r+0x2d0>)
 801269c:	21ef      	movs	r1, #239	@ 0xef
 801269e:	48a9      	ldr	r0, [pc, #676]	@ (8012944 <_dtoa_r+0x2d4>)
 80126a0:	f002 fc2e 	bl	8014f00 <__assert_func>
 80126a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80126a8:	6007      	str	r7, [r0, #0]
 80126aa:	60c7      	str	r7, [r0, #12]
 80126ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80126b0:	6819      	ldr	r1, [r3, #0]
 80126b2:	b159      	cbz	r1, 80126cc <_dtoa_r+0x5c>
 80126b4:	685a      	ldr	r2, [r3, #4]
 80126b6:	604a      	str	r2, [r1, #4]
 80126b8:	2301      	movs	r3, #1
 80126ba:	4093      	lsls	r3, r2
 80126bc:	608b      	str	r3, [r1, #8]
 80126be:	4648      	mov	r0, r9
 80126c0:	f000 fee6 	bl	8013490 <_Bfree>
 80126c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80126c8:	2200      	movs	r2, #0
 80126ca:	601a      	str	r2, [r3, #0]
 80126cc:	1e2b      	subs	r3, r5, #0
 80126ce:	bfb9      	ittee	lt
 80126d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80126d4:	9305      	strlt	r3, [sp, #20]
 80126d6:	2300      	movge	r3, #0
 80126d8:	6033      	strge	r3, [r6, #0]
 80126da:	9f05      	ldr	r7, [sp, #20]
 80126dc:	4b9a      	ldr	r3, [pc, #616]	@ (8012948 <_dtoa_r+0x2d8>)
 80126de:	bfbc      	itt	lt
 80126e0:	2201      	movlt	r2, #1
 80126e2:	6032      	strlt	r2, [r6, #0]
 80126e4:	43bb      	bics	r3, r7
 80126e6:	d112      	bne.n	801270e <_dtoa_r+0x9e>
 80126e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80126ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80126ee:	6013      	str	r3, [r2, #0]
 80126f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80126f4:	4323      	orrs	r3, r4
 80126f6:	f000 855a 	beq.w	80131ae <_dtoa_r+0xb3e>
 80126fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80126fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801295c <_dtoa_r+0x2ec>
 8012700:	2b00      	cmp	r3, #0
 8012702:	f000 855c 	beq.w	80131be <_dtoa_r+0xb4e>
 8012706:	f10a 0303 	add.w	r3, sl, #3
 801270a:	f000 bd56 	b.w	80131ba <_dtoa_r+0xb4a>
 801270e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8012712:	2200      	movs	r2, #0
 8012714:	ec51 0b17 	vmov	r0, r1, d7
 8012718:	2300      	movs	r3, #0
 801271a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801271e:	f7ee f9fb 	bl	8000b18 <__aeabi_dcmpeq>
 8012722:	4680      	mov	r8, r0
 8012724:	b158      	cbz	r0, 801273e <_dtoa_r+0xce>
 8012726:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012728:	2301      	movs	r3, #1
 801272a:	6013      	str	r3, [r2, #0]
 801272c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801272e:	b113      	cbz	r3, 8012736 <_dtoa_r+0xc6>
 8012730:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012732:	4b86      	ldr	r3, [pc, #536]	@ (801294c <_dtoa_r+0x2dc>)
 8012734:	6013      	str	r3, [r2, #0]
 8012736:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8012960 <_dtoa_r+0x2f0>
 801273a:	f000 bd40 	b.w	80131be <_dtoa_r+0xb4e>
 801273e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8012742:	aa14      	add	r2, sp, #80	@ 0x50
 8012744:	a915      	add	r1, sp, #84	@ 0x54
 8012746:	4648      	mov	r0, r9
 8012748:	f001 fa3e 	bl	8013bc8 <__d2b>
 801274c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012750:	9002      	str	r0, [sp, #8]
 8012752:	2e00      	cmp	r6, #0
 8012754:	d078      	beq.n	8012848 <_dtoa_r+0x1d8>
 8012756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012758:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801275c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012760:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012764:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012768:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801276c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012770:	4619      	mov	r1, r3
 8012772:	2200      	movs	r2, #0
 8012774:	4b76      	ldr	r3, [pc, #472]	@ (8012950 <_dtoa_r+0x2e0>)
 8012776:	f7ed fdaf 	bl	80002d8 <__aeabi_dsub>
 801277a:	a36b      	add	r3, pc, #428	@ (adr r3, 8012928 <_dtoa_r+0x2b8>)
 801277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012780:	f7ed ff62 	bl	8000648 <__aeabi_dmul>
 8012784:	a36a      	add	r3, pc, #424	@ (adr r3, 8012930 <_dtoa_r+0x2c0>)
 8012786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278a:	f7ed fda7 	bl	80002dc <__adddf3>
 801278e:	4604      	mov	r4, r0
 8012790:	4630      	mov	r0, r6
 8012792:	460d      	mov	r5, r1
 8012794:	f7ed feee 	bl	8000574 <__aeabi_i2d>
 8012798:	a367      	add	r3, pc, #412	@ (adr r3, 8012938 <_dtoa_r+0x2c8>)
 801279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279e:	f7ed ff53 	bl	8000648 <__aeabi_dmul>
 80127a2:	4602      	mov	r2, r0
 80127a4:	460b      	mov	r3, r1
 80127a6:	4620      	mov	r0, r4
 80127a8:	4629      	mov	r1, r5
 80127aa:	f7ed fd97 	bl	80002dc <__adddf3>
 80127ae:	4604      	mov	r4, r0
 80127b0:	460d      	mov	r5, r1
 80127b2:	f7ee f9f9 	bl	8000ba8 <__aeabi_d2iz>
 80127b6:	2200      	movs	r2, #0
 80127b8:	4607      	mov	r7, r0
 80127ba:	2300      	movs	r3, #0
 80127bc:	4620      	mov	r0, r4
 80127be:	4629      	mov	r1, r5
 80127c0:	f7ee f9b4 	bl	8000b2c <__aeabi_dcmplt>
 80127c4:	b140      	cbz	r0, 80127d8 <_dtoa_r+0x168>
 80127c6:	4638      	mov	r0, r7
 80127c8:	f7ed fed4 	bl	8000574 <__aeabi_i2d>
 80127cc:	4622      	mov	r2, r4
 80127ce:	462b      	mov	r3, r5
 80127d0:	f7ee f9a2 	bl	8000b18 <__aeabi_dcmpeq>
 80127d4:	b900      	cbnz	r0, 80127d8 <_dtoa_r+0x168>
 80127d6:	3f01      	subs	r7, #1
 80127d8:	2f16      	cmp	r7, #22
 80127da:	d852      	bhi.n	8012882 <_dtoa_r+0x212>
 80127dc:	4b5d      	ldr	r3, [pc, #372]	@ (8012954 <_dtoa_r+0x2e4>)
 80127de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80127e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80127ea:	f7ee f99f 	bl	8000b2c <__aeabi_dcmplt>
 80127ee:	2800      	cmp	r0, #0
 80127f0:	d049      	beq.n	8012886 <_dtoa_r+0x216>
 80127f2:	3f01      	subs	r7, #1
 80127f4:	2300      	movs	r3, #0
 80127f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80127f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80127fa:	1b9b      	subs	r3, r3, r6
 80127fc:	1e5a      	subs	r2, r3, #1
 80127fe:	bf45      	ittet	mi
 8012800:	f1c3 0301 	rsbmi	r3, r3, #1
 8012804:	9300      	strmi	r3, [sp, #0]
 8012806:	2300      	movpl	r3, #0
 8012808:	2300      	movmi	r3, #0
 801280a:	9206      	str	r2, [sp, #24]
 801280c:	bf54      	ite	pl
 801280e:	9300      	strpl	r3, [sp, #0]
 8012810:	9306      	strmi	r3, [sp, #24]
 8012812:	2f00      	cmp	r7, #0
 8012814:	db39      	blt.n	801288a <_dtoa_r+0x21a>
 8012816:	9b06      	ldr	r3, [sp, #24]
 8012818:	970d      	str	r7, [sp, #52]	@ 0x34
 801281a:	443b      	add	r3, r7
 801281c:	9306      	str	r3, [sp, #24]
 801281e:	2300      	movs	r3, #0
 8012820:	9308      	str	r3, [sp, #32]
 8012822:	9b07      	ldr	r3, [sp, #28]
 8012824:	2b09      	cmp	r3, #9
 8012826:	d863      	bhi.n	80128f0 <_dtoa_r+0x280>
 8012828:	2b05      	cmp	r3, #5
 801282a:	bfc4      	itt	gt
 801282c:	3b04      	subgt	r3, #4
 801282e:	9307      	strgt	r3, [sp, #28]
 8012830:	9b07      	ldr	r3, [sp, #28]
 8012832:	f1a3 0302 	sub.w	r3, r3, #2
 8012836:	bfcc      	ite	gt
 8012838:	2400      	movgt	r4, #0
 801283a:	2401      	movle	r4, #1
 801283c:	2b03      	cmp	r3, #3
 801283e:	d863      	bhi.n	8012908 <_dtoa_r+0x298>
 8012840:	e8df f003 	tbb	[pc, r3]
 8012844:	2b375452 	.word	0x2b375452
 8012848:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801284c:	441e      	add	r6, r3
 801284e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012852:	2b20      	cmp	r3, #32
 8012854:	bfc1      	itttt	gt
 8012856:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801285a:	409f      	lslgt	r7, r3
 801285c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012860:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012864:	bfd6      	itet	le
 8012866:	f1c3 0320 	rsble	r3, r3, #32
 801286a:	ea47 0003 	orrgt.w	r0, r7, r3
 801286e:	fa04 f003 	lslle.w	r0, r4, r3
 8012872:	f7ed fe6f 	bl	8000554 <__aeabi_ui2d>
 8012876:	2201      	movs	r2, #1
 8012878:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801287c:	3e01      	subs	r6, #1
 801287e:	9212      	str	r2, [sp, #72]	@ 0x48
 8012880:	e776      	b.n	8012770 <_dtoa_r+0x100>
 8012882:	2301      	movs	r3, #1
 8012884:	e7b7      	b.n	80127f6 <_dtoa_r+0x186>
 8012886:	9010      	str	r0, [sp, #64]	@ 0x40
 8012888:	e7b6      	b.n	80127f8 <_dtoa_r+0x188>
 801288a:	9b00      	ldr	r3, [sp, #0]
 801288c:	1bdb      	subs	r3, r3, r7
 801288e:	9300      	str	r3, [sp, #0]
 8012890:	427b      	negs	r3, r7
 8012892:	9308      	str	r3, [sp, #32]
 8012894:	2300      	movs	r3, #0
 8012896:	930d      	str	r3, [sp, #52]	@ 0x34
 8012898:	e7c3      	b.n	8012822 <_dtoa_r+0x1b2>
 801289a:	2301      	movs	r3, #1
 801289c:	9309      	str	r3, [sp, #36]	@ 0x24
 801289e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128a0:	eb07 0b03 	add.w	fp, r7, r3
 80128a4:	f10b 0301 	add.w	r3, fp, #1
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	9303      	str	r3, [sp, #12]
 80128ac:	bfb8      	it	lt
 80128ae:	2301      	movlt	r3, #1
 80128b0:	e006      	b.n	80128c0 <_dtoa_r+0x250>
 80128b2:	2301      	movs	r3, #1
 80128b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80128b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	dd28      	ble.n	801290e <_dtoa_r+0x29e>
 80128bc:	469b      	mov	fp, r3
 80128be:	9303      	str	r3, [sp, #12]
 80128c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80128c4:	2100      	movs	r1, #0
 80128c6:	2204      	movs	r2, #4
 80128c8:	f102 0514 	add.w	r5, r2, #20
 80128cc:	429d      	cmp	r5, r3
 80128ce:	d926      	bls.n	801291e <_dtoa_r+0x2ae>
 80128d0:	6041      	str	r1, [r0, #4]
 80128d2:	4648      	mov	r0, r9
 80128d4:	f000 fd9c 	bl	8013410 <_Balloc>
 80128d8:	4682      	mov	sl, r0
 80128da:	2800      	cmp	r0, #0
 80128dc:	d142      	bne.n	8012964 <_dtoa_r+0x2f4>
 80128de:	4b1e      	ldr	r3, [pc, #120]	@ (8012958 <_dtoa_r+0x2e8>)
 80128e0:	4602      	mov	r2, r0
 80128e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80128e6:	e6da      	b.n	801269e <_dtoa_r+0x2e>
 80128e8:	2300      	movs	r3, #0
 80128ea:	e7e3      	b.n	80128b4 <_dtoa_r+0x244>
 80128ec:	2300      	movs	r3, #0
 80128ee:	e7d5      	b.n	801289c <_dtoa_r+0x22c>
 80128f0:	2401      	movs	r4, #1
 80128f2:	2300      	movs	r3, #0
 80128f4:	9307      	str	r3, [sp, #28]
 80128f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80128f8:	f04f 3bff 	mov.w	fp, #4294967295
 80128fc:	2200      	movs	r2, #0
 80128fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8012902:	2312      	movs	r3, #18
 8012904:	920c      	str	r2, [sp, #48]	@ 0x30
 8012906:	e7db      	b.n	80128c0 <_dtoa_r+0x250>
 8012908:	2301      	movs	r3, #1
 801290a:	9309      	str	r3, [sp, #36]	@ 0x24
 801290c:	e7f4      	b.n	80128f8 <_dtoa_r+0x288>
 801290e:	f04f 0b01 	mov.w	fp, #1
 8012912:	f8cd b00c 	str.w	fp, [sp, #12]
 8012916:	465b      	mov	r3, fp
 8012918:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801291c:	e7d0      	b.n	80128c0 <_dtoa_r+0x250>
 801291e:	3101      	adds	r1, #1
 8012920:	0052      	lsls	r2, r2, #1
 8012922:	e7d1      	b.n	80128c8 <_dtoa_r+0x258>
 8012924:	f3af 8000 	nop.w
 8012928:	636f4361 	.word	0x636f4361
 801292c:	3fd287a7 	.word	0x3fd287a7
 8012930:	8b60c8b3 	.word	0x8b60c8b3
 8012934:	3fc68a28 	.word	0x3fc68a28
 8012938:	509f79fb 	.word	0x509f79fb
 801293c:	3fd34413 	.word	0x3fd34413
 8012940:	08016676 	.word	0x08016676
 8012944:	0801668d 	.word	0x0801668d
 8012948:	7ff00000 	.word	0x7ff00000
 801294c:	08016641 	.word	0x08016641
 8012950:	3ff80000 	.word	0x3ff80000
 8012954:	08016840 	.word	0x08016840
 8012958:	080166e5 	.word	0x080166e5
 801295c:	08016672 	.word	0x08016672
 8012960:	08016640 	.word	0x08016640
 8012964:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012968:	6018      	str	r0, [r3, #0]
 801296a:	9b03      	ldr	r3, [sp, #12]
 801296c:	2b0e      	cmp	r3, #14
 801296e:	f200 80a1 	bhi.w	8012ab4 <_dtoa_r+0x444>
 8012972:	2c00      	cmp	r4, #0
 8012974:	f000 809e 	beq.w	8012ab4 <_dtoa_r+0x444>
 8012978:	2f00      	cmp	r7, #0
 801297a:	dd33      	ble.n	80129e4 <_dtoa_r+0x374>
 801297c:	4b9c      	ldr	r3, [pc, #624]	@ (8012bf0 <_dtoa_r+0x580>)
 801297e:	f007 020f 	and.w	r2, r7, #15
 8012982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012986:	ed93 7b00 	vldr	d7, [r3]
 801298a:	05f8      	lsls	r0, r7, #23
 801298c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8012990:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012994:	d516      	bpl.n	80129c4 <_dtoa_r+0x354>
 8012996:	4b97      	ldr	r3, [pc, #604]	@ (8012bf4 <_dtoa_r+0x584>)
 8012998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801299c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80129a0:	f7ed ff7c 	bl	800089c <__aeabi_ddiv>
 80129a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129a8:	f004 040f 	and.w	r4, r4, #15
 80129ac:	2603      	movs	r6, #3
 80129ae:	4d91      	ldr	r5, [pc, #580]	@ (8012bf4 <_dtoa_r+0x584>)
 80129b0:	b954      	cbnz	r4, 80129c8 <_dtoa_r+0x358>
 80129b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80129b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129ba:	f7ed ff6f 	bl	800089c <__aeabi_ddiv>
 80129be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129c2:	e028      	b.n	8012a16 <_dtoa_r+0x3a6>
 80129c4:	2602      	movs	r6, #2
 80129c6:	e7f2      	b.n	80129ae <_dtoa_r+0x33e>
 80129c8:	07e1      	lsls	r1, r4, #31
 80129ca:	d508      	bpl.n	80129de <_dtoa_r+0x36e>
 80129cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80129d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80129d4:	f7ed fe38 	bl	8000648 <__aeabi_dmul>
 80129d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80129dc:	3601      	adds	r6, #1
 80129de:	1064      	asrs	r4, r4, #1
 80129e0:	3508      	adds	r5, #8
 80129e2:	e7e5      	b.n	80129b0 <_dtoa_r+0x340>
 80129e4:	f000 80af 	beq.w	8012b46 <_dtoa_r+0x4d6>
 80129e8:	427c      	negs	r4, r7
 80129ea:	4b81      	ldr	r3, [pc, #516]	@ (8012bf0 <_dtoa_r+0x580>)
 80129ec:	4d81      	ldr	r5, [pc, #516]	@ (8012bf4 <_dtoa_r+0x584>)
 80129ee:	f004 020f 	and.w	r2, r4, #15
 80129f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80129f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80129fe:	f7ed fe23 	bl	8000648 <__aeabi_dmul>
 8012a02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a06:	1124      	asrs	r4, r4, #4
 8012a08:	2300      	movs	r3, #0
 8012a0a:	2602      	movs	r6, #2
 8012a0c:	2c00      	cmp	r4, #0
 8012a0e:	f040 808f 	bne.w	8012b30 <_dtoa_r+0x4c0>
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d1d3      	bne.n	80129be <_dtoa_r+0x34e>
 8012a16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012a18:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	f000 8094 	beq.w	8012b4a <_dtoa_r+0x4da>
 8012a22:	4b75      	ldr	r3, [pc, #468]	@ (8012bf8 <_dtoa_r+0x588>)
 8012a24:	2200      	movs	r2, #0
 8012a26:	4620      	mov	r0, r4
 8012a28:	4629      	mov	r1, r5
 8012a2a:	f7ee f87f 	bl	8000b2c <__aeabi_dcmplt>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	f000 808b 	beq.w	8012b4a <_dtoa_r+0x4da>
 8012a34:	9b03      	ldr	r3, [sp, #12]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	f000 8087 	beq.w	8012b4a <_dtoa_r+0x4da>
 8012a3c:	f1bb 0f00 	cmp.w	fp, #0
 8012a40:	dd34      	ble.n	8012aac <_dtoa_r+0x43c>
 8012a42:	4620      	mov	r0, r4
 8012a44:	4b6d      	ldr	r3, [pc, #436]	@ (8012bfc <_dtoa_r+0x58c>)
 8012a46:	2200      	movs	r2, #0
 8012a48:	4629      	mov	r1, r5
 8012a4a:	f7ed fdfd 	bl	8000648 <__aeabi_dmul>
 8012a4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a52:	f107 38ff 	add.w	r8, r7, #4294967295
 8012a56:	3601      	adds	r6, #1
 8012a58:	465c      	mov	r4, fp
 8012a5a:	4630      	mov	r0, r6
 8012a5c:	f7ed fd8a 	bl	8000574 <__aeabi_i2d>
 8012a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a64:	f7ed fdf0 	bl	8000648 <__aeabi_dmul>
 8012a68:	4b65      	ldr	r3, [pc, #404]	@ (8012c00 <_dtoa_r+0x590>)
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f7ed fc36 	bl	80002dc <__adddf3>
 8012a70:	4605      	mov	r5, r0
 8012a72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012a76:	2c00      	cmp	r4, #0
 8012a78:	d16a      	bne.n	8012b50 <_dtoa_r+0x4e0>
 8012a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a7e:	4b61      	ldr	r3, [pc, #388]	@ (8012c04 <_dtoa_r+0x594>)
 8012a80:	2200      	movs	r2, #0
 8012a82:	f7ed fc29 	bl	80002d8 <__aeabi_dsub>
 8012a86:	4602      	mov	r2, r0
 8012a88:	460b      	mov	r3, r1
 8012a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012a8e:	462a      	mov	r2, r5
 8012a90:	4633      	mov	r3, r6
 8012a92:	f7ee f869 	bl	8000b68 <__aeabi_dcmpgt>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	f040 8298 	bne.w	8012fcc <_dtoa_r+0x95c>
 8012a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012aa0:	462a      	mov	r2, r5
 8012aa2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012aa6:	f7ee f841 	bl	8000b2c <__aeabi_dcmplt>
 8012aaa:	bb38      	cbnz	r0, 8012afc <_dtoa_r+0x48c>
 8012aac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8012ab0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012ab4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	f2c0 8157 	blt.w	8012d6a <_dtoa_r+0x6fa>
 8012abc:	2f0e      	cmp	r7, #14
 8012abe:	f300 8154 	bgt.w	8012d6a <_dtoa_r+0x6fa>
 8012ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8012bf0 <_dtoa_r+0x580>)
 8012ac4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012ac8:	ed93 7b00 	vldr	d7, [r3]
 8012acc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	ed8d 7b00 	vstr	d7, [sp]
 8012ad4:	f280 80e5 	bge.w	8012ca2 <_dtoa_r+0x632>
 8012ad8:	9b03      	ldr	r3, [sp, #12]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f300 80e1 	bgt.w	8012ca2 <_dtoa_r+0x632>
 8012ae0:	d10c      	bne.n	8012afc <_dtoa_r+0x48c>
 8012ae2:	4b48      	ldr	r3, [pc, #288]	@ (8012c04 <_dtoa_r+0x594>)
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	ec51 0b17 	vmov	r0, r1, d7
 8012aea:	f7ed fdad 	bl	8000648 <__aeabi_dmul>
 8012aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012af2:	f7ee f82f 	bl	8000b54 <__aeabi_dcmpge>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	f000 8266 	beq.w	8012fc8 <_dtoa_r+0x958>
 8012afc:	2400      	movs	r4, #0
 8012afe:	4625      	mov	r5, r4
 8012b00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b02:	4656      	mov	r6, sl
 8012b04:	ea6f 0803 	mvn.w	r8, r3
 8012b08:	2700      	movs	r7, #0
 8012b0a:	4621      	mov	r1, r4
 8012b0c:	4648      	mov	r0, r9
 8012b0e:	f000 fcbf 	bl	8013490 <_Bfree>
 8012b12:	2d00      	cmp	r5, #0
 8012b14:	f000 80bd 	beq.w	8012c92 <_dtoa_r+0x622>
 8012b18:	b12f      	cbz	r7, 8012b26 <_dtoa_r+0x4b6>
 8012b1a:	42af      	cmp	r7, r5
 8012b1c:	d003      	beq.n	8012b26 <_dtoa_r+0x4b6>
 8012b1e:	4639      	mov	r1, r7
 8012b20:	4648      	mov	r0, r9
 8012b22:	f000 fcb5 	bl	8013490 <_Bfree>
 8012b26:	4629      	mov	r1, r5
 8012b28:	4648      	mov	r0, r9
 8012b2a:	f000 fcb1 	bl	8013490 <_Bfree>
 8012b2e:	e0b0      	b.n	8012c92 <_dtoa_r+0x622>
 8012b30:	07e2      	lsls	r2, r4, #31
 8012b32:	d505      	bpl.n	8012b40 <_dtoa_r+0x4d0>
 8012b34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012b38:	f7ed fd86 	bl	8000648 <__aeabi_dmul>
 8012b3c:	3601      	adds	r6, #1
 8012b3e:	2301      	movs	r3, #1
 8012b40:	1064      	asrs	r4, r4, #1
 8012b42:	3508      	adds	r5, #8
 8012b44:	e762      	b.n	8012a0c <_dtoa_r+0x39c>
 8012b46:	2602      	movs	r6, #2
 8012b48:	e765      	b.n	8012a16 <_dtoa_r+0x3a6>
 8012b4a:	9c03      	ldr	r4, [sp, #12]
 8012b4c:	46b8      	mov	r8, r7
 8012b4e:	e784      	b.n	8012a5a <_dtoa_r+0x3ea>
 8012b50:	4b27      	ldr	r3, [pc, #156]	@ (8012bf0 <_dtoa_r+0x580>)
 8012b52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012b58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012b5c:	4454      	add	r4, sl
 8012b5e:	2900      	cmp	r1, #0
 8012b60:	d054      	beq.n	8012c0c <_dtoa_r+0x59c>
 8012b62:	4929      	ldr	r1, [pc, #164]	@ (8012c08 <_dtoa_r+0x598>)
 8012b64:	2000      	movs	r0, #0
 8012b66:	f7ed fe99 	bl	800089c <__aeabi_ddiv>
 8012b6a:	4633      	mov	r3, r6
 8012b6c:	462a      	mov	r2, r5
 8012b6e:	f7ed fbb3 	bl	80002d8 <__aeabi_dsub>
 8012b72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012b76:	4656      	mov	r6, sl
 8012b78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b7c:	f7ee f814 	bl	8000ba8 <__aeabi_d2iz>
 8012b80:	4605      	mov	r5, r0
 8012b82:	f7ed fcf7 	bl	8000574 <__aeabi_i2d>
 8012b86:	4602      	mov	r2, r0
 8012b88:	460b      	mov	r3, r1
 8012b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b8e:	f7ed fba3 	bl	80002d8 <__aeabi_dsub>
 8012b92:	3530      	adds	r5, #48	@ 0x30
 8012b94:	4602      	mov	r2, r0
 8012b96:	460b      	mov	r3, r1
 8012b98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012b9c:	f806 5b01 	strb.w	r5, [r6], #1
 8012ba0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012ba4:	f7ed ffc2 	bl	8000b2c <__aeabi_dcmplt>
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	d172      	bne.n	8012c92 <_dtoa_r+0x622>
 8012bac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bb0:	4911      	ldr	r1, [pc, #68]	@ (8012bf8 <_dtoa_r+0x588>)
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	f7ed fb90 	bl	80002d8 <__aeabi_dsub>
 8012bb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012bbc:	f7ed ffb6 	bl	8000b2c <__aeabi_dcmplt>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	f040 80b4 	bne.w	8012d2e <_dtoa_r+0x6be>
 8012bc6:	42a6      	cmp	r6, r4
 8012bc8:	f43f af70 	beq.w	8012aac <_dtoa_r+0x43c>
 8012bcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8012bfc <_dtoa_r+0x58c>)
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	f7ed fd38 	bl	8000648 <__aeabi_dmul>
 8012bd8:	4b08      	ldr	r3, [pc, #32]	@ (8012bfc <_dtoa_r+0x58c>)
 8012bda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012bde:	2200      	movs	r2, #0
 8012be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012be4:	f7ed fd30 	bl	8000648 <__aeabi_dmul>
 8012be8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012bec:	e7c4      	b.n	8012b78 <_dtoa_r+0x508>
 8012bee:	bf00      	nop
 8012bf0:	08016840 	.word	0x08016840
 8012bf4:	08016818 	.word	0x08016818
 8012bf8:	3ff00000 	.word	0x3ff00000
 8012bfc:	40240000 	.word	0x40240000
 8012c00:	401c0000 	.word	0x401c0000
 8012c04:	40140000 	.word	0x40140000
 8012c08:	3fe00000 	.word	0x3fe00000
 8012c0c:	4631      	mov	r1, r6
 8012c0e:	4628      	mov	r0, r5
 8012c10:	f7ed fd1a 	bl	8000648 <__aeabi_dmul>
 8012c14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012c18:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012c1a:	4656      	mov	r6, sl
 8012c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c20:	f7ed ffc2 	bl	8000ba8 <__aeabi_d2iz>
 8012c24:	4605      	mov	r5, r0
 8012c26:	f7ed fca5 	bl	8000574 <__aeabi_i2d>
 8012c2a:	4602      	mov	r2, r0
 8012c2c:	460b      	mov	r3, r1
 8012c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c32:	f7ed fb51 	bl	80002d8 <__aeabi_dsub>
 8012c36:	3530      	adds	r5, #48	@ 0x30
 8012c38:	f806 5b01 	strb.w	r5, [r6], #1
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	460b      	mov	r3, r1
 8012c40:	42a6      	cmp	r6, r4
 8012c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012c46:	f04f 0200 	mov.w	r2, #0
 8012c4a:	d124      	bne.n	8012c96 <_dtoa_r+0x626>
 8012c4c:	4baf      	ldr	r3, [pc, #700]	@ (8012f0c <_dtoa_r+0x89c>)
 8012c4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012c52:	f7ed fb43 	bl	80002dc <__adddf3>
 8012c56:	4602      	mov	r2, r0
 8012c58:	460b      	mov	r3, r1
 8012c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c5e:	f7ed ff83 	bl	8000b68 <__aeabi_dcmpgt>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	d163      	bne.n	8012d2e <_dtoa_r+0x6be>
 8012c66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012c6a:	49a8      	ldr	r1, [pc, #672]	@ (8012f0c <_dtoa_r+0x89c>)
 8012c6c:	2000      	movs	r0, #0
 8012c6e:	f7ed fb33 	bl	80002d8 <__aeabi_dsub>
 8012c72:	4602      	mov	r2, r0
 8012c74:	460b      	mov	r3, r1
 8012c76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c7a:	f7ed ff57 	bl	8000b2c <__aeabi_dcmplt>
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	f43f af14 	beq.w	8012aac <_dtoa_r+0x43c>
 8012c84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8012c86:	1e73      	subs	r3, r6, #1
 8012c88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012c8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012c8e:	2b30      	cmp	r3, #48	@ 0x30
 8012c90:	d0f8      	beq.n	8012c84 <_dtoa_r+0x614>
 8012c92:	4647      	mov	r7, r8
 8012c94:	e03b      	b.n	8012d0e <_dtoa_r+0x69e>
 8012c96:	4b9e      	ldr	r3, [pc, #632]	@ (8012f10 <_dtoa_r+0x8a0>)
 8012c98:	f7ed fcd6 	bl	8000648 <__aeabi_dmul>
 8012c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012ca0:	e7bc      	b.n	8012c1c <_dtoa_r+0x5ac>
 8012ca2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012ca6:	4656      	mov	r6, sl
 8012ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cac:	4620      	mov	r0, r4
 8012cae:	4629      	mov	r1, r5
 8012cb0:	f7ed fdf4 	bl	800089c <__aeabi_ddiv>
 8012cb4:	f7ed ff78 	bl	8000ba8 <__aeabi_d2iz>
 8012cb8:	4680      	mov	r8, r0
 8012cba:	f7ed fc5b 	bl	8000574 <__aeabi_i2d>
 8012cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cc2:	f7ed fcc1 	bl	8000648 <__aeabi_dmul>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	460b      	mov	r3, r1
 8012cca:	4620      	mov	r0, r4
 8012ccc:	4629      	mov	r1, r5
 8012cce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012cd2:	f7ed fb01 	bl	80002d8 <__aeabi_dsub>
 8012cd6:	f806 4b01 	strb.w	r4, [r6], #1
 8012cda:	9d03      	ldr	r5, [sp, #12]
 8012cdc:	eba6 040a 	sub.w	r4, r6, sl
 8012ce0:	42a5      	cmp	r5, r4
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	460b      	mov	r3, r1
 8012ce6:	d133      	bne.n	8012d50 <_dtoa_r+0x6e0>
 8012ce8:	f7ed faf8 	bl	80002dc <__adddf3>
 8012cec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	460d      	mov	r5, r1
 8012cf4:	f7ed ff38 	bl	8000b68 <__aeabi_dcmpgt>
 8012cf8:	b9c0      	cbnz	r0, 8012d2c <_dtoa_r+0x6bc>
 8012cfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cfe:	4620      	mov	r0, r4
 8012d00:	4629      	mov	r1, r5
 8012d02:	f7ed ff09 	bl	8000b18 <__aeabi_dcmpeq>
 8012d06:	b110      	cbz	r0, 8012d0e <_dtoa_r+0x69e>
 8012d08:	f018 0f01 	tst.w	r8, #1
 8012d0c:	d10e      	bne.n	8012d2c <_dtoa_r+0x6bc>
 8012d0e:	9902      	ldr	r1, [sp, #8]
 8012d10:	4648      	mov	r0, r9
 8012d12:	f000 fbbd 	bl	8013490 <_Bfree>
 8012d16:	2300      	movs	r3, #0
 8012d18:	7033      	strb	r3, [r6, #0]
 8012d1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012d1c:	3701      	adds	r7, #1
 8012d1e:	601f      	str	r7, [r3, #0]
 8012d20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	f000 824b 	beq.w	80131be <_dtoa_r+0xb4e>
 8012d28:	601e      	str	r6, [r3, #0]
 8012d2a:	e248      	b.n	80131be <_dtoa_r+0xb4e>
 8012d2c:	46b8      	mov	r8, r7
 8012d2e:	4633      	mov	r3, r6
 8012d30:	461e      	mov	r6, r3
 8012d32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d36:	2a39      	cmp	r2, #57	@ 0x39
 8012d38:	d106      	bne.n	8012d48 <_dtoa_r+0x6d8>
 8012d3a:	459a      	cmp	sl, r3
 8012d3c:	d1f8      	bne.n	8012d30 <_dtoa_r+0x6c0>
 8012d3e:	2230      	movs	r2, #48	@ 0x30
 8012d40:	f108 0801 	add.w	r8, r8, #1
 8012d44:	f88a 2000 	strb.w	r2, [sl]
 8012d48:	781a      	ldrb	r2, [r3, #0]
 8012d4a:	3201      	adds	r2, #1
 8012d4c:	701a      	strb	r2, [r3, #0]
 8012d4e:	e7a0      	b.n	8012c92 <_dtoa_r+0x622>
 8012d50:	4b6f      	ldr	r3, [pc, #444]	@ (8012f10 <_dtoa_r+0x8a0>)
 8012d52:	2200      	movs	r2, #0
 8012d54:	f7ed fc78 	bl	8000648 <__aeabi_dmul>
 8012d58:	2200      	movs	r2, #0
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	460d      	mov	r5, r1
 8012d60:	f7ed feda 	bl	8000b18 <__aeabi_dcmpeq>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d09f      	beq.n	8012ca8 <_dtoa_r+0x638>
 8012d68:	e7d1      	b.n	8012d0e <_dtoa_r+0x69e>
 8012d6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d6c:	2a00      	cmp	r2, #0
 8012d6e:	f000 80ea 	beq.w	8012f46 <_dtoa_r+0x8d6>
 8012d72:	9a07      	ldr	r2, [sp, #28]
 8012d74:	2a01      	cmp	r2, #1
 8012d76:	f300 80cd 	bgt.w	8012f14 <_dtoa_r+0x8a4>
 8012d7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012d7c:	2a00      	cmp	r2, #0
 8012d7e:	f000 80c1 	beq.w	8012f04 <_dtoa_r+0x894>
 8012d82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012d86:	9c08      	ldr	r4, [sp, #32]
 8012d88:	9e00      	ldr	r6, [sp, #0]
 8012d8a:	9a00      	ldr	r2, [sp, #0]
 8012d8c:	441a      	add	r2, r3
 8012d8e:	9200      	str	r2, [sp, #0]
 8012d90:	9a06      	ldr	r2, [sp, #24]
 8012d92:	2101      	movs	r1, #1
 8012d94:	441a      	add	r2, r3
 8012d96:	4648      	mov	r0, r9
 8012d98:	9206      	str	r2, [sp, #24]
 8012d9a:	f000 fc77 	bl	801368c <__i2b>
 8012d9e:	4605      	mov	r5, r0
 8012da0:	b166      	cbz	r6, 8012dbc <_dtoa_r+0x74c>
 8012da2:	9b06      	ldr	r3, [sp, #24]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	dd09      	ble.n	8012dbc <_dtoa_r+0x74c>
 8012da8:	42b3      	cmp	r3, r6
 8012daa:	9a00      	ldr	r2, [sp, #0]
 8012dac:	bfa8      	it	ge
 8012dae:	4633      	movge	r3, r6
 8012db0:	1ad2      	subs	r2, r2, r3
 8012db2:	9200      	str	r2, [sp, #0]
 8012db4:	9a06      	ldr	r2, [sp, #24]
 8012db6:	1af6      	subs	r6, r6, r3
 8012db8:	1ad3      	subs	r3, r2, r3
 8012dba:	9306      	str	r3, [sp, #24]
 8012dbc:	9b08      	ldr	r3, [sp, #32]
 8012dbe:	b30b      	cbz	r3, 8012e04 <_dtoa_r+0x794>
 8012dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	f000 80c6 	beq.w	8012f54 <_dtoa_r+0x8e4>
 8012dc8:	2c00      	cmp	r4, #0
 8012dca:	f000 80c0 	beq.w	8012f4e <_dtoa_r+0x8de>
 8012dce:	4629      	mov	r1, r5
 8012dd0:	4622      	mov	r2, r4
 8012dd2:	4648      	mov	r0, r9
 8012dd4:	f000 fd12 	bl	80137fc <__pow5mult>
 8012dd8:	9a02      	ldr	r2, [sp, #8]
 8012dda:	4601      	mov	r1, r0
 8012ddc:	4605      	mov	r5, r0
 8012dde:	4648      	mov	r0, r9
 8012de0:	f000 fc6a 	bl	80136b8 <__multiply>
 8012de4:	9902      	ldr	r1, [sp, #8]
 8012de6:	4680      	mov	r8, r0
 8012de8:	4648      	mov	r0, r9
 8012dea:	f000 fb51 	bl	8013490 <_Bfree>
 8012dee:	9b08      	ldr	r3, [sp, #32]
 8012df0:	1b1b      	subs	r3, r3, r4
 8012df2:	9308      	str	r3, [sp, #32]
 8012df4:	f000 80b1 	beq.w	8012f5a <_dtoa_r+0x8ea>
 8012df8:	9a08      	ldr	r2, [sp, #32]
 8012dfa:	4641      	mov	r1, r8
 8012dfc:	4648      	mov	r0, r9
 8012dfe:	f000 fcfd 	bl	80137fc <__pow5mult>
 8012e02:	9002      	str	r0, [sp, #8]
 8012e04:	2101      	movs	r1, #1
 8012e06:	4648      	mov	r0, r9
 8012e08:	f000 fc40 	bl	801368c <__i2b>
 8012e0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e0e:	4604      	mov	r4, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	f000 81d8 	beq.w	80131c6 <_dtoa_r+0xb56>
 8012e16:	461a      	mov	r2, r3
 8012e18:	4601      	mov	r1, r0
 8012e1a:	4648      	mov	r0, r9
 8012e1c:	f000 fcee 	bl	80137fc <__pow5mult>
 8012e20:	9b07      	ldr	r3, [sp, #28]
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	4604      	mov	r4, r0
 8012e26:	f300 809f 	bgt.w	8012f68 <_dtoa_r+0x8f8>
 8012e2a:	9b04      	ldr	r3, [sp, #16]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f040 8097 	bne.w	8012f60 <_dtoa_r+0x8f0>
 8012e32:	9b05      	ldr	r3, [sp, #20]
 8012e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	f040 8093 	bne.w	8012f64 <_dtoa_r+0x8f4>
 8012e3e:	9b05      	ldr	r3, [sp, #20]
 8012e40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012e44:	0d1b      	lsrs	r3, r3, #20
 8012e46:	051b      	lsls	r3, r3, #20
 8012e48:	b133      	cbz	r3, 8012e58 <_dtoa_r+0x7e8>
 8012e4a:	9b00      	ldr	r3, [sp, #0]
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	9b06      	ldr	r3, [sp, #24]
 8012e52:	3301      	adds	r3, #1
 8012e54:	9306      	str	r3, [sp, #24]
 8012e56:	2301      	movs	r3, #1
 8012e58:	9308      	str	r3, [sp, #32]
 8012e5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	f000 81b8 	beq.w	80131d2 <_dtoa_r+0xb62>
 8012e62:	6923      	ldr	r3, [r4, #16]
 8012e64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012e68:	6918      	ldr	r0, [r3, #16]
 8012e6a:	f000 fbc3 	bl	80135f4 <__hi0bits>
 8012e6e:	f1c0 0020 	rsb	r0, r0, #32
 8012e72:	9b06      	ldr	r3, [sp, #24]
 8012e74:	4418      	add	r0, r3
 8012e76:	f010 001f 	ands.w	r0, r0, #31
 8012e7a:	f000 8082 	beq.w	8012f82 <_dtoa_r+0x912>
 8012e7e:	f1c0 0320 	rsb	r3, r0, #32
 8012e82:	2b04      	cmp	r3, #4
 8012e84:	dd73      	ble.n	8012f6e <_dtoa_r+0x8fe>
 8012e86:	9b00      	ldr	r3, [sp, #0]
 8012e88:	f1c0 001c 	rsb	r0, r0, #28
 8012e8c:	4403      	add	r3, r0
 8012e8e:	9300      	str	r3, [sp, #0]
 8012e90:	9b06      	ldr	r3, [sp, #24]
 8012e92:	4403      	add	r3, r0
 8012e94:	4406      	add	r6, r0
 8012e96:	9306      	str	r3, [sp, #24]
 8012e98:	9b00      	ldr	r3, [sp, #0]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	dd05      	ble.n	8012eaa <_dtoa_r+0x83a>
 8012e9e:	9902      	ldr	r1, [sp, #8]
 8012ea0:	461a      	mov	r2, r3
 8012ea2:	4648      	mov	r0, r9
 8012ea4:	f000 fd04 	bl	80138b0 <__lshift>
 8012ea8:	9002      	str	r0, [sp, #8]
 8012eaa:	9b06      	ldr	r3, [sp, #24]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	dd05      	ble.n	8012ebc <_dtoa_r+0x84c>
 8012eb0:	4621      	mov	r1, r4
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	4648      	mov	r0, r9
 8012eb6:	f000 fcfb 	bl	80138b0 <__lshift>
 8012eba:	4604      	mov	r4, r0
 8012ebc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d061      	beq.n	8012f86 <_dtoa_r+0x916>
 8012ec2:	9802      	ldr	r0, [sp, #8]
 8012ec4:	4621      	mov	r1, r4
 8012ec6:	f000 fd5f 	bl	8013988 <__mcmp>
 8012eca:	2800      	cmp	r0, #0
 8012ecc:	da5b      	bge.n	8012f86 <_dtoa_r+0x916>
 8012ece:	2300      	movs	r3, #0
 8012ed0:	9902      	ldr	r1, [sp, #8]
 8012ed2:	220a      	movs	r2, #10
 8012ed4:	4648      	mov	r0, r9
 8012ed6:	f000 fafd 	bl	80134d4 <__multadd>
 8012eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012edc:	9002      	str	r0, [sp, #8]
 8012ede:	f107 38ff 	add.w	r8, r7, #4294967295
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	f000 8177 	beq.w	80131d6 <_dtoa_r+0xb66>
 8012ee8:	4629      	mov	r1, r5
 8012eea:	2300      	movs	r3, #0
 8012eec:	220a      	movs	r2, #10
 8012eee:	4648      	mov	r0, r9
 8012ef0:	f000 faf0 	bl	80134d4 <__multadd>
 8012ef4:	f1bb 0f00 	cmp.w	fp, #0
 8012ef8:	4605      	mov	r5, r0
 8012efa:	dc6f      	bgt.n	8012fdc <_dtoa_r+0x96c>
 8012efc:	9b07      	ldr	r3, [sp, #28]
 8012efe:	2b02      	cmp	r3, #2
 8012f00:	dc49      	bgt.n	8012f96 <_dtoa_r+0x926>
 8012f02:	e06b      	b.n	8012fdc <_dtoa_r+0x96c>
 8012f04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012f06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012f0a:	e73c      	b.n	8012d86 <_dtoa_r+0x716>
 8012f0c:	3fe00000 	.word	0x3fe00000
 8012f10:	40240000 	.word	0x40240000
 8012f14:	9b03      	ldr	r3, [sp, #12]
 8012f16:	1e5c      	subs	r4, r3, #1
 8012f18:	9b08      	ldr	r3, [sp, #32]
 8012f1a:	42a3      	cmp	r3, r4
 8012f1c:	db09      	blt.n	8012f32 <_dtoa_r+0x8c2>
 8012f1e:	1b1c      	subs	r4, r3, r4
 8012f20:	9b03      	ldr	r3, [sp, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	f6bf af30 	bge.w	8012d88 <_dtoa_r+0x718>
 8012f28:	9b00      	ldr	r3, [sp, #0]
 8012f2a:	9a03      	ldr	r2, [sp, #12]
 8012f2c:	1a9e      	subs	r6, r3, r2
 8012f2e:	2300      	movs	r3, #0
 8012f30:	e72b      	b.n	8012d8a <_dtoa_r+0x71a>
 8012f32:	9b08      	ldr	r3, [sp, #32]
 8012f34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012f36:	9408      	str	r4, [sp, #32]
 8012f38:	1ae3      	subs	r3, r4, r3
 8012f3a:	441a      	add	r2, r3
 8012f3c:	9e00      	ldr	r6, [sp, #0]
 8012f3e:	9b03      	ldr	r3, [sp, #12]
 8012f40:	920d      	str	r2, [sp, #52]	@ 0x34
 8012f42:	2400      	movs	r4, #0
 8012f44:	e721      	b.n	8012d8a <_dtoa_r+0x71a>
 8012f46:	9c08      	ldr	r4, [sp, #32]
 8012f48:	9e00      	ldr	r6, [sp, #0]
 8012f4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8012f4c:	e728      	b.n	8012da0 <_dtoa_r+0x730>
 8012f4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012f52:	e751      	b.n	8012df8 <_dtoa_r+0x788>
 8012f54:	9a08      	ldr	r2, [sp, #32]
 8012f56:	9902      	ldr	r1, [sp, #8]
 8012f58:	e750      	b.n	8012dfc <_dtoa_r+0x78c>
 8012f5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8012f5e:	e751      	b.n	8012e04 <_dtoa_r+0x794>
 8012f60:	2300      	movs	r3, #0
 8012f62:	e779      	b.n	8012e58 <_dtoa_r+0x7e8>
 8012f64:	9b04      	ldr	r3, [sp, #16]
 8012f66:	e777      	b.n	8012e58 <_dtoa_r+0x7e8>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	9308      	str	r3, [sp, #32]
 8012f6c:	e779      	b.n	8012e62 <_dtoa_r+0x7f2>
 8012f6e:	d093      	beq.n	8012e98 <_dtoa_r+0x828>
 8012f70:	9a00      	ldr	r2, [sp, #0]
 8012f72:	331c      	adds	r3, #28
 8012f74:	441a      	add	r2, r3
 8012f76:	9200      	str	r2, [sp, #0]
 8012f78:	9a06      	ldr	r2, [sp, #24]
 8012f7a:	441a      	add	r2, r3
 8012f7c:	441e      	add	r6, r3
 8012f7e:	9206      	str	r2, [sp, #24]
 8012f80:	e78a      	b.n	8012e98 <_dtoa_r+0x828>
 8012f82:	4603      	mov	r3, r0
 8012f84:	e7f4      	b.n	8012f70 <_dtoa_r+0x900>
 8012f86:	9b03      	ldr	r3, [sp, #12]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	46b8      	mov	r8, r7
 8012f8c:	dc20      	bgt.n	8012fd0 <_dtoa_r+0x960>
 8012f8e:	469b      	mov	fp, r3
 8012f90:	9b07      	ldr	r3, [sp, #28]
 8012f92:	2b02      	cmp	r3, #2
 8012f94:	dd1e      	ble.n	8012fd4 <_dtoa_r+0x964>
 8012f96:	f1bb 0f00 	cmp.w	fp, #0
 8012f9a:	f47f adb1 	bne.w	8012b00 <_dtoa_r+0x490>
 8012f9e:	4621      	mov	r1, r4
 8012fa0:	465b      	mov	r3, fp
 8012fa2:	2205      	movs	r2, #5
 8012fa4:	4648      	mov	r0, r9
 8012fa6:	f000 fa95 	bl	80134d4 <__multadd>
 8012faa:	4601      	mov	r1, r0
 8012fac:	4604      	mov	r4, r0
 8012fae:	9802      	ldr	r0, [sp, #8]
 8012fb0:	f000 fcea 	bl	8013988 <__mcmp>
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	f77f ada3 	ble.w	8012b00 <_dtoa_r+0x490>
 8012fba:	4656      	mov	r6, sl
 8012fbc:	2331      	movs	r3, #49	@ 0x31
 8012fbe:	f806 3b01 	strb.w	r3, [r6], #1
 8012fc2:	f108 0801 	add.w	r8, r8, #1
 8012fc6:	e59f      	b.n	8012b08 <_dtoa_r+0x498>
 8012fc8:	9c03      	ldr	r4, [sp, #12]
 8012fca:	46b8      	mov	r8, r7
 8012fcc:	4625      	mov	r5, r4
 8012fce:	e7f4      	b.n	8012fba <_dtoa_r+0x94a>
 8012fd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	f000 8101 	beq.w	80131de <_dtoa_r+0xb6e>
 8012fdc:	2e00      	cmp	r6, #0
 8012fde:	dd05      	ble.n	8012fec <_dtoa_r+0x97c>
 8012fe0:	4629      	mov	r1, r5
 8012fe2:	4632      	mov	r2, r6
 8012fe4:	4648      	mov	r0, r9
 8012fe6:	f000 fc63 	bl	80138b0 <__lshift>
 8012fea:	4605      	mov	r5, r0
 8012fec:	9b08      	ldr	r3, [sp, #32]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d05c      	beq.n	80130ac <_dtoa_r+0xa3c>
 8012ff2:	6869      	ldr	r1, [r5, #4]
 8012ff4:	4648      	mov	r0, r9
 8012ff6:	f000 fa0b 	bl	8013410 <_Balloc>
 8012ffa:	4606      	mov	r6, r0
 8012ffc:	b928      	cbnz	r0, 801300a <_dtoa_r+0x99a>
 8012ffe:	4b82      	ldr	r3, [pc, #520]	@ (8013208 <_dtoa_r+0xb98>)
 8013000:	4602      	mov	r2, r0
 8013002:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013006:	f7ff bb4a 	b.w	801269e <_dtoa_r+0x2e>
 801300a:	692a      	ldr	r2, [r5, #16]
 801300c:	3202      	adds	r2, #2
 801300e:	0092      	lsls	r2, r2, #2
 8013010:	f105 010c 	add.w	r1, r5, #12
 8013014:	300c      	adds	r0, #12
 8013016:	f7ff fa8e 	bl	8012536 <memcpy>
 801301a:	2201      	movs	r2, #1
 801301c:	4631      	mov	r1, r6
 801301e:	4648      	mov	r0, r9
 8013020:	f000 fc46 	bl	80138b0 <__lshift>
 8013024:	f10a 0301 	add.w	r3, sl, #1
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	eb0a 030b 	add.w	r3, sl, fp
 801302e:	9308      	str	r3, [sp, #32]
 8013030:	9b04      	ldr	r3, [sp, #16]
 8013032:	f003 0301 	and.w	r3, r3, #1
 8013036:	462f      	mov	r7, r5
 8013038:	9306      	str	r3, [sp, #24]
 801303a:	4605      	mov	r5, r0
 801303c:	9b00      	ldr	r3, [sp, #0]
 801303e:	9802      	ldr	r0, [sp, #8]
 8013040:	4621      	mov	r1, r4
 8013042:	f103 3bff 	add.w	fp, r3, #4294967295
 8013046:	f7ff fa8b 	bl	8012560 <quorem>
 801304a:	4603      	mov	r3, r0
 801304c:	3330      	adds	r3, #48	@ 0x30
 801304e:	9003      	str	r0, [sp, #12]
 8013050:	4639      	mov	r1, r7
 8013052:	9802      	ldr	r0, [sp, #8]
 8013054:	9309      	str	r3, [sp, #36]	@ 0x24
 8013056:	f000 fc97 	bl	8013988 <__mcmp>
 801305a:	462a      	mov	r2, r5
 801305c:	9004      	str	r0, [sp, #16]
 801305e:	4621      	mov	r1, r4
 8013060:	4648      	mov	r0, r9
 8013062:	f000 fcad 	bl	80139c0 <__mdiff>
 8013066:	68c2      	ldr	r2, [r0, #12]
 8013068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801306a:	4606      	mov	r6, r0
 801306c:	bb02      	cbnz	r2, 80130b0 <_dtoa_r+0xa40>
 801306e:	4601      	mov	r1, r0
 8013070:	9802      	ldr	r0, [sp, #8]
 8013072:	f000 fc89 	bl	8013988 <__mcmp>
 8013076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013078:	4602      	mov	r2, r0
 801307a:	4631      	mov	r1, r6
 801307c:	4648      	mov	r0, r9
 801307e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013080:	9309      	str	r3, [sp, #36]	@ 0x24
 8013082:	f000 fa05 	bl	8013490 <_Bfree>
 8013086:	9b07      	ldr	r3, [sp, #28]
 8013088:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801308a:	9e00      	ldr	r6, [sp, #0]
 801308c:	ea42 0103 	orr.w	r1, r2, r3
 8013090:	9b06      	ldr	r3, [sp, #24]
 8013092:	4319      	orrs	r1, r3
 8013094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013096:	d10d      	bne.n	80130b4 <_dtoa_r+0xa44>
 8013098:	2b39      	cmp	r3, #57	@ 0x39
 801309a:	d027      	beq.n	80130ec <_dtoa_r+0xa7c>
 801309c:	9a04      	ldr	r2, [sp, #16]
 801309e:	2a00      	cmp	r2, #0
 80130a0:	dd01      	ble.n	80130a6 <_dtoa_r+0xa36>
 80130a2:	9b03      	ldr	r3, [sp, #12]
 80130a4:	3331      	adds	r3, #49	@ 0x31
 80130a6:	f88b 3000 	strb.w	r3, [fp]
 80130aa:	e52e      	b.n	8012b0a <_dtoa_r+0x49a>
 80130ac:	4628      	mov	r0, r5
 80130ae:	e7b9      	b.n	8013024 <_dtoa_r+0x9b4>
 80130b0:	2201      	movs	r2, #1
 80130b2:	e7e2      	b.n	801307a <_dtoa_r+0xa0a>
 80130b4:	9904      	ldr	r1, [sp, #16]
 80130b6:	2900      	cmp	r1, #0
 80130b8:	db04      	blt.n	80130c4 <_dtoa_r+0xa54>
 80130ba:	9807      	ldr	r0, [sp, #28]
 80130bc:	4301      	orrs	r1, r0
 80130be:	9806      	ldr	r0, [sp, #24]
 80130c0:	4301      	orrs	r1, r0
 80130c2:	d120      	bne.n	8013106 <_dtoa_r+0xa96>
 80130c4:	2a00      	cmp	r2, #0
 80130c6:	ddee      	ble.n	80130a6 <_dtoa_r+0xa36>
 80130c8:	9902      	ldr	r1, [sp, #8]
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	2201      	movs	r2, #1
 80130ce:	4648      	mov	r0, r9
 80130d0:	f000 fbee 	bl	80138b0 <__lshift>
 80130d4:	4621      	mov	r1, r4
 80130d6:	9002      	str	r0, [sp, #8]
 80130d8:	f000 fc56 	bl	8013988 <__mcmp>
 80130dc:	2800      	cmp	r0, #0
 80130de:	9b00      	ldr	r3, [sp, #0]
 80130e0:	dc02      	bgt.n	80130e8 <_dtoa_r+0xa78>
 80130e2:	d1e0      	bne.n	80130a6 <_dtoa_r+0xa36>
 80130e4:	07da      	lsls	r2, r3, #31
 80130e6:	d5de      	bpl.n	80130a6 <_dtoa_r+0xa36>
 80130e8:	2b39      	cmp	r3, #57	@ 0x39
 80130ea:	d1da      	bne.n	80130a2 <_dtoa_r+0xa32>
 80130ec:	2339      	movs	r3, #57	@ 0x39
 80130ee:	f88b 3000 	strb.w	r3, [fp]
 80130f2:	4633      	mov	r3, r6
 80130f4:	461e      	mov	r6, r3
 80130f6:	3b01      	subs	r3, #1
 80130f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80130fc:	2a39      	cmp	r2, #57	@ 0x39
 80130fe:	d04e      	beq.n	801319e <_dtoa_r+0xb2e>
 8013100:	3201      	adds	r2, #1
 8013102:	701a      	strb	r2, [r3, #0]
 8013104:	e501      	b.n	8012b0a <_dtoa_r+0x49a>
 8013106:	2a00      	cmp	r2, #0
 8013108:	dd03      	ble.n	8013112 <_dtoa_r+0xaa2>
 801310a:	2b39      	cmp	r3, #57	@ 0x39
 801310c:	d0ee      	beq.n	80130ec <_dtoa_r+0xa7c>
 801310e:	3301      	adds	r3, #1
 8013110:	e7c9      	b.n	80130a6 <_dtoa_r+0xa36>
 8013112:	9a00      	ldr	r2, [sp, #0]
 8013114:	9908      	ldr	r1, [sp, #32]
 8013116:	f802 3c01 	strb.w	r3, [r2, #-1]
 801311a:	428a      	cmp	r2, r1
 801311c:	d028      	beq.n	8013170 <_dtoa_r+0xb00>
 801311e:	9902      	ldr	r1, [sp, #8]
 8013120:	2300      	movs	r3, #0
 8013122:	220a      	movs	r2, #10
 8013124:	4648      	mov	r0, r9
 8013126:	f000 f9d5 	bl	80134d4 <__multadd>
 801312a:	42af      	cmp	r7, r5
 801312c:	9002      	str	r0, [sp, #8]
 801312e:	f04f 0300 	mov.w	r3, #0
 8013132:	f04f 020a 	mov.w	r2, #10
 8013136:	4639      	mov	r1, r7
 8013138:	4648      	mov	r0, r9
 801313a:	d107      	bne.n	801314c <_dtoa_r+0xadc>
 801313c:	f000 f9ca 	bl	80134d4 <__multadd>
 8013140:	4607      	mov	r7, r0
 8013142:	4605      	mov	r5, r0
 8013144:	9b00      	ldr	r3, [sp, #0]
 8013146:	3301      	adds	r3, #1
 8013148:	9300      	str	r3, [sp, #0]
 801314a:	e777      	b.n	801303c <_dtoa_r+0x9cc>
 801314c:	f000 f9c2 	bl	80134d4 <__multadd>
 8013150:	4629      	mov	r1, r5
 8013152:	4607      	mov	r7, r0
 8013154:	2300      	movs	r3, #0
 8013156:	220a      	movs	r2, #10
 8013158:	4648      	mov	r0, r9
 801315a:	f000 f9bb 	bl	80134d4 <__multadd>
 801315e:	4605      	mov	r5, r0
 8013160:	e7f0      	b.n	8013144 <_dtoa_r+0xad4>
 8013162:	f1bb 0f00 	cmp.w	fp, #0
 8013166:	bfcc      	ite	gt
 8013168:	465e      	movgt	r6, fp
 801316a:	2601      	movle	r6, #1
 801316c:	4456      	add	r6, sl
 801316e:	2700      	movs	r7, #0
 8013170:	9902      	ldr	r1, [sp, #8]
 8013172:	9300      	str	r3, [sp, #0]
 8013174:	2201      	movs	r2, #1
 8013176:	4648      	mov	r0, r9
 8013178:	f000 fb9a 	bl	80138b0 <__lshift>
 801317c:	4621      	mov	r1, r4
 801317e:	9002      	str	r0, [sp, #8]
 8013180:	f000 fc02 	bl	8013988 <__mcmp>
 8013184:	2800      	cmp	r0, #0
 8013186:	dcb4      	bgt.n	80130f2 <_dtoa_r+0xa82>
 8013188:	d102      	bne.n	8013190 <_dtoa_r+0xb20>
 801318a:	9b00      	ldr	r3, [sp, #0]
 801318c:	07db      	lsls	r3, r3, #31
 801318e:	d4b0      	bmi.n	80130f2 <_dtoa_r+0xa82>
 8013190:	4633      	mov	r3, r6
 8013192:	461e      	mov	r6, r3
 8013194:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013198:	2a30      	cmp	r2, #48	@ 0x30
 801319a:	d0fa      	beq.n	8013192 <_dtoa_r+0xb22>
 801319c:	e4b5      	b.n	8012b0a <_dtoa_r+0x49a>
 801319e:	459a      	cmp	sl, r3
 80131a0:	d1a8      	bne.n	80130f4 <_dtoa_r+0xa84>
 80131a2:	2331      	movs	r3, #49	@ 0x31
 80131a4:	f108 0801 	add.w	r8, r8, #1
 80131a8:	f88a 3000 	strb.w	r3, [sl]
 80131ac:	e4ad      	b.n	8012b0a <_dtoa_r+0x49a>
 80131ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80131b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801320c <_dtoa_r+0xb9c>
 80131b4:	b11b      	cbz	r3, 80131be <_dtoa_r+0xb4e>
 80131b6:	f10a 0308 	add.w	r3, sl, #8
 80131ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80131bc:	6013      	str	r3, [r2, #0]
 80131be:	4650      	mov	r0, sl
 80131c0:	b017      	add	sp, #92	@ 0x5c
 80131c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c6:	9b07      	ldr	r3, [sp, #28]
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	f77f ae2e 	ble.w	8012e2a <_dtoa_r+0x7ba>
 80131ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80131d0:	9308      	str	r3, [sp, #32]
 80131d2:	2001      	movs	r0, #1
 80131d4:	e64d      	b.n	8012e72 <_dtoa_r+0x802>
 80131d6:	f1bb 0f00 	cmp.w	fp, #0
 80131da:	f77f aed9 	ble.w	8012f90 <_dtoa_r+0x920>
 80131de:	4656      	mov	r6, sl
 80131e0:	9802      	ldr	r0, [sp, #8]
 80131e2:	4621      	mov	r1, r4
 80131e4:	f7ff f9bc 	bl	8012560 <quorem>
 80131e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80131ec:	f806 3b01 	strb.w	r3, [r6], #1
 80131f0:	eba6 020a 	sub.w	r2, r6, sl
 80131f4:	4593      	cmp	fp, r2
 80131f6:	ddb4      	ble.n	8013162 <_dtoa_r+0xaf2>
 80131f8:	9902      	ldr	r1, [sp, #8]
 80131fa:	2300      	movs	r3, #0
 80131fc:	220a      	movs	r2, #10
 80131fe:	4648      	mov	r0, r9
 8013200:	f000 f968 	bl	80134d4 <__multadd>
 8013204:	9002      	str	r0, [sp, #8]
 8013206:	e7eb      	b.n	80131e0 <_dtoa_r+0xb70>
 8013208:	080166e5 	.word	0x080166e5
 801320c:	08016669 	.word	0x08016669

08013210 <_free_r>:
 8013210:	b538      	push	{r3, r4, r5, lr}
 8013212:	4605      	mov	r5, r0
 8013214:	2900      	cmp	r1, #0
 8013216:	d041      	beq.n	801329c <_free_r+0x8c>
 8013218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801321c:	1f0c      	subs	r4, r1, #4
 801321e:	2b00      	cmp	r3, #0
 8013220:	bfb8      	it	lt
 8013222:	18e4      	addlt	r4, r4, r3
 8013224:	f000 f8e8 	bl	80133f8 <__malloc_lock>
 8013228:	4a1d      	ldr	r2, [pc, #116]	@ (80132a0 <_free_r+0x90>)
 801322a:	6813      	ldr	r3, [r2, #0]
 801322c:	b933      	cbnz	r3, 801323c <_free_r+0x2c>
 801322e:	6063      	str	r3, [r4, #4]
 8013230:	6014      	str	r4, [r2, #0]
 8013232:	4628      	mov	r0, r5
 8013234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013238:	f000 b8e4 	b.w	8013404 <__malloc_unlock>
 801323c:	42a3      	cmp	r3, r4
 801323e:	d908      	bls.n	8013252 <_free_r+0x42>
 8013240:	6820      	ldr	r0, [r4, #0]
 8013242:	1821      	adds	r1, r4, r0
 8013244:	428b      	cmp	r3, r1
 8013246:	bf01      	itttt	eq
 8013248:	6819      	ldreq	r1, [r3, #0]
 801324a:	685b      	ldreq	r3, [r3, #4]
 801324c:	1809      	addeq	r1, r1, r0
 801324e:	6021      	streq	r1, [r4, #0]
 8013250:	e7ed      	b.n	801322e <_free_r+0x1e>
 8013252:	461a      	mov	r2, r3
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	b10b      	cbz	r3, 801325c <_free_r+0x4c>
 8013258:	42a3      	cmp	r3, r4
 801325a:	d9fa      	bls.n	8013252 <_free_r+0x42>
 801325c:	6811      	ldr	r1, [r2, #0]
 801325e:	1850      	adds	r0, r2, r1
 8013260:	42a0      	cmp	r0, r4
 8013262:	d10b      	bne.n	801327c <_free_r+0x6c>
 8013264:	6820      	ldr	r0, [r4, #0]
 8013266:	4401      	add	r1, r0
 8013268:	1850      	adds	r0, r2, r1
 801326a:	4283      	cmp	r3, r0
 801326c:	6011      	str	r1, [r2, #0]
 801326e:	d1e0      	bne.n	8013232 <_free_r+0x22>
 8013270:	6818      	ldr	r0, [r3, #0]
 8013272:	685b      	ldr	r3, [r3, #4]
 8013274:	6053      	str	r3, [r2, #4]
 8013276:	4408      	add	r0, r1
 8013278:	6010      	str	r0, [r2, #0]
 801327a:	e7da      	b.n	8013232 <_free_r+0x22>
 801327c:	d902      	bls.n	8013284 <_free_r+0x74>
 801327e:	230c      	movs	r3, #12
 8013280:	602b      	str	r3, [r5, #0]
 8013282:	e7d6      	b.n	8013232 <_free_r+0x22>
 8013284:	6820      	ldr	r0, [r4, #0]
 8013286:	1821      	adds	r1, r4, r0
 8013288:	428b      	cmp	r3, r1
 801328a:	bf04      	itt	eq
 801328c:	6819      	ldreq	r1, [r3, #0]
 801328e:	685b      	ldreq	r3, [r3, #4]
 8013290:	6063      	str	r3, [r4, #4]
 8013292:	bf04      	itt	eq
 8013294:	1809      	addeq	r1, r1, r0
 8013296:	6021      	streq	r1, [r4, #0]
 8013298:	6054      	str	r4, [r2, #4]
 801329a:	e7ca      	b.n	8013232 <_free_r+0x22>
 801329c:	bd38      	pop	{r3, r4, r5, pc}
 801329e:	bf00      	nop
 80132a0:	200043e4 	.word	0x200043e4

080132a4 <malloc>:
 80132a4:	4b02      	ldr	r3, [pc, #8]	@ (80132b0 <malloc+0xc>)
 80132a6:	4601      	mov	r1, r0
 80132a8:	6818      	ldr	r0, [r3, #0]
 80132aa:	f000 b825 	b.w	80132f8 <_malloc_r>
 80132ae:	bf00      	nop
 80132b0:	2000003c 	.word	0x2000003c

080132b4 <sbrk_aligned>:
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	4e0f      	ldr	r6, [pc, #60]	@ (80132f4 <sbrk_aligned+0x40>)
 80132b8:	460c      	mov	r4, r1
 80132ba:	6831      	ldr	r1, [r6, #0]
 80132bc:	4605      	mov	r5, r0
 80132be:	b911      	cbnz	r1, 80132c6 <sbrk_aligned+0x12>
 80132c0:	f001 fe04 	bl	8014ecc <_sbrk_r>
 80132c4:	6030      	str	r0, [r6, #0]
 80132c6:	4621      	mov	r1, r4
 80132c8:	4628      	mov	r0, r5
 80132ca:	f001 fdff 	bl	8014ecc <_sbrk_r>
 80132ce:	1c43      	adds	r3, r0, #1
 80132d0:	d103      	bne.n	80132da <sbrk_aligned+0x26>
 80132d2:	f04f 34ff 	mov.w	r4, #4294967295
 80132d6:	4620      	mov	r0, r4
 80132d8:	bd70      	pop	{r4, r5, r6, pc}
 80132da:	1cc4      	adds	r4, r0, #3
 80132dc:	f024 0403 	bic.w	r4, r4, #3
 80132e0:	42a0      	cmp	r0, r4
 80132e2:	d0f8      	beq.n	80132d6 <sbrk_aligned+0x22>
 80132e4:	1a21      	subs	r1, r4, r0
 80132e6:	4628      	mov	r0, r5
 80132e8:	f001 fdf0 	bl	8014ecc <_sbrk_r>
 80132ec:	3001      	adds	r0, #1
 80132ee:	d1f2      	bne.n	80132d6 <sbrk_aligned+0x22>
 80132f0:	e7ef      	b.n	80132d2 <sbrk_aligned+0x1e>
 80132f2:	bf00      	nop
 80132f4:	200043e0 	.word	0x200043e0

080132f8 <_malloc_r>:
 80132f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132fc:	1ccd      	adds	r5, r1, #3
 80132fe:	f025 0503 	bic.w	r5, r5, #3
 8013302:	3508      	adds	r5, #8
 8013304:	2d0c      	cmp	r5, #12
 8013306:	bf38      	it	cc
 8013308:	250c      	movcc	r5, #12
 801330a:	2d00      	cmp	r5, #0
 801330c:	4606      	mov	r6, r0
 801330e:	db01      	blt.n	8013314 <_malloc_r+0x1c>
 8013310:	42a9      	cmp	r1, r5
 8013312:	d904      	bls.n	801331e <_malloc_r+0x26>
 8013314:	230c      	movs	r3, #12
 8013316:	6033      	str	r3, [r6, #0]
 8013318:	2000      	movs	r0, #0
 801331a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801331e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80133f4 <_malloc_r+0xfc>
 8013322:	f000 f869 	bl	80133f8 <__malloc_lock>
 8013326:	f8d8 3000 	ldr.w	r3, [r8]
 801332a:	461c      	mov	r4, r3
 801332c:	bb44      	cbnz	r4, 8013380 <_malloc_r+0x88>
 801332e:	4629      	mov	r1, r5
 8013330:	4630      	mov	r0, r6
 8013332:	f7ff ffbf 	bl	80132b4 <sbrk_aligned>
 8013336:	1c43      	adds	r3, r0, #1
 8013338:	4604      	mov	r4, r0
 801333a:	d158      	bne.n	80133ee <_malloc_r+0xf6>
 801333c:	f8d8 4000 	ldr.w	r4, [r8]
 8013340:	4627      	mov	r7, r4
 8013342:	2f00      	cmp	r7, #0
 8013344:	d143      	bne.n	80133ce <_malloc_r+0xd6>
 8013346:	2c00      	cmp	r4, #0
 8013348:	d04b      	beq.n	80133e2 <_malloc_r+0xea>
 801334a:	6823      	ldr	r3, [r4, #0]
 801334c:	4639      	mov	r1, r7
 801334e:	4630      	mov	r0, r6
 8013350:	eb04 0903 	add.w	r9, r4, r3
 8013354:	f001 fdba 	bl	8014ecc <_sbrk_r>
 8013358:	4581      	cmp	r9, r0
 801335a:	d142      	bne.n	80133e2 <_malloc_r+0xea>
 801335c:	6821      	ldr	r1, [r4, #0]
 801335e:	1a6d      	subs	r5, r5, r1
 8013360:	4629      	mov	r1, r5
 8013362:	4630      	mov	r0, r6
 8013364:	f7ff ffa6 	bl	80132b4 <sbrk_aligned>
 8013368:	3001      	adds	r0, #1
 801336a:	d03a      	beq.n	80133e2 <_malloc_r+0xea>
 801336c:	6823      	ldr	r3, [r4, #0]
 801336e:	442b      	add	r3, r5
 8013370:	6023      	str	r3, [r4, #0]
 8013372:	f8d8 3000 	ldr.w	r3, [r8]
 8013376:	685a      	ldr	r2, [r3, #4]
 8013378:	bb62      	cbnz	r2, 80133d4 <_malloc_r+0xdc>
 801337a:	f8c8 7000 	str.w	r7, [r8]
 801337e:	e00f      	b.n	80133a0 <_malloc_r+0xa8>
 8013380:	6822      	ldr	r2, [r4, #0]
 8013382:	1b52      	subs	r2, r2, r5
 8013384:	d420      	bmi.n	80133c8 <_malloc_r+0xd0>
 8013386:	2a0b      	cmp	r2, #11
 8013388:	d917      	bls.n	80133ba <_malloc_r+0xc2>
 801338a:	1961      	adds	r1, r4, r5
 801338c:	42a3      	cmp	r3, r4
 801338e:	6025      	str	r5, [r4, #0]
 8013390:	bf18      	it	ne
 8013392:	6059      	strne	r1, [r3, #4]
 8013394:	6863      	ldr	r3, [r4, #4]
 8013396:	bf08      	it	eq
 8013398:	f8c8 1000 	streq.w	r1, [r8]
 801339c:	5162      	str	r2, [r4, r5]
 801339e:	604b      	str	r3, [r1, #4]
 80133a0:	4630      	mov	r0, r6
 80133a2:	f000 f82f 	bl	8013404 <__malloc_unlock>
 80133a6:	f104 000b 	add.w	r0, r4, #11
 80133aa:	1d23      	adds	r3, r4, #4
 80133ac:	f020 0007 	bic.w	r0, r0, #7
 80133b0:	1ac2      	subs	r2, r0, r3
 80133b2:	bf1c      	itt	ne
 80133b4:	1a1b      	subne	r3, r3, r0
 80133b6:	50a3      	strne	r3, [r4, r2]
 80133b8:	e7af      	b.n	801331a <_malloc_r+0x22>
 80133ba:	6862      	ldr	r2, [r4, #4]
 80133bc:	42a3      	cmp	r3, r4
 80133be:	bf0c      	ite	eq
 80133c0:	f8c8 2000 	streq.w	r2, [r8]
 80133c4:	605a      	strne	r2, [r3, #4]
 80133c6:	e7eb      	b.n	80133a0 <_malloc_r+0xa8>
 80133c8:	4623      	mov	r3, r4
 80133ca:	6864      	ldr	r4, [r4, #4]
 80133cc:	e7ae      	b.n	801332c <_malloc_r+0x34>
 80133ce:	463c      	mov	r4, r7
 80133d0:	687f      	ldr	r7, [r7, #4]
 80133d2:	e7b6      	b.n	8013342 <_malloc_r+0x4a>
 80133d4:	461a      	mov	r2, r3
 80133d6:	685b      	ldr	r3, [r3, #4]
 80133d8:	42a3      	cmp	r3, r4
 80133da:	d1fb      	bne.n	80133d4 <_malloc_r+0xdc>
 80133dc:	2300      	movs	r3, #0
 80133de:	6053      	str	r3, [r2, #4]
 80133e0:	e7de      	b.n	80133a0 <_malloc_r+0xa8>
 80133e2:	230c      	movs	r3, #12
 80133e4:	6033      	str	r3, [r6, #0]
 80133e6:	4630      	mov	r0, r6
 80133e8:	f000 f80c 	bl	8013404 <__malloc_unlock>
 80133ec:	e794      	b.n	8013318 <_malloc_r+0x20>
 80133ee:	6005      	str	r5, [r0, #0]
 80133f0:	e7d6      	b.n	80133a0 <_malloc_r+0xa8>
 80133f2:	bf00      	nop
 80133f4:	200043e4 	.word	0x200043e4

080133f8 <__malloc_lock>:
 80133f8:	4801      	ldr	r0, [pc, #4]	@ (8013400 <__malloc_lock+0x8>)
 80133fa:	f7ff b89a 	b.w	8012532 <__retarget_lock_acquire_recursive>
 80133fe:	bf00      	nop
 8013400:	200043dc 	.word	0x200043dc

08013404 <__malloc_unlock>:
 8013404:	4801      	ldr	r0, [pc, #4]	@ (801340c <__malloc_unlock+0x8>)
 8013406:	f7ff b895 	b.w	8012534 <__retarget_lock_release_recursive>
 801340a:	bf00      	nop
 801340c:	200043dc 	.word	0x200043dc

08013410 <_Balloc>:
 8013410:	b570      	push	{r4, r5, r6, lr}
 8013412:	69c6      	ldr	r6, [r0, #28]
 8013414:	4604      	mov	r4, r0
 8013416:	460d      	mov	r5, r1
 8013418:	b976      	cbnz	r6, 8013438 <_Balloc+0x28>
 801341a:	2010      	movs	r0, #16
 801341c:	f7ff ff42 	bl	80132a4 <malloc>
 8013420:	4602      	mov	r2, r0
 8013422:	61e0      	str	r0, [r4, #28]
 8013424:	b920      	cbnz	r0, 8013430 <_Balloc+0x20>
 8013426:	4b18      	ldr	r3, [pc, #96]	@ (8013488 <_Balloc+0x78>)
 8013428:	4818      	ldr	r0, [pc, #96]	@ (801348c <_Balloc+0x7c>)
 801342a:	216b      	movs	r1, #107	@ 0x6b
 801342c:	f001 fd68 	bl	8014f00 <__assert_func>
 8013430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013434:	6006      	str	r6, [r0, #0]
 8013436:	60c6      	str	r6, [r0, #12]
 8013438:	69e6      	ldr	r6, [r4, #28]
 801343a:	68f3      	ldr	r3, [r6, #12]
 801343c:	b183      	cbz	r3, 8013460 <_Balloc+0x50>
 801343e:	69e3      	ldr	r3, [r4, #28]
 8013440:	68db      	ldr	r3, [r3, #12]
 8013442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013446:	b9b8      	cbnz	r0, 8013478 <_Balloc+0x68>
 8013448:	2101      	movs	r1, #1
 801344a:	fa01 f605 	lsl.w	r6, r1, r5
 801344e:	1d72      	adds	r2, r6, #5
 8013450:	0092      	lsls	r2, r2, #2
 8013452:	4620      	mov	r0, r4
 8013454:	f001 fd72 	bl	8014f3c <_calloc_r>
 8013458:	b160      	cbz	r0, 8013474 <_Balloc+0x64>
 801345a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801345e:	e00e      	b.n	801347e <_Balloc+0x6e>
 8013460:	2221      	movs	r2, #33	@ 0x21
 8013462:	2104      	movs	r1, #4
 8013464:	4620      	mov	r0, r4
 8013466:	f001 fd69 	bl	8014f3c <_calloc_r>
 801346a:	69e3      	ldr	r3, [r4, #28]
 801346c:	60f0      	str	r0, [r6, #12]
 801346e:	68db      	ldr	r3, [r3, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d1e4      	bne.n	801343e <_Balloc+0x2e>
 8013474:	2000      	movs	r0, #0
 8013476:	bd70      	pop	{r4, r5, r6, pc}
 8013478:	6802      	ldr	r2, [r0, #0]
 801347a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801347e:	2300      	movs	r3, #0
 8013480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013484:	e7f7      	b.n	8013476 <_Balloc+0x66>
 8013486:	bf00      	nop
 8013488:	08016676 	.word	0x08016676
 801348c:	080166f6 	.word	0x080166f6

08013490 <_Bfree>:
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	69c6      	ldr	r6, [r0, #28]
 8013494:	4605      	mov	r5, r0
 8013496:	460c      	mov	r4, r1
 8013498:	b976      	cbnz	r6, 80134b8 <_Bfree+0x28>
 801349a:	2010      	movs	r0, #16
 801349c:	f7ff ff02 	bl	80132a4 <malloc>
 80134a0:	4602      	mov	r2, r0
 80134a2:	61e8      	str	r0, [r5, #28]
 80134a4:	b920      	cbnz	r0, 80134b0 <_Bfree+0x20>
 80134a6:	4b09      	ldr	r3, [pc, #36]	@ (80134cc <_Bfree+0x3c>)
 80134a8:	4809      	ldr	r0, [pc, #36]	@ (80134d0 <_Bfree+0x40>)
 80134aa:	218f      	movs	r1, #143	@ 0x8f
 80134ac:	f001 fd28 	bl	8014f00 <__assert_func>
 80134b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80134b4:	6006      	str	r6, [r0, #0]
 80134b6:	60c6      	str	r6, [r0, #12]
 80134b8:	b13c      	cbz	r4, 80134ca <_Bfree+0x3a>
 80134ba:	69eb      	ldr	r3, [r5, #28]
 80134bc:	6862      	ldr	r2, [r4, #4]
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80134c4:	6021      	str	r1, [r4, #0]
 80134c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80134ca:	bd70      	pop	{r4, r5, r6, pc}
 80134cc:	08016676 	.word	0x08016676
 80134d0:	080166f6 	.word	0x080166f6

080134d4 <__multadd>:
 80134d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134d8:	690d      	ldr	r5, [r1, #16]
 80134da:	4607      	mov	r7, r0
 80134dc:	460c      	mov	r4, r1
 80134de:	461e      	mov	r6, r3
 80134e0:	f101 0c14 	add.w	ip, r1, #20
 80134e4:	2000      	movs	r0, #0
 80134e6:	f8dc 3000 	ldr.w	r3, [ip]
 80134ea:	b299      	uxth	r1, r3
 80134ec:	fb02 6101 	mla	r1, r2, r1, r6
 80134f0:	0c1e      	lsrs	r6, r3, #16
 80134f2:	0c0b      	lsrs	r3, r1, #16
 80134f4:	fb02 3306 	mla	r3, r2, r6, r3
 80134f8:	b289      	uxth	r1, r1
 80134fa:	3001      	adds	r0, #1
 80134fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013500:	4285      	cmp	r5, r0
 8013502:	f84c 1b04 	str.w	r1, [ip], #4
 8013506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801350a:	dcec      	bgt.n	80134e6 <__multadd+0x12>
 801350c:	b30e      	cbz	r6, 8013552 <__multadd+0x7e>
 801350e:	68a3      	ldr	r3, [r4, #8]
 8013510:	42ab      	cmp	r3, r5
 8013512:	dc19      	bgt.n	8013548 <__multadd+0x74>
 8013514:	6861      	ldr	r1, [r4, #4]
 8013516:	4638      	mov	r0, r7
 8013518:	3101      	adds	r1, #1
 801351a:	f7ff ff79 	bl	8013410 <_Balloc>
 801351e:	4680      	mov	r8, r0
 8013520:	b928      	cbnz	r0, 801352e <__multadd+0x5a>
 8013522:	4602      	mov	r2, r0
 8013524:	4b0c      	ldr	r3, [pc, #48]	@ (8013558 <__multadd+0x84>)
 8013526:	480d      	ldr	r0, [pc, #52]	@ (801355c <__multadd+0x88>)
 8013528:	21ba      	movs	r1, #186	@ 0xba
 801352a:	f001 fce9 	bl	8014f00 <__assert_func>
 801352e:	6922      	ldr	r2, [r4, #16]
 8013530:	3202      	adds	r2, #2
 8013532:	f104 010c 	add.w	r1, r4, #12
 8013536:	0092      	lsls	r2, r2, #2
 8013538:	300c      	adds	r0, #12
 801353a:	f7fe fffc 	bl	8012536 <memcpy>
 801353e:	4621      	mov	r1, r4
 8013540:	4638      	mov	r0, r7
 8013542:	f7ff ffa5 	bl	8013490 <_Bfree>
 8013546:	4644      	mov	r4, r8
 8013548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801354c:	3501      	adds	r5, #1
 801354e:	615e      	str	r6, [r3, #20]
 8013550:	6125      	str	r5, [r4, #16]
 8013552:	4620      	mov	r0, r4
 8013554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013558:	080166e5 	.word	0x080166e5
 801355c:	080166f6 	.word	0x080166f6

08013560 <__s2b>:
 8013560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013564:	460c      	mov	r4, r1
 8013566:	4615      	mov	r5, r2
 8013568:	461f      	mov	r7, r3
 801356a:	2209      	movs	r2, #9
 801356c:	3308      	adds	r3, #8
 801356e:	4606      	mov	r6, r0
 8013570:	fb93 f3f2 	sdiv	r3, r3, r2
 8013574:	2100      	movs	r1, #0
 8013576:	2201      	movs	r2, #1
 8013578:	429a      	cmp	r2, r3
 801357a:	db09      	blt.n	8013590 <__s2b+0x30>
 801357c:	4630      	mov	r0, r6
 801357e:	f7ff ff47 	bl	8013410 <_Balloc>
 8013582:	b940      	cbnz	r0, 8013596 <__s2b+0x36>
 8013584:	4602      	mov	r2, r0
 8013586:	4b19      	ldr	r3, [pc, #100]	@ (80135ec <__s2b+0x8c>)
 8013588:	4819      	ldr	r0, [pc, #100]	@ (80135f0 <__s2b+0x90>)
 801358a:	21d3      	movs	r1, #211	@ 0xd3
 801358c:	f001 fcb8 	bl	8014f00 <__assert_func>
 8013590:	0052      	lsls	r2, r2, #1
 8013592:	3101      	adds	r1, #1
 8013594:	e7f0      	b.n	8013578 <__s2b+0x18>
 8013596:	9b08      	ldr	r3, [sp, #32]
 8013598:	6143      	str	r3, [r0, #20]
 801359a:	2d09      	cmp	r5, #9
 801359c:	f04f 0301 	mov.w	r3, #1
 80135a0:	6103      	str	r3, [r0, #16]
 80135a2:	dd16      	ble.n	80135d2 <__s2b+0x72>
 80135a4:	f104 0909 	add.w	r9, r4, #9
 80135a8:	46c8      	mov	r8, r9
 80135aa:	442c      	add	r4, r5
 80135ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80135b0:	4601      	mov	r1, r0
 80135b2:	3b30      	subs	r3, #48	@ 0x30
 80135b4:	220a      	movs	r2, #10
 80135b6:	4630      	mov	r0, r6
 80135b8:	f7ff ff8c 	bl	80134d4 <__multadd>
 80135bc:	45a0      	cmp	r8, r4
 80135be:	d1f5      	bne.n	80135ac <__s2b+0x4c>
 80135c0:	f1a5 0408 	sub.w	r4, r5, #8
 80135c4:	444c      	add	r4, r9
 80135c6:	1b2d      	subs	r5, r5, r4
 80135c8:	1963      	adds	r3, r4, r5
 80135ca:	42bb      	cmp	r3, r7
 80135cc:	db04      	blt.n	80135d8 <__s2b+0x78>
 80135ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135d2:	340a      	adds	r4, #10
 80135d4:	2509      	movs	r5, #9
 80135d6:	e7f6      	b.n	80135c6 <__s2b+0x66>
 80135d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80135dc:	4601      	mov	r1, r0
 80135de:	3b30      	subs	r3, #48	@ 0x30
 80135e0:	220a      	movs	r2, #10
 80135e2:	4630      	mov	r0, r6
 80135e4:	f7ff ff76 	bl	80134d4 <__multadd>
 80135e8:	e7ee      	b.n	80135c8 <__s2b+0x68>
 80135ea:	bf00      	nop
 80135ec:	080166e5 	.word	0x080166e5
 80135f0:	080166f6 	.word	0x080166f6

080135f4 <__hi0bits>:
 80135f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80135f8:	4603      	mov	r3, r0
 80135fa:	bf36      	itet	cc
 80135fc:	0403      	lslcc	r3, r0, #16
 80135fe:	2000      	movcs	r0, #0
 8013600:	2010      	movcc	r0, #16
 8013602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013606:	bf3c      	itt	cc
 8013608:	021b      	lslcc	r3, r3, #8
 801360a:	3008      	addcc	r0, #8
 801360c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013610:	bf3c      	itt	cc
 8013612:	011b      	lslcc	r3, r3, #4
 8013614:	3004      	addcc	r0, #4
 8013616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801361a:	bf3c      	itt	cc
 801361c:	009b      	lslcc	r3, r3, #2
 801361e:	3002      	addcc	r0, #2
 8013620:	2b00      	cmp	r3, #0
 8013622:	db05      	blt.n	8013630 <__hi0bits+0x3c>
 8013624:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013628:	f100 0001 	add.w	r0, r0, #1
 801362c:	bf08      	it	eq
 801362e:	2020      	moveq	r0, #32
 8013630:	4770      	bx	lr

08013632 <__lo0bits>:
 8013632:	6803      	ldr	r3, [r0, #0]
 8013634:	4602      	mov	r2, r0
 8013636:	f013 0007 	ands.w	r0, r3, #7
 801363a:	d00b      	beq.n	8013654 <__lo0bits+0x22>
 801363c:	07d9      	lsls	r1, r3, #31
 801363e:	d421      	bmi.n	8013684 <__lo0bits+0x52>
 8013640:	0798      	lsls	r0, r3, #30
 8013642:	bf49      	itett	mi
 8013644:	085b      	lsrmi	r3, r3, #1
 8013646:	089b      	lsrpl	r3, r3, #2
 8013648:	2001      	movmi	r0, #1
 801364a:	6013      	strmi	r3, [r2, #0]
 801364c:	bf5c      	itt	pl
 801364e:	6013      	strpl	r3, [r2, #0]
 8013650:	2002      	movpl	r0, #2
 8013652:	4770      	bx	lr
 8013654:	b299      	uxth	r1, r3
 8013656:	b909      	cbnz	r1, 801365c <__lo0bits+0x2a>
 8013658:	0c1b      	lsrs	r3, r3, #16
 801365a:	2010      	movs	r0, #16
 801365c:	b2d9      	uxtb	r1, r3
 801365e:	b909      	cbnz	r1, 8013664 <__lo0bits+0x32>
 8013660:	3008      	adds	r0, #8
 8013662:	0a1b      	lsrs	r3, r3, #8
 8013664:	0719      	lsls	r1, r3, #28
 8013666:	bf04      	itt	eq
 8013668:	091b      	lsreq	r3, r3, #4
 801366a:	3004      	addeq	r0, #4
 801366c:	0799      	lsls	r1, r3, #30
 801366e:	bf04      	itt	eq
 8013670:	089b      	lsreq	r3, r3, #2
 8013672:	3002      	addeq	r0, #2
 8013674:	07d9      	lsls	r1, r3, #31
 8013676:	d403      	bmi.n	8013680 <__lo0bits+0x4e>
 8013678:	085b      	lsrs	r3, r3, #1
 801367a:	f100 0001 	add.w	r0, r0, #1
 801367e:	d003      	beq.n	8013688 <__lo0bits+0x56>
 8013680:	6013      	str	r3, [r2, #0]
 8013682:	4770      	bx	lr
 8013684:	2000      	movs	r0, #0
 8013686:	4770      	bx	lr
 8013688:	2020      	movs	r0, #32
 801368a:	4770      	bx	lr

0801368c <__i2b>:
 801368c:	b510      	push	{r4, lr}
 801368e:	460c      	mov	r4, r1
 8013690:	2101      	movs	r1, #1
 8013692:	f7ff febd 	bl	8013410 <_Balloc>
 8013696:	4602      	mov	r2, r0
 8013698:	b928      	cbnz	r0, 80136a6 <__i2b+0x1a>
 801369a:	4b05      	ldr	r3, [pc, #20]	@ (80136b0 <__i2b+0x24>)
 801369c:	4805      	ldr	r0, [pc, #20]	@ (80136b4 <__i2b+0x28>)
 801369e:	f240 1145 	movw	r1, #325	@ 0x145
 80136a2:	f001 fc2d 	bl	8014f00 <__assert_func>
 80136a6:	2301      	movs	r3, #1
 80136a8:	6144      	str	r4, [r0, #20]
 80136aa:	6103      	str	r3, [r0, #16]
 80136ac:	bd10      	pop	{r4, pc}
 80136ae:	bf00      	nop
 80136b0:	080166e5 	.word	0x080166e5
 80136b4:	080166f6 	.word	0x080166f6

080136b8 <__multiply>:
 80136b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136bc:	4617      	mov	r7, r2
 80136be:	690a      	ldr	r2, [r1, #16]
 80136c0:	693b      	ldr	r3, [r7, #16]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	bfa8      	it	ge
 80136c6:	463b      	movge	r3, r7
 80136c8:	4689      	mov	r9, r1
 80136ca:	bfa4      	itt	ge
 80136cc:	460f      	movge	r7, r1
 80136ce:	4699      	movge	r9, r3
 80136d0:	693d      	ldr	r5, [r7, #16]
 80136d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	6879      	ldr	r1, [r7, #4]
 80136da:	eb05 060a 	add.w	r6, r5, sl
 80136de:	42b3      	cmp	r3, r6
 80136e0:	b085      	sub	sp, #20
 80136e2:	bfb8      	it	lt
 80136e4:	3101      	addlt	r1, #1
 80136e6:	f7ff fe93 	bl	8013410 <_Balloc>
 80136ea:	b930      	cbnz	r0, 80136fa <__multiply+0x42>
 80136ec:	4602      	mov	r2, r0
 80136ee:	4b41      	ldr	r3, [pc, #260]	@ (80137f4 <__multiply+0x13c>)
 80136f0:	4841      	ldr	r0, [pc, #260]	@ (80137f8 <__multiply+0x140>)
 80136f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80136f6:	f001 fc03 	bl	8014f00 <__assert_func>
 80136fa:	f100 0414 	add.w	r4, r0, #20
 80136fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8013702:	4623      	mov	r3, r4
 8013704:	2200      	movs	r2, #0
 8013706:	4573      	cmp	r3, lr
 8013708:	d320      	bcc.n	801374c <__multiply+0x94>
 801370a:	f107 0814 	add.w	r8, r7, #20
 801370e:	f109 0114 	add.w	r1, r9, #20
 8013712:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8013716:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801371a:	9302      	str	r3, [sp, #8]
 801371c:	1beb      	subs	r3, r5, r7
 801371e:	3b15      	subs	r3, #21
 8013720:	f023 0303 	bic.w	r3, r3, #3
 8013724:	3304      	adds	r3, #4
 8013726:	3715      	adds	r7, #21
 8013728:	42bd      	cmp	r5, r7
 801372a:	bf38      	it	cc
 801372c:	2304      	movcc	r3, #4
 801372e:	9301      	str	r3, [sp, #4]
 8013730:	9b02      	ldr	r3, [sp, #8]
 8013732:	9103      	str	r1, [sp, #12]
 8013734:	428b      	cmp	r3, r1
 8013736:	d80c      	bhi.n	8013752 <__multiply+0x9a>
 8013738:	2e00      	cmp	r6, #0
 801373a:	dd03      	ble.n	8013744 <__multiply+0x8c>
 801373c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013740:	2b00      	cmp	r3, #0
 8013742:	d055      	beq.n	80137f0 <__multiply+0x138>
 8013744:	6106      	str	r6, [r0, #16]
 8013746:	b005      	add	sp, #20
 8013748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801374c:	f843 2b04 	str.w	r2, [r3], #4
 8013750:	e7d9      	b.n	8013706 <__multiply+0x4e>
 8013752:	f8b1 a000 	ldrh.w	sl, [r1]
 8013756:	f1ba 0f00 	cmp.w	sl, #0
 801375a:	d01f      	beq.n	801379c <__multiply+0xe4>
 801375c:	46c4      	mov	ip, r8
 801375e:	46a1      	mov	r9, r4
 8013760:	2700      	movs	r7, #0
 8013762:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013766:	f8d9 3000 	ldr.w	r3, [r9]
 801376a:	fa1f fb82 	uxth.w	fp, r2
 801376e:	b29b      	uxth	r3, r3
 8013770:	fb0a 330b 	mla	r3, sl, fp, r3
 8013774:	443b      	add	r3, r7
 8013776:	f8d9 7000 	ldr.w	r7, [r9]
 801377a:	0c12      	lsrs	r2, r2, #16
 801377c:	0c3f      	lsrs	r7, r7, #16
 801377e:	fb0a 7202 	mla	r2, sl, r2, r7
 8013782:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013786:	b29b      	uxth	r3, r3
 8013788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801378c:	4565      	cmp	r5, ip
 801378e:	f849 3b04 	str.w	r3, [r9], #4
 8013792:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8013796:	d8e4      	bhi.n	8013762 <__multiply+0xaa>
 8013798:	9b01      	ldr	r3, [sp, #4]
 801379a:	50e7      	str	r7, [r4, r3]
 801379c:	9b03      	ldr	r3, [sp, #12]
 801379e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80137a2:	3104      	adds	r1, #4
 80137a4:	f1b9 0f00 	cmp.w	r9, #0
 80137a8:	d020      	beq.n	80137ec <__multiply+0x134>
 80137aa:	6823      	ldr	r3, [r4, #0]
 80137ac:	4647      	mov	r7, r8
 80137ae:	46a4      	mov	ip, r4
 80137b0:	f04f 0a00 	mov.w	sl, #0
 80137b4:	f8b7 b000 	ldrh.w	fp, [r7]
 80137b8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80137bc:	fb09 220b 	mla	r2, r9, fp, r2
 80137c0:	4452      	add	r2, sl
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137c8:	f84c 3b04 	str.w	r3, [ip], #4
 80137cc:	f857 3b04 	ldr.w	r3, [r7], #4
 80137d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80137d4:	f8bc 3000 	ldrh.w	r3, [ip]
 80137d8:	fb09 330a 	mla	r3, r9, sl, r3
 80137dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80137e0:	42bd      	cmp	r5, r7
 80137e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80137e6:	d8e5      	bhi.n	80137b4 <__multiply+0xfc>
 80137e8:	9a01      	ldr	r2, [sp, #4]
 80137ea:	50a3      	str	r3, [r4, r2]
 80137ec:	3404      	adds	r4, #4
 80137ee:	e79f      	b.n	8013730 <__multiply+0x78>
 80137f0:	3e01      	subs	r6, #1
 80137f2:	e7a1      	b.n	8013738 <__multiply+0x80>
 80137f4:	080166e5 	.word	0x080166e5
 80137f8:	080166f6 	.word	0x080166f6

080137fc <__pow5mult>:
 80137fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013800:	4615      	mov	r5, r2
 8013802:	f012 0203 	ands.w	r2, r2, #3
 8013806:	4607      	mov	r7, r0
 8013808:	460e      	mov	r6, r1
 801380a:	d007      	beq.n	801381c <__pow5mult+0x20>
 801380c:	4c25      	ldr	r4, [pc, #148]	@ (80138a4 <__pow5mult+0xa8>)
 801380e:	3a01      	subs	r2, #1
 8013810:	2300      	movs	r3, #0
 8013812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013816:	f7ff fe5d 	bl	80134d4 <__multadd>
 801381a:	4606      	mov	r6, r0
 801381c:	10ad      	asrs	r5, r5, #2
 801381e:	d03d      	beq.n	801389c <__pow5mult+0xa0>
 8013820:	69fc      	ldr	r4, [r7, #28]
 8013822:	b97c      	cbnz	r4, 8013844 <__pow5mult+0x48>
 8013824:	2010      	movs	r0, #16
 8013826:	f7ff fd3d 	bl	80132a4 <malloc>
 801382a:	4602      	mov	r2, r0
 801382c:	61f8      	str	r0, [r7, #28]
 801382e:	b928      	cbnz	r0, 801383c <__pow5mult+0x40>
 8013830:	4b1d      	ldr	r3, [pc, #116]	@ (80138a8 <__pow5mult+0xac>)
 8013832:	481e      	ldr	r0, [pc, #120]	@ (80138ac <__pow5mult+0xb0>)
 8013834:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013838:	f001 fb62 	bl	8014f00 <__assert_func>
 801383c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013840:	6004      	str	r4, [r0, #0]
 8013842:	60c4      	str	r4, [r0, #12]
 8013844:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801384c:	b94c      	cbnz	r4, 8013862 <__pow5mult+0x66>
 801384e:	f240 2171 	movw	r1, #625	@ 0x271
 8013852:	4638      	mov	r0, r7
 8013854:	f7ff ff1a 	bl	801368c <__i2b>
 8013858:	2300      	movs	r3, #0
 801385a:	f8c8 0008 	str.w	r0, [r8, #8]
 801385e:	4604      	mov	r4, r0
 8013860:	6003      	str	r3, [r0, #0]
 8013862:	f04f 0900 	mov.w	r9, #0
 8013866:	07eb      	lsls	r3, r5, #31
 8013868:	d50a      	bpl.n	8013880 <__pow5mult+0x84>
 801386a:	4631      	mov	r1, r6
 801386c:	4622      	mov	r2, r4
 801386e:	4638      	mov	r0, r7
 8013870:	f7ff ff22 	bl	80136b8 <__multiply>
 8013874:	4631      	mov	r1, r6
 8013876:	4680      	mov	r8, r0
 8013878:	4638      	mov	r0, r7
 801387a:	f7ff fe09 	bl	8013490 <_Bfree>
 801387e:	4646      	mov	r6, r8
 8013880:	106d      	asrs	r5, r5, #1
 8013882:	d00b      	beq.n	801389c <__pow5mult+0xa0>
 8013884:	6820      	ldr	r0, [r4, #0]
 8013886:	b938      	cbnz	r0, 8013898 <__pow5mult+0x9c>
 8013888:	4622      	mov	r2, r4
 801388a:	4621      	mov	r1, r4
 801388c:	4638      	mov	r0, r7
 801388e:	f7ff ff13 	bl	80136b8 <__multiply>
 8013892:	6020      	str	r0, [r4, #0]
 8013894:	f8c0 9000 	str.w	r9, [r0]
 8013898:	4604      	mov	r4, r0
 801389a:	e7e4      	b.n	8013866 <__pow5mult+0x6a>
 801389c:	4630      	mov	r0, r6
 801389e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138a2:	bf00      	nop
 80138a4:	08016808 	.word	0x08016808
 80138a8:	08016676 	.word	0x08016676
 80138ac:	080166f6 	.word	0x080166f6

080138b0 <__lshift>:
 80138b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138b4:	460c      	mov	r4, r1
 80138b6:	6849      	ldr	r1, [r1, #4]
 80138b8:	6923      	ldr	r3, [r4, #16]
 80138ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80138be:	68a3      	ldr	r3, [r4, #8]
 80138c0:	4607      	mov	r7, r0
 80138c2:	4691      	mov	r9, r2
 80138c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80138c8:	f108 0601 	add.w	r6, r8, #1
 80138cc:	42b3      	cmp	r3, r6
 80138ce:	db0b      	blt.n	80138e8 <__lshift+0x38>
 80138d0:	4638      	mov	r0, r7
 80138d2:	f7ff fd9d 	bl	8013410 <_Balloc>
 80138d6:	4605      	mov	r5, r0
 80138d8:	b948      	cbnz	r0, 80138ee <__lshift+0x3e>
 80138da:	4602      	mov	r2, r0
 80138dc:	4b28      	ldr	r3, [pc, #160]	@ (8013980 <__lshift+0xd0>)
 80138de:	4829      	ldr	r0, [pc, #164]	@ (8013984 <__lshift+0xd4>)
 80138e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80138e4:	f001 fb0c 	bl	8014f00 <__assert_func>
 80138e8:	3101      	adds	r1, #1
 80138ea:	005b      	lsls	r3, r3, #1
 80138ec:	e7ee      	b.n	80138cc <__lshift+0x1c>
 80138ee:	2300      	movs	r3, #0
 80138f0:	f100 0114 	add.w	r1, r0, #20
 80138f4:	f100 0210 	add.w	r2, r0, #16
 80138f8:	4618      	mov	r0, r3
 80138fa:	4553      	cmp	r3, sl
 80138fc:	db33      	blt.n	8013966 <__lshift+0xb6>
 80138fe:	6920      	ldr	r0, [r4, #16]
 8013900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013904:	f104 0314 	add.w	r3, r4, #20
 8013908:	f019 091f 	ands.w	r9, r9, #31
 801390c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013914:	d02b      	beq.n	801396e <__lshift+0xbe>
 8013916:	f1c9 0e20 	rsb	lr, r9, #32
 801391a:	468a      	mov	sl, r1
 801391c:	2200      	movs	r2, #0
 801391e:	6818      	ldr	r0, [r3, #0]
 8013920:	fa00 f009 	lsl.w	r0, r0, r9
 8013924:	4310      	orrs	r0, r2
 8013926:	f84a 0b04 	str.w	r0, [sl], #4
 801392a:	f853 2b04 	ldr.w	r2, [r3], #4
 801392e:	459c      	cmp	ip, r3
 8013930:	fa22 f20e 	lsr.w	r2, r2, lr
 8013934:	d8f3      	bhi.n	801391e <__lshift+0x6e>
 8013936:	ebac 0304 	sub.w	r3, ip, r4
 801393a:	3b15      	subs	r3, #21
 801393c:	f023 0303 	bic.w	r3, r3, #3
 8013940:	3304      	adds	r3, #4
 8013942:	f104 0015 	add.w	r0, r4, #21
 8013946:	4560      	cmp	r0, ip
 8013948:	bf88      	it	hi
 801394a:	2304      	movhi	r3, #4
 801394c:	50ca      	str	r2, [r1, r3]
 801394e:	b10a      	cbz	r2, 8013954 <__lshift+0xa4>
 8013950:	f108 0602 	add.w	r6, r8, #2
 8013954:	3e01      	subs	r6, #1
 8013956:	4638      	mov	r0, r7
 8013958:	612e      	str	r6, [r5, #16]
 801395a:	4621      	mov	r1, r4
 801395c:	f7ff fd98 	bl	8013490 <_Bfree>
 8013960:	4628      	mov	r0, r5
 8013962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013966:	f842 0f04 	str.w	r0, [r2, #4]!
 801396a:	3301      	adds	r3, #1
 801396c:	e7c5      	b.n	80138fa <__lshift+0x4a>
 801396e:	3904      	subs	r1, #4
 8013970:	f853 2b04 	ldr.w	r2, [r3], #4
 8013974:	f841 2f04 	str.w	r2, [r1, #4]!
 8013978:	459c      	cmp	ip, r3
 801397a:	d8f9      	bhi.n	8013970 <__lshift+0xc0>
 801397c:	e7ea      	b.n	8013954 <__lshift+0xa4>
 801397e:	bf00      	nop
 8013980:	080166e5 	.word	0x080166e5
 8013984:	080166f6 	.word	0x080166f6

08013988 <__mcmp>:
 8013988:	690a      	ldr	r2, [r1, #16]
 801398a:	4603      	mov	r3, r0
 801398c:	6900      	ldr	r0, [r0, #16]
 801398e:	1a80      	subs	r0, r0, r2
 8013990:	b530      	push	{r4, r5, lr}
 8013992:	d10e      	bne.n	80139b2 <__mcmp+0x2a>
 8013994:	3314      	adds	r3, #20
 8013996:	3114      	adds	r1, #20
 8013998:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801399c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80139a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80139a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80139a8:	4295      	cmp	r5, r2
 80139aa:	d003      	beq.n	80139b4 <__mcmp+0x2c>
 80139ac:	d205      	bcs.n	80139ba <__mcmp+0x32>
 80139ae:	f04f 30ff 	mov.w	r0, #4294967295
 80139b2:	bd30      	pop	{r4, r5, pc}
 80139b4:	42a3      	cmp	r3, r4
 80139b6:	d3f3      	bcc.n	80139a0 <__mcmp+0x18>
 80139b8:	e7fb      	b.n	80139b2 <__mcmp+0x2a>
 80139ba:	2001      	movs	r0, #1
 80139bc:	e7f9      	b.n	80139b2 <__mcmp+0x2a>
	...

080139c0 <__mdiff>:
 80139c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c4:	4689      	mov	r9, r1
 80139c6:	4606      	mov	r6, r0
 80139c8:	4611      	mov	r1, r2
 80139ca:	4648      	mov	r0, r9
 80139cc:	4614      	mov	r4, r2
 80139ce:	f7ff ffdb 	bl	8013988 <__mcmp>
 80139d2:	1e05      	subs	r5, r0, #0
 80139d4:	d112      	bne.n	80139fc <__mdiff+0x3c>
 80139d6:	4629      	mov	r1, r5
 80139d8:	4630      	mov	r0, r6
 80139da:	f7ff fd19 	bl	8013410 <_Balloc>
 80139de:	4602      	mov	r2, r0
 80139e0:	b928      	cbnz	r0, 80139ee <__mdiff+0x2e>
 80139e2:	4b3f      	ldr	r3, [pc, #252]	@ (8013ae0 <__mdiff+0x120>)
 80139e4:	f240 2137 	movw	r1, #567	@ 0x237
 80139e8:	483e      	ldr	r0, [pc, #248]	@ (8013ae4 <__mdiff+0x124>)
 80139ea:	f001 fa89 	bl	8014f00 <__assert_func>
 80139ee:	2301      	movs	r3, #1
 80139f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80139f4:	4610      	mov	r0, r2
 80139f6:	b003      	add	sp, #12
 80139f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139fc:	bfbc      	itt	lt
 80139fe:	464b      	movlt	r3, r9
 8013a00:	46a1      	movlt	r9, r4
 8013a02:	4630      	mov	r0, r6
 8013a04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013a08:	bfba      	itte	lt
 8013a0a:	461c      	movlt	r4, r3
 8013a0c:	2501      	movlt	r5, #1
 8013a0e:	2500      	movge	r5, #0
 8013a10:	f7ff fcfe 	bl	8013410 <_Balloc>
 8013a14:	4602      	mov	r2, r0
 8013a16:	b918      	cbnz	r0, 8013a20 <__mdiff+0x60>
 8013a18:	4b31      	ldr	r3, [pc, #196]	@ (8013ae0 <__mdiff+0x120>)
 8013a1a:	f240 2145 	movw	r1, #581	@ 0x245
 8013a1e:	e7e3      	b.n	80139e8 <__mdiff+0x28>
 8013a20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013a24:	6926      	ldr	r6, [r4, #16]
 8013a26:	60c5      	str	r5, [r0, #12]
 8013a28:	f109 0310 	add.w	r3, r9, #16
 8013a2c:	f109 0514 	add.w	r5, r9, #20
 8013a30:	f104 0e14 	add.w	lr, r4, #20
 8013a34:	f100 0b14 	add.w	fp, r0, #20
 8013a38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013a3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013a40:	9301      	str	r3, [sp, #4]
 8013a42:	46d9      	mov	r9, fp
 8013a44:	f04f 0c00 	mov.w	ip, #0
 8013a48:	9b01      	ldr	r3, [sp, #4]
 8013a4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013a4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013a52:	9301      	str	r3, [sp, #4]
 8013a54:	fa1f f38a 	uxth.w	r3, sl
 8013a58:	4619      	mov	r1, r3
 8013a5a:	b283      	uxth	r3, r0
 8013a5c:	1acb      	subs	r3, r1, r3
 8013a5e:	0c00      	lsrs	r0, r0, #16
 8013a60:	4463      	add	r3, ip
 8013a62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013a66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013a70:	4576      	cmp	r6, lr
 8013a72:	f849 3b04 	str.w	r3, [r9], #4
 8013a76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013a7a:	d8e5      	bhi.n	8013a48 <__mdiff+0x88>
 8013a7c:	1b33      	subs	r3, r6, r4
 8013a7e:	3b15      	subs	r3, #21
 8013a80:	f023 0303 	bic.w	r3, r3, #3
 8013a84:	3415      	adds	r4, #21
 8013a86:	3304      	adds	r3, #4
 8013a88:	42a6      	cmp	r6, r4
 8013a8a:	bf38      	it	cc
 8013a8c:	2304      	movcc	r3, #4
 8013a8e:	441d      	add	r5, r3
 8013a90:	445b      	add	r3, fp
 8013a92:	461e      	mov	r6, r3
 8013a94:	462c      	mov	r4, r5
 8013a96:	4544      	cmp	r4, r8
 8013a98:	d30e      	bcc.n	8013ab8 <__mdiff+0xf8>
 8013a9a:	f108 0103 	add.w	r1, r8, #3
 8013a9e:	1b49      	subs	r1, r1, r5
 8013aa0:	f021 0103 	bic.w	r1, r1, #3
 8013aa4:	3d03      	subs	r5, #3
 8013aa6:	45a8      	cmp	r8, r5
 8013aa8:	bf38      	it	cc
 8013aaa:	2100      	movcc	r1, #0
 8013aac:	440b      	add	r3, r1
 8013aae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013ab2:	b191      	cbz	r1, 8013ada <__mdiff+0x11a>
 8013ab4:	6117      	str	r7, [r2, #16]
 8013ab6:	e79d      	b.n	80139f4 <__mdiff+0x34>
 8013ab8:	f854 1b04 	ldr.w	r1, [r4], #4
 8013abc:	46e6      	mov	lr, ip
 8013abe:	0c08      	lsrs	r0, r1, #16
 8013ac0:	fa1c fc81 	uxtah	ip, ip, r1
 8013ac4:	4471      	add	r1, lr
 8013ac6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013aca:	b289      	uxth	r1, r1
 8013acc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013ad0:	f846 1b04 	str.w	r1, [r6], #4
 8013ad4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013ad8:	e7dd      	b.n	8013a96 <__mdiff+0xd6>
 8013ada:	3f01      	subs	r7, #1
 8013adc:	e7e7      	b.n	8013aae <__mdiff+0xee>
 8013ade:	bf00      	nop
 8013ae0:	080166e5 	.word	0x080166e5
 8013ae4:	080166f6 	.word	0x080166f6

08013ae8 <__ulp>:
 8013ae8:	b082      	sub	sp, #8
 8013aea:	ed8d 0b00 	vstr	d0, [sp]
 8013aee:	9a01      	ldr	r2, [sp, #4]
 8013af0:	4b0f      	ldr	r3, [pc, #60]	@ (8013b30 <__ulp+0x48>)
 8013af2:	4013      	ands	r3, r2
 8013af4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	dc08      	bgt.n	8013b0e <__ulp+0x26>
 8013afc:	425b      	negs	r3, r3
 8013afe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013b02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013b06:	da04      	bge.n	8013b12 <__ulp+0x2a>
 8013b08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013b0c:	4113      	asrs	r3, r2
 8013b0e:	2200      	movs	r2, #0
 8013b10:	e008      	b.n	8013b24 <__ulp+0x3c>
 8013b12:	f1a2 0314 	sub.w	r3, r2, #20
 8013b16:	2b1e      	cmp	r3, #30
 8013b18:	bfda      	itte	le
 8013b1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013b1e:	40da      	lsrle	r2, r3
 8013b20:	2201      	movgt	r2, #1
 8013b22:	2300      	movs	r3, #0
 8013b24:	4619      	mov	r1, r3
 8013b26:	4610      	mov	r0, r2
 8013b28:	ec41 0b10 	vmov	d0, r0, r1
 8013b2c:	b002      	add	sp, #8
 8013b2e:	4770      	bx	lr
 8013b30:	7ff00000 	.word	0x7ff00000

08013b34 <__b2d>:
 8013b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b38:	6906      	ldr	r6, [r0, #16]
 8013b3a:	f100 0814 	add.w	r8, r0, #20
 8013b3e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013b42:	1f37      	subs	r7, r6, #4
 8013b44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013b48:	4610      	mov	r0, r2
 8013b4a:	f7ff fd53 	bl	80135f4 <__hi0bits>
 8013b4e:	f1c0 0320 	rsb	r3, r0, #32
 8013b52:	280a      	cmp	r0, #10
 8013b54:	600b      	str	r3, [r1, #0]
 8013b56:	491b      	ldr	r1, [pc, #108]	@ (8013bc4 <__b2d+0x90>)
 8013b58:	dc15      	bgt.n	8013b86 <__b2d+0x52>
 8013b5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8013b5e:	fa22 f30c 	lsr.w	r3, r2, ip
 8013b62:	45b8      	cmp	r8, r7
 8013b64:	ea43 0501 	orr.w	r5, r3, r1
 8013b68:	bf34      	ite	cc
 8013b6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013b6e:	2300      	movcs	r3, #0
 8013b70:	3015      	adds	r0, #21
 8013b72:	fa02 f000 	lsl.w	r0, r2, r0
 8013b76:	fa23 f30c 	lsr.w	r3, r3, ip
 8013b7a:	4303      	orrs	r3, r0
 8013b7c:	461c      	mov	r4, r3
 8013b7e:	ec45 4b10 	vmov	d0, r4, r5
 8013b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b86:	45b8      	cmp	r8, r7
 8013b88:	bf3a      	itte	cc
 8013b8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013b8e:	f1a6 0708 	subcc.w	r7, r6, #8
 8013b92:	2300      	movcs	r3, #0
 8013b94:	380b      	subs	r0, #11
 8013b96:	d012      	beq.n	8013bbe <__b2d+0x8a>
 8013b98:	f1c0 0120 	rsb	r1, r0, #32
 8013b9c:	fa23 f401 	lsr.w	r4, r3, r1
 8013ba0:	4082      	lsls	r2, r0
 8013ba2:	4322      	orrs	r2, r4
 8013ba4:	4547      	cmp	r7, r8
 8013ba6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013baa:	bf8c      	ite	hi
 8013bac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013bb0:	2200      	movls	r2, #0
 8013bb2:	4083      	lsls	r3, r0
 8013bb4:	40ca      	lsrs	r2, r1
 8013bb6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	e7de      	b.n	8013b7c <__b2d+0x48>
 8013bbe:	ea42 0501 	orr.w	r5, r2, r1
 8013bc2:	e7db      	b.n	8013b7c <__b2d+0x48>
 8013bc4:	3ff00000 	.word	0x3ff00000

08013bc8 <__d2b>:
 8013bc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013bcc:	460f      	mov	r7, r1
 8013bce:	2101      	movs	r1, #1
 8013bd0:	ec59 8b10 	vmov	r8, r9, d0
 8013bd4:	4616      	mov	r6, r2
 8013bd6:	f7ff fc1b 	bl	8013410 <_Balloc>
 8013bda:	4604      	mov	r4, r0
 8013bdc:	b930      	cbnz	r0, 8013bec <__d2b+0x24>
 8013bde:	4602      	mov	r2, r0
 8013be0:	4b23      	ldr	r3, [pc, #140]	@ (8013c70 <__d2b+0xa8>)
 8013be2:	4824      	ldr	r0, [pc, #144]	@ (8013c74 <__d2b+0xac>)
 8013be4:	f240 310f 	movw	r1, #783	@ 0x30f
 8013be8:	f001 f98a 	bl	8014f00 <__assert_func>
 8013bec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bf4:	b10d      	cbz	r5, 8013bfa <__d2b+0x32>
 8013bf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013bfa:	9301      	str	r3, [sp, #4]
 8013bfc:	f1b8 0300 	subs.w	r3, r8, #0
 8013c00:	d023      	beq.n	8013c4a <__d2b+0x82>
 8013c02:	4668      	mov	r0, sp
 8013c04:	9300      	str	r3, [sp, #0]
 8013c06:	f7ff fd14 	bl	8013632 <__lo0bits>
 8013c0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013c0e:	b1d0      	cbz	r0, 8013c46 <__d2b+0x7e>
 8013c10:	f1c0 0320 	rsb	r3, r0, #32
 8013c14:	fa02 f303 	lsl.w	r3, r2, r3
 8013c18:	430b      	orrs	r3, r1
 8013c1a:	40c2      	lsrs	r2, r0
 8013c1c:	6163      	str	r3, [r4, #20]
 8013c1e:	9201      	str	r2, [sp, #4]
 8013c20:	9b01      	ldr	r3, [sp, #4]
 8013c22:	61a3      	str	r3, [r4, #24]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	bf0c      	ite	eq
 8013c28:	2201      	moveq	r2, #1
 8013c2a:	2202      	movne	r2, #2
 8013c2c:	6122      	str	r2, [r4, #16]
 8013c2e:	b1a5      	cbz	r5, 8013c5a <__d2b+0x92>
 8013c30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013c34:	4405      	add	r5, r0
 8013c36:	603d      	str	r5, [r7, #0]
 8013c38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013c3c:	6030      	str	r0, [r6, #0]
 8013c3e:	4620      	mov	r0, r4
 8013c40:	b003      	add	sp, #12
 8013c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c46:	6161      	str	r1, [r4, #20]
 8013c48:	e7ea      	b.n	8013c20 <__d2b+0x58>
 8013c4a:	a801      	add	r0, sp, #4
 8013c4c:	f7ff fcf1 	bl	8013632 <__lo0bits>
 8013c50:	9b01      	ldr	r3, [sp, #4]
 8013c52:	6163      	str	r3, [r4, #20]
 8013c54:	3020      	adds	r0, #32
 8013c56:	2201      	movs	r2, #1
 8013c58:	e7e8      	b.n	8013c2c <__d2b+0x64>
 8013c5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013c62:	6038      	str	r0, [r7, #0]
 8013c64:	6918      	ldr	r0, [r3, #16]
 8013c66:	f7ff fcc5 	bl	80135f4 <__hi0bits>
 8013c6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c6e:	e7e5      	b.n	8013c3c <__d2b+0x74>
 8013c70:	080166e5 	.word	0x080166e5
 8013c74:	080166f6 	.word	0x080166f6

08013c78 <__ratio>:
 8013c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c7c:	b085      	sub	sp, #20
 8013c7e:	e9cd 1000 	strd	r1, r0, [sp]
 8013c82:	a902      	add	r1, sp, #8
 8013c84:	f7ff ff56 	bl	8013b34 <__b2d>
 8013c88:	9800      	ldr	r0, [sp, #0]
 8013c8a:	a903      	add	r1, sp, #12
 8013c8c:	ec55 4b10 	vmov	r4, r5, d0
 8013c90:	f7ff ff50 	bl	8013b34 <__b2d>
 8013c94:	9b01      	ldr	r3, [sp, #4]
 8013c96:	6919      	ldr	r1, [r3, #16]
 8013c98:	9b00      	ldr	r3, [sp, #0]
 8013c9a:	691b      	ldr	r3, [r3, #16]
 8013c9c:	1ac9      	subs	r1, r1, r3
 8013c9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013ca2:	1a9b      	subs	r3, r3, r2
 8013ca4:	ec5b ab10 	vmov	sl, fp, d0
 8013ca8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	bfce      	itee	gt
 8013cb0:	462a      	movgt	r2, r5
 8013cb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013cb6:	465a      	movle	r2, fp
 8013cb8:	462f      	mov	r7, r5
 8013cba:	46d9      	mov	r9, fp
 8013cbc:	bfcc      	ite	gt
 8013cbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013cc2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8013cc6:	464b      	mov	r3, r9
 8013cc8:	4652      	mov	r2, sl
 8013cca:	4620      	mov	r0, r4
 8013ccc:	4639      	mov	r1, r7
 8013cce:	f7ec fde5 	bl	800089c <__aeabi_ddiv>
 8013cd2:	ec41 0b10 	vmov	d0, r0, r1
 8013cd6:	b005      	add	sp, #20
 8013cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cdc <__copybits>:
 8013cdc:	3901      	subs	r1, #1
 8013cde:	b570      	push	{r4, r5, r6, lr}
 8013ce0:	1149      	asrs	r1, r1, #5
 8013ce2:	6914      	ldr	r4, [r2, #16]
 8013ce4:	3101      	adds	r1, #1
 8013ce6:	f102 0314 	add.w	r3, r2, #20
 8013cea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013cee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013cf2:	1f05      	subs	r5, r0, #4
 8013cf4:	42a3      	cmp	r3, r4
 8013cf6:	d30c      	bcc.n	8013d12 <__copybits+0x36>
 8013cf8:	1aa3      	subs	r3, r4, r2
 8013cfa:	3b11      	subs	r3, #17
 8013cfc:	f023 0303 	bic.w	r3, r3, #3
 8013d00:	3211      	adds	r2, #17
 8013d02:	42a2      	cmp	r2, r4
 8013d04:	bf88      	it	hi
 8013d06:	2300      	movhi	r3, #0
 8013d08:	4418      	add	r0, r3
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	4288      	cmp	r0, r1
 8013d0e:	d305      	bcc.n	8013d1c <__copybits+0x40>
 8013d10:	bd70      	pop	{r4, r5, r6, pc}
 8013d12:	f853 6b04 	ldr.w	r6, [r3], #4
 8013d16:	f845 6f04 	str.w	r6, [r5, #4]!
 8013d1a:	e7eb      	b.n	8013cf4 <__copybits+0x18>
 8013d1c:	f840 3b04 	str.w	r3, [r0], #4
 8013d20:	e7f4      	b.n	8013d0c <__copybits+0x30>

08013d22 <__any_on>:
 8013d22:	f100 0214 	add.w	r2, r0, #20
 8013d26:	6900      	ldr	r0, [r0, #16]
 8013d28:	114b      	asrs	r3, r1, #5
 8013d2a:	4298      	cmp	r0, r3
 8013d2c:	b510      	push	{r4, lr}
 8013d2e:	db11      	blt.n	8013d54 <__any_on+0x32>
 8013d30:	dd0a      	ble.n	8013d48 <__any_on+0x26>
 8013d32:	f011 011f 	ands.w	r1, r1, #31
 8013d36:	d007      	beq.n	8013d48 <__any_on+0x26>
 8013d38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013d3c:	fa24 f001 	lsr.w	r0, r4, r1
 8013d40:	fa00 f101 	lsl.w	r1, r0, r1
 8013d44:	428c      	cmp	r4, r1
 8013d46:	d10b      	bne.n	8013d60 <__any_on+0x3e>
 8013d48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013d4c:	4293      	cmp	r3, r2
 8013d4e:	d803      	bhi.n	8013d58 <__any_on+0x36>
 8013d50:	2000      	movs	r0, #0
 8013d52:	bd10      	pop	{r4, pc}
 8013d54:	4603      	mov	r3, r0
 8013d56:	e7f7      	b.n	8013d48 <__any_on+0x26>
 8013d58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013d5c:	2900      	cmp	r1, #0
 8013d5e:	d0f5      	beq.n	8013d4c <__any_on+0x2a>
 8013d60:	2001      	movs	r0, #1
 8013d62:	e7f6      	b.n	8013d52 <__any_on+0x30>

08013d64 <sulp>:
 8013d64:	b570      	push	{r4, r5, r6, lr}
 8013d66:	4604      	mov	r4, r0
 8013d68:	460d      	mov	r5, r1
 8013d6a:	ec45 4b10 	vmov	d0, r4, r5
 8013d6e:	4616      	mov	r6, r2
 8013d70:	f7ff feba 	bl	8013ae8 <__ulp>
 8013d74:	ec51 0b10 	vmov	r0, r1, d0
 8013d78:	b17e      	cbz	r6, 8013d9a <sulp+0x36>
 8013d7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013d7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	dd09      	ble.n	8013d9a <sulp+0x36>
 8013d86:	051b      	lsls	r3, r3, #20
 8013d88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013d8c:	2400      	movs	r4, #0
 8013d8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013d92:	4622      	mov	r2, r4
 8013d94:	462b      	mov	r3, r5
 8013d96:	f7ec fc57 	bl	8000648 <__aeabi_dmul>
 8013d9a:	ec41 0b10 	vmov	d0, r0, r1
 8013d9e:	bd70      	pop	{r4, r5, r6, pc}

08013da0 <_strtod_l>:
 8013da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da4:	b09f      	sub	sp, #124	@ 0x7c
 8013da6:	460c      	mov	r4, r1
 8013da8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013daa:	2200      	movs	r2, #0
 8013dac:	921a      	str	r2, [sp, #104]	@ 0x68
 8013dae:	9005      	str	r0, [sp, #20]
 8013db0:	f04f 0a00 	mov.w	sl, #0
 8013db4:	f04f 0b00 	mov.w	fp, #0
 8013db8:	460a      	mov	r2, r1
 8013dba:	9219      	str	r2, [sp, #100]	@ 0x64
 8013dbc:	7811      	ldrb	r1, [r2, #0]
 8013dbe:	292b      	cmp	r1, #43	@ 0x2b
 8013dc0:	d04a      	beq.n	8013e58 <_strtod_l+0xb8>
 8013dc2:	d838      	bhi.n	8013e36 <_strtod_l+0x96>
 8013dc4:	290d      	cmp	r1, #13
 8013dc6:	d832      	bhi.n	8013e2e <_strtod_l+0x8e>
 8013dc8:	2908      	cmp	r1, #8
 8013dca:	d832      	bhi.n	8013e32 <_strtod_l+0x92>
 8013dcc:	2900      	cmp	r1, #0
 8013dce:	d03b      	beq.n	8013e48 <_strtod_l+0xa8>
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	920e      	str	r2, [sp, #56]	@ 0x38
 8013dd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013dd6:	782a      	ldrb	r2, [r5, #0]
 8013dd8:	2a30      	cmp	r2, #48	@ 0x30
 8013dda:	f040 80b2 	bne.w	8013f42 <_strtod_l+0x1a2>
 8013dde:	786a      	ldrb	r2, [r5, #1]
 8013de0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013de4:	2a58      	cmp	r2, #88	@ 0x58
 8013de6:	d16e      	bne.n	8013ec6 <_strtod_l+0x126>
 8013de8:	9302      	str	r3, [sp, #8]
 8013dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013dec:	9301      	str	r3, [sp, #4]
 8013dee:	ab1a      	add	r3, sp, #104	@ 0x68
 8013df0:	9300      	str	r3, [sp, #0]
 8013df2:	4a8f      	ldr	r2, [pc, #572]	@ (8014030 <_strtod_l+0x290>)
 8013df4:	9805      	ldr	r0, [sp, #20]
 8013df6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013df8:	a919      	add	r1, sp, #100	@ 0x64
 8013dfa:	f001 f91b 	bl	8015034 <__gethex>
 8013dfe:	f010 060f 	ands.w	r6, r0, #15
 8013e02:	4604      	mov	r4, r0
 8013e04:	d005      	beq.n	8013e12 <_strtod_l+0x72>
 8013e06:	2e06      	cmp	r6, #6
 8013e08:	d128      	bne.n	8013e5c <_strtod_l+0xbc>
 8013e0a:	3501      	adds	r5, #1
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8013e10:	930e      	str	r3, [sp, #56]	@ 0x38
 8013e12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	f040 858e 	bne.w	8014936 <_strtod_l+0xb96>
 8013e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e1c:	b1cb      	cbz	r3, 8013e52 <_strtod_l+0xb2>
 8013e1e:	4652      	mov	r2, sl
 8013e20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013e24:	ec43 2b10 	vmov	d0, r2, r3
 8013e28:	b01f      	add	sp, #124	@ 0x7c
 8013e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e2e:	2920      	cmp	r1, #32
 8013e30:	d1ce      	bne.n	8013dd0 <_strtod_l+0x30>
 8013e32:	3201      	adds	r2, #1
 8013e34:	e7c1      	b.n	8013dba <_strtod_l+0x1a>
 8013e36:	292d      	cmp	r1, #45	@ 0x2d
 8013e38:	d1ca      	bne.n	8013dd0 <_strtod_l+0x30>
 8013e3a:	2101      	movs	r1, #1
 8013e3c:	910e      	str	r1, [sp, #56]	@ 0x38
 8013e3e:	1c51      	adds	r1, r2, #1
 8013e40:	9119      	str	r1, [sp, #100]	@ 0x64
 8013e42:	7852      	ldrb	r2, [r2, #1]
 8013e44:	2a00      	cmp	r2, #0
 8013e46:	d1c5      	bne.n	8013dd4 <_strtod_l+0x34>
 8013e48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013e4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	f040 8570 	bne.w	8014932 <_strtod_l+0xb92>
 8013e52:	4652      	mov	r2, sl
 8013e54:	465b      	mov	r3, fp
 8013e56:	e7e5      	b.n	8013e24 <_strtod_l+0x84>
 8013e58:	2100      	movs	r1, #0
 8013e5a:	e7ef      	b.n	8013e3c <_strtod_l+0x9c>
 8013e5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013e5e:	b13a      	cbz	r2, 8013e70 <_strtod_l+0xd0>
 8013e60:	2135      	movs	r1, #53	@ 0x35
 8013e62:	a81c      	add	r0, sp, #112	@ 0x70
 8013e64:	f7ff ff3a 	bl	8013cdc <__copybits>
 8013e68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013e6a:	9805      	ldr	r0, [sp, #20]
 8013e6c:	f7ff fb10 	bl	8013490 <_Bfree>
 8013e70:	3e01      	subs	r6, #1
 8013e72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013e74:	2e04      	cmp	r6, #4
 8013e76:	d806      	bhi.n	8013e86 <_strtod_l+0xe6>
 8013e78:	e8df f006 	tbb	[pc, r6]
 8013e7c:	201d0314 	.word	0x201d0314
 8013e80:	14          	.byte	0x14
 8013e81:	00          	.byte	0x00
 8013e82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013e86:	05e1      	lsls	r1, r4, #23
 8013e88:	bf48      	it	mi
 8013e8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013e8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013e92:	0d1b      	lsrs	r3, r3, #20
 8013e94:	051b      	lsls	r3, r3, #20
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d1bb      	bne.n	8013e12 <_strtod_l+0x72>
 8013e9a:	f7fe fb1f 	bl	80124dc <__errno>
 8013e9e:	2322      	movs	r3, #34	@ 0x22
 8013ea0:	6003      	str	r3, [r0, #0]
 8013ea2:	e7b6      	b.n	8013e12 <_strtod_l+0x72>
 8013ea4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013ea8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013eac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013eb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013eb4:	e7e7      	b.n	8013e86 <_strtod_l+0xe6>
 8013eb6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8014038 <_strtod_l+0x298>
 8013eba:	e7e4      	b.n	8013e86 <_strtod_l+0xe6>
 8013ebc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013ec0:	f04f 3aff 	mov.w	sl, #4294967295
 8013ec4:	e7df      	b.n	8013e86 <_strtod_l+0xe6>
 8013ec6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ec8:	1c5a      	adds	r2, r3, #1
 8013eca:	9219      	str	r2, [sp, #100]	@ 0x64
 8013ecc:	785b      	ldrb	r3, [r3, #1]
 8013ece:	2b30      	cmp	r3, #48	@ 0x30
 8013ed0:	d0f9      	beq.n	8013ec6 <_strtod_l+0x126>
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d09d      	beq.n	8013e12 <_strtod_l+0x72>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	2700      	movs	r7, #0
 8013eda:	9308      	str	r3, [sp, #32]
 8013edc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ede:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ee0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8013ee2:	46b9      	mov	r9, r7
 8013ee4:	220a      	movs	r2, #10
 8013ee6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013ee8:	7805      	ldrb	r5, [r0, #0]
 8013eea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013eee:	b2d9      	uxtb	r1, r3
 8013ef0:	2909      	cmp	r1, #9
 8013ef2:	d928      	bls.n	8013f46 <_strtod_l+0x1a6>
 8013ef4:	494f      	ldr	r1, [pc, #316]	@ (8014034 <_strtod_l+0x294>)
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	f000 ffd6 	bl	8014ea8 <strncmp>
 8013efc:	2800      	cmp	r0, #0
 8013efe:	d032      	beq.n	8013f66 <_strtod_l+0x1c6>
 8013f00:	2000      	movs	r0, #0
 8013f02:	462a      	mov	r2, r5
 8013f04:	900a      	str	r0, [sp, #40]	@ 0x28
 8013f06:	464d      	mov	r5, r9
 8013f08:	4603      	mov	r3, r0
 8013f0a:	2a65      	cmp	r2, #101	@ 0x65
 8013f0c:	d001      	beq.n	8013f12 <_strtod_l+0x172>
 8013f0e:	2a45      	cmp	r2, #69	@ 0x45
 8013f10:	d114      	bne.n	8013f3c <_strtod_l+0x19c>
 8013f12:	b91d      	cbnz	r5, 8013f1c <_strtod_l+0x17c>
 8013f14:	9a08      	ldr	r2, [sp, #32]
 8013f16:	4302      	orrs	r2, r0
 8013f18:	d096      	beq.n	8013e48 <_strtod_l+0xa8>
 8013f1a:	2500      	movs	r5, #0
 8013f1c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013f1e:	1c62      	adds	r2, r4, #1
 8013f20:	9219      	str	r2, [sp, #100]	@ 0x64
 8013f22:	7862      	ldrb	r2, [r4, #1]
 8013f24:	2a2b      	cmp	r2, #43	@ 0x2b
 8013f26:	d07a      	beq.n	801401e <_strtod_l+0x27e>
 8013f28:	2a2d      	cmp	r2, #45	@ 0x2d
 8013f2a:	d07e      	beq.n	801402a <_strtod_l+0x28a>
 8013f2c:	f04f 0c00 	mov.w	ip, #0
 8013f30:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013f34:	2909      	cmp	r1, #9
 8013f36:	f240 8085 	bls.w	8014044 <_strtod_l+0x2a4>
 8013f3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8013f3c:	f04f 0800 	mov.w	r8, #0
 8013f40:	e0a5      	b.n	801408e <_strtod_l+0x2ee>
 8013f42:	2300      	movs	r3, #0
 8013f44:	e7c8      	b.n	8013ed8 <_strtod_l+0x138>
 8013f46:	f1b9 0f08 	cmp.w	r9, #8
 8013f4a:	bfd8      	it	le
 8013f4c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8013f4e:	f100 0001 	add.w	r0, r0, #1
 8013f52:	bfda      	itte	le
 8013f54:	fb02 3301 	mlale	r3, r2, r1, r3
 8013f58:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8013f5a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8013f5e:	f109 0901 	add.w	r9, r9, #1
 8013f62:	9019      	str	r0, [sp, #100]	@ 0x64
 8013f64:	e7bf      	b.n	8013ee6 <_strtod_l+0x146>
 8013f66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013f68:	1c5a      	adds	r2, r3, #1
 8013f6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8013f6c:	785a      	ldrb	r2, [r3, #1]
 8013f6e:	f1b9 0f00 	cmp.w	r9, #0
 8013f72:	d03b      	beq.n	8013fec <_strtod_l+0x24c>
 8013f74:	900a      	str	r0, [sp, #40]	@ 0x28
 8013f76:	464d      	mov	r5, r9
 8013f78:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013f7c:	2b09      	cmp	r3, #9
 8013f7e:	d912      	bls.n	8013fa6 <_strtod_l+0x206>
 8013f80:	2301      	movs	r3, #1
 8013f82:	e7c2      	b.n	8013f0a <_strtod_l+0x16a>
 8013f84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013f86:	1c5a      	adds	r2, r3, #1
 8013f88:	9219      	str	r2, [sp, #100]	@ 0x64
 8013f8a:	785a      	ldrb	r2, [r3, #1]
 8013f8c:	3001      	adds	r0, #1
 8013f8e:	2a30      	cmp	r2, #48	@ 0x30
 8013f90:	d0f8      	beq.n	8013f84 <_strtod_l+0x1e4>
 8013f92:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013f96:	2b08      	cmp	r3, #8
 8013f98:	f200 84d2 	bhi.w	8014940 <_strtod_l+0xba0>
 8013f9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013f9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	930c      	str	r3, [sp, #48]	@ 0x30
 8013fa4:	4605      	mov	r5, r0
 8013fa6:	3a30      	subs	r2, #48	@ 0x30
 8013fa8:	f100 0301 	add.w	r3, r0, #1
 8013fac:	d018      	beq.n	8013fe0 <_strtod_l+0x240>
 8013fae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013fb0:	4419      	add	r1, r3
 8013fb2:	910a      	str	r1, [sp, #40]	@ 0x28
 8013fb4:	462e      	mov	r6, r5
 8013fb6:	f04f 0e0a 	mov.w	lr, #10
 8013fba:	1c71      	adds	r1, r6, #1
 8013fbc:	eba1 0c05 	sub.w	ip, r1, r5
 8013fc0:	4563      	cmp	r3, ip
 8013fc2:	dc15      	bgt.n	8013ff0 <_strtod_l+0x250>
 8013fc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013fc8:	182b      	adds	r3, r5, r0
 8013fca:	2b08      	cmp	r3, #8
 8013fcc:	f105 0501 	add.w	r5, r5, #1
 8013fd0:	4405      	add	r5, r0
 8013fd2:	dc1a      	bgt.n	801400a <_strtod_l+0x26a>
 8013fd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013fd6:	230a      	movs	r3, #10
 8013fd8:	fb03 2301 	mla	r3, r3, r1, r2
 8013fdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013fde:	2300      	movs	r3, #0
 8013fe0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013fe2:	1c51      	adds	r1, r2, #1
 8013fe4:	9119      	str	r1, [sp, #100]	@ 0x64
 8013fe6:	7852      	ldrb	r2, [r2, #1]
 8013fe8:	4618      	mov	r0, r3
 8013fea:	e7c5      	b.n	8013f78 <_strtod_l+0x1d8>
 8013fec:	4648      	mov	r0, r9
 8013fee:	e7ce      	b.n	8013f8e <_strtod_l+0x1ee>
 8013ff0:	2e08      	cmp	r6, #8
 8013ff2:	dc05      	bgt.n	8014000 <_strtod_l+0x260>
 8013ff4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013ff6:	fb0e f606 	mul.w	r6, lr, r6
 8013ffa:	960b      	str	r6, [sp, #44]	@ 0x2c
 8013ffc:	460e      	mov	r6, r1
 8013ffe:	e7dc      	b.n	8013fba <_strtod_l+0x21a>
 8014000:	2910      	cmp	r1, #16
 8014002:	bfd8      	it	le
 8014004:	fb0e f707 	mulle.w	r7, lr, r7
 8014008:	e7f8      	b.n	8013ffc <_strtod_l+0x25c>
 801400a:	2b0f      	cmp	r3, #15
 801400c:	bfdc      	itt	le
 801400e:	230a      	movle	r3, #10
 8014010:	fb03 2707 	mlale	r7, r3, r7, r2
 8014014:	e7e3      	b.n	8013fde <_strtod_l+0x23e>
 8014016:	2300      	movs	r3, #0
 8014018:	930a      	str	r3, [sp, #40]	@ 0x28
 801401a:	2301      	movs	r3, #1
 801401c:	e77a      	b.n	8013f14 <_strtod_l+0x174>
 801401e:	f04f 0c00 	mov.w	ip, #0
 8014022:	1ca2      	adds	r2, r4, #2
 8014024:	9219      	str	r2, [sp, #100]	@ 0x64
 8014026:	78a2      	ldrb	r2, [r4, #2]
 8014028:	e782      	b.n	8013f30 <_strtod_l+0x190>
 801402a:	f04f 0c01 	mov.w	ip, #1
 801402e:	e7f8      	b.n	8014022 <_strtod_l+0x282>
 8014030:	0801691c 	.word	0x0801691c
 8014034:	0801674f 	.word	0x0801674f
 8014038:	7ff00000 	.word	0x7ff00000
 801403c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801403e:	1c51      	adds	r1, r2, #1
 8014040:	9119      	str	r1, [sp, #100]	@ 0x64
 8014042:	7852      	ldrb	r2, [r2, #1]
 8014044:	2a30      	cmp	r2, #48	@ 0x30
 8014046:	d0f9      	beq.n	801403c <_strtod_l+0x29c>
 8014048:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801404c:	2908      	cmp	r1, #8
 801404e:	f63f af75 	bhi.w	8013f3c <_strtod_l+0x19c>
 8014052:	3a30      	subs	r2, #48	@ 0x30
 8014054:	9209      	str	r2, [sp, #36]	@ 0x24
 8014056:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014058:	920f      	str	r2, [sp, #60]	@ 0x3c
 801405a:	f04f 080a 	mov.w	r8, #10
 801405e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014060:	1c56      	adds	r6, r2, #1
 8014062:	9619      	str	r6, [sp, #100]	@ 0x64
 8014064:	7852      	ldrb	r2, [r2, #1]
 8014066:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801406a:	f1be 0f09 	cmp.w	lr, #9
 801406e:	d939      	bls.n	80140e4 <_strtod_l+0x344>
 8014070:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014072:	1a76      	subs	r6, r6, r1
 8014074:	2e08      	cmp	r6, #8
 8014076:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801407a:	dc03      	bgt.n	8014084 <_strtod_l+0x2e4>
 801407c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801407e:	4588      	cmp	r8, r1
 8014080:	bfa8      	it	ge
 8014082:	4688      	movge	r8, r1
 8014084:	f1bc 0f00 	cmp.w	ip, #0
 8014088:	d001      	beq.n	801408e <_strtod_l+0x2ee>
 801408a:	f1c8 0800 	rsb	r8, r8, #0
 801408e:	2d00      	cmp	r5, #0
 8014090:	d14e      	bne.n	8014130 <_strtod_l+0x390>
 8014092:	9908      	ldr	r1, [sp, #32]
 8014094:	4308      	orrs	r0, r1
 8014096:	f47f aebc 	bne.w	8013e12 <_strtod_l+0x72>
 801409a:	2b00      	cmp	r3, #0
 801409c:	f47f aed4 	bne.w	8013e48 <_strtod_l+0xa8>
 80140a0:	2a69      	cmp	r2, #105	@ 0x69
 80140a2:	d028      	beq.n	80140f6 <_strtod_l+0x356>
 80140a4:	dc25      	bgt.n	80140f2 <_strtod_l+0x352>
 80140a6:	2a49      	cmp	r2, #73	@ 0x49
 80140a8:	d025      	beq.n	80140f6 <_strtod_l+0x356>
 80140aa:	2a4e      	cmp	r2, #78	@ 0x4e
 80140ac:	f47f aecc 	bne.w	8013e48 <_strtod_l+0xa8>
 80140b0:	499a      	ldr	r1, [pc, #616]	@ (801431c <_strtod_l+0x57c>)
 80140b2:	a819      	add	r0, sp, #100	@ 0x64
 80140b4:	f001 f9e0 	bl	8015478 <__match>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	f43f aec5 	beq.w	8013e48 <_strtod_l+0xa8>
 80140be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80140c0:	781b      	ldrb	r3, [r3, #0]
 80140c2:	2b28      	cmp	r3, #40	@ 0x28
 80140c4:	d12e      	bne.n	8014124 <_strtod_l+0x384>
 80140c6:	4996      	ldr	r1, [pc, #600]	@ (8014320 <_strtod_l+0x580>)
 80140c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80140ca:	a819      	add	r0, sp, #100	@ 0x64
 80140cc:	f001 f9e8 	bl	80154a0 <__hexnan>
 80140d0:	2805      	cmp	r0, #5
 80140d2:	d127      	bne.n	8014124 <_strtod_l+0x384>
 80140d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80140d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80140da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80140de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80140e2:	e696      	b.n	8013e12 <_strtod_l+0x72>
 80140e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80140e6:	fb08 2101 	mla	r1, r8, r1, r2
 80140ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80140ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80140f0:	e7b5      	b.n	801405e <_strtod_l+0x2be>
 80140f2:	2a6e      	cmp	r2, #110	@ 0x6e
 80140f4:	e7da      	b.n	80140ac <_strtod_l+0x30c>
 80140f6:	498b      	ldr	r1, [pc, #556]	@ (8014324 <_strtod_l+0x584>)
 80140f8:	a819      	add	r0, sp, #100	@ 0x64
 80140fa:	f001 f9bd 	bl	8015478 <__match>
 80140fe:	2800      	cmp	r0, #0
 8014100:	f43f aea2 	beq.w	8013e48 <_strtod_l+0xa8>
 8014104:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014106:	4988      	ldr	r1, [pc, #544]	@ (8014328 <_strtod_l+0x588>)
 8014108:	3b01      	subs	r3, #1
 801410a:	a819      	add	r0, sp, #100	@ 0x64
 801410c:	9319      	str	r3, [sp, #100]	@ 0x64
 801410e:	f001 f9b3 	bl	8015478 <__match>
 8014112:	b910      	cbnz	r0, 801411a <_strtod_l+0x37a>
 8014114:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014116:	3301      	adds	r3, #1
 8014118:	9319      	str	r3, [sp, #100]	@ 0x64
 801411a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8014338 <_strtod_l+0x598>
 801411e:	f04f 0a00 	mov.w	sl, #0
 8014122:	e676      	b.n	8013e12 <_strtod_l+0x72>
 8014124:	4881      	ldr	r0, [pc, #516]	@ (801432c <_strtod_l+0x58c>)
 8014126:	f000 fee3 	bl	8014ef0 <nan>
 801412a:	ec5b ab10 	vmov	sl, fp, d0
 801412e:	e670      	b.n	8013e12 <_strtod_l+0x72>
 8014130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014132:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014134:	eba8 0303 	sub.w	r3, r8, r3
 8014138:	f1b9 0f00 	cmp.w	r9, #0
 801413c:	bf08      	it	eq
 801413e:	46a9      	moveq	r9, r5
 8014140:	2d10      	cmp	r5, #16
 8014142:	9309      	str	r3, [sp, #36]	@ 0x24
 8014144:	462c      	mov	r4, r5
 8014146:	bfa8      	it	ge
 8014148:	2410      	movge	r4, #16
 801414a:	f7ec fa03 	bl	8000554 <__aeabi_ui2d>
 801414e:	2d09      	cmp	r5, #9
 8014150:	4682      	mov	sl, r0
 8014152:	468b      	mov	fp, r1
 8014154:	dc13      	bgt.n	801417e <_strtod_l+0x3de>
 8014156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014158:	2b00      	cmp	r3, #0
 801415a:	f43f ae5a 	beq.w	8013e12 <_strtod_l+0x72>
 801415e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014160:	dd78      	ble.n	8014254 <_strtod_l+0x4b4>
 8014162:	2b16      	cmp	r3, #22
 8014164:	dc5f      	bgt.n	8014226 <_strtod_l+0x486>
 8014166:	4972      	ldr	r1, [pc, #456]	@ (8014330 <_strtod_l+0x590>)
 8014168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801416c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014170:	4652      	mov	r2, sl
 8014172:	465b      	mov	r3, fp
 8014174:	f7ec fa68 	bl	8000648 <__aeabi_dmul>
 8014178:	4682      	mov	sl, r0
 801417a:	468b      	mov	fp, r1
 801417c:	e649      	b.n	8013e12 <_strtod_l+0x72>
 801417e:	4b6c      	ldr	r3, [pc, #432]	@ (8014330 <_strtod_l+0x590>)
 8014180:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014184:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8014188:	f7ec fa5e 	bl	8000648 <__aeabi_dmul>
 801418c:	4682      	mov	sl, r0
 801418e:	4638      	mov	r0, r7
 8014190:	468b      	mov	fp, r1
 8014192:	f7ec f9df 	bl	8000554 <__aeabi_ui2d>
 8014196:	4602      	mov	r2, r0
 8014198:	460b      	mov	r3, r1
 801419a:	4650      	mov	r0, sl
 801419c:	4659      	mov	r1, fp
 801419e:	f7ec f89d 	bl	80002dc <__adddf3>
 80141a2:	2d0f      	cmp	r5, #15
 80141a4:	4682      	mov	sl, r0
 80141a6:	468b      	mov	fp, r1
 80141a8:	ddd5      	ble.n	8014156 <_strtod_l+0x3b6>
 80141aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141ac:	1b2c      	subs	r4, r5, r4
 80141ae:	441c      	add	r4, r3
 80141b0:	2c00      	cmp	r4, #0
 80141b2:	f340 8093 	ble.w	80142dc <_strtod_l+0x53c>
 80141b6:	f014 030f 	ands.w	r3, r4, #15
 80141ba:	d00a      	beq.n	80141d2 <_strtod_l+0x432>
 80141bc:	495c      	ldr	r1, [pc, #368]	@ (8014330 <_strtod_l+0x590>)
 80141be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80141c2:	4652      	mov	r2, sl
 80141c4:	465b      	mov	r3, fp
 80141c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141ca:	f7ec fa3d 	bl	8000648 <__aeabi_dmul>
 80141ce:	4682      	mov	sl, r0
 80141d0:	468b      	mov	fp, r1
 80141d2:	f034 040f 	bics.w	r4, r4, #15
 80141d6:	d073      	beq.n	80142c0 <_strtod_l+0x520>
 80141d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80141dc:	dd49      	ble.n	8014272 <_strtod_l+0x4d2>
 80141de:	2400      	movs	r4, #0
 80141e0:	46a0      	mov	r8, r4
 80141e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80141e4:	46a1      	mov	r9, r4
 80141e6:	9a05      	ldr	r2, [sp, #20]
 80141e8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8014338 <_strtod_l+0x598>
 80141ec:	2322      	movs	r3, #34	@ 0x22
 80141ee:	6013      	str	r3, [r2, #0]
 80141f0:	f04f 0a00 	mov.w	sl, #0
 80141f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	f43f ae0b 	beq.w	8013e12 <_strtod_l+0x72>
 80141fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80141fe:	9805      	ldr	r0, [sp, #20]
 8014200:	f7ff f946 	bl	8013490 <_Bfree>
 8014204:	9805      	ldr	r0, [sp, #20]
 8014206:	4649      	mov	r1, r9
 8014208:	f7ff f942 	bl	8013490 <_Bfree>
 801420c:	9805      	ldr	r0, [sp, #20]
 801420e:	4641      	mov	r1, r8
 8014210:	f7ff f93e 	bl	8013490 <_Bfree>
 8014214:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014216:	9805      	ldr	r0, [sp, #20]
 8014218:	f7ff f93a 	bl	8013490 <_Bfree>
 801421c:	9805      	ldr	r0, [sp, #20]
 801421e:	4621      	mov	r1, r4
 8014220:	f7ff f936 	bl	8013490 <_Bfree>
 8014224:	e5f5      	b.n	8013e12 <_strtod_l+0x72>
 8014226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014228:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801422c:	4293      	cmp	r3, r2
 801422e:	dbbc      	blt.n	80141aa <_strtod_l+0x40a>
 8014230:	4c3f      	ldr	r4, [pc, #252]	@ (8014330 <_strtod_l+0x590>)
 8014232:	f1c5 050f 	rsb	r5, r5, #15
 8014236:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801423a:	4652      	mov	r2, sl
 801423c:	465b      	mov	r3, fp
 801423e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014242:	f7ec fa01 	bl	8000648 <__aeabi_dmul>
 8014246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014248:	1b5d      	subs	r5, r3, r5
 801424a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801424e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014252:	e78f      	b.n	8014174 <_strtod_l+0x3d4>
 8014254:	3316      	adds	r3, #22
 8014256:	dba8      	blt.n	80141aa <_strtod_l+0x40a>
 8014258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801425a:	eba3 0808 	sub.w	r8, r3, r8
 801425e:	4b34      	ldr	r3, [pc, #208]	@ (8014330 <_strtod_l+0x590>)
 8014260:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8014264:	e9d8 2300 	ldrd	r2, r3, [r8]
 8014268:	4650      	mov	r0, sl
 801426a:	4659      	mov	r1, fp
 801426c:	f7ec fb16 	bl	800089c <__aeabi_ddiv>
 8014270:	e782      	b.n	8014178 <_strtod_l+0x3d8>
 8014272:	2300      	movs	r3, #0
 8014274:	4f2f      	ldr	r7, [pc, #188]	@ (8014334 <_strtod_l+0x594>)
 8014276:	1124      	asrs	r4, r4, #4
 8014278:	4650      	mov	r0, sl
 801427a:	4659      	mov	r1, fp
 801427c:	461e      	mov	r6, r3
 801427e:	2c01      	cmp	r4, #1
 8014280:	dc21      	bgt.n	80142c6 <_strtod_l+0x526>
 8014282:	b10b      	cbz	r3, 8014288 <_strtod_l+0x4e8>
 8014284:	4682      	mov	sl, r0
 8014286:	468b      	mov	fp, r1
 8014288:	492a      	ldr	r1, [pc, #168]	@ (8014334 <_strtod_l+0x594>)
 801428a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801428e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8014292:	4652      	mov	r2, sl
 8014294:	465b      	mov	r3, fp
 8014296:	e9d1 0100 	ldrd	r0, r1, [r1]
 801429a:	f7ec f9d5 	bl	8000648 <__aeabi_dmul>
 801429e:	4b26      	ldr	r3, [pc, #152]	@ (8014338 <_strtod_l+0x598>)
 80142a0:	460a      	mov	r2, r1
 80142a2:	400b      	ands	r3, r1
 80142a4:	4925      	ldr	r1, [pc, #148]	@ (801433c <_strtod_l+0x59c>)
 80142a6:	428b      	cmp	r3, r1
 80142a8:	4682      	mov	sl, r0
 80142aa:	d898      	bhi.n	80141de <_strtod_l+0x43e>
 80142ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80142b0:	428b      	cmp	r3, r1
 80142b2:	bf86      	itte	hi
 80142b4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8014340 <_strtod_l+0x5a0>
 80142b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80142bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80142c0:	2300      	movs	r3, #0
 80142c2:	9308      	str	r3, [sp, #32]
 80142c4:	e076      	b.n	80143b4 <_strtod_l+0x614>
 80142c6:	07e2      	lsls	r2, r4, #31
 80142c8:	d504      	bpl.n	80142d4 <_strtod_l+0x534>
 80142ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80142ce:	f7ec f9bb 	bl	8000648 <__aeabi_dmul>
 80142d2:	2301      	movs	r3, #1
 80142d4:	3601      	adds	r6, #1
 80142d6:	1064      	asrs	r4, r4, #1
 80142d8:	3708      	adds	r7, #8
 80142da:	e7d0      	b.n	801427e <_strtod_l+0x4de>
 80142dc:	d0f0      	beq.n	80142c0 <_strtod_l+0x520>
 80142de:	4264      	negs	r4, r4
 80142e0:	f014 020f 	ands.w	r2, r4, #15
 80142e4:	d00a      	beq.n	80142fc <_strtod_l+0x55c>
 80142e6:	4b12      	ldr	r3, [pc, #72]	@ (8014330 <_strtod_l+0x590>)
 80142e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80142ec:	4650      	mov	r0, sl
 80142ee:	4659      	mov	r1, fp
 80142f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f4:	f7ec fad2 	bl	800089c <__aeabi_ddiv>
 80142f8:	4682      	mov	sl, r0
 80142fa:	468b      	mov	fp, r1
 80142fc:	1124      	asrs	r4, r4, #4
 80142fe:	d0df      	beq.n	80142c0 <_strtod_l+0x520>
 8014300:	2c1f      	cmp	r4, #31
 8014302:	dd1f      	ble.n	8014344 <_strtod_l+0x5a4>
 8014304:	2400      	movs	r4, #0
 8014306:	46a0      	mov	r8, r4
 8014308:	940b      	str	r4, [sp, #44]	@ 0x2c
 801430a:	46a1      	mov	r9, r4
 801430c:	9a05      	ldr	r2, [sp, #20]
 801430e:	2322      	movs	r3, #34	@ 0x22
 8014310:	f04f 0a00 	mov.w	sl, #0
 8014314:	f04f 0b00 	mov.w	fp, #0
 8014318:	6013      	str	r3, [r2, #0]
 801431a:	e76b      	b.n	80141f4 <_strtod_l+0x454>
 801431c:	0801663d 	.word	0x0801663d
 8014320:	08016908 	.word	0x08016908
 8014324:	08016635 	.word	0x08016635
 8014328:	0801666c 	.word	0x0801666c
 801432c:	080167a5 	.word	0x080167a5
 8014330:	08016840 	.word	0x08016840
 8014334:	08016818 	.word	0x08016818
 8014338:	7ff00000 	.word	0x7ff00000
 801433c:	7ca00000 	.word	0x7ca00000
 8014340:	7fefffff 	.word	0x7fefffff
 8014344:	f014 0310 	ands.w	r3, r4, #16
 8014348:	bf18      	it	ne
 801434a:	236a      	movne	r3, #106	@ 0x6a
 801434c:	4ea9      	ldr	r6, [pc, #676]	@ (80145f4 <_strtod_l+0x854>)
 801434e:	9308      	str	r3, [sp, #32]
 8014350:	4650      	mov	r0, sl
 8014352:	4659      	mov	r1, fp
 8014354:	2300      	movs	r3, #0
 8014356:	07e7      	lsls	r7, r4, #31
 8014358:	d504      	bpl.n	8014364 <_strtod_l+0x5c4>
 801435a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801435e:	f7ec f973 	bl	8000648 <__aeabi_dmul>
 8014362:	2301      	movs	r3, #1
 8014364:	1064      	asrs	r4, r4, #1
 8014366:	f106 0608 	add.w	r6, r6, #8
 801436a:	d1f4      	bne.n	8014356 <_strtod_l+0x5b6>
 801436c:	b10b      	cbz	r3, 8014372 <_strtod_l+0x5d2>
 801436e:	4682      	mov	sl, r0
 8014370:	468b      	mov	fp, r1
 8014372:	9b08      	ldr	r3, [sp, #32]
 8014374:	b1b3      	cbz	r3, 80143a4 <_strtod_l+0x604>
 8014376:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801437a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801437e:	2b00      	cmp	r3, #0
 8014380:	4659      	mov	r1, fp
 8014382:	dd0f      	ble.n	80143a4 <_strtod_l+0x604>
 8014384:	2b1f      	cmp	r3, #31
 8014386:	dd56      	ble.n	8014436 <_strtod_l+0x696>
 8014388:	2b34      	cmp	r3, #52	@ 0x34
 801438a:	bfde      	ittt	le
 801438c:	f04f 33ff 	movle.w	r3, #4294967295
 8014390:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8014394:	4093      	lslle	r3, r2
 8014396:	f04f 0a00 	mov.w	sl, #0
 801439a:	bfcc      	ite	gt
 801439c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80143a0:	ea03 0b01 	andle.w	fp, r3, r1
 80143a4:	2200      	movs	r2, #0
 80143a6:	2300      	movs	r3, #0
 80143a8:	4650      	mov	r0, sl
 80143aa:	4659      	mov	r1, fp
 80143ac:	f7ec fbb4 	bl	8000b18 <__aeabi_dcmpeq>
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d1a7      	bne.n	8014304 <_strtod_l+0x564>
 80143b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80143ba:	9805      	ldr	r0, [sp, #20]
 80143bc:	462b      	mov	r3, r5
 80143be:	464a      	mov	r2, r9
 80143c0:	f7ff f8ce 	bl	8013560 <__s2b>
 80143c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80143c6:	2800      	cmp	r0, #0
 80143c8:	f43f af09 	beq.w	80141de <_strtod_l+0x43e>
 80143cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80143d0:	2a00      	cmp	r2, #0
 80143d2:	eba3 0308 	sub.w	r3, r3, r8
 80143d6:	bfa8      	it	ge
 80143d8:	2300      	movge	r3, #0
 80143da:	9312      	str	r3, [sp, #72]	@ 0x48
 80143dc:	2400      	movs	r4, #0
 80143de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80143e2:	9316      	str	r3, [sp, #88]	@ 0x58
 80143e4:	46a0      	mov	r8, r4
 80143e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143e8:	9805      	ldr	r0, [sp, #20]
 80143ea:	6859      	ldr	r1, [r3, #4]
 80143ec:	f7ff f810 	bl	8013410 <_Balloc>
 80143f0:	4681      	mov	r9, r0
 80143f2:	2800      	cmp	r0, #0
 80143f4:	f43f aef7 	beq.w	80141e6 <_strtod_l+0x446>
 80143f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143fa:	691a      	ldr	r2, [r3, #16]
 80143fc:	3202      	adds	r2, #2
 80143fe:	f103 010c 	add.w	r1, r3, #12
 8014402:	0092      	lsls	r2, r2, #2
 8014404:	300c      	adds	r0, #12
 8014406:	f7fe f896 	bl	8012536 <memcpy>
 801440a:	ec4b ab10 	vmov	d0, sl, fp
 801440e:	9805      	ldr	r0, [sp, #20]
 8014410:	aa1c      	add	r2, sp, #112	@ 0x70
 8014412:	a91b      	add	r1, sp, #108	@ 0x6c
 8014414:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8014418:	f7ff fbd6 	bl	8013bc8 <__d2b>
 801441c:	901a      	str	r0, [sp, #104]	@ 0x68
 801441e:	2800      	cmp	r0, #0
 8014420:	f43f aee1 	beq.w	80141e6 <_strtod_l+0x446>
 8014424:	9805      	ldr	r0, [sp, #20]
 8014426:	2101      	movs	r1, #1
 8014428:	f7ff f930 	bl	801368c <__i2b>
 801442c:	4680      	mov	r8, r0
 801442e:	b948      	cbnz	r0, 8014444 <_strtod_l+0x6a4>
 8014430:	f04f 0800 	mov.w	r8, #0
 8014434:	e6d7      	b.n	80141e6 <_strtod_l+0x446>
 8014436:	f04f 32ff 	mov.w	r2, #4294967295
 801443a:	fa02 f303 	lsl.w	r3, r2, r3
 801443e:	ea03 0a0a 	and.w	sl, r3, sl
 8014442:	e7af      	b.n	80143a4 <_strtod_l+0x604>
 8014444:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8014446:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014448:	2d00      	cmp	r5, #0
 801444a:	bfab      	itete	ge
 801444c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801444e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8014450:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8014452:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8014454:	bfac      	ite	ge
 8014456:	18ef      	addge	r7, r5, r3
 8014458:	1b5e      	sublt	r6, r3, r5
 801445a:	9b08      	ldr	r3, [sp, #32]
 801445c:	1aed      	subs	r5, r5, r3
 801445e:	4415      	add	r5, r2
 8014460:	4b65      	ldr	r3, [pc, #404]	@ (80145f8 <_strtod_l+0x858>)
 8014462:	3d01      	subs	r5, #1
 8014464:	429d      	cmp	r5, r3
 8014466:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801446a:	da50      	bge.n	801450e <_strtod_l+0x76e>
 801446c:	1b5b      	subs	r3, r3, r5
 801446e:	2b1f      	cmp	r3, #31
 8014470:	eba2 0203 	sub.w	r2, r2, r3
 8014474:	f04f 0101 	mov.w	r1, #1
 8014478:	dc3d      	bgt.n	80144f6 <_strtod_l+0x756>
 801447a:	fa01 f303 	lsl.w	r3, r1, r3
 801447e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014480:	2300      	movs	r3, #0
 8014482:	9310      	str	r3, [sp, #64]	@ 0x40
 8014484:	18bd      	adds	r5, r7, r2
 8014486:	9b08      	ldr	r3, [sp, #32]
 8014488:	42af      	cmp	r7, r5
 801448a:	4416      	add	r6, r2
 801448c:	441e      	add	r6, r3
 801448e:	463b      	mov	r3, r7
 8014490:	bfa8      	it	ge
 8014492:	462b      	movge	r3, r5
 8014494:	42b3      	cmp	r3, r6
 8014496:	bfa8      	it	ge
 8014498:	4633      	movge	r3, r6
 801449a:	2b00      	cmp	r3, #0
 801449c:	bfc2      	ittt	gt
 801449e:	1aed      	subgt	r5, r5, r3
 80144a0:	1af6      	subgt	r6, r6, r3
 80144a2:	1aff      	subgt	r7, r7, r3
 80144a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	dd16      	ble.n	80144d8 <_strtod_l+0x738>
 80144aa:	4641      	mov	r1, r8
 80144ac:	9805      	ldr	r0, [sp, #20]
 80144ae:	461a      	mov	r2, r3
 80144b0:	f7ff f9a4 	bl	80137fc <__pow5mult>
 80144b4:	4680      	mov	r8, r0
 80144b6:	2800      	cmp	r0, #0
 80144b8:	d0ba      	beq.n	8014430 <_strtod_l+0x690>
 80144ba:	4601      	mov	r1, r0
 80144bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80144be:	9805      	ldr	r0, [sp, #20]
 80144c0:	f7ff f8fa 	bl	80136b8 <__multiply>
 80144c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80144c6:	2800      	cmp	r0, #0
 80144c8:	f43f ae8d 	beq.w	80141e6 <_strtod_l+0x446>
 80144cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80144ce:	9805      	ldr	r0, [sp, #20]
 80144d0:	f7fe ffde 	bl	8013490 <_Bfree>
 80144d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80144d8:	2d00      	cmp	r5, #0
 80144da:	dc1d      	bgt.n	8014518 <_strtod_l+0x778>
 80144dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144de:	2b00      	cmp	r3, #0
 80144e0:	dd23      	ble.n	801452a <_strtod_l+0x78a>
 80144e2:	4649      	mov	r1, r9
 80144e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80144e6:	9805      	ldr	r0, [sp, #20]
 80144e8:	f7ff f988 	bl	80137fc <__pow5mult>
 80144ec:	4681      	mov	r9, r0
 80144ee:	b9e0      	cbnz	r0, 801452a <_strtod_l+0x78a>
 80144f0:	f04f 0900 	mov.w	r9, #0
 80144f4:	e677      	b.n	80141e6 <_strtod_l+0x446>
 80144f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80144fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80144fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8014502:	35e2      	adds	r5, #226	@ 0xe2
 8014504:	fa01 f305 	lsl.w	r3, r1, r5
 8014508:	9310      	str	r3, [sp, #64]	@ 0x40
 801450a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801450c:	e7ba      	b.n	8014484 <_strtod_l+0x6e4>
 801450e:	2300      	movs	r3, #0
 8014510:	9310      	str	r3, [sp, #64]	@ 0x40
 8014512:	2301      	movs	r3, #1
 8014514:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014516:	e7b5      	b.n	8014484 <_strtod_l+0x6e4>
 8014518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801451a:	9805      	ldr	r0, [sp, #20]
 801451c:	462a      	mov	r2, r5
 801451e:	f7ff f9c7 	bl	80138b0 <__lshift>
 8014522:	901a      	str	r0, [sp, #104]	@ 0x68
 8014524:	2800      	cmp	r0, #0
 8014526:	d1d9      	bne.n	80144dc <_strtod_l+0x73c>
 8014528:	e65d      	b.n	80141e6 <_strtod_l+0x446>
 801452a:	2e00      	cmp	r6, #0
 801452c:	dd07      	ble.n	801453e <_strtod_l+0x79e>
 801452e:	4649      	mov	r1, r9
 8014530:	9805      	ldr	r0, [sp, #20]
 8014532:	4632      	mov	r2, r6
 8014534:	f7ff f9bc 	bl	80138b0 <__lshift>
 8014538:	4681      	mov	r9, r0
 801453a:	2800      	cmp	r0, #0
 801453c:	d0d8      	beq.n	80144f0 <_strtod_l+0x750>
 801453e:	2f00      	cmp	r7, #0
 8014540:	dd08      	ble.n	8014554 <_strtod_l+0x7b4>
 8014542:	4641      	mov	r1, r8
 8014544:	9805      	ldr	r0, [sp, #20]
 8014546:	463a      	mov	r2, r7
 8014548:	f7ff f9b2 	bl	80138b0 <__lshift>
 801454c:	4680      	mov	r8, r0
 801454e:	2800      	cmp	r0, #0
 8014550:	f43f ae49 	beq.w	80141e6 <_strtod_l+0x446>
 8014554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014556:	9805      	ldr	r0, [sp, #20]
 8014558:	464a      	mov	r2, r9
 801455a:	f7ff fa31 	bl	80139c0 <__mdiff>
 801455e:	4604      	mov	r4, r0
 8014560:	2800      	cmp	r0, #0
 8014562:	f43f ae40 	beq.w	80141e6 <_strtod_l+0x446>
 8014566:	68c3      	ldr	r3, [r0, #12]
 8014568:	930f      	str	r3, [sp, #60]	@ 0x3c
 801456a:	2300      	movs	r3, #0
 801456c:	60c3      	str	r3, [r0, #12]
 801456e:	4641      	mov	r1, r8
 8014570:	f7ff fa0a 	bl	8013988 <__mcmp>
 8014574:	2800      	cmp	r0, #0
 8014576:	da45      	bge.n	8014604 <_strtod_l+0x864>
 8014578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801457a:	ea53 030a 	orrs.w	r3, r3, sl
 801457e:	d16b      	bne.n	8014658 <_strtod_l+0x8b8>
 8014580:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014584:	2b00      	cmp	r3, #0
 8014586:	d167      	bne.n	8014658 <_strtod_l+0x8b8>
 8014588:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801458c:	0d1b      	lsrs	r3, r3, #20
 801458e:	051b      	lsls	r3, r3, #20
 8014590:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014594:	d960      	bls.n	8014658 <_strtod_l+0x8b8>
 8014596:	6963      	ldr	r3, [r4, #20]
 8014598:	b913      	cbnz	r3, 80145a0 <_strtod_l+0x800>
 801459a:	6923      	ldr	r3, [r4, #16]
 801459c:	2b01      	cmp	r3, #1
 801459e:	dd5b      	ble.n	8014658 <_strtod_l+0x8b8>
 80145a0:	4621      	mov	r1, r4
 80145a2:	2201      	movs	r2, #1
 80145a4:	9805      	ldr	r0, [sp, #20]
 80145a6:	f7ff f983 	bl	80138b0 <__lshift>
 80145aa:	4641      	mov	r1, r8
 80145ac:	4604      	mov	r4, r0
 80145ae:	f7ff f9eb 	bl	8013988 <__mcmp>
 80145b2:	2800      	cmp	r0, #0
 80145b4:	dd50      	ble.n	8014658 <_strtod_l+0x8b8>
 80145b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80145ba:	9a08      	ldr	r2, [sp, #32]
 80145bc:	0d1b      	lsrs	r3, r3, #20
 80145be:	051b      	lsls	r3, r3, #20
 80145c0:	2a00      	cmp	r2, #0
 80145c2:	d06a      	beq.n	801469a <_strtod_l+0x8fa>
 80145c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80145c8:	d867      	bhi.n	801469a <_strtod_l+0x8fa>
 80145ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80145ce:	f67f ae9d 	bls.w	801430c <_strtod_l+0x56c>
 80145d2:	4b0a      	ldr	r3, [pc, #40]	@ (80145fc <_strtod_l+0x85c>)
 80145d4:	4650      	mov	r0, sl
 80145d6:	4659      	mov	r1, fp
 80145d8:	2200      	movs	r2, #0
 80145da:	f7ec f835 	bl	8000648 <__aeabi_dmul>
 80145de:	4b08      	ldr	r3, [pc, #32]	@ (8014600 <_strtod_l+0x860>)
 80145e0:	400b      	ands	r3, r1
 80145e2:	4682      	mov	sl, r0
 80145e4:	468b      	mov	fp, r1
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	f47f ae08 	bne.w	80141fc <_strtod_l+0x45c>
 80145ec:	9a05      	ldr	r2, [sp, #20]
 80145ee:	2322      	movs	r3, #34	@ 0x22
 80145f0:	6013      	str	r3, [r2, #0]
 80145f2:	e603      	b.n	80141fc <_strtod_l+0x45c>
 80145f4:	08016930 	.word	0x08016930
 80145f8:	fffffc02 	.word	0xfffffc02
 80145fc:	39500000 	.word	0x39500000
 8014600:	7ff00000 	.word	0x7ff00000
 8014604:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8014608:	d165      	bne.n	80146d6 <_strtod_l+0x936>
 801460a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801460c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014610:	b35a      	cbz	r2, 801466a <_strtod_l+0x8ca>
 8014612:	4a9f      	ldr	r2, [pc, #636]	@ (8014890 <_strtod_l+0xaf0>)
 8014614:	4293      	cmp	r3, r2
 8014616:	d12b      	bne.n	8014670 <_strtod_l+0x8d0>
 8014618:	9b08      	ldr	r3, [sp, #32]
 801461a:	4651      	mov	r1, sl
 801461c:	b303      	cbz	r3, 8014660 <_strtod_l+0x8c0>
 801461e:	4b9d      	ldr	r3, [pc, #628]	@ (8014894 <_strtod_l+0xaf4>)
 8014620:	465a      	mov	r2, fp
 8014622:	4013      	ands	r3, r2
 8014624:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014628:	f04f 32ff 	mov.w	r2, #4294967295
 801462c:	d81b      	bhi.n	8014666 <_strtod_l+0x8c6>
 801462e:	0d1b      	lsrs	r3, r3, #20
 8014630:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014634:	fa02 f303 	lsl.w	r3, r2, r3
 8014638:	4299      	cmp	r1, r3
 801463a:	d119      	bne.n	8014670 <_strtod_l+0x8d0>
 801463c:	4b96      	ldr	r3, [pc, #600]	@ (8014898 <_strtod_l+0xaf8>)
 801463e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014640:	429a      	cmp	r2, r3
 8014642:	d102      	bne.n	801464a <_strtod_l+0x8aa>
 8014644:	3101      	adds	r1, #1
 8014646:	f43f adce 	beq.w	80141e6 <_strtod_l+0x446>
 801464a:	4b92      	ldr	r3, [pc, #584]	@ (8014894 <_strtod_l+0xaf4>)
 801464c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801464e:	401a      	ands	r2, r3
 8014650:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8014654:	f04f 0a00 	mov.w	sl, #0
 8014658:	9b08      	ldr	r3, [sp, #32]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d1b9      	bne.n	80145d2 <_strtod_l+0x832>
 801465e:	e5cd      	b.n	80141fc <_strtod_l+0x45c>
 8014660:	f04f 33ff 	mov.w	r3, #4294967295
 8014664:	e7e8      	b.n	8014638 <_strtod_l+0x898>
 8014666:	4613      	mov	r3, r2
 8014668:	e7e6      	b.n	8014638 <_strtod_l+0x898>
 801466a:	ea53 030a 	orrs.w	r3, r3, sl
 801466e:	d0a2      	beq.n	80145b6 <_strtod_l+0x816>
 8014670:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014672:	b1db      	cbz	r3, 80146ac <_strtod_l+0x90c>
 8014674:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014676:	4213      	tst	r3, r2
 8014678:	d0ee      	beq.n	8014658 <_strtod_l+0x8b8>
 801467a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801467c:	9a08      	ldr	r2, [sp, #32]
 801467e:	4650      	mov	r0, sl
 8014680:	4659      	mov	r1, fp
 8014682:	b1bb      	cbz	r3, 80146b4 <_strtod_l+0x914>
 8014684:	f7ff fb6e 	bl	8013d64 <sulp>
 8014688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801468c:	ec53 2b10 	vmov	r2, r3, d0
 8014690:	f7eb fe24 	bl	80002dc <__adddf3>
 8014694:	4682      	mov	sl, r0
 8014696:	468b      	mov	fp, r1
 8014698:	e7de      	b.n	8014658 <_strtod_l+0x8b8>
 801469a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801469e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80146a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80146a6:	f04f 3aff 	mov.w	sl, #4294967295
 80146aa:	e7d5      	b.n	8014658 <_strtod_l+0x8b8>
 80146ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80146ae:	ea13 0f0a 	tst.w	r3, sl
 80146b2:	e7e1      	b.n	8014678 <_strtod_l+0x8d8>
 80146b4:	f7ff fb56 	bl	8013d64 <sulp>
 80146b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80146bc:	ec53 2b10 	vmov	r2, r3, d0
 80146c0:	f7eb fe0a 	bl	80002d8 <__aeabi_dsub>
 80146c4:	2200      	movs	r2, #0
 80146c6:	2300      	movs	r3, #0
 80146c8:	4682      	mov	sl, r0
 80146ca:	468b      	mov	fp, r1
 80146cc:	f7ec fa24 	bl	8000b18 <__aeabi_dcmpeq>
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d0c1      	beq.n	8014658 <_strtod_l+0x8b8>
 80146d4:	e61a      	b.n	801430c <_strtod_l+0x56c>
 80146d6:	4641      	mov	r1, r8
 80146d8:	4620      	mov	r0, r4
 80146da:	f7ff facd 	bl	8013c78 <__ratio>
 80146de:	ec57 6b10 	vmov	r6, r7, d0
 80146e2:	2200      	movs	r2, #0
 80146e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80146e8:	4630      	mov	r0, r6
 80146ea:	4639      	mov	r1, r7
 80146ec:	f7ec fa28 	bl	8000b40 <__aeabi_dcmple>
 80146f0:	2800      	cmp	r0, #0
 80146f2:	d06f      	beq.n	80147d4 <_strtod_l+0xa34>
 80146f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d17a      	bne.n	80147f0 <_strtod_l+0xa50>
 80146fa:	f1ba 0f00 	cmp.w	sl, #0
 80146fe:	d158      	bne.n	80147b2 <_strtod_l+0xa12>
 8014700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014706:	2b00      	cmp	r3, #0
 8014708:	d15a      	bne.n	80147c0 <_strtod_l+0xa20>
 801470a:	4b64      	ldr	r3, [pc, #400]	@ (801489c <_strtod_l+0xafc>)
 801470c:	2200      	movs	r2, #0
 801470e:	4630      	mov	r0, r6
 8014710:	4639      	mov	r1, r7
 8014712:	f7ec fa0b 	bl	8000b2c <__aeabi_dcmplt>
 8014716:	2800      	cmp	r0, #0
 8014718:	d159      	bne.n	80147ce <_strtod_l+0xa2e>
 801471a:	4630      	mov	r0, r6
 801471c:	4639      	mov	r1, r7
 801471e:	4b60      	ldr	r3, [pc, #384]	@ (80148a0 <_strtod_l+0xb00>)
 8014720:	2200      	movs	r2, #0
 8014722:	f7eb ff91 	bl	8000648 <__aeabi_dmul>
 8014726:	4606      	mov	r6, r0
 8014728:	460f      	mov	r7, r1
 801472a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801472e:	9606      	str	r6, [sp, #24]
 8014730:	9307      	str	r3, [sp, #28]
 8014732:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014736:	4d57      	ldr	r5, [pc, #348]	@ (8014894 <_strtod_l+0xaf4>)
 8014738:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801473c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801473e:	401d      	ands	r5, r3
 8014740:	4b58      	ldr	r3, [pc, #352]	@ (80148a4 <_strtod_l+0xb04>)
 8014742:	429d      	cmp	r5, r3
 8014744:	f040 80b2 	bne.w	80148ac <_strtod_l+0xb0c>
 8014748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801474a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801474e:	ec4b ab10 	vmov	d0, sl, fp
 8014752:	f7ff f9c9 	bl	8013ae8 <__ulp>
 8014756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801475a:	ec51 0b10 	vmov	r0, r1, d0
 801475e:	f7eb ff73 	bl	8000648 <__aeabi_dmul>
 8014762:	4652      	mov	r2, sl
 8014764:	465b      	mov	r3, fp
 8014766:	f7eb fdb9 	bl	80002dc <__adddf3>
 801476a:	460b      	mov	r3, r1
 801476c:	4949      	ldr	r1, [pc, #292]	@ (8014894 <_strtod_l+0xaf4>)
 801476e:	4a4e      	ldr	r2, [pc, #312]	@ (80148a8 <_strtod_l+0xb08>)
 8014770:	4019      	ands	r1, r3
 8014772:	4291      	cmp	r1, r2
 8014774:	4682      	mov	sl, r0
 8014776:	d942      	bls.n	80147fe <_strtod_l+0xa5e>
 8014778:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801477a:	4b47      	ldr	r3, [pc, #284]	@ (8014898 <_strtod_l+0xaf8>)
 801477c:	429a      	cmp	r2, r3
 801477e:	d103      	bne.n	8014788 <_strtod_l+0x9e8>
 8014780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014782:	3301      	adds	r3, #1
 8014784:	f43f ad2f 	beq.w	80141e6 <_strtod_l+0x446>
 8014788:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014898 <_strtod_l+0xaf8>
 801478c:	f04f 3aff 	mov.w	sl, #4294967295
 8014790:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014792:	9805      	ldr	r0, [sp, #20]
 8014794:	f7fe fe7c 	bl	8013490 <_Bfree>
 8014798:	9805      	ldr	r0, [sp, #20]
 801479a:	4649      	mov	r1, r9
 801479c:	f7fe fe78 	bl	8013490 <_Bfree>
 80147a0:	9805      	ldr	r0, [sp, #20]
 80147a2:	4641      	mov	r1, r8
 80147a4:	f7fe fe74 	bl	8013490 <_Bfree>
 80147a8:	9805      	ldr	r0, [sp, #20]
 80147aa:	4621      	mov	r1, r4
 80147ac:	f7fe fe70 	bl	8013490 <_Bfree>
 80147b0:	e619      	b.n	80143e6 <_strtod_l+0x646>
 80147b2:	f1ba 0f01 	cmp.w	sl, #1
 80147b6:	d103      	bne.n	80147c0 <_strtod_l+0xa20>
 80147b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	f43f ada6 	beq.w	801430c <_strtod_l+0x56c>
 80147c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014870 <_strtod_l+0xad0>
 80147c4:	4f35      	ldr	r7, [pc, #212]	@ (801489c <_strtod_l+0xafc>)
 80147c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80147ca:	2600      	movs	r6, #0
 80147cc:	e7b1      	b.n	8014732 <_strtod_l+0x992>
 80147ce:	4f34      	ldr	r7, [pc, #208]	@ (80148a0 <_strtod_l+0xb00>)
 80147d0:	2600      	movs	r6, #0
 80147d2:	e7aa      	b.n	801472a <_strtod_l+0x98a>
 80147d4:	4b32      	ldr	r3, [pc, #200]	@ (80148a0 <_strtod_l+0xb00>)
 80147d6:	4630      	mov	r0, r6
 80147d8:	4639      	mov	r1, r7
 80147da:	2200      	movs	r2, #0
 80147dc:	f7eb ff34 	bl	8000648 <__aeabi_dmul>
 80147e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80147e2:	4606      	mov	r6, r0
 80147e4:	460f      	mov	r7, r1
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d09f      	beq.n	801472a <_strtod_l+0x98a>
 80147ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80147ee:	e7a0      	b.n	8014732 <_strtod_l+0x992>
 80147f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014878 <_strtod_l+0xad8>
 80147f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80147f8:	ec57 6b17 	vmov	r6, r7, d7
 80147fc:	e799      	b.n	8014732 <_strtod_l+0x992>
 80147fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8014802:	9b08      	ldr	r3, [sp, #32]
 8014804:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8014808:	2b00      	cmp	r3, #0
 801480a:	d1c1      	bne.n	8014790 <_strtod_l+0x9f0>
 801480c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014810:	0d1b      	lsrs	r3, r3, #20
 8014812:	051b      	lsls	r3, r3, #20
 8014814:	429d      	cmp	r5, r3
 8014816:	d1bb      	bne.n	8014790 <_strtod_l+0x9f0>
 8014818:	4630      	mov	r0, r6
 801481a:	4639      	mov	r1, r7
 801481c:	f7ec fa74 	bl	8000d08 <__aeabi_d2lz>
 8014820:	f7eb fee4 	bl	80005ec <__aeabi_l2d>
 8014824:	4602      	mov	r2, r0
 8014826:	460b      	mov	r3, r1
 8014828:	4630      	mov	r0, r6
 801482a:	4639      	mov	r1, r7
 801482c:	f7eb fd54 	bl	80002d8 <__aeabi_dsub>
 8014830:	460b      	mov	r3, r1
 8014832:	4602      	mov	r2, r0
 8014834:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014838:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801483c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801483e:	ea46 060a 	orr.w	r6, r6, sl
 8014842:	431e      	orrs	r6, r3
 8014844:	d06f      	beq.n	8014926 <_strtod_l+0xb86>
 8014846:	a30e      	add	r3, pc, #56	@ (adr r3, 8014880 <_strtod_l+0xae0>)
 8014848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801484c:	f7ec f96e 	bl	8000b2c <__aeabi_dcmplt>
 8014850:	2800      	cmp	r0, #0
 8014852:	f47f acd3 	bne.w	80141fc <_strtod_l+0x45c>
 8014856:	a30c      	add	r3, pc, #48	@ (adr r3, 8014888 <_strtod_l+0xae8>)
 8014858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801485c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014860:	f7ec f982 	bl	8000b68 <__aeabi_dcmpgt>
 8014864:	2800      	cmp	r0, #0
 8014866:	d093      	beq.n	8014790 <_strtod_l+0x9f0>
 8014868:	e4c8      	b.n	80141fc <_strtod_l+0x45c>
 801486a:	bf00      	nop
 801486c:	f3af 8000 	nop.w
 8014870:	00000000 	.word	0x00000000
 8014874:	bff00000 	.word	0xbff00000
 8014878:	00000000 	.word	0x00000000
 801487c:	3ff00000 	.word	0x3ff00000
 8014880:	94a03595 	.word	0x94a03595
 8014884:	3fdfffff 	.word	0x3fdfffff
 8014888:	35afe535 	.word	0x35afe535
 801488c:	3fe00000 	.word	0x3fe00000
 8014890:	000fffff 	.word	0x000fffff
 8014894:	7ff00000 	.word	0x7ff00000
 8014898:	7fefffff 	.word	0x7fefffff
 801489c:	3ff00000 	.word	0x3ff00000
 80148a0:	3fe00000 	.word	0x3fe00000
 80148a4:	7fe00000 	.word	0x7fe00000
 80148a8:	7c9fffff 	.word	0x7c9fffff
 80148ac:	9b08      	ldr	r3, [sp, #32]
 80148ae:	b323      	cbz	r3, 80148fa <_strtod_l+0xb5a>
 80148b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80148b4:	d821      	bhi.n	80148fa <_strtod_l+0xb5a>
 80148b6:	a328      	add	r3, pc, #160	@ (adr r3, 8014958 <_strtod_l+0xbb8>)
 80148b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148bc:	4630      	mov	r0, r6
 80148be:	4639      	mov	r1, r7
 80148c0:	f7ec f93e 	bl	8000b40 <__aeabi_dcmple>
 80148c4:	b1a0      	cbz	r0, 80148f0 <_strtod_l+0xb50>
 80148c6:	4639      	mov	r1, r7
 80148c8:	4630      	mov	r0, r6
 80148ca:	f7ec f995 	bl	8000bf8 <__aeabi_d2uiz>
 80148ce:	2801      	cmp	r0, #1
 80148d0:	bf38      	it	cc
 80148d2:	2001      	movcc	r0, #1
 80148d4:	f7eb fe3e 	bl	8000554 <__aeabi_ui2d>
 80148d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80148da:	4606      	mov	r6, r0
 80148dc:	460f      	mov	r7, r1
 80148de:	b9fb      	cbnz	r3, 8014920 <_strtod_l+0xb80>
 80148e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80148e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80148e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80148e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80148ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80148f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80148f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80148f6:	1b5b      	subs	r3, r3, r5
 80148f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80148fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80148fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8014902:	f7ff f8f1 	bl	8013ae8 <__ulp>
 8014906:	4650      	mov	r0, sl
 8014908:	ec53 2b10 	vmov	r2, r3, d0
 801490c:	4659      	mov	r1, fp
 801490e:	f7eb fe9b 	bl	8000648 <__aeabi_dmul>
 8014912:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014916:	f7eb fce1 	bl	80002dc <__adddf3>
 801491a:	4682      	mov	sl, r0
 801491c:	468b      	mov	fp, r1
 801491e:	e770      	b.n	8014802 <_strtod_l+0xa62>
 8014920:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8014924:	e7e0      	b.n	80148e8 <_strtod_l+0xb48>
 8014926:	a30e      	add	r3, pc, #56	@ (adr r3, 8014960 <_strtod_l+0xbc0>)
 8014928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801492c:	f7ec f8fe 	bl	8000b2c <__aeabi_dcmplt>
 8014930:	e798      	b.n	8014864 <_strtod_l+0xac4>
 8014932:	2300      	movs	r3, #0
 8014934:	930e      	str	r3, [sp, #56]	@ 0x38
 8014936:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801493a:	6013      	str	r3, [r2, #0]
 801493c:	f7ff ba6d 	b.w	8013e1a <_strtod_l+0x7a>
 8014940:	2a65      	cmp	r2, #101	@ 0x65
 8014942:	f43f ab68 	beq.w	8014016 <_strtod_l+0x276>
 8014946:	2a45      	cmp	r2, #69	@ 0x45
 8014948:	f43f ab65 	beq.w	8014016 <_strtod_l+0x276>
 801494c:	2301      	movs	r3, #1
 801494e:	f7ff bba0 	b.w	8014092 <_strtod_l+0x2f2>
 8014952:	bf00      	nop
 8014954:	f3af 8000 	nop.w
 8014958:	ffc00000 	.word	0xffc00000
 801495c:	41dfffff 	.word	0x41dfffff
 8014960:	94a03595 	.word	0x94a03595
 8014964:	3fcfffff 	.word	0x3fcfffff

08014968 <_strtod_r>:
 8014968:	4b01      	ldr	r3, [pc, #4]	@ (8014970 <_strtod_r+0x8>)
 801496a:	f7ff ba19 	b.w	8013da0 <_strtod_l>
 801496e:	bf00      	nop
 8014970:	2000008c 	.word	0x2000008c

08014974 <_strtol_l.isra.0>:
 8014974:	2b24      	cmp	r3, #36	@ 0x24
 8014976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801497a:	4686      	mov	lr, r0
 801497c:	4690      	mov	r8, r2
 801497e:	d801      	bhi.n	8014984 <_strtol_l.isra.0+0x10>
 8014980:	2b01      	cmp	r3, #1
 8014982:	d106      	bne.n	8014992 <_strtol_l.isra.0+0x1e>
 8014984:	f7fd fdaa 	bl	80124dc <__errno>
 8014988:	2316      	movs	r3, #22
 801498a:	6003      	str	r3, [r0, #0]
 801498c:	2000      	movs	r0, #0
 801498e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014992:	4834      	ldr	r0, [pc, #208]	@ (8014a64 <_strtol_l.isra.0+0xf0>)
 8014994:	460d      	mov	r5, r1
 8014996:	462a      	mov	r2, r5
 8014998:	f815 4b01 	ldrb.w	r4, [r5], #1
 801499c:	5d06      	ldrb	r6, [r0, r4]
 801499e:	f016 0608 	ands.w	r6, r6, #8
 80149a2:	d1f8      	bne.n	8014996 <_strtol_l.isra.0+0x22>
 80149a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80149a6:	d110      	bne.n	80149ca <_strtol_l.isra.0+0x56>
 80149a8:	782c      	ldrb	r4, [r5, #0]
 80149aa:	2601      	movs	r6, #1
 80149ac:	1c95      	adds	r5, r2, #2
 80149ae:	f033 0210 	bics.w	r2, r3, #16
 80149b2:	d115      	bne.n	80149e0 <_strtol_l.isra.0+0x6c>
 80149b4:	2c30      	cmp	r4, #48	@ 0x30
 80149b6:	d10d      	bne.n	80149d4 <_strtol_l.isra.0+0x60>
 80149b8:	782a      	ldrb	r2, [r5, #0]
 80149ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80149be:	2a58      	cmp	r2, #88	@ 0x58
 80149c0:	d108      	bne.n	80149d4 <_strtol_l.isra.0+0x60>
 80149c2:	786c      	ldrb	r4, [r5, #1]
 80149c4:	3502      	adds	r5, #2
 80149c6:	2310      	movs	r3, #16
 80149c8:	e00a      	b.n	80149e0 <_strtol_l.isra.0+0x6c>
 80149ca:	2c2b      	cmp	r4, #43	@ 0x2b
 80149cc:	bf04      	itt	eq
 80149ce:	782c      	ldrbeq	r4, [r5, #0]
 80149d0:	1c95      	addeq	r5, r2, #2
 80149d2:	e7ec      	b.n	80149ae <_strtol_l.isra.0+0x3a>
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d1f6      	bne.n	80149c6 <_strtol_l.isra.0+0x52>
 80149d8:	2c30      	cmp	r4, #48	@ 0x30
 80149da:	bf14      	ite	ne
 80149dc:	230a      	movne	r3, #10
 80149de:	2308      	moveq	r3, #8
 80149e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80149e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80149e8:	2200      	movs	r2, #0
 80149ea:	fbbc f9f3 	udiv	r9, ip, r3
 80149ee:	4610      	mov	r0, r2
 80149f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80149f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80149f8:	2f09      	cmp	r7, #9
 80149fa:	d80f      	bhi.n	8014a1c <_strtol_l.isra.0+0xa8>
 80149fc:	463c      	mov	r4, r7
 80149fe:	42a3      	cmp	r3, r4
 8014a00:	dd1b      	ble.n	8014a3a <_strtol_l.isra.0+0xc6>
 8014a02:	1c57      	adds	r7, r2, #1
 8014a04:	d007      	beq.n	8014a16 <_strtol_l.isra.0+0xa2>
 8014a06:	4581      	cmp	r9, r0
 8014a08:	d314      	bcc.n	8014a34 <_strtol_l.isra.0+0xc0>
 8014a0a:	d101      	bne.n	8014a10 <_strtol_l.isra.0+0x9c>
 8014a0c:	45a2      	cmp	sl, r4
 8014a0e:	db11      	blt.n	8014a34 <_strtol_l.isra.0+0xc0>
 8014a10:	fb00 4003 	mla	r0, r0, r3, r4
 8014a14:	2201      	movs	r2, #1
 8014a16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014a1a:	e7eb      	b.n	80149f4 <_strtol_l.isra.0+0x80>
 8014a1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014a20:	2f19      	cmp	r7, #25
 8014a22:	d801      	bhi.n	8014a28 <_strtol_l.isra.0+0xb4>
 8014a24:	3c37      	subs	r4, #55	@ 0x37
 8014a26:	e7ea      	b.n	80149fe <_strtol_l.isra.0+0x8a>
 8014a28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014a2c:	2f19      	cmp	r7, #25
 8014a2e:	d804      	bhi.n	8014a3a <_strtol_l.isra.0+0xc6>
 8014a30:	3c57      	subs	r4, #87	@ 0x57
 8014a32:	e7e4      	b.n	80149fe <_strtol_l.isra.0+0x8a>
 8014a34:	f04f 32ff 	mov.w	r2, #4294967295
 8014a38:	e7ed      	b.n	8014a16 <_strtol_l.isra.0+0xa2>
 8014a3a:	1c53      	adds	r3, r2, #1
 8014a3c:	d108      	bne.n	8014a50 <_strtol_l.isra.0+0xdc>
 8014a3e:	2322      	movs	r3, #34	@ 0x22
 8014a40:	f8ce 3000 	str.w	r3, [lr]
 8014a44:	4660      	mov	r0, ip
 8014a46:	f1b8 0f00 	cmp.w	r8, #0
 8014a4a:	d0a0      	beq.n	801498e <_strtol_l.isra.0+0x1a>
 8014a4c:	1e69      	subs	r1, r5, #1
 8014a4e:	e006      	b.n	8014a5e <_strtol_l.isra.0+0xea>
 8014a50:	b106      	cbz	r6, 8014a54 <_strtol_l.isra.0+0xe0>
 8014a52:	4240      	negs	r0, r0
 8014a54:	f1b8 0f00 	cmp.w	r8, #0
 8014a58:	d099      	beq.n	801498e <_strtol_l.isra.0+0x1a>
 8014a5a:	2a00      	cmp	r2, #0
 8014a5c:	d1f6      	bne.n	8014a4c <_strtol_l.isra.0+0xd8>
 8014a5e:	f8c8 1000 	str.w	r1, [r8]
 8014a62:	e794      	b.n	801498e <_strtol_l.isra.0+0x1a>
 8014a64:	08016959 	.word	0x08016959

08014a68 <_strtol_r>:
 8014a68:	f7ff bf84 	b.w	8014974 <_strtol_l.isra.0>

08014a6c <__ssputs_r>:
 8014a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a70:	688e      	ldr	r6, [r1, #8]
 8014a72:	461f      	mov	r7, r3
 8014a74:	42be      	cmp	r6, r7
 8014a76:	680b      	ldr	r3, [r1, #0]
 8014a78:	4682      	mov	sl, r0
 8014a7a:	460c      	mov	r4, r1
 8014a7c:	4690      	mov	r8, r2
 8014a7e:	d82d      	bhi.n	8014adc <__ssputs_r+0x70>
 8014a80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014a84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014a88:	d026      	beq.n	8014ad8 <__ssputs_r+0x6c>
 8014a8a:	6965      	ldr	r5, [r4, #20]
 8014a8c:	6909      	ldr	r1, [r1, #16]
 8014a8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a92:	eba3 0901 	sub.w	r9, r3, r1
 8014a96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a9a:	1c7b      	adds	r3, r7, #1
 8014a9c:	444b      	add	r3, r9
 8014a9e:	106d      	asrs	r5, r5, #1
 8014aa0:	429d      	cmp	r5, r3
 8014aa2:	bf38      	it	cc
 8014aa4:	461d      	movcc	r5, r3
 8014aa6:	0553      	lsls	r3, r2, #21
 8014aa8:	d527      	bpl.n	8014afa <__ssputs_r+0x8e>
 8014aaa:	4629      	mov	r1, r5
 8014aac:	f7fe fc24 	bl	80132f8 <_malloc_r>
 8014ab0:	4606      	mov	r6, r0
 8014ab2:	b360      	cbz	r0, 8014b0e <__ssputs_r+0xa2>
 8014ab4:	6921      	ldr	r1, [r4, #16]
 8014ab6:	464a      	mov	r2, r9
 8014ab8:	f7fd fd3d 	bl	8012536 <memcpy>
 8014abc:	89a3      	ldrh	r3, [r4, #12]
 8014abe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ac6:	81a3      	strh	r3, [r4, #12]
 8014ac8:	6126      	str	r6, [r4, #16]
 8014aca:	6165      	str	r5, [r4, #20]
 8014acc:	444e      	add	r6, r9
 8014ace:	eba5 0509 	sub.w	r5, r5, r9
 8014ad2:	6026      	str	r6, [r4, #0]
 8014ad4:	60a5      	str	r5, [r4, #8]
 8014ad6:	463e      	mov	r6, r7
 8014ad8:	42be      	cmp	r6, r7
 8014ada:	d900      	bls.n	8014ade <__ssputs_r+0x72>
 8014adc:	463e      	mov	r6, r7
 8014ade:	6820      	ldr	r0, [r4, #0]
 8014ae0:	4632      	mov	r2, r6
 8014ae2:	4641      	mov	r1, r8
 8014ae4:	f000 f9c6 	bl	8014e74 <memmove>
 8014ae8:	68a3      	ldr	r3, [r4, #8]
 8014aea:	1b9b      	subs	r3, r3, r6
 8014aec:	60a3      	str	r3, [r4, #8]
 8014aee:	6823      	ldr	r3, [r4, #0]
 8014af0:	4433      	add	r3, r6
 8014af2:	6023      	str	r3, [r4, #0]
 8014af4:	2000      	movs	r0, #0
 8014af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014afa:	462a      	mov	r2, r5
 8014afc:	f000 fd7d 	bl	80155fa <_realloc_r>
 8014b00:	4606      	mov	r6, r0
 8014b02:	2800      	cmp	r0, #0
 8014b04:	d1e0      	bne.n	8014ac8 <__ssputs_r+0x5c>
 8014b06:	6921      	ldr	r1, [r4, #16]
 8014b08:	4650      	mov	r0, sl
 8014b0a:	f7fe fb81 	bl	8013210 <_free_r>
 8014b0e:	230c      	movs	r3, #12
 8014b10:	f8ca 3000 	str.w	r3, [sl]
 8014b14:	89a3      	ldrh	r3, [r4, #12]
 8014b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b1a:	81a3      	strh	r3, [r4, #12]
 8014b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b20:	e7e9      	b.n	8014af6 <__ssputs_r+0x8a>
	...

08014b24 <_svfiprintf_r>:
 8014b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b28:	4698      	mov	r8, r3
 8014b2a:	898b      	ldrh	r3, [r1, #12]
 8014b2c:	061b      	lsls	r3, r3, #24
 8014b2e:	b09d      	sub	sp, #116	@ 0x74
 8014b30:	4607      	mov	r7, r0
 8014b32:	460d      	mov	r5, r1
 8014b34:	4614      	mov	r4, r2
 8014b36:	d510      	bpl.n	8014b5a <_svfiprintf_r+0x36>
 8014b38:	690b      	ldr	r3, [r1, #16]
 8014b3a:	b973      	cbnz	r3, 8014b5a <_svfiprintf_r+0x36>
 8014b3c:	2140      	movs	r1, #64	@ 0x40
 8014b3e:	f7fe fbdb 	bl	80132f8 <_malloc_r>
 8014b42:	6028      	str	r0, [r5, #0]
 8014b44:	6128      	str	r0, [r5, #16]
 8014b46:	b930      	cbnz	r0, 8014b56 <_svfiprintf_r+0x32>
 8014b48:	230c      	movs	r3, #12
 8014b4a:	603b      	str	r3, [r7, #0]
 8014b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b50:	b01d      	add	sp, #116	@ 0x74
 8014b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b56:	2340      	movs	r3, #64	@ 0x40
 8014b58:	616b      	str	r3, [r5, #20]
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b5e:	2320      	movs	r3, #32
 8014b60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b68:	2330      	movs	r3, #48	@ 0x30
 8014b6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014d08 <_svfiprintf_r+0x1e4>
 8014b6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b72:	f04f 0901 	mov.w	r9, #1
 8014b76:	4623      	mov	r3, r4
 8014b78:	469a      	mov	sl, r3
 8014b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b7e:	b10a      	cbz	r2, 8014b84 <_svfiprintf_r+0x60>
 8014b80:	2a25      	cmp	r2, #37	@ 0x25
 8014b82:	d1f9      	bne.n	8014b78 <_svfiprintf_r+0x54>
 8014b84:	ebba 0b04 	subs.w	fp, sl, r4
 8014b88:	d00b      	beq.n	8014ba2 <_svfiprintf_r+0x7e>
 8014b8a:	465b      	mov	r3, fp
 8014b8c:	4622      	mov	r2, r4
 8014b8e:	4629      	mov	r1, r5
 8014b90:	4638      	mov	r0, r7
 8014b92:	f7ff ff6b 	bl	8014a6c <__ssputs_r>
 8014b96:	3001      	adds	r0, #1
 8014b98:	f000 80a7 	beq.w	8014cea <_svfiprintf_r+0x1c6>
 8014b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b9e:	445a      	add	r2, fp
 8014ba0:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	f000 809f 	beq.w	8014cea <_svfiprintf_r+0x1c6>
 8014bac:	2300      	movs	r3, #0
 8014bae:	f04f 32ff 	mov.w	r2, #4294967295
 8014bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014bb6:	f10a 0a01 	add.w	sl, sl, #1
 8014bba:	9304      	str	r3, [sp, #16]
 8014bbc:	9307      	str	r3, [sp, #28]
 8014bbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014bc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8014bc4:	4654      	mov	r4, sl
 8014bc6:	2205      	movs	r2, #5
 8014bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bcc:	484e      	ldr	r0, [pc, #312]	@ (8014d08 <_svfiprintf_r+0x1e4>)
 8014bce:	f7eb fb27 	bl	8000220 <memchr>
 8014bd2:	9a04      	ldr	r2, [sp, #16]
 8014bd4:	b9d8      	cbnz	r0, 8014c0e <_svfiprintf_r+0xea>
 8014bd6:	06d0      	lsls	r0, r2, #27
 8014bd8:	bf44      	itt	mi
 8014bda:	2320      	movmi	r3, #32
 8014bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014be0:	0711      	lsls	r1, r2, #28
 8014be2:	bf44      	itt	mi
 8014be4:	232b      	movmi	r3, #43	@ 0x2b
 8014be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014bea:	f89a 3000 	ldrb.w	r3, [sl]
 8014bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bf0:	d015      	beq.n	8014c1e <_svfiprintf_r+0xfa>
 8014bf2:	9a07      	ldr	r2, [sp, #28]
 8014bf4:	4654      	mov	r4, sl
 8014bf6:	2000      	movs	r0, #0
 8014bf8:	f04f 0c0a 	mov.w	ip, #10
 8014bfc:	4621      	mov	r1, r4
 8014bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c02:	3b30      	subs	r3, #48	@ 0x30
 8014c04:	2b09      	cmp	r3, #9
 8014c06:	d94b      	bls.n	8014ca0 <_svfiprintf_r+0x17c>
 8014c08:	b1b0      	cbz	r0, 8014c38 <_svfiprintf_r+0x114>
 8014c0a:	9207      	str	r2, [sp, #28]
 8014c0c:	e014      	b.n	8014c38 <_svfiprintf_r+0x114>
 8014c0e:	eba0 0308 	sub.w	r3, r0, r8
 8014c12:	fa09 f303 	lsl.w	r3, r9, r3
 8014c16:	4313      	orrs	r3, r2
 8014c18:	9304      	str	r3, [sp, #16]
 8014c1a:	46a2      	mov	sl, r4
 8014c1c:	e7d2      	b.n	8014bc4 <_svfiprintf_r+0xa0>
 8014c1e:	9b03      	ldr	r3, [sp, #12]
 8014c20:	1d19      	adds	r1, r3, #4
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	9103      	str	r1, [sp, #12]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	bfbb      	ittet	lt
 8014c2a:	425b      	neglt	r3, r3
 8014c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8014c30:	9307      	strge	r3, [sp, #28]
 8014c32:	9307      	strlt	r3, [sp, #28]
 8014c34:	bfb8      	it	lt
 8014c36:	9204      	strlt	r2, [sp, #16]
 8014c38:	7823      	ldrb	r3, [r4, #0]
 8014c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8014c3c:	d10a      	bne.n	8014c54 <_svfiprintf_r+0x130>
 8014c3e:	7863      	ldrb	r3, [r4, #1]
 8014c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c42:	d132      	bne.n	8014caa <_svfiprintf_r+0x186>
 8014c44:	9b03      	ldr	r3, [sp, #12]
 8014c46:	1d1a      	adds	r2, r3, #4
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	9203      	str	r2, [sp, #12]
 8014c4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014c50:	3402      	adds	r4, #2
 8014c52:	9305      	str	r3, [sp, #20]
 8014c54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014d18 <_svfiprintf_r+0x1f4>
 8014c58:	7821      	ldrb	r1, [r4, #0]
 8014c5a:	2203      	movs	r2, #3
 8014c5c:	4650      	mov	r0, sl
 8014c5e:	f7eb fadf 	bl	8000220 <memchr>
 8014c62:	b138      	cbz	r0, 8014c74 <_svfiprintf_r+0x150>
 8014c64:	9b04      	ldr	r3, [sp, #16]
 8014c66:	eba0 000a 	sub.w	r0, r0, sl
 8014c6a:	2240      	movs	r2, #64	@ 0x40
 8014c6c:	4082      	lsls	r2, r0
 8014c6e:	4313      	orrs	r3, r2
 8014c70:	3401      	adds	r4, #1
 8014c72:	9304      	str	r3, [sp, #16]
 8014c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c78:	4824      	ldr	r0, [pc, #144]	@ (8014d0c <_svfiprintf_r+0x1e8>)
 8014c7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c7e:	2206      	movs	r2, #6
 8014c80:	f7eb face 	bl	8000220 <memchr>
 8014c84:	2800      	cmp	r0, #0
 8014c86:	d036      	beq.n	8014cf6 <_svfiprintf_r+0x1d2>
 8014c88:	4b21      	ldr	r3, [pc, #132]	@ (8014d10 <_svfiprintf_r+0x1ec>)
 8014c8a:	bb1b      	cbnz	r3, 8014cd4 <_svfiprintf_r+0x1b0>
 8014c8c:	9b03      	ldr	r3, [sp, #12]
 8014c8e:	3307      	adds	r3, #7
 8014c90:	f023 0307 	bic.w	r3, r3, #7
 8014c94:	3308      	adds	r3, #8
 8014c96:	9303      	str	r3, [sp, #12]
 8014c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c9a:	4433      	add	r3, r6
 8014c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c9e:	e76a      	b.n	8014b76 <_svfiprintf_r+0x52>
 8014ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ca4:	460c      	mov	r4, r1
 8014ca6:	2001      	movs	r0, #1
 8014ca8:	e7a8      	b.n	8014bfc <_svfiprintf_r+0xd8>
 8014caa:	2300      	movs	r3, #0
 8014cac:	3401      	adds	r4, #1
 8014cae:	9305      	str	r3, [sp, #20]
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	f04f 0c0a 	mov.w	ip, #10
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cbc:	3a30      	subs	r2, #48	@ 0x30
 8014cbe:	2a09      	cmp	r2, #9
 8014cc0:	d903      	bls.n	8014cca <_svfiprintf_r+0x1a6>
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d0c6      	beq.n	8014c54 <_svfiprintf_r+0x130>
 8014cc6:	9105      	str	r1, [sp, #20]
 8014cc8:	e7c4      	b.n	8014c54 <_svfiprintf_r+0x130>
 8014cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8014cce:	4604      	mov	r4, r0
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	e7f0      	b.n	8014cb6 <_svfiprintf_r+0x192>
 8014cd4:	ab03      	add	r3, sp, #12
 8014cd6:	9300      	str	r3, [sp, #0]
 8014cd8:	462a      	mov	r2, r5
 8014cda:	4b0e      	ldr	r3, [pc, #56]	@ (8014d14 <_svfiprintf_r+0x1f0>)
 8014cdc:	a904      	add	r1, sp, #16
 8014cde:	4638      	mov	r0, r7
 8014ce0:	f7fc fc2a 	bl	8011538 <_printf_float>
 8014ce4:	1c42      	adds	r2, r0, #1
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	d1d6      	bne.n	8014c98 <_svfiprintf_r+0x174>
 8014cea:	89ab      	ldrh	r3, [r5, #12]
 8014cec:	065b      	lsls	r3, r3, #25
 8014cee:	f53f af2d 	bmi.w	8014b4c <_svfiprintf_r+0x28>
 8014cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014cf4:	e72c      	b.n	8014b50 <_svfiprintf_r+0x2c>
 8014cf6:	ab03      	add	r3, sp, #12
 8014cf8:	9300      	str	r3, [sp, #0]
 8014cfa:	462a      	mov	r2, r5
 8014cfc:	4b05      	ldr	r3, [pc, #20]	@ (8014d14 <_svfiprintf_r+0x1f0>)
 8014cfe:	a904      	add	r1, sp, #16
 8014d00:	4638      	mov	r0, r7
 8014d02:	f7fc feb1 	bl	8011a68 <_printf_i>
 8014d06:	e7ed      	b.n	8014ce4 <_svfiprintf_r+0x1c0>
 8014d08:	08016751 	.word	0x08016751
 8014d0c:	0801675b 	.word	0x0801675b
 8014d10:	08011539 	.word	0x08011539
 8014d14:	08014a6d 	.word	0x08014a6d
 8014d18:	08016757 	.word	0x08016757

08014d1c <__sflush_r>:
 8014d1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d24:	0716      	lsls	r6, r2, #28
 8014d26:	4605      	mov	r5, r0
 8014d28:	460c      	mov	r4, r1
 8014d2a:	d454      	bmi.n	8014dd6 <__sflush_r+0xba>
 8014d2c:	684b      	ldr	r3, [r1, #4]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	dc02      	bgt.n	8014d38 <__sflush_r+0x1c>
 8014d32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	dd48      	ble.n	8014dca <__sflush_r+0xae>
 8014d38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d3a:	2e00      	cmp	r6, #0
 8014d3c:	d045      	beq.n	8014dca <__sflush_r+0xae>
 8014d3e:	2300      	movs	r3, #0
 8014d40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014d44:	682f      	ldr	r7, [r5, #0]
 8014d46:	6a21      	ldr	r1, [r4, #32]
 8014d48:	602b      	str	r3, [r5, #0]
 8014d4a:	d030      	beq.n	8014dae <__sflush_r+0x92>
 8014d4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014d4e:	89a3      	ldrh	r3, [r4, #12]
 8014d50:	0759      	lsls	r1, r3, #29
 8014d52:	d505      	bpl.n	8014d60 <__sflush_r+0x44>
 8014d54:	6863      	ldr	r3, [r4, #4]
 8014d56:	1ad2      	subs	r2, r2, r3
 8014d58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014d5a:	b10b      	cbz	r3, 8014d60 <__sflush_r+0x44>
 8014d5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014d5e:	1ad2      	subs	r2, r2, r3
 8014d60:	2300      	movs	r3, #0
 8014d62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d64:	6a21      	ldr	r1, [r4, #32]
 8014d66:	4628      	mov	r0, r5
 8014d68:	47b0      	blx	r6
 8014d6a:	1c43      	adds	r3, r0, #1
 8014d6c:	89a3      	ldrh	r3, [r4, #12]
 8014d6e:	d106      	bne.n	8014d7e <__sflush_r+0x62>
 8014d70:	6829      	ldr	r1, [r5, #0]
 8014d72:	291d      	cmp	r1, #29
 8014d74:	d82b      	bhi.n	8014dce <__sflush_r+0xb2>
 8014d76:	4a2a      	ldr	r2, [pc, #168]	@ (8014e20 <__sflush_r+0x104>)
 8014d78:	40ca      	lsrs	r2, r1
 8014d7a:	07d6      	lsls	r6, r2, #31
 8014d7c:	d527      	bpl.n	8014dce <__sflush_r+0xb2>
 8014d7e:	2200      	movs	r2, #0
 8014d80:	6062      	str	r2, [r4, #4]
 8014d82:	04d9      	lsls	r1, r3, #19
 8014d84:	6922      	ldr	r2, [r4, #16]
 8014d86:	6022      	str	r2, [r4, #0]
 8014d88:	d504      	bpl.n	8014d94 <__sflush_r+0x78>
 8014d8a:	1c42      	adds	r2, r0, #1
 8014d8c:	d101      	bne.n	8014d92 <__sflush_r+0x76>
 8014d8e:	682b      	ldr	r3, [r5, #0]
 8014d90:	b903      	cbnz	r3, 8014d94 <__sflush_r+0x78>
 8014d92:	6560      	str	r0, [r4, #84]	@ 0x54
 8014d94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d96:	602f      	str	r7, [r5, #0]
 8014d98:	b1b9      	cbz	r1, 8014dca <__sflush_r+0xae>
 8014d9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d9e:	4299      	cmp	r1, r3
 8014da0:	d002      	beq.n	8014da8 <__sflush_r+0x8c>
 8014da2:	4628      	mov	r0, r5
 8014da4:	f7fe fa34 	bl	8013210 <_free_r>
 8014da8:	2300      	movs	r3, #0
 8014daa:	6363      	str	r3, [r4, #52]	@ 0x34
 8014dac:	e00d      	b.n	8014dca <__sflush_r+0xae>
 8014dae:	2301      	movs	r3, #1
 8014db0:	4628      	mov	r0, r5
 8014db2:	47b0      	blx	r6
 8014db4:	4602      	mov	r2, r0
 8014db6:	1c50      	adds	r0, r2, #1
 8014db8:	d1c9      	bne.n	8014d4e <__sflush_r+0x32>
 8014dba:	682b      	ldr	r3, [r5, #0]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d0c6      	beq.n	8014d4e <__sflush_r+0x32>
 8014dc0:	2b1d      	cmp	r3, #29
 8014dc2:	d001      	beq.n	8014dc8 <__sflush_r+0xac>
 8014dc4:	2b16      	cmp	r3, #22
 8014dc6:	d11e      	bne.n	8014e06 <__sflush_r+0xea>
 8014dc8:	602f      	str	r7, [r5, #0]
 8014dca:	2000      	movs	r0, #0
 8014dcc:	e022      	b.n	8014e14 <__sflush_r+0xf8>
 8014dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014dd2:	b21b      	sxth	r3, r3
 8014dd4:	e01b      	b.n	8014e0e <__sflush_r+0xf2>
 8014dd6:	690f      	ldr	r7, [r1, #16]
 8014dd8:	2f00      	cmp	r7, #0
 8014dda:	d0f6      	beq.n	8014dca <__sflush_r+0xae>
 8014ddc:	0793      	lsls	r3, r2, #30
 8014dde:	680e      	ldr	r6, [r1, #0]
 8014de0:	bf08      	it	eq
 8014de2:	694b      	ldreq	r3, [r1, #20]
 8014de4:	600f      	str	r7, [r1, #0]
 8014de6:	bf18      	it	ne
 8014de8:	2300      	movne	r3, #0
 8014dea:	eba6 0807 	sub.w	r8, r6, r7
 8014dee:	608b      	str	r3, [r1, #8]
 8014df0:	f1b8 0f00 	cmp.w	r8, #0
 8014df4:	dde9      	ble.n	8014dca <__sflush_r+0xae>
 8014df6:	6a21      	ldr	r1, [r4, #32]
 8014df8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014dfa:	4643      	mov	r3, r8
 8014dfc:	463a      	mov	r2, r7
 8014dfe:	4628      	mov	r0, r5
 8014e00:	47b0      	blx	r6
 8014e02:	2800      	cmp	r0, #0
 8014e04:	dc08      	bgt.n	8014e18 <__sflush_r+0xfc>
 8014e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e0e:	81a3      	strh	r3, [r4, #12]
 8014e10:	f04f 30ff 	mov.w	r0, #4294967295
 8014e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e18:	4407      	add	r7, r0
 8014e1a:	eba8 0800 	sub.w	r8, r8, r0
 8014e1e:	e7e7      	b.n	8014df0 <__sflush_r+0xd4>
 8014e20:	20400001 	.word	0x20400001

08014e24 <_fflush_r>:
 8014e24:	b538      	push	{r3, r4, r5, lr}
 8014e26:	690b      	ldr	r3, [r1, #16]
 8014e28:	4605      	mov	r5, r0
 8014e2a:	460c      	mov	r4, r1
 8014e2c:	b913      	cbnz	r3, 8014e34 <_fflush_r+0x10>
 8014e2e:	2500      	movs	r5, #0
 8014e30:	4628      	mov	r0, r5
 8014e32:	bd38      	pop	{r3, r4, r5, pc}
 8014e34:	b118      	cbz	r0, 8014e3e <_fflush_r+0x1a>
 8014e36:	6a03      	ldr	r3, [r0, #32]
 8014e38:	b90b      	cbnz	r3, 8014e3e <_fflush_r+0x1a>
 8014e3a:	f7fd f9cd 	bl	80121d8 <__sinit>
 8014e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d0f3      	beq.n	8014e2e <_fflush_r+0xa>
 8014e46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014e48:	07d0      	lsls	r0, r2, #31
 8014e4a:	d404      	bmi.n	8014e56 <_fflush_r+0x32>
 8014e4c:	0599      	lsls	r1, r3, #22
 8014e4e:	d402      	bmi.n	8014e56 <_fflush_r+0x32>
 8014e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e52:	f7fd fb6e 	bl	8012532 <__retarget_lock_acquire_recursive>
 8014e56:	4628      	mov	r0, r5
 8014e58:	4621      	mov	r1, r4
 8014e5a:	f7ff ff5f 	bl	8014d1c <__sflush_r>
 8014e5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e60:	07da      	lsls	r2, r3, #31
 8014e62:	4605      	mov	r5, r0
 8014e64:	d4e4      	bmi.n	8014e30 <_fflush_r+0xc>
 8014e66:	89a3      	ldrh	r3, [r4, #12]
 8014e68:	059b      	lsls	r3, r3, #22
 8014e6a:	d4e1      	bmi.n	8014e30 <_fflush_r+0xc>
 8014e6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e6e:	f7fd fb61 	bl	8012534 <__retarget_lock_release_recursive>
 8014e72:	e7dd      	b.n	8014e30 <_fflush_r+0xc>

08014e74 <memmove>:
 8014e74:	4288      	cmp	r0, r1
 8014e76:	b510      	push	{r4, lr}
 8014e78:	eb01 0402 	add.w	r4, r1, r2
 8014e7c:	d902      	bls.n	8014e84 <memmove+0x10>
 8014e7e:	4284      	cmp	r4, r0
 8014e80:	4623      	mov	r3, r4
 8014e82:	d807      	bhi.n	8014e94 <memmove+0x20>
 8014e84:	1e43      	subs	r3, r0, #1
 8014e86:	42a1      	cmp	r1, r4
 8014e88:	d008      	beq.n	8014e9c <memmove+0x28>
 8014e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014e92:	e7f8      	b.n	8014e86 <memmove+0x12>
 8014e94:	4402      	add	r2, r0
 8014e96:	4601      	mov	r1, r0
 8014e98:	428a      	cmp	r2, r1
 8014e9a:	d100      	bne.n	8014e9e <memmove+0x2a>
 8014e9c:	bd10      	pop	{r4, pc}
 8014e9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ea6:	e7f7      	b.n	8014e98 <memmove+0x24>

08014ea8 <strncmp>:
 8014ea8:	b510      	push	{r4, lr}
 8014eaa:	b16a      	cbz	r2, 8014ec8 <strncmp+0x20>
 8014eac:	3901      	subs	r1, #1
 8014eae:	1884      	adds	r4, r0, r2
 8014eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014eb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d103      	bne.n	8014ec4 <strncmp+0x1c>
 8014ebc:	42a0      	cmp	r0, r4
 8014ebe:	d001      	beq.n	8014ec4 <strncmp+0x1c>
 8014ec0:	2a00      	cmp	r2, #0
 8014ec2:	d1f5      	bne.n	8014eb0 <strncmp+0x8>
 8014ec4:	1ad0      	subs	r0, r2, r3
 8014ec6:	bd10      	pop	{r4, pc}
 8014ec8:	4610      	mov	r0, r2
 8014eca:	e7fc      	b.n	8014ec6 <strncmp+0x1e>

08014ecc <_sbrk_r>:
 8014ecc:	b538      	push	{r3, r4, r5, lr}
 8014ece:	4d06      	ldr	r5, [pc, #24]	@ (8014ee8 <_sbrk_r+0x1c>)
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	4604      	mov	r4, r0
 8014ed4:	4608      	mov	r0, r1
 8014ed6:	602b      	str	r3, [r5, #0]
 8014ed8:	f7ed fd0a 	bl	80028f0 <_sbrk>
 8014edc:	1c43      	adds	r3, r0, #1
 8014ede:	d102      	bne.n	8014ee6 <_sbrk_r+0x1a>
 8014ee0:	682b      	ldr	r3, [r5, #0]
 8014ee2:	b103      	cbz	r3, 8014ee6 <_sbrk_r+0x1a>
 8014ee4:	6023      	str	r3, [r4, #0]
 8014ee6:	bd38      	pop	{r3, r4, r5, pc}
 8014ee8:	200043d8 	.word	0x200043d8
 8014eec:	00000000 	.word	0x00000000

08014ef0 <nan>:
 8014ef0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014ef8 <nan+0x8>
 8014ef4:	4770      	bx	lr
 8014ef6:	bf00      	nop
 8014ef8:	00000000 	.word	0x00000000
 8014efc:	7ff80000 	.word	0x7ff80000

08014f00 <__assert_func>:
 8014f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f02:	4614      	mov	r4, r2
 8014f04:	461a      	mov	r2, r3
 8014f06:	4b09      	ldr	r3, [pc, #36]	@ (8014f2c <__assert_func+0x2c>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	4605      	mov	r5, r0
 8014f0c:	68d8      	ldr	r0, [r3, #12]
 8014f0e:	b14c      	cbz	r4, 8014f24 <__assert_func+0x24>
 8014f10:	4b07      	ldr	r3, [pc, #28]	@ (8014f30 <__assert_func+0x30>)
 8014f12:	9100      	str	r1, [sp, #0]
 8014f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014f18:	4906      	ldr	r1, [pc, #24]	@ (8014f34 <__assert_func+0x34>)
 8014f1a:	462b      	mov	r3, r5
 8014f1c:	f000 fba8 	bl	8015670 <fiprintf>
 8014f20:	f000 fbb8 	bl	8015694 <abort>
 8014f24:	4b04      	ldr	r3, [pc, #16]	@ (8014f38 <__assert_func+0x38>)
 8014f26:	461c      	mov	r4, r3
 8014f28:	e7f3      	b.n	8014f12 <__assert_func+0x12>
 8014f2a:	bf00      	nop
 8014f2c:	2000003c 	.word	0x2000003c
 8014f30:	0801676a 	.word	0x0801676a
 8014f34:	08016777 	.word	0x08016777
 8014f38:	080167a5 	.word	0x080167a5

08014f3c <_calloc_r>:
 8014f3c:	b570      	push	{r4, r5, r6, lr}
 8014f3e:	fba1 5402 	umull	r5, r4, r1, r2
 8014f42:	b934      	cbnz	r4, 8014f52 <_calloc_r+0x16>
 8014f44:	4629      	mov	r1, r5
 8014f46:	f7fe f9d7 	bl	80132f8 <_malloc_r>
 8014f4a:	4606      	mov	r6, r0
 8014f4c:	b928      	cbnz	r0, 8014f5a <_calloc_r+0x1e>
 8014f4e:	4630      	mov	r0, r6
 8014f50:	bd70      	pop	{r4, r5, r6, pc}
 8014f52:	220c      	movs	r2, #12
 8014f54:	6002      	str	r2, [r0, #0]
 8014f56:	2600      	movs	r6, #0
 8014f58:	e7f9      	b.n	8014f4e <_calloc_r+0x12>
 8014f5a:	462a      	mov	r2, r5
 8014f5c:	4621      	mov	r1, r4
 8014f5e:	f7fd fa0c 	bl	801237a <memset>
 8014f62:	e7f4      	b.n	8014f4e <_calloc_r+0x12>

08014f64 <rshift>:
 8014f64:	6903      	ldr	r3, [r0, #16]
 8014f66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014f6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014f72:	f100 0414 	add.w	r4, r0, #20
 8014f76:	dd45      	ble.n	8015004 <rshift+0xa0>
 8014f78:	f011 011f 	ands.w	r1, r1, #31
 8014f7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014f80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014f84:	d10c      	bne.n	8014fa0 <rshift+0x3c>
 8014f86:	f100 0710 	add.w	r7, r0, #16
 8014f8a:	4629      	mov	r1, r5
 8014f8c:	42b1      	cmp	r1, r6
 8014f8e:	d334      	bcc.n	8014ffa <rshift+0x96>
 8014f90:	1a9b      	subs	r3, r3, r2
 8014f92:	009b      	lsls	r3, r3, #2
 8014f94:	1eea      	subs	r2, r5, #3
 8014f96:	4296      	cmp	r6, r2
 8014f98:	bf38      	it	cc
 8014f9a:	2300      	movcc	r3, #0
 8014f9c:	4423      	add	r3, r4
 8014f9e:	e015      	b.n	8014fcc <rshift+0x68>
 8014fa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014fa4:	f1c1 0820 	rsb	r8, r1, #32
 8014fa8:	40cf      	lsrs	r7, r1
 8014faa:	f105 0e04 	add.w	lr, r5, #4
 8014fae:	46a1      	mov	r9, r4
 8014fb0:	4576      	cmp	r6, lr
 8014fb2:	46f4      	mov	ip, lr
 8014fb4:	d815      	bhi.n	8014fe2 <rshift+0x7e>
 8014fb6:	1a9a      	subs	r2, r3, r2
 8014fb8:	0092      	lsls	r2, r2, #2
 8014fba:	3a04      	subs	r2, #4
 8014fbc:	3501      	adds	r5, #1
 8014fbe:	42ae      	cmp	r6, r5
 8014fc0:	bf38      	it	cc
 8014fc2:	2200      	movcc	r2, #0
 8014fc4:	18a3      	adds	r3, r4, r2
 8014fc6:	50a7      	str	r7, [r4, r2]
 8014fc8:	b107      	cbz	r7, 8014fcc <rshift+0x68>
 8014fca:	3304      	adds	r3, #4
 8014fcc:	1b1a      	subs	r2, r3, r4
 8014fce:	42a3      	cmp	r3, r4
 8014fd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014fd4:	bf08      	it	eq
 8014fd6:	2300      	moveq	r3, #0
 8014fd8:	6102      	str	r2, [r0, #16]
 8014fda:	bf08      	it	eq
 8014fdc:	6143      	streq	r3, [r0, #20]
 8014fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fe2:	f8dc c000 	ldr.w	ip, [ip]
 8014fe6:	fa0c fc08 	lsl.w	ip, ip, r8
 8014fea:	ea4c 0707 	orr.w	r7, ip, r7
 8014fee:	f849 7b04 	str.w	r7, [r9], #4
 8014ff2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014ff6:	40cf      	lsrs	r7, r1
 8014ff8:	e7da      	b.n	8014fb0 <rshift+0x4c>
 8014ffa:	f851 cb04 	ldr.w	ip, [r1], #4
 8014ffe:	f847 cf04 	str.w	ip, [r7, #4]!
 8015002:	e7c3      	b.n	8014f8c <rshift+0x28>
 8015004:	4623      	mov	r3, r4
 8015006:	e7e1      	b.n	8014fcc <rshift+0x68>

08015008 <__hexdig_fun>:
 8015008:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801500c:	2b09      	cmp	r3, #9
 801500e:	d802      	bhi.n	8015016 <__hexdig_fun+0xe>
 8015010:	3820      	subs	r0, #32
 8015012:	b2c0      	uxtb	r0, r0
 8015014:	4770      	bx	lr
 8015016:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801501a:	2b05      	cmp	r3, #5
 801501c:	d801      	bhi.n	8015022 <__hexdig_fun+0x1a>
 801501e:	3847      	subs	r0, #71	@ 0x47
 8015020:	e7f7      	b.n	8015012 <__hexdig_fun+0xa>
 8015022:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015026:	2b05      	cmp	r3, #5
 8015028:	d801      	bhi.n	801502e <__hexdig_fun+0x26>
 801502a:	3827      	subs	r0, #39	@ 0x27
 801502c:	e7f1      	b.n	8015012 <__hexdig_fun+0xa>
 801502e:	2000      	movs	r0, #0
 8015030:	4770      	bx	lr
	...

08015034 <__gethex>:
 8015034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015038:	b085      	sub	sp, #20
 801503a:	468a      	mov	sl, r1
 801503c:	9302      	str	r3, [sp, #8]
 801503e:	680b      	ldr	r3, [r1, #0]
 8015040:	9001      	str	r0, [sp, #4]
 8015042:	4690      	mov	r8, r2
 8015044:	1c9c      	adds	r4, r3, #2
 8015046:	46a1      	mov	r9, r4
 8015048:	f814 0b01 	ldrb.w	r0, [r4], #1
 801504c:	2830      	cmp	r0, #48	@ 0x30
 801504e:	d0fa      	beq.n	8015046 <__gethex+0x12>
 8015050:	eba9 0303 	sub.w	r3, r9, r3
 8015054:	f1a3 0b02 	sub.w	fp, r3, #2
 8015058:	f7ff ffd6 	bl	8015008 <__hexdig_fun>
 801505c:	4605      	mov	r5, r0
 801505e:	2800      	cmp	r0, #0
 8015060:	d168      	bne.n	8015134 <__gethex+0x100>
 8015062:	49a0      	ldr	r1, [pc, #640]	@ (80152e4 <__gethex+0x2b0>)
 8015064:	2201      	movs	r2, #1
 8015066:	4648      	mov	r0, r9
 8015068:	f7ff ff1e 	bl	8014ea8 <strncmp>
 801506c:	4607      	mov	r7, r0
 801506e:	2800      	cmp	r0, #0
 8015070:	d167      	bne.n	8015142 <__gethex+0x10e>
 8015072:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015076:	4626      	mov	r6, r4
 8015078:	f7ff ffc6 	bl	8015008 <__hexdig_fun>
 801507c:	2800      	cmp	r0, #0
 801507e:	d062      	beq.n	8015146 <__gethex+0x112>
 8015080:	4623      	mov	r3, r4
 8015082:	7818      	ldrb	r0, [r3, #0]
 8015084:	2830      	cmp	r0, #48	@ 0x30
 8015086:	4699      	mov	r9, r3
 8015088:	f103 0301 	add.w	r3, r3, #1
 801508c:	d0f9      	beq.n	8015082 <__gethex+0x4e>
 801508e:	f7ff ffbb 	bl	8015008 <__hexdig_fun>
 8015092:	fab0 f580 	clz	r5, r0
 8015096:	096d      	lsrs	r5, r5, #5
 8015098:	f04f 0b01 	mov.w	fp, #1
 801509c:	464a      	mov	r2, r9
 801509e:	4616      	mov	r6, r2
 80150a0:	3201      	adds	r2, #1
 80150a2:	7830      	ldrb	r0, [r6, #0]
 80150a4:	f7ff ffb0 	bl	8015008 <__hexdig_fun>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	d1f8      	bne.n	801509e <__gethex+0x6a>
 80150ac:	498d      	ldr	r1, [pc, #564]	@ (80152e4 <__gethex+0x2b0>)
 80150ae:	2201      	movs	r2, #1
 80150b0:	4630      	mov	r0, r6
 80150b2:	f7ff fef9 	bl	8014ea8 <strncmp>
 80150b6:	2800      	cmp	r0, #0
 80150b8:	d13f      	bne.n	801513a <__gethex+0x106>
 80150ba:	b944      	cbnz	r4, 80150ce <__gethex+0x9a>
 80150bc:	1c74      	adds	r4, r6, #1
 80150be:	4622      	mov	r2, r4
 80150c0:	4616      	mov	r6, r2
 80150c2:	3201      	adds	r2, #1
 80150c4:	7830      	ldrb	r0, [r6, #0]
 80150c6:	f7ff ff9f 	bl	8015008 <__hexdig_fun>
 80150ca:	2800      	cmp	r0, #0
 80150cc:	d1f8      	bne.n	80150c0 <__gethex+0x8c>
 80150ce:	1ba4      	subs	r4, r4, r6
 80150d0:	00a7      	lsls	r7, r4, #2
 80150d2:	7833      	ldrb	r3, [r6, #0]
 80150d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80150d8:	2b50      	cmp	r3, #80	@ 0x50
 80150da:	d13e      	bne.n	801515a <__gethex+0x126>
 80150dc:	7873      	ldrb	r3, [r6, #1]
 80150de:	2b2b      	cmp	r3, #43	@ 0x2b
 80150e0:	d033      	beq.n	801514a <__gethex+0x116>
 80150e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80150e4:	d034      	beq.n	8015150 <__gethex+0x11c>
 80150e6:	1c71      	adds	r1, r6, #1
 80150e8:	2400      	movs	r4, #0
 80150ea:	7808      	ldrb	r0, [r1, #0]
 80150ec:	f7ff ff8c 	bl	8015008 <__hexdig_fun>
 80150f0:	1e43      	subs	r3, r0, #1
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	2b18      	cmp	r3, #24
 80150f6:	d830      	bhi.n	801515a <__gethex+0x126>
 80150f8:	f1a0 0210 	sub.w	r2, r0, #16
 80150fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015100:	f7ff ff82 	bl	8015008 <__hexdig_fun>
 8015104:	f100 3cff 	add.w	ip, r0, #4294967295
 8015108:	fa5f fc8c 	uxtb.w	ip, ip
 801510c:	f1bc 0f18 	cmp.w	ip, #24
 8015110:	f04f 030a 	mov.w	r3, #10
 8015114:	d91e      	bls.n	8015154 <__gethex+0x120>
 8015116:	b104      	cbz	r4, 801511a <__gethex+0xe6>
 8015118:	4252      	negs	r2, r2
 801511a:	4417      	add	r7, r2
 801511c:	f8ca 1000 	str.w	r1, [sl]
 8015120:	b1ed      	cbz	r5, 801515e <__gethex+0x12a>
 8015122:	f1bb 0f00 	cmp.w	fp, #0
 8015126:	bf0c      	ite	eq
 8015128:	2506      	moveq	r5, #6
 801512a:	2500      	movne	r5, #0
 801512c:	4628      	mov	r0, r5
 801512e:	b005      	add	sp, #20
 8015130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015134:	2500      	movs	r5, #0
 8015136:	462c      	mov	r4, r5
 8015138:	e7b0      	b.n	801509c <__gethex+0x68>
 801513a:	2c00      	cmp	r4, #0
 801513c:	d1c7      	bne.n	80150ce <__gethex+0x9a>
 801513e:	4627      	mov	r7, r4
 8015140:	e7c7      	b.n	80150d2 <__gethex+0x9e>
 8015142:	464e      	mov	r6, r9
 8015144:	462f      	mov	r7, r5
 8015146:	2501      	movs	r5, #1
 8015148:	e7c3      	b.n	80150d2 <__gethex+0x9e>
 801514a:	2400      	movs	r4, #0
 801514c:	1cb1      	adds	r1, r6, #2
 801514e:	e7cc      	b.n	80150ea <__gethex+0xb6>
 8015150:	2401      	movs	r4, #1
 8015152:	e7fb      	b.n	801514c <__gethex+0x118>
 8015154:	fb03 0002 	mla	r0, r3, r2, r0
 8015158:	e7ce      	b.n	80150f8 <__gethex+0xc4>
 801515a:	4631      	mov	r1, r6
 801515c:	e7de      	b.n	801511c <__gethex+0xe8>
 801515e:	eba6 0309 	sub.w	r3, r6, r9
 8015162:	3b01      	subs	r3, #1
 8015164:	4629      	mov	r1, r5
 8015166:	2b07      	cmp	r3, #7
 8015168:	dc0a      	bgt.n	8015180 <__gethex+0x14c>
 801516a:	9801      	ldr	r0, [sp, #4]
 801516c:	f7fe f950 	bl	8013410 <_Balloc>
 8015170:	4604      	mov	r4, r0
 8015172:	b940      	cbnz	r0, 8015186 <__gethex+0x152>
 8015174:	4b5c      	ldr	r3, [pc, #368]	@ (80152e8 <__gethex+0x2b4>)
 8015176:	4602      	mov	r2, r0
 8015178:	21e4      	movs	r1, #228	@ 0xe4
 801517a:	485c      	ldr	r0, [pc, #368]	@ (80152ec <__gethex+0x2b8>)
 801517c:	f7ff fec0 	bl	8014f00 <__assert_func>
 8015180:	3101      	adds	r1, #1
 8015182:	105b      	asrs	r3, r3, #1
 8015184:	e7ef      	b.n	8015166 <__gethex+0x132>
 8015186:	f100 0a14 	add.w	sl, r0, #20
 801518a:	2300      	movs	r3, #0
 801518c:	4655      	mov	r5, sl
 801518e:	469b      	mov	fp, r3
 8015190:	45b1      	cmp	r9, r6
 8015192:	d337      	bcc.n	8015204 <__gethex+0x1d0>
 8015194:	f845 bb04 	str.w	fp, [r5], #4
 8015198:	eba5 050a 	sub.w	r5, r5, sl
 801519c:	10ad      	asrs	r5, r5, #2
 801519e:	6125      	str	r5, [r4, #16]
 80151a0:	4658      	mov	r0, fp
 80151a2:	f7fe fa27 	bl	80135f4 <__hi0bits>
 80151a6:	016d      	lsls	r5, r5, #5
 80151a8:	f8d8 6000 	ldr.w	r6, [r8]
 80151ac:	1a2d      	subs	r5, r5, r0
 80151ae:	42b5      	cmp	r5, r6
 80151b0:	dd54      	ble.n	801525c <__gethex+0x228>
 80151b2:	1bad      	subs	r5, r5, r6
 80151b4:	4629      	mov	r1, r5
 80151b6:	4620      	mov	r0, r4
 80151b8:	f7fe fdb3 	bl	8013d22 <__any_on>
 80151bc:	4681      	mov	r9, r0
 80151be:	b178      	cbz	r0, 80151e0 <__gethex+0x1ac>
 80151c0:	1e6b      	subs	r3, r5, #1
 80151c2:	1159      	asrs	r1, r3, #5
 80151c4:	f003 021f 	and.w	r2, r3, #31
 80151c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80151cc:	f04f 0901 	mov.w	r9, #1
 80151d0:	fa09 f202 	lsl.w	r2, r9, r2
 80151d4:	420a      	tst	r2, r1
 80151d6:	d003      	beq.n	80151e0 <__gethex+0x1ac>
 80151d8:	454b      	cmp	r3, r9
 80151da:	dc36      	bgt.n	801524a <__gethex+0x216>
 80151dc:	f04f 0902 	mov.w	r9, #2
 80151e0:	4629      	mov	r1, r5
 80151e2:	4620      	mov	r0, r4
 80151e4:	f7ff febe 	bl	8014f64 <rshift>
 80151e8:	442f      	add	r7, r5
 80151ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80151ee:	42bb      	cmp	r3, r7
 80151f0:	da42      	bge.n	8015278 <__gethex+0x244>
 80151f2:	9801      	ldr	r0, [sp, #4]
 80151f4:	4621      	mov	r1, r4
 80151f6:	f7fe f94b 	bl	8013490 <_Bfree>
 80151fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80151fc:	2300      	movs	r3, #0
 80151fe:	6013      	str	r3, [r2, #0]
 8015200:	25a3      	movs	r5, #163	@ 0xa3
 8015202:	e793      	b.n	801512c <__gethex+0xf8>
 8015204:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015208:	2a2e      	cmp	r2, #46	@ 0x2e
 801520a:	d012      	beq.n	8015232 <__gethex+0x1fe>
 801520c:	2b20      	cmp	r3, #32
 801520e:	d104      	bne.n	801521a <__gethex+0x1e6>
 8015210:	f845 bb04 	str.w	fp, [r5], #4
 8015214:	f04f 0b00 	mov.w	fp, #0
 8015218:	465b      	mov	r3, fp
 801521a:	7830      	ldrb	r0, [r6, #0]
 801521c:	9303      	str	r3, [sp, #12]
 801521e:	f7ff fef3 	bl	8015008 <__hexdig_fun>
 8015222:	9b03      	ldr	r3, [sp, #12]
 8015224:	f000 000f 	and.w	r0, r0, #15
 8015228:	4098      	lsls	r0, r3
 801522a:	ea4b 0b00 	orr.w	fp, fp, r0
 801522e:	3304      	adds	r3, #4
 8015230:	e7ae      	b.n	8015190 <__gethex+0x15c>
 8015232:	45b1      	cmp	r9, r6
 8015234:	d8ea      	bhi.n	801520c <__gethex+0x1d8>
 8015236:	492b      	ldr	r1, [pc, #172]	@ (80152e4 <__gethex+0x2b0>)
 8015238:	9303      	str	r3, [sp, #12]
 801523a:	2201      	movs	r2, #1
 801523c:	4630      	mov	r0, r6
 801523e:	f7ff fe33 	bl	8014ea8 <strncmp>
 8015242:	9b03      	ldr	r3, [sp, #12]
 8015244:	2800      	cmp	r0, #0
 8015246:	d1e1      	bne.n	801520c <__gethex+0x1d8>
 8015248:	e7a2      	b.n	8015190 <__gethex+0x15c>
 801524a:	1ea9      	subs	r1, r5, #2
 801524c:	4620      	mov	r0, r4
 801524e:	f7fe fd68 	bl	8013d22 <__any_on>
 8015252:	2800      	cmp	r0, #0
 8015254:	d0c2      	beq.n	80151dc <__gethex+0x1a8>
 8015256:	f04f 0903 	mov.w	r9, #3
 801525a:	e7c1      	b.n	80151e0 <__gethex+0x1ac>
 801525c:	da09      	bge.n	8015272 <__gethex+0x23e>
 801525e:	1b75      	subs	r5, r6, r5
 8015260:	4621      	mov	r1, r4
 8015262:	9801      	ldr	r0, [sp, #4]
 8015264:	462a      	mov	r2, r5
 8015266:	f7fe fb23 	bl	80138b0 <__lshift>
 801526a:	1b7f      	subs	r7, r7, r5
 801526c:	4604      	mov	r4, r0
 801526e:	f100 0a14 	add.w	sl, r0, #20
 8015272:	f04f 0900 	mov.w	r9, #0
 8015276:	e7b8      	b.n	80151ea <__gethex+0x1b6>
 8015278:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801527c:	42bd      	cmp	r5, r7
 801527e:	dd6f      	ble.n	8015360 <__gethex+0x32c>
 8015280:	1bed      	subs	r5, r5, r7
 8015282:	42ae      	cmp	r6, r5
 8015284:	dc34      	bgt.n	80152f0 <__gethex+0x2bc>
 8015286:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801528a:	2b02      	cmp	r3, #2
 801528c:	d022      	beq.n	80152d4 <__gethex+0x2a0>
 801528e:	2b03      	cmp	r3, #3
 8015290:	d024      	beq.n	80152dc <__gethex+0x2a8>
 8015292:	2b01      	cmp	r3, #1
 8015294:	d115      	bne.n	80152c2 <__gethex+0x28e>
 8015296:	42ae      	cmp	r6, r5
 8015298:	d113      	bne.n	80152c2 <__gethex+0x28e>
 801529a:	2e01      	cmp	r6, #1
 801529c:	d10b      	bne.n	80152b6 <__gethex+0x282>
 801529e:	9a02      	ldr	r2, [sp, #8]
 80152a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80152a4:	6013      	str	r3, [r2, #0]
 80152a6:	2301      	movs	r3, #1
 80152a8:	6123      	str	r3, [r4, #16]
 80152aa:	f8ca 3000 	str.w	r3, [sl]
 80152ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152b0:	2562      	movs	r5, #98	@ 0x62
 80152b2:	601c      	str	r4, [r3, #0]
 80152b4:	e73a      	b.n	801512c <__gethex+0xf8>
 80152b6:	1e71      	subs	r1, r6, #1
 80152b8:	4620      	mov	r0, r4
 80152ba:	f7fe fd32 	bl	8013d22 <__any_on>
 80152be:	2800      	cmp	r0, #0
 80152c0:	d1ed      	bne.n	801529e <__gethex+0x26a>
 80152c2:	9801      	ldr	r0, [sp, #4]
 80152c4:	4621      	mov	r1, r4
 80152c6:	f7fe f8e3 	bl	8013490 <_Bfree>
 80152ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80152cc:	2300      	movs	r3, #0
 80152ce:	6013      	str	r3, [r2, #0]
 80152d0:	2550      	movs	r5, #80	@ 0x50
 80152d2:	e72b      	b.n	801512c <__gethex+0xf8>
 80152d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d1f3      	bne.n	80152c2 <__gethex+0x28e>
 80152da:	e7e0      	b.n	801529e <__gethex+0x26a>
 80152dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d1dd      	bne.n	801529e <__gethex+0x26a>
 80152e2:	e7ee      	b.n	80152c2 <__gethex+0x28e>
 80152e4:	0801674f 	.word	0x0801674f
 80152e8:	080166e5 	.word	0x080166e5
 80152ec:	080167a6 	.word	0x080167a6
 80152f0:	1e6f      	subs	r7, r5, #1
 80152f2:	f1b9 0f00 	cmp.w	r9, #0
 80152f6:	d130      	bne.n	801535a <__gethex+0x326>
 80152f8:	b127      	cbz	r7, 8015304 <__gethex+0x2d0>
 80152fa:	4639      	mov	r1, r7
 80152fc:	4620      	mov	r0, r4
 80152fe:	f7fe fd10 	bl	8013d22 <__any_on>
 8015302:	4681      	mov	r9, r0
 8015304:	117a      	asrs	r2, r7, #5
 8015306:	2301      	movs	r3, #1
 8015308:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801530c:	f007 071f 	and.w	r7, r7, #31
 8015310:	40bb      	lsls	r3, r7
 8015312:	4213      	tst	r3, r2
 8015314:	4629      	mov	r1, r5
 8015316:	4620      	mov	r0, r4
 8015318:	bf18      	it	ne
 801531a:	f049 0902 	orrne.w	r9, r9, #2
 801531e:	f7ff fe21 	bl	8014f64 <rshift>
 8015322:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015326:	1b76      	subs	r6, r6, r5
 8015328:	2502      	movs	r5, #2
 801532a:	f1b9 0f00 	cmp.w	r9, #0
 801532e:	d047      	beq.n	80153c0 <__gethex+0x38c>
 8015330:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015334:	2b02      	cmp	r3, #2
 8015336:	d015      	beq.n	8015364 <__gethex+0x330>
 8015338:	2b03      	cmp	r3, #3
 801533a:	d017      	beq.n	801536c <__gethex+0x338>
 801533c:	2b01      	cmp	r3, #1
 801533e:	d109      	bne.n	8015354 <__gethex+0x320>
 8015340:	f019 0f02 	tst.w	r9, #2
 8015344:	d006      	beq.n	8015354 <__gethex+0x320>
 8015346:	f8da 3000 	ldr.w	r3, [sl]
 801534a:	ea49 0903 	orr.w	r9, r9, r3
 801534e:	f019 0f01 	tst.w	r9, #1
 8015352:	d10e      	bne.n	8015372 <__gethex+0x33e>
 8015354:	f045 0510 	orr.w	r5, r5, #16
 8015358:	e032      	b.n	80153c0 <__gethex+0x38c>
 801535a:	f04f 0901 	mov.w	r9, #1
 801535e:	e7d1      	b.n	8015304 <__gethex+0x2d0>
 8015360:	2501      	movs	r5, #1
 8015362:	e7e2      	b.n	801532a <__gethex+0x2f6>
 8015364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015366:	f1c3 0301 	rsb	r3, r3, #1
 801536a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801536c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801536e:	2b00      	cmp	r3, #0
 8015370:	d0f0      	beq.n	8015354 <__gethex+0x320>
 8015372:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015376:	f104 0314 	add.w	r3, r4, #20
 801537a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801537e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015382:	f04f 0c00 	mov.w	ip, #0
 8015386:	4618      	mov	r0, r3
 8015388:	f853 2b04 	ldr.w	r2, [r3], #4
 801538c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015390:	d01b      	beq.n	80153ca <__gethex+0x396>
 8015392:	3201      	adds	r2, #1
 8015394:	6002      	str	r2, [r0, #0]
 8015396:	2d02      	cmp	r5, #2
 8015398:	f104 0314 	add.w	r3, r4, #20
 801539c:	d13c      	bne.n	8015418 <__gethex+0x3e4>
 801539e:	f8d8 2000 	ldr.w	r2, [r8]
 80153a2:	3a01      	subs	r2, #1
 80153a4:	42b2      	cmp	r2, r6
 80153a6:	d109      	bne.n	80153bc <__gethex+0x388>
 80153a8:	1171      	asrs	r1, r6, #5
 80153aa:	2201      	movs	r2, #1
 80153ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80153b0:	f006 061f 	and.w	r6, r6, #31
 80153b4:	fa02 f606 	lsl.w	r6, r2, r6
 80153b8:	421e      	tst	r6, r3
 80153ba:	d13a      	bne.n	8015432 <__gethex+0x3fe>
 80153bc:	f045 0520 	orr.w	r5, r5, #32
 80153c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153c2:	601c      	str	r4, [r3, #0]
 80153c4:	9b02      	ldr	r3, [sp, #8]
 80153c6:	601f      	str	r7, [r3, #0]
 80153c8:	e6b0      	b.n	801512c <__gethex+0xf8>
 80153ca:	4299      	cmp	r1, r3
 80153cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80153d0:	d8d9      	bhi.n	8015386 <__gethex+0x352>
 80153d2:	68a3      	ldr	r3, [r4, #8]
 80153d4:	459b      	cmp	fp, r3
 80153d6:	db17      	blt.n	8015408 <__gethex+0x3d4>
 80153d8:	6861      	ldr	r1, [r4, #4]
 80153da:	9801      	ldr	r0, [sp, #4]
 80153dc:	3101      	adds	r1, #1
 80153de:	f7fe f817 	bl	8013410 <_Balloc>
 80153e2:	4681      	mov	r9, r0
 80153e4:	b918      	cbnz	r0, 80153ee <__gethex+0x3ba>
 80153e6:	4b1a      	ldr	r3, [pc, #104]	@ (8015450 <__gethex+0x41c>)
 80153e8:	4602      	mov	r2, r0
 80153ea:	2184      	movs	r1, #132	@ 0x84
 80153ec:	e6c5      	b.n	801517a <__gethex+0x146>
 80153ee:	6922      	ldr	r2, [r4, #16]
 80153f0:	3202      	adds	r2, #2
 80153f2:	f104 010c 	add.w	r1, r4, #12
 80153f6:	0092      	lsls	r2, r2, #2
 80153f8:	300c      	adds	r0, #12
 80153fa:	f7fd f89c 	bl	8012536 <memcpy>
 80153fe:	4621      	mov	r1, r4
 8015400:	9801      	ldr	r0, [sp, #4]
 8015402:	f7fe f845 	bl	8013490 <_Bfree>
 8015406:	464c      	mov	r4, r9
 8015408:	6923      	ldr	r3, [r4, #16]
 801540a:	1c5a      	adds	r2, r3, #1
 801540c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015410:	6122      	str	r2, [r4, #16]
 8015412:	2201      	movs	r2, #1
 8015414:	615a      	str	r2, [r3, #20]
 8015416:	e7be      	b.n	8015396 <__gethex+0x362>
 8015418:	6922      	ldr	r2, [r4, #16]
 801541a:	455a      	cmp	r2, fp
 801541c:	dd0b      	ble.n	8015436 <__gethex+0x402>
 801541e:	2101      	movs	r1, #1
 8015420:	4620      	mov	r0, r4
 8015422:	f7ff fd9f 	bl	8014f64 <rshift>
 8015426:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801542a:	3701      	adds	r7, #1
 801542c:	42bb      	cmp	r3, r7
 801542e:	f6ff aee0 	blt.w	80151f2 <__gethex+0x1be>
 8015432:	2501      	movs	r5, #1
 8015434:	e7c2      	b.n	80153bc <__gethex+0x388>
 8015436:	f016 061f 	ands.w	r6, r6, #31
 801543a:	d0fa      	beq.n	8015432 <__gethex+0x3fe>
 801543c:	4453      	add	r3, sl
 801543e:	f1c6 0620 	rsb	r6, r6, #32
 8015442:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015446:	f7fe f8d5 	bl	80135f4 <__hi0bits>
 801544a:	42b0      	cmp	r0, r6
 801544c:	dbe7      	blt.n	801541e <__gethex+0x3ea>
 801544e:	e7f0      	b.n	8015432 <__gethex+0x3fe>
 8015450:	080166e5 	.word	0x080166e5

08015454 <L_shift>:
 8015454:	f1c2 0208 	rsb	r2, r2, #8
 8015458:	0092      	lsls	r2, r2, #2
 801545a:	b570      	push	{r4, r5, r6, lr}
 801545c:	f1c2 0620 	rsb	r6, r2, #32
 8015460:	6843      	ldr	r3, [r0, #4]
 8015462:	6804      	ldr	r4, [r0, #0]
 8015464:	fa03 f506 	lsl.w	r5, r3, r6
 8015468:	432c      	orrs	r4, r5
 801546a:	40d3      	lsrs	r3, r2
 801546c:	6004      	str	r4, [r0, #0]
 801546e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015472:	4288      	cmp	r0, r1
 8015474:	d3f4      	bcc.n	8015460 <L_shift+0xc>
 8015476:	bd70      	pop	{r4, r5, r6, pc}

08015478 <__match>:
 8015478:	b530      	push	{r4, r5, lr}
 801547a:	6803      	ldr	r3, [r0, #0]
 801547c:	3301      	adds	r3, #1
 801547e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015482:	b914      	cbnz	r4, 801548a <__match+0x12>
 8015484:	6003      	str	r3, [r0, #0]
 8015486:	2001      	movs	r0, #1
 8015488:	bd30      	pop	{r4, r5, pc}
 801548a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801548e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015492:	2d19      	cmp	r5, #25
 8015494:	bf98      	it	ls
 8015496:	3220      	addls	r2, #32
 8015498:	42a2      	cmp	r2, r4
 801549a:	d0f0      	beq.n	801547e <__match+0x6>
 801549c:	2000      	movs	r0, #0
 801549e:	e7f3      	b.n	8015488 <__match+0x10>

080154a0 <__hexnan>:
 80154a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154a4:	680b      	ldr	r3, [r1, #0]
 80154a6:	6801      	ldr	r1, [r0, #0]
 80154a8:	115e      	asrs	r6, r3, #5
 80154aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80154ae:	f013 031f 	ands.w	r3, r3, #31
 80154b2:	b087      	sub	sp, #28
 80154b4:	bf18      	it	ne
 80154b6:	3604      	addne	r6, #4
 80154b8:	2500      	movs	r5, #0
 80154ba:	1f37      	subs	r7, r6, #4
 80154bc:	4682      	mov	sl, r0
 80154be:	4690      	mov	r8, r2
 80154c0:	9301      	str	r3, [sp, #4]
 80154c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80154c6:	46b9      	mov	r9, r7
 80154c8:	463c      	mov	r4, r7
 80154ca:	9502      	str	r5, [sp, #8]
 80154cc:	46ab      	mov	fp, r5
 80154ce:	784a      	ldrb	r2, [r1, #1]
 80154d0:	1c4b      	adds	r3, r1, #1
 80154d2:	9303      	str	r3, [sp, #12]
 80154d4:	b342      	cbz	r2, 8015528 <__hexnan+0x88>
 80154d6:	4610      	mov	r0, r2
 80154d8:	9105      	str	r1, [sp, #20]
 80154da:	9204      	str	r2, [sp, #16]
 80154dc:	f7ff fd94 	bl	8015008 <__hexdig_fun>
 80154e0:	2800      	cmp	r0, #0
 80154e2:	d151      	bne.n	8015588 <__hexnan+0xe8>
 80154e4:	9a04      	ldr	r2, [sp, #16]
 80154e6:	9905      	ldr	r1, [sp, #20]
 80154e8:	2a20      	cmp	r2, #32
 80154ea:	d818      	bhi.n	801551e <__hexnan+0x7e>
 80154ec:	9b02      	ldr	r3, [sp, #8]
 80154ee:	459b      	cmp	fp, r3
 80154f0:	dd13      	ble.n	801551a <__hexnan+0x7a>
 80154f2:	454c      	cmp	r4, r9
 80154f4:	d206      	bcs.n	8015504 <__hexnan+0x64>
 80154f6:	2d07      	cmp	r5, #7
 80154f8:	dc04      	bgt.n	8015504 <__hexnan+0x64>
 80154fa:	462a      	mov	r2, r5
 80154fc:	4649      	mov	r1, r9
 80154fe:	4620      	mov	r0, r4
 8015500:	f7ff ffa8 	bl	8015454 <L_shift>
 8015504:	4544      	cmp	r4, r8
 8015506:	d952      	bls.n	80155ae <__hexnan+0x10e>
 8015508:	2300      	movs	r3, #0
 801550a:	f1a4 0904 	sub.w	r9, r4, #4
 801550e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015512:	f8cd b008 	str.w	fp, [sp, #8]
 8015516:	464c      	mov	r4, r9
 8015518:	461d      	mov	r5, r3
 801551a:	9903      	ldr	r1, [sp, #12]
 801551c:	e7d7      	b.n	80154ce <__hexnan+0x2e>
 801551e:	2a29      	cmp	r2, #41	@ 0x29
 8015520:	d157      	bne.n	80155d2 <__hexnan+0x132>
 8015522:	3102      	adds	r1, #2
 8015524:	f8ca 1000 	str.w	r1, [sl]
 8015528:	f1bb 0f00 	cmp.w	fp, #0
 801552c:	d051      	beq.n	80155d2 <__hexnan+0x132>
 801552e:	454c      	cmp	r4, r9
 8015530:	d206      	bcs.n	8015540 <__hexnan+0xa0>
 8015532:	2d07      	cmp	r5, #7
 8015534:	dc04      	bgt.n	8015540 <__hexnan+0xa0>
 8015536:	462a      	mov	r2, r5
 8015538:	4649      	mov	r1, r9
 801553a:	4620      	mov	r0, r4
 801553c:	f7ff ff8a 	bl	8015454 <L_shift>
 8015540:	4544      	cmp	r4, r8
 8015542:	d936      	bls.n	80155b2 <__hexnan+0x112>
 8015544:	f1a8 0204 	sub.w	r2, r8, #4
 8015548:	4623      	mov	r3, r4
 801554a:	f853 1b04 	ldr.w	r1, [r3], #4
 801554e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015552:	429f      	cmp	r7, r3
 8015554:	d2f9      	bcs.n	801554a <__hexnan+0xaa>
 8015556:	1b3b      	subs	r3, r7, r4
 8015558:	f023 0303 	bic.w	r3, r3, #3
 801555c:	3304      	adds	r3, #4
 801555e:	3401      	adds	r4, #1
 8015560:	3e03      	subs	r6, #3
 8015562:	42b4      	cmp	r4, r6
 8015564:	bf88      	it	hi
 8015566:	2304      	movhi	r3, #4
 8015568:	4443      	add	r3, r8
 801556a:	2200      	movs	r2, #0
 801556c:	f843 2b04 	str.w	r2, [r3], #4
 8015570:	429f      	cmp	r7, r3
 8015572:	d2fb      	bcs.n	801556c <__hexnan+0xcc>
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	b91b      	cbnz	r3, 8015580 <__hexnan+0xe0>
 8015578:	4547      	cmp	r7, r8
 801557a:	d128      	bne.n	80155ce <__hexnan+0x12e>
 801557c:	2301      	movs	r3, #1
 801557e:	603b      	str	r3, [r7, #0]
 8015580:	2005      	movs	r0, #5
 8015582:	b007      	add	sp, #28
 8015584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015588:	3501      	adds	r5, #1
 801558a:	2d08      	cmp	r5, #8
 801558c:	f10b 0b01 	add.w	fp, fp, #1
 8015590:	dd06      	ble.n	80155a0 <__hexnan+0x100>
 8015592:	4544      	cmp	r4, r8
 8015594:	d9c1      	bls.n	801551a <__hexnan+0x7a>
 8015596:	2300      	movs	r3, #0
 8015598:	f844 3c04 	str.w	r3, [r4, #-4]
 801559c:	2501      	movs	r5, #1
 801559e:	3c04      	subs	r4, #4
 80155a0:	6822      	ldr	r2, [r4, #0]
 80155a2:	f000 000f 	and.w	r0, r0, #15
 80155a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80155aa:	6020      	str	r0, [r4, #0]
 80155ac:	e7b5      	b.n	801551a <__hexnan+0x7a>
 80155ae:	2508      	movs	r5, #8
 80155b0:	e7b3      	b.n	801551a <__hexnan+0x7a>
 80155b2:	9b01      	ldr	r3, [sp, #4]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d0dd      	beq.n	8015574 <__hexnan+0xd4>
 80155b8:	f1c3 0320 	rsb	r3, r3, #32
 80155bc:	f04f 32ff 	mov.w	r2, #4294967295
 80155c0:	40da      	lsrs	r2, r3
 80155c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80155c6:	4013      	ands	r3, r2
 80155c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80155cc:	e7d2      	b.n	8015574 <__hexnan+0xd4>
 80155ce:	3f04      	subs	r7, #4
 80155d0:	e7d0      	b.n	8015574 <__hexnan+0xd4>
 80155d2:	2004      	movs	r0, #4
 80155d4:	e7d5      	b.n	8015582 <__hexnan+0xe2>

080155d6 <__ascii_mbtowc>:
 80155d6:	b082      	sub	sp, #8
 80155d8:	b901      	cbnz	r1, 80155dc <__ascii_mbtowc+0x6>
 80155da:	a901      	add	r1, sp, #4
 80155dc:	b142      	cbz	r2, 80155f0 <__ascii_mbtowc+0x1a>
 80155de:	b14b      	cbz	r3, 80155f4 <__ascii_mbtowc+0x1e>
 80155e0:	7813      	ldrb	r3, [r2, #0]
 80155e2:	600b      	str	r3, [r1, #0]
 80155e4:	7812      	ldrb	r2, [r2, #0]
 80155e6:	1e10      	subs	r0, r2, #0
 80155e8:	bf18      	it	ne
 80155ea:	2001      	movne	r0, #1
 80155ec:	b002      	add	sp, #8
 80155ee:	4770      	bx	lr
 80155f0:	4610      	mov	r0, r2
 80155f2:	e7fb      	b.n	80155ec <__ascii_mbtowc+0x16>
 80155f4:	f06f 0001 	mvn.w	r0, #1
 80155f8:	e7f8      	b.n	80155ec <__ascii_mbtowc+0x16>

080155fa <_realloc_r>:
 80155fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155fe:	4607      	mov	r7, r0
 8015600:	4614      	mov	r4, r2
 8015602:	460d      	mov	r5, r1
 8015604:	b921      	cbnz	r1, 8015610 <_realloc_r+0x16>
 8015606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801560a:	4611      	mov	r1, r2
 801560c:	f7fd be74 	b.w	80132f8 <_malloc_r>
 8015610:	b92a      	cbnz	r2, 801561e <_realloc_r+0x24>
 8015612:	f7fd fdfd 	bl	8013210 <_free_r>
 8015616:	4625      	mov	r5, r4
 8015618:	4628      	mov	r0, r5
 801561a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801561e:	f000 f840 	bl	80156a2 <_malloc_usable_size_r>
 8015622:	4284      	cmp	r4, r0
 8015624:	4606      	mov	r6, r0
 8015626:	d802      	bhi.n	801562e <_realloc_r+0x34>
 8015628:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801562c:	d8f4      	bhi.n	8015618 <_realloc_r+0x1e>
 801562e:	4621      	mov	r1, r4
 8015630:	4638      	mov	r0, r7
 8015632:	f7fd fe61 	bl	80132f8 <_malloc_r>
 8015636:	4680      	mov	r8, r0
 8015638:	b908      	cbnz	r0, 801563e <_realloc_r+0x44>
 801563a:	4645      	mov	r5, r8
 801563c:	e7ec      	b.n	8015618 <_realloc_r+0x1e>
 801563e:	42b4      	cmp	r4, r6
 8015640:	4622      	mov	r2, r4
 8015642:	4629      	mov	r1, r5
 8015644:	bf28      	it	cs
 8015646:	4632      	movcs	r2, r6
 8015648:	f7fc ff75 	bl	8012536 <memcpy>
 801564c:	4629      	mov	r1, r5
 801564e:	4638      	mov	r0, r7
 8015650:	f7fd fdde 	bl	8013210 <_free_r>
 8015654:	e7f1      	b.n	801563a <_realloc_r+0x40>

08015656 <__ascii_wctomb>:
 8015656:	4603      	mov	r3, r0
 8015658:	4608      	mov	r0, r1
 801565a:	b141      	cbz	r1, 801566e <__ascii_wctomb+0x18>
 801565c:	2aff      	cmp	r2, #255	@ 0xff
 801565e:	d904      	bls.n	801566a <__ascii_wctomb+0x14>
 8015660:	228a      	movs	r2, #138	@ 0x8a
 8015662:	601a      	str	r2, [r3, #0]
 8015664:	f04f 30ff 	mov.w	r0, #4294967295
 8015668:	4770      	bx	lr
 801566a:	700a      	strb	r2, [r1, #0]
 801566c:	2001      	movs	r0, #1
 801566e:	4770      	bx	lr

08015670 <fiprintf>:
 8015670:	b40e      	push	{r1, r2, r3}
 8015672:	b503      	push	{r0, r1, lr}
 8015674:	4601      	mov	r1, r0
 8015676:	ab03      	add	r3, sp, #12
 8015678:	4805      	ldr	r0, [pc, #20]	@ (8015690 <fiprintf+0x20>)
 801567a:	f853 2b04 	ldr.w	r2, [r3], #4
 801567e:	6800      	ldr	r0, [r0, #0]
 8015680:	9301      	str	r3, [sp, #4]
 8015682:	f000 f83f 	bl	8015704 <_vfiprintf_r>
 8015686:	b002      	add	sp, #8
 8015688:	f85d eb04 	ldr.w	lr, [sp], #4
 801568c:	b003      	add	sp, #12
 801568e:	4770      	bx	lr
 8015690:	2000003c 	.word	0x2000003c

08015694 <abort>:
 8015694:	b508      	push	{r3, lr}
 8015696:	2006      	movs	r0, #6
 8015698:	f000 fa08 	bl	8015aac <raise>
 801569c:	2001      	movs	r0, #1
 801569e:	f7ed f8af 	bl	8002800 <_exit>

080156a2 <_malloc_usable_size_r>:
 80156a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156a6:	1f18      	subs	r0, r3, #4
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	bfbc      	itt	lt
 80156ac:	580b      	ldrlt	r3, [r1, r0]
 80156ae:	18c0      	addlt	r0, r0, r3
 80156b0:	4770      	bx	lr

080156b2 <__sfputc_r>:
 80156b2:	6893      	ldr	r3, [r2, #8]
 80156b4:	3b01      	subs	r3, #1
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	b410      	push	{r4}
 80156ba:	6093      	str	r3, [r2, #8]
 80156bc:	da08      	bge.n	80156d0 <__sfputc_r+0x1e>
 80156be:	6994      	ldr	r4, [r2, #24]
 80156c0:	42a3      	cmp	r3, r4
 80156c2:	db01      	blt.n	80156c8 <__sfputc_r+0x16>
 80156c4:	290a      	cmp	r1, #10
 80156c6:	d103      	bne.n	80156d0 <__sfputc_r+0x1e>
 80156c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156cc:	f000 b932 	b.w	8015934 <__swbuf_r>
 80156d0:	6813      	ldr	r3, [r2, #0]
 80156d2:	1c58      	adds	r0, r3, #1
 80156d4:	6010      	str	r0, [r2, #0]
 80156d6:	7019      	strb	r1, [r3, #0]
 80156d8:	4608      	mov	r0, r1
 80156da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156de:	4770      	bx	lr

080156e0 <__sfputs_r>:
 80156e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156e2:	4606      	mov	r6, r0
 80156e4:	460f      	mov	r7, r1
 80156e6:	4614      	mov	r4, r2
 80156e8:	18d5      	adds	r5, r2, r3
 80156ea:	42ac      	cmp	r4, r5
 80156ec:	d101      	bne.n	80156f2 <__sfputs_r+0x12>
 80156ee:	2000      	movs	r0, #0
 80156f0:	e007      	b.n	8015702 <__sfputs_r+0x22>
 80156f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156f6:	463a      	mov	r2, r7
 80156f8:	4630      	mov	r0, r6
 80156fa:	f7ff ffda 	bl	80156b2 <__sfputc_r>
 80156fe:	1c43      	adds	r3, r0, #1
 8015700:	d1f3      	bne.n	80156ea <__sfputs_r+0xa>
 8015702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015704 <_vfiprintf_r>:
 8015704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015708:	460d      	mov	r5, r1
 801570a:	b09d      	sub	sp, #116	@ 0x74
 801570c:	4614      	mov	r4, r2
 801570e:	4698      	mov	r8, r3
 8015710:	4606      	mov	r6, r0
 8015712:	b118      	cbz	r0, 801571c <_vfiprintf_r+0x18>
 8015714:	6a03      	ldr	r3, [r0, #32]
 8015716:	b90b      	cbnz	r3, 801571c <_vfiprintf_r+0x18>
 8015718:	f7fc fd5e 	bl	80121d8 <__sinit>
 801571c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801571e:	07d9      	lsls	r1, r3, #31
 8015720:	d405      	bmi.n	801572e <_vfiprintf_r+0x2a>
 8015722:	89ab      	ldrh	r3, [r5, #12]
 8015724:	059a      	lsls	r2, r3, #22
 8015726:	d402      	bmi.n	801572e <_vfiprintf_r+0x2a>
 8015728:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801572a:	f7fc ff02 	bl	8012532 <__retarget_lock_acquire_recursive>
 801572e:	89ab      	ldrh	r3, [r5, #12]
 8015730:	071b      	lsls	r3, r3, #28
 8015732:	d501      	bpl.n	8015738 <_vfiprintf_r+0x34>
 8015734:	692b      	ldr	r3, [r5, #16]
 8015736:	b99b      	cbnz	r3, 8015760 <_vfiprintf_r+0x5c>
 8015738:	4629      	mov	r1, r5
 801573a:	4630      	mov	r0, r6
 801573c:	f000 f938 	bl	80159b0 <__swsetup_r>
 8015740:	b170      	cbz	r0, 8015760 <_vfiprintf_r+0x5c>
 8015742:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015744:	07dc      	lsls	r4, r3, #31
 8015746:	d504      	bpl.n	8015752 <_vfiprintf_r+0x4e>
 8015748:	f04f 30ff 	mov.w	r0, #4294967295
 801574c:	b01d      	add	sp, #116	@ 0x74
 801574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015752:	89ab      	ldrh	r3, [r5, #12]
 8015754:	0598      	lsls	r0, r3, #22
 8015756:	d4f7      	bmi.n	8015748 <_vfiprintf_r+0x44>
 8015758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801575a:	f7fc feeb 	bl	8012534 <__retarget_lock_release_recursive>
 801575e:	e7f3      	b.n	8015748 <_vfiprintf_r+0x44>
 8015760:	2300      	movs	r3, #0
 8015762:	9309      	str	r3, [sp, #36]	@ 0x24
 8015764:	2320      	movs	r3, #32
 8015766:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801576a:	f8cd 800c 	str.w	r8, [sp, #12]
 801576e:	2330      	movs	r3, #48	@ 0x30
 8015770:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015920 <_vfiprintf_r+0x21c>
 8015774:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015778:	f04f 0901 	mov.w	r9, #1
 801577c:	4623      	mov	r3, r4
 801577e:	469a      	mov	sl, r3
 8015780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015784:	b10a      	cbz	r2, 801578a <_vfiprintf_r+0x86>
 8015786:	2a25      	cmp	r2, #37	@ 0x25
 8015788:	d1f9      	bne.n	801577e <_vfiprintf_r+0x7a>
 801578a:	ebba 0b04 	subs.w	fp, sl, r4
 801578e:	d00b      	beq.n	80157a8 <_vfiprintf_r+0xa4>
 8015790:	465b      	mov	r3, fp
 8015792:	4622      	mov	r2, r4
 8015794:	4629      	mov	r1, r5
 8015796:	4630      	mov	r0, r6
 8015798:	f7ff ffa2 	bl	80156e0 <__sfputs_r>
 801579c:	3001      	adds	r0, #1
 801579e:	f000 80a7 	beq.w	80158f0 <_vfiprintf_r+0x1ec>
 80157a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80157a4:	445a      	add	r2, fp
 80157a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80157a8:	f89a 3000 	ldrb.w	r3, [sl]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f000 809f 	beq.w	80158f0 <_vfiprintf_r+0x1ec>
 80157b2:	2300      	movs	r3, #0
 80157b4:	f04f 32ff 	mov.w	r2, #4294967295
 80157b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157bc:	f10a 0a01 	add.w	sl, sl, #1
 80157c0:	9304      	str	r3, [sp, #16]
 80157c2:	9307      	str	r3, [sp, #28]
 80157c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80157c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80157ca:	4654      	mov	r4, sl
 80157cc:	2205      	movs	r2, #5
 80157ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157d2:	4853      	ldr	r0, [pc, #332]	@ (8015920 <_vfiprintf_r+0x21c>)
 80157d4:	f7ea fd24 	bl	8000220 <memchr>
 80157d8:	9a04      	ldr	r2, [sp, #16]
 80157da:	b9d8      	cbnz	r0, 8015814 <_vfiprintf_r+0x110>
 80157dc:	06d1      	lsls	r1, r2, #27
 80157de:	bf44      	itt	mi
 80157e0:	2320      	movmi	r3, #32
 80157e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80157e6:	0713      	lsls	r3, r2, #28
 80157e8:	bf44      	itt	mi
 80157ea:	232b      	movmi	r3, #43	@ 0x2b
 80157ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80157f0:	f89a 3000 	ldrb.w	r3, [sl]
 80157f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80157f6:	d015      	beq.n	8015824 <_vfiprintf_r+0x120>
 80157f8:	9a07      	ldr	r2, [sp, #28]
 80157fa:	4654      	mov	r4, sl
 80157fc:	2000      	movs	r0, #0
 80157fe:	f04f 0c0a 	mov.w	ip, #10
 8015802:	4621      	mov	r1, r4
 8015804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015808:	3b30      	subs	r3, #48	@ 0x30
 801580a:	2b09      	cmp	r3, #9
 801580c:	d94b      	bls.n	80158a6 <_vfiprintf_r+0x1a2>
 801580e:	b1b0      	cbz	r0, 801583e <_vfiprintf_r+0x13a>
 8015810:	9207      	str	r2, [sp, #28]
 8015812:	e014      	b.n	801583e <_vfiprintf_r+0x13a>
 8015814:	eba0 0308 	sub.w	r3, r0, r8
 8015818:	fa09 f303 	lsl.w	r3, r9, r3
 801581c:	4313      	orrs	r3, r2
 801581e:	9304      	str	r3, [sp, #16]
 8015820:	46a2      	mov	sl, r4
 8015822:	e7d2      	b.n	80157ca <_vfiprintf_r+0xc6>
 8015824:	9b03      	ldr	r3, [sp, #12]
 8015826:	1d19      	adds	r1, r3, #4
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	9103      	str	r1, [sp, #12]
 801582c:	2b00      	cmp	r3, #0
 801582e:	bfbb      	ittet	lt
 8015830:	425b      	neglt	r3, r3
 8015832:	f042 0202 	orrlt.w	r2, r2, #2
 8015836:	9307      	strge	r3, [sp, #28]
 8015838:	9307      	strlt	r3, [sp, #28]
 801583a:	bfb8      	it	lt
 801583c:	9204      	strlt	r2, [sp, #16]
 801583e:	7823      	ldrb	r3, [r4, #0]
 8015840:	2b2e      	cmp	r3, #46	@ 0x2e
 8015842:	d10a      	bne.n	801585a <_vfiprintf_r+0x156>
 8015844:	7863      	ldrb	r3, [r4, #1]
 8015846:	2b2a      	cmp	r3, #42	@ 0x2a
 8015848:	d132      	bne.n	80158b0 <_vfiprintf_r+0x1ac>
 801584a:	9b03      	ldr	r3, [sp, #12]
 801584c:	1d1a      	adds	r2, r3, #4
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	9203      	str	r2, [sp, #12]
 8015852:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015856:	3402      	adds	r4, #2
 8015858:	9305      	str	r3, [sp, #20]
 801585a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015930 <_vfiprintf_r+0x22c>
 801585e:	7821      	ldrb	r1, [r4, #0]
 8015860:	2203      	movs	r2, #3
 8015862:	4650      	mov	r0, sl
 8015864:	f7ea fcdc 	bl	8000220 <memchr>
 8015868:	b138      	cbz	r0, 801587a <_vfiprintf_r+0x176>
 801586a:	9b04      	ldr	r3, [sp, #16]
 801586c:	eba0 000a 	sub.w	r0, r0, sl
 8015870:	2240      	movs	r2, #64	@ 0x40
 8015872:	4082      	lsls	r2, r0
 8015874:	4313      	orrs	r3, r2
 8015876:	3401      	adds	r4, #1
 8015878:	9304      	str	r3, [sp, #16]
 801587a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801587e:	4829      	ldr	r0, [pc, #164]	@ (8015924 <_vfiprintf_r+0x220>)
 8015880:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015884:	2206      	movs	r2, #6
 8015886:	f7ea fccb 	bl	8000220 <memchr>
 801588a:	2800      	cmp	r0, #0
 801588c:	d03f      	beq.n	801590e <_vfiprintf_r+0x20a>
 801588e:	4b26      	ldr	r3, [pc, #152]	@ (8015928 <_vfiprintf_r+0x224>)
 8015890:	bb1b      	cbnz	r3, 80158da <_vfiprintf_r+0x1d6>
 8015892:	9b03      	ldr	r3, [sp, #12]
 8015894:	3307      	adds	r3, #7
 8015896:	f023 0307 	bic.w	r3, r3, #7
 801589a:	3308      	adds	r3, #8
 801589c:	9303      	str	r3, [sp, #12]
 801589e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158a0:	443b      	add	r3, r7
 80158a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80158a4:	e76a      	b.n	801577c <_vfiprintf_r+0x78>
 80158a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80158aa:	460c      	mov	r4, r1
 80158ac:	2001      	movs	r0, #1
 80158ae:	e7a8      	b.n	8015802 <_vfiprintf_r+0xfe>
 80158b0:	2300      	movs	r3, #0
 80158b2:	3401      	adds	r4, #1
 80158b4:	9305      	str	r3, [sp, #20]
 80158b6:	4619      	mov	r1, r3
 80158b8:	f04f 0c0a 	mov.w	ip, #10
 80158bc:	4620      	mov	r0, r4
 80158be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158c2:	3a30      	subs	r2, #48	@ 0x30
 80158c4:	2a09      	cmp	r2, #9
 80158c6:	d903      	bls.n	80158d0 <_vfiprintf_r+0x1cc>
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d0c6      	beq.n	801585a <_vfiprintf_r+0x156>
 80158cc:	9105      	str	r1, [sp, #20]
 80158ce:	e7c4      	b.n	801585a <_vfiprintf_r+0x156>
 80158d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80158d4:	4604      	mov	r4, r0
 80158d6:	2301      	movs	r3, #1
 80158d8:	e7f0      	b.n	80158bc <_vfiprintf_r+0x1b8>
 80158da:	ab03      	add	r3, sp, #12
 80158dc:	9300      	str	r3, [sp, #0]
 80158de:	462a      	mov	r2, r5
 80158e0:	4b12      	ldr	r3, [pc, #72]	@ (801592c <_vfiprintf_r+0x228>)
 80158e2:	a904      	add	r1, sp, #16
 80158e4:	4630      	mov	r0, r6
 80158e6:	f7fb fe27 	bl	8011538 <_printf_float>
 80158ea:	4607      	mov	r7, r0
 80158ec:	1c78      	adds	r0, r7, #1
 80158ee:	d1d6      	bne.n	801589e <_vfiprintf_r+0x19a>
 80158f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80158f2:	07d9      	lsls	r1, r3, #31
 80158f4:	d405      	bmi.n	8015902 <_vfiprintf_r+0x1fe>
 80158f6:	89ab      	ldrh	r3, [r5, #12]
 80158f8:	059a      	lsls	r2, r3, #22
 80158fa:	d402      	bmi.n	8015902 <_vfiprintf_r+0x1fe>
 80158fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80158fe:	f7fc fe19 	bl	8012534 <__retarget_lock_release_recursive>
 8015902:	89ab      	ldrh	r3, [r5, #12]
 8015904:	065b      	lsls	r3, r3, #25
 8015906:	f53f af1f 	bmi.w	8015748 <_vfiprintf_r+0x44>
 801590a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801590c:	e71e      	b.n	801574c <_vfiprintf_r+0x48>
 801590e:	ab03      	add	r3, sp, #12
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	462a      	mov	r2, r5
 8015914:	4b05      	ldr	r3, [pc, #20]	@ (801592c <_vfiprintf_r+0x228>)
 8015916:	a904      	add	r1, sp, #16
 8015918:	4630      	mov	r0, r6
 801591a:	f7fc f8a5 	bl	8011a68 <_printf_i>
 801591e:	e7e4      	b.n	80158ea <_vfiprintf_r+0x1e6>
 8015920:	08016751 	.word	0x08016751
 8015924:	0801675b 	.word	0x0801675b
 8015928:	08011539 	.word	0x08011539
 801592c:	080156e1 	.word	0x080156e1
 8015930:	08016757 	.word	0x08016757

08015934 <__swbuf_r>:
 8015934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015936:	460e      	mov	r6, r1
 8015938:	4614      	mov	r4, r2
 801593a:	4605      	mov	r5, r0
 801593c:	b118      	cbz	r0, 8015946 <__swbuf_r+0x12>
 801593e:	6a03      	ldr	r3, [r0, #32]
 8015940:	b90b      	cbnz	r3, 8015946 <__swbuf_r+0x12>
 8015942:	f7fc fc49 	bl	80121d8 <__sinit>
 8015946:	69a3      	ldr	r3, [r4, #24]
 8015948:	60a3      	str	r3, [r4, #8]
 801594a:	89a3      	ldrh	r3, [r4, #12]
 801594c:	071a      	lsls	r2, r3, #28
 801594e:	d501      	bpl.n	8015954 <__swbuf_r+0x20>
 8015950:	6923      	ldr	r3, [r4, #16]
 8015952:	b943      	cbnz	r3, 8015966 <__swbuf_r+0x32>
 8015954:	4621      	mov	r1, r4
 8015956:	4628      	mov	r0, r5
 8015958:	f000 f82a 	bl	80159b0 <__swsetup_r>
 801595c:	b118      	cbz	r0, 8015966 <__swbuf_r+0x32>
 801595e:	f04f 37ff 	mov.w	r7, #4294967295
 8015962:	4638      	mov	r0, r7
 8015964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015966:	6823      	ldr	r3, [r4, #0]
 8015968:	6922      	ldr	r2, [r4, #16]
 801596a:	1a98      	subs	r0, r3, r2
 801596c:	6963      	ldr	r3, [r4, #20]
 801596e:	b2f6      	uxtb	r6, r6
 8015970:	4283      	cmp	r3, r0
 8015972:	4637      	mov	r7, r6
 8015974:	dc05      	bgt.n	8015982 <__swbuf_r+0x4e>
 8015976:	4621      	mov	r1, r4
 8015978:	4628      	mov	r0, r5
 801597a:	f7ff fa53 	bl	8014e24 <_fflush_r>
 801597e:	2800      	cmp	r0, #0
 8015980:	d1ed      	bne.n	801595e <__swbuf_r+0x2a>
 8015982:	68a3      	ldr	r3, [r4, #8]
 8015984:	3b01      	subs	r3, #1
 8015986:	60a3      	str	r3, [r4, #8]
 8015988:	6823      	ldr	r3, [r4, #0]
 801598a:	1c5a      	adds	r2, r3, #1
 801598c:	6022      	str	r2, [r4, #0]
 801598e:	701e      	strb	r6, [r3, #0]
 8015990:	6962      	ldr	r2, [r4, #20]
 8015992:	1c43      	adds	r3, r0, #1
 8015994:	429a      	cmp	r2, r3
 8015996:	d004      	beq.n	80159a2 <__swbuf_r+0x6e>
 8015998:	89a3      	ldrh	r3, [r4, #12]
 801599a:	07db      	lsls	r3, r3, #31
 801599c:	d5e1      	bpl.n	8015962 <__swbuf_r+0x2e>
 801599e:	2e0a      	cmp	r6, #10
 80159a0:	d1df      	bne.n	8015962 <__swbuf_r+0x2e>
 80159a2:	4621      	mov	r1, r4
 80159a4:	4628      	mov	r0, r5
 80159a6:	f7ff fa3d 	bl	8014e24 <_fflush_r>
 80159aa:	2800      	cmp	r0, #0
 80159ac:	d0d9      	beq.n	8015962 <__swbuf_r+0x2e>
 80159ae:	e7d6      	b.n	801595e <__swbuf_r+0x2a>

080159b0 <__swsetup_r>:
 80159b0:	b538      	push	{r3, r4, r5, lr}
 80159b2:	4b29      	ldr	r3, [pc, #164]	@ (8015a58 <__swsetup_r+0xa8>)
 80159b4:	4605      	mov	r5, r0
 80159b6:	6818      	ldr	r0, [r3, #0]
 80159b8:	460c      	mov	r4, r1
 80159ba:	b118      	cbz	r0, 80159c4 <__swsetup_r+0x14>
 80159bc:	6a03      	ldr	r3, [r0, #32]
 80159be:	b90b      	cbnz	r3, 80159c4 <__swsetup_r+0x14>
 80159c0:	f7fc fc0a 	bl	80121d8 <__sinit>
 80159c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159c8:	0719      	lsls	r1, r3, #28
 80159ca:	d422      	bmi.n	8015a12 <__swsetup_r+0x62>
 80159cc:	06da      	lsls	r2, r3, #27
 80159ce:	d407      	bmi.n	80159e0 <__swsetup_r+0x30>
 80159d0:	2209      	movs	r2, #9
 80159d2:	602a      	str	r2, [r5, #0]
 80159d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159d8:	81a3      	strh	r3, [r4, #12]
 80159da:	f04f 30ff 	mov.w	r0, #4294967295
 80159de:	e033      	b.n	8015a48 <__swsetup_r+0x98>
 80159e0:	0758      	lsls	r0, r3, #29
 80159e2:	d512      	bpl.n	8015a0a <__swsetup_r+0x5a>
 80159e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80159e6:	b141      	cbz	r1, 80159fa <__swsetup_r+0x4a>
 80159e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80159ec:	4299      	cmp	r1, r3
 80159ee:	d002      	beq.n	80159f6 <__swsetup_r+0x46>
 80159f0:	4628      	mov	r0, r5
 80159f2:	f7fd fc0d 	bl	8013210 <_free_r>
 80159f6:	2300      	movs	r3, #0
 80159f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80159fa:	89a3      	ldrh	r3, [r4, #12]
 80159fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015a00:	81a3      	strh	r3, [r4, #12]
 8015a02:	2300      	movs	r3, #0
 8015a04:	6063      	str	r3, [r4, #4]
 8015a06:	6923      	ldr	r3, [r4, #16]
 8015a08:	6023      	str	r3, [r4, #0]
 8015a0a:	89a3      	ldrh	r3, [r4, #12]
 8015a0c:	f043 0308 	orr.w	r3, r3, #8
 8015a10:	81a3      	strh	r3, [r4, #12]
 8015a12:	6923      	ldr	r3, [r4, #16]
 8015a14:	b94b      	cbnz	r3, 8015a2a <__swsetup_r+0x7a>
 8015a16:	89a3      	ldrh	r3, [r4, #12]
 8015a18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015a20:	d003      	beq.n	8015a2a <__swsetup_r+0x7a>
 8015a22:	4621      	mov	r1, r4
 8015a24:	4628      	mov	r0, r5
 8015a26:	f000 f883 	bl	8015b30 <__smakebuf_r>
 8015a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a2e:	f013 0201 	ands.w	r2, r3, #1
 8015a32:	d00a      	beq.n	8015a4a <__swsetup_r+0x9a>
 8015a34:	2200      	movs	r2, #0
 8015a36:	60a2      	str	r2, [r4, #8]
 8015a38:	6962      	ldr	r2, [r4, #20]
 8015a3a:	4252      	negs	r2, r2
 8015a3c:	61a2      	str	r2, [r4, #24]
 8015a3e:	6922      	ldr	r2, [r4, #16]
 8015a40:	b942      	cbnz	r2, 8015a54 <__swsetup_r+0xa4>
 8015a42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015a46:	d1c5      	bne.n	80159d4 <__swsetup_r+0x24>
 8015a48:	bd38      	pop	{r3, r4, r5, pc}
 8015a4a:	0799      	lsls	r1, r3, #30
 8015a4c:	bf58      	it	pl
 8015a4e:	6962      	ldrpl	r2, [r4, #20]
 8015a50:	60a2      	str	r2, [r4, #8]
 8015a52:	e7f4      	b.n	8015a3e <__swsetup_r+0x8e>
 8015a54:	2000      	movs	r0, #0
 8015a56:	e7f7      	b.n	8015a48 <__swsetup_r+0x98>
 8015a58:	2000003c 	.word	0x2000003c

08015a5c <_raise_r>:
 8015a5c:	291f      	cmp	r1, #31
 8015a5e:	b538      	push	{r3, r4, r5, lr}
 8015a60:	4605      	mov	r5, r0
 8015a62:	460c      	mov	r4, r1
 8015a64:	d904      	bls.n	8015a70 <_raise_r+0x14>
 8015a66:	2316      	movs	r3, #22
 8015a68:	6003      	str	r3, [r0, #0]
 8015a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a6e:	bd38      	pop	{r3, r4, r5, pc}
 8015a70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015a72:	b112      	cbz	r2, 8015a7a <_raise_r+0x1e>
 8015a74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015a78:	b94b      	cbnz	r3, 8015a8e <_raise_r+0x32>
 8015a7a:	4628      	mov	r0, r5
 8015a7c:	f000 f830 	bl	8015ae0 <_getpid_r>
 8015a80:	4622      	mov	r2, r4
 8015a82:	4601      	mov	r1, r0
 8015a84:	4628      	mov	r0, r5
 8015a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a8a:	f000 b817 	b.w	8015abc <_kill_r>
 8015a8e:	2b01      	cmp	r3, #1
 8015a90:	d00a      	beq.n	8015aa8 <_raise_r+0x4c>
 8015a92:	1c59      	adds	r1, r3, #1
 8015a94:	d103      	bne.n	8015a9e <_raise_r+0x42>
 8015a96:	2316      	movs	r3, #22
 8015a98:	6003      	str	r3, [r0, #0]
 8015a9a:	2001      	movs	r0, #1
 8015a9c:	e7e7      	b.n	8015a6e <_raise_r+0x12>
 8015a9e:	2100      	movs	r1, #0
 8015aa0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	4798      	blx	r3
 8015aa8:	2000      	movs	r0, #0
 8015aaa:	e7e0      	b.n	8015a6e <_raise_r+0x12>

08015aac <raise>:
 8015aac:	4b02      	ldr	r3, [pc, #8]	@ (8015ab8 <raise+0xc>)
 8015aae:	4601      	mov	r1, r0
 8015ab0:	6818      	ldr	r0, [r3, #0]
 8015ab2:	f7ff bfd3 	b.w	8015a5c <_raise_r>
 8015ab6:	bf00      	nop
 8015ab8:	2000003c 	.word	0x2000003c

08015abc <_kill_r>:
 8015abc:	b538      	push	{r3, r4, r5, lr}
 8015abe:	4d07      	ldr	r5, [pc, #28]	@ (8015adc <_kill_r+0x20>)
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	4604      	mov	r4, r0
 8015ac4:	4608      	mov	r0, r1
 8015ac6:	4611      	mov	r1, r2
 8015ac8:	602b      	str	r3, [r5, #0]
 8015aca:	f7ec fe89 	bl	80027e0 <_kill>
 8015ace:	1c43      	adds	r3, r0, #1
 8015ad0:	d102      	bne.n	8015ad8 <_kill_r+0x1c>
 8015ad2:	682b      	ldr	r3, [r5, #0]
 8015ad4:	b103      	cbz	r3, 8015ad8 <_kill_r+0x1c>
 8015ad6:	6023      	str	r3, [r4, #0]
 8015ad8:	bd38      	pop	{r3, r4, r5, pc}
 8015ada:	bf00      	nop
 8015adc:	200043d8 	.word	0x200043d8

08015ae0 <_getpid_r>:
 8015ae0:	f7ec be76 	b.w	80027d0 <_getpid>

08015ae4 <__swhatbuf_r>:
 8015ae4:	b570      	push	{r4, r5, r6, lr}
 8015ae6:	460c      	mov	r4, r1
 8015ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aec:	2900      	cmp	r1, #0
 8015aee:	b096      	sub	sp, #88	@ 0x58
 8015af0:	4615      	mov	r5, r2
 8015af2:	461e      	mov	r6, r3
 8015af4:	da0d      	bge.n	8015b12 <__swhatbuf_r+0x2e>
 8015af6:	89a3      	ldrh	r3, [r4, #12]
 8015af8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015afc:	f04f 0100 	mov.w	r1, #0
 8015b00:	bf14      	ite	ne
 8015b02:	2340      	movne	r3, #64	@ 0x40
 8015b04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015b08:	2000      	movs	r0, #0
 8015b0a:	6031      	str	r1, [r6, #0]
 8015b0c:	602b      	str	r3, [r5, #0]
 8015b0e:	b016      	add	sp, #88	@ 0x58
 8015b10:	bd70      	pop	{r4, r5, r6, pc}
 8015b12:	466a      	mov	r2, sp
 8015b14:	f000 f848 	bl	8015ba8 <_fstat_r>
 8015b18:	2800      	cmp	r0, #0
 8015b1a:	dbec      	blt.n	8015af6 <__swhatbuf_r+0x12>
 8015b1c:	9901      	ldr	r1, [sp, #4]
 8015b1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015b22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015b26:	4259      	negs	r1, r3
 8015b28:	4159      	adcs	r1, r3
 8015b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015b2e:	e7eb      	b.n	8015b08 <__swhatbuf_r+0x24>

08015b30 <__smakebuf_r>:
 8015b30:	898b      	ldrh	r3, [r1, #12]
 8015b32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b34:	079d      	lsls	r5, r3, #30
 8015b36:	4606      	mov	r6, r0
 8015b38:	460c      	mov	r4, r1
 8015b3a:	d507      	bpl.n	8015b4c <__smakebuf_r+0x1c>
 8015b3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015b40:	6023      	str	r3, [r4, #0]
 8015b42:	6123      	str	r3, [r4, #16]
 8015b44:	2301      	movs	r3, #1
 8015b46:	6163      	str	r3, [r4, #20]
 8015b48:	b003      	add	sp, #12
 8015b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b4c:	ab01      	add	r3, sp, #4
 8015b4e:	466a      	mov	r2, sp
 8015b50:	f7ff ffc8 	bl	8015ae4 <__swhatbuf_r>
 8015b54:	9f00      	ldr	r7, [sp, #0]
 8015b56:	4605      	mov	r5, r0
 8015b58:	4639      	mov	r1, r7
 8015b5a:	4630      	mov	r0, r6
 8015b5c:	f7fd fbcc 	bl	80132f8 <_malloc_r>
 8015b60:	b948      	cbnz	r0, 8015b76 <__smakebuf_r+0x46>
 8015b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b66:	059a      	lsls	r2, r3, #22
 8015b68:	d4ee      	bmi.n	8015b48 <__smakebuf_r+0x18>
 8015b6a:	f023 0303 	bic.w	r3, r3, #3
 8015b6e:	f043 0302 	orr.w	r3, r3, #2
 8015b72:	81a3      	strh	r3, [r4, #12]
 8015b74:	e7e2      	b.n	8015b3c <__smakebuf_r+0xc>
 8015b76:	89a3      	ldrh	r3, [r4, #12]
 8015b78:	6020      	str	r0, [r4, #0]
 8015b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b7e:	81a3      	strh	r3, [r4, #12]
 8015b80:	9b01      	ldr	r3, [sp, #4]
 8015b82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015b86:	b15b      	cbz	r3, 8015ba0 <__smakebuf_r+0x70>
 8015b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b8c:	4630      	mov	r0, r6
 8015b8e:	f000 f81d 	bl	8015bcc <_isatty_r>
 8015b92:	b128      	cbz	r0, 8015ba0 <__smakebuf_r+0x70>
 8015b94:	89a3      	ldrh	r3, [r4, #12]
 8015b96:	f023 0303 	bic.w	r3, r3, #3
 8015b9a:	f043 0301 	orr.w	r3, r3, #1
 8015b9e:	81a3      	strh	r3, [r4, #12]
 8015ba0:	89a3      	ldrh	r3, [r4, #12]
 8015ba2:	431d      	orrs	r5, r3
 8015ba4:	81a5      	strh	r5, [r4, #12]
 8015ba6:	e7cf      	b.n	8015b48 <__smakebuf_r+0x18>

08015ba8 <_fstat_r>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4d07      	ldr	r5, [pc, #28]	@ (8015bc8 <_fstat_r+0x20>)
 8015bac:	2300      	movs	r3, #0
 8015bae:	4604      	mov	r4, r0
 8015bb0:	4608      	mov	r0, r1
 8015bb2:	4611      	mov	r1, r2
 8015bb4:	602b      	str	r3, [r5, #0]
 8015bb6:	f7ec fe73 	bl	80028a0 <_fstat>
 8015bba:	1c43      	adds	r3, r0, #1
 8015bbc:	d102      	bne.n	8015bc4 <_fstat_r+0x1c>
 8015bbe:	682b      	ldr	r3, [r5, #0]
 8015bc0:	b103      	cbz	r3, 8015bc4 <_fstat_r+0x1c>
 8015bc2:	6023      	str	r3, [r4, #0]
 8015bc4:	bd38      	pop	{r3, r4, r5, pc}
 8015bc6:	bf00      	nop
 8015bc8:	200043d8 	.word	0x200043d8

08015bcc <_isatty_r>:
 8015bcc:	b538      	push	{r3, r4, r5, lr}
 8015bce:	4d06      	ldr	r5, [pc, #24]	@ (8015be8 <_isatty_r+0x1c>)
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	4604      	mov	r4, r0
 8015bd4:	4608      	mov	r0, r1
 8015bd6:	602b      	str	r3, [r5, #0]
 8015bd8:	f7ec fe72 	bl	80028c0 <_isatty>
 8015bdc:	1c43      	adds	r3, r0, #1
 8015bde:	d102      	bne.n	8015be6 <_isatty_r+0x1a>
 8015be0:	682b      	ldr	r3, [r5, #0]
 8015be2:	b103      	cbz	r3, 8015be6 <_isatty_r+0x1a>
 8015be4:	6023      	str	r3, [r4, #0]
 8015be6:	bd38      	pop	{r3, r4, r5, pc}
 8015be8:	200043d8 	.word	0x200043d8

08015bec <powf>:
 8015bec:	b508      	push	{r3, lr}
 8015bee:	ed2d 8b04 	vpush	{d8-d9}
 8015bf2:	eeb0 8a60 	vmov.f32	s16, s1
 8015bf6:	eeb0 9a40 	vmov.f32	s18, s0
 8015bfa:	f000 f859 	bl	8015cb0 <__ieee754_powf>
 8015bfe:	eeb4 8a48 	vcmp.f32	s16, s16
 8015c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c06:	eef0 8a40 	vmov.f32	s17, s0
 8015c0a:	d63e      	bvs.n	8015c8a <powf+0x9e>
 8015c0c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8015c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c14:	d112      	bne.n	8015c3c <powf+0x50>
 8015c16:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c1e:	d039      	beq.n	8015c94 <powf+0xa8>
 8015c20:	eeb0 0a48 	vmov.f32	s0, s16
 8015c24:	f000 f839 	bl	8015c9a <finitef>
 8015c28:	b378      	cbz	r0, 8015c8a <powf+0x9e>
 8015c2a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c32:	d52a      	bpl.n	8015c8a <powf+0x9e>
 8015c34:	f7fc fc52 	bl	80124dc <__errno>
 8015c38:	2322      	movs	r3, #34	@ 0x22
 8015c3a:	e014      	b.n	8015c66 <powf+0x7a>
 8015c3c:	f000 f82d 	bl	8015c9a <finitef>
 8015c40:	b998      	cbnz	r0, 8015c6a <powf+0x7e>
 8015c42:	eeb0 0a49 	vmov.f32	s0, s18
 8015c46:	f000 f828 	bl	8015c9a <finitef>
 8015c4a:	b170      	cbz	r0, 8015c6a <powf+0x7e>
 8015c4c:	eeb0 0a48 	vmov.f32	s0, s16
 8015c50:	f000 f823 	bl	8015c9a <finitef>
 8015c54:	b148      	cbz	r0, 8015c6a <powf+0x7e>
 8015c56:	eef4 8a68 	vcmp.f32	s17, s17
 8015c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5e:	d7e9      	bvc.n	8015c34 <powf+0x48>
 8015c60:	f7fc fc3c 	bl	80124dc <__errno>
 8015c64:	2321      	movs	r3, #33	@ 0x21
 8015c66:	6003      	str	r3, [r0, #0]
 8015c68:	e00f      	b.n	8015c8a <powf+0x9e>
 8015c6a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8015c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c72:	d10a      	bne.n	8015c8a <powf+0x9e>
 8015c74:	eeb0 0a49 	vmov.f32	s0, s18
 8015c78:	f000 f80f 	bl	8015c9a <finitef>
 8015c7c:	b128      	cbz	r0, 8015c8a <powf+0x9e>
 8015c7e:	eeb0 0a48 	vmov.f32	s0, s16
 8015c82:	f000 f80a 	bl	8015c9a <finitef>
 8015c86:	2800      	cmp	r0, #0
 8015c88:	d1d4      	bne.n	8015c34 <powf+0x48>
 8015c8a:	eeb0 0a68 	vmov.f32	s0, s17
 8015c8e:	ecbd 8b04 	vpop	{d8-d9}
 8015c92:	bd08      	pop	{r3, pc}
 8015c94:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8015c98:	e7f7      	b.n	8015c8a <powf+0x9e>

08015c9a <finitef>:
 8015c9a:	ee10 3a10 	vmov	r3, s0
 8015c9e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8015ca2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8015ca6:	bfac      	ite	ge
 8015ca8:	2000      	movge	r0, #0
 8015caa:	2001      	movlt	r0, #1
 8015cac:	4770      	bx	lr
	...

08015cb0 <__ieee754_powf>:
 8015cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cb4:	ee10 4a90 	vmov	r4, s1
 8015cb8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8015cbc:	ed2d 8b02 	vpush	{d8}
 8015cc0:	ee10 6a10 	vmov	r6, s0
 8015cc4:	eeb0 8a40 	vmov.f32	s16, s0
 8015cc8:	eef0 8a60 	vmov.f32	s17, s1
 8015ccc:	d10c      	bne.n	8015ce8 <__ieee754_powf+0x38>
 8015cce:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8015cd2:	0076      	lsls	r6, r6, #1
 8015cd4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8015cd8:	f240 8274 	bls.w	80161c4 <__ieee754_powf+0x514>
 8015cdc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8015ce0:	ecbd 8b02 	vpop	{d8}
 8015ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ce8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8015cec:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8015cf0:	d802      	bhi.n	8015cf8 <__ieee754_powf+0x48>
 8015cf2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8015cf6:	d908      	bls.n	8015d0a <__ieee754_powf+0x5a>
 8015cf8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8015cfc:	d1ee      	bne.n	8015cdc <__ieee754_powf+0x2c>
 8015cfe:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8015d02:	0064      	lsls	r4, r4, #1
 8015d04:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8015d08:	e7e6      	b.n	8015cd8 <__ieee754_powf+0x28>
 8015d0a:	2e00      	cmp	r6, #0
 8015d0c:	da1f      	bge.n	8015d4e <__ieee754_powf+0x9e>
 8015d0e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8015d12:	f080 8260 	bcs.w	80161d6 <__ieee754_powf+0x526>
 8015d16:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8015d1a:	d32f      	bcc.n	8015d7c <__ieee754_powf+0xcc>
 8015d1c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8015d20:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8015d24:	fa49 f503 	asr.w	r5, r9, r3
 8015d28:	fa05 f303 	lsl.w	r3, r5, r3
 8015d2c:	454b      	cmp	r3, r9
 8015d2e:	d123      	bne.n	8015d78 <__ieee754_powf+0xc8>
 8015d30:	f005 0501 	and.w	r5, r5, #1
 8015d34:	f1c5 0502 	rsb	r5, r5, #2
 8015d38:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8015d3c:	d11f      	bne.n	8015d7e <__ieee754_powf+0xce>
 8015d3e:	2c00      	cmp	r4, #0
 8015d40:	f280 8246 	bge.w	80161d0 <__ieee754_powf+0x520>
 8015d44:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015d48:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015d4c:	e7c8      	b.n	8015ce0 <__ieee754_powf+0x30>
 8015d4e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8015d52:	d111      	bne.n	8015d78 <__ieee754_powf+0xc8>
 8015d54:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8015d58:	f000 8234 	beq.w	80161c4 <__ieee754_powf+0x514>
 8015d5c:	d906      	bls.n	8015d6c <__ieee754_powf+0xbc>
 8015d5e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8016074 <__ieee754_powf+0x3c4>
 8015d62:	2c00      	cmp	r4, #0
 8015d64:	bfa8      	it	ge
 8015d66:	eeb0 0a68 	vmovge.f32	s0, s17
 8015d6a:	e7b9      	b.n	8015ce0 <__ieee754_powf+0x30>
 8015d6c:	2c00      	cmp	r4, #0
 8015d6e:	f280 822c 	bge.w	80161ca <__ieee754_powf+0x51a>
 8015d72:	eeb1 0a68 	vneg.f32	s0, s17
 8015d76:	e7b3      	b.n	8015ce0 <__ieee754_powf+0x30>
 8015d78:	2500      	movs	r5, #0
 8015d7a:	e7dd      	b.n	8015d38 <__ieee754_powf+0x88>
 8015d7c:	2500      	movs	r5, #0
 8015d7e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8015d82:	d102      	bne.n	8015d8a <__ieee754_powf+0xda>
 8015d84:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015d88:	e7aa      	b.n	8015ce0 <__ieee754_powf+0x30>
 8015d8a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8015d8e:	f040 8227 	bne.w	80161e0 <__ieee754_powf+0x530>
 8015d92:	2e00      	cmp	r6, #0
 8015d94:	f2c0 8224 	blt.w	80161e0 <__ieee754_powf+0x530>
 8015d98:	eeb0 0a48 	vmov.f32	s0, s16
 8015d9c:	ecbd 8b02 	vpop	{d8}
 8015da0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015da4:	f000 bae6 	b.w	8016374 <__ieee754_sqrtf>
 8015da8:	2d01      	cmp	r5, #1
 8015daa:	d199      	bne.n	8015ce0 <__ieee754_powf+0x30>
 8015dac:	eeb1 0a40 	vneg.f32	s0, s0
 8015db0:	e796      	b.n	8015ce0 <__ieee754_powf+0x30>
 8015db2:	0ff0      	lsrs	r0, r6, #31
 8015db4:	3801      	subs	r0, #1
 8015db6:	ea55 0300 	orrs.w	r3, r5, r0
 8015dba:	d104      	bne.n	8015dc6 <__ieee754_powf+0x116>
 8015dbc:	ee38 8a48 	vsub.f32	s16, s16, s16
 8015dc0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015dc4:	e78c      	b.n	8015ce0 <__ieee754_powf+0x30>
 8015dc6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8015dca:	d96d      	bls.n	8015ea8 <__ieee754_powf+0x1f8>
 8015dcc:	4baa      	ldr	r3, [pc, #680]	@ (8016078 <__ieee754_powf+0x3c8>)
 8015dce:	4598      	cmp	r8, r3
 8015dd0:	d808      	bhi.n	8015de4 <__ieee754_powf+0x134>
 8015dd2:	2c00      	cmp	r4, #0
 8015dd4:	da0b      	bge.n	8015dee <__ieee754_powf+0x13e>
 8015dd6:	2000      	movs	r0, #0
 8015dd8:	ecbd 8b02 	vpop	{d8}
 8015ddc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015de0:	f000 bac2 	b.w	8016368 <__math_oflowf>
 8015de4:	4ba5      	ldr	r3, [pc, #660]	@ (801607c <__ieee754_powf+0x3cc>)
 8015de6:	4598      	cmp	r8, r3
 8015de8:	d908      	bls.n	8015dfc <__ieee754_powf+0x14c>
 8015dea:	2c00      	cmp	r4, #0
 8015dec:	dcf3      	bgt.n	8015dd6 <__ieee754_powf+0x126>
 8015dee:	2000      	movs	r0, #0
 8015df0:	ecbd 8b02 	vpop	{d8}
 8015df4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015df8:	f000 bab0 	b.w	801635c <__math_uflowf>
 8015dfc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015e00:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015e04:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8016080 <__ieee754_powf+0x3d0>
 8015e08:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8015e0c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8015e10:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015e14:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8015e18:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015e1c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8016084 <__ieee754_powf+0x3d4>
 8015e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e24:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8016088 <__ieee754_powf+0x3d8>
 8015e28:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8015e2c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801608c <__ieee754_powf+0x3dc>
 8015e30:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015e34:	eeb0 7a67 	vmov.f32	s14, s15
 8015e38:	eea0 7a26 	vfma.f32	s14, s0, s13
 8015e3c:	ee17 3a10 	vmov	r3, s14
 8015e40:	f36f 030b 	bfc	r3, #0, #12
 8015e44:	ee07 3a10 	vmov	s14, r3
 8015e48:	eeb0 6a47 	vmov.f32	s12, s14
 8015e4c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8015e50:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015e54:	3d01      	subs	r5, #1
 8015e56:	4305      	orrs	r5, r0
 8015e58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015e5c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8015e60:	f36f 040b 	bfc	r4, #0, #12
 8015e64:	bf18      	it	ne
 8015e66:	eeb0 8a66 	vmovne.f32	s16, s13
 8015e6a:	ee06 4a90 	vmov	s13, r4
 8015e6e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8015e72:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8015e76:	ee67 7a26 	vmul.f32	s15, s14, s13
 8015e7a:	eee6 0a07 	vfma.f32	s1, s12, s14
 8015e7e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8015e82:	ee17 1a10 	vmov	r1, s14
 8015e86:	2900      	cmp	r1, #0
 8015e88:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015e8c:	f340 80dd 	ble.w	801604a <__ieee754_powf+0x39a>
 8015e90:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8015e94:	f240 80ca 	bls.w	801602c <__ieee754_powf+0x37c>
 8015e98:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea0:	bf4c      	ite	mi
 8015ea2:	2001      	movmi	r0, #1
 8015ea4:	2000      	movpl	r0, #0
 8015ea6:	e797      	b.n	8015dd8 <__ieee754_powf+0x128>
 8015ea8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8015eac:	bf01      	itttt	eq
 8015eae:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8016090 <__ieee754_powf+0x3e0>
 8015eb2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8015eb6:	f06f 0317 	mvneq.w	r3, #23
 8015eba:	ee17 7a90 	vmoveq	r7, s15
 8015ebe:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8015ec2:	bf18      	it	ne
 8015ec4:	2300      	movne	r3, #0
 8015ec6:	3a7f      	subs	r2, #127	@ 0x7f
 8015ec8:	441a      	add	r2, r3
 8015eca:	4b72      	ldr	r3, [pc, #456]	@ (8016094 <__ieee754_powf+0x3e4>)
 8015ecc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8015ed0:	429f      	cmp	r7, r3
 8015ed2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8015ed6:	dd06      	ble.n	8015ee6 <__ieee754_powf+0x236>
 8015ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8016098 <__ieee754_powf+0x3e8>)
 8015eda:	429f      	cmp	r7, r3
 8015edc:	f340 80a4 	ble.w	8016028 <__ieee754_powf+0x378>
 8015ee0:	3201      	adds	r2, #1
 8015ee2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8015ee6:	2600      	movs	r6, #0
 8015ee8:	4b6c      	ldr	r3, [pc, #432]	@ (801609c <__ieee754_powf+0x3ec>)
 8015eea:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8015eee:	ee07 1a10 	vmov	s14, r1
 8015ef2:	edd3 5a00 	vldr	s11, [r3]
 8015ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80160a0 <__ieee754_powf+0x3f0>)
 8015ef8:	ee75 7a87 	vadd.f32	s15, s11, s14
 8015efc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015f00:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8015f04:	1049      	asrs	r1, r1, #1
 8015f06:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8015f0a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8015f0e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8015f12:	ee37 6a65 	vsub.f32	s12, s14, s11
 8015f16:	ee07 1a90 	vmov	s15, r1
 8015f1a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8015f1e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8015f22:	ee15 7a10 	vmov	r7, s10
 8015f26:	401f      	ands	r7, r3
 8015f28:	ee06 7a90 	vmov	s13, r7
 8015f2c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8015f30:	ee37 7a65 	vsub.f32	s14, s14, s11
 8015f34:	ee65 7a05 	vmul.f32	s15, s10, s10
 8015f38:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8015f3c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80160a4 <__ieee754_powf+0x3f4>
 8015f40:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80160a8 <__ieee754_powf+0x3f8>
 8015f44:	eee7 5a87 	vfma.f32	s11, s15, s14
 8015f48:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80160ac <__ieee754_powf+0x3fc>
 8015f4c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015f50:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8016080 <__ieee754_powf+0x3d0>
 8015f54:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015f58:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80160b0 <__ieee754_powf+0x400>
 8015f5c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015f60:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80160b4 <__ieee754_powf+0x404>
 8015f64:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015f68:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015f6c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8015f70:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8015f74:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015f78:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8015f7c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8015f80:	eef0 5a67 	vmov.f32	s11, s15
 8015f84:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8015f88:	ee75 5a87 	vadd.f32	s11, s11, s14
 8015f8c:	ee15 1a90 	vmov	r1, s11
 8015f90:	4019      	ands	r1, r3
 8015f92:	ee05 1a90 	vmov	s11, r1
 8015f96:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8015f9a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8015f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fa2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8015fa6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015faa:	eeb0 6a67 	vmov.f32	s12, s15
 8015fae:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015fb2:	ee16 1a10 	vmov	r1, s12
 8015fb6:	4019      	ands	r1, r3
 8015fb8:	ee06 1a10 	vmov	s12, r1
 8015fbc:	eeb0 7a46 	vmov.f32	s14, s12
 8015fc0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8015fc4:	493c      	ldr	r1, [pc, #240]	@ (80160b8 <__ieee754_powf+0x408>)
 8015fc6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8015fca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015fce:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80160bc <__ieee754_powf+0x40c>
 8015fd2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80160c0 <__ieee754_powf+0x410>
 8015fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015fda:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80160c4 <__ieee754_powf+0x414>
 8015fde:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015fe2:	ed91 7a00 	vldr	s14, [r1]
 8015fe6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015fea:	ee07 2a10 	vmov	s14, r2
 8015fee:	4a36      	ldr	r2, [pc, #216]	@ (80160c8 <__ieee754_powf+0x418>)
 8015ff0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8015ff4:	eeb0 7a67 	vmov.f32	s14, s15
 8015ff8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8015ffc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8016000:	ed92 5a00 	vldr	s10, [r2]
 8016004:	ee37 7a05 	vadd.f32	s14, s14, s10
 8016008:	ee37 7a26 	vadd.f32	s14, s14, s13
 801600c:	ee17 2a10 	vmov	r2, s14
 8016010:	401a      	ands	r2, r3
 8016012:	ee07 2a10 	vmov	s14, r2
 8016016:	ee77 6a66 	vsub.f32	s13, s14, s13
 801601a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801601e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8016022:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016026:	e715      	b.n	8015e54 <__ieee754_powf+0x1a4>
 8016028:	2601      	movs	r6, #1
 801602a:	e75d      	b.n	8015ee8 <__ieee754_powf+0x238>
 801602c:	d152      	bne.n	80160d4 <__ieee754_powf+0x424>
 801602e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80160cc <__ieee754_powf+0x41c>
 8016032:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016036:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801603a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801603e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016042:	f73f af29 	bgt.w	8015e98 <__ieee754_powf+0x1e8>
 8016046:	2386      	movs	r3, #134	@ 0x86
 8016048:	e048      	b.n	80160dc <__ieee754_powf+0x42c>
 801604a:	4a21      	ldr	r2, [pc, #132]	@ (80160d0 <__ieee754_powf+0x420>)
 801604c:	4293      	cmp	r3, r2
 801604e:	d907      	bls.n	8016060 <__ieee754_powf+0x3b0>
 8016050:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016058:	bf4c      	ite	mi
 801605a:	2001      	movmi	r0, #1
 801605c:	2000      	movpl	r0, #0
 801605e:	e6c7      	b.n	8015df0 <__ieee754_powf+0x140>
 8016060:	d138      	bne.n	80160d4 <__ieee754_powf+0x424>
 8016062:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016066:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801606a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801606e:	dbea      	blt.n	8016046 <__ieee754_powf+0x396>
 8016070:	e7ee      	b.n	8016050 <__ieee754_powf+0x3a0>
 8016072:	bf00      	nop
 8016074:	00000000 	.word	0x00000000
 8016078:	3f7ffff3 	.word	0x3f7ffff3
 801607c:	3f800007 	.word	0x3f800007
 8016080:	3eaaaaab 	.word	0x3eaaaaab
 8016084:	3fb8aa00 	.word	0x3fb8aa00
 8016088:	3fb8aa3b 	.word	0x3fb8aa3b
 801608c:	36eca570 	.word	0x36eca570
 8016090:	4b800000 	.word	0x4b800000
 8016094:	001cc471 	.word	0x001cc471
 8016098:	005db3d6 	.word	0x005db3d6
 801609c:	08016a6c 	.word	0x08016a6c
 80160a0:	fffff000 	.word	0xfffff000
 80160a4:	3e6c3255 	.word	0x3e6c3255
 80160a8:	3e53f142 	.word	0x3e53f142
 80160ac:	3e8ba305 	.word	0x3e8ba305
 80160b0:	3edb6db7 	.word	0x3edb6db7
 80160b4:	3f19999a 	.word	0x3f19999a
 80160b8:	08016a5c 	.word	0x08016a5c
 80160bc:	3f76384f 	.word	0x3f76384f
 80160c0:	3f763800 	.word	0x3f763800
 80160c4:	369dc3a0 	.word	0x369dc3a0
 80160c8:	08016a64 	.word	0x08016a64
 80160cc:	3338aa3c 	.word	0x3338aa3c
 80160d0:	43160000 	.word	0x43160000
 80160d4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80160d8:	d96f      	bls.n	80161ba <__ieee754_powf+0x50a>
 80160da:	15db      	asrs	r3, r3, #23
 80160dc:	3b7e      	subs	r3, #126	@ 0x7e
 80160de:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80160e2:	4118      	asrs	r0, r3
 80160e4:	4408      	add	r0, r1
 80160e6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80160ea:	4a4e      	ldr	r2, [pc, #312]	@ (8016224 <__ieee754_powf+0x574>)
 80160ec:	3b7f      	subs	r3, #127	@ 0x7f
 80160ee:	411a      	asrs	r2, r3
 80160f0:	4002      	ands	r2, r0
 80160f2:	ee07 2a10 	vmov	s14, r2
 80160f6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80160fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80160fe:	f1c3 0317 	rsb	r3, r3, #23
 8016102:	4118      	asrs	r0, r3
 8016104:	2900      	cmp	r1, #0
 8016106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801610a:	bfb8      	it	lt
 801610c:	4240      	neglt	r0, r0
 801610e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8016112:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8016228 <__ieee754_powf+0x578>
 8016116:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801622c <__ieee754_powf+0x57c>
 801611a:	ee16 3a90 	vmov	r3, s13
 801611e:	f36f 030b 	bfc	r3, #0, #12
 8016122:	ee06 3a90 	vmov	s13, r3
 8016126:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801612a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801612e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016132:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8016230 <__ieee754_powf+0x580>
 8016136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801613a:	eee0 7a87 	vfma.f32	s15, s1, s14
 801613e:	eeb0 7a67 	vmov.f32	s14, s15
 8016142:	eea6 7a86 	vfma.f32	s14, s13, s12
 8016146:	eef0 5a47 	vmov.f32	s11, s14
 801614a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801614e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8016152:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8016156:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8016234 <__ieee754_powf+0x584>
 801615a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8016238 <__ieee754_powf+0x588>
 801615e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016162:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801623c <__ieee754_powf+0x58c>
 8016166:	eee6 5a26 	vfma.f32	s11, s12, s13
 801616a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8016240 <__ieee754_powf+0x590>
 801616e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8016172:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8016244 <__ieee754_powf+0x594>
 8016176:	eee6 5a26 	vfma.f32	s11, s12, s13
 801617a:	eeb0 6a47 	vmov.f32	s12, s14
 801617e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8016182:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8016186:	ee67 5a06 	vmul.f32	s11, s14, s12
 801618a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801618e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8016192:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8016196:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801619a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801619e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80161a2:	ee10 3a10 	vmov	r3, s0
 80161a6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80161aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80161ae:	da06      	bge.n	80161be <__ieee754_powf+0x50e>
 80161b0:	f000 f854 	bl	801625c <scalbnf>
 80161b4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80161b8:	e592      	b.n	8015ce0 <__ieee754_powf+0x30>
 80161ba:	2000      	movs	r0, #0
 80161bc:	e7a7      	b.n	801610e <__ieee754_powf+0x45e>
 80161be:	ee00 3a10 	vmov	s0, r3
 80161c2:	e7f7      	b.n	80161b4 <__ieee754_powf+0x504>
 80161c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80161c8:	e58a      	b.n	8015ce0 <__ieee754_powf+0x30>
 80161ca:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8016248 <__ieee754_powf+0x598>
 80161ce:	e587      	b.n	8015ce0 <__ieee754_powf+0x30>
 80161d0:	eeb0 0a48 	vmov.f32	s0, s16
 80161d4:	e584      	b.n	8015ce0 <__ieee754_powf+0x30>
 80161d6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80161da:	f43f adbb 	beq.w	8015d54 <__ieee754_powf+0xa4>
 80161de:	2502      	movs	r5, #2
 80161e0:	eeb0 0a48 	vmov.f32	s0, s16
 80161e4:	f000 f832 	bl	801624c <fabsf>
 80161e8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80161ec:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80161f0:	4647      	mov	r7, r8
 80161f2:	d003      	beq.n	80161fc <__ieee754_powf+0x54c>
 80161f4:	f1b8 0f00 	cmp.w	r8, #0
 80161f8:	f47f addb 	bne.w	8015db2 <__ieee754_powf+0x102>
 80161fc:	2c00      	cmp	r4, #0
 80161fe:	bfbc      	itt	lt
 8016200:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8016204:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8016208:	2e00      	cmp	r6, #0
 801620a:	f6bf ad69 	bge.w	8015ce0 <__ieee754_powf+0x30>
 801620e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8016212:	ea58 0805 	orrs.w	r8, r8, r5
 8016216:	f47f adc7 	bne.w	8015da8 <__ieee754_powf+0xf8>
 801621a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801621e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016222:	e55d      	b.n	8015ce0 <__ieee754_powf+0x30>
 8016224:	ff800000 	.word	0xff800000
 8016228:	3f317218 	.word	0x3f317218
 801622c:	3f317200 	.word	0x3f317200
 8016230:	35bfbe8c 	.word	0x35bfbe8c
 8016234:	b5ddea0e 	.word	0xb5ddea0e
 8016238:	3331bb4c 	.word	0x3331bb4c
 801623c:	388ab355 	.word	0x388ab355
 8016240:	bb360b61 	.word	0xbb360b61
 8016244:	3e2aaaab 	.word	0x3e2aaaab
 8016248:	00000000 	.word	0x00000000

0801624c <fabsf>:
 801624c:	ee10 3a10 	vmov	r3, s0
 8016250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016254:	ee00 3a10 	vmov	s0, r3
 8016258:	4770      	bx	lr
	...

0801625c <scalbnf>:
 801625c:	ee10 3a10 	vmov	r3, s0
 8016260:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8016264:	d02b      	beq.n	80162be <scalbnf+0x62>
 8016266:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801626a:	d302      	bcc.n	8016272 <scalbnf+0x16>
 801626c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016270:	4770      	bx	lr
 8016272:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8016276:	d123      	bne.n	80162c0 <scalbnf+0x64>
 8016278:	4b24      	ldr	r3, [pc, #144]	@ (801630c <scalbnf+0xb0>)
 801627a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8016310 <scalbnf+0xb4>
 801627e:	4298      	cmp	r0, r3
 8016280:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016284:	db17      	blt.n	80162b6 <scalbnf+0x5a>
 8016286:	ee10 3a10 	vmov	r3, s0
 801628a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801628e:	3a19      	subs	r2, #25
 8016290:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016294:	4288      	cmp	r0, r1
 8016296:	dd15      	ble.n	80162c4 <scalbnf+0x68>
 8016298:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8016314 <scalbnf+0xb8>
 801629c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8016318 <scalbnf+0xbc>
 80162a0:	ee10 3a10 	vmov	r3, s0
 80162a4:	eeb0 7a67 	vmov.f32	s14, s15
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	bfb8      	it	lt
 80162ac:	eef0 7a66 	vmovlt.f32	s15, s13
 80162b0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80162b4:	4770      	bx	lr
 80162b6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801631c <scalbnf+0xc0>
 80162ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80162be:	4770      	bx	lr
 80162c0:	0dd2      	lsrs	r2, r2, #23
 80162c2:	e7e5      	b.n	8016290 <scalbnf+0x34>
 80162c4:	4410      	add	r0, r2
 80162c6:	28fe      	cmp	r0, #254	@ 0xfe
 80162c8:	dce6      	bgt.n	8016298 <scalbnf+0x3c>
 80162ca:	2800      	cmp	r0, #0
 80162cc:	dd06      	ble.n	80162dc <scalbnf+0x80>
 80162ce:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80162d2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80162d6:	ee00 3a10 	vmov	s0, r3
 80162da:	4770      	bx	lr
 80162dc:	f110 0f16 	cmn.w	r0, #22
 80162e0:	da09      	bge.n	80162f6 <scalbnf+0x9a>
 80162e2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801631c <scalbnf+0xc0>
 80162e6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8016320 <scalbnf+0xc4>
 80162ea:	ee10 3a10 	vmov	r3, s0
 80162ee:	eeb0 7a67 	vmov.f32	s14, s15
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	e7d9      	b.n	80162aa <scalbnf+0x4e>
 80162f6:	3019      	adds	r0, #25
 80162f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80162fc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016300:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8016324 <scalbnf+0xc8>
 8016304:	ee07 3a90 	vmov	s15, r3
 8016308:	e7d7      	b.n	80162ba <scalbnf+0x5e>
 801630a:	bf00      	nop
 801630c:	ffff3cb0 	.word	0xffff3cb0
 8016310:	4c000000 	.word	0x4c000000
 8016314:	7149f2ca 	.word	0x7149f2ca
 8016318:	f149f2ca 	.word	0xf149f2ca
 801631c:	0da24260 	.word	0x0da24260
 8016320:	8da24260 	.word	0x8da24260
 8016324:	33000000 	.word	0x33000000

08016328 <with_errnof>:
 8016328:	b510      	push	{r4, lr}
 801632a:	ed2d 8b02 	vpush	{d8}
 801632e:	eeb0 8a40 	vmov.f32	s16, s0
 8016332:	4604      	mov	r4, r0
 8016334:	f7fc f8d2 	bl	80124dc <__errno>
 8016338:	eeb0 0a48 	vmov.f32	s0, s16
 801633c:	ecbd 8b02 	vpop	{d8}
 8016340:	6004      	str	r4, [r0, #0]
 8016342:	bd10      	pop	{r4, pc}

08016344 <xflowf>:
 8016344:	b130      	cbz	r0, 8016354 <xflowf+0x10>
 8016346:	eef1 7a40 	vneg.f32	s15, s0
 801634a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801634e:	2022      	movs	r0, #34	@ 0x22
 8016350:	f7ff bfea 	b.w	8016328 <with_errnof>
 8016354:	eef0 7a40 	vmov.f32	s15, s0
 8016358:	e7f7      	b.n	801634a <xflowf+0x6>
	...

0801635c <__math_uflowf>:
 801635c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016364 <__math_uflowf+0x8>
 8016360:	f7ff bff0 	b.w	8016344 <xflowf>
 8016364:	10000000 	.word	0x10000000

08016368 <__math_oflowf>:
 8016368:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016370 <__math_oflowf+0x8>
 801636c:	f7ff bfea 	b.w	8016344 <xflowf>
 8016370:	70000000 	.word	0x70000000

08016374 <__ieee754_sqrtf>:
 8016374:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016378:	4770      	bx	lr
	...

0801637c <_init>:
 801637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801637e:	bf00      	nop
 8016380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016382:	bc08      	pop	{r3}
 8016384:	469e      	mov	lr, r3
 8016386:	4770      	bx	lr

08016388 <_fini>:
 8016388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801638a:	bf00      	nop
 801638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801638e:	bc08      	pop	{r3}
 8016390:	469e      	mov	lr, r3
 8016392:	4770      	bx	lr
