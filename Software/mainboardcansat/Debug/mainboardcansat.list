
mainboardcansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c84  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08010e68  08010e68  00011e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113d4  080113d4  000131f4  2**0
                  CONTENTS
  4 .ARM          00000008  080113d4  080113d4  000123d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113dc  080113dc  000131f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113dc  080113dc  000123dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080113e0  080113e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  080113e4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a8  200001f4  080115d8  000131f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000149c  080115d8  0001349c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027182  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005373  00000000  00000000  0003a3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002158  00000000  00000000  0003f720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019d3  00000000  00000000  00041878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260db  00000000  00000000  0004324b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d4f7  00000000  00000000  00069326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 18 .debug_str    000e5397  00000000  00000000  0008b57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170915  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b50  00000000  00000000  00170958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001794a8  2**0
=======
 18 .debug_str    000e79d6  00000000  00000000  0009681d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e1f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2f8  00000000  00000000  0017e238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00188530  2**0
>>>>>>> e54ac6655dd7b198f115799a66c315c3d7a436dd
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010e4c 	.word	0x08010e4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f8 	.word	0x200001f8
 800021c:	08010e4c 	.word	0x08010e4c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00d fa62 	bl	800e516 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b48      	ldr	r3, [pc, #288]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800105a:	4b46      	ldr	r3, [pc, #280]	@ (8001174 <MX_ADC1_Init+0x140>)
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b44      	ldr	r3, [pc, #272]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b42      	ldr	r3, [pc, #264]	@ (8001174 <MX_ADC1_Init+0x140>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001074:	4b3f      	ldr	r3, [pc, #252]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001076:	2201      	movs	r2, #1
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800107a:	4b3e      	ldr	r3, [pc, #248]	@ (8001174 <MX_ADC1_Init+0x140>)
 800107c:	2208      	movs	r2, #8
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b3c      	ldr	r3, [pc, #240]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001086:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001088:	2201      	movs	r2, #1
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800108c:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <MX_ADC1_Init+0x140>)
 800108e:	2204      	movs	r2, #4
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800109a:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <MX_ADC1_Init+0x140>)
 800109c:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010a2:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b2:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c0:	482c      	ldr	r0, [pc, #176]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010c2:	f002 fbe1 	bl	8003888 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010cc:	f001 fa7f 	bl	80025ce <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	4826      	ldr	r0, [pc, #152]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010dc:	f003 fb50 	bl	8004780 <HAL_ADCEx_MultiModeConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010e6:	f001 fa72 	bl	80025ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010ea:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <MX_ADC1_Init+0x144>)
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ee:	2306      	movs	r3, #6
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010f2:	2307      	movs	r3, #7
 80010f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f6:	237f      	movs	r3, #127	@ 0x7f
 80010f8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fa:	2304      	movs	r3, #4
 80010fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	481b      	ldr	r0, [pc, #108]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001108:	f002 fe0a 	bl	8003d20 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001112:	f001 fa5c 	bl	80025ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001116:	4b19      	ldr	r3, [pc, #100]	@ (800117c <MX_ADC1_Init+0x148>)
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800111a:	230c      	movs	r3, #12
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4814      	ldr	r0, [pc, #80]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001124:	f002 fdfc 	bl	8003d20 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800112e:	f001 fa4e 	bl	80025ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_ADC1_Init+0x14c>)
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001136:	2312      	movs	r3, #18
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001140:	f002 fdee 	bl	8003d20 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800114a:	f001 fa40 	bl	80025ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_ADC1_Init+0x150>)
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001152:	2318      	movs	r3, #24
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <MX_ADC1_Init+0x140>)
 800115c:	f002 fde0 	bl	8003d20 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001166:	f001 fa32 	bl	80025ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	@ 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000210 	.word	0x20000210
 8001178:	cb840000 	.word	0xcb840000
 800117c:	c3210000 	.word	0xc3210000
 8001180:	08600004 	.word	0x08600004
 8001184:	0c900008 	.word	0x0c900008

08001188 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2220      	movs	r2, #32
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00d f9be 	bl	800e516 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800119a:	4b2c      	ldr	r3, [pc, #176]	@ (800124c <MX_ADC2_Init+0xc4>)
 800119c:	4a2c      	ldr	r2, [pc, #176]	@ (8001250 <MX_ADC2_Init+0xc8>)
 800119e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011a0:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011a8:	4b28      	ldr	r3, [pc, #160]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ae:	4b27      	ldr	r3, [pc, #156]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ba:	4b24      	ldr	r3, [pc, #144]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011e2:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011f0:	4b16      	ldr	r3, [pc, #88]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f8:	4b14      	ldr	r3, [pc, #80]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <MX_ADC2_Init+0xc4>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001206:	4811      	ldr	r0, [pc, #68]	@ (800124c <MX_ADC2_Init+0xc4>)
 8001208:	f002 fb3e 	bl	8003888 <HAL_ADC_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001212:	f001 f9dc 	bl	80025ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001216:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_ADC2_Init+0xcc>)
 8001218:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121a:	2306      	movs	r3, #6
 800121c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800121e:	2307      	movs	r3, #7
 8001220:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001222:	237f      	movs	r3, #127	@ 0x7f
 8001224:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001226:	2304      	movs	r3, #4
 8001228:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <MX_ADC2_Init+0xc4>)
 8001234:	f002 fd74 	bl	8003d20 <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800123e:	f001 f9c6 	bl	80025ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000027c 	.word	0x2000027c
 8001250:	50000100 	.word	0x50000100
 8001254:	47520000 	.word	0x47520000

08001258 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09c      	sub	sp, #112	@ 0x70
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0318 	add.w	r3, r7, #24
 8001274:	2244      	movs	r2, #68	@ 0x44
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f00d f94c 	bl	800e516 <memset>
  if(adcHandle->Instance==ADC1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001286:	d169      	bne.n	800135c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001288:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800128c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800128e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001292:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f005 f943 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012a4:	f001 f993 	bl	80025ce <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012a8:	4b65      	ldr	r3, [pc, #404]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a64      	ldr	r2, [pc, #400]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 80012b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012b2:	4b63      	ldr	r3, [pc, #396]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d10b      	bne.n	80012d2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ba:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a61      	ldr	r2, [pc, #388]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012ea:	2306      	movs	r3, #6
 80012ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001300:	f003 ff30 	bl	8005164 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001304:	4b50      	ldr	r3, [pc, #320]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001306:	4a51      	ldr	r2, [pc, #324]	@ (800144c <HAL_ADC_MspInit+0x1f4>)
 8001308:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800130a:	4b4f      	ldr	r3, [pc, #316]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 800130c:	2205      	movs	r2, #5
 800130e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001310:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001316:	4b4c      	ldr	r3, [pc, #304]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800131c:	4b4a      	ldr	r3, [pc, #296]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001322:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001328:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800132a:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 800132c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001330:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001332:	4b45      	ldr	r3, [pc, #276]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001334:	2220      	movs	r2, #32
 8001336:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001338:	4b43      	ldr	r3, [pc, #268]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800133e:	4842      	ldr	r0, [pc, #264]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001340:	f003 fbd2 	bl	8004ae8 <HAL_DMA_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800134a:	f001 f940 	bl	80025ce <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a3d      	ldr	r2, [pc, #244]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54
 8001354:	4a3c      	ldr	r2, [pc, #240]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800135a:	e06d      	b.n	8001438 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a3b      	ldr	r2, [pc, #236]	@ (8001450 <HAL_ADC_MspInit+0x1f8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d168      	bne.n	8001438 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800136a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800136c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001370:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	4618      	mov	r0, r3
 8001378:	f005 f8d4 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8001382:	f001 f924 	bl	80025ce <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a2c      	ldr	r2, [pc, #176]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 800138e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001390:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10b      	bne.n	80013b0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001398:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 800139e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	4a23      	ldr	r2, [pc, #140]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013bc:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013c8:	2310      	movs	r3, #16
 80013ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013cc:	2303      	movs	r3, #3
 80013ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013de:	f003 fec1 	bl	8005164 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <HAL_ADC_MspInit+0x200>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013ea:	2224      	movs	r2, #36	@ 0x24
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001406:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 800140a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001412:	2220      	movs	r2, #32
 8001414:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 800141e:	f003 fb63 	bl	8004ae8 <HAL_DMA_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8001428:	f001 f8d1 	bl	80025ce <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a09      	ldr	r2, [pc, #36]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001430:	655a      	str	r2, [r3, #84]	@ 0x54
 8001432:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001438:	bf00      	nop
 800143a:	3770      	adds	r7, #112	@ 0x70
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003a8 	.word	0x200003a8
 8001444:	40021000 	.word	0x40021000
 8001448:	200002e8 	.word	0x200002e8
 800144c:	40020030 	.word	0x40020030
 8001450:	50000100 	.word	0x50000100
 8001454:	20000348 	.word	0x20000348
 8001458:	40020058 	.word	0x40020058
 800145c:	00000000 	.word	0x00000000

<<<<<<< HEAD
08000f5c <MX_DMA_Init>:
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f66:	4a1d      	ldr	r2, [pc, #116]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f7e:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_DMA_Init+0x80>)
 8000f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	200b      	movs	r0, #11
 8000f98:	f002 fdb7 	bl	8003b0a <HAL_NVIC_SetPriority>
 8000f9c:	200b      	movs	r0, #11
 8000f9e:	f002 fdce 	bl	8003b3e <HAL_NVIC_EnableIRQ>
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	200c      	movs	r0, #12
 8000fa8:	f002 fdaf 	bl	8003b0a <HAL_NVIC_SetPriority>
 8000fac:	200c      	movs	r0, #12
 8000fae:	f002 fdc6 	bl	8003b3e <HAL_NVIC_EnableIRQ>
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	200d      	movs	r0, #13
 8000fb8:	f002 fda7 	bl	8003b0a <HAL_NVIC_SetPriority>
 8000fbc:	200d      	movs	r0, #13
 8000fbe:	f002 fdbe 	bl	8003b3e <HAL_NVIC_EnableIRQ>
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	200e      	movs	r0, #14
 8000fc8:	f002 fd9f 	bl	8003b0a <HAL_NVIC_SetPriority>
 8000fcc:	200e      	movs	r0, #14
 8000fce:	f002 fdb6 	bl	8003b3e <HAL_NVIC_EnableIRQ>
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <SELECT>:
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <SELECT+0x14>)
 8000fea:	f003 f9bf 	bl	800436c <HAL_GPIO_WritePin>
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <DESELECT>:
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2110      	movs	r1, #16
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <DESELECT+0x14>)
 8001002:	f003 f9b3 	bl	800436c <HAL_GPIO_WritePin>
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	48000800 	.word	0x48000800

08001010 <SPI_TxByte>:
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	bf00      	nop
 800101c:	4808      	ldr	r0, [pc, #32]	@ (8001040 <SPI_TxByte+0x30>)
 800101e:	f005 f833 	bl	8006088 <HAL_SPI_GetState>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d1f9      	bne.n	800101c <SPI_TxByte+0xc>
 8001028:	1df9      	adds	r1, r7, #7
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	2201      	movs	r2, #1
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <SPI_TxByte+0x30>)
 8001032:	f004 fc94 	bl	800595e <HAL_SPI_Transmit>
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200005d4 	.word	0x200005d4

08001044 <SPI_RxByte>:
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
 800104a:	23ff      	movs	r3, #255	@ 0xff
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	2300      	movs	r3, #0
 8001050:	71bb      	strb	r3, [r7, #6]
 8001052:	bf00      	nop
 8001054:	4809      	ldr	r0, [pc, #36]	@ (800107c <SPI_RxByte+0x38>)
 8001056:	f005 f817 	bl	8006088 <HAL_SPI_GetState>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d1f9      	bne.n	8001054 <SPI_RxByte+0x10>
 8001060:	1dba      	adds	r2, r7, #6
 8001062:	1df9      	adds	r1, r7, #7
 8001064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	4803      	ldr	r0, [pc, #12]	@ (800107c <SPI_RxByte+0x38>)
 800106e:	f004 fdec 	bl	8005c4a <HAL_SPI_TransmitReceive>
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200005d4 	.word	0x200005d4

08001080 <SPI_RxBytePtr>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	f7ff ffdc 	bl	8001044 <SPI_RxByte>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <SD_ReadyWait>:
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <SD_ReadyWait+0x34>)
 80010a4:	2232      	movs	r2, #50	@ 0x32
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	f7ff ffcc 	bl	8001044 <SPI_RxByte>
 80010ac:	f7ff ffca 	bl	8001044 <SPI_RxByte>
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2bff      	cmp	r3, #255	@ 0xff
 80010b8:	d004      	beq.n	80010c4 <SD_ReadyWait+0x28>
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <SD_ReadyWait+0x34>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f3      	bne.n	80010ac <SD_ReadyWait+0x10>
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000010d 	.word	0x2000010d

080010d4 <SD_PowerOn>:
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	f7ff ff8a 	bl	8000ff8 <DESELECT>
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	e005      	b.n	80010f6 <SD_PowerOn+0x22>
 80010ea:	20ff      	movs	r0, #255	@ 0xff
 80010ec:	f7ff ff90 	bl	8001010 <SPI_TxByte>
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	3301      	adds	r3, #1
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	2b09      	cmp	r3, #9
 80010fa:	ddf6      	ble.n	80010ea <SD_PowerOn+0x16>
 80010fc:	f7ff ff70 	bl	8000fe0 <SELECT>
 8001100:	2340      	movs	r3, #64	@ 0x40
 8001102:	713b      	strb	r3, [r7, #4]
 8001104:	2300      	movs	r3, #0
 8001106:	717b      	strb	r3, [r7, #5]
 8001108:	2300      	movs	r3, #0
 800110a:	71bb      	strb	r3, [r7, #6]
 800110c:	2300      	movs	r3, #0
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	2300      	movs	r3, #0
 8001112:	723b      	strb	r3, [r7, #8]
 8001114:	2395      	movs	r3, #149	@ 0x95
 8001116:	727b      	strb	r3, [r7, #9]
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	e009      	b.n	8001132 <SD_PowerOn+0x5e>
 800111e:	1d3a      	adds	r2, r7, #4
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff72 	bl	8001010 <SPI_TxByte>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b05      	cmp	r3, #5
 8001136:	ddf2      	ble.n	800111e <SD_PowerOn+0x4a>
 8001138:	e002      	b.n	8001140 <SD_PowerOn+0x6c>
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3b01      	subs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	f7ff ff80 	bl	8001044 <SPI_RxByte>
 8001144:	4603      	mov	r3, r0
 8001146:	2b01      	cmp	r3, #1
 8001148:	d002      	beq.n	8001150 <SD_PowerOn+0x7c>
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f4      	bne.n	800113a <SD_PowerOn+0x66>
 8001150:	f7ff ff52 	bl	8000ff8 <DESELECT>
 8001154:	20ff      	movs	r0, #255	@ 0xff
 8001156:	f7ff ff5b 	bl	8001010 <SPI_TxByte>
 800115a:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <SD_PowerOn+0x94>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	bf00      	nop
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000010f 	.word	0x2000010f

0800116c <SD_PowerOff>:
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <SD_PowerOff+0x14>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	2000010f 	.word	0x2000010f

08001184 <SD_CheckPower>:
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <SD_CheckPower+0x14>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000010f 	.word	0x2000010f

0800119c <SD_RxDataBlock>:
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <SD_RxDataBlock+0x68>)
 80011a8:	220a      	movs	r2, #10
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	f7ff ff4a 	bl	8001044 <SPI_RxByte>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	2bff      	cmp	r3, #255	@ 0xff
 80011b8:	d104      	bne.n	80011c4 <SD_RxDataBlock+0x28>
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <SD_RxDataBlock+0x68>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f3      	bne.n	80011ac <SD_RxDataBlock+0x10>
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80011c8:	d001      	beq.n	80011ce <SD_RxDataBlock+0x32>
 80011ca:	2300      	movs	r3, #0
 80011cc:	e016      	b.n	80011fc <SD_RxDataBlock+0x60>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff53 	bl	8001080 <SPI_RxBytePtr>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff4d 	bl	8001080 <SPI_RxBytePtr>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3b02      	subs	r3, #2
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1ed      	bne.n	80011ce <SD_RxDataBlock+0x32>
 80011f2:	f7ff ff27 	bl	8001044 <SPI_RxByte>
 80011f6:	f7ff ff25 	bl	8001044 <SPI_RxByte>
 80011fa:	2301      	movs	r3, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	2000010c 	.word	0x2000010c

08001208 <SD_TxDataBlock>:
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
 8001214:	2300      	movs	r3, #0
 8001216:	737b      	strb	r3, [r7, #13]
 8001218:	f7ff ff40 	bl	800109c <SD_ReadyWait>
 800121c:	4603      	mov	r3, r0
 800121e:	2bff      	cmp	r3, #255	@ 0xff
 8001220:	d001      	beq.n	8001226 <SD_TxDataBlock+0x1e>
 8001222:	2300      	movs	r3, #0
 8001224:	e040      	b.n	80012a8 <SD_TxDataBlock+0xa0>
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fef1 	bl	8001010 <SPI_TxByte>
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2bfd      	cmp	r3, #253	@ 0xfd
 8001232:	d031      	beq.n	8001298 <SD_TxDataBlock+0x90>
 8001234:	2300      	movs	r3, #0
 8001236:	73bb      	strb	r3, [r7, #14]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fee5 	bl	8001010 <SPI_TxByte>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fede 	bl	8001010 <SPI_TxByte>
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	3b01      	subs	r3, #1
 8001258:	73bb      	strb	r3, [r7, #14]
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1eb      	bne.n	8001238 <SD_TxDataBlock+0x30>
 8001260:	f7ff fef0 	bl	8001044 <SPI_RxByte>
 8001264:	f7ff feee 	bl	8001044 <SPI_RxByte>
 8001268:	e00b      	b.n	8001282 <SD_TxDataBlock+0x7a>
 800126a:	f7ff feeb 	bl	8001044 <SPI_RxByte>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	2b05      	cmp	r3, #5
 800127a:	d006      	beq.n	800128a <SD_TxDataBlock+0x82>
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	3301      	adds	r3, #1
 8001280:	737b      	strb	r3, [r7, #13]
 8001282:	7b7b      	ldrb	r3, [r7, #13]
 8001284:	2b40      	cmp	r3, #64	@ 0x40
 8001286:	d9f0      	bls.n	800126a <SD_TxDataBlock+0x62>
 8001288:	e000      	b.n	800128c <SD_TxDataBlock+0x84>
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	f7ff fed9 	bl	8001044 <SPI_RxByte>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0fa      	beq.n	800128e <SD_TxDataBlock+0x86>
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	2b05      	cmp	r3, #5
 80012a0:	d101      	bne.n	80012a6 <SD_TxDataBlock+0x9e>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <SD_TxDataBlock+0xa0>
 80012a6:	2300      	movs	r3, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <SD_SendCmd>:
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	f7ff feee 	bl	800109c <SD_ReadyWait>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2bff      	cmp	r3, #255	@ 0xff
 80012c4:	d001      	beq.n	80012ca <SD_SendCmd+0x1a>
 80012c6:	23ff      	movs	r3, #255	@ 0xff
 80012c8:	e040      	b.n	800134c <SD_SendCmd+0x9c>
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe9f 	bl	8001010 <SPI_TxByte>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	0e1b      	lsrs	r3, r3, #24
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe99 	bl	8001010 <SPI_TxByte>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	0c1b      	lsrs	r3, r3, #16
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe93 	bl	8001010 <SPI_TxByte>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe8d 	bl	8001010 <SPI_TxByte>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe88 	bl	8001010 <SPI_TxByte>
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b40      	cmp	r3, #64	@ 0x40
 8001308:	d101      	bne.n	800130e <SD_SendCmd+0x5e>
 800130a:	2395      	movs	r3, #149	@ 0x95
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b48      	cmp	r3, #72	@ 0x48
 8001312:	d101      	bne.n	8001318 <SD_SendCmd+0x68>
 8001314:	2387      	movs	r3, #135	@ 0x87
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe78 	bl	8001010 <SPI_TxByte>
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b4c      	cmp	r3, #76	@ 0x4c
 8001324:	d101      	bne.n	800132a <SD_SendCmd+0x7a>
 8001326:	f7ff fe8d 	bl	8001044 <SPI_RxByte>
 800132a:	230a      	movs	r3, #10
 800132c:	73bb      	strb	r3, [r7, #14]
 800132e:	f7ff fe89 	bl	8001044 <SPI_RxByte>
 8001332:	4603      	mov	r3, r0
 8001334:	737b      	strb	r3, [r7, #13]
 8001336:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da05      	bge.n	800134a <SD_SendCmd+0x9a>
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	3b01      	subs	r3, #1
 8001342:	73bb      	strb	r3, [r7, #14]
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f1      	bne.n	800132e <SD_SendCmd+0x7e>
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <SD_disk_initialize>:
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SD_disk_initialize+0x14>
 8001364:	2301      	movs	r3, #1
 8001366:	e0d5      	b.n	8001514 <SD_disk_initialize+0x1c0>
 8001368:	4b6c      	ldr	r3, [pc, #432]	@ (800151c <SD_disk_initialize+0x1c8>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <SD_disk_initialize+0x2a>
 8001376:	4b69      	ldr	r3, [pc, #420]	@ (800151c <SD_disk_initialize+0x1c8>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	e0ca      	b.n	8001514 <SD_disk_initialize+0x1c0>
 800137e:	f7ff fea9 	bl	80010d4 <SD_PowerOn>
 8001382:	f7ff fe2d 	bl	8000fe0 <SELECT>
 8001386:	2300      	movs	r3, #0
 8001388:	73bb      	strb	r3, [r7, #14]
 800138a:	2100      	movs	r1, #0
 800138c:	2040      	movs	r0, #64	@ 0x40
 800138e:	f7ff ff8f 	bl	80012b0 <SD_SendCmd>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	f040 80a5 	bne.w	80014e4 <SD_disk_initialize+0x190>
 800139a:	4b61      	ldr	r3, [pc, #388]	@ (8001520 <SD_disk_initialize+0x1cc>)
 800139c:	2264      	movs	r2, #100	@ 0x64
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80013a4:	2048      	movs	r0, #72	@ 0x48
 80013a6:	f7ff ff83 	bl	80012b0 <SD_SendCmd>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d158      	bne.n	8001462 <SD_disk_initialize+0x10e>
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e00c      	b.n	80013d0 <SD_disk_initialize+0x7c>
 80013b6:	7bfc      	ldrb	r4, [r7, #15]
 80013b8:	f7ff fe44 	bl	8001044 <SPI_RxByte>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	f104 0310 	add.w	r3, r4, #16
 80013c4:	443b      	add	r3, r7
 80013c6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	3301      	adds	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d9ef      	bls.n	80013b6 <SD_disk_initialize+0x62>
 80013d6:	7abb      	ldrb	r3, [r7, #10]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f040 8083 	bne.w	80014e4 <SD_disk_initialize+0x190>
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	2baa      	cmp	r3, #170	@ 0xaa
 80013e2:	d17f      	bne.n	80014e4 <SD_disk_initialize+0x190>
 80013e4:	2100      	movs	r1, #0
 80013e6:	2077      	movs	r0, #119	@ 0x77
 80013e8:	f7ff ff62 	bl	80012b0 <SD_SendCmd>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d807      	bhi.n	8001402 <SD_disk_initialize+0xae>
 80013f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013f6:	2069      	movs	r0, #105	@ 0x69
 80013f8:	f7ff ff5a 	bl	80012b0 <SD_SendCmd>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <SD_disk_initialize+0xba>
 8001402:	4b47      	ldr	r3, [pc, #284]	@ (8001520 <SD_disk_initialize+0x1cc>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1eb      	bne.n	80013e4 <SD_disk_initialize+0x90>
 800140c:	e000      	b.n	8001410 <SD_disk_initialize+0xbc>
 800140e:	bf00      	nop
 8001410:	4b43      	ldr	r3, [pc, #268]	@ (8001520 <SD_disk_initialize+0x1cc>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d064      	beq.n	80014e4 <SD_disk_initialize+0x190>
 800141a:	2100      	movs	r1, #0
 800141c:	207a      	movs	r0, #122	@ 0x7a
 800141e:	f7ff ff47 	bl	80012b0 <SD_SendCmd>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d15d      	bne.n	80014e4 <SD_disk_initialize+0x190>
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e00c      	b.n	8001448 <SD_disk_initialize+0xf4>
 800142e:	7bfc      	ldrb	r4, [r7, #15]
 8001430:	f7ff fe08 	bl	8001044 <SPI_RxByte>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	f104 0310 	add.w	r3, r4, #16
 800143c:	443b      	add	r3, r7
 800143e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3301      	adds	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d9ef      	bls.n	800142e <SD_disk_initialize+0xda>
 800144e:	7a3b      	ldrb	r3, [r7, #8]
 8001450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SD_disk_initialize+0x108>
 8001458:	2306      	movs	r3, #6
 800145a:	e000      	b.n	800145e <SD_disk_initialize+0x10a>
 800145c:	2302      	movs	r3, #2
 800145e:	73bb      	strb	r3, [r7, #14]
 8001460:	e040      	b.n	80014e4 <SD_disk_initialize+0x190>
 8001462:	2100      	movs	r1, #0
 8001464:	2077      	movs	r0, #119	@ 0x77
 8001466:	f7ff ff23 	bl	80012b0 <SD_SendCmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d808      	bhi.n	8001482 <SD_disk_initialize+0x12e>
 8001470:	2100      	movs	r1, #0
 8001472:	2069      	movs	r0, #105	@ 0x69
 8001474:	f7ff ff1c 	bl	80012b0 <SD_SendCmd>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d801      	bhi.n	8001482 <SD_disk_initialize+0x12e>
 800147e:	2302      	movs	r3, #2
 8001480:	e000      	b.n	8001484 <SD_disk_initialize+0x130>
 8001482:	2301      	movs	r3, #1
 8001484:	73bb      	strb	r3, [r7, #14]
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d10e      	bne.n	80014aa <SD_disk_initialize+0x156>
 800148c:	2100      	movs	r1, #0
 800148e:	2077      	movs	r0, #119	@ 0x77
 8001490:	f7ff ff0e 	bl	80012b0 <SD_SendCmd>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d80e      	bhi.n	80014b8 <SD_disk_initialize+0x164>
 800149a:	2100      	movs	r1, #0
 800149c:	2069      	movs	r0, #105	@ 0x69
 800149e:	f7ff ff07 	bl	80012b0 <SD_SendCmd>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d107      	bne.n	80014b8 <SD_disk_initialize+0x164>
 80014a8:	e00d      	b.n	80014c6 <SD_disk_initialize+0x172>
 80014aa:	2100      	movs	r1, #0
 80014ac:	2041      	movs	r0, #65	@ 0x41
 80014ae:	f7ff feff 	bl	80012b0 <SD_SendCmd>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <SD_disk_initialize+0x170>
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <SD_disk_initialize+0x1cc>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e1      	bne.n	8001486 <SD_disk_initialize+0x132>
 80014c2:	e000      	b.n	80014c6 <SD_disk_initialize+0x172>
 80014c4:	bf00      	nop
 80014c6:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <SD_disk_initialize+0x1cc>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <SD_disk_initialize+0x18c>
 80014d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d4:	2050      	movs	r0, #80	@ 0x50
 80014d6:	f7ff feeb 	bl	80012b0 <SD_SendCmd>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SD_disk_initialize+0x190>
 80014e0:	2300      	movs	r3, #0
 80014e2:	73bb      	strb	r3, [r7, #14]
 80014e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001524 <SD_disk_initialize+0x1d0>)
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	7013      	strb	r3, [r2, #0]
 80014ea:	f7ff fd85 	bl	8000ff8 <DESELECT>
 80014ee:	f7ff fda9 	bl	8001044 <SPI_RxByte>
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <SD_disk_initialize+0x1b6>
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <SD_disk_initialize+0x1c8>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <SD_disk_initialize+0x1c8>)
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e001      	b.n	800150e <SD_disk_initialize+0x1ba>
 800150a:	f7ff fe2f 	bl	800116c <SD_PowerOff>
 800150e:	4b03      	ldr	r3, [pc, #12]	@ (800151c <SD_disk_initialize+0x1c8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	20000000 	.word	0x20000000
 8001520:	2000010c 	.word	0x2000010c
 8001524:	2000010e 	.word	0x2000010e

08001528 <SD_disk_status>:
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SD_disk_status+0x14>
 8001538:	2301      	movs	r3, #1
 800153a:	e002      	b.n	8001542 <SD_disk_status+0x1a>
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <SD_disk_status+0x28>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000000 	.word	0x20000000

08001554 <SD_disk_read>:
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <SD_disk_read+0x1c>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <SD_disk_read+0x20>
 8001570:	2304      	movs	r3, #4
 8001572:	e051      	b.n	8001618 <SD_disk_read+0xc4>
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <SD_disk_read+0xcc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SD_disk_read+0x32>
 8001582:	2303      	movs	r3, #3
 8001584:	e048      	b.n	8001618 <SD_disk_read+0xc4>
 8001586:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <SD_disk_read+0xd0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <SD_disk_read+0x44>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	025b      	lsls	r3, r3, #9
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	f7ff fd22 	bl	8000fe0 <SELECT>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d111      	bne.n	80015c6 <SD_disk_read+0x72>
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	2051      	movs	r0, #81	@ 0x51
 80015a6:	f7ff fe83 	bl	80012b0 <SD_SendCmd>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d129      	bne.n	8001604 <SD_disk_read+0xb0>
 80015b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f7ff fdf1 	bl	800119c <SD_RxDataBlock>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d021      	beq.n	8001604 <SD_disk_read+0xb0>
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	e01e      	b.n	8001604 <SD_disk_read+0xb0>
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	2052      	movs	r0, #82	@ 0x52
 80015ca:	f7ff fe71 	bl	80012b0 <SD_SendCmd>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d117      	bne.n	8001604 <SD_disk_read+0xb0>
 80015d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015d8:	68b8      	ldr	r0, [r7, #8]
 80015da:	f7ff fddf 	bl	800119c <SD_RxDataBlock>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <SD_disk_read+0xa6>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1ed      	bne.n	80015d4 <SD_disk_read+0x80>
 80015f8:	e000      	b.n	80015fc <SD_disk_read+0xa8>
 80015fa:	bf00      	nop
 80015fc:	2100      	movs	r1, #0
 80015fe:	204c      	movs	r0, #76	@ 0x4c
 8001600:	f7ff fe56 	bl	80012b0 <SD_SendCmd>
 8001604:	f7ff fcf8 	bl	8000ff8 <DESELECT>
 8001608:	f7ff fd1c 	bl	8001044 <SPI_RxByte>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf14      	ite	ne
 8001612:	2301      	movne	r3, #1
 8001614:	2300      	moveq	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000000 	.word	0x20000000
 8001624:	2000010e 	.word	0x2000010e

08001628 <SD_disk_write>:
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	4603      	mov	r3, r0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <SD_disk_write+0x1c>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <SD_disk_write+0x20>
 8001644:	2304      	movs	r3, #4
 8001646:	e06b      	b.n	8001720 <SD_disk_write+0xf8>
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <SD_disk_write+0x100>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SD_disk_write+0x32>
 8001656:	2303      	movs	r3, #3
 8001658:	e062      	b.n	8001720 <SD_disk_write+0xf8>
 800165a:	4b33      	ldr	r3, [pc, #204]	@ (8001728 <SD_disk_write+0x100>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SD_disk_write+0x44>
 8001668:	2302      	movs	r3, #2
 800166a:	e059      	b.n	8001720 <SD_disk_write+0xf8>
 800166c:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <SD_disk_write+0x104>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <SD_disk_write+0x56>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	f7ff fcaf 	bl	8000fe0 <SELECT>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d110      	bne.n	80016aa <SD_disk_write+0x82>
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	2058      	movs	r0, #88	@ 0x58
 800168c:	f7ff fe10 	bl	80012b0 <SD_SendCmd>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d13a      	bne.n	800170c <SD_disk_write+0xe4>
 8001696:	21fe      	movs	r1, #254	@ 0xfe
 8001698:	68b8      	ldr	r0, [r7, #8]
 800169a:	f7ff fdb5 	bl	8001208 <SD_TxDataBlock>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d033      	beq.n	800170c <SD_disk_write+0xe4>
 80016a4:	2300      	movs	r3, #0
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	e030      	b.n	800170c <SD_disk_write+0xe4>
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <SD_disk_write+0x104>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <SD_disk_write+0x9e>
 80016b6:	2100      	movs	r1, #0
 80016b8:	2077      	movs	r0, #119	@ 0x77
 80016ba:	f7ff fdf9 	bl	80012b0 <SD_SendCmd>
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	2057      	movs	r0, #87	@ 0x57
 80016c2:	f7ff fdf5 	bl	80012b0 <SD_SendCmd>
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	2059      	movs	r0, #89	@ 0x59
 80016ca:	f7ff fdf1 	bl	80012b0 <SD_SendCmd>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11b      	bne.n	800170c <SD_disk_write+0xe4>
 80016d4:	21fc      	movs	r1, #252	@ 0xfc
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f7ff fd96 	bl	8001208 <SD_TxDataBlock>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <SD_disk_write+0xd0>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ee      	bne.n	80016d4 <SD_disk_write+0xac>
 80016f6:	e000      	b.n	80016fa <SD_disk_write+0xd2>
 80016f8:	bf00      	nop
 80016fa:	21fd      	movs	r1, #253	@ 0xfd
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff fd83 	bl	8001208 <SD_TxDataBlock>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <SD_disk_write+0xe4>
 8001708:	2301      	movs	r3, #1
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	f7ff fc74 	bl	8000ff8 <DESELECT>
 8001710:	f7ff fc98 	bl	8001044 <SPI_RxByte>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	2000010e 	.word	0x2000010e

08001730 <SD_disk_ioctl>:
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b08b      	sub	sp, #44	@ 0x2c
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	603a      	str	r2, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	460b      	mov	r3, r1
 800173e:	71bb      	strb	r3, [r7, #6]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SD_disk_ioctl+0x1e>
 800174a:	2304      	movs	r3, #4
 800174c:	e119      	b.n	8001982 <SD_disk_ioctl+0x252>
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001754:	79bb      	ldrb	r3, [r7, #6]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d129      	bne.n	80017ae <SD_disk_ioctl+0x7e>
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d017      	beq.n	8001792 <SD_disk_ioctl+0x62>
 8001762:	2b02      	cmp	r3, #2
 8001764:	dc1f      	bgt.n	80017a6 <SD_disk_ioctl+0x76>
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <SD_disk_ioctl+0x40>
 800176a:	2b01      	cmp	r3, #1
 800176c:	d00b      	beq.n	8001786 <SD_disk_ioctl+0x56>
 800176e:	e01a      	b.n	80017a6 <SD_disk_ioctl+0x76>
 8001770:	f7ff fd08 	bl	8001184 <SD_CheckPower>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SD_disk_ioctl+0x4e>
 800177a:	f7ff fcf7 	bl	800116c <SD_PowerOff>
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001784:	e0fb      	b.n	800197e <SD_disk_ioctl+0x24e>
 8001786:	f7ff fca5 	bl	80010d4 <SD_PowerOn>
 800178a:	2300      	movs	r3, #0
 800178c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001790:	e0f5      	b.n	800197e <SD_disk_ioctl+0x24e>
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	1c5c      	adds	r4, r3, #1
 8001796:	f7ff fcf5 	bl	8001184 <SD_CheckPower>
 800179a:	4603      	mov	r3, r0
 800179c:	7023      	strb	r3, [r4, #0]
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017a4:	e0eb      	b.n	800197e <SD_disk_ioctl+0x24e>
 80017a6:	2304      	movs	r3, #4
 80017a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017ac:	e0e7      	b.n	800197e <SD_disk_ioctl+0x24e>
 80017ae:	4b77      	ldr	r3, [pc, #476]	@ (800198c <SD_disk_ioctl+0x25c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SD_disk_ioctl+0x90>
 80017bc:	2303      	movs	r3, #3
 80017be:	e0e0      	b.n	8001982 <SD_disk_ioctl+0x252>
 80017c0:	f7ff fc0e 	bl	8000fe0 <SELECT>
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	2b0d      	cmp	r3, #13
 80017c8:	f200 80ca 	bhi.w	8001960 <SD_disk_ioctl+0x230>
 80017cc:	a201      	add	r2, pc, #4	@ (adr r2, 80017d4 <SD_disk_ioctl+0xa4>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080018cb 	.word	0x080018cb
 80017d8:	0800180d 	.word	0x0800180d
 80017dc:	080018bb 	.word	0x080018bb
 80017e0:	08001961 	.word	0x08001961
 80017e4:	08001961 	.word	0x08001961
 80017e8:	08001961 	.word	0x08001961
 80017ec:	08001961 	.word	0x08001961
 80017f0:	08001961 	.word	0x08001961
 80017f4:	08001961 	.word	0x08001961
 80017f8:	08001961 	.word	0x08001961
 80017fc:	08001961 	.word	0x08001961
 8001800:	080018dd 	.word	0x080018dd
 8001804:	08001901 	.word	0x08001901
 8001808:	08001925 	.word	0x08001925
 800180c:	2100      	movs	r1, #0
 800180e:	2049      	movs	r0, #73	@ 0x49
 8001810:	f7ff fd4e 	bl	80012b0 <SD_SendCmd>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 80a6 	bne.w	8001968 <SD_disk_ioctl+0x238>
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2110      	movs	r1, #16
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fcba 	bl	800119c <SD_RxDataBlock>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 809c 	beq.w	8001968 <SD_disk_ioctl+0x238>
 8001830:	7b3b      	ldrb	r3, [r7, #12]
 8001832:	099b      	lsrs	r3, r3, #6
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10d      	bne.n	8001856 <SD_disk_ioctl+0x126>
 800183a:	7d7b      	ldrb	r3, [r7, #21]
 800183c:	461a      	mov	r2, r3
 800183e:	7d3b      	ldrb	r3, [r7, #20]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b29b      	uxth	r3, r3
 8001844:	4413      	add	r3, r2
 8001846:	b29b      	uxth	r3, r3
 8001848:	3301      	adds	r3, #1
 800184a:	83fb      	strh	r3, [r7, #30]
 800184c:	8bfb      	ldrh	r3, [r7, #30]
 800184e:	029a      	lsls	r2, r3, #10
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e02d      	b.n	80018b2 <SD_disk_ioctl+0x182>
 8001856:	7c7b      	ldrb	r3, [r7, #17]
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	b2da      	uxtb	r2, r3
 800185e:	7dbb      	ldrb	r3, [r7, #22]
 8001860:	09db      	lsrs	r3, r3, #7
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b2da      	uxtb	r2, r3
 8001868:	7d7b      	ldrb	r3, [r7, #21]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f003 0306 	and.w	r3, r3, #6
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4413      	add	r3, r2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3302      	adds	r3, #2
 800187a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800187e:	7d3b      	ldrb	r3, [r7, #20]
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	7cfb      	ldrb	r3, [r7, #19]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	b29b      	uxth	r3, r3
 800188c:	4413      	add	r3, r2
 800188e:	b29a      	uxth	r2, r3
 8001890:	7cbb      	ldrb	r3, [r7, #18]
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	b29b      	uxth	r3, r3
 8001896:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800189a:	b29b      	uxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	83fb      	strh	r3, [r7, #30]
 80018a4:	8bfa      	ldrh	r2, [r7, #30]
 80018a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018aa:	3b09      	subs	r3, #9
 80018ac:	409a      	lsls	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018b8:	e056      	b.n	8001968 <SD_disk_ioctl+0x238>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018c8:	e055      	b.n	8001976 <SD_disk_ioctl+0x246>
 80018ca:	f7ff fbe7 	bl	800109c <SD_ReadyWait>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2bff      	cmp	r3, #255	@ 0xff
 80018d2:	d14b      	bne.n	800196c <SD_disk_ioctl+0x23c>
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018da:	e047      	b.n	800196c <SD_disk_ioctl+0x23c>
 80018dc:	2100      	movs	r1, #0
 80018de:	2049      	movs	r0, #73	@ 0x49
 80018e0:	f7ff fce6 	bl	80012b0 <SD_SendCmd>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d142      	bne.n	8001970 <SD_disk_ioctl+0x240>
 80018ea:	2110      	movs	r1, #16
 80018ec:	6a38      	ldr	r0, [r7, #32]
 80018ee:	f7ff fc55 	bl	800119c <SD_RxDataBlock>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03b      	beq.n	8001970 <SD_disk_ioctl+0x240>
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018fe:	e037      	b.n	8001970 <SD_disk_ioctl+0x240>
 8001900:	2100      	movs	r1, #0
 8001902:	204a      	movs	r0, #74	@ 0x4a
 8001904:	f7ff fcd4 	bl	80012b0 <SD_SendCmd>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d132      	bne.n	8001974 <SD_disk_ioctl+0x244>
 800190e:	2110      	movs	r1, #16
 8001910:	6a38      	ldr	r0, [r7, #32]
 8001912:	f7ff fc43 	bl	800119c <SD_RxDataBlock>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d02b      	beq.n	8001974 <SD_disk_ioctl+0x244>
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001922:	e027      	b.n	8001974 <SD_disk_ioctl+0x244>
 8001924:	2100      	movs	r1, #0
 8001926:	207a      	movs	r0, #122	@ 0x7a
 8001928:	f7ff fcc2 	bl	80012b0 <SD_SendCmd>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <SD_disk_ioctl+0x230>
 8001932:	2300      	movs	r3, #0
 8001934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001938:	e00b      	b.n	8001952 <SD_disk_ioctl+0x222>
 800193a:	6a3c      	ldr	r4, [r7, #32]
 800193c:	1c63      	adds	r3, r4, #1
 800193e:	623b      	str	r3, [r7, #32]
 8001940:	f7ff fb80 	bl	8001044 <SPI_RxByte>
 8001944:	4603      	mov	r3, r0
 8001946:	7023      	strb	r3, [r4, #0]
 8001948:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800194c:	3301      	adds	r3, #1
 800194e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001952:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001956:	2b03      	cmp	r3, #3
 8001958:	d9ef      	bls.n	800193a <SD_disk_ioctl+0x20a>
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001960:	2304      	movs	r3, #4
 8001962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001966:	e006      	b.n	8001976 <SD_disk_ioctl+0x246>
 8001968:	bf00      	nop
 800196a:	e004      	b.n	8001976 <SD_disk_ioctl+0x246>
 800196c:	bf00      	nop
 800196e:	e002      	b.n	8001976 <SD_disk_ioctl+0x246>
 8001970:	bf00      	nop
 8001972:	e000      	b.n	8001976 <SD_disk_ioctl+0x246>
 8001974:	bf00      	nop
 8001976:	f7ff fb3f 	bl	8000ff8 <DESELECT>
 800197a:	f7ff fb63 	bl	8001044 <SPI_RxByte>
 800197e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001982:	4618      	mov	r0, r3
 8001984:	372c      	adds	r7, #44	@ 0x2c
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000

08001990 <MX_GPIO_Init>:
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b2:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	4a35      	ldr	r2, [pc, #212]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ca:	4b33      	ldr	r3, [pc, #204]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019da:	4a2f      	ldr	r2, [pc, #188]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	4a29      	ldr	r2, [pc, #164]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <MX_GPIO_Init+0x108>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	2110      	movs	r1, #16
 8001a0a:	4824      	ldr	r0, [pc, #144]	@ (8001a9c <MX_GPIO_Init+0x10c>)
 8001a0c:	f002 fcae 	bl	800436c <HAL_GPIO_WritePin>
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001a16:	4822      	ldr	r0, [pc, #136]	@ (8001aa0 <MX_GPIO_Init+0x110>)
 8001a18:	f002 fca8 	bl	800436c <HAL_GPIO_WritePin>
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	481a      	ldr	r0, [pc, #104]	@ (8001a9c <MX_GPIO_Init+0x10c>)
 8001a34:	f002 fb18 	bl	8004068 <HAL_GPIO_Init>
 8001a38:	2306      	movs	r3, #6
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4814      	ldr	r0, [pc, #80]	@ (8001aa0 <MX_GPIO_Init+0x110>)
 8001a4e:	f002 fb0b 	bl	8004068 <HAL_GPIO_Init>
 8001a52:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <MX_GPIO_Init+0x110>)
 8001a6c:	f002 fafc 	bl	8004068 <HAL_GPIO_Init>
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2007      	movs	r0, #7
 8001a76:	f002 f848 	bl	8003b0a <HAL_NVIC_SetPriority>
 8001a7a:	2007      	movs	r0, #7
 8001a7c:	f002 f85f 	bl	8003b3e <HAL_NVIC_EnableIRQ>
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2008      	movs	r0, #8
 8001a86:	f002 f840 	bl	8003b0a <HAL_NVIC_SetPriority>
 8001a8a:	2008      	movs	r0, #8
 8001a8c:	f002 f857 	bl	8003b3e <HAL_NVIC_EnableIRQ>
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	@ 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000800 	.word	0x48000800
 8001aa0:	48000400 	.word	0x48000400

08001aa4 <MX_I2C3_Init>:
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <MX_I2C3_Init+0x78>)
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b20 <MX_I2C3_Init+0x7c>)
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	621a      	str	r2, [r3, #32]
 8001ade:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001ae0:	f002 fc99 	bl	8004416 <HAL_I2C_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_I2C3_Init+0x4a>
 8001aea:	f000 f980 	bl	8001dee <Error_Handler>
 8001aee:	2100      	movs	r1, #0
 8001af0:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001af2:	f002 fd2b 	bl	800454c <HAL_I2CEx_ConfigAnalogFilter>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_I2C3_Init+0x5c>
 8001afc:	f000 f977 	bl	8001dee <Error_Handler>
 8001b00:	2100      	movs	r1, #0
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <MX_I2C3_Init+0x74>)
 8001b04:	f002 fd6d 	bl	80045e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_I2C3_Init+0x6e>
 8001b0e:	f000 f96e 	bl	8001dee <Error_Handler>
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000110 	.word	0x20000110
 8001b1c:	40007800 	.word	0x40007800
 8001b20:	10b17db5 	.word	0x10b17db5

08001b24 <HAL_I2C_MspInit>:
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b09c      	sub	sp, #112	@ 0x70
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	2244      	movs	r2, #68	@ 0x44
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f009 f936 	bl	800adb6 <memset>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001c08 <HAL_I2C_MspInit+0xe4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d155      	bne.n	8001c00 <HAL_I2C_MspInit+0xdc>
 8001b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fc60 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_MspInit+0x4e>
 8001b6e:	f000 f93e 	bl	8001dee <Error_Handler>
 8001b72:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	4a25      	ldr	r2, [pc, #148]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7e:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ba8:	2312      	movs	r3, #18
 8001baa:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bac:	2300      	movs	r3, #0
 8001bae:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001bb8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc2:	f002 fa51 	bl	8004068 <HAL_GPIO_Init>
 8001bc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bcc:	2312      	movs	r3, #18
 8001bce:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001bd8:	2308      	movs	r3, #8
 8001bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001bdc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001be0:	4619      	mov	r1, r3
 8001be2:	480b      	ldr	r0, [pc, #44]	@ (8001c10 <HAL_I2C_MspInit+0xec>)
 8001be4:	f002 fa40 	bl	8004068 <HAL_GPIO_Init>
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001bee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_I2C_MspInit+0xe8>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	bf00      	nop
 8001c02:	3770      	adds	r7, #112	@ 0x70
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40007800 	.word	0x40007800
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	48000800 	.word	0x48000800

08001c14 <main>:
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	f000 fdf5 	bl	8002806 <HAL_Init>
 8001c1c:	f000 f896 	bl	8001d4c <SystemClock_Config>
 8001c20:	f7ff feb6 	bl	8001990 <MX_GPIO_Init>
 8001c24:	f7ff f99a 	bl	8000f5c <MX_DMA_Init>
 8001c28:	f000 f8e8 	bl	8001dfc <MX_SPI1_Init>
 8001c2c:	f000 fd66 	bl	80026fc <MX_USB_PCD_Init>
 8001c30:	f006 fd48 	bl	80086c4 <MX_FATFS_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <main+0x2a>
 8001c3a:	f000 f8d8 	bl	8001dee <Error_Handler>
 8001c3e:	f7ff ff31 	bl	8001aa4 <MX_I2C3_Init>
 8001c42:	f000 fb75 	bl	8002330 <MX_LPUART1_UART_Init>
 8001c46:	f7ff f84d 	bl	8000ce4 <MX_ADC1_Init>
 8001c4a:	f000 fbbb 	bl	80023c4 <MX_USART1_UART_Init>
 8001c4e:	f000 fa3d 	bl	80020cc <MX_TIM3_Init>
 8001c52:	f000 fab3 	bl	80021bc <MX_TIM4_Init>
 8001c56:	2200      	movs	r2, #0
 8001c58:	4930      	ldr	r1, [pc, #192]	@ (8001d1c <main+0x108>)
 8001c5a:	4831      	ldr	r0, [pc, #196]	@ (8001d20 <main+0x10c>)
 8001c5c:	f008 fae2 	bl	800a224 <f_mount>
 8001c60:	2213      	movs	r2, #19
 8001c62:	4930      	ldr	r1, [pc, #192]	@ (8001d24 <main+0x110>)
 8001c64:	4830      	ldr	r0, [pc, #192]	@ (8001d28 <main+0x114>)
 8001c66:	f008 fb23 	bl	800a2b0 <f_open>
 8001c6a:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <main+0x118>)
 8001c6c:	4930      	ldr	r1, [pc, #192]	@ (8001d30 <main+0x11c>)
 8001c6e:	482b      	ldr	r0, [pc, #172]	@ (8001d1c <main+0x108>)
 8001c70:	f008 fef5 	bl	800aa5e <f_getfree>
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <main+0x118>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	3b02      	subs	r3, #2
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d2c <main+0x118>)
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	8952      	ldrh	r2, [r2, #10]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc08 	bl	800049c <__aeabi_ui2d>
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <main+0x120>)
 8001c92:	f7fe fc7d 	bl	8000590 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe fe89 	bl	80009b4 <__aeabi_d2uiz>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a24      	ldr	r2, [pc, #144]	@ (8001d38 <main+0x124>)
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <main+0x118>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <main+0x11c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fbef 	bl	800049c <__aeabi_ui2d>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <main+0x120>)
 8001cc4:	f7fe fc64 	bl	8000590 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe fe70 	bl	80009b4 <__aeabi_d2uiz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <main+0x128>)
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4913      	ldr	r1, [pc, #76]	@ (8001d28 <main+0x114>)
 8001cdc:	4818      	ldr	r0, [pc, #96]	@ (8001d40 <main+0x12c>)
 8001cde:	f008 ffea 	bl	800acb6 <f_puts>
 8001ce2:	4911      	ldr	r1, [pc, #68]	@ (8001d28 <main+0x114>)
 8001ce4:	4817      	ldr	r0, [pc, #92]	@ (8001d44 <main+0x130>)
 8001ce6:	f008 ffe6 	bl	800acb6 <f_puts>
 8001cea:	480f      	ldr	r0, [pc, #60]	@ (8001d28 <main+0x114>)
 8001cec:	f008 fe8d 	bl	800aa0a <f_close>
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	490a      	ldr	r1, [pc, #40]	@ (8001d1c <main+0x108>)
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f008 fa95 	bl	800a224 <f_mount>
 8001cfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cfe:	4812      	ldr	r0, [pc, #72]	@ (8001d48 <main+0x134>)
 8001d00:	f002 fb4c 	bl	800439c <HAL_GPIO_TogglePin>
 8001d04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d08:	480f      	ldr	r0, [pc, #60]	@ (8001d48 <main+0x134>)
 8001d0a:	f002 fb47 	bl	800439c <HAL_GPIO_TogglePin>
 8001d0e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001d12:	f000 fde9 	bl	80028e8 <HAL_Delay>
 8001d16:	bf00      	nop
 8001d18:	e7ef      	b.n	8001cfa <main+0xe6>
 8001d1a:	bf00      	nop
 8001d1c:	0800ae28 	.word	0x0800ae28
 8001d20:	20000164 	.word	0x20000164
 8001d24:	0800ae2c 	.word	0x0800ae2c
 8001d28:	20000398 	.word	0x20000398
 8001d2c:	20000394 	.word	0x20000394
 8001d30:	200005c8 	.word	0x200005c8
 8001d34:	3fe00000 	.word	0x3fe00000
 8001d38:	200005cc 	.word	0x200005cc
 8001d3c:	200005d0 	.word	0x200005d0
 8001d40:	0800ae38 	.word	0x0800ae38
 8001d44:	0800ae58 	.word	0x0800ae58
 8001d48:	48000400 	.word	0x48000400

08001d4c <SystemClock_Config>:
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	@ 0x50
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	2238      	movs	r2, #56	@ 0x38
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f009 f82b 	bl	800adb6 <memset>
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d72:	f002 fd7b 	bl	800486c <HAL_PWREx_ControlVoltageScaling>
 8001d76:	2323      	movs	r3, #35	@ 0x23
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d86:	2340      	movs	r3, #64	@ 0x40
 8001d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d8e:	2302      	movs	r3, #2
 8001d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d92:	2303      	movs	r3, #3
 8001d94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d96:	2301      	movs	r3, #1
 8001d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d9e:	2302      	movs	r3, #2
 8001da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001da2:	2302      	movs	r3, #2
 8001da4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001da6:	2302      	movs	r3, #2
 8001da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001daa:	f107 0318 	add.w	r3, r7, #24
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fe10 	bl	80049d4 <HAL_RCC_OscConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x72>
 8001dba:	f000 f818 	bl	8001dee <Error_Handler>
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 f90e 	bl	8004ff8 <HAL_RCC_ClockConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0x9a>
 8001de2:	f000 f804 	bl	8001dee <Error_Handler>
 8001de6:	bf00      	nop
 8001de8:	3750      	adds	r7, #80	@ 0x50
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <Error_Handler>:
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	b672      	cpsid	i
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	e7fd      	b.n	8001df6 <Error_Handler+0x8>
	...

08001dfc <MX_SPI1_Init>:
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e02:	4a1c      	ldr	r2, [pc, #112]	@ (8001e74 <MX_SPI1_Init+0x78>)
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
 8001e22:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e2e:	619a      	str	r2, [r3, #24]
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e32:	2210      	movs	r2, #16
 8001e34:	61da      	str	r2, [r3, #28]
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e42:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e48:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e56:	2208      	movs	r2, #8
 8001e58:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_SPI1_Init+0x74>)
 8001e5c:	f003 fcd4 	bl	8005808 <HAL_SPI_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_SPI1_Init+0x6e>
 8001e66:	f7ff ffc2 	bl	8001dee <Error_Handler>
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200005d4 	.word	0x200005d4
 8001e74:	40013000 	.word	0x40013000

08001e78 <HAL_SPI_MspInit>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	@ 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a17      	ldr	r2, [pc, #92]	@ (8001ef4 <HAL_SPI_MspInit+0x7c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d128      	bne.n	8001eec <HAL_SPI_MspInit+0x74>
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9e:	4a16      	ldr	r2, [pc, #88]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001ea0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_SPI_MspInit+0x80>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	23e0      	movs	r3, #224	@ 0xe0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	2305      	movs	r3, #5
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee8:	f002 f8be 	bl	8004068 <HAL_GPIO_Init>
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	@ 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40013000 	.word	0x40013000
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_MspInit>:
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	4a0e      	ldr	r2, [pc, #56]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_MspInit+0x44>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f002 fd3f 	bl	80049b4 <HAL_PWREx_DisableUCPDDeadBattery>
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <SDTimer_Handler>:
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <SDTimer_Handler+0x40>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <SDTimer_Handler+0x1c>
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <SDTimer_Handler+0x40>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <SDTimer_Handler+0x40>)
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <SDTimer_Handler+0x44>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d006      	beq.n	8001f78 <SDTimer_Handler+0x34>
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <SDTimer_Handler+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <SDTimer_Handler+0x44>)
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000010c 	.word	0x2000010c
 8001f88:	2000010d 	.word	0x2000010d

08001f8c <NMI_Handler>:
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <NMI_Handler+0x4>

08001f94 <HardFault_Handler>:
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa4 <BusFault_Handler>:
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb4 <SVC_Handler>:
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <DebugMon_Handler>:
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <PendSV_Handler>:
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Handler>:
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <SysTick_Handler+0x30>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <SysTick_Handler+0x30>)
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <SysTick_Handler+0x30>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b09      	cmp	r3, #9
 8001ffa:	d904      	bls.n	8002006 <SysTick_Handler+0x26>
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <SysTick_Handler+0x30>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	f7ff ff9f 	bl	8001f44 <SDTimer_Handler>
 8002006:	f000 fc51 	bl	80028ac <HAL_IncTick>
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000638 	.word	0x20000638

08002014 <EXTI1_IRQHandler>:
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
 8002018:	2002      	movs	r0, #2
 800201a:	f002 f9d9 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}

08002022 <EXTI2_IRQHandler>:
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
 8002026:	2004      	movs	r0, #4
 8002028:	f002 f9d2 	bl	80043d0 <HAL_GPIO_EXTI_IRQHandler>
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <DMA1_Channel1_IRQHandler>:
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <DMA1_Channel1_IRQHandler+0x10>)
 8002036:	f001 ff05 	bl	8003e44 <HAL_DMA_IRQHandler>
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200007fc 	.word	0x200007fc

08002044 <DMA1_Channel2_IRQHandler>:
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <DMA1_Channel2_IRQHandler+0x10>)
 800204a:	f001 fefb 	bl	8003e44 <HAL_DMA_IRQHandler>
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000085c 	.word	0x2000085c

08002058 <DMA1_Channel3_IRQHandler>:
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <DMA1_Channel3_IRQHandler+0x10>)
 800205e:	f001 fef1 	bl	8003e44 <HAL_DMA_IRQHandler>
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200000ac 	.word	0x200000ac

0800206c <DMA1_Channel4_IRQHandler>:
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
 8002070:	4802      	ldr	r0, [pc, #8]	@ (800207c <DMA1_Channel4_IRQHandler+0x10>)
 8002072:	f001 fee7 	bl	8003e44 <HAL_DMA_IRQHandler>
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200008bc 	.word	0x200008bc

08002080 <USART1_IRQHandler>:
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <USART1_IRQHandler+0x10>)
 8002086:	f005 f937 	bl	80072f8 <HAL_UART_IRQHandler>
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000768 	.word	0x20000768

08002094 <LPUART1_IRQHandler>:
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <LPUART1_IRQHandler+0x10>)
 800209a:	f005 f92d 	bl	80072f8 <HAL_UART_IRQHandler>
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200006d4 	.word	0x200006d4

080020a8 <SystemInit>:
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <MX_TIM3_Init>:
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08e      	sub	sp, #56	@ 0x38
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	463b      	mov	r3, r7
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	611a      	str	r2, [r3, #16]
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	619a      	str	r2, [r3, #24]
 80020fe:	4b2d      	ldr	r3, [pc, #180]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002100:	4a2d      	ldr	r2, [pc, #180]	@ (80021b8 <MX_TIM3_Init+0xec>)
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	4b2b      	ldr	r3, [pc, #172]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	4b2a      	ldr	r3, [pc, #168]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	4b26      	ldr	r3, [pc, #152]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
 800211e:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
 8002124:	4823      	ldr	r0, [pc, #140]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002126:	f004 f921 	bl	800636c <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM3_Init+0x68>
 8002130:	f7ff fe5d 	bl	8001dee <Error_Handler>
 8002134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800213a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800213e:	4619      	mov	r1, r3
 8002140:	481c      	ldr	r0, [pc, #112]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002142:	f004 fadf 	bl	8006704 <HAL_TIM_ConfigClockSource>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM3_Init+0x84>
 800214c:	f7ff fe4f 	bl	8001dee <Error_Handler>
 8002150:	4818      	ldr	r0, [pc, #96]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002152:	f004 f962 	bl	800641a <HAL_TIM_PWM_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM3_Init+0x94>
 800215c:	f7ff fe47 	bl	8001dee <Error_Handler>
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	4811      	ldr	r0, [pc, #68]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002170:	f004 fff0 	bl	8007154 <HAL_TIMEx_MasterConfigSynchronization>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM3_Init+0xb2>
 800217a:	f7ff fe38 	bl	8001dee <Error_Handler>
 800217e:	2360      	movs	r3, #96	@ 0x60
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	4619      	mov	r1, r3
 8002194:	4807      	ldr	r0, [pc, #28]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 8002196:	f004 f9a1 	bl	80064dc <HAL_TIM_PWM_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM3_Init+0xd8>
 80021a0:	f7ff fe25 	bl	8001dee <Error_Handler>
 80021a4:	4803      	ldr	r0, [pc, #12]	@ (80021b4 <MX_TIM3_Init+0xe8>)
 80021a6:	f000 f88b 	bl	80022c0 <HAL_TIM_MspPostInit>
 80021aa:	bf00      	nop
 80021ac:	3738      	adds	r7, #56	@ 0x38
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000063c 	.word	0x2000063c
 80021b8:	40000400 	.word	0x40000400

080021bc <MX_TIM4_Init>:
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	f107 0310 	add.w	r3, r7, #16
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002254 <MX_TIM4_Init+0x98>)
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021e2:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	4b18      	ldr	r3, [pc, #96]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021f0:	2263      	movs	r2, #99	@ 0x63
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <MX_TIM4_Init+0x94>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
 8002200:	4813      	ldr	r0, [pc, #76]	@ (8002250 <MX_TIM4_Init+0x94>)
 8002202:	f004 f8b3 	bl	800636c <HAL_TIM_Base_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM4_Init+0x54>
 800220c:	f7ff fdef 	bl	8001dee <Error_Handler>
 8002210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	4619      	mov	r1, r3
 800221c:	480c      	ldr	r0, [pc, #48]	@ (8002250 <MX_TIM4_Init+0x94>)
 800221e:	f004 fa71 	bl	8006704 <HAL_TIM_ConfigClockSource>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM4_Init+0x70>
 8002228:	f7ff fde1 	bl	8001dee <Error_Handler>
 800222c:	2320      	movs	r3, #32
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	@ (8002250 <MX_TIM4_Init+0x94>)
 800223a:	f004 ff8b 	bl	8007154 <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM4_Init+0x8c>
 8002244:	f7ff fdd3 	bl	8001dee <Error_Handler>
 8002248:	bf00      	nop
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000688 	.word	0x20000688
 8002254:	40000800 	.word	0x40000800

08002258 <HAL_TIM_Base_MspInit>:
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <HAL_TIM_Base_MspInit+0x5c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10c      	bne.n	8002284 <HAL_TIM_Base_MspInit+0x2c>
 800226a:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6593      	str	r3, [r2, #88]	@ 0x58
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	e010      	b.n	80022a6 <HAL_TIM_Base_MspInit+0x4e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0c      	ldr	r2, [pc, #48]	@ (80022bc <HAL_TIM_Base_MspInit+0x64>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10b      	bne.n	80022a6 <HAL_TIM_Base_MspInit+0x4e>
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6593      	str	r3, [r2, #88]	@ 0x58
 800229a:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <HAL_TIM_Base_MspInit+0x60>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIM_MspPostInit>:
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a11      	ldr	r2, [pc, #68]	@ (8002324 <HAL_TIM_MspPostInit+0x64>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d11b      	bne.n	800231a <HAL_TIM_MspPostInit+0x5a>
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_TIM_MspPostInit+0x68>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <HAL_TIM_MspPostInit+0x68>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_TIM_MspPostInit+0x68>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2340      	movs	r3, #64	@ 0x40
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	2302      	movs	r3, #2
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	@ (800232c <HAL_TIM_MspPostInit+0x6c>)
 8002316:	f001 fea7 	bl	8004068 <HAL_GPIO_Init>
 800231a:	bf00      	nop
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40000400 	.word	0x40000400
 8002328:	40021000 	.word	0x40021000
 800232c:	48000800 	.word	0x48000800

08002330 <MX_LPUART1_UART_Init>:
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
 8002334:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002336:	4a21      	ldr	r2, [pc, #132]	@ (80023bc <MX_LPUART1_UART_Init+0x8c>)
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 800233c:	4a20      	ldr	r2, [pc, #128]	@ (80023c0 <MX_LPUART1_UART_Init+0x90>)
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	4b1c      	ldr	r3, [pc, #112]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
 8002352:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002354:	220c      	movs	r2, #12
 8002356:	615a      	str	r2, [r3, #20]
 8002358:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
 800235e:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
 8002364:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002366:	2200      	movs	r2, #0
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24
 800236a:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 800236c:	2200      	movs	r2, #0
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002370:	4811      	ldr	r0, [pc, #68]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002372:	f004 ff71 	bl	8007258 <HAL_UART_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_LPUART1_UART_Init+0x50>
 800237c:	f7ff fd37 	bl	8001dee <Error_Handler>
 8002380:	2100      	movs	r1, #0
 8002382:	480d      	ldr	r0, [pc, #52]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002384:	f006 f899 	bl	80084ba <HAL_UARTEx_SetTxFifoThreshold>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_LPUART1_UART_Init+0x62>
 800238e:	f7ff fd2e 	bl	8001dee <Error_Handler>
 8002392:	2100      	movs	r1, #0
 8002394:	4808      	ldr	r0, [pc, #32]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 8002396:	f006 f8ce 	bl	8008536 <HAL_UARTEx_SetRxFifoThreshold>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_LPUART1_UART_Init+0x74>
 80023a0:	f7ff fd25 	bl	8001dee <Error_Handler>
 80023a4:	4804      	ldr	r0, [pc, #16]	@ (80023b8 <MX_LPUART1_UART_Init+0x88>)
 80023a6:	f006 f84f 	bl	8008448 <HAL_UARTEx_DisableFifoMode>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_LPUART1_UART_Init+0x84>
 80023b0:	f7ff fd1d 	bl	8001dee <Error_Handler>
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200006d4 	.word	0x200006d4
 80023bc:	40008000 	.word	0x40008000
 80023c0:	00033324 	.word	0x00033324

080023c4 <MX_USART1_UART_Init>:
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023ca:	4a23      	ldr	r2, [pc, #140]	@ (8002458 <MX_USART1_UART_Init+0x94>)
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
 80023e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023ea:	220c      	movs	r2, #12
 80023ec:	615a      	str	r2, [r3, #20]
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
 80023f4:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
 80023fa:	4b16      	ldr	r3, [pc, #88]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
 8002400:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24
 8002406:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002408:	2200      	movs	r2, #0
 800240a:	629a      	str	r2, [r3, #40]	@ 0x28
 800240c:	4811      	ldr	r0, [pc, #68]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 800240e:	f004 ff23 	bl	8007258 <HAL_UART_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_USART1_UART_Init+0x58>
 8002418:	f7ff fce9 	bl	8001dee <Error_Handler>
 800241c:	2100      	movs	r1, #0
 800241e:	480d      	ldr	r0, [pc, #52]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002420:	f006 f84b 	bl	80084ba <HAL_UARTEx_SetTxFifoThreshold>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_USART1_UART_Init+0x6a>
 800242a:	f7ff fce0 	bl	8001dee <Error_Handler>
 800242e:	2100      	movs	r1, #0
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002432:	f006 f880 	bl	8008536 <HAL_UARTEx_SetRxFifoThreshold>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_USART1_UART_Init+0x7c>
 800243c:	f7ff fcd7 	bl	8001dee <Error_Handler>
 8002440:	4804      	ldr	r0, [pc, #16]	@ (8002454 <MX_USART1_UART_Init+0x90>)
 8002442:	f006 f801 	bl	8008448 <HAL_UARTEx_DisableFifoMode>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_USART1_UART_Init+0x8c>
 800244c:	f7ff fccf 	bl	8001dee <Error_Handler>
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000768 	.word	0x20000768
 8002458:	40013800 	.word	0x40013800

0800245c <HAL_UART_MspInit>:
 800245c:	b580      	push	{r7, lr}
 800245e:	b09e      	sub	sp, #120	@ 0x78
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
 8002474:	f107 0320 	add.w	r3, r7, #32
 8002478:	2244      	movs	r2, #68	@ 0x44
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f008 fc9a 	bl	800adb6 <memset>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a93      	ldr	r2, [pc, #588]	@ (80026d4 <HAL_UART_MspInit+0x278>)
 8002488:	4293      	cmp	r3, r2
 800248a:	f040 80b0 	bne.w	80025ee <HAL_UART_MspInit+0x192>
 800248e:	2320      	movs	r3, #32
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	2300      	movs	r3, #0
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
 8002496:	f107 0320 	add.w	r3, r7, #32
 800249a:	4618      	mov	r0, r3
 800249c:	f002 ffc4 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_UART_MspInit+0x4e>
 80024a6:	f7ff fca2 	bl	8001dee <Error_Handler>
 80024aa:	4b8b      	ldr	r3, [pc, #556]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ae:	4a8a      	ldr	r2, [pc, #552]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80024b6:	4b88      	ldr	r3, [pc, #544]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4b85      	ldr	r3, [pc, #532]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	4a84      	ldr	r2, [pc, #528]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ce:	4b82      	ldr	r3, [pc, #520]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	4b7f      	ldr	r3, [pc, #508]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	4a7e      	ldr	r2, [pc, #504]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e6:	4b7c      	ldr	r3, [pc, #496]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2308      	movs	r3, #8
 80024f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80024f6:	2302      	movs	r3, #2
 80024f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024fa:	2300      	movs	r3, #0
 80024fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024fe:	2300      	movs	r3, #0
 8002500:	673b      	str	r3, [r7, #112]	@ 0x70
 8002502:	230c      	movs	r3, #12
 8002504:	677b      	str	r3, [r7, #116]	@ 0x74
 8002506:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002510:	f001 fdaa 	bl	8004068 <HAL_GPIO_Init>
 8002514:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002518:	667b      	str	r3, [r7, #100]	@ 0x64
 800251a:	2302      	movs	r3, #2
 800251c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800251e:	2300      	movs	r3, #0
 8002520:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002522:	2300      	movs	r3, #0
 8002524:	673b      	str	r3, [r7, #112]	@ 0x70
 8002526:	2308      	movs	r3, #8
 8002528:	677b      	str	r3, [r7, #116]	@ 0x74
 800252a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800252e:	4619      	mov	r1, r3
 8002530:	486a      	ldr	r0, [pc, #424]	@ (80026dc <HAL_UART_MspInit+0x280>)
 8002532:	f001 fd99 	bl	8004068 <HAL_GPIO_Init>
 8002536:	4b6a      	ldr	r3, [pc, #424]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002538:	4a6a      	ldr	r2, [pc, #424]	@ (80026e4 <HAL_UART_MspInit+0x288>)
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	4b68      	ldr	r3, [pc, #416]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 800253e:	2222      	movs	r2, #34	@ 0x22
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	4b67      	ldr	r3, [pc, #412]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	4b65      	ldr	r3, [pc, #404]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	4b64      	ldr	r3, [pc, #400]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002550:	2280      	movs	r2, #128	@ 0x80
 8002552:	611a      	str	r2, [r3, #16]
 8002554:	4b62      	ldr	r3, [pc, #392]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]
 800255a:	4b61      	ldr	r3, [pc, #388]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
 8002560:	4b5f      	ldr	r3, [pc, #380]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
 8002566:	4b5e      	ldr	r3, [pc, #376]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]
 800256c:	485c      	ldr	r0, [pc, #368]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 800256e:	f001 fb01 	bl	8003b74 <HAL_DMA_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_UART_MspInit+0x120>
 8002578:	f7ff fc39 	bl	8001dee <Error_Handler>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a58      	ldr	r2, [pc, #352]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002584:	4a56      	ldr	r2, [pc, #344]	@ (80026e0 <HAL_UART_MspInit+0x284>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6293      	str	r3, [r2, #40]	@ 0x28
 800258a:	4b57      	ldr	r3, [pc, #348]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 800258c:	4a57      	ldr	r2, [pc, #348]	@ (80026ec <HAL_UART_MspInit+0x290>)
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b55      	ldr	r3, [pc, #340]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 8002592:	2223      	movs	r2, #35	@ 0x23
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 8002598:	2210      	movs	r2, #16
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	4b52      	ldr	r3, [pc, #328]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	4b51      	ldr	r3, [pc, #324]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025a4:	2280      	movs	r2, #128	@ 0x80
 80025a6:	611a      	str	r2, [r3, #16]
 80025a8:	4b4f      	ldr	r3, [pc, #316]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	615a      	str	r2, [r3, #20]
 80025ae:	4b4e      	ldr	r3, [pc, #312]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
 80025b4:	4b4c      	ldr	r3, [pc, #304]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
 80025ba:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
 80025c0:	4849      	ldr	r0, [pc, #292]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025c2:	f001 fad7 	bl	8003b74 <HAL_DMA_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_UART_MspInit+0x174>
 80025cc:	f7ff fc0f 	bl	8001dee <Error_Handler>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a45      	ldr	r2, [pc, #276]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025d4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025d6:	4a44      	ldr	r2, [pc, #272]	@ (80026e8 <HAL_UART_MspInit+0x28c>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6293      	str	r3, [r2, #40]	@ 0x28
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	205b      	movs	r0, #91	@ 0x5b
 80025e2:	f001 fa92 	bl	8003b0a <HAL_NVIC_SetPriority>
 80025e6:	205b      	movs	r0, #91	@ 0x5b
 80025e8:	f001 faa9 	bl	8003b3e <HAL_NVIC_EnableIRQ>
 80025ec:	e06e      	b.n	80026cc <HAL_UART_MspInit+0x270>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a3f      	ldr	r2, [pc, #252]	@ (80026f0 <HAL_UART_MspInit+0x294>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d169      	bne.n	80026cc <HAL_UART_MspInit+0x270>
 80025f8:	2301      	movs	r3, #1
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	2302      	movs	r3, #2
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	4618      	mov	r0, r3
 8002606:	f002 ff0f 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_UART_MspInit+0x1b8>
 8002610:	f7ff fbed 	bl	8001dee <Error_Handler>
 8002614:	4b30      	ldr	r3, [pc, #192]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 8002616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002618:	4a2f      	ldr	r2, [pc, #188]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002620:	4b2d      	ldr	r3, [pc, #180]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 8002622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 800262e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002630:	4a29      	ldr	r2, [pc, #164]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002638:	4b27      	ldr	r3, [pc, #156]	@ (80026d8 <HAL_UART_MspInit+0x27c>)
 800263a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002648:	667b      	str	r3, [r7, #100]	@ 0x64
 800264a:	2302      	movs	r3, #2
 800264c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800264e:	2300      	movs	r3, #0
 8002650:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002652:	2300      	movs	r3, #0
 8002654:	673b      	str	r3, [r7, #112]	@ 0x70
 8002656:	2307      	movs	r3, #7
 8002658:	677b      	str	r3, [r7, #116]	@ 0x74
 800265a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800265e:	4619      	mov	r1, r3
 8002660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002664:	f001 fd00 	bl	8004068 <HAL_GPIO_Init>
 8002668:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 800266a:	4a23      	ldr	r2, [pc, #140]	@ (80026f8 <HAL_UART_MspInit+0x29c>)
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002670:	2218      	movs	r2, #24
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	4b1f      	ldr	r3, [pc, #124]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
 8002680:	4b1c      	ldr	r3, [pc, #112]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
 8002692:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 8002694:	2220      	movs	r2, #32
 8002696:	61da      	str	r2, [r3, #28]
 8002698:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 800269a:	2200      	movs	r2, #0
 800269c:	621a      	str	r2, [r3, #32]
 800269e:	4815      	ldr	r0, [pc, #84]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 80026a0:	f001 fa68 	bl	8003b74 <HAL_DMA_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_UART_MspInit+0x252>
 80026aa:	f7ff fba0 	bl	8001dee <Error_Handler>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a10      	ldr	r2, [pc, #64]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 80026b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026b6:	4a0f      	ldr	r2, [pc, #60]	@ (80026f4 <HAL_UART_MspInit+0x298>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6293      	str	r3, [r2, #40]	@ 0x28
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	2025      	movs	r0, #37	@ 0x25
 80026c2:	f001 fa22 	bl	8003b0a <HAL_NVIC_SetPriority>
 80026c6:	2025      	movs	r0, #37	@ 0x25
 80026c8:	f001 fa39 	bl	8003b3e <HAL_NVIC_EnableIRQ>
 80026cc:	bf00      	nop
 80026ce:	3778      	adds	r7, #120	@ 0x78
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40008000 	.word	0x40008000
 80026d8:	40021000 	.word	0x40021000
 80026dc:	48000400 	.word	0x48000400
 80026e0:	200007fc 	.word	0x200007fc
 80026e4:	40020008 	.word	0x40020008
 80026e8:	2000085c 	.word	0x2000085c
 80026ec:	4002001c 	.word	0x4002001c
 80026f0:	40013800 	.word	0x40013800
 80026f4:	200008bc 	.word	0x200008bc
 80026f8:	40020044 	.word	0x40020044

080026fc <MX_USB_PCD_Init>:
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002702:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <MX_USB_PCD_Init+0x4c>)
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002708:	2208      	movs	r2, #8
 800270a:	711a      	strb	r2, [r3, #4]
 800270c:	4b0d      	ldr	r3, [pc, #52]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 800270e:	2202      	movs	r2, #2
 8002710:	715a      	strb	r2, [r3, #5]
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002714:	2202      	movs	r2, #2
 8002716:	71da      	strb	r2, [r3, #7]
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 800271a:	2200      	movs	r2, #0
 800271c:	721a      	strb	r2, [r3, #8]
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002720:	2200      	movs	r2, #0
 8002722:	725a      	strb	r2, [r3, #9]
 8002724:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002726:	2200      	movs	r2, #0
 8002728:	729a      	strb	r2, [r3, #10]
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 800272c:	2200      	movs	r2, #0
 800272e:	72da      	strb	r2, [r3, #11]
 8002730:	4804      	ldr	r0, [pc, #16]	@ (8002744 <MX_USB_PCD_Init+0x48>)
 8002732:	f001 ffa2 	bl	800467a <HAL_PCD_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_USB_PCD_Init+0x44>
 800273c:	f7ff fb57 	bl	8001dee <Error_Handler>
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000091c 	.word	0x2000091c
 8002748:	40005c00 	.word	0x40005c00

0800274c <HAL_PCD_MspInit>:
 800274c:	b580      	push	{r7, lr}
 800274e:	b094      	sub	sp, #80	@ 0x50
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	2244      	movs	r2, #68	@ 0x44
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f008 fb2a 	bl	800adb6 <memset>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <HAL_PCD_MspInit+0x60>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d11a      	bne.n	80027a2 <HAL_PCD_MspInit+0x56>
 800276c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	2300      	movs	r3, #0
 8002774:	643b      	str	r3, [r7, #64]	@ 0x40
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	4618      	mov	r0, r3
 800277c:	f002 fe54 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_PCD_MspInit+0x3e>
 8002786:	f7ff fb32 	bl	8001dee <Error_Handler>
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_PCD_MspInit+0x64>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	4a08      	ldr	r2, [pc, #32]	@ (80027b0 <HAL_PCD_MspInit+0x64>)
 8002790:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002794:	6593      	str	r3, [r2, #88]	@ 0x58
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_PCD_MspInit+0x64>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	bf00      	nop
 80027a4:	3750      	adds	r7, #80	@ 0x50
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40005c00 	.word	0x40005c00
 80027b0:	40021000 	.word	0x40021000

080027b4 <Reset_Handler>:
 80027b4:	480d      	ldr	r0, [pc, #52]	@ (80027ec <LoopForever+0x2>)
 80027b6:	4685      	mov	sp, r0
 80027b8:	f7ff fc76 	bl	80020a8 <SystemInit>
 80027bc:	480c      	ldr	r0, [pc, #48]	@ (80027f0 <LoopForever+0x6>)
 80027be:	490d      	ldr	r1, [pc, #52]	@ (80027f4 <LoopForever+0xa>)
 80027c0:	4a0d      	ldr	r2, [pc, #52]	@ (80027f8 <LoopForever+0xe>)
 80027c2:	2300      	movs	r3, #0
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:
 80027c6:	58d4      	ldr	r4, [r2, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:
 80027cc:	18c4      	adds	r4, r0, r3
 80027ce:	428c      	cmp	r4, r1
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <LoopForever+0x12>)
 80027d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002800 <LoopForever+0x16>)
 80027d6:	2300      	movs	r3, #0
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:
 80027de:	42a2      	cmp	r2, r4
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>
 80027e2:	f008 faf1 	bl	800adc8 <__libc_init_array>
 80027e6:	f7ff fa15 	bl	8001c14 <main>

080027ea <LoopForever>:
 80027ea:	e7fe      	b.n	80027ea <LoopForever>
 80027ec:	20008000 	.word	0x20008000
 80027f0:	20000000 	.word	0x20000000
 80027f4:	20000024 	.word	0x20000024
 80027f8:	0800af84 	.word	0x0800af84
 80027fc:	20000024 	.word	0x20000024
 8002800:	20000c38 	.word	0x20000c38

08002804 <ADC1_2_IRQHandler>:
 8002804:	e7fe      	b.n	8002804 <ADC1_2_IRQHandler>

08002806 <HAL_Init>:
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	2300      	movs	r3, #0
 800280e:	71fb      	strb	r3, [r7, #7]
 8002810:	2003      	movs	r0, #3
 8002812:	f001 f96f 	bl	8003af4 <HAL_NVIC_SetPriorityGrouping>
 8002816:	200f      	movs	r0, #15
 8002818:	f000 f80e 	bl	8002838 <HAL_InitTick>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_Init+0x22>
 8002822:	2301      	movs	r3, #1
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	e001      	b.n	800282c <HAL_Init+0x26>
 8002828:	f7ff fb68 	bl	8001efc <HAL_MspInit>
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_InitTick>:
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_InitTick+0x68>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d022      	beq.n	8002892 <HAL_InitTick+0x5a>
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <HAL_InitTick+0x6c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <HAL_InitTick+0x68>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002858:	fbb1 f3f3 	udiv	r3, r1, r3
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	4618      	mov	r0, r3
 8002862:	f001 f97a 	bl	8003b5a <HAL_SYSTICK_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10f      	bne.n	800288c <HAL_InitTick+0x54>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	d809      	bhi.n	8002886 <HAL_InitTick+0x4e>
 8002872:	2200      	movs	r2, #0
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	f04f 30ff 	mov.w	r0, #4294967295
 800287a:	f001 f946 	bl	8003b0a <HAL_NVIC_SetPriority>
 800287e:	4a0a      	ldr	r2, [pc, #40]	@ (80028a8 <HAL_InitTick+0x70>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e007      	b.n	8002896 <HAL_InitTick+0x5e>
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	e004      	b.n	8002896 <HAL_InitTick+0x5e>
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	e001      	b.n	8002896 <HAL_InitTick+0x5e>
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000000c 	.word	0x2000000c
 80028a4:	20000004 	.word	0x20000004
 80028a8:	20000008 	.word	0x20000008

080028ac <HAL_IncTick>:
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <HAL_IncTick+0x1c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_IncTick+0x20>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a03      	ldr	r2, [pc, #12]	@ (80028c8 <HAL_IncTick+0x1c>)
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	20000bf8 	.word	0x20000bf8
 80028cc:	2000000c 	.word	0x2000000c

080028d0 <HAL_GetTick>:
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_GetTick+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000bf8 	.word	0x20000bf8

080028e8 <HAL_Delay>:
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	f7ff ffee 	bl	80028d0 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d004      	beq.n	800290c <HAL_Delay+0x24>
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_Delay+0x40>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	bf00      	nop
 800290e:	f7ff ffdf 	bl	80028d0 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	429a      	cmp	r2, r3
 800291c:	d8f7      	bhi.n	800290e <HAL_Delay+0x26>
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000000c 	.word	0x2000000c

0800292c <LL_ADC_SetCommonClock>:
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_SetCommonPathInternalCh>:
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_GetCommonPathInternalCh>:
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_SetOffset>:
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3360      	adds	r3, #96	@ 0x60
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <LL_ADC_SetOffset+0x44>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	03fff000 	.word	0x03fff000

080029dc <LL_ADC_GetOffsetChannel>:
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3360      	adds	r3, #96	@ 0x60
 80029ea:	461a      	mov	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_SetOffsetState>:
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3360      	adds	r3, #96	@ 0x60
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_SetOffsetSign>:
 8002a3e:	b480      	push	{r7}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3360      	adds	r3, #96	@ 0x60
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_SetOffsetSaturation>:
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3360      	adds	r3, #96	@ 0x60
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_ADC_SetSamplingTimeCommonConfig>:
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	615a      	str	r2, [r3, #20]
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_REG_SetSequencerRanks>:
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3330      	adds	r3, #48	@ 0x30
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	211f      	movs	r1, #31
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	401a      	ands	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 011f 	and.w	r1, r3, #31
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	431a      	orrs	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	bf00      	nop
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_SetChannelSamplingTime>:
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3314      	adds	r3, #20
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	0e5b      	lsrs	r3, r3, #25
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	0d1b      	lsrs	r3, r3, #20
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2107      	movs	r1, #7
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	0d1b      	lsrs	r3, r3, #20
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <LL_ADC_SetChannelSingleDiff>:
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0318 	and.w	r3, r3, #24
 8002ba2:	4908      	ldr	r1, [pc, #32]	@ (8002bc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ba4:	40d9      	lsrs	r1, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	400b      	ands	r3, r1
 8002baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	0007ffff 	.word	0x0007ffff

08002bc8 <LL_ADC_DisableDeepPowerDown>:
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002bd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6093      	str	r3, [r2, #8]
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_IsDeepPowerDownEnabled>:
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c00:	d101      	bne.n	8002c06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c06:	2300      	movs	r3, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_EnableInternalRegulator>:
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_IsInternalRegulatorEnabled>:
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c56:	2300      	movs	r3, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_IsEnabled>:
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <LL_ADC_IsEnabled+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_ADC_IsEnabled+0x1a>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_ADC_REG_IsConversionOngoing>:
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d101      	bne.n	8002ca2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_INJ_IsConversionOngoing>:
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d101      	bne.n	8002cc8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_ADC_Init>:
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b089      	sub	sp, #36	@ 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_Init+0x1a>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e167      	b.n	8002fc2 <HAL_ADC_Init+0x2ea>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_ADC_Init+0x3c>
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fe f8a9 	bl	8000e58 <HAL_ADC_MspInit>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff67 	bl	8002bec <LL_ADC_IsDeepPowerDownEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <HAL_ADC_Init+0x56>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff4d 	bl	8002bc8 <LL_ADC_DisableDeepPowerDown>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff82 	bl	8002c3c <LL_ADC_IsInternalRegulatorEnabled>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d115      	bne.n	8002d6a <HAL_ADC_Init+0x92>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ff66 	bl	8002c14 <LL_ADC_EnableInternalRegulator>
 8002d48:	4ba0      	ldr	r3, [pc, #640]	@ (8002fcc <HAL_ADC_Init+0x2f4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	4aa0      	ldr	r2, [pc, #640]	@ (8002fd0 <HAL_ADC_Init+0x2f8>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	3301      	adds	r3, #1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e002      	b.n	8002d64 <HAL_ADC_Init+0x8c>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f9      	bne.n	8002d5e <HAL_ADC_Init+0x86>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff64 	bl	8002c3c <LL_ADC_IsInternalRegulatorEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10d      	bne.n	8002d96 <HAL_ADC_Init+0xbe>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d92:	2301      	movs	r3, #1
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff ff75 	bl	8002c8a <LL_ADC_REG_IsConversionOngoing>
 8002da0:	6178      	str	r0, [r7, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f040 8100 	bne.w	8002fb0 <HAL_ADC_Init+0x2d8>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f040 80fc 	bne.w	8002fb0 <HAL_ADC_Init+0x2d8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002dc0:	f043 0202 	orr.w	r2, r3, #2
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff49 	bl	8002c64 <LL_ADC_IsEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d111      	bne.n	8002dfc <HAL_ADC_Init+0x124>
 8002dd8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ddc:	f7ff ff42 	bl	8002c64 <LL_ADC_IsEnabled>
 8002de0:	4604      	mov	r4, r0
 8002de2:	487c      	ldr	r0, [pc, #496]	@ (8002fd4 <HAL_ADC_Init+0x2fc>)
 8002de4:	f7ff ff3e 	bl	8002c64 <LL_ADC_IsEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4323      	orrs	r3, r4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_Init+0x124>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4878      	ldr	r0, [pc, #480]	@ (8002fd8 <HAL_ADC_Init+0x300>)
 8002df8:	f7ff fd98 	bl	800292c <LL_ADC_SetCommonClock>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7f5b      	ldrb	r3, [r3, #29]
 8002e00:	035a      	lsls	r2, r3, #13
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d106      	bne.n	8002e38 <HAL_ADC_Init+0x160>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	045b      	lsls	r3, r3, #17
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_ADC_Init+0x17c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	4b60      	ldr	r3, [pc, #384]	@ (8002fdc <HAL_ADC_Init+0x304>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	430b      	orrs	r3, r1
 8002e66:	60d3      	str	r3, [r2, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff14 	bl	8002cb0 <LL_ADC_INJ_IsConversionOngoing>
 8002e88:	6138      	str	r0, [r7, #16]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d16d      	bne.n	8002f6c <HAL_ADC_Init+0x294>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d16a      	bne.n	8002f6c <HAL_ADC_Init+0x294>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7f1b      	ldrb	r3, [r3, #28]
 8002e9a:	039a      	lsls	r2, r3, #14
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eb2:	f023 0302 	bic.w	r3, r3, #2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	60d3      	str	r3, [r2, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d017      	beq.n	8002ef8 <HAL_ADC_Init+0x220>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ee0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ee4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6911      	ldr	r1, [r2, #16]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ef6:	e013      	b.n	8002f20 <HAL_ADC_Init+0x248>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f06:	611a      	str	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f1c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d118      	bne.n	8002f5c <HAL_ADC_Init+0x284>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f40:	4311      	orrs	r1, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	e007      	b.n	8002f6c <HAL_ADC_Init+0x294>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	611a      	str	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10c      	bne.n	8002f8e <HAL_ADC_Init+0x2b6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	f023 010f 	bic.w	r1, r3, #15
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	1e5a      	subs	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f8c:	e007      	b.n	8002f9e <HAL_ADC_Init+0x2c6>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 020f 	bic.w	r2, r2, #15
 8002f9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fae:	e007      	b.n	8002fc0 <HAL_ADC_Init+0x2e8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	f043 0210 	orr.w	r2, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	7ffb      	ldrb	r3, [r7, #31]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	@ 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	053e2d63 	.word	0x053e2d63
 8002fd4:	50000100 	.word	0x50000100
 8002fd8:	50000300 	.word	0x50000300
 8002fdc:	fff04007 	.word	0xfff04007

08002fe0 <HAL_ADC_ConfigChannel>:
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0b6      	sub	sp, #216	@ 0xd8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x22>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e3c8      	b.n	8003794 <HAL_ADC_ConfigChannel+0x7b4>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fe3b 	bl	8002c8a <LL_ADC_REG_IsConversionOngoing>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 83ad 	bne.w	8003776 <HAL_ADC_ConfigChannel+0x796>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	f7ff fd51 	bl	8002ad0 <LL_ADC_REG_SetSequencerRanks>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fe29 	bl	8002c8a <LL_ADC_REG_IsConversionOngoing>
 8003038:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fe35 	bl	8002cb0 <LL_ADC_INJ_IsConversionOngoing>
 8003046:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 800304a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 81d9 	bne.w	8003406 <HAL_ADC_ConfigChannel+0x426>
 8003054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 81d4 	bne.w	8003406 <HAL_ADC_ConfigChannel+0x426>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003066:	d10f      	bne.n	8003088 <HAL_ADC_ConfigChannel+0xa8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2200      	movs	r2, #0
 8003072:	4619      	mov	r1, r3
 8003074:	f7ff fd58 	bl	8002b28 <LL_ADC_SetChannelSamplingTime>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fd12 	bl	8002aaa <LL_ADC_SetSamplingTimeCommonConfig>
 8003086:	e00e      	b.n	80030a6 <HAL_ADC_ConfigChannel+0xc6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	461a      	mov	r2, r3
 8003096:	f7ff fd47 	bl	8002b28 <LL_ADC_SetChannelSamplingTime>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fd02 	bl	8002aaa <LL_ADC_SetSamplingTimeCommonConfig>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d022      	beq.n	800310e <HAL_ADC_ConfigChannel+0x12e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6919      	ldr	r1, [r3, #16]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030d8:	f7ff fc5c 	bl	8002994 <LL_ADC_SetOffset>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6919      	ldr	r1, [r3, #16]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f7ff fca8 	bl	8002a3e <LL_ADC_SetOffsetSign>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6919      	ldr	r1, [r3, #16]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	7f1b      	ldrb	r3, [r3, #28]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d102      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x124>
 80030fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003102:	e000      	b.n	8003106 <HAL_ADC_ConfigChannel+0x126>
 8003104:	2300      	movs	r3, #0
 8003106:	461a      	mov	r2, r3
 8003108:	f7ff fcb4 	bl	8002a74 <LL_ADC_SetOffsetSaturation>
 800310c:	e17b      	b.n	8003406 <HAL_ADC_ConfigChannel+0x426>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fc61 	bl	80029dc <LL_ADC_GetOffsetChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <HAL_ADC_ConfigChannel+0x15a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fc56 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	0e9b      	lsrs	r3, r3, #26
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	e01e      	b.n	8003178 <HAL_ADC_ConfigChannel+0x198>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fc4b 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800314c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800315c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x18c>
 8003168:	2320      	movs	r3, #32
 800316a:	e004      	b.n	8003176 <HAL_ADC_ConfigChannel+0x196>
 800316c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1b0>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0e9b      	lsrs	r3, r3, #26
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	e018      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x1e2>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003198:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1d8>
 80031b4:	2320      	movs	r3, #32
 80031b6:	e004      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x1e2>
 80031b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d106      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x1f4>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fc1a 	bl	8002a08 <LL_ADC_SetOffsetState>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2101      	movs	r1, #1
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fbfe 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x220>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fbf3 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	e01e      	b.n	800323e <HAL_ADC_ConfigChannel+0x25e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fbe8 	bl	80029dc <LL_ADC_GetOffsetChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800321e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003222:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003226:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x252>
 800322e:	2320      	movs	r3, #32
 8003230:	e004      	b.n	800323c <HAL_ADC_ConfigChannel+0x25c>
 8003232:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x276>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0e9b      	lsrs	r3, r3, #26
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	e018      	b.n	8003288 <HAL_ADC_ConfigChannel+0x2a8>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800325e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800326a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800326e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003272:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_ADC_ConfigChannel+0x29e>
 800327a:	2320      	movs	r3, #32
 800327c:	e004      	b.n	8003288 <HAL_ADC_ConfigChannel+0x2a8>
 800327e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	429a      	cmp	r2, r3
 800328a:	d106      	bne.n	800329a <HAL_ADC_ConfigChannel+0x2ba>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fbb7 	bl	8002a08 <LL_ADC_SetOffsetState>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fb9b 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x2e6>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2102      	movs	r1, #2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fb90 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80032bc:	4603      	mov	r3, r0
 80032be:	0e9b      	lsrs	r3, r3, #26
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	e01e      	b.n	8003304 <HAL_ADC_ConfigChannel+0x324>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2102      	movs	r1, #2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fb85 	bl	80029dc <LL_ADC_GetOffsetChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80032d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x318>
 80032f4:	2320      	movs	r3, #32
 80032f6:	e004      	b.n	8003302 <HAL_ADC_ConfigChannel+0x322>
 80032f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_ADC_ConfigChannel+0x33c>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	e016      	b.n	800334a <HAL_ADC_ConfigChannel+0x36a>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003324:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800332e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003330:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003334:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x360>
 800333c:	2320      	movs	r3, #32
 800333e:	e004      	b.n	800334a <HAL_ADC_ConfigChannel+0x36a>
 8003340:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003344:	fab3 f383 	clz	r3, r3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	429a      	cmp	r2, r3
 800334c:	d106      	bne.n	800335c <HAL_ADC_ConfigChannel+0x37c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2200      	movs	r2, #0
 8003354:	2102      	movs	r1, #2
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fb56 	bl	8002a08 <LL_ADC_SetOffsetState>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2103      	movs	r1, #3
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fb3a 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x3a8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2103      	movs	r1, #3
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fb2f 	bl	80029dc <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	0e9b      	lsrs	r3, r3, #26
 8003382:	f003 021f 	and.w	r2, r3, #31
 8003386:	e017      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x3d8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2103      	movs	r1, #3
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fb24 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	677b      	str	r3, [r7, #116]	@ 0x74
 8003398:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	673b      	str	r3, [r7, #112]	@ 0x70
 80033a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x3ce>
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x3d6>
 80033ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x3f0>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	0e9b      	lsrs	r3, r3, #26
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	e011      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x414>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80033de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x40c>
 80033e8:	2320      	movs	r3, #32
 80033ea:	e003      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x414>
 80033ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d106      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x426>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2103      	movs	r1, #3
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fb01 	bl	8002a08 <LL_ADC_SetOffsetState>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fc2a 	bl	8002c64 <LL_ADC_IsEnabled>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	f040 8140 	bne.w	8003698 <HAL_ADC_ConfigChannel+0x6b8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	461a      	mov	r2, r3
 8003426:	f7ff fbab 	bl	8002b80 <LL_ADC_SetChannelSingleDiff>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4a8f      	ldr	r2, [pc, #572]	@ (800366c <HAL_ADC_ConfigChannel+0x68c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	f040 8131 	bne.w	8003698 <HAL_ADC_ConfigChannel+0x6b8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <HAL_ADC_ConfigChannel+0x47e>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0e9b      	lsrs	r3, r3, #26
 800344c:	3301      	adds	r3, #1
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	2b09      	cmp	r3, #9
 8003454:	bf94      	ite	ls
 8003456:	2301      	movls	r3, #1
 8003458:	2300      	movhi	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e019      	b.n	8003492 <HAL_ADC_ConfigChannel+0x4b2>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800346c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800346e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x49a>
 8003476:	2320      	movs	r3, #32
 8003478:	e003      	b.n	8003482 <HAL_ADC_ConfigChannel+0x4a2>
 800347a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2b09      	cmp	r3, #9
 800348a:	bf94      	ite	ls
 800348c:	2301      	movls	r3, #1
 800348e:	2300      	movhi	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d079      	beq.n	800358a <HAL_ADC_ConfigChannel+0x5aa>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x4d2>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	0e9b      	lsrs	r3, r3, #26
 80034a8:	3301      	adds	r3, #1
 80034aa:	069b      	lsls	r3, r3, #26
 80034ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034b0:	e015      	b.n	80034de <HAL_ADC_ConfigChannel+0x4fe>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80034b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80034c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x4ee>
 80034ca:	2320      	movs	r3, #32
 80034cc:	e003      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x4f6>
 80034ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	3301      	adds	r3, #1
 80034d8:	069b      	lsls	r3, r3, #26
 80034da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x51e>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	0e9b      	lsrs	r3, r3, #26
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	e017      	b.n	800352e <HAL_ADC_ConfigChannel+0x54e>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
 8003504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	643b      	str	r3, [r7, #64]	@ 0x40
 800350c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_ADC_ConfigChannel+0x53a>
 8003516:	2320      	movs	r3, #32
 8003518:	e003      	b.n	8003522 <HAL_ADC_ConfigChannel+0x542>
 800351a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	3301      	adds	r3, #1
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	ea42 0103 	orr.w	r1, r2, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10a      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x574>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	3301      	adds	r3, #1
 8003546:	f003 021f 	and.w	r2, r3, #31
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	051b      	lsls	r3, r3, #20
 8003552:	e018      	b.n	8003586 <HAL_ADC_ConfigChannel+0x5a6>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	63bb      	str	r3, [r7, #56]	@ 0x38
 800355a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
 8003562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x590>
 800356c:	2320      	movs	r3, #32
 800356e:	e003      	b.n	8003578 <HAL_ADC_ConfigChannel+0x598>
 8003570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f003 021f 	and.w	r2, r3, #31
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	051b      	lsls	r3, r3, #20
 8003586:	430b      	orrs	r3, r1
 8003588:	e081      	b.n	800368e <HAL_ADC_ConfigChannel+0x6ae>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	2b00      	cmp	r3, #0
 8003594:	d107      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x5c6>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	3301      	adds	r3, #1
 800359e:	069b      	lsls	r3, r3, #26
 80035a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035a4:	e015      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x5f2>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x5e2>
 80035be:	2320      	movs	r3, #32
 80035c0:	e003      	b.n	80035ca <HAL_ADC_ConfigChannel+0x5ea>
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	069b      	lsls	r3, r3, #26
 80035ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x612>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	e017      	b.n	8003622 <HAL_ADC_ConfigChannel+0x642>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x62e>
 800360a:	2320      	movs	r3, #32
 800360c:	e003      	b.n	8003616 <HAL_ADC_ConfigChannel+0x636>
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	3301      	adds	r3, #1
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	ea42 0103 	orr.w	r1, r2, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10d      	bne.n	800364e <HAL_ADC_ConfigChannel+0x66e>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	0e9b      	lsrs	r3, r3, #26
 8003638:	3301      	adds	r3, #1
 800363a:	f003 021f 	and.w	r2, r3, #31
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	3b1e      	subs	r3, #30
 8003646:	051b      	lsls	r3, r3, #20
 8003648:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800364c:	e01e      	b.n	800368c <HAL_ADC_ConfigChannel+0x6ac>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x690>
 8003666:	2320      	movs	r3, #32
 8003668:	e006      	b.n	8003678 <HAL_ADC_ConfigChannel+0x698>
 800366a:	bf00      	nop
 800366c:	407f0000 	.word	0x407f0000
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f003 021f 	and.w	r2, r3, #31
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	3b1e      	subs	r3, #30
 8003686:	051b      	lsls	r3, r3, #20
 8003688:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800368c:	430b      	orrs	r3, r1
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	6892      	ldr	r2, [r2, #8]
 8003692:	4619      	mov	r1, r3
 8003694:	f7ff fa48 	bl	8002b28 <LL_ADC_SetChannelSamplingTime>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b3f      	ldr	r3, [pc, #252]	@ (800379c <HAL_ADC_ConfigChannel+0x7bc>)
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d071      	beq.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
 80036a4:	483e      	ldr	r0, [pc, #248]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80036a6:	f7ff f967 	bl	8002978 <LL_ADC_GetCommonPathInternalCh>
 80036aa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3c      	ldr	r2, [pc, #240]	@ (80037a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_ADC_ConfigChannel+0x6e2>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3a      	ldr	r2, [pc, #232]	@ (80037a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d127      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x732>
 80036c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d121      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x732>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036d6:	d157      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
 80036d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036e0:	4619      	mov	r1, r3
 80036e2:	482f      	ldr	r0, [pc, #188]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80036e4:	f7ff f935 	bl	8002952 <LL_ADC_SetCommonPathInternalCh>
 80036e8:	4b30      	ldr	r3, [pc, #192]	@ (80037ac <HAL_ADC_ConfigChannel+0x7cc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	099b      	lsrs	r3, r3, #6
 80036ee:	4a30      	ldr	r2, [pc, #192]	@ (80037b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e002      	b.n	800370a <HAL_ADC_ConfigChannel+0x72a>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3b01      	subs	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f9      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x724>
 8003710:	e03a      	b.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a27      	ldr	r2, [pc, #156]	@ (80037b4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d113      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x764>
 800371c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003720:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10d      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x764>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a22      	ldr	r2, [pc, #136]	@ (80037b8 <HAL_ADC_ConfigChannel+0x7d8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d02a      	beq.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
 8003732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800373a:	4619      	mov	r1, r3
 800373c:	4818      	ldr	r0, [pc, #96]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c0>)
 800373e:	f7ff f908 	bl	8002952 <LL_ADC_SetCommonPathInternalCh>
 8003742:	e021      	b.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1c      	ldr	r2, [pc, #112]	@ (80037bc <HAL_ADC_ConfigChannel+0x7dc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d11c      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
 800374e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d011      	beq.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
 8003764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003768:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800376c:	4619      	mov	r1, r3
 800376e:	480c      	ldr	r0, [pc, #48]	@ (80037a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003770:	f7ff f8ef 	bl	8002952 <LL_ADC_SetCommonPathInternalCh>
 8003774:	e008      	b.n	8003788 <HAL_ADC_ConfigChannel+0x7a8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003782:	2301      	movs	r3, #1
 8003784:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003790:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8003794:	4618      	mov	r0, r3
 8003796:	37d8      	adds	r7, #216	@ 0xd8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	80080000 	.word	0x80080000
 80037a0:	50000300 	.word	0x50000300
 80037a4:	c3210000 	.word	0xc3210000
 80037a8:	90c00010 	.word	0x90c00010
 80037ac:	20000004 	.word	0x20000004
 80037b0:	053e2d63 	.word	0x053e2d63
 80037b4:	c7520000 	.word	0xc7520000
 80037b8:	50000100 	.word	0x50000100
 80037bc:	cb840000 	.word	0xcb840000

080037c0 <LL_ADC_IsEnabled>:
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <LL_ADC_IsEnabled+0x18>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <LL_ADC_IsEnabled+0x1a>
 80037d8:	2300      	movs	r3, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_ADC_REG_IsConversionOngoing>:
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d101      	bne.n	80037fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037fe:	2300      	movs	r3, #0
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_ADCEx_MultiModeConfigChannel>:
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b0a1      	sub	sp, #132	@ 0x84
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003826:	2302      	movs	r3, #2
 8003828:	e08b      	b.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003832:	2300      	movs	r3, #0
 8003834:	667b      	str	r3, [r7, #100]	@ 0x64
 8003836:	2300      	movs	r3, #0
 8003838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003842:	d102      	bne.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003844:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	e001      	b.n	800384e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <HAL_ADCEx_MultiModeConfigChannel+0x60>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003868:	2301      	movs	r3, #1
 800386a:	e06a      	b.n	8003942 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ffb9 	bl	80037e6 <LL_ADC_REG_IsConversionOngoing>
 8003874:	67b8      	str	r0, [r7, #120]	@ 0x78
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffb3 	bl	80037e6 <LL_ADC_REG_IsConversionOngoing>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d14c      	bne.n	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8003886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003888:	2b00      	cmp	r3, #0
 800388a:	d149      	bne.n	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 800388c:	4b30      	ldr	r3, [pc, #192]	@ (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800388e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d028      	beq.n	80038ea <HAL_ADCEx_MultiModeConfigChannel+0xde>
 8003898:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038aa:	035b      	lsls	r3, r3, #13
 80038ac:	430b      	orrs	r3, r1
 80038ae:	431a      	orrs	r2, r3
 80038b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038b8:	f7ff ff82 	bl	80037c0 <LL_ADC_IsEnabled>
 80038bc:	4604      	mov	r4, r0
 80038be:	4823      	ldr	r0, [pc, #140]	@ (800394c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80038c0:	f7ff ff7e 	bl	80037c0 <LL_ADC_IsEnabled>
 80038c4:	4603      	mov	r3, r0
 80038c6:	4323      	orrs	r3, r4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d133      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 80038cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038d4:	f023 030f 	bic.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	6811      	ldr	r1, [r2, #0]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	e024      	b.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 80038ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f4:	609a      	str	r2, [r3, #8]
 80038f6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038fa:	f7ff ff61 	bl	80037c0 <LL_ADC_IsEnabled>
 80038fe:	4604      	mov	r4, r0
 8003900:	4812      	ldr	r0, [pc, #72]	@ (800394c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003902:	f7ff ff5d 	bl	80037c0 <LL_ADC_IsEnabled>
 8003906:	4603      	mov	r3, r0
 8003908:	4323      	orrs	r3, r4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d112      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 800390e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003916:	f023 030f 	bic.w	r3, r3, #15
 800391a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800391c:	6093      	str	r3, [r2, #8]
 800391e:	e009      	b.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x128>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	f043 0220 	orr.w	r2, r3, #32
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800392c:	2301      	movs	r3, #1
 800392e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003932:	e000      	b.n	8003936 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 8003934:	bf00      	nop
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800393e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003942:	4618      	mov	r0, r3
 8003944:	3784      	adds	r7, #132	@ 0x84
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	bf00      	nop
 800394c:	50000100 	.word	0x50000100
 8003950:	50000300 	.word	0x50000300

08003954 <__NVIC_SetPriorityGrouping>:
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003970:	4013      	ands	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	021a      	lsls	r2, r3, #8
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
 800397c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	4a04      	ldr	r2, [pc, #16]	@ (8003998 <__NVIC_SetPriorityGrouping+0x44>)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	60d3      	str	r3, [r2, #12]
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_GetPriorityGrouping>:
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4b04      	ldr	r3, [pc, #16]	@ (80039b4 <__NVIC_GetPriorityGrouping+0x18>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	4618      	mov	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <__NVIC_EnableIRQ>:
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	db0b      	blt.n	80039e2 <__NVIC_EnableIRQ+0x2a>
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	f003 021f 	and.w	r2, r3, #31
 80039d0:	4907      	ldr	r1, [pc, #28]	@ (80039f0 <__NVIC_EnableIRQ+0x38>)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	2001      	movs	r0, #1
 80039da:	fa00 f202 	lsl.w	r2, r0, r2
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000e100 	.word	0xe000e100

080039f4 <__NVIC_SetPriority>:
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	6039      	str	r1, [r7, #0]
 80039fe:	71fb      	strb	r3, [r7, #7]
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	db0a      	blt.n	8003a1e <__NVIC_SetPriority+0x2a>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	490c      	ldr	r1, [pc, #48]	@ (8003a40 <__NVIC_SetPriority+0x4c>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	0112      	lsls	r2, r2, #4
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	440b      	add	r3, r1
 8003a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003a1c:	e00a      	b.n	8003a34 <__NVIC_SetPriority+0x40>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4908      	ldr	r1, [pc, #32]	@ (8003a44 <__NVIC_SetPriority+0x50>)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	3b04      	subs	r3, #4
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	440b      	add	r3, r1
 8003a32:	761a      	strb	r2, [r3, #24]
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000e100 	.word	0xe000e100
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <NVIC_EncodePriority>:
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	@ 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f1c3 0307 	rsb	r3, r3, #7
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	bf28      	it	cs
 8003a66:	2304      	movcs	r3, #4
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2b06      	cmp	r3, #6
 8003a70:	d902      	bls.n	8003a78 <NVIC_EncodePriority+0x30>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3b03      	subs	r3, #3
 8003a76:	e000      	b.n	8003a7a <NVIC_EncodePriority+0x32>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	f04f 31ff 	mov.w	r1, #4294967295
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	43d9      	mvns	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	400b      	ands	r3, r1
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3724      	adds	r7, #36	@ 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <SysTick_Config>:
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac0:	d301      	bcc.n	8003ac6 <SysTick_Config+0x16>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00f      	b.n	8003ae6 <SysTick_Config+0x36>
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8003af0 <SysTick_Config+0x40>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	6053      	str	r3, [r2, #4]
 8003ace:	210f      	movs	r1, #15
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	f7ff ff8e 	bl	80039f4 <__NVIC_SetPriority>
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <SysTick_Config+0x40>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <SysTick_Config+0x40>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <HAL_NVIC_SetPriorityGrouping>:
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ff29 	bl	8003954 <__NVIC_SetPriorityGrouping>
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_SetPriority>:
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b086      	sub	sp, #24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	4603      	mov	r3, r0
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	73fb      	strb	r3, [r7, #15]
 8003b18:	f7ff ff40 	bl	800399c <__NVIC_GetPriorityGrouping>
 8003b1c:	6178      	str	r0, [r7, #20]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	6978      	ldr	r0, [r7, #20]
 8003b24:	f7ff ff90 	bl	8003a48 <NVIC_EncodePriority>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff5f 	bl	80039f4 <__NVIC_SetPriority>
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_EnableIRQ>:
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	71fb      	strb	r3, [r7, #7]
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff33 	bl	80039b8 <__NVIC_EnableIRQ>
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_SYSTICK_Config>:
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff ffa4 	bl	8003ab0 <SysTick_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <HAL_DMA_Init>:
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_DMA_Init+0x12>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e08d      	b.n	8003ca2 <HAL_DMA_Init+0x12e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b47      	ldr	r3, [pc, #284]	@ (8003cac <HAL_DMA_Init+0x138>)
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d80f      	bhi.n	8003bb2 <HAL_DMA_Init+0x3e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b45      	ldr	r3, [pc, #276]	@ (8003cb0 <HAL_DMA_Init+0x13c>)
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4a45      	ldr	r2, [pc, #276]	@ (8003cb4 <HAL_DMA_Init+0x140>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a42      	ldr	r2, [pc, #264]	@ (8003cb8 <HAL_DMA_Init+0x144>)
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bb0:	e00e      	b.n	8003bd0 <HAL_DMA_Init+0x5c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b40      	ldr	r3, [pc, #256]	@ (8003cbc <HAL_DMA_Init+0x148>)
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb4 <HAL_DMA_Init+0x140>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	009a      	lsls	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc0 <HAL_DMA_Init+0x14c>)
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9be 	bl	8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c30:	d102      	bne.n	8003c38 <HAL_DMA_Init+0xc4>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d010      	beq.n	8003c78 <HAL_DMA_Init+0x104>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d80c      	bhi.n	8003c78 <HAL_DMA_Init+0x104>
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9de 	bl	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	e008      	b.n	8003c8a <HAL_DMA_Init+0x116>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40020407 	.word	0x40020407
 8003cb0:	bffdfff8 	.word	0xbffdfff8
 8003cb4:	cccccccd 	.word	0xcccccccd
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	bffdfbf8 	.word	0xbffdfbf8
 8003cc0:	40020400 	.word	0x40020400

08003cc4 <HAL_DMA_Abort>:
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d005      	beq.n	8003ce8 <HAL_DMA_Abort+0x24>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	e037      	b.n	8003d58 <HAL_DMA_Abort+0x94>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 020e 	bic.w	r2, r2, #14
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0201 	bic.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2a:	605a      	str	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_DMA_Abort+0x94>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_DMA_Abort_IT>:
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d00d      	beq.n	8003daa <HAL_DMA_Abort_IT+0x34>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2204      	movs	r2, #4
 8003d92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	e047      	b.n	8003e3a <HAL_DMA_Abort_IT+0xc4>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020e 	bic.w	r2, r2, #14
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	f003 021f 	and.w	r2, r3, #31
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	2101      	movs	r1, #1
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_DMA_Abort_IT+0xa4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_DMA_Abort_IT+0xc4>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_DMA_IRQHandler>:
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2204      	movs	r2, #4
 8003e66:	409a      	lsls	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d026      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x7a>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d021      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x7a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x54>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0204 	bic.w	r2, r2, #4
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d071      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x154>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e06c      	b.n	8003f98 <HAL_DMA_IRQHandler+0x154>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	409a      	lsls	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d02e      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xec>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d029      	beq.n	8003f30 <HAL_DMA_IRQHandler+0xec>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <HAL_DMA_IRQHandler+0xbe>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 020a 	bic.w	r2, r2, #10
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f003 021f 	and.w	r2, r3, #31
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2102      	movs	r1, #2
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d038      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x154>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
 8003f2e:	e033      	b.n	8003f98 <HAL_DMA_IRQHandler+0x154>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2208      	movs	r2, #8
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02a      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x156>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d025      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x156>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 020e 	bic.w	r2, r2, #14
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f003 021f 	and.w	r2, r3, #31
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x156>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b16      	ldr	r3, [pc, #88]	@ (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d802      	bhi.n	8003fbe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
 8003fb8:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e001      	b.n	8003fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
 8003fbe:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	3b08      	subs	r3, #8
 8003fce:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	009a      	lsls	r2, r3, #2
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	649a      	str	r2, [r3, #72]	@ 0x48
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a0b      	ldr	r2, [pc, #44]	@ (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fee:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40020407 	.word	0x40020407
 8004010:	40020800 	.word	0x40020800
 8004014:	40020820 	.word	0x40020820
 8004018:	cccccccd 	.word	0xcccccccd
 800401c:	40020880 	.word	0x40020880

08004020 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	461a      	mov	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	655a      	str	r2, [r3, #84]	@ 0x54
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a08      	ldr	r2, [pc, #32]	@ (8004064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004042:	659a      	str	r2, [r3, #88]	@ 0x58
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b01      	subs	r3, #1
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	1000823f 	.word	0x1000823f
 8004064:	40020940 	.word	0x40020940

08004068 <HAL_GPIO_Init>:
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e15a      	b.n	800432e <HAL_GPIO_Init+0x2c6>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 814c 	beq.w	8004328 <HAL_GPIO_Init+0x2c0>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d005      	beq.n	80040a8 <HAL_GPIO_Init+0x40>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d130      	bne.n	800410a <HAL_GPIO_Init+0xa2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	2203      	movs	r2, #3
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	43db      	mvns	r3, r3
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	2201      	movs	r2, #1
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0201 	and.w	r2, r3, #1
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b03      	cmp	r3, #3
 8004114:	d017      	beq.n	8004146 <HAL_GPIO_Init+0xde>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2203      	movs	r2, #3
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d123      	bne.n	800419a <HAL_GPIO_Init+0x132>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	08da      	lsrs	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3208      	adds	r2, #8
 800415a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	220f      	movs	r2, #15
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	08da      	lsrs	r2, r3, #3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3208      	adds	r2, #8
 8004194:	6939      	ldr	r1, [r7, #16]
 8004196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	2203      	movs	r2, #3
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 0203 	and.w	r2, r3, #3
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80a6 	beq.w	8004328 <HAL_GPIO_Init+0x2c0>
 80041dc:	4b5b      	ldr	r3, [pc, #364]	@ (800434c <HAL_GPIO_Init+0x2e4>)
 80041de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e0:	4a5a      	ldr	r2, [pc, #360]	@ (800434c <HAL_GPIO_Init+0x2e4>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80041e8:	4b58      	ldr	r3, [pc, #352]	@ (800434c <HAL_GPIO_Init+0x2e4>)
 80041ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4a56      	ldr	r2, [pc, #344]	@ (8004350 <HAL_GPIO_Init+0x2e8>)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	3302      	adds	r3, #2
 80041fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	220f      	movs	r2, #15
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800421e:	d01f      	beq.n	8004260 <HAL_GPIO_Init+0x1f8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a4c      	ldr	r2, [pc, #304]	@ (8004354 <HAL_GPIO_Init+0x2ec>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d019      	beq.n	800425c <HAL_GPIO_Init+0x1f4>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a4b      	ldr	r2, [pc, #300]	@ (8004358 <HAL_GPIO_Init+0x2f0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_GPIO_Init+0x1f0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a4a      	ldr	r2, [pc, #296]	@ (800435c <HAL_GPIO_Init+0x2f4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00d      	beq.n	8004254 <HAL_GPIO_Init+0x1ec>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a49      	ldr	r2, [pc, #292]	@ (8004360 <HAL_GPIO_Init+0x2f8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <HAL_GPIO_Init+0x1e8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a48      	ldr	r2, [pc, #288]	@ (8004364 <HAL_GPIO_Init+0x2fc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d101      	bne.n	800424c <HAL_GPIO_Init+0x1e4>
 8004248:	2305      	movs	r3, #5
 800424a:	e00a      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 800424c:	2306      	movs	r3, #6
 800424e:	e008      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004250:	2304      	movs	r3, #4
 8004252:	e006      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004254:	2303      	movs	r3, #3
 8004256:	e004      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004258:	2302      	movs	r3, #2
 800425a:	e002      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004260:	2300      	movs	r3, #0
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	f002 0203 	and.w	r2, r2, #3
 8004268:	0092      	lsls	r2, r2, #2
 800426a:	4093      	lsls	r3, r2
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	4937      	ldr	r1, [pc, #220]	@ (8004350 <HAL_GPIO_Init+0x2e8>)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	089b      	lsrs	r3, r3, #2
 8004278:	3302      	adds	r3, #2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004280:	4b39      	ldr	r3, [pc, #228]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x23c>
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	4a30      	ldr	r2, [pc, #192]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6093      	str	r3, [r2, #8]
 80042aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x266>
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	60d3      	str	r3, [r2, #12]
 80042d4:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	43db      	mvns	r3, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_GPIO_Init+0x290>
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6053      	str	r3, [r2, #4]
 80042fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	43db      	mvns	r3, r3
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_Init+0x2ba>
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	4a11      	ldr	r2, [pc, #68]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3301      	adds	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f ae9d 	bne.w	8004078 <HAL_GPIO_Init+0x10>
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40021000 	.word	0x40021000
 8004350:	40010000 	.word	0x40010000
 8004354:	48000400 	.word	0x48000400
 8004358:	48000800 	.word	0x48000800
 800435c:	48000c00 	.word	0x48000c00
 8004360:	48001000 	.word	0x48001000
 8004364:	48001400 	.word	0x48001400
 8004368:	40010400 	.word	0x40010400

0800436c <HAL_GPIO_WritePin>:
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	807b      	strh	r3, [r7, #2]
 8004378:	4613      	mov	r3, r2
 800437a:	707b      	strb	r3, [r7, #1]
 800437c:	787b      	ldrb	r3, [r7, #1]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_WritePin+0x1e>
 8004382:	887a      	ldrh	r2, [r7, #2]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	619a      	str	r2, [r3, #24]
 8004388:	e002      	b.n	8004390 <HAL_GPIO_WritePin+0x24>
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_GPIO_TogglePin>:
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	807b      	strh	r3, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4013      	ands	r3, r2
 80043b4:	041a      	lsls	r2, r3, #16
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	43d9      	mvns	r1, r3
 80043ba:	887b      	ldrh	r3, [r7, #2]
 80043bc:	400b      	ands	r3, r1
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_GPIO_EXTI_IRQHandler>:
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	80fb      	strh	r3, [r7, #6]
 80043da:	4b08      	ldr	r3, [pc, #32]	@ (80043fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80043e6:	4a05      	ldr	r2, [pc, #20]	@ (80043fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	6153      	str	r3, [r2, #20]
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f806 	bl	8004400 <HAL_GPIO_EXTI_Callback>
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40010400 	.word	0x40010400

08004400 <HAL_GPIO_EXTI_Callback>:
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	80fb      	strh	r3, [r7, #6]
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_I2C_Init>:
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_I2C_Init+0x12>
 8004424:	2301      	movs	r3, #1
 8004426:	e08d      	b.n	8004544 <HAL_I2C_Init+0x12e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_I2C_Init+0x2c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fd fb71 	bl	8001b24 <HAL_I2C_MspInit>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2224      	movs	r2, #36	@ 0x24
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004466:	611a      	str	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_I2C_Init+0x7a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	e006      	b.n	800449e <HAL_I2C_Init+0x88>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d108      	bne.n	80044b8 <HAL_I2C_Init+0xa2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	e007      	b.n	80044c8 <HAL_I2C_Init+0xb2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044da:	6053      	str	r3, [r2, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	ea42 0103 	orr.w	r1, r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	021a      	lsls	r2, r3, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69d9      	ldr	r1, [r3, #28]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	645a      	str	r2, [r3, #68]	@ 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	@ 0x30
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004542:	2300      	movs	r3, #0
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_I2CEx_ConfigAnalogFilter>:
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	d138      	bne.n	80045d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800456c:	2302      	movs	r3, #2
 800456e:	e032      	b.n	80045d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2224      	movs	r2, #36	@ 0x24
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6819      	ldr	r1, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d0:	2300      	movs	r3, #0
 80045d2:	e000      	b.n	80045d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045d4:	2302      	movs	r3, #2
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_I2CEx_ConfigDigitalFilter>:
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d139      	bne.n	800466c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004602:	2302      	movs	r3, #2
 8004604:	e033      	b.n	800466e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2224      	movs	r2, #36	@ 0x24
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800466c:	2302      	movs	r3, #2
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_PCD_Init>:
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_PCD_Init+0x12>
 8004688:	2301      	movs	r3, #1
 800468a:	e0c0      	b.n	800480e <HAL_PCD_Init+0x194>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <HAL_PCD_Init+0x2c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7fe f853 	bl	800274c <HAL_PCD_MspInit>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f003 ffcc 	bl	8008650 <USB_DisableGlobalInt>
 80046b8:	2300      	movs	r3, #0
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	e03e      	b.n	800473c <HAL_PCD_Init+0xc2>
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	440b      	add	r3, r1
 80046cc:	3311      	adds	r3, #17
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	440b      	add	r3, r1
 80046e0:	3310      	adds	r3, #16
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	440b      	add	r3, r1
 80046f4:	3313      	adds	r3, #19
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	3320      	adds	r3, #32
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	7bfa      	ldrb	r2, [r7, #15]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	3324      	adds	r3, #36	@ 0x24
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	440b      	add	r3, r1
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	3301      	adds	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	791b      	ldrb	r3, [r3, #4]
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	429a      	cmp	r2, r3
 8004744:	d3bb      	bcc.n	80046be <HAL_PCD_Init+0x44>
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
 800474a:	e044      	b.n	80047d6 <HAL_PCD_Init+0x15c>
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	440b      	add	r3, r1
 800475a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004774:	7bfa      	ldrb	r2, [r7, #15]
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	7bfa      	ldrb	r2, [r7, #15]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	7bfa      	ldrb	r2, [r7, #15]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	440b      	add	r3, r1
 80047c8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	3301      	adds	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	791b      	ldrb	r3, [r3, #4]
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d3b5      	bcc.n	800474c <HAL_PCD_Init+0xd2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80047ec:	f003 ff4b 	bl	8008686 <USB_DevInit>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	731a      	strb	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7a9b      	ldrb	r3, [r3, #10]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d102      	bne.n	800480c <HAL_PCD_Init+0x192>
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f805 	bl	8004816 <HAL_PCDEx_ActivateLPM>
 800480c:	2300      	movs	r3, #0
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_PCDEx_ActivateLPM>:
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800483a:	b29b      	uxth	r3, r3
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800484e:	b29b      	uxth	r3, r3
 8004850:	f043 0302 	orr.w	r3, r3, #2
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 800485c:	2300      	movs	r3, #0
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_PWREx_ControlVoltageScaling>:
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d141      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x92>
 800487a:	4b4b      	ldr	r3, [pc, #300]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004886:	d131      	bne.n	80048ec <HAL_PWREx_ControlVoltageScaling+0x80>
 8004888:	4b47      	ldr	r3, [pc, #284]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800488e:	4a46      	ldr	r2, [pc, #280]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004894:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004898:	4b43      	ldr	r3, [pc, #268]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048a0:	4a41      	ldr	r2, [pc, #260]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b40      	ldr	r3, [pc, #256]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2232      	movs	r2, #50	@ 0x32
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	4a3f      	ldr	r2, [pc, #252]	@ (80049b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	0c9b      	lsrs	r3, r3, #18
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e002      	b.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	4b38      	ldr	r3, [pc, #224]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d2:	d102      	bne.n	80048da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f2      	bne.n	80048c0 <HAL_PWREx_ControlVoltageScaling+0x54>
 80048da:	4b33      	ldr	r3, [pc, #204]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e6:	d158      	bne.n	800499a <HAL_PWREx_ControlVoltageScaling+0x12e>
 80048e8:	2303      	movs	r3, #3
 80048ea:	e057      	b.n	800499c <HAL_PWREx_ControlVoltageScaling+0x130>
 80048ec:	4b2e      	ldr	r3, [pc, #184]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f2:	4a2d      	ldr	r2, [pc, #180]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048fc:	e04d      	b.n	800499a <HAL_PWREx_ControlVoltageScaling+0x12e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004904:	d141      	bne.n	800498a <HAL_PWREx_ControlVoltageScaling+0x11e>
 8004906:	4b28      	ldr	r3, [pc, #160]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004912:	d131      	bne.n	8004978 <HAL_PWREx_ControlVoltageScaling+0x10c>
 8004914:	4b24      	ldr	r3, [pc, #144]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800491a:	4a23      	ldr	r2, [pc, #140]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800491c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004920:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004924:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800492c:	4a1e      	ldr	r2, [pc, #120]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4b1d      	ldr	r3, [pc, #116]	@ (80049ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2232      	movs	r2, #50	@ 0x32
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	4a1c      	ldr	r2, [pc, #112]	@ (80049b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004940:	fba2 2303 	umull	r2, r3, r2, r3
 8004944:	0c9b      	lsrs	r3, r3, #18
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e002      	b.n	8004952 <HAL_PWREx_ControlVoltageScaling+0xe6>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3b01      	subs	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	4b15      	ldr	r3, [pc, #84]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495e:	d102      	bne.n	8004966 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f2      	bne.n	800494c <HAL_PWREx_ControlVoltageScaling+0xe0>
 8004966:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004972:	d112      	bne.n	800499a <HAL_PWREx_ControlVoltageScaling+0x12e>
 8004974:	2303      	movs	r3, #3
 8004976:	e011      	b.n	800499c <HAL_PWREx_ControlVoltageScaling+0x130>
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800497e:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004984:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004988:	e007      	b.n	800499a <HAL_PWREx_ControlVoltageScaling+0x12e>
 800498a:	4b07      	ldr	r3, [pc, #28]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004992:	4a05      	ldr	r2, [pc, #20]	@ (80049a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004994:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	2300      	movs	r3, #0
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	40007000 	.word	0x40007000
 80049ac:	20000004 	.word	0x20000004
 80049b0:	431bde83 	.word	0x431bde83

080049b4 <HAL_PWREx_DisableUCPDDeadBattery>:
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	4b05      	ldr	r3, [pc, #20]	@ (80049d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a04      	ldr	r2, [pc, #16]	@ (80049d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049c2:	6093      	str	r3, [r2, #8]
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40007000 	.word	0x40007000

080049d4 <HAL_RCC_OscConfig>:
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_OscConfig+0x12>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e2fe      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d075      	beq.n	8004ade <HAL_RCC_OscConfig+0x10a>
 80049f2:	4b97      	ldr	r3, [pc, #604]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	4b94      	ldr	r3, [pc, #592]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3e>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_OscConfig+0x44>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCC_OscConfig+0x5c>
 8004a18:	4b8d      	ldr	r3, [pc, #564]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d05b      	beq.n	8004adc <HAL_RCC_OscConfig+0x108>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d157      	bne.n	8004adc <HAL_RCC_OscConfig+0x108>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e2d9      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a38:	d106      	bne.n	8004a48 <HAL_RCC_OscConfig+0x74>
 8004a3a:	4b85      	ldr	r3, [pc, #532]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a84      	ldr	r2, [pc, #528]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e01d      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x98>
 8004a52:	4b7f      	ldr	r3, [pc, #508]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a7e      	ldr	r2, [pc, #504]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a7b      	ldr	r2, [pc, #492]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xb0>
 8004a6c:	4b78      	ldr	r3, [pc, #480]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a77      	ldr	r2, [pc, #476]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b75      	ldr	r3, [pc, #468]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a74      	ldr	r2, [pc, #464]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xe0>
 8004a8c:	f7fd ff20 	bl	80028d0 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
 8004a94:	f7fd ff1c 	bl	80028d0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	@ 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xd2>
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e29e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xc0>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
 8004ab4:	f7fd ff0c 	bl	80028d0 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0xfa>
 8004abc:	f7fd ff08 	bl	80028d0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xfa>
 8004aca:	2303      	movs	r3, #3
 8004acc:	e28a      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004ace:	4b60      	ldr	r3, [pc, #384]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0xe8>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x10a>
 8004adc:	bf00      	nop
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d075      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x202>
 8004aea:	4b59      	ldr	r3, [pc, #356]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	4b56      	ldr	r3, [pc, #344]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	d102      	bne.n	8004b0a <HAL_RCC_OscConfig+0x136>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d002      	beq.n	8004b10 <HAL_RCC_OscConfig+0x13c>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d11f      	bne.n	8004b50 <HAL_RCC_OscConfig+0x17c>
 8004b10:	4b4f      	ldr	r3, [pc, #316]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_OscConfig+0x154>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_OscConfig+0x154>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e25d      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004b28:	4b49      	ldr	r3, [pc, #292]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	4946      	ldr	r1, [pc, #280]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]
 8004b3c:	4b45      	ldr	r3, [pc, #276]	@ (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd fe79 	bl	8002838 <HAL_InitTick>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d043      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x200>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e249      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d023      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x1cc>
 8004b58:	4b3d      	ldr	r3, [pc, #244]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	f7fd feb4 	bl	80028d0 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x1aa>
 8004b6c:	f7fd feb0 	bl	80028d0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x1aa>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e232      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004b7e:	4b34      	ldr	r3, [pc, #208]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x198>
 8004b8a:	4b31      	ldr	r3, [pc, #196]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	061b      	lsls	r3, r3, #24
 8004b98:	492d      	ldr	r1, [pc, #180]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	604b      	str	r3, [r1, #4]
 8004b9e:	e01a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x202>
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	f7fd fe90 	bl	80028d0 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1f2>
 8004bb4:	f7fd fe8c 	bl	80028d0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x1f2>
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e20e      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004bc6:	4b22      	ldr	r3, [pc, #136]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x1e0>
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x202>
 8004bd4:	bf00      	nop
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d041      	beq.n	8004c66 <HAL_RCC_OscConfig+0x292>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01c      	beq.n	8004c24 <HAL_RCC_OscConfig+0x250>
 8004bea:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf0:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004bfa:	f7fd fe69 	bl	80028d0 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x240>
 8004c02:	f7fd fe65 	bl	80028d0 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x240>
 8004c10:	2303      	movs	r3, #3
 8004c12:	e1e7      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004c14:	4b0e      	ldr	r3, [pc, #56]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ef      	beq.n	8004c02 <HAL_RCC_OscConfig+0x22e>
 8004c22:	e020      	b.n	8004c66 <HAL_RCC_OscConfig+0x292>
 8004c24:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c2a:	4a09      	ldr	r2, [pc, #36]	@ (8004c50 <HAL_RCC_OscConfig+0x27c>)
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c34:	f7fd fe4c 	bl	80028d0 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]
 8004c3a:	e00d      	b.n	8004c58 <HAL_RCC_OscConfig+0x284>
 8004c3c:	f7fd fe48 	bl	80028d0 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d906      	bls.n	8004c58 <HAL_RCC_OscConfig+0x284>
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e1ca      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004c4e:	bf00      	nop
 8004c50:	40021000 	.word	0x40021000
 8004c54:	20000008 	.word	0x20000008
 8004c58:	4b8c      	ldr	r3, [pc, #560]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1ea      	bne.n	8004c3c <HAL_RCC_OscConfig+0x268>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80a6 	beq.w	8004dc0 <HAL_RCC_OscConfig+0x3ec>
 8004c74:	2300      	movs	r3, #0
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	4b84      	ldr	r3, [pc, #528]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_OscConfig+0x2b4>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x2b6>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <HAL_RCC_OscConfig+0x2d6>
 8004c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c92:	4a7e      	ldr	r2, [pc, #504]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	4b79      	ldr	r3, [pc, #484]	@ (8004e90 <HAL_RCC_OscConfig+0x4bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x314>
 8004cb6:	4b76      	ldr	r3, [pc, #472]	@ (8004e90 <HAL_RCC_OscConfig+0x4bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a75      	ldr	r2, [pc, #468]	@ (8004e90 <HAL_RCC_OscConfig+0x4bc>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	f7fd fe05 	bl	80028d0 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x308>
 8004cca:	f7fd fe01 	bl	80028d0 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x308>
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e183      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e90 <HAL_RCC_OscConfig+0x4bc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x2f6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d108      	bne.n	8004d02 <HAL_RCC_OscConfig+0x32e>
 8004cf0:	4b66      	ldr	r3, [pc, #408]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	4a65      	ldr	r2, [pc, #404]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004cf8:	f043 0301 	orr.w	r3, r3, #1
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d00:	e024      	b.n	8004d4c <HAL_RCC_OscConfig+0x378>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d110      	bne.n	8004d2c <HAL_RCC_OscConfig+0x358>
 8004d0a:	4b60      	ldr	r3, [pc, #384]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d10:	4a5e      	ldr	r2, [pc, #376]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d12:	f043 0304 	orr.w	r3, r3, #4
 8004d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	4a5a      	ldr	r2, [pc, #360]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d2a:	e00f      	b.n	8004d4c <HAL_RCC_OscConfig+0x378>
 8004d2c:	4b57      	ldr	r3, [pc, #348]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d32:	4a56      	ldr	r2, [pc, #344]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d3c:	4b53      	ldr	r3, [pc, #332]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	4a52      	ldr	r2, [pc, #328]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d016      	beq.n	8004d82 <HAL_RCC_OscConfig+0x3ae>
 8004d54:	f7fd fdbc 	bl	80028d0 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCC_OscConfig+0x39e>
 8004d5c:	f7fd fdb8 	bl	80028d0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x39e>
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e138      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004d72:	4b46      	ldr	r3, [pc, #280]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ed      	beq.n	8004d5c <HAL_RCC_OscConfig+0x388>
 8004d80:	e015      	b.n	8004dae <HAL_RCC_OscConfig+0x3da>
 8004d82:	f7fd fda5 	bl	80028d0 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x3cc>
 8004d8a:	f7fd fda1 	bl	80028d0 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x3cc>
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e121      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004da0:	4b3a      	ldr	r3, [pc, #232]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1ed      	bne.n	8004d8a <HAL_RCC_OscConfig+0x3b6>
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x3ec>
 8004db4:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db8:	4a34      	ldr	r2, [pc, #208]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d03c      	beq.n	8004e46 <HAL_RCC_OscConfig+0x472>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x43a>
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dda:	4a2c      	ldr	r2, [pc, #176]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8004de4:	f7fd fd74 	bl	80028d0 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x42a>
 8004dec:	f7fd fd70 	bl	80028d0 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x42a>
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0f2      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004dfe:	4b23      	ldr	r3, [pc, #140]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ef      	beq.n	8004dec <HAL_RCC_OscConfig+0x418>
 8004e0c:	e01b      	b.n	8004e46 <HAL_RCC_OscConfig+0x472>
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e14:	4a1d      	ldr	r2, [pc, #116]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8004e1e:	f7fd fd57 	bl	80028d0 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x464>
 8004e26:	f7fd fd53 	bl	80028d0 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x464>
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0d5      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004e38:	4b14      	ldr	r3, [pc, #80]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ef      	bne.n	8004e26 <HAL_RCC_OscConfig+0x452>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 80c9 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x60e>
 8004e50:	4b0e      	ldr	r3, [pc, #56]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	f000 8083 	beq.w	8004f64 <HAL_RCC_OscConfig+0x590>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d15e      	bne.n	8004f24 <HAL_RCC_OscConfig+0x550>
 8004e66:	4b09      	ldr	r3, [pc, #36]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a08      	ldr	r2, [pc, #32]	@ (8004e8c <HAL_RCC_OscConfig+0x4b8>)
 8004e6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	f7fd fd2d 	bl	80028d0 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]
 8004e78:	e00c      	b.n	8004e94 <HAL_RCC_OscConfig+0x4c0>
 8004e7a:	f7fd fd29 	bl	80028d0 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d905      	bls.n	8004e94 <HAL_RCC_OscConfig+0x4c0>
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0ab      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40007000 	.word	0x40007000
 8004e94:	4b55      	ldr	r3, [pc, #340]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ec      	bne.n	8004e7a <HAL_RCC_OscConfig+0x4a6>
 8004ea0:	4b52      	ldr	r3, [pc, #328]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	4b52      	ldr	r3, [pc, #328]	@ (8004ff0 <HAL_RCC_OscConfig+0x61c>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6a11      	ldr	r1, [r2, #32]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	0112      	lsls	r2, r2, #4
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004eba:	0212      	lsls	r2, r2, #8
 8004ebc:	4311      	orrs	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ec2:	0852      	lsrs	r2, r2, #1
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	0552      	lsls	r2, r2, #21
 8004ec8:	4311      	orrs	r1, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0652      	lsls	r2, r2, #25
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004eda:	06d2      	lsls	r2, r2, #27
 8004edc:	430a      	orrs	r2, r1
 8004ede:	4943      	ldr	r1, [pc, #268]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60cb      	str	r3, [r1, #12]
 8004ee4:	4b41      	ldr	r3, [pc, #260]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a40      	ldr	r2, [pc, #256]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a3d      	ldr	r2, [pc, #244]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004efa:	60d3      	str	r3, [r2, #12]
 8004efc:	f7fd fce8 	bl	80028d0 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x542>
 8004f04:	f7fd fce4 	bl	80028d0 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x542>
 8004f12:	2303      	movs	r3, #3
 8004f14:	e066      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004f16:	4b35      	ldr	r3, [pc, #212]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x530>
 8004f22:	e05e      	b.n	8004fe2 <HAL_RCC_OscConfig+0x60e>
 8004f24:	4b31      	ldr	r3, [pc, #196]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a30      	ldr	r2, [pc, #192]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	f7fd fcce 	bl	80028d0 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x576>
 8004f38:	f7fd fcca 	bl	80028d0 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x576>
 8004f46:	2303      	movs	r3, #3
 8004f48:	e04c      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004f4a:	4b28      	ldr	r3, [pc, #160]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x564>
 8004f56:	4b25      	ldr	r3, [pc, #148]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	4924      	ldr	r1, [pc, #144]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ff4 <HAL_RCC_OscConfig+0x620>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]
 8004f62:	e03e      	b.n	8004fe2 <HAL_RCC_OscConfig+0x60e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_OscConfig+0x59c>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e039      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004f70:	4b1e      	ldr	r3, [pc, #120]	@ (8004fec <HAL_RCC_OscConfig+0x618>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 0203 	and.w	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d12c      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d123      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d11b      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb0:	06db      	lsls	r3, r3, #27
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d113      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	055b      	lsls	r3, r3, #21
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_OscConfig+0x60a>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	065b      	lsls	r3, r3, #25
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x60e>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCC_OscConfig+0x610>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	019f800c 	.word	0x019f800c
 8004ff4:	feeefffc 	.word	0xfeeefffc

08004ff8 <HAL_RCC_ClockConfig>:
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x18>
 800500c:	2301      	movs	r3, #1
 800500e:	e11e      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
 8005010:	4b91      	ldr	r3, [pc, #580]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d910      	bls.n	8005040 <HAL_RCC_ClockConfig+0x48>
 800501e:	4b8e      	ldr	r3, [pc, #568]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 020f 	bic.w	r2, r3, #15
 8005026:	498c      	ldr	r1, [pc, #560]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]
 800502e:	4b8a      	ldr	r3, [pc, #552]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x48>
 800503c:	2301      	movs	r3, #1
 800503e:	e106      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d073      	beq.n	8005134 <HAL_RCC_ClockConfig+0x13c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d129      	bne.n	80050a8 <HAL_RCC_ClockConfig+0xb0>
 8005054:	4b81      	ldr	r3, [pc, #516]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x6c>
 8005060:	2301      	movs	r3, #1
 8005062:	e0f4      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
 8005064:	f000 f99c 	bl	80053a0 <RCC_GetSysClockFreqFromPLLSource>
 8005068:	6138      	str	r0, [r7, #16]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4a7c      	ldr	r2, [pc, #496]	@ (8005260 <HAL_RCC_ClockConfig+0x268>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d93f      	bls.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
 8005072:	4b7a      	ldr	r3, [pc, #488]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <HAL_RCC_ClockConfig+0x9a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d033      	beq.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d12f      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
 8005092:	4b72      	ldr	r3, [pc, #456]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800509a:	4a70      	ldr	r2, [pc, #448]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800509c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a0:	6093      	str	r3, [r2, #8]
 80050a2:	2380      	movs	r3, #128	@ 0x80
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e024      	b.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d107      	bne.n	80050c0 <HAL_RCC_ClockConfig+0xc8>
 80050b0:	4b6a      	ldr	r3, [pc, #424]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xd8>
 80050bc:	2301      	movs	r3, #1
 80050be:	e0c6      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
 80050c0:	4b66      	ldr	r3, [pc, #408]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xd8>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0be      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
 80050d0:	f000 f8ce 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 80050d4:	6138      	str	r0, [r7, #16]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4a61      	ldr	r2, [pc, #388]	@ (8005260 <HAL_RCC_ClockConfig+0x268>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d909      	bls.n	80050f2 <HAL_RCC_ClockConfig+0xfa>
 80050de:	4b5f      	ldr	r3, [pc, #380]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050e6:	4a5d      	ldr	r2, [pc, #372]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ec:	6093      	str	r3, [r2, #8]
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	4b5a      	ldr	r3, [pc, #360]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f023 0203 	bic.w	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4957      	ldr	r1, [pc, #348]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005100:	4313      	orrs	r3, r2
 8005102:	608b      	str	r3, [r1, #8]
 8005104:	f7fd fbe4 	bl	80028d0 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	e00a      	b.n	8005122 <HAL_RCC_ClockConfig+0x12a>
 800510c:	f7fd fbe0 	bl	80028d0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x12a>
 800511e:	2303      	movs	r3, #3
 8005120:	e095      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
 8005122:	4b4e      	ldr	r3, [pc, #312]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 020c 	and.w	r2, r3, #12
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	429a      	cmp	r2, r3
 8005132:	d1eb      	bne.n	800510c <HAL_RCC_ClockConfig+0x114>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d023      	beq.n	8005188 <HAL_RCC_ClockConfig+0x190>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_RCC_ClockConfig+0x160>
 800514c:	4b43      	ldr	r3, [pc, #268]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	4a42      	ldr	r2, [pc, #264]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005152:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005156:	6093      	str	r3, [r2, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <HAL_RCC_ClockConfig+0x17c>
 8005164:	4b3d      	ldr	r3, [pc, #244]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800516c:	4a3b      	ldr	r2, [pc, #236]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800516e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005172:	6093      	str	r3, [r2, #8]
 8005174:	4b39      	ldr	r3, [pc, #228]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4936      	ldr	r1, [pc, #216]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
 8005186:	e008      	b.n	800519a <HAL_RCC_ClockConfig+0x1a2>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2b80      	cmp	r3, #128	@ 0x80
 800518c:	d105      	bne.n	800519a <HAL_RCC_ClockConfig+0x1a2>
 800518e:	4b33      	ldr	r3, [pc, #204]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	4a32      	ldr	r2, [pc, #200]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005198:	6093      	str	r3, [r2, #8]
 800519a:	4b2f      	ldr	r3, [pc, #188]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d21d      	bcs.n	80051e4 <HAL_RCC_ClockConfig+0x1ec>
 80051a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 020f 	bic.w	r2, r3, #15
 80051b0:	4929      	ldr	r1, [pc, #164]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]
 80051b8:	f7fd fb8a 	bl	80028d0 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1de>
 80051c0:	f7fd fb86 	bl	80028d0 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x1de>
 80051d2:	2303      	movs	r3, #3
 80051d4:	e03b      	b.n	800524e <HAL_RCC_ClockConfig+0x256>
 80051d6:	4b20      	ldr	r3, [pc, #128]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d1ed      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x1c8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_RCC_ClockConfig+0x20a>
 80051f0:	4b1a      	ldr	r3, [pc, #104]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4917      	ldr	r1, [pc, #92]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <HAL_RCC_ClockConfig+0x22a>
 800520e:	4b13      	ldr	r3, [pc, #76]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	490f      	ldr	r1, [pc, #60]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
 8005222:	f000 f825 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8005226:	4602      	mov	r2, r0
 8005228:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	490c      	ldr	r1, [pc, #48]	@ (8005264 <HAL_RCC_ClockConfig+0x26c>)
 8005234:	5ccb      	ldrb	r3, [r1, r3]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	4a0a      	ldr	r2, [pc, #40]	@ (8005268 <HAL_RCC_ClockConfig+0x270>)
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <HAL_RCC_ClockConfig+0x274>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fd faf6 	bl	8002838 <HAL_InitTick>
 800524c:	4603      	mov	r3, r0
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40022000 	.word	0x40022000
 800525c:	40021000 	.word	0x40021000
 8005260:	04c4b400 	.word	0x04c4b400
 8005264:	0800aeb4 	.word	0x0800aeb4
 8005268:	20000004 	.word	0x20000004
 800526c:	20000008 	.word	0x20000008

08005270 <HAL_RCC_GetSysClockFreq>:
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	4b2c      	ldr	r3, [pc, #176]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b04      	cmp	r3, #4
 8005280:	d102      	bne.n	8005288 <HAL_RCC_GetSysClockFreq+0x18>
 8005282:	4b2a      	ldr	r3, [pc, #168]	@ (800532c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	e047      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xa8>
 8005288:	4b27      	ldr	r3, [pc, #156]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 030c 	and.w	r3, r3, #12
 8005290:	2b08      	cmp	r3, #8
 8005292:	d102      	bne.n	800529a <HAL_RCC_GetSysClockFreq+0x2a>
 8005294:	4b25      	ldr	r3, [pc, #148]	@ (800532c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	e03e      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xa8>
 800529a:	4b23      	ldr	r3, [pc, #140]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d136      	bne.n	8005314 <HAL_RCC_GetSysClockFreq+0xa4>
 80052a6:	4b20      	ldr	r3, [pc, #128]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	3301      	adds	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d10c      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x6e>
 80052c4:	4a19      	ldr	r2, [pc, #100]	@ (800532c <HAL_RCC_GetSysClockFreq+0xbc>)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	4a16      	ldr	r2, [pc, #88]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ce:	68d2      	ldr	r2, [r2, #12]
 80052d0:	0a12      	lsrs	r2, r2, #8
 80052d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e00c      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x88>
 80052de:	4a13      	ldr	r2, [pc, #76]	@ (800532c <HAL_RCC_GetSysClockFreq+0xbc>)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	4a10      	ldr	r2, [pc, #64]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e8:	68d2      	ldr	r2, [r2, #12]
 80052ea:	0a12      	lsrs	r2, r2, #8
 80052ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	bf00      	nop
 80052f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	0e5b      	lsrs	r3, r3, #25
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	3301      	adds	r3, #1
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	e001      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xa8>
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4618      	mov	r0, r3
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
 800532c:	00f42400 	.word	0x00f42400

08005330 <HAL_RCC_GetHCLKFreq>:
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
 8005334:	4b03      	ldr	r3, [pc, #12]	@ (8005344 <HAL_RCC_GetHCLKFreq+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000004 	.word	0x20000004

08005348 <HAL_RCC_GetPCLK1Freq>:
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
 800534c:	f7ff fff0 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b06      	ldr	r3, [pc, #24]	@ (800536c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4904      	ldr	r1, [pc, #16]	@ (8005370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	0800aec4 	.word	0x0800aec4

08005374 <HAL_RCC_GetPCLK2Freq>:
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
 8005378:	f7ff ffda 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0adb      	lsrs	r3, r3, #11
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4904      	ldr	r1, [pc, #16]	@ (800539c <HAL_RCC_GetPCLK2Freq+0x28>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	0800aec4 	.word	0x0800aec4

080053a0 <RCC_GetSysClockFreqFromPLLSource>:
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d10c      	bne.n	80053de <RCC_GetSysClockFreqFromPLLSource+0x3e>
 80053c4:	4a17      	ldr	r2, [pc, #92]	@ (8005424 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	4a14      	ldr	r2, [pc, #80]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ce:	68d2      	ldr	r2, [r2, #12]
 80053d0:	0a12      	lsrs	r2, r2, #8
 80053d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e00c      	b.n	80053f8 <RCC_GetSysClockFreqFromPLLSource+0x58>
 80053de:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053e8:	68d2      	ldr	r2, [r2, #12]
 80053ea:	0a12      	lsrs	r2, r2, #8
 80053ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	bf00      	nop
 80053f8:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	0e5b      	lsrs	r3, r3, #25
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4618      	mov	r0, r3
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40021000 	.word	0x40021000
 8005424:	00f42400 	.word	0x00f42400

08005428 <HAL_RCCEx_PeriphCLKConfig>:
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	2300      	movs	r3, #0
 8005432:	74fb      	strb	r3, [r7, #19]
 8005434:	2300      	movs	r3, #0
 8005436:	74bb      	strb	r3, [r7, #18]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 8098 	beq.w	8005576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005446:	2300      	movs	r3, #0
 8005448:	747b      	strb	r3, [r7, #17]
 800544a:	4b43      	ldr	r3, [pc, #268]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10d      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005456:	4b40      	ldr	r3, [pc, #256]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545a:	4a3f      	ldr	r2, [pc, #252]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005460:	6593      	str	r3, [r2, #88]	@ 0x58
 8005462:	4b3d      	ldr	r3, [pc, #244]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2301      	movs	r3, #1
 8005470:	747b      	strb	r3, [r7, #17]
 8005472:	4b3a      	ldr	r3, [pc, #232]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a39      	ldr	r2, [pc, #228]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	f7fd fa27 	bl	80028d0 <HAL_GetTick>
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	e009      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005486:	f7fd fa23 	bl	80028d0 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d902      	bls.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005494:	2303      	movs	r3, #3
 8005496:	74fb      	strb	r3, [r7, #19]
 8005498:	e005      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800549a:	4b30      	ldr	r3, [pc, #192]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0ef      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80054a6:	7cfb      	ldrb	r3, [r7, #19]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d159      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80054ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01e      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d019      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054c8:	4b23      	ldr	r3, [pc, #140]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	4b20      	ldr	r3, [pc, #128]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054da:	4a1f      	ldr	r2, [pc, #124]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054f4:	4a18      	ldr	r2, [pc, #96]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d016      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005506:	f7fd f9e3 	bl	80028d0 <HAL_GetTick>
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	e00b      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800550e:	f7fd f9df 	bl	80028d0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551c:	4293      	cmp	r3, r2
 800551e:	d902      	bls.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005520:	2303      	movs	r3, #3
 8005522:	74fb      	strb	r3, [r7, #19]
 8005524:	e006      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005526:	4b0c      	ldr	r3, [pc, #48]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0ec      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8005534:	7cfb      	ldrb	r3, [r7, #19]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800553a:	4b07      	ldr	r3, [pc, #28]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005548:	4903      	ldr	r1, [pc, #12]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005550:	e008      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005552:	7cfb      	ldrb	r3, [r7, #19]
 8005554:	74bb      	strb	r3, [r7, #18]
 8005556:	e005      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005558:	40021000 	.word	0x40021000
 800555c:	40007000 	.word	0x40007000
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	74bb      	strb	r3, [r7, #18]
 8005564:	7c7b      	ldrb	r3, [r7, #17]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d105      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800556a:	4ba6      	ldr	r3, [pc, #664]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556e:	4aa5      	ldr	r2, [pc, #660]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005574:	6593      	str	r3, [r2, #88]	@ 0x58
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8005582:	4ba0      	ldr	r3, [pc, #640]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005588:	f023 0203 	bic.w	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	499c      	ldr	r1, [pc, #624]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 80055a4:	4b97      	ldr	r3, [pc, #604]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055aa:	f023 020c 	bic.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	4994      	ldr	r1, [pc, #592]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80055c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	498b      	ldr	r1, [pc, #556]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 80055e8:	4b86      	ldr	r3, [pc, #536]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	4983      	ldr	r1, [pc, #524]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800560a:	4b7e      	ldr	r3, [pc, #504]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	497a      	ldr	r1, [pc, #488]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800562c:	4b75      	ldr	r3, [pc, #468]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	4972      	ldr	r1, [pc, #456]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800564e:	4b6d      	ldr	r3, [pc, #436]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4969      	ldr	r1, [pc, #420]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005670:	4b64      	ldr	r3, [pc, #400]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	4961      	ldr	r1, [pc, #388]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8005692:	4b5c      	ldr	r3, [pc, #368]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	4958      	ldr	r1, [pc, #352]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80056b4:	4b53      	ldr	r3, [pc, #332]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c2:	4950      	ldr	r1, [pc, #320]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d2:	d105      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80056d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056de:	60d3      	str	r3, [r2, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d015      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80056ec:	4b45      	ldr	r3, [pc, #276]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fa:	4942      	ldr	r1, [pc, #264]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800570a:	d105      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800570c:	4b3d      	ldr	r3, [pc, #244]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a3c      	ldr	r2, [pc, #240]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005716:	60d3      	str	r3, [r2, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d015      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005724:	4b37      	ldr	r3, [pc, #220]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005732:	4934      	ldr	r1, [pc, #208]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005742:	d105      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005744:	4b2f      	ldr	r3, [pc, #188]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4a2e      	ldr	r2, [pc, #184]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800574a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800574e:	60d3      	str	r3, [r2, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800575c:	4b29      	ldr	r3, [pc, #164]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576a:	4926      	ldr	r1, [pc, #152]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800577a:	d105      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800577c:	4b21      	ldr	r3, [pc, #132]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4a20      	ldr	r2, [pc, #128]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005786:	60d3      	str	r3, [r2, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d015      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005794:	4b1b      	ldr	r3, [pc, #108]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a2:	4918      	ldr	r1, [pc, #96]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057b2:	d105      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80057b4:	4b13      	ldr	r3, [pc, #76]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057be:	60d3      	str	r3, [r2, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d015      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80057cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057da:	490a      	ldr	r1, [pc, #40]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ea:	d105      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4a04      	ldr	r2, [pc, #16]	@ (8005804 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f6:	60d3      	str	r3, [r2, #12]
 80057f8:	7cbb      	ldrb	r3, [r7, #18]
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000

08005808 <HAL_SPI_Init>:
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_SPI_Init+0x12>
 8005816:	2301      	movs	r3, #1
 8005818:	e09d      	b.n	8005956 <HAL_SPI_Init+0x14e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	d108      	bne.n	8005834 <HAL_SPI_Init+0x2c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800582a:	d009      	beq.n	8005840 <HAL_SPI_Init+0x38>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	61da      	str	r2, [r3, #28]
 8005832:	e005      	b.n	8005840 <HAL_SPI_Init+0x38>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	611a      	str	r2, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	615a      	str	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	629a      	str	r2, [r3, #40]	@ 0x28
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_SPI_Init+0x58>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fb0c 	bl	8001e78 <HAL_SPI_MspInit>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005880:	d902      	bls.n	8005888 <HAL_SPI_Init+0x80>
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e002      	b.n	800588e <HAL_SPI_Init+0x86>
 8005888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005896:	d007      	beq.n	80058a8 <HAL_SPI_Init+0xa0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058a0:	d002      	beq.n	80058a8 <HAL_SPI_Init+0xa0>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ea:	ea42 0103 	orr.w	r1, r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	f003 0204 	and.w	r2, r3, #4
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005924:	ea42 0103 	orr.w	r1, r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005944:	61da      	str	r2, [r3, #28]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	661a      	str	r2, [r3, #96]	@ 0x60
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005954:	2300      	movs	r3, #0
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_SPI_Transmit>:
 800595e:	b580      	push	{r7, lr}
 8005960:	b088      	sub	sp, #32
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
 800596e:	f7fc ffaf 	bl	80028d0 <HAL_GetTick>
 8005972:	61f8      	str	r0, [r7, #28]
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	837b      	strh	r3, [r7, #26]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d001      	beq.n	8005988 <HAL_SPI_Transmit+0x2a>
 8005984:	2302      	movs	r3, #2
 8005986:	e15c      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_Transmit+0x36>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_SPI_Transmit+0x3a>
 8005994:	2301      	movs	r3, #1
 8005996:	e154      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_SPI_Transmit+0x48>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e14d      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2203      	movs	r2, #3
 80059b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f8:	d10f      	bne.n	8005a1a <HAL_SPI_Transmit+0xbc>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b40      	cmp	r3, #64	@ 0x40
 8005a26:	d007      	beq.n	8005a38 <HAL_SPI_Transmit+0xda>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a40:	d952      	bls.n	8005ae8 <HAL_SPI_Transmit+0x18a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_SPI_Transmit+0xf2>
 8005a4a:	8b7b      	ldrh	r3, [r7, #26]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d145      	bne.n	8005adc <HAL_SPI_Transmit+0x17e>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a74:	e032      	b.n	8005adc <HAL_SPI_Transmit+0x17e>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d112      	bne.n	8005aaa <HAL_SPI_Transmit+0x14c>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a88:	881a      	ldrh	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60da      	str	r2, [r3, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	1c9a      	adds	r2, r3, #2
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005aa8:	e018      	b.n	8005adc <HAL_SPI_Transmit+0x17e>
 8005aaa:	f7fc ff11 	bl	80028d0 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d803      	bhi.n	8005ac2 <HAL_SPI_Transmit+0x164>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d102      	bne.n	8005ac8 <HAL_SPI_Transmit+0x16a>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <HAL_SPI_Transmit+0x17e>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e0b2      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1c7      	bne.n	8005a76 <HAL_SPI_Transmit+0x118>
 8005ae6:	e083      	b.n	8005bf0 <HAL_SPI_Transmit+0x292>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_Transmit+0x198>
 8005af0:	8b7b      	ldrh	r3, [r7, #26]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d177      	bne.n	8005be6 <HAL_SPI_Transmit+0x288>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d912      	bls.n	8005b26 <HAL_SPI_Transmit+0x1c8>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b04:	881a      	ldrh	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60da      	str	r2, [r3, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	1c9a      	adds	r2, r3, #2
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b02      	subs	r3, #2
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b24:	e05f      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	7812      	ldrb	r2, [r2, #0]
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b4c:	e04b      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d12b      	bne.n	8005bb4 <HAL_SPI_Transmit+0x256>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d912      	bls.n	8005b8c <HAL_SPI_Transmit+0x22e>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60da      	str	r2, [r3, #12]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b02      	subs	r3, #2
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b8a:	e02c      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	7812      	ldrb	r2, [r2, #0]
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bb2:	e018      	b.n	8005be6 <HAL_SPI_Transmit+0x288>
 8005bb4:	f7fc fe8c 	bl	80028d0 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d803      	bhi.n	8005bcc <HAL_SPI_Transmit+0x26e>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d102      	bne.n	8005bd2 <HAL_SPI_Transmit+0x274>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_SPI_Transmit+0x288>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005be2:	2303      	movs	r3, #3
 8005be4:	e02d      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ae      	bne.n	8005b4e <HAL_SPI_Transmit+0x1f0>
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 fb73 	bl	80062e0 <SPI_EndRxTxTransaction>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <HAL_SPI_Transmit+0x2a8>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	661a      	str	r2, [r3, #96]	@ 0x60
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_SPI_Transmit+0x2c6>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_SPI_Transmit+0x2e2>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <HAL_SPI_Transmit+0x2e4>
 8005c40:	2300      	movs	r3, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_SPI_TransmitReceive>:
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b08a      	sub	sp, #40	@ 0x28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	807b      	strh	r3, [r7, #2]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5c:	f7fc fe38 	bl	80028d0 <HAL_GetTick>
 8005c60:	6238      	str	r0, [r7, #32]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	887b      	ldrh	r3, [r7, #2]
 8005c72:	82fb      	strh	r3, [r7, #22]
 8005c74:	887b      	ldrh	r3, [r7, #2]
 8005c76:	82bb      	strh	r3, [r7, #20]
 8005c78:	7ffb      	ldrb	r3, [r7, #31]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d00c      	beq.n	8005c98 <HAL_SPI_TransmitReceive+0x4e>
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c84:	d106      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x4a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x4a>
 8005c8e:	7ffb      	ldrb	r3, [r7, #31]
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d001      	beq.n	8005c98 <HAL_SPI_TransmitReceive+0x4e>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e1f3      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_SPI_TransmitReceive+0x60>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_SPI_TransmitReceive+0x60>
 8005ca4:	887b      	ldrh	r3, [r7, #2]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_SPI_TransmitReceive+0x64>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e1e8      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x72>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e1e1      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d003      	beq.n	8005cd8 <HAL_SPI_TransmitReceive+0x8e>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2205      	movs	r2, #5
 8005cd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	661a      	str	r2, [r3, #96]	@ 0x60
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	887a      	ldrh	r2, [r7, #2]
 8005cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	639a      	str	r2, [r3, #56]	@ 0x38
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	887a      	ldrh	r2, [r7, #2]
 8005cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	887a      	ldrh	r2, [r7, #2]
 8005d04:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d1a:	d802      	bhi.n	8005d22 <HAL_SPI_TransmitReceive+0xd8>
 8005d1c:	8abb      	ldrh	r3, [r7, #20]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d908      	bls.n	8005d34 <HAL_SPI_TransmitReceive+0xea>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	e007      	b.n	8005d44 <HAL_SPI_TransmitReceive+0xfa>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d42:	605a      	str	r2, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4e:	2b40      	cmp	r3, #64	@ 0x40
 8005d50:	d007      	beq.n	8005d62 <HAL_SPI_TransmitReceive+0x118>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d6a:	f240 8083 	bls.w	8005e74 <HAL_SPI_TransmitReceive+0x22a>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_SPI_TransmitReceive+0x132>
 8005d76:	8afb      	ldrh	r3, [r7, #22]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d16f      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x212>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	881a      	ldrh	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60da      	str	r2, [r3, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	1c9a      	adds	r2, r3, #2
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005da0:	e05c      	b.n	8005e5c <HAL_SPI_TransmitReceive+0x212>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d11b      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x19e>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x19e>
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d113      	bne.n	8005de8 <HAL_SPI_TransmitReceive+0x19e>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc4:	881a      	ldrh	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60da      	str	r2, [r3, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	1c9a      	adds	r2, r3, #2
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005de4:	2300      	movs	r3, #0
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d11c      	bne.n	8005e30 <HAL_SPI_TransmitReceive+0x1e6>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x1e6>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0c:	b292      	uxth	r2, r2
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e14:	1c9a      	adds	r2, r3, #2
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e30:	f7fc fd4e 	bl	80028d0 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d80d      	bhi.n	8005e5c <HAL_SPI_TransmitReceive+0x212>
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d009      	beq.n	8005e5c <HAL_SPI_TransmitReceive+0x212>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e111      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d19d      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x158>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d197      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x158>
 8005e72:	e0e5      	b.n	8006040 <HAL_SPI_TransmitReceive+0x3f6>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x23a>
 8005e7c:	8afb      	ldrh	r3, [r7, #22]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	f040 80d1 	bne.w	8006026 <HAL_SPI_TransmitReceive+0x3dc>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d912      	bls.n	8005eb4 <HAL_SPI_TransmitReceive+0x26a>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e92:	881a      	ldrh	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60da      	str	r2, [r3, #12]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	1c9a      	adds	r2, r3, #2
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b02      	subs	r3, #2
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eb2:	e0b8      	b.n	8006026 <HAL_SPI_TransmitReceive+0x3dc>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	7812      	ldrb	r2, [r2, #0]
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eda:	e0a4      	b.n	8006026 <HAL_SPI_TransmitReceive+0x3dc>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d134      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x30a>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d02f      	beq.n	8005f54 <HAL_SPI_TransmitReceive+0x30a>
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d12c      	bne.n	8005f54 <HAL_SPI_TransmitReceive+0x30a>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d912      	bls.n	8005f2a <HAL_SPI_TransmitReceive+0x2e0>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	881a      	ldrh	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60da      	str	r2, [r3, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	1c9a      	adds	r2, r3, #2
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b02      	subs	r3, #2
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f28:	e012      	b.n	8005f50 <HAL_SPI_TransmitReceive+0x306>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f50:	2300      	movs	r3, #0
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d148      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x3aa>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d042      	beq.n	8005ff4 <HAL_SPI_TransmitReceive+0x3aa>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d923      	bls.n	8005fc2 <HAL_SPI_TransmitReceive+0x378>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	b292      	uxth	r2, r2
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b02      	subs	r3, #2
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d81f      	bhi.n	8005ff0 <HAL_SPI_TransmitReceive+0x3a6>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fbe:	605a      	str	r2, [r3, #4]
 8005fc0:	e016      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x3a6>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f103 020c 	add.w	r2, r3, #12
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fce:	7812      	ldrb	r2, [r2, #0]
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff4:	f7fc fc6c 	bl	80028d0 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006000:	429a      	cmp	r2, r3
 8006002:	d803      	bhi.n	800600c <HAL_SPI_TransmitReceive+0x3c2>
 8006004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d102      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x3c8>
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x3dc>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8006022:	2303      	movs	r3, #3
 8006024:	e02c      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f af55 	bne.w	8005edc <HAL_SPI_TransmitReceive+0x292>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	f47f af4e 	bne.w	8005edc <HAL_SPI_TransmitReceive+0x292>
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f94b 	bl	80062e0 <SPI_EndRxTxTransaction>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d008      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x418>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	661a      	str	r2, [r3, #96]	@ 0x60
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800605e:	2301      	movs	r3, #1
 8006060:	e00e      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_SPI_TransmitReceive+0x434>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <HAL_SPI_TransmitReceive+0x436>
 800607e:	2300      	movs	r3, #0
 8006080:	4618      	mov	r0, r3
 8006082:	3728      	adds	r7, #40	@ 0x28
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_SPI_GetState>:
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <SPI_WaitFlagStateUntilTimeout>:
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	603b      	str	r3, [r7, #0]
 80060b0:	4613      	mov	r3, r2
 80060b2:	71fb      	strb	r3, [r7, #7]
 80060b4:	f7fc fc0c 	bl	80028d0 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	4413      	add	r3, r2
 80060c2:	61fb      	str	r3, [r7, #28]
 80060c4:	f7fc fc04 	bl	80028d0 <HAL_GetTick>
 80060c8:	61b8      	str	r0, [r7, #24]
 80060ca:	4b39      	ldr	r3, [pc, #228]	@ (80061b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	015b      	lsls	r3, r3, #5
 80060d0:	0d1b      	lsrs	r3, r3, #20
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	fb02 f303 	mul.w	r3, r2, r3
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	e054      	b.n	8006186 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d050      	beq.n	8006186 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80060e4:	f7fc fbf4 	bl	80028d0 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d902      	bls.n	80060fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d13d      	bne.n	8006176 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006112:	d111      	bne.n	8006138 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800611c:	d004      	beq.n	8006128 <SPI_WaitFlagStateUntilTimeout+0x84>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006126:	d107      	bne.n	8006138 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006140:	d10f      	bne.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8006172:	2303      	movs	r3, #3
 8006174:	e017      	b.n	80061a6 <SPI_WaitFlagStateUntilTimeout+0x102>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3b01      	subs	r3, #1
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4013      	ands	r3, r2
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	429a      	cmp	r2, r3
 8006194:	bf0c      	ite	eq
 8006196:	2301      	moveq	r3, #1
 8006198:	2300      	movne	r3, #0
 800619a:	b2db      	uxtb	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d19b      	bne.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x38>
 80061a4:	2300      	movs	r3, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000004 	.word	0x20000004

080061b4 <SPI_WaitFifoStateUntilTimeout>:
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	@ 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]
 80061c6:	f7fc fb83 	bl	80028d0 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	4413      	add	r3, r2
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d6:	f7fc fb7b 	bl	80028d0 <HAL_GetTick>
 80061da:	6238      	str	r0, [r7, #32]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	61fb      	str	r3, [r7, #28]
 80061e4:	4b3d      	ldr	r3, [pc, #244]	@ (80062dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	00da      	lsls	r2, r3, #3
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	0d1b      	lsrs	r3, r3, #20
 80061f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	e060      	b.n	80062c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006204:	d107      	bne.n	8006216 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <SPI_WaitFifoStateUntilTimeout+0x62>
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	75fb      	strb	r3, [r7, #23]
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d050      	beq.n	80062c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
 800621e:	f7fc fb57 	bl	80028d0 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622a:	429a      	cmp	r2, r3
 800622c:	d902      	bls.n	8006234 <SPI_WaitFifoStateUntilTimeout+0x80>
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	2b00      	cmp	r3, #0
 8006232:	d13d      	bne.n	80062b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006242:	605a      	str	r2, [r3, #4]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800624c:	d111      	bne.n	8006272 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006256:	d004      	beq.n	8006262 <SPI_WaitFifoStateUntilTimeout+0xae>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006260:	d107      	bne.n	8006272 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627a:	d10f      	bne.n	800629c <SPI_WaitFifoStateUntilTimeout+0xe8>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80062ac:	2303      	movs	r3, #3
 80062ae:	e010      	b.n	80062d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <SPI_WaitFifoStateUntilTimeout+0x106>
 80062b6:	2300      	movs	r3, #0
 80062b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	3b01      	subs	r3, #1
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d196      	bne.n	80061fe <SPI_WaitFifoStateUntilTimeout+0x4a>
 80062d0:	2300      	movs	r3, #0
 80062d2:	4618      	mov	r0, r3
 80062d4:	3728      	adds	r7, #40	@ 0x28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000004 	.word	0x20000004

080062e0 <SPI_EndRxTxTransaction>:
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff ff5b 	bl	80061b4 <SPI_WaitFifoStateUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <SPI_EndRxTxTransaction+0x34>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	661a      	str	r2, [r3, #96]	@ 0x60
 8006310:	2303      	movs	r3, #3
 8006312:	e027      	b.n	8006364 <SPI_EndRxTxTransaction+0x84>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2200      	movs	r2, #0
 800631c:	2180      	movs	r1, #128	@ 0x80
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f7ff fec0 	bl	80060a4 <SPI_WaitFlagStateUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <SPI_EndRxTxTransaction+0x5a>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	661a      	str	r2, [r3, #96]	@ 0x60
 8006336:	2303      	movs	r3, #3
 8006338:	e014      	b.n	8006364 <SPI_EndRxTxTransaction+0x84>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2200      	movs	r2, #0
 8006342:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff ff34 	bl	80061b4 <SPI_WaitFifoStateUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <SPI_EndRxTxTransaction+0x82>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	661a      	str	r2, [r3, #96]	@ 0x60
 800635e:	2303      	movs	r3, #3
 8006360:	e000      	b.n	8006364 <SPI_EndRxTxTransaction+0x84>
 8006362:	2300      	movs	r3, #0
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_Base_Init>:
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_TIM_Base_Init+0x12>
 800637a:	2301      	movs	r3, #1
 800637c:	e049      	b.n	8006412 <HAL_TIM_Base_Init+0xa6>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <HAL_TIM_Base_Init+0x2c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fb ff60 	bl	8002258 <HAL_TIM_Base_MspInit>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f000 faa4 	bl	80068f8 <TIM_Base_SetConfig>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006410:	2300      	movs	r3, #0
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <HAL_TIM_PWM_Init>:
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_TIM_PWM_Init+0x12>
 8006428:	2301      	movs	r3, #1
 800642a:	e049      	b.n	80064c0 <HAL_TIM_PWM_Init+0xa6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <HAL_TIM_PWM_Init+0x2c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f841 	bl	80064c8 <HAL_TIM_PWM_MspInit>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2202      	movs	r2, #2
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3304      	adds	r3, #4
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f000 fa4d 	bl	80068f8 <TIM_Base_SetConfig>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80064be:	2300      	movs	r3, #0
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_PWM_MspInit>:
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIM_PWM_ConfigChannel>:
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	2300      	movs	r3, #0
 80064ea:	75fb      	strb	r3, [r7, #23]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e0ff      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b14      	cmp	r3, #20
 8006506:	f200 80f0 	bhi.w	80066ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800650a:	a201      	add	r2, pc, #4	@ (adr r2, 8006510 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006565 	.word	0x08006565
 8006514:	080066eb 	.word	0x080066eb
 8006518:	080066eb 	.word	0x080066eb
 800651c:	080066eb 	.word	0x080066eb
 8006520:	080065a5 	.word	0x080065a5
 8006524:	080066eb 	.word	0x080066eb
 8006528:	080066eb 	.word	0x080066eb
 800652c:	080066eb 	.word	0x080066eb
 8006530:	080065e7 	.word	0x080065e7
 8006534:	080066eb 	.word	0x080066eb
 8006538:	080066eb 	.word	0x080066eb
 800653c:	080066eb 	.word	0x080066eb
 8006540:	08006627 	.word	0x08006627
 8006544:	080066eb 	.word	0x080066eb
 8006548:	080066eb 	.word	0x080066eb
 800654c:	080066eb 	.word	0x080066eb
 8006550:	08006669 	.word	0x08006669
 8006554:	080066eb 	.word	0x080066eb
 8006558:	080066eb 	.word	0x080066eb
 800655c:	080066eb 	.word	0x080066eb
 8006560:	080066a9 	.word	0x080066a9
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fa60 	bl	8006a30 <TIM_OC1_SetConfig>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0208 	orr.w	r2, r2, #8
 800657e:	619a      	str	r2, [r3, #24]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0204 	bic.w	r2, r2, #4
 800658e:	619a      	str	r2, [r3, #24]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6999      	ldr	r1, [r3, #24]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	619a      	str	r2, [r3, #24]
 80065a2:	e0a5      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fad0 	bl	8006b50 <TIM_OC2_SetConfig>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065be:	619a      	str	r2, [r3, #24]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ce:	619a      	str	r2, [r3, #24]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6999      	ldr	r1, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	021a      	lsls	r2, r3, #8
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	619a      	str	r2, [r3, #24]
 80065e4:	e084      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fb39 	bl	8006c64 <TIM_OC3_SetConfig>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0208 	orr.w	r2, r2, #8
 8006600:	61da      	str	r2, [r3, #28]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0204 	bic.w	r2, r2, #4
 8006610:	61da      	str	r2, [r3, #28]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69d9      	ldr	r1, [r3, #28]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	61da      	str	r2, [r3, #28]
 8006624:	e064      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fba1 	bl	8006d74 <TIM_OC4_SetConfig>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006640:	61da      	str	r2, [r3, #28]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006650:	61da      	str	r2, [r3, #28]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69d9      	ldr	r1, [r3, #28]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	021a      	lsls	r2, r3, #8
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	61da      	str	r2, [r3, #28]
 8006666:	e043      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fc0a 	bl	8006e88 <TIM_OC5_SetConfig>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0208 	orr.w	r2, r2, #8
 8006682:	651a      	str	r2, [r3, #80]	@ 0x50
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0204 	bic.w	r2, r2, #4
 8006692:	651a      	str	r2, [r3, #80]	@ 0x50
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80066a6:	e023      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fc4e 	bl	8006f50 <TIM_OC6_SetConfig>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	021a      	lsls	r2, r3, #8
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80066e8:	e002      	b.n	80066f0 <HAL_TIM_PWM_ConfigChannel+0x214>
 80066ea:	2301      	movs	r3, #1
 80066ec:	75fb      	strb	r3, [r7, #23]
 80066ee:	bf00      	nop
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop

08006704 <HAL_TIM_ConfigClockSource>:
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
 800670e:	2300      	movs	r3, #0
 8006710:	73fb      	strb	r3, [r7, #15]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_TIM_ConfigClockSource+0x1c>
 800671c:	2302      	movs	r3, #2
 800671e:	e0de      	b.n	80068de <HAL_TIM_ConfigClockSource+0x1da>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	60bb      	str	r3, [r7, #8]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800673e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006742:	60bb      	str	r3, [r7, #8]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800674a:	60bb      	str	r3, [r7, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	609a      	str	r2, [r3, #8]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a63      	ldr	r2, [pc, #396]	@ (80068e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	f000 80a9 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006760:	4a61      	ldr	r2, [pc, #388]	@ (80068e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	f200 80ae 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006768:	4a60      	ldr	r2, [pc, #384]	@ (80068ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	f000 80a1 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006770:	4a5e      	ldr	r2, [pc, #376]	@ (80068ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	f200 80a6 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006778:	4a5d      	ldr	r2, [pc, #372]	@ (80068f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800677a:	4293      	cmp	r3, r2
 800677c:	f000 8099 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006780:	4a5b      	ldr	r2, [pc, #364]	@ (80068f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006782:	4293      	cmp	r3, r2
 8006784:	f200 809e 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006788:	4a5a      	ldr	r2, [pc, #360]	@ (80068f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	f000 8091 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006790:	4a58      	ldr	r2, [pc, #352]	@ (80068f4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	f200 8096 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 8006798:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800679c:	f000 8089 	beq.w	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067a4:	f200 808e 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ac:	d03e      	beq.n	800682c <HAL_TIM_ConfigClockSource+0x128>
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067b2:	f200 8087 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ba:	f000 8086 	beq.w	80068ca <HAL_TIM_ConfigClockSource+0x1c6>
 80067be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c2:	d87f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067c4:	2b70      	cmp	r3, #112	@ 0x70
 80067c6:	d01a      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0xfa>
 80067c8:	2b70      	cmp	r3, #112	@ 0x70
 80067ca:	d87b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067cc:	2b60      	cmp	r3, #96	@ 0x60
 80067ce:	d050      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x16e>
 80067d0:	2b60      	cmp	r3, #96	@ 0x60
 80067d2:	d877      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067d4:	2b50      	cmp	r3, #80	@ 0x50
 80067d6:	d03c      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0x14e>
 80067d8:	2b50      	cmp	r3, #80	@ 0x50
 80067da:	d873      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067dc:	2b40      	cmp	r3, #64	@ 0x40
 80067de:	d058      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x18e>
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	d86f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067e4:	2b30      	cmp	r3, #48	@ 0x30
 80067e6:	d064      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067e8:	2b30      	cmp	r3, #48	@ 0x30
 80067ea:	d86b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d060      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d867      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d05c      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d05a      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x1ae>
 80067fc:	e062      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x1c0>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6899      	ldr	r1, [r3, #8]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f000 fc81 	bl	8007114 <TIM_ETR_SetConfig>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60bb      	str	r3, [r7, #8]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006820:	60bb      	str	r3, [r7, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	e04f      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f000 fc6a 	bl	8007114 <TIM_ETR_SetConfig>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800684e:	609a      	str	r2, [r3, #8]
 8006850:	e03c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6859      	ldr	r1, [r3, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	461a      	mov	r2, r3
 8006860:	f000 fbdc 	bl	800701c <TIM_TI1_ConfigInputStage>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2150      	movs	r1, #80	@ 0x50
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fc35 	bl	80070da <TIM_ITRx_SetConfig>
 8006870:	e02c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	461a      	mov	r2, r3
 8006880:	f000 fbfb 	bl	800707a <TIM_TI2_ConfigInputStage>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2160      	movs	r1, #96	@ 0x60
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fc25 	bl	80070da <TIM_ITRx_SetConfig>
 8006890:	e01c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 fbbc 	bl	800701c <TIM_TI1_ConfigInputStage>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2140      	movs	r1, #64	@ 0x40
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fc15 	bl	80070da <TIM_ITRx_SetConfig>
 80068b0:	e00c      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4619      	mov	r1, r3
 80068bc:	4610      	mov	r0, r2
 80068be:	f000 fc0c 	bl	80070da <TIM_ITRx_SetConfig>
 80068c2:	e003      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
 80068c8:	e000      	b.n	80068cc <HAL_TIM_ConfigClockSource+0x1c8>
 80068ca:	bf00      	nop
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	00100070 	.word	0x00100070
 80068ec:	00100040 	.word	0x00100040
 80068f0:	00100030 	.word	0x00100030
 80068f4:	00100020 	.word	0x00100020

080068f8 <TIM_Base_SetConfig>:
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a42      	ldr	r2, [pc, #264]	@ (8006a14 <TIM_Base_SetConfig+0x11c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00f      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006916:	d00b      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a3f      	ldr	r2, [pc, #252]	@ (8006a18 <TIM_Base_SetConfig+0x120>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d007      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a3e      	ldr	r2, [pc, #248]	@ (8006a1c <TIM_Base_SetConfig+0x124>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a20 <TIM_Base_SetConfig+0x128>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d108      	bne.n	8006942 <TIM_Base_SetConfig+0x4a>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a33      	ldr	r2, [pc, #204]	@ (8006a14 <TIM_Base_SetConfig+0x11c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01b      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006950:	d017      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a30      	ldr	r2, [pc, #192]	@ (8006a18 <TIM_Base_SetConfig+0x120>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2f      	ldr	r2, [pc, #188]	@ (8006a1c <TIM_Base_SetConfig+0x124>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2e      	ldr	r2, [pc, #184]	@ (8006a20 <TIM_Base_SetConfig+0x128>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a2d      	ldr	r2, [pc, #180]	@ (8006a24 <TIM_Base_SetConfig+0x12c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a2c      	ldr	r2, [pc, #176]	@ (8006a28 <TIM_Base_SetConfig+0x130>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a2b      	ldr	r2, [pc, #172]	@ (8006a2c <TIM_Base_SetConfig+0x134>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d108      	bne.n	8006994 <TIM_Base_SetConfig+0x9c>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a16      	ldr	r2, [pc, #88]	@ (8006a14 <TIM_Base_SetConfig+0x11c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00f      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a17      	ldr	r2, [pc, #92]	@ (8006a20 <TIM_Base_SetConfig+0x128>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a16      	ldr	r2, [pc, #88]	@ (8006a24 <TIM_Base_SetConfig+0x12c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d007      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a15      	ldr	r2, [pc, #84]	@ (8006a28 <TIM_Base_SetConfig+0x130>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_Base_SetConfig+0xe8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a14      	ldr	r2, [pc, #80]	@ (8006a2c <TIM_Base_SetConfig+0x134>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d103      	bne.n	80069e8 <TIM_Base_SetConfig+0xf0>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	615a      	str	r2, [r3, #20]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d105      	bne.n	8006a06 <TIM_Base_SetConfig+0x10e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f023 0201 	bic.w	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	611a      	str	r2, [r3, #16]
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800

08006a30 <TIM_OC1_SetConfig>:
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f023 0201 	bic.w	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	621a      	str	r2, [r3, #32]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	613b      	str	r3, [r7, #16]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0303 	bic.w	r3, r3, #3
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f023 0302 	bic.w	r3, r3, #2
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8006b3c <TIM_OC1_SetConfig+0x10c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00f      	beq.n	8006ab0 <TIM_OC1_SetConfig+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a2b      	ldr	r2, [pc, #172]	@ (8006b40 <TIM_OC1_SetConfig+0x110>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <TIM_OC1_SetConfig+0x80>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b44 <TIM_OC1_SetConfig+0x114>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d007      	beq.n	8006ab0 <TIM_OC1_SetConfig+0x80>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a29      	ldr	r2, [pc, #164]	@ (8006b48 <TIM_OC1_SetConfig+0x118>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_OC1_SetConfig+0x80>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a28      	ldr	r2, [pc, #160]	@ (8006b4c <TIM_OC1_SetConfig+0x11c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10c      	bne.n	8006aca <TIM_OC1_SetConfig+0x9a>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f023 0308 	bic.w	r3, r3, #8
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f023 0304 	bic.w	r3, r3, #4
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b3c <TIM_OC1_SetConfig+0x10c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00f      	beq.n	8006af2 <TIM_OC1_SetConfig+0xc2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8006b40 <TIM_OC1_SetConfig+0x110>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <TIM_OC1_SetConfig+0xc2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a19      	ldr	r2, [pc, #100]	@ (8006b44 <TIM_OC1_SetConfig+0x114>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <TIM_OC1_SetConfig+0xc2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a18      	ldr	r2, [pc, #96]	@ (8006b48 <TIM_OC1_SetConfig+0x118>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_OC1_SetConfig+0xc2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a17      	ldr	r2, [pc, #92]	@ (8006b4c <TIM_OC1_SetConfig+0x11c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d111      	bne.n	8006b16 <TIM_OC1_SetConfig+0xe6>
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b00:	613b      	str	r3, [r7, #16]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	605a      	str	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	619a      	str	r2, [r3, #24]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
 8006b30:	bf00      	nop
 8006b32:	371c      	adds	r7, #28
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40013400 	.word	0x40013400
 8006b44:	40014000 	.word	0x40014000
 8006b48:	40014400 	.word	0x40014400
 8006b4c:	40014800 	.word	0x40014800

08006b50 <TIM_OC2_SetConfig>:
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	f023 0210 	bic.w	r2, r3, #16
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	621a      	str	r2, [r3, #32]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	021b      	lsls	r3, r3, #8
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0320 	bic.w	r3, r3, #32
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a28      	ldr	r2, [pc, #160]	@ (8006c50 <TIM_OC2_SetConfig+0x100>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d003      	beq.n	8006bbc <TIM_OC2_SetConfig+0x6c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a27      	ldr	r2, [pc, #156]	@ (8006c54 <TIM_OC2_SetConfig+0x104>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d10d      	bne.n	8006bd8 <TIM_OC2_SetConfig+0x88>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	011b      	lsls	r3, r3, #4
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <TIM_OC2_SetConfig+0x100>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d00f      	beq.n	8006c00 <TIM_OC2_SetConfig+0xb0>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <TIM_OC2_SetConfig+0x104>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d00b      	beq.n	8006c00 <TIM_OC2_SetConfig+0xb0>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <TIM_OC2_SetConfig+0x108>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d007      	beq.n	8006c00 <TIM_OC2_SetConfig+0xb0>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c5c <TIM_OC2_SetConfig+0x10c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_OC2_SetConfig+0xb0>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a19      	ldr	r2, [pc, #100]	@ (8006c60 <TIM_OC2_SetConfig+0x110>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d113      	bne.n	8006c28 <TIM_OC2_SetConfig+0xd8>
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	605a      	str	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	619a      	str	r2, [r3, #24]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	621a      	str	r2, [r3, #32]
 8006c42:	bf00      	nop
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40013400 	.word	0x40013400
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40014400 	.word	0x40014400
 8006c60:	40014800 	.word	0x40014800

08006c64 <TIM_OC3_SetConfig>:
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	621a      	str	r2, [r3, #32]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a27      	ldr	r2, [pc, #156]	@ (8006d60 <TIM_OC3_SetConfig+0xfc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d003      	beq.n	8006cce <TIM_OC3_SetConfig+0x6a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a26      	ldr	r2, [pc, #152]	@ (8006d64 <TIM_OC3_SetConfig+0x100>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d10d      	bne.n	8006cea <TIM_OC3_SetConfig+0x86>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a1c      	ldr	r2, [pc, #112]	@ (8006d60 <TIM_OC3_SetConfig+0xfc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00f      	beq.n	8006d12 <TIM_OC3_SetConfig+0xae>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d64 <TIM_OC3_SetConfig+0x100>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_OC3_SetConfig+0xae>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8006d68 <TIM_OC3_SetConfig+0x104>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <TIM_OC3_SetConfig+0xae>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a19      	ldr	r2, [pc, #100]	@ (8006d6c <TIM_OC3_SetConfig+0x108>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_OC3_SetConfig+0xae>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <TIM_OC3_SetConfig+0x10c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d113      	bne.n	8006d3a <TIM_OC3_SetConfig+0xd6>
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	605a      	str	r2, [r3, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	61da      	str	r2, [r3, #28]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	621a      	str	r2, [r3, #32]
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800

08006d74 <TIM_OC4_SetConfig>:
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	621a      	str	r2, [r3, #32]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	021b      	lsls	r3, r3, #8
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	031b      	lsls	r3, r3, #12
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a28      	ldr	r2, [pc, #160]	@ (8006e74 <TIM_OC4_SetConfig+0x100>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d003      	beq.n	8006de0 <TIM_OC4_SetConfig+0x6c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a27      	ldr	r2, [pc, #156]	@ (8006e78 <TIM_OC4_SetConfig+0x104>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10d      	bne.n	8006dfc <TIM_OC4_SetConfig+0x88>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	031b      	lsls	r3, r3, #12
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8006e74 <TIM_OC4_SetConfig+0x100>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00f      	beq.n	8006e24 <TIM_OC4_SetConfig+0xb0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a1c      	ldr	r2, [pc, #112]	@ (8006e78 <TIM_OC4_SetConfig+0x104>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00b      	beq.n	8006e24 <TIM_OC4_SetConfig+0xb0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <TIM_OC4_SetConfig+0x108>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <TIM_OC4_SetConfig+0xb0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a1a      	ldr	r2, [pc, #104]	@ (8006e80 <TIM_OC4_SetConfig+0x10c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_OC4_SetConfig+0xb0>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a19      	ldr	r2, [pc, #100]	@ (8006e84 <TIM_OC4_SetConfig+0x110>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d113      	bne.n	8006e4c <TIM_OC4_SetConfig+0xd8>
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	019b      	lsls	r3, r3, #6
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	019b      	lsls	r3, r3, #6
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	605a      	str	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	61da      	str	r2, [r3, #28]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	621a      	str	r2, [r3, #32]
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40013400 	.word	0x40013400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800

08006e88 <TIM_OC5_SetConfig>:
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	621a      	str	r2, [r3, #32]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	041b      	lsls	r3, r3, #16
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a17      	ldr	r2, [pc, #92]	@ (8006f3c <TIM_OC5_SetConfig+0xb4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00f      	beq.n	8006f02 <TIM_OC5_SetConfig+0x7a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a16      	ldr	r2, [pc, #88]	@ (8006f40 <TIM_OC5_SetConfig+0xb8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00b      	beq.n	8006f02 <TIM_OC5_SetConfig+0x7a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a15      	ldr	r2, [pc, #84]	@ (8006f44 <TIM_OC5_SetConfig+0xbc>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d007      	beq.n	8006f02 <TIM_OC5_SetConfig+0x7a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a14      	ldr	r2, [pc, #80]	@ (8006f48 <TIM_OC5_SetConfig+0xc0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d003      	beq.n	8006f02 <TIM_OC5_SetConfig+0x7a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a13      	ldr	r2, [pc, #76]	@ (8006f4c <TIM_OC5_SetConfig+0xc4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d109      	bne.n	8006f16 <TIM_OC5_SetConfig+0x8e>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	649a      	str	r2, [r3, #72]	@ 0x48
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	621a      	str	r2, [r3, #32]
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40013400 	.word	0x40013400
 8006f44:	40014000 	.word	0x40014000
 8006f48:	40014400 	.word	0x40014400
 8006f4c:	40014800 	.word	0x40014800

08006f50 <TIM_OC6_SetConfig>:
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	621a      	str	r2, [r3, #32]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	051b      	lsls	r3, r3, #20
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a18      	ldr	r2, [pc, #96]	@ (8007008 <TIM_OC6_SetConfig+0xb8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00f      	beq.n	8006fcc <TIM_OC6_SetConfig+0x7c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a17      	ldr	r2, [pc, #92]	@ (800700c <TIM_OC6_SetConfig+0xbc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00b      	beq.n	8006fcc <TIM_OC6_SetConfig+0x7c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a16      	ldr	r2, [pc, #88]	@ (8007010 <TIM_OC6_SetConfig+0xc0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d007      	beq.n	8006fcc <TIM_OC6_SetConfig+0x7c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a15      	ldr	r2, [pc, #84]	@ (8007014 <TIM_OC6_SetConfig+0xc4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC6_SetConfig+0x7c>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a14      	ldr	r2, [pc, #80]	@ (8007018 <TIM_OC6_SetConfig+0xc8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d109      	bne.n	8006fe0 <TIM_OC6_SetConfig+0x90>
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	605a      	str	r2, [r3, #4]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	651a      	str	r2, [r3, #80]	@ 0x50
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	621a      	str	r2, [r3, #32]
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40013400 	.word	0x40013400
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800

0800701c <TIM_TI1_ConfigInputStage>:
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0201 	bic.w	r2, r3, #1
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 030a 	bic.w	r3, r3, #10
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	619a      	str	r2, [r3, #24]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	621a      	str	r2, [r3, #32]
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <TIM_TI2_ConfigInputStage>:
 800707a:	b480      	push	{r7}
 800707c:	b087      	sub	sp, #28
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	f023 0210 	bic.w	r2, r3, #16
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	621a      	str	r2, [r3, #32]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	031b      	lsls	r3, r3, #12
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	619a      	str	r2, [r3, #24]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	621a      	str	r2, [r3, #32]
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <TIM_ITRx_SetConfig>:
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80070f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f043 0307 	orr.w	r3, r3, #7
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	609a      	str	r2, [r3, #8]
 8007108:	bf00      	nop
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <TIM_ETR_SetConfig>:
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	021a      	lsls	r2, r3, #8
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	431a      	orrs	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4313      	orrs	r3, r2
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	609a      	str	r2, [r3, #8]
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIMEx_MasterConfigSynchronization>:
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007168:	2302      	movs	r3, #2
 800716a:	e065      	b.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	60bb      	str	r3, [r7, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2c      	ldr	r2, [pc, #176]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d004      	beq.n	80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2b      	ldr	r2, [pc, #172]	@ (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d108      	bne.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80071b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	605a      	str	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d018      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e2:	d013      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a18      	ldr	r2, [pc, #96]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00e      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a17      	ldr	r2, [pc, #92]	@ (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d009      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a12      	ldr	r2, [pc, #72]	@ (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d004      	beq.n	800720c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a13      	ldr	r2, [pc, #76]	@ (8007254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d10c      	bne.n	8007226 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	4313      	orrs	r3, r2
 800721c:	60bb      	str	r3, [r7, #8]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	609a      	str	r2, [r3, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007236:	2300      	movs	r3, #0
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	40012c00 	.word	0x40012c00
 8007248:	40013400 	.word	0x40013400
 800724c:	40000400 	.word	0x40000400
 8007250:	40000800 	.word	0x40000800
 8007254:	40014000 	.word	0x40014000

08007258 <HAL_UART_Init>:
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_UART_Init+0x12>
 8007266:	2301      	movs	r3, #1
 8007268:	e042      	b.n	80072f0 <HAL_UART_Init+0x98>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007270:	2b00      	cmp	r3, #0
 8007272:	d106      	bne.n	8007282 <HAL_UART_Init+0x2a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7fb f8ed 	bl	800245c <HAL_UART_MspInit>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2224      	movs	r2, #36	@ 0x24
 8007286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_UART_Init+0x50>
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fe56 	bl	8007f54 <UART_AdvFeatureConfig>
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fb87 	bl	80079bc <UART_SetConfig>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_UART_Init+0x60>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e01b      	b.n	80072f0 <HAL_UART_Init+0x98>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072c6:	605a      	str	r2, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072d6:	609a      	str	r2, [r3, #8]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fed5 	bl	8008098 <UART_CheckIdleState>
 80072ee:	4603      	mov	r3, r0
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_UART_IRQHandler>:
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b0ba      	sub	sp, #232	@ 0xe8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800731e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007322:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007326:	4013      	ands	r3, r2
 8007328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800732c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d11b      	bne.n	800736c <HAL_UART_IRQHandler+0x74>
 8007334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d015      	beq.n	800736c <HAL_UART_IRQHandler+0x74>
 8007340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d105      	bne.n	8007358 <HAL_UART_IRQHandler+0x60>
 800734c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <HAL_UART_IRQHandler+0x74>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8300 	beq.w	8007962 <HAL_UART_IRQHandler+0x66a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
 800736a:	e2fa      	b.n	8007962 <HAL_UART_IRQHandler+0x66a>
 800736c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8123 	beq.w	80075bc <HAL_UART_IRQHandler+0x2c4>
 8007376:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800737a:	4b8d      	ldr	r3, [pc, #564]	@ (80075b0 <HAL_UART_IRQHandler+0x2b8>)
 800737c:	4013      	ands	r3, r2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_UART_IRQHandler+0x98>
 8007382:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007386:	4b8b      	ldr	r3, [pc, #556]	@ (80075b4 <HAL_UART_IRQHandler+0x2bc>)
 8007388:	4013      	ands	r3, r2
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8116 	beq.w	80075bc <HAL_UART_IRQHandler+0x2c4>
 8007390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d011      	beq.n	80073c0 <HAL_UART_IRQHandler+0xc8>
 800739c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00b      	beq.n	80073c0 <HAL_UART_IRQHandler+0xc8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2201      	movs	r2, #1
 80073ae:	621a      	str	r2, [r3, #32]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b6:	f043 0201 	orr.w	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80073c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d011      	beq.n	80073f0 <HAL_UART_IRQHandler+0xf8>
 80073cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00b      	beq.n	80073f0 <HAL_UART_IRQHandler+0xf8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2202      	movs	r2, #2
 80073de:	621a      	str	r2, [r3, #32]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e6:	f043 0204 	orr.w	r2, r3, #4
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80073f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d011      	beq.n	8007420 <HAL_UART_IRQHandler+0x128>
 80073fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <HAL_UART_IRQHandler+0x128>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2204      	movs	r2, #4
 800740e:	621a      	str	r2, [r3, #32]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007416:	f043 0202 	orr.w	r2, r3, #2
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d017      	beq.n	800745c <HAL_UART_IRQHandler+0x164>
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d105      	bne.n	8007444 <HAL_UART_IRQHandler+0x14c>
 8007438:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800743c:	4b5c      	ldr	r3, [pc, #368]	@ (80075b0 <HAL_UART_IRQHandler+0x2b8>)
 800743e:	4013      	ands	r3, r2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <HAL_UART_IRQHandler+0x164>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2208      	movs	r2, #8
 800744a:	621a      	str	r2, [r3, #32]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007452:	f043 0208 	orr.w	r2, r3, #8
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800745c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007464:	2b00      	cmp	r3, #0
 8007466:	d012      	beq.n	800748e <HAL_UART_IRQHandler+0x196>
 8007468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800746c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00c      	beq.n	800748e <HAL_UART_IRQHandler+0x196>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800747c:	621a      	str	r2, [r3, #32]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8266 	beq.w	8007966 <HAL_UART_IRQHandler+0x66e>
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d013      	beq.n	80074ce <HAL_UART_IRQHandler+0x1d6>
 80074a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d105      	bne.n	80074be <HAL_UART_IRQHandler+0x1c6>
 80074b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d007      	beq.n	80074ce <HAL_UART_IRQHandler+0x1d6>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_UART_IRQHandler+0x1d6>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e2:	2b40      	cmp	r3, #64	@ 0x40
 80074e4:	d005      	beq.n	80074f2 <HAL_UART_IRQHandler+0x1fa>
 80074e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d054      	beq.n	800759c <HAL_UART_IRQHandler+0x2a4>
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fee7 	bl	80082c6 <UART_EndRxTransfer>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007502:	2b40      	cmp	r3, #64	@ 0x40
 8007504:	d146      	bne.n	8007594 <HAL_UART_IRQHandler+0x29c>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007510:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800751c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3308      	adds	r3, #8
 800752e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007532:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007536:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800753a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800753e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800754a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1d9      	bne.n	8007506 <HAL_UART_IRQHandler+0x20e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007558:	2b00      	cmp	r3, #0
 800755a:	d017      	beq.n	800758c <HAL_UART_IRQHandler+0x294>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007562:	4a15      	ldr	r2, [pc, #84]	@ (80075b8 <HAL_UART_IRQHandler+0x2c0>)
 8007564:	639a      	str	r2, [r3, #56]	@ 0x38
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800756c:	4618      	mov	r0, r3
 800756e:	f7fc fc02 	bl	8003d76 <HAL_DMA_Abort_IT>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d019      	beq.n	80075ac <HAL_UART_IRQHandler+0x2b4>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800757e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007586:	4610      	mov	r0, r2
 8007588:	4798      	blx	r3
 800758a:	e00f      	b.n	80075ac <HAL_UART_IRQHandler+0x2b4>
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9ff 	bl	8007990 <HAL_UART_ErrorCallback>
 8007592:	e00b      	b.n	80075ac <HAL_UART_IRQHandler+0x2b4>
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f9fb 	bl	8007990 <HAL_UART_ErrorCallback>
 800759a:	e007      	b.n	80075ac <HAL_UART_IRQHandler+0x2b4>
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9f7 	bl	8007990 <HAL_UART_ErrorCallback>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80075aa:	e1dc      	b.n	8007966 <HAL_UART_IRQHandler+0x66e>
 80075ac:	bf00      	nop
 80075ae:	e1da      	b.n	8007966 <HAL_UART_IRQHandler+0x66e>
 80075b0:	10000001 	.word	0x10000001
 80075b4:	04000120 	.word	0x04000120
 80075b8:	08008393 	.word	0x08008393
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	f040 8170 	bne.w	80078a6 <HAL_UART_IRQHandler+0x5ae>
 80075c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 8169 	beq.w	80078a6 <HAL_UART_IRQHandler+0x5ae>
 80075d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8162 	beq.w	80078a6 <HAL_UART_IRQHandler+0x5ae>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2210      	movs	r2, #16
 80075e8:	621a      	str	r2, [r3, #32]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f4:	2b40      	cmp	r3, #64	@ 0x40
 80075f6:	f040 80d8 	bne.w	80077aa <HAL_UART_IRQHandler+0x4b2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8007608:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80af 	beq.w	8007770 <HAL_UART_IRQHandler+0x478>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007618:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800761c:	429a      	cmp	r2, r3
 800761e:	f080 80a7 	bcs.w	8007770 <HAL_UART_IRQHandler+0x478>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007628:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	f040 8087 	bne.w	800774e <HAL_UART_IRQHandler+0x456>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007654:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800765c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800766a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800766e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8007672:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007676:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1da      	bne.n	8007640 <HAL_UART_IRQHandler+0x348>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	677b      	str	r3, [r7, #116]	@ 0x74
 8007692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	673b      	str	r3, [r7, #112]	@ 0x70
 800769a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e1      	bne.n	800768a <HAL_UART_IRQHandler+0x392>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80076ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3308      	adds	r3, #8
 80076e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80076f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e3      	bne.n	80076c6 <HAL_UART_IRQHandler+0x3ce>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800771a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800771c:	f023 0310 	bic.w	r3, r3, #16
 8007720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800772e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007730:	657a      	str	r2, [r7, #84]	@ 0x54
 8007732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	653b      	str	r3, [r7, #80]	@ 0x50
 800773c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e4      	bne.n	800770c <HAL_UART_IRQHandler+0x414>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007748:	4618      	mov	r0, r3
 800774a:	f7fc fabb 	bl	8003cc4 <HAL_DMA_Abort>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	671a      	str	r2, [r3, #112]	@ 0x70
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007760:	b29b      	uxth	r3, r3
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	b29b      	uxth	r3, r3
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f91b 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
 800776e:	e0fc      	b.n	800796a <HAL_UART_IRQHandler+0x672>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800777a:	429a      	cmp	r2, r3
 800777c:	f040 80f5 	bne.w	800796a <HAL_UART_IRQHandler+0x672>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b20      	cmp	r3, #32
 8007790:	f040 80eb 	bne.w	800796a <HAL_UART_IRQHandler+0x672>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	671a      	str	r2, [r3, #112]	@ 0x70
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f8fe 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
 80077a8:	e0df      	b.n	800796a <HAL_UART_IRQHandler+0x672>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 80d1 	beq.w	800796e <HAL_UART_IRQHandler+0x676>
 80077cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80cc 	beq.w	800796e <HAL_UART_IRQHandler+0x676>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80077fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e4      	bne.n	80077d6 <HAL_UART_IRQHandler+0x4de>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	623b      	str	r3, [r7, #32]
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007822:	f023 0301 	bic.w	r3, r3, #1
 8007826:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007834:	633a      	str	r2, [r7, #48]	@ 0x30
 8007836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007838:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800783a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e1      	bne.n	800780c <HAL_UART_IRQHandler+0x514>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	675a      	str	r2, [r3, #116]	@ 0x74
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f023 0310 	bic.w	r3, r3, #16
 8007870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800787e:	61fb      	str	r3, [r7, #28]
 8007880:	61ba      	str	r2, [r7, #24]
 8007882:	69b9      	ldr	r1, [r7, #24]
 8007884:	69fa      	ldr	r2, [r7, #28]
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e4      	bne.n	800785c <HAL_UART_IRQHandler+0x564>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	671a      	str	r2, [r3, #112]	@ 0x70
 8007898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f880 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
 80078a4:	e063      	b.n	800796e <HAL_UART_IRQHandler+0x676>
 80078a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00e      	beq.n	80078d0 <HAL_UART_IRQHandler+0x5d8>
 80078b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d008      	beq.n	80078d0 <HAL_UART_IRQHandler+0x5d8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80078c6:	621a      	str	r2, [r3, #32]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd9f 	bl	800840c <HAL_UARTEx_WakeupCallback>
 80078ce:	e051      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
 80078d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d014      	beq.n	8007906 <HAL_UART_IRQHandler+0x60e>
 80078dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <HAL_UART_IRQHandler+0x5fc>
 80078e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <HAL_UART_IRQHandler+0x60e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d03a      	beq.n	8007972 <HAL_UART_IRQHandler+0x67a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
 8007904:	e035      	b.n	8007972 <HAL_UART_IRQHandler+0x67a>
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <HAL_UART_IRQHandler+0x62e>
 8007912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <HAL_UART_IRQHandler+0x62e>
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fd49 	bl	80083b6 <UART_EndTransmit_IT>
 8007924:	e026      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800792a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <HAL_UART_IRQHandler+0x64e>
 8007932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007936:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_UART_IRQHandler+0x64e>
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fd78 	bl	8008434 <HAL_UARTEx_TxFifoEmptyCallback>
 8007944:	e016      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <HAL_UART_IRQHandler+0x67c>
 8007952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007956:	2b00      	cmp	r3, #0
 8007958:	da0c      	bge.n	8007974 <HAL_UART_IRQHandler+0x67c>
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fd60 	bl	8008420 <HAL_UARTEx_RxFifoFullCallback>
 8007960:	e008      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
 8007962:	bf00      	nop
 8007964:	e006      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
 8007966:	bf00      	nop
 8007968:	e004      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_UART_IRQHandler+0x67c>
 8007972:	bf00      	nop
 8007974:	37e8      	adds	r7, #232	@ 0xe8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop

0800797c <HAL_UART_TxCpltCallback>:
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_UART_ErrorCallback>:
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_UARTEx_RxEventCallback>:
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	807b      	strh	r3, [r7, #2]
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <UART_SetConfig>:
 80079bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079c0:	b08c      	sub	sp, #48	@ 0x30
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6178      	str	r0, [r7, #20]
 80079c6:	2300      	movs	r3, #0
 80079c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	431a      	orrs	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4bab      	ldr	r3, [pc, #684]	@ (8007c98 <UART_SetConfig+0x2dc>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4aa0      	ldr	r2, [pc, #640]	@ (8007c9c <UART_SetConfig+0x2e0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <UART_SetConfig+0x6c>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a24:	4313      	orrs	r3, r2
 8007a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007a32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	6093      	str	r3, [r2, #8]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a46:	f023 010f 	bic.w	r1, r3, #15
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a91      	ldr	r2, [pc, #580]	@ (8007ca0 <UART_SetConfig+0x2e4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d125      	bne.n	8007aac <UART_SetConfig+0xf0>
 8007a60:	4b90      	ldr	r3, [pc, #576]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d81a      	bhi.n	8007aa4 <UART_SetConfig+0xe8>
 8007a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a74 <UART_SetConfig+0xb8>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a85 	.word	0x08007a85
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007a8d 	.word	0x08007a8d
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a8a:	e0d6      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a92:	e0d2      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007a94:	2304      	movs	r3, #4
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a9a:	e0ce      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007a9c:	2308      	movs	r3, #8
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aa2:	e0ca      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aaa:	e0c6      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a7d      	ldr	r2, [pc, #500]	@ (8007ca8 <UART_SetConfig+0x2ec>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d138      	bne.n	8007b28 <UART_SetConfig+0x16c>
 8007ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007abc:	f003 030c 	and.w	r3, r3, #12
 8007ac0:	2b0c      	cmp	r3, #12
 8007ac2:	d82d      	bhi.n	8007b20 <UART_SetConfig+0x164>
 8007ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8007acc <UART_SetConfig+0x110>)
 8007ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aca:	bf00      	nop
 8007acc:	08007b01 	.word	0x08007b01
 8007ad0:	08007b21 	.word	0x08007b21
 8007ad4:	08007b21 	.word	0x08007b21
 8007ad8:	08007b21 	.word	0x08007b21
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b21 	.word	0x08007b21
 8007ae4:	08007b21 	.word	0x08007b21
 8007ae8:	08007b21 	.word	0x08007b21
 8007aec:	08007b09 	.word	0x08007b09
 8007af0:	08007b21 	.word	0x08007b21
 8007af4:	08007b21 	.word	0x08007b21
 8007af8:	08007b21 	.word	0x08007b21
 8007afc:	08007b19 	.word	0x08007b19
 8007b00:	2300      	movs	r3, #0
 8007b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b06:	e098      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b0e:	e094      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b10:	2304      	movs	r3, #4
 8007b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b16:	e090      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b18:	2308      	movs	r3, #8
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b1e:	e08c      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b20:	2310      	movs	r3, #16
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b26:	e088      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a5f      	ldr	r2, [pc, #380]	@ (8007cac <UART_SetConfig+0x2f0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d125      	bne.n	8007b7e <UART_SetConfig+0x1c2>
 8007b32:	4b5c      	ldr	r3, [pc, #368]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b3c:	2b30      	cmp	r3, #48	@ 0x30
 8007b3e:	d016      	beq.n	8007b6e <UART_SetConfig+0x1b2>
 8007b40:	2b30      	cmp	r3, #48	@ 0x30
 8007b42:	d818      	bhi.n	8007b76 <UART_SetConfig+0x1ba>
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d00a      	beq.n	8007b5e <UART_SetConfig+0x1a2>
 8007b48:	2b20      	cmp	r3, #32
 8007b4a:	d814      	bhi.n	8007b76 <UART_SetConfig+0x1ba>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <UART_SetConfig+0x19a>
 8007b50:	2b10      	cmp	r3, #16
 8007b52:	d008      	beq.n	8007b66 <UART_SetConfig+0x1aa>
 8007b54:	e00f      	b.n	8007b76 <UART_SetConfig+0x1ba>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5c:	e06d      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b64:	e069      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b66:	2304      	movs	r3, #4
 8007b68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b6c:	e065      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b6e:	2308      	movs	r3, #8
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b74:	e061      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b76:	2310      	movs	r3, #16
 8007b78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b7c:	e05d      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a4b      	ldr	r2, [pc, #300]	@ (8007cb0 <UART_SetConfig+0x2f4>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d125      	bne.n	8007bd4 <UART_SetConfig+0x218>
 8007b88:	4b46      	ldr	r3, [pc, #280]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b92:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b94:	d016      	beq.n	8007bc4 <UART_SetConfig+0x208>
 8007b96:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b98:	d818      	bhi.n	8007bcc <UART_SetConfig+0x210>
 8007b9a:	2b80      	cmp	r3, #128	@ 0x80
 8007b9c:	d00a      	beq.n	8007bb4 <UART_SetConfig+0x1f8>
 8007b9e:	2b80      	cmp	r3, #128	@ 0x80
 8007ba0:	d814      	bhi.n	8007bcc <UART_SetConfig+0x210>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <UART_SetConfig+0x1f0>
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d008      	beq.n	8007bbc <UART_SetConfig+0x200>
 8007baa:	e00f      	b.n	8007bcc <UART_SetConfig+0x210>
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb2:	e042      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bba:	e03e      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc2:	e03a      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bca:	e036      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd2:	e032      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a30      	ldr	r2, [pc, #192]	@ (8007c9c <UART_SetConfig+0x2e0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d12a      	bne.n	8007c34 <UART_SetConfig+0x278>
 8007bde:	4b31      	ldr	r3, [pc, #196]	@ (8007ca4 <UART_SetConfig+0x2e8>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007be8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bec:	d01a      	beq.n	8007c24 <UART_SetConfig+0x268>
 8007bee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bf2:	d81b      	bhi.n	8007c2c <UART_SetConfig+0x270>
 8007bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bf8:	d00c      	beq.n	8007c14 <UART_SetConfig+0x258>
 8007bfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bfe:	d815      	bhi.n	8007c2c <UART_SetConfig+0x270>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <UART_SetConfig+0x250>
 8007c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c08:	d008      	beq.n	8007c1c <UART_SetConfig+0x260>
 8007c0a:	e00f      	b.n	8007c2c <UART_SetConfig+0x270>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c12:	e012      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c14:	2302      	movs	r3, #2
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1a:	e00e      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c22:	e00a      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c24:	2308      	movs	r3, #8
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c2a:	e006      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c32:	e002      	b.n	8007c3a <UART_SetConfig+0x27e>
 8007c34:	2310      	movs	r3, #16
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a17      	ldr	r2, [pc, #92]	@ (8007c9c <UART_SetConfig+0x2e0>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	f040 80a8 	bne.w	8007d96 <UART_SetConfig+0x3da>
 8007c46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	d834      	bhi.n	8007cb8 <UART_SetConfig+0x2fc>
 8007c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <UART_SetConfig+0x298>)
 8007c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c54:	08007c79 	.word	0x08007c79
 8007c58:	08007cb9 	.word	0x08007cb9
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007cb9 	.word	0x08007cb9
 8007c64:	08007c87 	.word	0x08007c87
 8007c68:	08007cb9 	.word	0x08007cb9
 8007c6c:	08007cb9 	.word	0x08007cb9
 8007c70:	08007cb9 	.word	0x08007cb9
 8007c74:	08007c8f 	.word	0x08007c8f
 8007c78:	f7fd fb66 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8007c7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c7e:	e021      	b.n	8007cc4 <UART_SetConfig+0x308>
 8007c80:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb4 <UART_SetConfig+0x2f8>)
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c84:	e01e      	b.n	8007cc4 <UART_SetConfig+0x308>
 8007c86:	f7fd faf3 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007c8a:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c8c:	e01a      	b.n	8007cc4 <UART_SetConfig+0x308>
 8007c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c94:	e016      	b.n	8007cc4 <UART_SetConfig+0x308>
 8007c96:	bf00      	nop
 8007c98:	cfff69f3 	.word	0xcfff69f3
 8007c9c:	40008000 	.word	0x40008000
 8007ca0:	40013800 	.word	0x40013800
 8007ca4:	40021000 	.word	0x40021000
 8007ca8:	40004400 	.word	0x40004400
 8007cac:	40004800 	.word	0x40004800
 8007cb0:	40004c00 	.word	0x40004c00
 8007cb4:	00f42400 	.word	0x00f42400
 8007cb8:	2300      	movs	r3, #0
 8007cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007cc2:	bf00      	nop
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 812a 	beq.w	8007f20 <UART_SetConfig+0x564>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	4a9e      	ldr	r2, [pc, #632]	@ (8007f4c <UART_SetConfig+0x590>)
 8007cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	4413      	add	r3, r2
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d305      	bcc.n	8007cfc <UART_SetConfig+0x340>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	031b      	lsls	r3, r3, #12
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d903      	bls.n	8007d04 <UART_SetConfig+0x348>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d02:	e10d      	b.n	8007f20 <UART_SetConfig+0x564>
 8007d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d06:	2200      	movs	r2, #0
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	60fa      	str	r2, [r7, #12]
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	4a8e      	ldr	r2, [pc, #568]	@ (8007f4c <UART_SetConfig+0x590>)
 8007d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2200      	movs	r2, #0
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	607a      	str	r2, [r7, #4]
 8007d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d26:	f7f8 fe65 	bl	80009f4 <__aeabi_uldivmod>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4619      	mov	r1, r3
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	f04f 0300 	mov.w	r3, #0
 8007d3a:	020b      	lsls	r3, r1, #8
 8007d3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d40:	0202      	lsls	r2, r0, #8
 8007d42:	6979      	ldr	r1, [r7, #20]
 8007d44:	6849      	ldr	r1, [r1, #4]
 8007d46:	0849      	lsrs	r1, r1, #1
 8007d48:	2000      	movs	r0, #0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	eb12 0804 	adds.w	r8, r2, r4
 8007d52:	eb43 0905 	adc.w	r9, r3, r5
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	469a      	mov	sl, r3
 8007d5e:	4693      	mov	fp, r2
 8007d60:	4652      	mov	r2, sl
 8007d62:	465b      	mov	r3, fp
 8007d64:	4640      	mov	r0, r8
 8007d66:	4649      	mov	r1, r9
 8007d68:	f7f8 fe44 	bl	80009f4 <__aeabi_uldivmod>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4613      	mov	r3, r2
 8007d72:	623b      	str	r3, [r7, #32]
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d7a:	d308      	bcc.n	8007d8e <UART_SetConfig+0x3d2>
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d82:	d204      	bcs.n	8007d8e <UART_SetConfig+0x3d2>
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6a3a      	ldr	r2, [r7, #32]
 8007d8a:	60da      	str	r2, [r3, #12]
 8007d8c:	e0c8      	b.n	8007f20 <UART_SetConfig+0x564>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d94:	e0c4      	b.n	8007f20 <UART_SetConfig+0x564>
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d9e:	d167      	bne.n	8007e70 <UART_SetConfig+0x4b4>
 8007da0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d828      	bhi.n	8007dfa <UART_SetConfig+0x43e>
 8007da8:	a201      	add	r2, pc, #4	@ (adr r2, 8007db0 <UART_SetConfig+0x3f4>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007dd5 	.word	0x08007dd5
 8007db4:	08007ddd 	.word	0x08007ddd
 8007db8:	08007de5 	.word	0x08007de5
 8007dbc:	08007dfb 	.word	0x08007dfb
 8007dc0:	08007deb 	.word	0x08007deb
 8007dc4:	08007dfb 	.word	0x08007dfb
 8007dc8:	08007dfb 	.word	0x08007dfb
 8007dcc:	08007dfb 	.word	0x08007dfb
 8007dd0:	08007df3 	.word	0x08007df3
 8007dd4:	f7fd fab8 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8007dd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dda:	e014      	b.n	8007e06 <UART_SetConfig+0x44a>
 8007ddc:	f7fd faca 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8007de0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007de2:	e010      	b.n	8007e06 <UART_SetConfig+0x44a>
 8007de4:	4b5a      	ldr	r3, [pc, #360]	@ (8007f50 <UART_SetConfig+0x594>)
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de8:	e00d      	b.n	8007e06 <UART_SetConfig+0x44a>
 8007dea:	f7fd fa41 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007dee:	6278      	str	r0, [r7, #36]	@ 0x24
 8007df0:	e009      	b.n	8007e06 <UART_SetConfig+0x44a>
 8007df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007df8:	e005      	b.n	8007e06 <UART_SetConfig+0x44a>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e04:	bf00      	nop
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 8089 	beq.w	8007f20 <UART_SetConfig+0x564>
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e12:	4a4e      	ldr	r2, [pc, #312]	@ (8007f4c <UART_SetConfig+0x590>)
 8007e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e20:	005a      	lsls	r2, r3, #1
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	441a      	add	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e32:	623b      	str	r3, [r7, #32]
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	2b0f      	cmp	r3, #15
 8007e38:	d916      	bls.n	8007e68 <UART_SetConfig+0x4ac>
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e40:	d212      	bcs.n	8007e68 <UART_SetConfig+0x4ac>
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f023 030f 	bic.w	r3, r3, #15
 8007e4a:	83fb      	strh	r3, [r7, #30]
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	8bfb      	ldrh	r3, [r7, #30]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	83fb      	strh	r3, [r7, #30]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	8bfa      	ldrh	r2, [r7, #30]
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	e05b      	b.n	8007f20 <UART_SetConfig+0x564>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e6e:	e057      	b.n	8007f20 <UART_SetConfig+0x564>
 8007e70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d828      	bhi.n	8007eca <UART_SetConfig+0x50e>
 8007e78:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <UART_SetConfig+0x4c4>)
 8007e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7e:	bf00      	nop
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ead 	.word	0x08007ead
 8007e88:	08007eb5 	.word	0x08007eb5
 8007e8c:	08007ecb 	.word	0x08007ecb
 8007e90:	08007ebb 	.word	0x08007ebb
 8007e94:	08007ecb 	.word	0x08007ecb
 8007e98:	08007ecb 	.word	0x08007ecb
 8007e9c:	08007ecb 	.word	0x08007ecb
 8007ea0:	08007ec3 	.word	0x08007ec3
 8007ea4:	f7fd fa50 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8007ea8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007eaa:	e014      	b.n	8007ed6 <UART_SetConfig+0x51a>
 8007eac:	f7fd fa62 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8007eb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007eb2:	e010      	b.n	8007ed6 <UART_SetConfig+0x51a>
 8007eb4:	4b26      	ldr	r3, [pc, #152]	@ (8007f50 <UART_SetConfig+0x594>)
 8007eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eb8:	e00d      	b.n	8007ed6 <UART_SetConfig+0x51a>
 8007eba:	f7fd f9d9 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007ebe:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ec0:	e009      	b.n	8007ed6 <UART_SetConfig+0x51a>
 8007ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ec8:	e005      	b.n	8007ed6 <UART_SetConfig+0x51a>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ed4:	bf00      	nop
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d021      	beq.n	8007f20 <UART_SetConfig+0x564>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8007f4c <UART_SetConfig+0x590>)
 8007ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	441a      	add	r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	623b      	str	r3, [r7, #32]
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	2b0f      	cmp	r3, #15
 8007f04:	d909      	bls.n	8007f1a <UART_SetConfig+0x55e>
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f0c:	d205      	bcs.n	8007f1a <UART_SetConfig+0x55e>
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60da      	str	r2, [r3, #12]
 8007f18:	e002      	b.n	8007f20 <UART_SetConfig+0x564>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2200      	movs	r2, #0
 8007f34:	675a      	str	r2, [r3, #116]	@ 0x74
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	679a      	str	r2, [r3, #120]	@ 0x78
 8007f3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007f40:	4618      	mov	r0, r3
 8007f42:	3730      	adds	r7, #48	@ 0x30
 8007f44:	46bd      	mov	sp, r7
 8007f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f4a:	bf00      	nop
 8007f4c:	0800aecc 	.word	0x0800aecc
 8007f50:	00f42400 	.word	0x00f42400

08007f54 <UART_AdvFeatureConfig>:
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f60:	f003 0308 	and.w	r3, r3, #8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <UART_AdvFeatureConfig+0x2a>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <UART_AdvFeatureConfig+0x4c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	605a      	str	r2, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0x6e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0x90>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <UART_AdvFeatureConfig+0xb2>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	609a      	str	r2, [r3, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <UART_AdvFeatureConfig+0xd4>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	609a      	str	r2, [r3, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01a      	beq.n	800806a <UART_AdvFeatureConfig+0x116>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	605a      	str	r2, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800804e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008052:	d10a      	bne.n	800806a <UART_AdvFeatureConfig+0x116>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <UART_AdvFeatureConfig+0x138>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <UART_CheckIdleState>:
 8008098:	b580      	push	{r7, lr}
 800809a:	b098      	sub	sp, #96	@ 0x60
 800809c:	af02      	add	r7, sp, #8
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80080a8:	f7fa fc12 	bl	80028d0 <HAL_GetTick>
 80080ac:	6578      	str	r0, [r7, #84]	@ 0x54
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d12f      	bne.n	800811c <UART_CheckIdleState+0x84>
 80080bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c4:	2200      	movs	r2, #0
 80080c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f88e 	bl	80081ec <UART_WaitOnFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d022      	beq.n	800811c <UART_CheckIdleState+0x84>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80080f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80080f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e6      	bne.n	80080d6 <UART_CheckIdleState+0x3e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2220      	movs	r2, #32
 800810c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008118:	2303      	movs	r3, #3
 800811a:	e063      	b.n	80081e4 <UART_CheckIdleState+0x14c>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b04      	cmp	r3, #4
 8008128:	d149      	bne.n	80081be <UART_CheckIdleState+0x126>
 800812a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008132:	2200      	movs	r2, #0
 8008134:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f857 	bl	80081ec <UART_WaitOnFlagUntilTimeout>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d03c      	beq.n	80081be <UART_CheckIdleState+0x126>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	627b      	str	r3, [r7, #36]	@ 0x24
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	623b      	str	r3, [r7, #32]
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008162:	633b      	str	r3, [r7, #48]	@ 0x30
 8008164:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e6      	bne.n	8008144 <UART_CheckIdleState+0xac>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3308      	adds	r3, #8
 800817c:	613b      	str	r3, [r7, #16]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f023 0301 	bic.w	r3, r3, #1
 800818c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008196:	61fa      	str	r2, [r7, #28]
 8008198:	61bb      	str	r3, [r7, #24]
 800819a:	69b9      	ldr	r1, [r7, #24]
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e5      	bne.n	8008176 <UART_CheckIdleState+0xde>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80081ba:	2303      	movs	r3, #3
 80081bc:	e012      	b.n	80081e4 <UART_CheckIdleState+0x14c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80081e2:	2300      	movs	r3, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	3758      	adds	r7, #88	@ 0x58
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <UART_WaitOnFlagUntilTimeout>:
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	71fb      	strb	r3, [r7, #7]
 80081fc:	e04f      	b.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d04b      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008206:	f7fa fb63 	bl	80028d0 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	429a      	cmp	r2, r3
 8008214:	d302      	bcc.n	800821c <UART_WaitOnFlagUntilTimeout+0x30>
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <UART_WaitOnFlagUntilTimeout+0x34>
 800821c:	2303      	movs	r3, #3
 800821e:	e04e      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0xd2>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d037      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b80      	cmp	r3, #128	@ 0x80
 8008232:	d034      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b40      	cmp	r3, #64	@ 0x40
 8008238:	d031      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b08      	cmp	r3, #8
 8008246:	d110      	bne.n	800826a <UART_WaitOnFlagUntilTimeout+0x7e>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2208      	movs	r2, #8
 800824e:	621a      	str	r2, [r3, #32]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f838 	bl	80082c6 <UART_EndRxTransfer>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2208      	movs	r2, #8
 800825a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008266:	2301      	movs	r3, #1
 8008268:	e029      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0xd2>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008278:	d111      	bne.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008282:	621a      	str	r2, [r3, #32]
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 f81e 	bl	80082c6 <UART_EndRxTransfer>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800829a:	2303      	movs	r3, #3
 800829c:	e00f      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0xd2>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4013      	ands	r3, r2
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	bf0c      	ite	eq
 80082ae:	2301      	moveq	r3, #1
 80082b0:	2300      	movne	r3, #0
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d0a0      	beq.n	80081fe <UART_WaitOnFlagUntilTimeout+0x12>
 80082bc:	2300      	movs	r3, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <UART_EndRxTransfer>:
 80082c6:	b480      	push	{r7}
 80082c8:	b095      	sub	sp, #84	@ 0x54
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	633b      	str	r3, [r7, #48]	@ 0x30
 80082dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80082ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80082f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082f4:	e841 2300 	strex	r3, r2, [r1]
 80082f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1e6      	bne.n	80082ce <UART_EndRxTransfer+0x8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3308      	adds	r3, #8
 8008306:	623b      	str	r3, [r7, #32]
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3308      	adds	r3, #8
 8008322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008324:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800832a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	627b      	str	r3, [r7, #36]	@ 0x24
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e3      	bne.n	8008300 <UART_EndRxTransfer+0x3a>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800833c:	2b01      	cmp	r3, #1
 800833e:	d118      	bne.n	8008372 <UART_EndRxTransfer+0xac>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	60bb      	str	r3, [r7, #8]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f023 0310 	bic.w	r3, r3, #16
 8008354:	647b      	str	r3, [r7, #68]	@ 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	617a      	str	r2, [r7, #20]
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e6      	bne.n	8008340 <UART_EndRxTransfer+0x7a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	675a      	str	r2, [r3, #116]	@ 0x74
 8008386:	bf00      	nop
 8008388:	3754      	adds	r7, #84	@ 0x54
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <UART_DMAAbortOnError>:
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff faf1 	bl	8007990 <HAL_UART_ErrorCallback>
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <UART_EndTransmit_IT>:
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b088      	sub	sp, #32
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	60bb      	str	r3, [r7, #8]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	61bb      	str	r3, [r7, #24]
 80083de:	617a      	str	r2, [r7, #20]
 80083e0:	6979      	ldr	r1, [r7, #20]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	613b      	str	r3, [r7, #16]
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e6      	bne.n	80083be <UART_EndTransmit_IT+0x8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	679a      	str	r2, [r3, #120]	@ 0x78
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff fabc 	bl	800797c <HAL_UART_TxCpltCallback>
 8008404:	bf00      	nop
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_UARTEx_WakeupCallback>:
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_UARTEx_RxFifoFullCallback>:
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UARTEx_TxFifoEmptyCallback>:
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UARTEx_DisableFifoMode>:
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <HAL_UARTEx_DisableFifoMode+0x16>
 800845a:	2302      	movs	r3, #2
 800845c:	e027      	b.n	80084ae <HAL_UARTEx_DisableFifoMode+0x66>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2224      	movs	r2, #36	@ 0x24
 800846a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0201 	bic.w	r2, r2, #1
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	665a      	str	r2, [r3, #100]	@ 0x64
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80084ac:	2300      	movs	r3, #0
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_UARTEx_SetTxFifoThreshold>:
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084ce:	2302      	movs	r3, #2
 80084d0:	e02d      	b.n	800852e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2224      	movs	r2, #36	@ 0x24
 80084de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0201 	bic.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	609a      	str	r2, [r3, #8]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f850 	bl	80085b4 <UARTEx_SetNbDataToProcess>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2220      	movs	r2, #32
 8008520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800852c:	2300      	movs	r3, #0
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_UARTEx_SetRxFifoThreshold>:
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800854a:	2302      	movs	r3, #2
 800854c:	e02d      	b.n	80085aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2224      	movs	r2, #36	@ 0x24
 800855a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0201 	bic.w	r2, r2, #1
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	609a      	str	r2, [r3, #8]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f812 	bl	80085b4 <UARTEx_SetNbDataToProcess>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80085a8:	2300      	movs	r3, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <UARTEx_SetNbDataToProcess>:
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d108      	bne.n	80085d6 <UARTEx_SetNbDataToProcess+0x22>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80085d4:	e031      	b.n	800863a <UARTEx_SetNbDataToProcess+0x86>
 80085d6:	2308      	movs	r3, #8
 80085d8:	73fb      	strb	r3, [r7, #15]
 80085da:	2308      	movs	r3, #8
 80085dc:	73bb      	strb	r3, [r7, #14]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	0e5b      	lsrs	r3, r3, #25
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	737b      	strb	r3, [r7, #13]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	0f5b      	lsrs	r3, r3, #29
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	733b      	strb	r3, [r7, #12]
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	7b3a      	ldrb	r2, [r7, #12]
 8008602:	4911      	ldr	r1, [pc, #68]	@ (8008648 <UARTEx_SetNbDataToProcess+0x94>)
 8008604:	5c8a      	ldrb	r2, [r1, r2]
 8008606:	fb02 f303 	mul.w	r3, r2, r3
 800860a:	7b3a      	ldrb	r2, [r7, #12]
 800860c:	490f      	ldr	r1, [pc, #60]	@ (800864c <UARTEx_SetNbDataToProcess+0x98>)
 800860e:	5c8a      	ldrb	r2, [r1, r2]
 8008610:	fb93 f3f2 	sdiv	r3, r3, r2
 8008614:	b29a      	uxth	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	7b7a      	ldrb	r2, [r7, #13]
 8008620:	4909      	ldr	r1, [pc, #36]	@ (8008648 <UARTEx_SetNbDataToProcess+0x94>)
 8008622:	5c8a      	ldrb	r2, [r1, r2]
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	7b7a      	ldrb	r2, [r7, #13]
 800862a:	4908      	ldr	r1, [pc, #32]	@ (800864c <UARTEx_SetNbDataToProcess+0x98>)
 800862c:	5c8a      	ldrb	r2, [r1, r2]
 800862e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008632:	b29a      	uxth	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800863a:	bf00      	nop
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	0800aee4 	.word	0x0800aee4
 800864c:	0800aeec 	.word	0x0800aeec

08008650 <USB_DisableGlobalInt>:
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008664:	b29a      	uxth	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	b29b      	uxth	r3, r3
 800866a:	43db      	mvns	r3, r3
 800866c:	b29b      	uxth	r3, r3
 800866e:	4013      	ands	r3, r2
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8008678:	2300      	movs	r3, #0
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <USB_DevInit>:
 8008686:	b480      	push	{r7}
 8008688:	b085      	sub	sp, #20
 800868a:	af00      	add	r7, sp, #0
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	e883 0006 	stmia.w	r3, {r1, r2}
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 80086b4:	2300      	movs	r3, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
	...

080086c4 <MX_FATFS_Init>:
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	4907      	ldr	r1, [pc, #28]	@ (80086e8 <MX_FATFS_Init+0x24>)
 80086ca:	4808      	ldr	r0, [pc, #32]	@ (80086ec <MX_FATFS_Init+0x28>)
 80086cc:	f002 fb64 	bl	800ad98 <FATFS_LinkDriver>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <MX_FATFS_Init+0x18>
 80086d6:	f04f 33ff 	mov.w	r3, #4294967295
 80086da:	e003      	b.n	80086e4 <MX_FATFS_Init+0x20>
 80086dc:	4b04      	ldr	r3, [pc, #16]	@ (80086f0 <MX_FATFS_Init+0x2c>)
 80086de:	2201      	movs	r2, #1
 80086e0:	701a      	strb	r2, [r3, #0]
 80086e2:	2300      	movs	r3, #0
 80086e4:	4618      	mov	r0, r3
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20000bfc 	.word	0x20000bfc
 80086ec:	20000010 	.word	0x20000010
 80086f0:	20000c00 	.word	0x20000c00

080086f4 <get_fattime>:
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	2300      	movs	r3, #0
 80086fa:	4618      	mov	r0, r3
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USER_initialize>:
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	71fb      	strb	r3, [r7, #7]
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	4618      	mov	r0, r3
 8008712:	f7f8 fe1f 	bl	8001354 <SD_disk_initialize>
 8008716:	4603      	mov	r3, r0
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USER_status>:
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	71fb      	strb	r3, [r7, #7]
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	4618      	mov	r0, r3
 800872e:	f7f8 fefb 	bl	8001528 <SD_disk_status>
 8008732:	4603      	mov	r3, r0
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USER_read>:
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	607a      	str	r2, [r7, #4]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]
 800874c:	7bf8      	ldrb	r0, [r7, #15]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	f7f8 fefe 	bl	8001554 <SD_disk_read>
 8008758:	4603      	mov	r3, r0
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USER_write>:
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	4603      	mov	r3, r0
 8008770:	73fb      	strb	r3, [r7, #15]
 8008772:	7bf8      	ldrb	r0, [r7, #15]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	f7f8 ff55 	bl	8001628 <SD_disk_write>
 800877e:	4603      	mov	r3, r0
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USER_ioctl>:
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	603a      	str	r2, [r7, #0]
 8008792:	71fb      	strb	r3, [r7, #7]
 8008794:	460b      	mov	r3, r1
 8008796:	71bb      	strb	r3, [r7, #6]
 8008798:	79b9      	ldrb	r1, [r7, #6]
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f7f8 ffc6 	bl	8001730 <SD_disk_ioctl>
 80087a4:	4603      	mov	r3, r0
 80087a6:	4618      	mov	r0, r3
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <disk_status>:
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	4a08      	ldr	r2, [pc, #32]	@ (80087e0 <disk_status+0x30>)
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	79fa      	ldrb	r2, [r7, #7]
 80087c8:	4905      	ldr	r1, [pc, #20]	@ (80087e0 <disk_status+0x30>)
 80087ca:	440a      	add	r2, r1
 80087cc:	7a12      	ldrb	r2, [r2, #8]
 80087ce:	4610      	mov	r0, r2
 80087d0:	4798      	blx	r3
 80087d2:	4603      	mov	r3, r0
 80087d4:	73fb      	strb	r3, [r7, #15]
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	4618      	mov	r0, r3
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20000c2c 	.word	0x20000c2c

080087e4 <disk_initialize>:
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	71fb      	strb	r3, [r7, #7]
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	4a0d      	ldr	r2, [pc, #52]	@ (800882c <disk_initialize+0x48>)
 80087f6:	5cd3      	ldrb	r3, [r2, r3]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d111      	bne.n	8008820 <disk_initialize+0x3c>
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	4a0b      	ldr	r2, [pc, #44]	@ (800882c <disk_initialize+0x48>)
 8008800:	2101      	movs	r1, #1
 8008802:	54d1      	strb	r1, [r2, r3]
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	4a09      	ldr	r2, [pc, #36]	@ (800882c <disk_initialize+0x48>)
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	79fa      	ldrb	r2, [r7, #7]
 8008812:	4906      	ldr	r1, [pc, #24]	@ (800882c <disk_initialize+0x48>)
 8008814:	440a      	add	r2, r1
 8008816:	7a12      	ldrb	r2, [r2, #8]
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000c2c 	.word	0x20000c2c

08008830 <disk_read>:
 8008830:	b590      	push	{r4, r7, lr}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4a0a      	ldr	r2, [pc, #40]	@ (800886c <disk_read+0x3c>)
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	689c      	ldr	r4, [r3, #8]
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	4a07      	ldr	r2, [pc, #28]	@ (800886c <disk_read+0x3c>)
 8008850:	4413      	add	r3, r2
 8008852:	7a18      	ldrb	r0, [r3, #8]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	47a0      	blx	r4
 800885c:	4603      	mov	r3, r0
 800885e:	75fb      	strb	r3, [r7, #23]
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	4618      	mov	r0, r3
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	bd90      	pop	{r4, r7, pc}
 800886a:	bf00      	nop
 800886c:	20000c2c 	.word	0x20000c2c

08008870 <disk_write>:
 8008870:	b590      	push	{r4, r7, lr}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4a0a      	ldr	r2, [pc, #40]	@ (80088ac <disk_write+0x3c>)
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	68dc      	ldr	r4, [r3, #12]
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	4a07      	ldr	r2, [pc, #28]	@ (80088ac <disk_write+0x3c>)
 8008890:	4413      	add	r3, r2
 8008892:	7a18      	ldrb	r0, [r3, #8]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	47a0      	blx	r4
 800889c:	4603      	mov	r3, r0
 800889e:	75fb      	strb	r3, [r7, #23]
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	4618      	mov	r0, r3
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd90      	pop	{r4, r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000c2c 	.word	0x20000c2c

080088b0 <disk_ioctl>:
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	603a      	str	r2, [r7, #0]
 80088ba:	71fb      	strb	r3, [r7, #7]
 80088bc:	460b      	mov	r3, r1
 80088be:	71bb      	strb	r3, [r7, #6]
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	4a09      	ldr	r2, [pc, #36]	@ (80088e8 <disk_ioctl+0x38>)
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	79fa      	ldrb	r2, [r7, #7]
 80088ce:	4906      	ldr	r1, [pc, #24]	@ (80088e8 <disk_ioctl+0x38>)
 80088d0:	440a      	add	r2, r1
 80088d2:	7a10      	ldrb	r0, [r2, #8]
 80088d4:	79b9      	ldrb	r1, [r7, #6]
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	4798      	blx	r3
 80088da:	4603      	mov	r3, r0
 80088dc:	73fb      	strb	r3, [r7, #15]
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20000c2c 	.word	0x20000c2c

080088ec <ld_word>:
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3301      	adds	r3, #1
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	81fb      	strh	r3, [r7, #14]
 80088fc:	89fb      	ldrh	r3, [r7, #14]
 80088fe:	021b      	lsls	r3, r3, #8
 8008900:	b21a      	sxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	b21b      	sxth	r3, r3
 8008908:	4313      	orrs	r3, r2
 800890a:	b21b      	sxth	r3, r3
 800890c:	81fb      	strh	r3, [r7, #14]
 800890e:	89fb      	ldrh	r3, [r7, #14]
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <ld_dword>:
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3303      	adds	r3, #3
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	3202      	adds	r2, #2
 8008934:	7812      	ldrb	r2, [r2, #0]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	3201      	adds	r2, #1
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <st_word>:
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	460b      	mov	r3, r1
 800896c:	807b      	strh	r3, [r7, #2]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	887a      	ldrh	r2, [r7, #2]
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	887b      	ldrh	r3, [r7, #2]
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	807b      	strh	r3, [r7, #2]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	1c5a      	adds	r2, r3, #1
 8008984:	607a      	str	r2, [r7, #4]
 8008986:	887a      	ldrh	r2, [r7, #2]
 8008988:	b2d2      	uxtb	r2, r2
 800898a:	701a      	strb	r2, [r3, #0]
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <st_dword>:
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	607a      	str	r2, [r7, #4]
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	b2d2      	uxtb	r2, r2
 80089ac:	701a      	strb	r2, [r3, #0]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	607a      	str	r2, [r7, #4]
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	b2d2      	uxtb	r2, r2
 80089be:	701a      	strb	r2, [r3, #0]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	0a1b      	lsrs	r3, r3, #8
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	0a1b      	lsrs	r3, r3, #8
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	b2d2      	uxtb	r2, r2
 80089e2:	701a      	strb	r2, [r3, #0]
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <mem_cpy>:
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00d      	beq.n	8008a26 <mem_cpy+0x36>
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	1c53      	adds	r3, r2, #1
 8008a0e:	613b      	str	r3, [r7, #16]
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	1c59      	adds	r1, r3, #1
 8008a14:	6179      	str	r1, [r7, #20]
 8008a16:	7812      	ldrb	r2, [r2, #0]
 8008a18:	701a      	strb	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	607b      	str	r3, [r7, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f1      	bne.n	8008a0a <mem_cpy+0x1a>
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <mem_set>:
 8008a32:	b480      	push	{r7}
 8008a34:	b087      	sub	sp, #28
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	617a      	str	r2, [r7, #20]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	607b      	str	r3, [r7, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1f3      	bne.n	8008a42 <mem_set+0x10>
 8008a5a:	bf00      	nop
 8008a5c:	bf00      	nop
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <mem_cmp>:
 8008a68:	b480      	push	{r7}
 8008a6a:	b089      	sub	sp, #36	@ 0x24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	61fb      	str	r3, [r7, #28]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	61bb      	str	r3, [r7, #24]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	61fa      	str	r2, [r7, #28]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	61ba      	str	r2, [r7, #24]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	1acb      	subs	r3, r1, r3
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	607b      	str	r3, [r7, #4]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <mem_cmp+0x40>
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0eb      	beq.n	8008a80 <mem_cmp+0x18>
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3724      	adds	r7, #36	@ 0x24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <chk_chr>:
 8008ab6:	b480      	push	{r7}
 8008ab8:	b083      	sub	sp, #12
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
 8008ac0:	e002      	b.n	8008ac8 <chk_chr+0x12>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	607b      	str	r3, [r7, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <chk_chr+0x26>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d1f2      	bne.n	8008ac2 <chk_chr+0xc>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <chk_lock>:
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	2300      	movs	r3, #0
 8008af8:	60bb      	str	r3, [r7, #8]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	e029      	b.n	8008b54 <chk_lock+0x68>
 8008b00:	4a27      	ldr	r2, [pc, #156]	@ (8008ba0 <chk_lock+0xb4>)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	4413      	add	r3, r2
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d01d      	beq.n	8008b4a <chk_lock+0x5e>
 8008b0e:	4a24      	ldr	r2, [pc, #144]	@ (8008ba0 <chk_lock+0xb4>)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	4413      	add	r3, r2
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d116      	bne.n	8008b4e <chk_lock+0x62>
 8008b20:	4a1f      	ldr	r2, [pc, #124]	@ (8008ba0 <chk_lock+0xb4>)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	4413      	add	r3, r2
 8008b28:	3304      	adds	r3, #4
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d10c      	bne.n	8008b4e <chk_lock+0x62>
 8008b34:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba0 <chk_lock+0xb4>)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	4413      	add	r3, r2
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d102      	bne.n	8008b4e <chk_lock+0x62>
 8008b48:	e007      	b.n	8008b5a <chk_lock+0x6e>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	60bb      	str	r3, [r7, #8]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d9d2      	bls.n	8008b00 <chk_lock+0x14>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d109      	bne.n	8008b74 <chk_lock+0x88>
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <chk_lock+0x80>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d101      	bne.n	8008b70 <chk_lock+0x84>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e010      	b.n	8008b92 <chk_lock+0xa6>
 8008b70:	2312      	movs	r3, #18
 8008b72:	e00e      	b.n	8008b92 <chk_lock+0xa6>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d108      	bne.n	8008b8c <chk_lock+0xa0>
 8008b7a:	4a09      	ldr	r2, [pc, #36]	@ (8008ba0 <chk_lock+0xb4>)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	4413      	add	r3, r2
 8008b82:	330c      	adds	r3, #12
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b8a:	d101      	bne.n	8008b90 <chk_lock+0xa4>
 8008b8c:	2310      	movs	r3, #16
 8008b8e:	e000      	b.n	8008b92 <chk_lock+0xa6>
 8008b90:	2300      	movs	r3, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000c0c 	.word	0x20000c0c

08008ba4 <enq_lock>:
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	2300      	movs	r3, #0
 8008bac:	607b      	str	r3, [r7, #4]
 8008bae:	e002      	b.n	8008bb6 <enq_lock+0x12>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	607b      	str	r3, [r7, #4]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d806      	bhi.n	8008bca <enq_lock+0x26>
 8008bbc:	4a09      	ldr	r2, [pc, #36]	@ (8008be4 <enq_lock+0x40>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	4413      	add	r3, r2
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1f2      	bne.n	8008bb0 <enq_lock+0xc>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	bf14      	ite	ne
 8008bd0:	2301      	movne	r3, #1
 8008bd2:	2300      	moveq	r3, #0
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	20000c0c 	.word	0x20000c0c

08008be8 <inc_lock>:
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e01f      	b.n	8008c38 <inc_lock+0x50>
 8008bf8:	4a41      	ldr	r2, [pc, #260]	@ (8008d00 <inc_lock+0x118>)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	4413      	add	r3, r2
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d113      	bne.n	8008c32 <inc_lock+0x4a>
 8008c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8008d00 <inc_lock+0x118>)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	4413      	add	r3, r2
 8008c12:	3304      	adds	r3, #4
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d109      	bne.n	8008c32 <inc_lock+0x4a>
 8008c1e:	4a38      	ldr	r2, [pc, #224]	@ (8008d00 <inc_lock+0x118>)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	4413      	add	r3, r2
 8008c26:	3308      	adds	r3, #8
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d006      	beq.n	8008c40 <inc_lock+0x58>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d9dc      	bls.n	8008bf8 <inc_lock+0x10>
 8008c3e:	e000      	b.n	8008c42 <inc_lock+0x5a>
 8008c40:	bf00      	nop
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d132      	bne.n	8008cae <inc_lock+0xc6>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	e002      	b.n	8008c54 <inc_lock+0x6c>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3301      	adds	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d806      	bhi.n	8008c68 <inc_lock+0x80>
 8008c5a:	4a29      	ldr	r2, [pc, #164]	@ (8008d00 <inc_lock+0x118>)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	4413      	add	r3, r2
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f2      	bne.n	8008c4e <inc_lock+0x66>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d101      	bne.n	8008c72 <inc_lock+0x8a>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e040      	b.n	8008cf4 <inc_lock+0x10c>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4922      	ldr	r1, [pc, #136]	@ (8008d00 <inc_lock+0x118>)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	440b      	add	r3, r1
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	491e      	ldr	r1, [pc, #120]	@ (8008d00 <inc_lock+0x118>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	491a      	ldr	r1, [pc, #104]	@ (8008d00 <inc_lock+0x118>)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	440b      	add	r3, r1
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	4a17      	ldr	r2, [pc, #92]	@ (8008d00 <inc_lock+0x118>)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	4413      	add	r3, r2
 8008ca8:	330c      	adds	r3, #12
 8008caa:	2200      	movs	r2, #0
 8008cac:	801a      	strh	r2, [r3, #0]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d009      	beq.n	8008cc8 <inc_lock+0xe0>
 8008cb4:	4a12      	ldr	r2, [pc, #72]	@ (8008d00 <inc_lock+0x118>)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	4413      	add	r3, r2
 8008cbc:	330c      	adds	r3, #12
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <inc_lock+0xe0>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e015      	b.n	8008cf4 <inc_lock+0x10c>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d108      	bne.n	8008ce0 <inc_lock+0xf8>
 8008cce:	4a0c      	ldr	r2, [pc, #48]	@ (8008d00 <inc_lock+0x118>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	011b      	lsls	r3, r3, #4
 8008cd4:	4413      	add	r3, r2
 8008cd6:	330c      	adds	r3, #12
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	e001      	b.n	8008ce4 <inc_lock+0xfc>
 8008ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ce4:	4906      	ldr	r1, [pc, #24]	@ (8008d00 <inc_lock+0x118>)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	440b      	add	r3, r1
 8008cec:	330c      	adds	r3, #12
 8008cee:	801a      	strh	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	20000c0c 	.word	0x20000c0c

08008d04 <dec_lock>:
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	607b      	str	r3, [r7, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d825      	bhi.n	8008d64 <dec_lock+0x60>
 8008d18:	4a17      	ldr	r2, [pc, #92]	@ (8008d78 <dec_lock+0x74>)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	4413      	add	r3, r2
 8008d20:	330c      	adds	r3, #12
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	81fb      	strh	r3, [r7, #14]
 8008d26:	89fb      	ldrh	r3, [r7, #14]
 8008d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d2c:	d101      	bne.n	8008d32 <dec_lock+0x2e>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	81fb      	strh	r3, [r7, #14]
 8008d32:	89fb      	ldrh	r3, [r7, #14]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <dec_lock+0x3a>
 8008d38:	89fb      	ldrh	r3, [r7, #14]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	81fb      	strh	r3, [r7, #14]
 8008d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8008d78 <dec_lock+0x74>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	4413      	add	r3, r2
 8008d46:	330c      	adds	r3, #12
 8008d48:	89fa      	ldrh	r2, [r7, #14]
 8008d4a:	801a      	strh	r2, [r3, #0]
 8008d4c:	89fb      	ldrh	r3, [r7, #14]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d105      	bne.n	8008d5e <dec_lock+0x5a>
 8008d52:	4a09      	ldr	r2, [pc, #36]	@ (8008d78 <dec_lock+0x74>)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	4413      	add	r3, r2
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	737b      	strb	r3, [r7, #13]
 8008d62:	e001      	b.n	8008d68 <dec_lock+0x64>
 8008d64:	2302      	movs	r3, #2
 8008d66:	737b      	strb	r3, [r7, #13]
 8008d68:	7b7b      	ldrb	r3, [r7, #13]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	20000c0c 	.word	0x20000c0c

08008d7c <clear_lock>:
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	2300      	movs	r3, #0
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	e010      	b.n	8008dac <clear_lock+0x30>
 8008d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8008dc0 <clear_lock+0x44>)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	4413      	add	r3, r2
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d105      	bne.n	8008da6 <clear_lock+0x2a>
 8008d9a:	4a09      	ldr	r2, [pc, #36]	@ (8008dc0 <clear_lock+0x44>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	011b      	lsls	r3, r3, #4
 8008da0:	4413      	add	r3, r2
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d9eb      	bls.n	8008d8a <clear_lock+0xe>
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	20000c0c 	.word	0x20000c0c

08008dc4 <sync_window>:
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	78db      	ldrb	r3, [r3, #3]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d034      	beq.n	8008e42 <sync_window+0x7e>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	7858      	ldrb	r0, [r3, #1]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008de8:	2301      	movs	r3, #1
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	f7ff fd40 	bl	8008870 <disk_write>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <sync_window+0x38>
 8008df6:	2301      	movs	r3, #1
 8008df8:	73fb      	strb	r3, [r7, #15]
 8008dfa:	e022      	b.n	8008e42 <sync_window+0x7e>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	70da      	strb	r2, [r3, #3]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	1ad2      	subs	r2, r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d217      	bcs.n	8008e42 <sync_window+0x7e>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	789b      	ldrb	r3, [r3, #2]
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	e010      	b.n	8008e3c <sync_window+0x78>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	4413      	add	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7858      	ldrb	r0, [r3, #1]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e2e:	2301      	movs	r3, #1
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	f7ff fd1d 	bl	8008870 <disk_write>
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d8eb      	bhi.n	8008e1a <sync_window+0x56>
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <move_window>:
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d01b      	beq.n	8008e9c <move_window+0x50>
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ffad 	bl	8008dc4 <sync_window>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d113      	bne.n	8008e9c <move_window+0x50>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7858      	ldrb	r0, [r3, #1]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e7e:	2301      	movs	r3, #1
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	f7ff fcd5 	bl	8008830 <disk_read>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <move_window+0x4a>
 8008e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e90:	603b      	str	r3, [r7, #0]
 8008e92:	2301      	movs	r3, #1
 8008e94:	73fb      	strb	r3, [r7, #15]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <sync_fs>:
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff ff87 	bl	8008dc4 <sync_window>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d158      	bne.n	8008f72 <sync_fs+0xca>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d148      	bne.n	8008f5a <sync_fs+0xb2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	791b      	ldrb	r3, [r3, #4]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d144      	bne.n	8008f5a <sync_fs+0xb2>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3330      	adds	r3, #48	@ 0x30
 8008ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff fda9 	bl	8008a32 <mem_set>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3330      	adds	r3, #48	@ 0x30
 8008ee4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ee8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff fd38 	bl	8008962 <st_word>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3330      	adds	r3, #48	@ 0x30
 8008ef6:	4921      	ldr	r1, [pc, #132]	@ (8008f7c <sync_fs+0xd4>)
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fd4d 	bl	8008998 <st_dword>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3330      	adds	r3, #48	@ 0x30
 8008f02:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008f06:	491e      	ldr	r1, [pc, #120]	@ (8008f80 <sync_fs+0xd8>)
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff fd45 	bl	8008998 <st_dword>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3330      	adds	r3, #48	@ 0x30
 8008f12:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f7ff fd3b 	bl	8008998 <st_dword>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	3330      	adds	r3, #48	@ 0x30
 8008f26:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4610      	mov	r0, r2
 8008f32:	f7ff fd31 	bl	8008998 <st_dword>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7858      	ldrb	r0, [r3, #1]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f7ff fc8e 	bl	8008870 <disk_write>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	711a      	strb	r2, [r3, #4]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	785b      	ldrb	r3, [r3, #1]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff fca4 	bl	80088b0 <disk_ioctl>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <sync_fs+0xca>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	41615252 	.word	0x41615252
 8008f80:	61417272 	.word	0x61417272

08008f84 <clust2sect>:
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	3b02      	subs	r3, #2
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	3b02      	subs	r3, #2
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d301      	bcc.n	8008fa4 <clust2sect+0x20>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e008      	b.n	8008fb6 <clust2sect+0x32>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	895b      	ldrh	r3, [r3, #10]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	fb03 f202 	mul.w	r2, r3, r2
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb4:	4413      	add	r3, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <get_fat>:
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b086      	sub	sp, #24
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	613b      	str	r3, [r7, #16]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d904      	bls.n	8008fe2 <get_fat+0x20>
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d302      	bcc.n	8008fe8 <get_fat+0x26>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e08e      	b.n	8009106 <get_fat+0x144>
 8008fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d061      	beq.n	80090ba <get_fat+0xf8>
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	dc7b      	bgt.n	80090f2 <get_fat+0x130>
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d002      	beq.n	8009004 <get_fat+0x42>
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d041      	beq.n	8009086 <get_fat+0xc4>
 8009002:	e076      	b.n	80090f2 <get_fat+0x130>
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	085b      	lsrs	r3, r3, #1
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	6a1a      	ldr	r2, [r3, #32]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	0a5b      	lsrs	r3, r3, #9
 800901a:	4413      	add	r3, r2
 800901c:	4619      	mov	r1, r3
 800901e:	6938      	ldr	r0, [r7, #16]
 8009020:	f7ff ff14 	bl	8008e4c <move_window>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d166      	bne.n	80090f8 <get_fat+0x136>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	60fa      	str	r2, [r7, #12]
 8009030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	4413      	add	r3, r2
 8009038:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800903c:	60bb      	str	r3, [r7, #8]
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	6a1a      	ldr	r2, [r3, #32]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	0a5b      	lsrs	r3, r3, #9
 8009046:	4413      	add	r3, r2
 8009048:	4619      	mov	r1, r3
 800904a:	6938      	ldr	r0, [r7, #16]
 800904c:	f7ff fefe 	bl	8008e4c <move_window>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d152      	bne.n	80090fc <get_fat+0x13a>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4413      	add	r3, r2
 8009060:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	4313      	orrs	r3, r2
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <get_fat+0xba>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	091b      	lsrs	r3, r3, #4
 800907a:	e002      	b.n	8009082 <get_fat+0xc0>
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	e03f      	b.n	8009106 <get_fat+0x144>
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6a1a      	ldr	r2, [r3, #32]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	0a1b      	lsrs	r3, r3, #8
 800908e:	4413      	add	r3, r2
 8009090:	4619      	mov	r1, r3
 8009092:	6938      	ldr	r0, [r7, #16]
 8009094:	f7ff feda 	bl	8008e4c <move_window>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d130      	bne.n	8009100 <get_fat+0x13e>
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80090ac:	4413      	add	r3, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff fc1c 	bl	80088ec <ld_word>
 80090b4:	4603      	mov	r3, r0
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e025      	b.n	8009106 <get_fat+0x144>
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6a1a      	ldr	r2, [r3, #32]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	09db      	lsrs	r3, r3, #7
 80090c2:	4413      	add	r3, r2
 80090c4:	4619      	mov	r1, r3
 80090c6:	6938      	ldr	r0, [r7, #16]
 80090c8:	f7ff fec0 	bl	8008e4c <move_window>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d118      	bne.n	8009104 <get_fat+0x142>
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80090e0:	4413      	add	r3, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff fc1a 	bl	800891c <ld_dword>
 80090e8:	4603      	mov	r3, r0
 80090ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	e009      	b.n	8009106 <get_fat+0x144>
 80090f2:	2301      	movs	r3, #1
 80090f4:	617b      	str	r3, [r7, #20]
 80090f6:	e006      	b.n	8009106 <get_fat+0x144>
 80090f8:	bf00      	nop
 80090fa:	e004      	b.n	8009106 <get_fat+0x144>
 80090fc:	bf00      	nop
 80090fe:	e002      	b.n	8009106 <get_fat+0x144>
 8009100:	bf00      	nop
 8009102:	e000      	b.n	8009106 <get_fat+0x144>
 8009104:	bf00      	nop
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <put_fat>:
 8009110:	b590      	push	{r4, r7, lr}
 8009112:	b089      	sub	sp, #36	@ 0x24
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	2302      	movs	r3, #2
 800911e:	77fb      	strb	r3, [r7, #31]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b01      	cmp	r3, #1
 8009124:	f240 80d9 	bls.w	80092da <put_fat+0x1ca>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	429a      	cmp	r2, r3
 8009130:	f080 80d3 	bcs.w	80092da <put_fat+0x1ca>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b03      	cmp	r3, #3
 800913a:	f000 8096 	beq.w	800926a <put_fat+0x15a>
 800913e:	2b03      	cmp	r3, #3
 8009140:	f300 80cb 	bgt.w	80092da <put_fat+0x1ca>
 8009144:	2b01      	cmp	r3, #1
 8009146:	d002      	beq.n	800914e <put_fat+0x3e>
 8009148:	2b02      	cmp	r3, #2
 800914a:	d06e      	beq.n	800922a <put_fat+0x11a>
 800914c:	e0c5      	b.n	80092da <put_fat+0x1ca>
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	4413      	add	r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a1a      	ldr	r2, [r3, #32]
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	0a5b      	lsrs	r3, r3, #9
 8009164:	4413      	add	r3, r2
 8009166:	4619      	mov	r1, r3
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7ff fe6f 	bl	8008e4c <move_window>
 800916e:	4603      	mov	r3, r0
 8009170:	77fb      	strb	r3, [r7, #31]
 8009172:	7ffb      	ldrb	r3, [r7, #31]
 8009174:	2b00      	cmp	r3, #0
 8009176:	f040 80a9 	bne.w	80092cc <put_fat+0x1bc>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	61b9      	str	r1, [r7, #24]
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	4413      	add	r3, r2
 800918c:	617b      	str	r3, [r7, #20]
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00d      	beq.n	80091b4 <put_fat+0xa4>
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	b25b      	sxtb	r3, r3
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	b25a      	sxtb	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b25b      	sxtb	r3, r3
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	e001      	b.n	80091b8 <put_fat+0xa8>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	7013      	strb	r3, [r2, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	70da      	strb	r2, [r3, #3]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a1a      	ldr	r2, [r3, #32]
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	0a5b      	lsrs	r3, r3, #9
 80091ca:	4413      	add	r3, r2
 80091cc:	4619      	mov	r1, r3
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff fe3c 	bl	8008e4c <move_window>
 80091d4:	4603      	mov	r3, r0
 80091d6:	77fb      	strb	r3, [r7, #31]
 80091d8:	7ffb      	ldrb	r3, [r7, #31]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d178      	bne.n	80092d0 <put_fat+0x1c0>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ea:	4413      	add	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <put_fat+0xf0>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	091b      	lsrs	r3, r3, #4
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	e00e      	b.n	800921e <put_fat+0x10e>
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	b25b      	sxtb	r3, r3
 8009206:	f023 030f 	bic.w	r3, r3, #15
 800920a:	b25a      	sxtb	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	0a1b      	lsrs	r3, r3, #8
 8009210:	b25b      	sxtb	r3, r3
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	b25b      	sxtb	r3, r3
 8009218:	4313      	orrs	r3, r2
 800921a:	b25b      	sxtb	r3, r3
 800921c:	b2db      	uxtb	r3, r3
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	7013      	strb	r3, [r2, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	70da      	strb	r2, [r3, #3]
 8009228:	e057      	b.n	80092da <put_fat+0x1ca>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	4413      	add	r3, r2
 8009234:	4619      	mov	r1, r3
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f7ff fe08 	bl	8008e4c <move_window>
 800923c:	4603      	mov	r3, r0
 800923e:	77fb      	strb	r3, [r7, #31]
 8009240:	7ffb      	ldrb	r3, [r7, #31]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d146      	bne.n	80092d4 <put_fat+0x1c4>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009254:	4413      	add	r3, r2
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	b292      	uxth	r2, r2
 800925a:	4611      	mov	r1, r2
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff fb80 	bl	8008962 <st_word>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	70da      	strb	r2, [r3, #3]
 8009268:	e037      	b.n	80092da <put_fat+0x1ca>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a1a      	ldr	r2, [r3, #32]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	09db      	lsrs	r3, r3, #7
 8009272:	4413      	add	r3, r2
 8009274:	4619      	mov	r1, r3
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7ff fde8 	bl	8008e4c <move_window>
 800927c:	4603      	mov	r3, r0
 800927e:	77fb      	strb	r3, [r7, #31]
 8009280:	7ffb      	ldrb	r3, [r7, #31]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d128      	bne.n	80092d8 <put_fat+0x1c8>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800929a:	4413      	add	r3, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff fb3d 	bl	800891c <ld_dword>
 80092a2:	4603      	mov	r3, r0
 80092a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80092a8:	4323      	orrs	r3, r4
 80092aa:	607b      	str	r3, [r7, #4]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80092ba:	4413      	add	r3, r2
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff fb6a 	bl	8008998 <st_dword>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	70da      	strb	r2, [r3, #3]
 80092ca:	e006      	b.n	80092da <put_fat+0x1ca>
 80092cc:	bf00      	nop
 80092ce:	e004      	b.n	80092da <put_fat+0x1ca>
 80092d0:	bf00      	nop
 80092d2:	e002      	b.n	80092da <put_fat+0x1ca>
 80092d4:	bf00      	nop
 80092d6:	e000      	b.n	80092da <put_fat+0x1ca>
 80092d8:	bf00      	nop
 80092da:	7ffb      	ldrb	r3, [r7, #31]
 80092dc:	4618      	mov	r0, r3
 80092de:	3724      	adds	r7, #36	@ 0x24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd90      	pop	{r4, r7, pc}

080092e4 <remove_chain>:
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	2300      	movs	r3, #0
 80092f2:	77fb      	strb	r3, [r7, #31]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	61bb      	str	r3, [r7, #24]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d904      	bls.n	800930a <remove_chain+0x26>
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	429a      	cmp	r2, r3
 8009308:	d301      	bcc.n	800930e <remove_chain+0x2a>
 800930a:	2302      	movs	r3, #2
 800930c:	e04b      	b.n	80093a6 <remove_chain+0xc2>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00c      	beq.n	800932e <remove_chain+0x4a>
 8009314:	f04f 32ff 	mov.w	r2, #4294967295
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	69b8      	ldr	r0, [r7, #24]
 800931c:	f7ff fef8 	bl	8009110 <put_fat>
 8009320:	4603      	mov	r3, r0
 8009322:	77fb      	strb	r3, [r7, #31]
 8009324:	7ffb      	ldrb	r3, [r7, #31]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <remove_chain+0x4a>
 800932a:	7ffb      	ldrb	r3, [r7, #31]
 800932c:	e03b      	b.n	80093a6 <remove_chain+0xc2>
 800932e:	68b9      	ldr	r1, [r7, #8]
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f7ff fe46 	bl	8008fc2 <get_fat>
 8009336:	6178      	str	r0, [r7, #20]
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d031      	beq.n	80093a2 <remove_chain+0xbe>
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <remove_chain+0x64>
 8009344:	2302      	movs	r3, #2
 8009346:	e02e      	b.n	80093a6 <remove_chain+0xc2>
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934e:	d101      	bne.n	8009354 <remove_chain+0x70>
 8009350:	2301      	movs	r3, #1
 8009352:	e028      	b.n	80093a6 <remove_chain+0xc2>
 8009354:	2200      	movs	r2, #0
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	69b8      	ldr	r0, [r7, #24]
 800935a:	f7ff fed9 	bl	8009110 <put_fat>
 800935e:	4603      	mov	r3, r0
 8009360:	77fb      	strb	r3, [r7, #31]
 8009362:	7ffb      	ldrb	r3, [r7, #31]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <remove_chain+0x88>
 8009368:	7ffb      	ldrb	r3, [r7, #31]
 800936a:	e01c      	b.n	80093a6 <remove_chain+0xc2>
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	691a      	ldr	r2, [r3, #16]
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	3b02      	subs	r3, #2
 8009376:	429a      	cmp	r2, r3
 8009378:	d20b      	bcs.n	8009392 <remove_chain+0xae>
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	611a      	str	r2, [r3, #16]
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	791b      	ldrb	r3, [r3, #4]
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	b2da      	uxtb	r2, r3
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	711a      	strb	r2, [r3, #4]
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	60bb      	str	r3, [r7, #8]
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	429a      	cmp	r2, r3
 800939e:	d3c6      	bcc.n	800932e <remove_chain+0x4a>
 80093a0:	e000      	b.n	80093a4 <remove_chain+0xc0>
 80093a2:	bf00      	nop
 80093a4:	2300      	movs	r3, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <create_chain>:
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b088      	sub	sp, #32
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	613b      	str	r3, [r7, #16]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10d      	bne.n	80093e0 <create_chain+0x32>
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	61bb      	str	r3, [r7, #24]
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d004      	beq.n	80093da <create_chain+0x2c>
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d31b      	bcc.n	8009412 <create_chain+0x64>
 80093da:	2301      	movs	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	e018      	b.n	8009412 <create_chain+0x64>
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff fded 	bl	8008fc2 <get_fat>
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d801      	bhi.n	80093f4 <create_chain+0x46>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e070      	b.n	80094d6 <create_chain+0x128>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d101      	bne.n	8009400 <create_chain+0x52>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	e06a      	b.n	80094d6 <create_chain+0x128>
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	429a      	cmp	r2, r3
 8009408:	d201      	bcs.n	800940e <create_chain+0x60>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	e063      	b.n	80094d6 <create_chain+0x128>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	61bb      	str	r3, [r7, #24]
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	61fb      	str	r3, [r7, #28]
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	3301      	adds	r3, #1
 800941a:	61fb      	str	r3, [r7, #28]
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	429a      	cmp	r2, r3
 8009424:	d307      	bcc.n	8009436 <create_chain+0x88>
 8009426:	2302      	movs	r3, #2
 8009428:	61fb      	str	r3, [r7, #28]
 800942a:	69fa      	ldr	r2, [r7, #28]
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	429a      	cmp	r2, r3
 8009430:	d901      	bls.n	8009436 <create_chain+0x88>
 8009432:	2300      	movs	r3, #0
 8009434:	e04f      	b.n	80094d6 <create_chain+0x128>
 8009436:	69f9      	ldr	r1, [r7, #28]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff fdc2 	bl	8008fc2 <get_fat>
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00e      	beq.n	8009464 <create_chain+0xb6>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d003      	beq.n	8009454 <create_chain+0xa6>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d101      	bne.n	8009458 <create_chain+0xaa>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	e03e      	b.n	80094d6 <create_chain+0x128>
 8009458:	69fa      	ldr	r2, [r7, #28]
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	429a      	cmp	r2, r3
 800945e:	d1da      	bne.n	8009416 <create_chain+0x68>
 8009460:	2300      	movs	r3, #0
 8009462:	e038      	b.n	80094d6 <create_chain+0x128>
 8009464:	bf00      	nop
 8009466:	f04f 32ff 	mov.w	r2, #4294967295
 800946a:	69f9      	ldr	r1, [r7, #28]
 800946c:	6938      	ldr	r0, [r7, #16]
 800946e:	f7ff fe4f 	bl	8009110 <put_fat>
 8009472:	4603      	mov	r3, r0
 8009474:	75fb      	strb	r3, [r7, #23]
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <create_chain+0xe2>
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d006      	beq.n	8009490 <create_chain+0xe2>
 8009482:	69fa      	ldr	r2, [r7, #28]
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6938      	ldr	r0, [r7, #16]
 8009488:	f7ff fe42 	bl	8009110 <put_fat>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d116      	bne.n	80094c4 <create_chain+0x116>
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	60da      	str	r2, [r3, #12]
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	3b02      	subs	r3, #2
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d804      	bhi.n	80094b4 <create_chain+0x106>
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	1e5a      	subs	r2, r3, #1
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	611a      	str	r2, [r3, #16]
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	791b      	ldrb	r3, [r3, #4]
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	711a      	strb	r2, [r3, #4]
 80094c2:	e007      	b.n	80094d4 <create_chain+0x126>
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d102      	bne.n	80094d0 <create_chain+0x122>
 80094ca:	f04f 33ff 	mov.w	r3, #4294967295
 80094ce:	e000      	b.n	80094d2 <create_chain+0x124>
 80094d0:	2301      	movs	r3, #1
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4618      	mov	r0, r3
 80094d8:	3720      	adds	r7, #32
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <clmt_clust>:
 80094de:	b480      	push	{r7}
 80094e0:	b087      	sub	sp, #28
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f2:	3304      	adds	r3, #4
 80094f4:	613b      	str	r3, [r7, #16]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	0a5b      	lsrs	r3, r3, #9
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	8952      	ldrh	r2, [r2, #10]
 80094fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009502:	617b      	str	r3, [r7, #20]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	613a      	str	r2, [r7, #16]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60bb      	str	r3, [r7, #8]
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <clmt_clust+0x3a>
 8009514:	2300      	movs	r3, #0
 8009516:	e010      	b.n	800953a <clmt_clust+0x5c>
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	429a      	cmp	r2, r3
 800951e:	d307      	bcc.n	8009530 <clmt_clust+0x52>
 8009520:	697a      	ldr	r2, [r7, #20]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	3304      	adds	r3, #4
 800952c:	613b      	str	r3, [r7, #16]
 800952e:	e7e9      	b.n	8009504 <clmt_clust+0x26>
 8009530:	bf00      	nop
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	4413      	add	r3, r2
 800953a:	4618      	mov	r0, r3
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <dir_sdi>:
 8009546:	b580      	push	{r7, lr}
 8009548:	b086      	sub	sp, #24
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	613b      	str	r3, [r7, #16]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800955c:	d204      	bcs.n	8009568 <dir_sdi+0x22>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	f003 031f 	and.w	r3, r3, #31
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <dir_sdi+0x26>
 8009568:	2302      	movs	r3, #2
 800956a:	e063      	b.n	8009634 <dir_sdi+0xee>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	615a      	str	r2, [r3, #20]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <dir_sdi+0x46>
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d902      	bls.n	800958c <dir_sdi+0x46>
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10c      	bne.n	80095ac <dir_sdi+0x66>
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	095b      	lsrs	r3, r3, #5
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	8912      	ldrh	r2, [r2, #8]
 800959a:	4293      	cmp	r3, r2
 800959c:	d301      	bcc.n	80095a2 <dir_sdi+0x5c>
 800959e:	2302      	movs	r3, #2
 80095a0:	e048      	b.n	8009634 <dir_sdi+0xee>
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	61da      	str	r2, [r3, #28]
 80095aa:	e029      	b.n	8009600 <dir_sdi+0xba>
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	895b      	ldrh	r3, [r3, #10]
 80095b0:	025b      	lsls	r3, r3, #9
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e019      	b.n	80095ea <dir_sdi+0xa4>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6979      	ldr	r1, [r7, #20]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff fd01 	bl	8008fc2 <get_fat>
 80095c0:	6178      	str	r0, [r7, #20]
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c8:	d101      	bne.n	80095ce <dir_sdi+0x88>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e032      	b.n	8009634 <dir_sdi+0xee>
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d904      	bls.n	80095de <dir_sdi+0x98>
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d301      	bcc.n	80095e2 <dir_sdi+0x9c>
 80095de:	2302      	movs	r3, #2
 80095e0:	e028      	b.n	8009634 <dir_sdi+0xee>
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	603b      	str	r3, [r7, #0]
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d2e1      	bcs.n	80095b6 <dir_sdi+0x70>
 80095f2:	6979      	ldr	r1, [r7, #20]
 80095f4:	6938      	ldr	r0, [r7, #16]
 80095f6:	f7ff fcc5 	bl	8008f84 <clust2sect>
 80095fa:	4602      	mov	r2, r0
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	61da      	str	r2, [r3, #28]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	619a      	str	r2, [r3, #24]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <dir_sdi+0xcc>
 800960e:	2302      	movs	r3, #2
 8009610:	e010      	b.n	8009634 <dir_sdi+0xee>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69da      	ldr	r2, [r3, #28]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	0a5b      	lsrs	r3, r3, #9
 800961a:	441a      	add	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	61da      	str	r2, [r3, #28]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962c:	441a      	add	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	621a      	str	r2, [r3, #32]
 8009632:	2300      	movs	r3, #0
 8009634:	4618      	mov	r0, r3
 8009636:	3718      	adds	r7, #24
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <dir_next>:
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	3320      	adds	r3, #32
 8009652:	60bb      	str	r3, [r7, #8]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <dir_next+0x28>
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009662:	d301      	bcc.n	8009668 <dir_next+0x2c>
 8009664:	2304      	movs	r3, #4
 8009666:	e0aa      	b.n	80097be <dir_next+0x182>
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	2b00      	cmp	r3, #0
 8009670:	f040 8098 	bne.w	80097a4 <dir_next+0x168>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	61da      	str	r2, [r3, #28]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <dir_next+0x62>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	095b      	lsrs	r3, r3, #5
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	8912      	ldrh	r2, [r2, #8]
 800968e:	4293      	cmp	r3, r2
 8009690:	f0c0 8088 	bcc.w	80097a4 <dir_next+0x168>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	61da      	str	r2, [r3, #28]
 800969a:	2304      	movs	r3, #4
 800969c:	e08f      	b.n	80097be <dir_next+0x182>
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	0a5b      	lsrs	r3, r3, #9
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	8952      	ldrh	r2, [r2, #10]
 80096a6:	3a01      	subs	r2, #1
 80096a8:	4013      	ands	r3, r2
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d17a      	bne.n	80097a4 <dir_next+0x168>
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7ff fc83 	bl	8008fc2 <get_fat>
 80096bc:	6178      	str	r0, [r7, #20]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d801      	bhi.n	80096c8 <dir_next+0x8c>
 80096c4:	2302      	movs	r3, #2
 80096c6:	e07a      	b.n	80097be <dir_next+0x182>
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d101      	bne.n	80096d4 <dir_next+0x98>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e074      	b.n	80097be <dir_next+0x182>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d358      	bcc.n	8009790 <dir_next+0x154>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d104      	bne.n	80096ee <dir_next+0xb2>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	61da      	str	r2, [r3, #28]
 80096ea:	2304      	movs	r3, #4
 80096ec:	e067      	b.n	80097be <dir_next+0x182>
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f7ff fe59 	bl	80093ae <create_chain>
 80096fc:	6178      	str	r0, [r7, #20]
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <dir_next+0xcc>
 8009704:	2307      	movs	r3, #7
 8009706:	e05a      	b.n	80097be <dir_next+0x182>
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <dir_next+0xd6>
 800970e:	2302      	movs	r3, #2
 8009710:	e055      	b.n	80097be <dir_next+0x182>
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d101      	bne.n	800971e <dir_next+0xe2>
 800971a:	2301      	movs	r3, #1
 800971c:	e04f      	b.n	80097be <dir_next+0x182>
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7ff fb50 	bl	8008dc4 <sync_window>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <dir_next+0xf2>
 800972a:	2301      	movs	r3, #1
 800972c:	e047      	b.n	80097be <dir_next+0x182>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3330      	adds	r3, #48	@ 0x30
 8009732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009736:	2100      	movs	r1, #0
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff f97a 	bl	8008a32 <mem_set>
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
 8009742:	6979      	ldr	r1, [r7, #20]
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7ff fc1d 	bl	8008f84 <clust2sect>
 800974a:	4602      	mov	r2, r0
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009750:	e012      	b.n	8009778 <dir_next+0x13c>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	70da      	strb	r2, [r3, #3]
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff fb33 	bl	8008dc4 <sync_window>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <dir_next+0x12c>
 8009764:	2301      	movs	r3, #1
 8009766:	e02a      	b.n	80097be <dir_next+0x182>
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	3301      	adds	r3, #1
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	895b      	ldrh	r3, [r3, #10]
 800977c:	461a      	mov	r2, r3
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	4293      	cmp	r3, r2
 8009782:	d3e6      	bcc.n	8009752 <dir_next+0x116>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	1ad2      	subs	r2, r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	619a      	str	r2, [r3, #24]
 8009796:	6979      	ldr	r1, [r7, #20]
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fbf3 	bl	8008f84 <clust2sect>
 800979e:	4602      	mov	r2, r0
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	61da      	str	r2, [r3, #28]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	615a      	str	r2, [r3, #20]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b6:	441a      	add	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	621a      	str	r2, [r3, #32]
 80097bc:	2300      	movs	r3, #0
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <dir_alloc>:
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b086      	sub	sp, #24
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	2100      	movs	r1, #0
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff feb4 	bl	8009546 <dir_sdi>
 80097de:	4603      	mov	r3, r0
 80097e0:	75fb      	strb	r3, [r7, #23]
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d12b      	bne.n	8009840 <dir_alloc+0x7a>
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	4619      	mov	r1, r3
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7ff fb2a 	bl	8008e4c <move_window>
 80097f8:	4603      	mov	r3, r0
 80097fa:	75fb      	strb	r3, [r7, #23]
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d11d      	bne.n	800983e <dir_alloc+0x78>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2be5      	cmp	r3, #229	@ 0xe5
 800980a:	d004      	beq.n	8009816 <dir_alloc+0x50>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d107      	bne.n	8009826 <dir_alloc+0x60>
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3301      	adds	r3, #1
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d102      	bne.n	800982a <dir_alloc+0x64>
 8009824:	e00c      	b.n	8009840 <dir_alloc+0x7a>
 8009826:	2300      	movs	r3, #0
 8009828:	613b      	str	r3, [r7, #16]
 800982a:	2101      	movs	r1, #1
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff ff05 	bl	800963c <dir_next>
 8009832:	4603      	mov	r3, r0
 8009834:	75fb      	strb	r3, [r7, #23]
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d0d7      	beq.n	80097ec <dir_alloc+0x26>
 800983c:	e000      	b.n	8009840 <dir_alloc+0x7a>
 800983e:	bf00      	nop
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b04      	cmp	r3, #4
 8009844:	d101      	bne.n	800984a <dir_alloc+0x84>
 8009846:	2307      	movs	r3, #7
 8009848:	75fb      	strb	r3, [r7, #23]
 800984a:	7dfb      	ldrb	r3, [r7, #23]
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <ld_clust>:
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	331a      	adds	r3, #26
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff f842 	bl	80088ec <ld_word>
 8009868:	4603      	mov	r3, r0
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b03      	cmp	r3, #3
 8009872:	d109      	bne.n	8009888 <ld_clust+0x34>
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	3314      	adds	r3, #20
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff f837 	bl	80088ec <ld_word>
 800987e:	4603      	mov	r3, r0
 8009880:	041b      	lsls	r3, r3, #16
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4313      	orrs	r3, r2
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <st_clust>:
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	331a      	adds	r3, #26
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	b292      	uxth	r2, r2
 80098a6:	4611      	mov	r1, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff f85a 	bl	8008962 <st_word>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d109      	bne.n	80098ca <st_clust+0x38>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	f103 0214 	add.w	r2, r3, #20
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	0c1b      	lsrs	r3, r3, #16
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	4619      	mov	r1, r3
 80098c4:	4610      	mov	r0, r2
 80098c6:	f7ff f84c 	bl	8008962 <st_word>
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <dir_find>:
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	2100      	movs	r1, #0
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff fe2f 	bl	8009546 <dir_sdi>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75fb      	strb	r3, [r7, #23]
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <dir_find+0x24>
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	e03e      	b.n	8009974 <dir_find+0xa2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	69db      	ldr	r3, [r3, #28]
 80098fa:	4619      	mov	r1, r3
 80098fc:	6938      	ldr	r0, [r7, #16]
 80098fe:	f7ff faa5 	bl	8008e4c <move_window>
 8009902:	4603      	mov	r3, r0
 8009904:	75fb      	strb	r3, [r7, #23]
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d12f      	bne.n	800996c <dir_find+0x9a>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	73fb      	strb	r3, [r7, #15]
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <dir_find+0x4e>
 800991a:	2304      	movs	r3, #4
 800991c:	75fb      	strb	r3, [r7, #23]
 800991e:	e028      	b.n	8009972 <dir_find+0xa0>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	330b      	adds	r3, #11
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	719a      	strb	r2, [r3, #6]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	330b      	adds	r3, #11
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	f003 0308 	and.w	r3, r3, #8
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10a      	bne.n	8009958 <dir_find+0x86>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a18      	ldr	r0, [r3, #32]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3324      	adds	r3, #36	@ 0x24
 800994a:	220b      	movs	r2, #11
 800994c:	4619      	mov	r1, r3
 800994e:	f7ff f88b 	bl	8008a68 <mem_cmp>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00b      	beq.n	8009970 <dir_find+0x9e>
 8009958:	2100      	movs	r1, #0
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff fe6e 	bl	800963c <dir_next>
 8009960:	4603      	mov	r3, r0
 8009962:	75fb      	strb	r3, [r7, #23]
 8009964:	7dfb      	ldrb	r3, [r7, #23]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0c5      	beq.n	80098f6 <dir_find+0x24>
 800996a:	e002      	b.n	8009972 <dir_find+0xa0>
 800996c:	bf00      	nop
 800996e:	e000      	b.n	8009972 <dir_find+0xa0>
 8009970:	bf00      	nop
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <dir_register>:
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60bb      	str	r3, [r7, #8]
 800998a:	2101      	movs	r1, #1
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff ff1a 	bl	80097c6 <dir_alloc>
 8009992:	4603      	mov	r3, r0
 8009994:	73fb      	strb	r3, [r7, #15]
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d11c      	bne.n	80099d6 <dir_register+0x5a>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	4619      	mov	r1, r3
 80099a2:	68b8      	ldr	r0, [r7, #8]
 80099a4:	f7ff fa52 	bl	8008e4c <move_window>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d111      	bne.n	80099d6 <dir_register+0x5a>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	2220      	movs	r2, #32
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff f839 	bl	8008a32 <mem_set>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a18      	ldr	r0, [r3, #32]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3324      	adds	r3, #36	@ 0x24
 80099c8:	220b      	movs	r2, #11
 80099ca:	4619      	mov	r1, r3
 80099cc:	f7ff f810 	bl	80089f0 <mem_cpy>
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2201      	movs	r2, #1
 80099d4:	70da      	strb	r2, [r3, #3]
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <create_name>:
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3324      	adds	r3, #36	@ 0x24
 80099f4:	60bb      	str	r3, [r7, #8]
 80099f6:	220b      	movs	r2, #11
 80099f8:	2120      	movs	r1, #32
 80099fa:	68b8      	ldr	r0, [r7, #8]
 80099fc:	f7ff f819 	bl	8008a32 <mem_set>
 8009a00:	2300      	movs	r3, #0
 8009a02:	613b      	str	r3, [r7, #16]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	61fb      	str	r3, [r7, #28]
 8009a08:	2308      	movs	r3, #8
 8009a0a:	617b      	str	r3, [r7, #20]
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	61fa      	str	r2, [r7, #28]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	4413      	add	r3, r2
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	76fb      	strb	r3, [r7, #27]
 8009a1a:	7efb      	ldrb	r3, [r7, #27]
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d94e      	bls.n	8009abe <create_name+0xde>
 8009a20:	7efb      	ldrb	r3, [r7, #27]
 8009a22:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a24:	d006      	beq.n	8009a34 <create_name+0x54>
 8009a26:	7efb      	ldrb	r3, [r7, #27]
 8009a28:	2b5c      	cmp	r3, #92	@ 0x5c
 8009a2a:	d110      	bne.n	8009a4e <create_name+0x6e>
 8009a2c:	e002      	b.n	8009a34 <create_name+0x54>
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	3301      	adds	r3, #1
 8009a32:	61fb      	str	r3, [r7, #28]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	4413      	add	r3, r2
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8009a3e:	d0f6      	beq.n	8009a2e <create_name+0x4e>
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b5c      	cmp	r3, #92	@ 0x5c
 8009a4a:	d0f0      	beq.n	8009a2e <create_name+0x4e>
 8009a4c:	e038      	b.n	8009ac0 <create_name+0xe0>
 8009a4e:	7efb      	ldrb	r3, [r7, #27]
 8009a50:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a52:	d003      	beq.n	8009a5c <create_name+0x7c>
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d30c      	bcc.n	8009a76 <create_name+0x96>
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2b0b      	cmp	r3, #11
 8009a60:	d002      	beq.n	8009a68 <create_name+0x88>
 8009a62:	7efb      	ldrb	r3, [r7, #27]
 8009a64:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a66:	d001      	beq.n	8009a6c <create_name+0x8c>
 8009a68:	2306      	movs	r3, #6
 8009a6a:	e044      	b.n	8009af6 <create_name+0x116>
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	613b      	str	r3, [r7, #16]
 8009a70:	230b      	movs	r3, #11
 8009a72:	617b      	str	r3, [r7, #20]
 8009a74:	e022      	b.n	8009abc <create_name+0xdc>
 8009a76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da04      	bge.n	8009a88 <create_name+0xa8>
 8009a7e:	7efb      	ldrb	r3, [r7, #27]
 8009a80:	3b80      	subs	r3, #128	@ 0x80
 8009a82:	4a1f      	ldr	r2, [pc, #124]	@ (8009b00 <create_name+0x120>)
 8009a84:	5cd3      	ldrb	r3, [r2, r3]
 8009a86:	76fb      	strb	r3, [r7, #27]
 8009a88:	7efb      	ldrb	r3, [r7, #27]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	481d      	ldr	r0, [pc, #116]	@ (8009b04 <create_name+0x124>)
 8009a8e:	f7ff f812 	bl	8008ab6 <chk_chr>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <create_name+0xbc>
 8009a98:	2306      	movs	r3, #6
 8009a9a:	e02c      	b.n	8009af6 <create_name+0x116>
 8009a9c:	7efb      	ldrb	r3, [r7, #27]
 8009a9e:	2b60      	cmp	r3, #96	@ 0x60
 8009aa0:	d905      	bls.n	8009aae <create_name+0xce>
 8009aa2:	7efb      	ldrb	r3, [r7, #27]
 8009aa4:	2b7a      	cmp	r3, #122	@ 0x7a
 8009aa6:	d802      	bhi.n	8009aae <create_name+0xce>
 8009aa8:	7efb      	ldrb	r3, [r7, #27]
 8009aaa:	3b20      	subs	r3, #32
 8009aac:	76fb      	strb	r3, [r7, #27]
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	613a      	str	r2, [r7, #16]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	7efa      	ldrb	r2, [r7, #27]
 8009aba:	701a      	strb	r2, [r3, #0]
 8009abc:	e7a6      	b.n	8009a0c <create_name+0x2c>
 8009abe:	bf00      	nop
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	441a      	add	r2, r3
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	601a      	str	r2, [r3, #0]
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <create_name+0xf4>
 8009ad0:	2306      	movs	r3, #6
 8009ad2:	e010      	b.n	8009af6 <create_name+0x116>
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2be5      	cmp	r3, #229	@ 0xe5
 8009ada:	d102      	bne.n	8009ae2 <create_name+0x102>
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2205      	movs	r2, #5
 8009ae0:	701a      	strb	r2, [r3, #0]
 8009ae2:	7efb      	ldrb	r3, [r7, #27]
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d801      	bhi.n	8009aec <create_name+0x10c>
 8009ae8:	2204      	movs	r2, #4
 8009aea:	e000      	b.n	8009aee <create_name+0x10e>
 8009aec:	2200      	movs	r2, #0
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	330b      	adds	r3, #11
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	3720      	adds	r7, #32
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	0800aef4 	.word	0x0800aef4
 8009b04:	0800ae70 	.word	0x0800ae70

08009b08 <follow_path>:
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	613b      	str	r3, [r7, #16]
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	e002      	b.n	8009b24 <follow_path+0x1c>
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	3301      	adds	r3, #1
 8009b22:	603b      	str	r3, [r7, #0]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b2a:	d0f8      	beq.n	8009b1e <follow_path+0x16>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b32:	d0f4      	beq.n	8009b1e <follow_path+0x16>
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2200      	movs	r2, #0
 8009b38:	609a      	str	r2, [r3, #8]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b1f      	cmp	r3, #31
 8009b40:	d80a      	bhi.n	8009b58 <follow_path+0x50>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2280      	movs	r2, #128	@ 0x80
 8009b46:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff fcfa 	bl	8009546 <dir_sdi>
 8009b52:	4603      	mov	r3, r0
 8009b54:	75fb      	strb	r3, [r7, #23]
 8009b56:	e043      	b.n	8009be0 <follow_path+0xd8>
 8009b58:	463b      	mov	r3, r7
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ff3f 	bl	80099e0 <create_name>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d134      	bne.n	8009bd6 <follow_path+0xce>
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff feb0 	bl	80098d2 <dir_find>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75fb      	strb	r3, [r7, #23]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009b7c:	72fb      	strb	r3, [r7, #11]
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00a      	beq.n	8009b9a <follow_path+0x92>
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d127      	bne.n	8009bda <follow_path+0xd2>
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d122      	bne.n	8009bda <follow_path+0xd2>
 8009b94:	2305      	movs	r3, #5
 8009b96:	75fb      	strb	r3, [r7, #23]
 8009b98:	e01f      	b.n	8009bda <follow_path+0xd2>
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d11c      	bne.n	8009bde <follow_path+0xd6>
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	799b      	ldrb	r3, [r3, #6]
 8009ba8:	f003 0310 	and.w	r3, r3, #16
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <follow_path+0xae>
 8009bb0:	2305      	movs	r3, #5
 8009bb2:	75fb      	strb	r3, [r7, #23]
 8009bb4:	e014      	b.n	8009be0 <follow_path+0xd8>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc4:	4413      	add	r3, r2
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff fe43 	bl	8009854 <ld_clust>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	609a      	str	r2, [r3, #8]
 8009bd4:	e7c0      	b.n	8009b58 <follow_path+0x50>
 8009bd6:	bf00      	nop
 8009bd8:	e002      	b.n	8009be0 <follow_path+0xd8>
 8009bda:	bf00      	nop
 8009bdc:	e000      	b.n	8009be0 <follow_path+0xd8>
 8009bde:	bf00      	nop
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <get_ldnumber>:
 8009bea:	b480      	push	{r7}
 8009bec:	b087      	sub	sp, #28
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf6:	613b      	str	r3, [r7, #16]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d031      	beq.n	8009c64 <get_ldnumber+0x7a>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	e002      	b.n	8009c0e <get_ldnumber+0x24>
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	617b      	str	r3, [r7, #20]
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	d903      	bls.n	8009c1e <get_ldnumber+0x34>
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8009c1c:	d1f4      	bne.n	8009c08 <get_ldnumber+0x1e>
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b3a      	cmp	r3, #58	@ 0x3a
 8009c24:	d11c      	bne.n	8009c60 <get_ldnumber+0x76>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	60fa      	str	r2, [r7, #12]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	3b30      	subs	r3, #48	@ 0x30
 8009c36:	60bb      	str	r3, [r7, #8]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b09      	cmp	r3, #9
 8009c3c:	d80e      	bhi.n	8009c5c <get_ldnumber+0x72>
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d10a      	bne.n	8009c5c <get_ldnumber+0x72>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d107      	bne.n	8009c5c <get_ldnumber+0x72>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	613b      	str	r3, [r7, #16]
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	3301      	adds	r3, #1
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	e002      	b.n	8009c66 <get_ldnumber+0x7c>
 8009c60:	2300      	movs	r3, #0
 8009c62:	613b      	str	r3, [r7, #16]
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	4618      	mov	r0, r3
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
	...

08009c74 <check_fs>:
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	70da      	strb	r2, [r3, #3]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff f8dc 	bl	8008e4c <move_window>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <check_fs+0x2a>
 8009c9a:	2304      	movs	r3, #4
 8009c9c:	e038      	b.n	8009d10 <check_fs+0x9c>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3330      	adds	r3, #48	@ 0x30
 8009ca2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe fe20 	bl	80088ec <ld_word>
 8009cac:	4603      	mov	r3, r0
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d001      	beq.n	8009cbc <check_fs+0x48>
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e029      	b.n	8009d10 <check_fs+0x9c>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009cc2:	2be9      	cmp	r3, #233	@ 0xe9
 8009cc4:	d009      	beq.n	8009cda <check_fs+0x66>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ccc:	2beb      	cmp	r3, #235	@ 0xeb
 8009cce:	d11e      	bne.n	8009d0e <check_fs+0x9a>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009cd6:	2b90      	cmp	r3, #144	@ 0x90
 8009cd8:	d119      	bne.n	8009d0e <check_fs+0x9a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3330      	adds	r3, #48	@ 0x30
 8009cde:	3336      	adds	r3, #54	@ 0x36
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe fe1b 	bl	800891c <ld_dword>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009cec:	4a0a      	ldr	r2, [pc, #40]	@ (8009d18 <check_fs+0xa4>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d101      	bne.n	8009cf6 <check_fs+0x82>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e00c      	b.n	8009d10 <check_fs+0x9c>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3330      	adds	r3, #48	@ 0x30
 8009cfa:	3352      	adds	r3, #82	@ 0x52
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fe fe0d 	bl	800891c <ld_dword>
 8009d02:	4603      	mov	r3, r0
 8009d04:	4a05      	ldr	r2, [pc, #20]	@ (8009d1c <check_fs+0xa8>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d101      	bne.n	8009d0e <check_fs+0x9a>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e000      	b.n	8009d10 <check_fs+0x9c>
 8009d0e:	2302      	movs	r3, #2
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	00544146 	.word	0x00544146
 8009d1c:	33544146 	.word	0x33544146

08009d20 <find_volume>:
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b096      	sub	sp, #88	@ 0x58
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	71fb      	strb	r3, [r7, #7]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2200      	movs	r2, #0
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f7ff ff58 	bl	8009bea <get_ldnumber>
 8009d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	da01      	bge.n	8009d46 <find_volume+0x26>
 8009d42:	230b      	movs	r3, #11
 8009d44:	e22d      	b.n	800a1a2 <find_volume+0x482>
 8009d46:	4aa1      	ldr	r2, [pc, #644]	@ (8009fcc <find_volume+0x2ac>)
 8009d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <find_volume+0x3a>
 8009d56:	230c      	movs	r3, #12
 8009d58:	e223      	b.n	800a1a2 <find_volume+0x482>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	f023 0301 	bic.w	r3, r3, #1
 8009d66:	71fb      	strb	r3, [r7, #7]
 8009d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01a      	beq.n	8009da6 <find_volume+0x86>
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	785b      	ldrb	r3, [r3, #1]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe fd1b 	bl	80087b0 <disk_status>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009d80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10c      	bne.n	8009da6 <find_volume+0x86>
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d007      	beq.n	8009da2 <find_volume+0x82>
 8009d92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <find_volume+0x82>
 8009d9e:	230a      	movs	r3, #10
 8009da0:	e1ff      	b.n	800a1a2 <find_volume+0x482>
 8009da2:	2300      	movs	r3, #0
 8009da4:	e1fd      	b.n	800a1a2 <find_volume+0x482>
 8009da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da8:	2200      	movs	r2, #0
 8009daa:	701a      	strb	r2, [r3, #0]
 8009dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db2:	705a      	strb	r2, [r3, #1]
 8009db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db6:	785b      	ldrb	r3, [r3, #1]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fe fd13 	bl	80087e4 <disk_initialize>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009dc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <find_volume+0xb4>
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e1e6      	b.n	800a1a2 <find_volume+0x482>
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d007      	beq.n	8009dea <find_volume+0xca>
 8009dda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009dde:	f003 0304 	and.w	r3, r3, #4
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <find_volume+0xca>
 8009de6:	230a      	movs	r3, #10
 8009de8:	e1db      	b.n	800a1a2 <find_volume+0x482>
 8009dea:	2300      	movs	r3, #0
 8009dec:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009df0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009df2:	f7ff ff3f 	bl	8009c74 <check_fs>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8009dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d149      	bne.n	8009e98 <find_volume+0x178>
 8009e04:	2300      	movs	r3, #0
 8009e06:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e08:	e01e      	b.n	8009e48 <find_volume+0x128>
 8009e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009e18:	4413      	add	r3, r2
 8009e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	3304      	adds	r3, #4
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d006      	beq.n	8009e34 <find_volume+0x114>
 8009e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e28:	3308      	adds	r3, #8
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fd76 	bl	800891c <ld_dword>
 8009e30:	4602      	mov	r2, r0
 8009e32:	e000      	b.n	8009e36 <find_volume+0x116>
 8009e34:	2200      	movs	r2, #0
 8009e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	3358      	adds	r3, #88	@ 0x58
 8009e3c:	443b      	add	r3, r7
 8009e3e:	f843 2c44 	str.w	r2, [r3, #-68]
 8009e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e44:	3301      	adds	r3, #1
 8009e46:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d9dd      	bls.n	8009e0a <find_volume+0xea>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <find_volume+0x13e>
 8009e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	3358      	adds	r3, #88	@ 0x58
 8009e64:	443b      	add	r3, r7
 8009e66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <find_volume+0x15e>
 8009e72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e74:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e76:	f7ff fefd 	bl	8009c74 <check_fs>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	e000      	b.n	8009e80 <find_volume+0x160>
 8009e7e:	2303      	movs	r3, #3
 8009e80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8009e84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d905      	bls.n	8009e98 <find_volume+0x178>
 8009e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e8e:	3301      	adds	r3, #1
 8009e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	d9e2      	bls.n	8009e5e <find_volume+0x13e>
 8009e98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d101      	bne.n	8009ea4 <find_volume+0x184>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e17e      	b.n	800a1a2 <find_volume+0x482>
 8009ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d901      	bls.n	8009eb0 <find_volume+0x190>
 8009eac:	230d      	movs	r3, #13
 8009eae:	e178      	b.n	800a1a2 <find_volume+0x482>
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	3330      	adds	r3, #48	@ 0x30
 8009eb4:	330b      	adds	r3, #11
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fd18 	bl	80088ec <ld_word>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ec2:	d001      	beq.n	8009ec8 <find_volume+0x1a8>
 8009ec4:	230d      	movs	r3, #13
 8009ec6:	e16c      	b.n	800a1a2 <find_volume+0x482>
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	3330      	adds	r3, #48	@ 0x30
 8009ecc:	3316      	adds	r3, #22
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fd0c 	bl	80088ec <ld_word>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d106      	bne.n	8009eec <find_volume+0x1cc>
 8009ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee0:	3330      	adds	r3, #48	@ 0x30
 8009ee2:	3324      	adds	r3, #36	@ 0x24
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fe fd19 	bl	800891c <ld_dword>
 8009eea:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ef0:	619a      	str	r2, [r3, #24]
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efa:	709a      	strb	r2, [r3, #2]
 8009efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efe:	789b      	ldrb	r3, [r3, #2]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d005      	beq.n	8009f10 <find_volume+0x1f0>
 8009f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f06:	789b      	ldrb	r3, [r3, #2]
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d001      	beq.n	8009f10 <find_volume+0x1f0>
 8009f0c:	230d      	movs	r3, #13
 8009f0e:	e148      	b.n	800a1a2 <find_volume+0x482>
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	789b      	ldrb	r3, [r3, #2]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f18:	fb02 f303 	mul.w	r3, r2, r3
 8009f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f24:	461a      	mov	r2, r3
 8009f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f28:	815a      	strh	r2, [r3, #10]
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2c:	895b      	ldrh	r3, [r3, #10]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d008      	beq.n	8009f44 <find_volume+0x224>
 8009f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f34:	895b      	ldrh	r3, [r3, #10]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3a:	895b      	ldrh	r3, [r3, #10]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	4013      	ands	r3, r2
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <find_volume+0x228>
 8009f44:	230d      	movs	r3, #13
 8009f46:	e12c      	b.n	800a1a2 <find_volume+0x482>
 8009f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4a:	3330      	adds	r3, #48	@ 0x30
 8009f4c:	3311      	adds	r3, #17
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fccc 	bl	80088ec <ld_word>
 8009f54:	4603      	mov	r3, r0
 8009f56:	461a      	mov	r2, r3
 8009f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5a:	811a      	strh	r2, [r3, #8]
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5e:	891b      	ldrh	r3, [r3, #8]
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <find_volume+0x24e>
 8009f6a:	230d      	movs	r3, #13
 8009f6c:	e119      	b.n	800a1a2 <find_volume+0x482>
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	3330      	adds	r3, #48	@ 0x30
 8009f72:	3313      	adds	r3, #19
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe fcb9 	bl	80088ec <ld_word>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d106      	bne.n	8009f92 <find_volume+0x272>
 8009f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f86:	3330      	adds	r3, #48	@ 0x30
 8009f88:	3320      	adds	r3, #32
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fcc6 	bl	800891c <ld_dword>
 8009f90:	64b8      	str	r0, [r7, #72]	@ 0x48
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	3330      	adds	r3, #48	@ 0x30
 8009f96:	330e      	adds	r3, #14
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe fca7 	bl	80088ec <ld_word>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009fa2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <find_volume+0x28c>
 8009fa8:	230d      	movs	r3, #13
 8009faa:	e0fa      	b.n	800a1a2 <find_volume+0x482>
 8009fac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fb0:	4413      	add	r3, r2
 8009fb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fb4:	8912      	ldrh	r2, [r2, #8]
 8009fb6:	0912      	lsrs	r2, r2, #4
 8009fb8:	b292      	uxth	r2, r2
 8009fba:	4413      	add	r3, r2
 8009fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d204      	bcs.n	8009fd0 <find_volume+0x2b0>
 8009fc6:	230d      	movs	r3, #13
 8009fc8:	e0eb      	b.n	800a1a2 <find_volume+0x482>
 8009fca:	bf00      	nop
 8009fcc:	20000c04 	.word	0x20000c04
 8009fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fd8:	8952      	ldrh	r2, [r2, #10]
 8009fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <find_volume+0x2ca>
 8009fe6:	230d      	movs	r3, #13
 8009fe8:	e0db      	b.n	800a1a2 <find_volume+0x482>
 8009fea:	2303      	movs	r3, #3
 8009fec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d802      	bhi.n	800a000 <find_volume+0x2e0>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800a000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a002:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a006:	4293      	cmp	r3, r2
 800a008:	d802      	bhi.n	800a010 <find_volume+0x2f0>
 800a00a:	2301      	movs	r3, #1
 800a00c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800a010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a012:	1c9a      	adds	r2, r3, #2
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	615a      	str	r2, [r3, #20]
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a01c:	61da      	str	r2, [r3, #28]
 800a01e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a022:	441a      	add	r2, r3
 800a024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a026:	621a      	str	r2, [r3, #32]
 800a028:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02c:	441a      	add	r2, r3
 800a02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a030:	629a      	str	r2, [r3, #40]	@ 0x28
 800a032:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a036:	2b03      	cmp	r3, #3
 800a038:	d11e      	bne.n	800a078 <find_volume+0x358>
 800a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03c:	3330      	adds	r3, #48	@ 0x30
 800a03e:	332a      	adds	r3, #42	@ 0x2a
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe fc53 	bl	80088ec <ld_word>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <find_volume+0x330>
 800a04c:	230d      	movs	r3, #13
 800a04e:	e0a8      	b.n	800a1a2 <find_volume+0x482>
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	891b      	ldrh	r3, [r3, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <find_volume+0x33c>
 800a058:	230d      	movs	r3, #13
 800a05a:	e0a2      	b.n	800a1a2 <find_volume+0x482>
 800a05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05e:	3330      	adds	r3, #48	@ 0x30
 800a060:	332c      	adds	r3, #44	@ 0x2c
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fc5a 	bl	800891c <ld_dword>
 800a068:	4602      	mov	r2, r0
 800a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	647b      	str	r3, [r7, #68]	@ 0x44
 800a076:	e01f      	b.n	800a0b8 <find_volume+0x398>
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	891b      	ldrh	r3, [r3, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <find_volume+0x364>
 800a080:	230d      	movs	r3, #13
 800a082:	e08e      	b.n	800a1a2 <find_volume+0x482>
 800a084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a086:	6a1a      	ldr	r2, [r3, #32]
 800a088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a08a:	441a      	add	r2, r3
 800a08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a090:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a094:	2b02      	cmp	r3, #2
 800a096:	d103      	bne.n	800a0a0 <find_volume+0x380>
 800a098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	e00a      	b.n	800a0b6 <find_volume+0x396>
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a2:	695a      	ldr	r2, [r3, #20]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	085a      	lsrs	r2, r3, #1
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	4413      	add	r3, r2
 800a0b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ba:	699a      	ldr	r2, [r3, #24]
 800a0bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0be:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a0c2:	0a5b      	lsrs	r3, r3, #9
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d201      	bcs.n	800a0cc <find_volume+0x3ac>
 800a0c8:	230d      	movs	r3, #13
 800a0ca:	e06a      	b.n	800a1a2 <find_volume+0x482>
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d2:	611a      	str	r2, [r3, #16]
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d6:	691a      	ldr	r2, [r3, #16]
 800a0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0da:	60da      	str	r2, [r3, #12]
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0de:	2280      	movs	r2, #128	@ 0x80
 800a0e0:	711a      	strb	r2, [r3, #4]
 800a0e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d149      	bne.n	800a17e <find_volume+0x45e>
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ec:	3330      	adds	r3, #48	@ 0x30
 800a0ee:	3330      	adds	r3, #48	@ 0x30
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fe fbfb 	bl	80088ec <ld_word>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d140      	bne.n	800a17e <find_volume+0x45e>
 800a0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0fe:	3301      	adds	r3, #1
 800a100:	4619      	mov	r1, r3
 800a102:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a104:	f7fe fea2 	bl	8008e4c <move_window>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d137      	bne.n	800a17e <find_volume+0x45e>
 800a10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a110:	2200      	movs	r2, #0
 800a112:	711a      	strb	r2, [r3, #4]
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	3330      	adds	r3, #48	@ 0x30
 800a118:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fe fbe5 	bl	80088ec <ld_word>
 800a122:	4603      	mov	r3, r0
 800a124:	461a      	mov	r2, r3
 800a126:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d127      	bne.n	800a17e <find_volume+0x45e>
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	3330      	adds	r3, #48	@ 0x30
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fbf2 	bl	800891c <ld_dword>
 800a138:	4603      	mov	r3, r0
 800a13a:	4a1c      	ldr	r2, [pc, #112]	@ (800a1ac <find_volume+0x48c>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d11e      	bne.n	800a17e <find_volume+0x45e>
 800a140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a142:	3330      	adds	r3, #48	@ 0x30
 800a144:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fe fbe7 	bl	800891c <ld_dword>
 800a14e:	4603      	mov	r3, r0
 800a150:	4a17      	ldr	r2, [pc, #92]	@ (800a1b0 <find_volume+0x490>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d113      	bne.n	800a17e <find_volume+0x45e>
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	3330      	adds	r3, #48	@ 0x30
 800a15a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe fbdc 	bl	800891c <ld_dword>
 800a164:	4602      	mov	r2, r0
 800a166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a168:	611a      	str	r2, [r3, #16]
 800a16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16c:	3330      	adds	r3, #48	@ 0x30
 800a16e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a172:	4618      	mov	r0, r3
 800a174:	f7fe fbd2 	bl	800891c <ld_dword>
 800a178:	4602      	mov	r2, r0
 800a17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17c:	60da      	str	r2, [r3, #12]
 800a17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a180:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b4 <find_volume+0x494>)
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	3301      	adds	r3, #1
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	4b09      	ldr	r3, [pc, #36]	@ (800a1b4 <find_volume+0x494>)
 800a190:	801a      	strh	r2, [r3, #0]
 800a192:	4b08      	ldr	r3, [pc, #32]	@ (800a1b4 <find_volume+0x494>)
 800a194:	881a      	ldrh	r2, [r3, #0]
 800a196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a198:	80da      	strh	r2, [r3, #6]
 800a19a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a19c:	f7fe fdee 	bl	8008d7c <clear_lock>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3758      	adds	r7, #88	@ 0x58
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	41615252 	.word	0x41615252
 800a1b0:	61417272 	.word	0x61417272
 800a1b4:	20000c08 	.word	0x20000c08

0800a1b8 <validate>:
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
 800a1c2:	2309      	movs	r3, #9
 800a1c4:	73fb      	strb	r3, [r7, #15]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01c      	beq.n	800a206 <validate+0x4e>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d018      	beq.n	800a206 <validate+0x4e>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d013      	beq.n	800a206 <validate+0x4e>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	889a      	ldrh	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	88db      	ldrh	r3, [r3, #6]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d10c      	bne.n	800a206 <validate+0x4e>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fadc 	bl	80087b0 <disk_status>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d101      	bne.n	800a206 <validate+0x4e>
 800a202:	2300      	movs	r3, #0
 800a204:	73fb      	strb	r3, [r7, #15]
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d102      	bne.n	800a212 <validate+0x5a>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	e000      	b.n	800a214 <validate+0x5c>
 800a212:	2300      	movs	r3, #0
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <f_mount>:
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	71fb      	strb	r3, [r7, #7]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	613b      	str	r3, [r7, #16]
 800a236:	f107 0310 	add.w	r3, r7, #16
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7ff fcd5 	bl	8009bea <get_ldnumber>
 800a240:	61f8      	str	r0, [r7, #28]
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	2b00      	cmp	r3, #0
 800a246:	da01      	bge.n	800a24c <f_mount+0x28>
 800a248:	230b      	movs	r3, #11
 800a24a:	e02b      	b.n	800a2a4 <f_mount+0x80>
 800a24c:	4a17      	ldr	r2, [pc, #92]	@ (800a2ac <f_mount+0x88>)
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a254:	61bb      	str	r3, [r7, #24]
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <f_mount+0x44>
 800a25c:	69b8      	ldr	r0, [r7, #24]
 800a25e:	f7fe fd8d 	bl	8008d7c <clear_lock>
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <f_mount+0x50>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	490d      	ldr	r1, [pc, #52]	@ (800a2ac <f_mount+0x88>)
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <f_mount+0x66>
 800a284:	79fb      	ldrb	r3, [r7, #7]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d001      	beq.n	800a28e <f_mount+0x6a>
 800a28a:	2300      	movs	r3, #0
 800a28c:	e00a      	b.n	800a2a4 <f_mount+0x80>
 800a28e:	f107 010c 	add.w	r1, r7, #12
 800a292:	f107 0308 	add.w	r3, r7, #8
 800a296:	2200      	movs	r2, #0
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff fd41 	bl	8009d20 <find_volume>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75fb      	strb	r3, [r7, #23]
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3720      	adds	r7, #32
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20000c04 	.word	0x20000c04

0800a2b0 <f_open>:
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b098      	sub	sp, #96	@ 0x60
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	71fb      	strb	r3, [r7, #7]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <f_open+0x18>
 800a2c4:	2309      	movs	r3, #9
 800a2c6:	e1a9      	b.n	800a61c <f_open+0x36c>
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2ce:	71fb      	strb	r3, [r7, #7]
 800a2d0:	79fa      	ldrb	r2, [r7, #7]
 800a2d2:	f107 0110 	add.w	r1, r7, #16
 800a2d6:	f107 0308 	add.w	r3, r7, #8
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff fd20 	bl	8009d20 <find_volume>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a2e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f040 818d 	bne.w	800a60a <f_open+0x35a>
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	f107 0314 	add.w	r3, r7, #20
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff fc03 	bl	8009b08 <follow_path>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a308:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d118      	bne.n	800a342 <f_open+0x92>
 800a310:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a314:	b25b      	sxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	da03      	bge.n	800a322 <f_open+0x72>
 800a31a:	2306      	movs	r3, #6
 800a31c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a320:	e00f      	b.n	800a342 <f_open+0x92>
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	2b01      	cmp	r3, #1
 800a326:	bf8c      	ite	hi
 800a328:	2301      	movhi	r3, #1
 800a32a:	2300      	movls	r3, #0
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	461a      	mov	r2, r3
 800a330:	f107 0314 	add.w	r3, r7, #20
 800a334:	4611      	mov	r1, r2
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe fbd8 	bl	8008aec <chk_lock>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	f003 031c 	and.w	r3, r3, #28
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d07f      	beq.n	800a44c <f_open+0x19c>
 800a34c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a350:	2b00      	cmp	r3, #0
 800a352:	d017      	beq.n	800a384 <f_open+0xd4>
 800a354:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a358:	2b04      	cmp	r3, #4
 800a35a:	d10e      	bne.n	800a37a <f_open+0xca>
 800a35c:	f7fe fc22 	bl	8008ba4 <enq_lock>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d006      	beq.n	800a374 <f_open+0xc4>
 800a366:	f107 0314 	add.w	r3, r7, #20
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7ff fb06 	bl	800997c <dir_register>
 800a370:	4603      	mov	r3, r0
 800a372:	e000      	b.n	800a376 <f_open+0xc6>
 800a374:	2312      	movs	r3, #18
 800a376:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a37a:	79fb      	ldrb	r3, [r7, #7]
 800a37c:	f043 0308 	orr.w	r3, r3, #8
 800a380:	71fb      	strb	r3, [r7, #7]
 800a382:	e010      	b.n	800a3a6 <f_open+0xf6>
 800a384:	7ebb      	ldrb	r3, [r7, #26]
 800a386:	f003 0311 	and.w	r3, r3, #17
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <f_open+0xe6>
 800a38e:	2307      	movs	r3, #7
 800a390:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a394:	e007      	b.n	800a3a6 <f_open+0xf6>
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <f_open+0xf6>
 800a3a0:	2308      	movs	r3, #8
 800a3a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d168      	bne.n	800a480 <f_open+0x1d0>
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	f003 0308 	and.w	r3, r3, #8
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d063      	beq.n	800a480 <f_open+0x1d0>
 800a3b8:	f7fe f99c 	bl	80086f4 <get_fattime>
 800a3bc:	6538      	str	r0, [r7, #80]	@ 0x50
 800a3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c0:	330e      	adds	r3, #14
 800a3c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fae7 	bl	8008998 <st_dword>
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3cc:	3316      	adds	r3, #22
 800a3ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fe fae1 	bl	8008998 <st_dword>
 800a3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d8:	330b      	adds	r3, #11
 800a3da:	2220      	movs	r2, #32
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff fa35 	bl	8009854 <ld_clust>
 800a3ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fa4d 	bl	8009892 <st_clust>
 800a3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3fa:	331c      	adds	r3, #28
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe faca 	bl	8008998 <st_dword>
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2201      	movs	r2, #1
 800a408:	70da      	strb	r2, [r3, #3]
 800a40a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d037      	beq.n	800a480 <f_open+0x1d0>
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a414:	653b      	str	r3, [r7, #80]	@ 0x50
 800a416:	f107 0314 	add.w	r3, r7, #20
 800a41a:	2200      	movs	r2, #0
 800a41c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe ff60 	bl	80092e4 <remove_chain>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a42a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d126      	bne.n	800a480 <f_open+0x1d0>
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe fd08 	bl	8008e4c <move_window>
 800a43c:	4603      	mov	r3, r0
 800a43e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a446:	3a01      	subs	r2, #1
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	e019      	b.n	800a480 <f_open+0x1d0>
 800a44c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a450:	2b00      	cmp	r3, #0
 800a452:	d115      	bne.n	800a480 <f_open+0x1d0>
 800a454:	7ebb      	ldrb	r3, [r7, #26]
 800a456:	f003 0310 	and.w	r3, r3, #16
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <f_open+0x1b6>
 800a45e:	2304      	movs	r3, #4
 800a460:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a464:	e00c      	b.n	800a480 <f_open+0x1d0>
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d007      	beq.n	800a480 <f_open+0x1d0>
 800a470:	7ebb      	ldrb	r3, [r7, #26]
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <f_open+0x1d0>
 800a47a:	2307      	movs	r3, #7
 800a47c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a480:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a484:	2b00      	cmp	r3, #0
 800a486:	d126      	bne.n	800a4d6 <f_open+0x226>
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	f003 0308 	and.w	r3, r3, #8
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d003      	beq.n	800a49a <f_open+0x1ea>
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a498:	71fb      	strb	r3, [r7, #7]
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	625a      	str	r2, [r3, #36]	@ 0x24
 800a4a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	bf8c      	ite	hi
 800a4ae:	2301      	movhi	r3, #1
 800a4b0:	2300      	movls	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	f107 0314 	add.w	r3, r7, #20
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fb93 	bl	8008be8 <inc_lock>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	611a      	str	r2, [r3, #16]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d102      	bne.n	800a4d6 <f_open+0x226>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f040 8095 	bne.w	800a60a <f_open+0x35a>
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff f9b4 	bl	8009854 <ld_clust>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	609a      	str	r2, [r3, #8]
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f4:	331c      	adds	r3, #28
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe fa10 	bl	800891c <ld_dword>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	60da      	str	r2, [r3, #12]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	88da      	ldrh	r2, [r3, #6]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	809a      	strh	r2, [r3, #4]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	79fa      	ldrb	r2, [r7, #7]
 800a51a:	751a      	strb	r2, [r3, #20]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	755a      	strb	r2, [r3, #21]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	621a      	str	r2, [r3, #32]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	619a      	str	r2, [r3, #24]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3330      	adds	r3, #48	@ 0x30
 800a532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a536:	2100      	movs	r1, #0
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fa7a 	bl	8008a32 <mem_set>
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	f003 0320 	and.w	r3, r3, #32
 800a544:	2b00      	cmp	r3, #0
 800a546:	d060      	beq.n	800a60a <f_open+0x35a>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d05c      	beq.n	800a60a <f_open+0x35a>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	68da      	ldr	r2, [r3, #12]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	619a      	str	r2, [r3, #24]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	895b      	ldrh	r3, [r3, #10]
 800a55c:	025b      	lsls	r3, r3, #9
 800a55e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a56c:	e016      	b.n	800a59c <f_open+0x2ec>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fd25 	bl	8008fc2 <get_fat>
 800a578:	65b8      	str	r0, [r7, #88]	@ 0x58
 800a57a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d802      	bhi.n	800a586 <f_open+0x2d6>
 800a580:	2302      	movs	r3, #2
 800a582:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58c:	d102      	bne.n	800a594 <f_open+0x2e4>
 800a58e:	2301      	movs	r3, #1
 800a590:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a594:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a59c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d103      	bne.n	800a5ac <f_open+0x2fc>
 800a5a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a5a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d8e0      	bhi.n	800a56e <f_open+0x2be>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5b0:	61da      	str	r2, [r3, #28]
 800a5b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d127      	bne.n	800a60a <f_open+0x35a>
 800a5ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d022      	beq.n	800a60a <f_open+0x35a>
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe fcdb 	bl	8008f84 <clust2sect>
 800a5ce:	6478      	str	r0, [r7, #68]	@ 0x44
 800a5d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d103      	bne.n	800a5de <f_open+0x32e>
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a5dc:	e015      	b.n	800a60a <f_open+0x35a>
 800a5de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5e0:	0a5a      	lsrs	r2, r3, #9
 800a5e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5e4:	441a      	add	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	621a      	str	r2, [r3, #32]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	7858      	ldrb	r0, [r3, #1]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6a1a      	ldr	r2, [r3, #32]
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f7fe f919 	bl	8008830 <disk_read>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <f_open+0x35a>
 800a604:	2301      	movs	r3, #1
 800a606:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a60a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <f_open+0x368>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a61c:	4618      	mov	r0, r3
 800a61e:	3760      	adds	r7, #96	@ 0x60
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <f_write>:
 800a624:	b580      	push	{r7, lr}
 800a626:	b08c      	sub	sp, #48	@ 0x30
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f107 0210 	add.w	r2, r7, #16
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f7ff fdb7 	bl	800a1b8 <validate>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a650:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a654:	2b00      	cmp	r3, #0
 800a656:	d107      	bne.n	800a668 <f_write+0x44>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	7d5b      	ldrb	r3, [r3, #21]
 800a65c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a660:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <f_write+0x4a>
 800a668:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a66c:	e14b      	b.n	800a906 <f_write+0x2e2>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	7d1b      	ldrb	r3, [r3, #20]
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <f_write+0x5a>
 800a67a:	2307      	movs	r3, #7
 800a67c:	e143      	b.n	800a906 <f_write+0x2e2>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	699a      	ldr	r2, [r3, #24]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	441a      	add	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	f080 812d 	bcs.w	800a8ea <f_write+0x2c6>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	43db      	mvns	r3, r3
 800a696:	607b      	str	r3, [r7, #4]
 800a698:	e127      	b.n	800a8ea <f_write+0x2c6>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f040 80e3 	bne.w	800a86e <f_write+0x24a>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	0a5b      	lsrs	r3, r3, #9
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	8952      	ldrh	r2, [r2, #10]
 800a6b2:	3a01      	subs	r2, #1
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	61bb      	str	r3, [r7, #24]
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d143      	bne.n	800a746 <f_write+0x122>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10c      	bne.n	800a6e0 <f_write+0xbc>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d11a      	bne.n	800a708 <f_write+0xe4>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe fe69 	bl	80093ae <create_chain>
 800a6dc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a6de:	e013      	b.n	800a708 <f_write+0xe4>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d007      	beq.n	800a6f8 <f_write+0xd4>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f7fe fef5 	bl	80094de <clmt_clust>
 800a6f4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a6f6:	e007      	b.n	800a708 <f_write+0xe4>
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	4619      	mov	r1, r3
 800a700:	4610      	mov	r0, r2
 800a702:	f7fe fe54 	bl	80093ae <create_chain>
 800a706:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 80f2 	beq.w	800a8f4 <f_write+0x2d0>
 800a710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a712:	2b01      	cmp	r3, #1
 800a714:	d104      	bne.n	800a720 <f_write+0xfc>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2202      	movs	r2, #2
 800a71a:	755a      	strb	r2, [r3, #21]
 800a71c:	2302      	movs	r3, #2
 800a71e:	e0f2      	b.n	800a906 <f_write+0x2e2>
 800a720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a726:	d104      	bne.n	800a732 <f_write+0x10e>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	755a      	strb	r2, [r3, #21]
 800a72e:	2301      	movs	r3, #1
 800a730:	e0e9      	b.n	800a906 <f_write+0x2e2>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a736:	61da      	str	r2, [r3, #28]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <f_write+0x122>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a744:	609a      	str	r2, [r3, #8]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	7d1b      	ldrb	r3, [r3, #20]
 800a74a:	b25b      	sxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	da18      	bge.n	800a782 <f_write+0x15e>
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	7858      	ldrb	r0, [r3, #1]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6a1a      	ldr	r2, [r3, #32]
 800a75e:	2301      	movs	r3, #1
 800a760:	f7fe f886 	bl	8008870 <disk_write>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d004      	beq.n	800a774 <f_write+0x150>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2201      	movs	r2, #1
 800a76e:	755a      	strb	r2, [r3, #21]
 800a770:	2301      	movs	r3, #1
 800a772:	e0c8      	b.n	800a906 <f_write+0x2e2>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	7d1b      	ldrb	r3, [r3, #20]
 800a778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	751a      	strb	r2, [r3, #20]
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	69db      	ldr	r3, [r3, #28]
 800a788:	4619      	mov	r1, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	f7fe fbfa 	bl	8008f84 <clust2sect>
 800a790:	6178      	str	r0, [r7, #20]
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d104      	bne.n	800a7a2 <f_write+0x17e>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2202      	movs	r2, #2
 800a79c:	755a      	strb	r2, [r3, #21]
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e0b1      	b.n	800a906 <f_write+0x2e2>
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	617b      	str	r3, [r7, #20]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	0a5b      	lsrs	r3, r3, #9
 800a7ae:	623b      	str	r3, [r7, #32]
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d03c      	beq.n	800a830 <f_write+0x20c>
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	8952      	ldrh	r2, [r2, #10]
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d905      	bls.n	800a7d0 <f_write+0x1ac>
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	895b      	ldrh	r3, [r3, #10]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	623b      	str	r3, [r7, #32]
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	7858      	ldrb	r0, [r3, #1]
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	69f9      	ldr	r1, [r7, #28]
 800a7da:	f7fe f849 	bl	8008870 <disk_write>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <f_write+0x1ca>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	755a      	strb	r2, [r3, #21]
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e08b      	b.n	800a906 <f_write+0x2e2>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6a1a      	ldr	r2, [r3, #32]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	6a3a      	ldr	r2, [r7, #32]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d915      	bls.n	800a828 <f_write+0x204>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6a1a      	ldr	r2, [r3, #32]
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	025b      	lsls	r3, r3, #9
 800a80c:	69fa      	ldr	r2, [r7, #28]
 800a80e:	4413      	add	r3, r2
 800a810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a814:	4619      	mov	r1, r3
 800a816:	f7fe f8eb 	bl	80089f0 <mem_cpy>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	7d1b      	ldrb	r3, [r3, #20]
 800a81e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a822:	b2da      	uxtb	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	751a      	strb	r2, [r3, #20]
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	025b      	lsls	r3, r3, #9
 800a82c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a82e:	e03f      	b.n	800a8b0 <f_write+0x28c>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	429a      	cmp	r2, r3
 800a838:	d016      	beq.n	800a868 <f_write+0x244>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	699a      	ldr	r2, [r3, #24]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	429a      	cmp	r2, r3
 800a844:	d210      	bcs.n	800a868 <f_write+0x244>
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	7858      	ldrb	r0, [r3, #1]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a850:	2301      	movs	r3, #1
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	f7fd ffec 	bl	8008830 <disk_read>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d004      	beq.n	800a868 <f_write+0x244>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2201      	movs	r2, #1
 800a862:	755a      	strb	r2, [r3, #21]
 800a864:	2301      	movs	r3, #1
 800a866:	e04e      	b.n	800a906 <f_write+0x2e2>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	621a      	str	r2, [r3, #32]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a876:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a87a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a87c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	429a      	cmp	r2, r3
 800a882:	d901      	bls.n	800a888 <f_write+0x264>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	627b      	str	r3, [r7, #36]	@ 0x24
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a896:	4413      	add	r3, r2
 800a898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a89a:	69f9      	ldr	r1, [r7, #28]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fe f8a7 	bl	80089f0 <mem_cpy>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	7d1b      	ldrb	r3, [r3, #20]
 800a8a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	751a      	strb	r2, [r3, #20]
 800a8b0:	69fa      	ldr	r2, [r7, #28]
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b4:	4413      	add	r3, r2
 800a8b6:	61fb      	str	r3, [r7, #28]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	699a      	ldr	r2, [r3, #24]
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	441a      	add	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	619a      	str	r2, [r3, #24]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	68da      	ldr	r2, [r3, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	bf38      	it	cc
 800a8d0:	461a      	movcc	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	60da      	str	r2, [r3, #12]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8dc:	441a      	add	r2, r3
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	601a      	str	r2, [r3, #0]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	607b      	str	r3, [r7, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f47f aed4 	bne.w	800a69a <f_write+0x76>
 800a8f2:	e000      	b.n	800a8f6 <f_write+0x2d2>
 800a8f4:	bf00      	nop
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	7d1b      	ldrb	r3, [r3, #20]
 800a8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	751a      	strb	r2, [r3, #20]
 800a904:	2300      	movs	r3, #0
 800a906:	4618      	mov	r0, r3
 800a908:	3730      	adds	r7, #48	@ 0x30
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <f_sync>:
 800a90e:	b580      	push	{r7, lr}
 800a910:	b086      	sub	sp, #24
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f107 0208 	add.w	r2, r7, #8
 800a91c:	4611      	mov	r1, r2
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fc4a 	bl	800a1b8 <validate>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d168      	bne.n	800aa00 <f_sync+0xf2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	7d1b      	ldrb	r3, [r3, #20]
 800a932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a936:	2b00      	cmp	r3, #0
 800a938:	d062      	beq.n	800aa00 <f_sync+0xf2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	7d1b      	ldrb	r3, [r3, #20]
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	da15      	bge.n	800a970 <f_sync+0x62>
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	7858      	ldrb	r0, [r3, #1]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a1a      	ldr	r2, [r3, #32]
 800a952:	2301      	movs	r3, #1
 800a954:	f7fd ff8c 	bl	8008870 <disk_write>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <f_sync+0x54>
 800a95e:	2301      	movs	r3, #1
 800a960:	e04f      	b.n	800aa02 <f_sync+0xf4>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	7d1b      	ldrb	r3, [r3, #20]
 800a966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	751a      	strb	r2, [r3, #20]
 800a970:	f7fd fec0 	bl	80086f4 <get_fattime>
 800a974:	6138      	str	r0, [r7, #16]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97c:	4619      	mov	r1, r3
 800a97e:	4610      	mov	r0, r2
 800a980:	f7fe fa64 	bl	8008e4c <move_window>
 800a984:	4603      	mov	r3, r0
 800a986:	75fb      	strb	r3, [r7, #23]
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d138      	bne.n	800aa00 <f_sync+0xf2>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	330b      	adds	r3, #11
 800a998:	781a      	ldrb	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	330b      	adds	r3, #11
 800a99e:	f042 0220 	orr.w	r2, r2, #32
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	701a      	strb	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	68f9      	ldr	r1, [r7, #12]
 800a9b2:	f7fe ff6e 	bl	8009892 <st_clust>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f103 021c 	add.w	r2, r3, #28
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	f7fd ffe8 	bl	8008998 <st_dword>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3316      	adds	r3, #22
 800a9cc:	6939      	ldr	r1, [r7, #16]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fd ffe2 	bl	8008998 <st_dword>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3312      	adds	r3, #18
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fd ffc1 	bl	8008962 <st_word>
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	70da      	strb	r2, [r3, #3]
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fe fa5d 	bl	8008ea8 <sync_fs>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	75fb      	strb	r3, [r7, #23]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	7d1b      	ldrb	r3, [r3, #20]
 800a9f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	751a      	strb	r2, [r3, #20]
 800aa00:	7dfb      	ldrb	r3, [r7, #23]
 800aa02:	4618      	mov	r0, r3
 800aa04:	3718      	adds	r7, #24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <f_close>:
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff ff7b 	bl	800a90e <f_sync>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d118      	bne.n	800aa54 <f_close+0x4a>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f107 0208 	add.w	r2, r7, #8
 800aa28:	4611      	mov	r1, r2
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff fbc4 	bl	800a1b8 <validate>
 800aa30:	4603      	mov	r3, r0
 800aa32:	73fb      	strb	r3, [r7, #15]
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10c      	bne.n	800aa54 <f_close+0x4a>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe f960 	bl	8008d04 <dec_lock>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73fb      	strb	r3, [r7, #15]
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <f_close+0x4a>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <f_getfree>:
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b092      	sub	sp, #72	@ 0x48
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	60b9      	str	r1, [r7, #8]
 800aa68:	607a      	str	r2, [r7, #4]
 800aa6a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800aa6e:	f107 030c 	add.w	r3, r7, #12
 800aa72:	2200      	movs	r2, #0
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff f953 	bl	8009d20 <find_volume>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aa80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f040 8099 	bne.w	800abbc <f_getfree+0x15e>
 800aa8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa92:	691a      	ldr	r2, [r3, #16]
 800aa94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	3b02      	subs	r3, #2
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d804      	bhi.n	800aaa8 <f_getfree+0x4a>
 800aa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa0:	691a      	ldr	r2, [r3, #16]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	601a      	str	r2, [r3, #0]
 800aaa6:	e089      	b.n	800abbc <f_getfree+0x15e>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	643b      	str	r3, [r7, #64]	@ 0x40
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d128      	bne.n	800ab06 <f_getfree+0xa8>
 800aab4:	2302      	movs	r3, #2
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	617b      	str	r3, [r7, #20]
 800aabc:	f107 0314 	add.w	r3, r7, #20
 800aac0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fa7d 	bl	8008fc2 <get_fat>
 800aac8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800aaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad0:	d103      	bne.n	800aada <f_getfree+0x7c>
 800aad2:	2301      	movs	r3, #1
 800aad4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aad8:	e063      	b.n	800aba2 <f_getfree+0x144>
 800aada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d103      	bne.n	800aae8 <f_getfree+0x8a>
 800aae0:	2302      	movs	r3, #2
 800aae2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aae6:	e05c      	b.n	800aba2 <f_getfree+0x144>
 800aae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d102      	bne.n	800aaf4 <f_getfree+0x96>
 800aaee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	643b      	str	r3, [r7, #64]	@ 0x40
 800aaf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d3db      	bcc.n	800aabc <f_getfree+0x5e>
 800ab04:	e04d      	b.n	800aba2 <f_getfree+0x144>
 800ab06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab12:	2300      	movs	r3, #0
 800ab14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab16:	2300      	movs	r3, #0
 800ab18:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d113      	bne.n	800ab48 <f_getfree+0xea>
 800ab20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ab28:	4619      	mov	r1, r3
 800ab2a:	f7fe f98f 	bl	8008e4c <move_window>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ab34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d131      	bne.n	800aba0 <f_getfree+0x142>
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	3330      	adds	r3, #48	@ 0x30
 800ab40:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d10f      	bne.n	800ab70 <f_getfree+0x112>
 800ab50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab52:	f7fd fecb 	bl	80088ec <ld_word>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d102      	bne.n	800ab62 <f_getfree+0x104>
 800ab5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab5e:	3301      	adds	r3, #1
 800ab60:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab64:	3302      	adds	r3, #2
 800ab66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6a:	3b02      	subs	r3, #2
 800ab6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab6e:	e010      	b.n	800ab92 <f_getfree+0x134>
 800ab70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab72:	f7fd fed3 	bl	800891c <ld_dword>
 800ab76:	4603      	mov	r3, r0
 800ab78:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <f_getfree+0x128>
 800ab80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab82:	3301      	adds	r3, #1
 800ab84:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab88:	3304      	adds	r3, #4
 800ab8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab8e:	3b04      	subs	r3, #4
 800ab90:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab94:	3b01      	subs	r3, #1
 800ab96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1bd      	bne.n	800ab1a <f_getfree+0xbc>
 800ab9e:	e000      	b.n	800aba2 <f_getfree+0x144>
 800aba0:	bf00      	nop
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abac:	611a      	str	r2, [r3, #16]
 800abae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb0:	791a      	ldrb	r2, [r3, #4]
 800abb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb4:	f042 0201 	orr.w	r2, r2, #1
 800abb8:	b2d2      	uxtb	r2, r2
 800abba:	711a      	strb	r2, [r3, #4]
 800abbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800abc0:	4618      	mov	r0, r3
 800abc2:	3748      	adds	r7, #72	@ 0x48
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <putc_bfd>:
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	2b0a      	cmp	r3, #10
 800abd8:	d103      	bne.n	800abe2 <putc_bfd+0x1a>
 800abda:	210d      	movs	r1, #13
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7ff fff3 	bl	800abc8 <putc_bfd>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	db25      	blt.n	800ac3a <putc_bfd+0x72>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	60fa      	str	r2, [r7, #12]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	4413      	add	r3, r2
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	731a      	strb	r2, [r3, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b3c      	cmp	r3, #60	@ 0x3c
 800ac00:	dd12      	ble.n	800ac28 <putc_bfd+0x60>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f103 010c 	add.w	r1, r3, #12
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	f107 0308 	add.w	r3, r7, #8
 800ac12:	f7ff fd07 	bl	800a624 <f_write>
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d101      	bne.n	800ac22 <putc_bfd+0x5a>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e001      	b.n	800ac26 <putc_bfd+0x5e>
 800ac22:	f04f 33ff 	mov.w	r3, #4294967295
 800ac26:	60fb      	str	r3, [r7, #12]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	605a      	str	r2, [r3, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	609a      	str	r2, [r3, #8]
 800ac38:	e000      	b.n	800ac3c <putc_bfd+0x74>
 800ac3a:	bf00      	nop
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <putc_flush>:
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	db16      	blt.n	800ac80 <putc_flush+0x3e>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f103 010c 	add.w	r1, r3, #12
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	461a      	mov	r2, r3
 800ac62:	f107 030c 	add.w	r3, r7, #12
 800ac66:	f7ff fcdd 	bl	800a624 <f_write>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d107      	bne.n	800ac80 <putc_flush+0x3e>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d102      	bne.n	800ac80 <putc_flush+0x3e>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	e001      	b.n	800ac84 <putc_flush+0x42>
 800ac80:	f04f 33ff 	mov.w	r3, #4294967295
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <putc_init>:
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	601a      	str	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	605a      	str	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	609a      	str	r2, [r3, #8]
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <f_puts>:
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b096      	sub	sp, #88	@ 0x58
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]
 800acc0:	f107 030c 	add.w	r3, r7, #12
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff ffe0 	bl	800ac8c <putc_init>
 800accc:	e009      	b.n	800ace2 <f_puts+0x2c>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	781a      	ldrb	r2, [r3, #0]
 800acd6:	f107 030c 	add.w	r3, r7, #12
 800acda:	4611      	mov	r1, r2
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff ff73 	bl	800abc8 <putc_bfd>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1f1      	bne.n	800acce <f_puts+0x18>
 800acea:	f107 030c 	add.w	r3, r7, #12
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff ffa7 	bl	800ac42 <putc_flush>
 800acf4:	4603      	mov	r3, r0
 800acf6:	4618      	mov	r0, r3
 800acf8:	3758      	adds	r7, #88	@ 0x58
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <FATFS_LinkDriverEx>:
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	71fb      	strb	r3, [r7, #7]
 800ad0e:	2301      	movs	r3, #1
 800ad10:	75fb      	strb	r3, [r7, #23]
 800ad12:	2300      	movs	r3, #0
 800ad14:	75bb      	strb	r3, [r7, #22]
 800ad16:	4b1f      	ldr	r3, [pc, #124]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad18:	7a5b      	ldrb	r3, [r3, #9]
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d131      	bne.n	800ad84 <FATFS_LinkDriverEx+0x84>
 800ad20:	4b1c      	ldr	r3, [pc, #112]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad22:	7a5b      	ldrb	r3, [r3, #9]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	461a      	mov	r2, r3
 800ad28:	4b1a      	ldr	r3, [pc, #104]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	5499      	strb	r1, [r3, r2]
 800ad2e:	4b19      	ldr	r3, [pc, #100]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad30:	7a5b      	ldrb	r3, [r3, #9]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	4a17      	ldr	r2, [pc, #92]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	605a      	str	r2, [r3, #4]
 800ad3e:	4b15      	ldr	r3, [pc, #84]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad40:	7a5b      	ldrb	r3, [r3, #9]
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	461a      	mov	r2, r3
 800ad46:	4b13      	ldr	r3, [pc, #76]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad48:	4413      	add	r3, r2
 800ad4a:	79fa      	ldrb	r2, [r7, #7]
 800ad4c:	721a      	strb	r2, [r3, #8]
 800ad4e:	4b11      	ldr	r3, [pc, #68]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad50:	7a5b      	ldrb	r3, [r3, #9]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	b2d1      	uxtb	r1, r2
 800ad58:	4a0e      	ldr	r2, [pc, #56]	@ (800ad94 <FATFS_LinkDriverEx+0x94>)
 800ad5a:	7251      	strb	r1, [r2, #9]
 800ad5c:	75bb      	strb	r3, [r7, #22]
 800ad5e:	7dbb      	ldrb	r3, [r7, #22]
 800ad60:	3330      	adds	r3, #48	@ 0x30
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	701a      	strb	r2, [r3, #0]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	223a      	movs	r2, #58	@ 0x3a
 800ad6e:	701a      	strb	r2, [r3, #0]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	3302      	adds	r3, #2
 800ad74:	222f      	movs	r2, #47	@ 0x2f
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	3303      	adds	r3, #3
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	2300      	movs	r3, #0
 800ad82:	75fb      	strb	r3, [r7, #23]
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	4618      	mov	r0, r3
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20000c2c 	.word	0x20000c2c

0800ad98 <FATFS_LinkDriver>:
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
 800ada2:	2200      	movs	r2, #0
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff ffaa 	bl	800ad00 <FATFS_LinkDriverEx>
 800adac:	4603      	mov	r3, r0
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <memset>:
 800adb6:	4402      	add	r2, r0
 800adb8:	4603      	mov	r3, r0
 800adba:	4293      	cmp	r3, r2
 800adbc:	d100      	bne.n	800adc0 <memset+0xa>
 800adbe:	4770      	bx	lr
 800adc0:	f803 1b01 	strb.w	r1, [r3], #1
 800adc4:	e7f9      	b.n	800adba <memset+0x4>
=======
08001460 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001472:	f040 80cd 	bne.w	8001610 <HAL_ADC_ConvCpltCallback+0x1b0>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 8001476:	4b80      	ldr	r3, [pc, #512]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f87a 	bl	8000574 <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	a178      	add	r1, pc, #480	@ (adr r1, 8001668 <HAL_ADC_ConvCpltCallback+0x208>)
 8001486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800148a:	f7ff fa07 	bl	800089c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fbcf 	bl	8000c38 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	4a77      	ldr	r2, [pc, #476]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 800149e:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80014a0:	4b77      	ldr	r3, [pc, #476]	@ (8001680 <HAL_ADC_ConvCpltCallback+0x220>)
 80014a2:	ed93 7a00 	vldr	s14, [r3]
 80014a6:	4b77      	ldr	r3, [pc, #476]	@ (8001684 <HAL_ADC_ConvCpltCallback+0x224>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	ee17 0a90 	vmov	r0, s15
 80014b4:	f7ff f870 	bl	8000598 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	f04f 0000 	mov.w	r0, #0
 80014c0:	4971      	ldr	r1, [pc, #452]	@ (8001688 <HAL_ADC_ConvCpltCallback+0x228>)
 80014c2:	f7ff f9eb 	bl	800089c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4690      	mov	r8, r2
 80014cc:	4699      	mov	r9, r3
 80014ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 80014d0:	885b      	ldrh	r3, [r3, #2]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f84e 	bl	8000574 <__aeabi_i2d>
 80014d8:	4604      	mov	r4, r0
 80014da:	460d      	mov	r5, r1
 80014dc:	4b67      	ldr	r3, [pc, #412]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f859 	bl	8000598 <__aeabi_f2d>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b68      	ldr	r3, [pc, #416]	@ (800168c <HAL_ADC_ConvCpltCallback+0x22c>)
 80014ec:	f7ff f9d6 	bl	800089c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7ff f8a6 	bl	8000648 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4614      	mov	r4, r2
 8001502:	461d      	mov	r5, r3
 8001504:	4b5f      	ldr	r3, [pc, #380]	@ (8001684 <HAL_ADC_ConvCpltCallback+0x224>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f845 	bl	8000598 <__aeabi_f2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7fe fedf 	bl	80002d8 <__aeabi_dsub>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4640      	mov	r0, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f7ff f891 	bl	8000648 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb83 	bl	8000c38 <__aeabi_d2f>
 8001532:	ee07 0a10 	vmov	s14, r0
 8001536:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153e:	4b54      	ldr	r3, [pc, #336]	@ (8001690 <HAL_ADC_ConvCpltCallback+0x230>)
 8001540:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 8001544:	4b4c      	ldr	r3, [pc, #304]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 8001546:	88db      	ldrh	r3, [r3, #6]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f813 	bl	8000574 <__aeabi_i2d>
 800154e:	a348      	add	r3, pc, #288	@ (adr r3, 8001670 <HAL_ADC_ConvCpltCallback+0x210>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f9a2 	bl	800089c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b49      	ldr	r3, [pc, #292]	@ (800168c <HAL_ADC_ConvCpltCallback+0x22c>)
 8001566:	f7ff f86f 	bl	8000648 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4614      	mov	r4, r2
 8001570:	461d      	mov	r5, r3
 8001572:	4b42      	ldr	r3, [pc, #264]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f80e 	bl	8000598 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4620      	mov	r0, r4
 8001582:	4629      	mov	r1, r5
 8001584:	f7ff f860 	bl	8000648 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb52 	bl	8000c38 <__aeabi_d2f>
 8001594:	4603      	mov	r3, r0
 8001596:	4a3f      	ldr	r2, [pc, #252]	@ (8001694 <HAL_ADC_ConvCpltCallback+0x234>)
 8001598:	6013      	str	r3, [r2, #0]
		current=(float) 60.0*(rawADCdata[2]/4095.0)*vrefint;
 800159a:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 800159c:	889b      	ldrh	r3, [r3, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffe8 	bl	8000574 <__aeabi_i2d>
 80015a4:	a332      	add	r3, pc, #200	@ (adr r3, 8001670 <HAL_ADC_ConvCpltCallback+0x210>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f977 	bl	800089c <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <HAL_ADC_ConvCpltCallback+0x238>)
 80015bc:	f7ff f844 	bl	8000648 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4614      	mov	r4, r2
 80015c6:	461d      	mov	r5, r3
 80015c8:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffe3 	bl	8000598 <__aeabi_f2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4620      	mov	r0, r4
 80015d8:	4629      	mov	r1, r5
 80015da:	f7ff f835 	bl	8000648 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fb27 	bl	8000c38 <__aeabi_d2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a2b      	ldr	r2, [pc, #172]	@ (800169c <HAL_ADC_ConvCpltCallback+0x23c>)
 80015ee:	6013      	str	r3, [r2, #0]
		power=(float) vbat*current;
 80015f0:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <HAL_ADC_ConvCpltCallback+0x234>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	4b29      	ldr	r3, [pc, #164]	@ (800169c <HAL_ADC_ConvCpltCallback+0x23c>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <HAL_ADC_ConvCpltCallback+0x240>)
 8001602:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 4);
 8001606:	2204      	movs	r2, #4
 8001608:	491b      	ldr	r1, [pc, #108]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 800160a:	4826      	ldr	r0, [pc, #152]	@ (80016a4 <HAL_ADC_ConvCpltCallback+0x244>)
 800160c:	f002 fac0 	bl	8003b90 <HAL_ADC_Start_DMA>

	}
	if(hadc->Instance==ADC2){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a24      	ldr	r2, [pc, #144]	@ (80016a8 <HAL_ADC_ConvCpltCallback+0x248>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d11f      	bne.n	800165a <HAL_ADC_ConvCpltCallback+0x1fa>
		vexternalsensor=(float) (rawADCdata[4]/4095.0)*vrefint;
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 800161c:	891b      	ldrh	r3, [r3, #8]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffa8 	bl	8000574 <__aeabi_i2d>
 8001624:	a312      	add	r3, pc, #72	@ (adr r3, 8001670 <HAL_ADC_ConvCpltCallback+0x210>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7ff f937 	bl	800089c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff faff 	bl	8000c38 <__aeabi_d2f>
 800163a:	ee07 0a10 	vmov	s14, r0
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001648:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <HAL_ADC_ConvCpltCallback+0x24c>)
 800164a:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x250>)
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <HAL_ADC_ConvCpltCallback+0x254>)
 8001656:	f002 fa9b 	bl	8003b90 <HAL_ADC_Start_DMA>

	}

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001664:	f3af 8000 	nop.w
 8001668:	d70a3d70 	.word	0xd70a3d70
 800166c:	40b36323 	.word	0x40b36323
 8001670:	00000000 	.word	0x00000000
 8001674:	40affe00 	.word	0x40affe00
 8001678:	20000cc4 	.word	0x20000cc4
 800167c:	20000cd4 	.word	0x20000cd4
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004
 8001688:	40590000 	.word	0x40590000
 800168c:	40080000 	.word	0x40080000
 8001690:	20000cd0 	.word	0x20000cd0
 8001694:	20000cd8 	.word	0x20000cd8
 8001698:	404e0000 	.word	0x404e0000
 800169c:	20000cdc 	.word	0x20000cdc
 80016a0:	20000ce0 	.word	0x20000ce0
 80016a4:	20000210 	.word	0x20000210
 80016a8:	50000100 	.word	0x50000100
 80016ac:	20000ce4 	.word	0x20000ce4
 80016b0:	20000ccc 	.word	0x20000ccc
 80016b4:	2000027c 	.word	0x2000027c

080016b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <MX_DMA_Init+0x90>)
 80016c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c2:	4a21      	ldr	r2, [pc, #132]	@ (8001748 <MX_DMA_Init+0x90>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <MX_DMA_Init+0x90>)
 80016cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <MX_DMA_Init+0x90>)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016da:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <MX_DMA_Init+0x90>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <MX_DMA_Init+0x90>)
 80016e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	200b      	movs	r0, #11
 80016f4:	f003 f9c3 	bl	8004a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016f8:	200b      	movs	r0, #11
 80016fa:	f003 f9da 	bl	8004ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	200c      	movs	r0, #12
 8001704:	f003 f9bb 	bl	8004a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001708:	200c      	movs	r0, #12
 800170a:	f003 f9d2 	bl	8004ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	200d      	movs	r0, #13
 8001714:	f003 f9b3 	bl	8004a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001718:	200d      	movs	r0, #13
 800171a:	f003 f9ca 	bl	8004ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	200e      	movs	r0, #14
 8001724:	f003 f9ab 	bl	8004a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001728:	200e      	movs	r0, #14
 800172a:	f003 f9c2 	bl	8004ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	200f      	movs	r0, #15
 8001734:	f003 f9a3 	bl	8004a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001738:	200f      	movs	r0, #15
 800173a:	f003 f9ba 	bl	8004ab2 <HAL_NVIC_EnableIRQ>

}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000

0800174c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2110      	movs	r1, #16
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <SELECT+0x14>)
 8001756:	f003 fe87 	bl	8005468 <HAL_GPIO_WritePin>
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	48000800 	.word	0x48000800

08001764 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2110      	movs	r1, #16
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <DESELECT+0x14>)
 800176e:	f003 fe7b 	bl	8005468 <HAL_GPIO_WritePin>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	48000800 	.word	0x48000800

0800177c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001786:	bf00      	nop
 8001788:	4808      	ldr	r0, [pc, #32]	@ (80017ac <SPI_TxByte+0x30>)
 800178a:	f005 fcfb 	bl	8007184 <HAL_SPI_GetState>
 800178e:	4603      	mov	r3, r0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d1f9      	bne.n	8001788 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001794:	1df9      	adds	r1, r7, #7
 8001796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179a:	2201      	movs	r2, #1
 800179c:	4803      	ldr	r0, [pc, #12]	@ (80017ac <SPI_TxByte+0x30>)
 800179e:	f005 f95c 	bl	8006a5a <HAL_SPI_Transmit>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000ce8 	.word	0x20000ce8

080017b0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80017b6:	23ff      	movs	r3, #255	@ 0xff
 80017b8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80017be:	bf00      	nop
 80017c0:	4809      	ldr	r0, [pc, #36]	@ (80017e8 <SPI_RxByte+0x38>)
 80017c2:	f005 fcdf 	bl	8007184 <HAL_SPI_GetState>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d1f9      	bne.n	80017c0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80017cc:	1dba      	adds	r2, r7, #6
 80017ce:	1df9      	adds	r1, r7, #7
 80017d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2301      	movs	r3, #1
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <SPI_RxByte+0x38>)
 80017da:	f005 fab4 	bl	8006d46 <HAL_SPI_TransmitReceive>

  return data;
 80017de:	79bb      	ldrb	r3, [r7, #6]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000ce8 	.word	0x20000ce8

080017ec <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80017f4:	f7ff ffdc 	bl	80017b0 <SPI_RxByte>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	701a      	strb	r2, [r3, #0]
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <SD_ReadyWait+0x34>)
 8001810:	2232      	movs	r2, #50	@ 0x32
 8001812:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001814:	f7ff ffcc 	bl	80017b0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001818:	f7ff ffca 	bl	80017b0 <SPI_RxByte>
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2bff      	cmp	r3, #255	@ 0xff
 8001824:	d004      	beq.n	8001830 <SD_ReadyWait+0x28>
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <SD_ReadyWait+0x34>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f3      	bne.n	8001818 <SD_ReadyWait+0x10>

  return res;
 8001830:	79fb      	ldrb	r3, [r7, #7]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200003ad 	.word	0x200003ad

08001840 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001846:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800184a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800184c:	f7ff ff8a 	bl	8001764 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e005      	b.n	8001862 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001856:	20ff      	movs	r0, #255	@ 0xff
 8001858:	f7ff ff90 	bl	800177c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	3301      	adds	r3, #1
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2b09      	cmp	r3, #9
 8001866:	ddf6      	ble.n	8001856 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001868:	f7ff ff70 	bl	800174c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800186c:	2340      	movs	r3, #64	@ 0x40
 800186e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001880:	2395      	movs	r3, #149	@ 0x95
 8001882:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e009      	b.n	800189e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800188a:	1d3a      	adds	r2, r7, #4
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff72 	bl	800177c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	ddf2      	ble.n	800188a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80018a4:	e002      	b.n	80018ac <SD_PowerOn+0x6c>
  {
    Count--;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80018ac:	f7ff ff80 	bl	80017b0 <SPI_RxByte>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d002      	beq.n	80018bc <SD_PowerOn+0x7c>
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f4      	bne.n	80018a6 <SD_PowerOn+0x66>
  }

  DESELECT();
 80018bc:	f7ff ff52 	bl	8001764 <DESELECT>
  SPI_TxByte(0XFF);
 80018c0:	20ff      	movs	r0, #255	@ 0xff
 80018c2:	f7ff ff5b 	bl	800177c <SPI_TxByte>

  PowerFlag = 1;
 80018c6:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <SD_PowerOn+0x94>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200003af 	.word	0x200003af

080018d8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <SD_PowerOff+0x14>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	200003af 	.word	0x200003af

080018f0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <SD_CheckPower+0x14>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200003af 	.word	0x200003af

08001908 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001912:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <SD_RxDataBlock+0x68>)
 8001914:	220a      	movs	r2, #10
 8001916:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001918:	f7ff ff4a 	bl	80017b0 <SPI_RxByte>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2bff      	cmp	r3, #255	@ 0xff
 8001924:	d104      	bne.n	8001930 <SD_RxDataBlock+0x28>
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <SD_RxDataBlock+0x68>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f3      	bne.n	8001918 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2bfe      	cmp	r3, #254	@ 0xfe
 8001934:	d001      	beq.n	800193a <SD_RxDataBlock+0x32>
    return FALSE;
 8001936:	2300      	movs	r3, #0
 8001938:	e016      	b.n	8001968 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff53 	bl	80017ec <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff4d 	bl	80017ec <SPI_RxBytePtr>
  } while(btr -= 2);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3b02      	subs	r3, #2
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ed      	bne.n	800193a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800195e:	f7ff ff27 	bl	80017b0 <SPI_RxByte>
  SPI_RxByte();
 8001962:	f7ff ff25 	bl	80017b0 <SPI_RxByte>

  return TRUE;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200003ac 	.word	0x200003ac

08001974 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001984:	f7ff ff40 	bl	8001808 <SD_ReadyWait>
 8001988:	4603      	mov	r3, r0
 800198a:	2bff      	cmp	r3, #255	@ 0xff
 800198c:	d001      	beq.n	8001992 <SD_TxDataBlock+0x1e>
    return FALSE;
 800198e:	2300      	movs	r3, #0
 8001990:	e040      	b.n	8001a14 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fef1 	bl	800177c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	2bfd      	cmp	r3, #253	@ 0xfd
 800199e:	d031      	beq.n	8001a04 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fee5 	bl	800177c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fede 	bl	800177c <SPI_TxByte>
    } while (--wc);
 80019c0:	7bbb      	ldrb	r3, [r7, #14]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	73bb      	strb	r3, [r7, #14]
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1eb      	bne.n	80019a4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80019cc:	f7ff fef0 	bl	80017b0 <SPI_RxByte>
    SPI_RxByte();
 80019d0:	f7ff feee 	bl	80017b0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80019d4:	e00b      	b.n	80019ee <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80019d6:	f7ff feeb 	bl	80017b0 <SPI_RxByte>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d006      	beq.n	80019f6 <SD_TxDataBlock+0x82>
        break;

      i++;
 80019e8:	7b7b      	ldrb	r3, [r7, #13]
 80019ea:	3301      	adds	r3, #1
 80019ec:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80019ee:	7b7b      	ldrb	r3, [r7, #13]
 80019f0:	2b40      	cmp	r3, #64	@ 0x40
 80019f2:	d9f0      	bls.n	80019d6 <SD_TxDataBlock+0x62>
 80019f4:	e000      	b.n	80019f8 <SD_TxDataBlock+0x84>
        break;
 80019f6:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80019f8:	bf00      	nop
 80019fa:	f7ff fed9 	bl	80017b0 <SPI_RxByte>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0fa      	beq.n	80019fa <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d101      	bne.n	8001a12 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001a28:	f7ff feee 	bl	8001808 <SD_ReadyWait>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2bff      	cmp	r3, #255	@ 0xff
 8001a30:	d001      	beq.n	8001a36 <SD_SendCmd+0x1a>
    return 0xFF;
 8001a32:	23ff      	movs	r3, #255	@ 0xff
 8001a34:	e040      	b.n	8001ab8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fe9f 	bl	800177c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	0e1b      	lsrs	r3, r3, #24
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe99 	bl	800177c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fe93 	bl	800177c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fe8d 	bl	800177c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe88 	bl	800177c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b40      	cmp	r3, #64	@ 0x40
 8001a74:	d101      	bne.n	8001a7a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001a76:	2395      	movs	r3, #149	@ 0x95
 8001a78:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b48      	cmp	r3, #72	@ 0x48
 8001a7e:	d101      	bne.n	8001a84 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001a80:	2387      	movs	r3, #135	@ 0x87
 8001a82:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe78 	bl	800177c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001a90:	d101      	bne.n	8001a96 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001a92:	f7ff fe8d 	bl	80017b0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001a96:	230a      	movs	r3, #10
 8001a98:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001a9a:	f7ff fe89 	bl	80017b0 <SPI_RxByte>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001aa2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da05      	bge.n	8001ab6 <SD_SendCmd+0x9a>
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	73bb      	strb	r3, [r7, #14]
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f1      	bne.n	8001a9a <SD_SendCmd+0x7e>

  return res;
 8001ab6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d5      	b.n	8001c80 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <SD_disk_initialize+0x2a>
    return Stat;
 8001ae2:	4b69      	ldr	r3, [pc, #420]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	e0ca      	b.n	8001c80 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001aea:	f7ff fea9 	bl	8001840 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001aee:	f7ff fe2d 	bl	800174c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001af6:	2100      	movs	r1, #0
 8001af8:	2040      	movs	r0, #64	@ 0x40
 8001afa:	f7ff ff8f 	bl	8001a1c <SD_SendCmd>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	f040 80a5 	bne.w	8001c50 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001b06:	4b61      	ldr	r3, [pc, #388]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001b08:	2264      	movs	r2, #100	@ 0x64
 8001b0a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001b0c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001b10:	2048      	movs	r0, #72	@ 0x48
 8001b12:	f7ff ff83 	bl	8001a1c <SD_SendCmd>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d158      	bne.n	8001bce <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e00c      	b.n	8001b3c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001b22:	7bfc      	ldrb	r4, [r7, #15]
 8001b24:	f7ff fe44 	bl	80017b0 <SPI_RxByte>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f104 0310 	add.w	r3, r4, #16
 8001b30:	443b      	add	r3, r7
 8001b32:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d9ef      	bls.n	8001b22 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b42:	7abb      	ldrb	r3, [r7, #10]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	f040 8083 	bne.w	8001c50 <SD_disk_initialize+0x190>
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	2baa      	cmp	r3, #170	@ 0xaa
 8001b4e:	d17f      	bne.n	8001c50 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001b50:	2100      	movs	r1, #0
 8001b52:	2077      	movs	r0, #119	@ 0x77
 8001b54:	f7ff ff62 	bl	8001a1c <SD_SendCmd>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d807      	bhi.n	8001b6e <SD_disk_initialize+0xae>
 8001b5e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b62:	2069      	movs	r0, #105	@ 0x69
 8001b64:	f7ff ff5a 	bl	8001a1c <SD_SendCmd>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001b6e:	4b47      	ldr	r3, [pc, #284]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1eb      	bne.n	8001b50 <SD_disk_initialize+0x90>
 8001b78:	e000      	b.n	8001b7c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001b7a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b7c:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d064      	beq.n	8001c50 <SD_disk_initialize+0x190>
 8001b86:	2100      	movs	r1, #0
 8001b88:	207a      	movs	r0, #122	@ 0x7a
 8001b8a:	f7ff ff47 	bl	8001a1c <SD_SendCmd>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d15d      	bne.n	8001c50 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e00c      	b.n	8001bb4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001b9a:	7bfc      	ldrb	r4, [r7, #15]
 8001b9c:	f7ff fe08 	bl	80017b0 <SPI_RxByte>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f104 0310 	add.w	r3, r4, #16
 8001ba8:	443b      	add	r3, r7
 8001baa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d9ef      	bls.n	8001b9a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001bba:	7a3b      	ldrb	r3, [r7, #8]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <SD_disk_initialize+0x108>
 8001bc4:	2306      	movs	r3, #6
 8001bc6:	e000      	b.n	8001bca <SD_disk_initialize+0x10a>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	73bb      	strb	r3, [r7, #14]
 8001bcc:	e040      	b.n	8001c50 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2077      	movs	r0, #119	@ 0x77
 8001bd2:	f7ff ff23 	bl	8001a1c <SD_SendCmd>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d808      	bhi.n	8001bee <SD_disk_initialize+0x12e>
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2069      	movs	r0, #105	@ 0x69
 8001be0:	f7ff ff1c 	bl	8001a1c <SD_SendCmd>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d801      	bhi.n	8001bee <SD_disk_initialize+0x12e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e000      	b.n	8001bf0 <SD_disk_initialize+0x130>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001bf2:	7bbb      	ldrb	r3, [r7, #14]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d10e      	bne.n	8001c16 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2077      	movs	r0, #119	@ 0x77
 8001bfc:	f7ff ff0e 	bl	8001a1c <SD_SendCmd>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d80e      	bhi.n	8001c24 <SD_disk_initialize+0x164>
 8001c06:	2100      	movs	r1, #0
 8001c08:	2069      	movs	r0, #105	@ 0x69
 8001c0a:	f7ff ff07 	bl	8001a1c <SD_SendCmd>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001c14:	e00d      	b.n	8001c32 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001c16:	2100      	movs	r1, #0
 8001c18:	2041      	movs	r0, #65	@ 0x41
 8001c1a:	f7ff feff 	bl	8001a1c <SD_SendCmd>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1e1      	bne.n	8001bf2 <SD_disk_initialize+0x132>
 8001c2e:	e000      	b.n	8001c32 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001c30:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <SD_disk_initialize+0x18c>
 8001c3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c40:	2050      	movs	r0, #80	@ 0x50
 8001c42:	f7ff feeb 	bl	8001a1c <SD_SendCmd>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001c50:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <SD_disk_initialize+0x1d0>)
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001c56:	f7ff fd85 	bl	8001764 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001c5a:	f7ff fda9 	bl	80017b0 <SPI_RxByte>

  if (type)
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e001      	b.n	8001c7a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001c76:	f7ff fe2f 	bl	80018d8 <SD_PowerOff>
  }

  return Stat;
 8001c7a:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	200003ac 	.word	0x200003ac
 8001c90:	200003ae 	.word	0x200003ae

08001c94 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e002      	b.n	8001cae <SD_disk_status+0x1a>

  return Stat;
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <SD_disk_status+0x28>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b2db      	uxtb	r3, r3
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <SD_disk_read+0x1c>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <SD_disk_read+0x20>
    return RES_PARERR;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	e051      	b.n	8001d84 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d8c <SD_disk_read+0xcc>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e048      	b.n	8001d84 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001cf2:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <SD_disk_read+0xd0>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	025b      	lsls	r3, r3, #9
 8001d02:	607b      	str	r3, [r7, #4]

  SELECT();
 8001d04:	f7ff fd22 	bl	800174c <SELECT>

  if (count == 1)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d111      	bne.n	8001d32 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	2051      	movs	r0, #81	@ 0x51
 8001d12:	f7ff fe83 	bl	8001a1c <SD_SendCmd>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d129      	bne.n	8001d70 <SD_disk_read+0xb0>
 8001d1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff fdf1 	bl	8001908 <SD_RxDataBlock>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d021      	beq.n	8001d70 <SD_disk_read+0xb0>
      count = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	e01e      	b.n	8001d70 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	2052      	movs	r0, #82	@ 0x52
 8001d36:	f7ff fe71 	bl	8001a1c <SD_SendCmd>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d117      	bne.n	8001d70 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001d40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d44:	68b8      	ldr	r0, [r7, #8]
 8001d46:	f7ff fddf 	bl	8001908 <SD_RxDataBlock>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001d56:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ed      	bne.n	8001d40 <SD_disk_read+0x80>
 8001d64:	e000      	b.n	8001d68 <SD_disk_read+0xa8>
          break;
 8001d66:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	204c      	movs	r0, #76	@ 0x4c
 8001d6c:	f7ff fe56 	bl	8001a1c <SD_SendCmd>
    }
  }

  DESELECT();
 8001d70:	f7ff fcf8 	bl	8001764 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001d74:	f7ff fd1c 	bl	80017b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	200003ae 	.word	0x200003ae

08001d94 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <SD_disk_write+0x1c>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <SD_disk_write+0x20>
    return RES_PARERR;
 8001db0:	2304      	movs	r3, #4
 8001db2:	e06b      	b.n	8001e8c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001db4:	4b37      	ldr	r3, [pc, #220]	@ (8001e94 <SD_disk_write+0x100>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e062      	b.n	8001e8c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001dc6:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <SD_disk_write+0x100>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e059      	b.n	8001e8c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <SD_disk_write+0x104>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	025b      	lsls	r3, r3, #9
 8001de8:	607b      	str	r3, [r7, #4]

  SELECT();
 8001dea:	f7ff fcaf 	bl	800174c <SELECT>

  if (count == 1)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d110      	bne.n	8001e16 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	2058      	movs	r0, #88	@ 0x58
 8001df8:	f7ff fe10 	bl	8001a1c <SD_SendCmd>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d13a      	bne.n	8001e78 <SD_disk_write+0xe4>
 8001e02:	21fe      	movs	r1, #254	@ 0xfe
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	f7ff fdb5 	bl	8001974 <SD_TxDataBlock>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d033      	beq.n	8001e78 <SD_disk_write+0xe4>
      count = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	e030      	b.n	8001e78 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <SD_disk_write+0x104>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001e22:	2100      	movs	r1, #0
 8001e24:	2077      	movs	r0, #119	@ 0x77
 8001e26:	f7ff fdf9 	bl	8001a1c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	2057      	movs	r0, #87	@ 0x57
 8001e2e:	f7ff fdf5 	bl	8001a1c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	2059      	movs	r0, #89	@ 0x59
 8001e36:	f7ff fdf1 	bl	8001a1c <SD_SendCmd>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11b      	bne.n	8001e78 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001e40:	21fc      	movs	r1, #252	@ 0xfc
 8001e42:	68b8      	ldr	r0, [r7, #8]
 8001e44:	f7ff fd96 	bl	8001974 <SD_TxDataBlock>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001e54:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ee      	bne.n	8001e40 <SD_disk_write+0xac>
 8001e62:	e000      	b.n	8001e66 <SD_disk_write+0xd2>
          break;
 8001e64:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001e66:	21fd      	movs	r1, #253	@ 0xfd
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fd83 	bl	8001974 <SD_TxDataBlock>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <SD_disk_write+0xe4>
      {
        count = 1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001e78:	f7ff fc74 	bl	8001764 <DESELECT>
  SPI_RxByte();
 8001e7c:	f7ff fc98 	bl	80017b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf14      	ite	ne
 8001e86:	2301      	movne	r3, #1
 8001e88:	2300      	moveq	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000008 	.word	0x20000008
 8001e98:	200003ae 	.word	0x200003ae

08001e9c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	603a      	str	r2, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e119      	b.n	80020ee <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d129      	bne.n	8001f1a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d017      	beq.n	8001efe <SD_disk_ioctl+0x62>
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	dc1f      	bgt.n	8001f12 <SD_disk_ioctl+0x76>
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <SD_disk_ioctl+0x40>
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d00b      	beq.n	8001ef2 <SD_disk_ioctl+0x56>
 8001eda:	e01a      	b.n	8001f12 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001edc:	f7ff fd08 	bl	80018f0 <SD_CheckPower>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001ee6:	f7ff fcf7 	bl	80018d8 <SD_PowerOff>
      res = RES_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ef0:	e0fb      	b.n	80020ea <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001ef2:	f7ff fca5 	bl	8001840 <SD_PowerOn>
      res = RES_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001efc:	e0f5      	b.n	80020ea <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	1c5c      	adds	r4, r3, #1
 8001f02:	f7ff fcf5 	bl	80018f0 <SD_CheckPower>
 8001f06:	4603      	mov	r3, r0
 8001f08:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001f10:	e0eb      	b.n	80020ea <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001f12:	2304      	movs	r3, #4
 8001f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f18:	e0e7      	b.n	80020ea <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001f1a:	4b77      	ldr	r3, [pc, #476]	@ (80020f8 <SD_disk_ioctl+0x25c>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0e0      	b.n	80020ee <SD_disk_ioctl+0x252>

    SELECT();
 8001f2c:	f7ff fc0e 	bl	800174c <SELECT>

    switch (ctrl)
 8001f30:	79bb      	ldrb	r3, [r7, #6]
 8001f32:	2b0d      	cmp	r3, #13
 8001f34:	f200 80ca 	bhi.w	80020cc <SD_disk_ioctl+0x230>
 8001f38:	a201      	add	r2, pc, #4	@ (adr r2, 8001f40 <SD_disk_ioctl+0xa4>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08002037 	.word	0x08002037
 8001f44:	08001f79 	.word	0x08001f79
 8001f48:	08002027 	.word	0x08002027
 8001f4c:	080020cd 	.word	0x080020cd
 8001f50:	080020cd 	.word	0x080020cd
 8001f54:	080020cd 	.word	0x080020cd
 8001f58:	080020cd 	.word	0x080020cd
 8001f5c:	080020cd 	.word	0x080020cd
 8001f60:	080020cd 	.word	0x080020cd
 8001f64:	080020cd 	.word	0x080020cd
 8001f68:	080020cd 	.word	0x080020cd
 8001f6c:	08002049 	.word	0x08002049
 8001f70:	0800206d 	.word	0x0800206d
 8001f74:	08002091 	.word	0x08002091
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2049      	movs	r0, #73	@ 0x49
 8001f7c:	f7ff fd4e 	bl	8001a1c <SD_SendCmd>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 80a6 	bne.w	80020d4 <SD_disk_ioctl+0x238>
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fcba 	bl	8001908 <SD_RxDataBlock>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 809c 	beq.w	80020d4 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8001f9c:	7b3b      	ldrb	r3, [r7, #12]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10d      	bne.n	8001fc2 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001fa6:	7d7b      	ldrb	r3, [r7, #21]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	7d3b      	ldrb	r3, [r7, #20]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001fb8:	8bfb      	ldrh	r3, [r7, #30]
 8001fba:	029a      	lsls	r2, r3, #10
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e02d      	b.n	800201e <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001fc2:	7c7b      	ldrb	r3, [r7, #17]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	7dbb      	ldrb	r3, [r7, #22]
 8001fcc:	09db      	lsrs	r3, r3, #7
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	7d7b      	ldrb	r3, [r7, #21]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f003 0306 	and.w	r3, r3, #6
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001fea:	7d3b      	ldrb	r3, [r7, #20]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	7cbb      	ldrb	r3, [r7, #18]
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	b29b      	uxth	r3, r3
 8002002:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002006:	b29b      	uxth	r3, r3
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002010:	8bfa      	ldrh	r2, [r7, #30]
 8002012:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002016:	3b09      	subs	r3, #9
 8002018:	409a      	lsls	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8002024:	e056      	b.n	80020d4 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800202c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002034:	e055      	b.n	80020e2 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002036:	f7ff fbe7 	bl	8001808 <SD_ReadyWait>
 800203a:	4603      	mov	r3, r0
 800203c:	2bff      	cmp	r3, #255	@ 0xff
 800203e:	d14b      	bne.n	80020d8 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002046:	e047      	b.n	80020d8 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002048:	2100      	movs	r1, #0
 800204a:	2049      	movs	r0, #73	@ 0x49
 800204c:	f7ff fce6 	bl	8001a1c <SD_SendCmd>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d142      	bne.n	80020dc <SD_disk_ioctl+0x240>
 8002056:	2110      	movs	r1, #16
 8002058:	6a38      	ldr	r0, [r7, #32]
 800205a:	f7ff fc55 	bl	8001908 <SD_RxDataBlock>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d03b      	beq.n	80020dc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800206a:	e037      	b.n	80020dc <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800206c:	2100      	movs	r1, #0
 800206e:	204a      	movs	r0, #74	@ 0x4a
 8002070:	f7ff fcd4 	bl	8001a1c <SD_SendCmd>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d132      	bne.n	80020e0 <SD_disk_ioctl+0x244>
 800207a:	2110      	movs	r1, #16
 800207c:	6a38      	ldr	r0, [r7, #32]
 800207e:	f7ff fc43 	bl	8001908 <SD_RxDataBlock>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02b      	beq.n	80020e0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800208e:	e027      	b.n	80020e0 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002090:	2100      	movs	r1, #0
 8002092:	207a      	movs	r0, #122	@ 0x7a
 8002094:	f7ff fcc2 	bl	8001a1c <SD_SendCmd>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020a4:	e00b      	b.n	80020be <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80020a6:	6a3c      	ldr	r4, [r7, #32]
 80020a8:	1c63      	adds	r3, r4, #1
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	f7ff fb80 	bl	80017b0 <SPI_RxByte>
 80020b0:	4603      	mov	r3, r0
 80020b2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80020b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80020b8:	3301      	adds	r3, #1
 80020ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d9ef      	bls.n	80020a6 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 80020cc:	2304      	movs	r3, #4
 80020ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80020d2:	e006      	b.n	80020e2 <SD_disk_ioctl+0x246>
      break;
 80020d4:	bf00      	nop
 80020d6:	e004      	b.n	80020e2 <SD_disk_ioctl+0x246>
      break;
 80020d8:	bf00      	nop
 80020da:	e002      	b.n	80020e2 <SD_disk_ioctl+0x246>
      break;
 80020dc:	bf00      	nop
 80020de:	e000      	b.n	80020e2 <SD_disk_ioctl+0x246>
      break;
 80020e0:	bf00      	nop
    }

    DESELECT();
 80020e2:	f7ff fb3f 	bl	8001764 <DESELECT>
    SPI_RxByte();
 80020e6:	f7ff fb63 	bl	80017b0 <SPI_RxByte>
  }

  return res;
 80020ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	372c      	adds	r7, #44	@ 0x2c
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000008 	.word	0x20000008

080020fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	@ 0x28
 8002100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
 8002110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002112:	4b3c      	ldr	r3, [pc, #240]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	4a3b      	ldr	r2, [pc, #236]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002118:	f043 0320 	orr.w	r3, r3, #32
 800211c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211e:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	4b36      	ldr	r3, [pc, #216]	@ (8002204 <MX_GPIO_Init+0x108>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212e:	4a35      	ldr	r2, [pc, #212]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002136:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002146:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800214e:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <MX_GPIO_Init+0x108>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	4a29      	ldr	r2, [pc, #164]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002166:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	2110      	movs	r1, #16
 8002176:	4824      	ldr	r0, [pc, #144]	@ (8002208 <MX_GPIO_Init+0x10c>)
 8002178:	f003 f976 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002182:	4822      	ldr	r0, [pc, #136]	@ (800220c <MX_GPIO_Init+0x110>)
 8002184:	f003 f970 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002188:	2310      	movs	r3, #16
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218c:	2301      	movs	r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	481a      	ldr	r0, [pc, #104]	@ (8002208 <MX_GPIO_Init+0x10c>)
 80021a0:	f002 ffe0 	bl	8005164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80021a4:	2306      	movs	r3, #6
 80021a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4814      	ldr	r0, [pc, #80]	@ (800220c <MX_GPIO_Init+0x110>)
 80021ba:	f002 ffd3 	bl	8005164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021be:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	480d      	ldr	r0, [pc, #52]	@ (800220c <MX_GPIO_Init+0x110>)
 80021d8:	f002 ffc4 	bl	8005164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	2007      	movs	r0, #7
 80021e2:	f002 fc4c 	bl	8004a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80021e6:	2007      	movs	r0, #7
 80021e8:	f002 fc63 	bl	8004ab2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	2008      	movs	r0, #8
 80021f2:	f002 fc44 	bl	8004a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80021f6:	2008      	movs	r0, #8
 80021f8:	f002 fc5b 	bl	8004ab2 <HAL_NVIC_EnableIRQ>

}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	@ 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	48000800 	.word	0x48000800
 800220c:	48000400 	.word	0x48000400

08002210 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002216:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <MX_I2C3_Init+0x78>)
 8002218:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10B17DB5;
 800221a:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <MX_I2C3_Init+0x74>)
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <MX_I2C3_Init+0x7c>)
 800221e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002220:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002228:	2201      	movs	r2, #1
 800222a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800222c:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <MX_I2C3_Init+0x74>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <MX_I2C3_Init+0x74>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800224a:	480e      	ldr	r0, [pc, #56]	@ (8002284 <MX_I2C3_Init+0x74>)
 800224c:	f003 f961 	bl	8005512 <HAL_I2C_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002256:	f000 f9ba 	bl	80025ce <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800225a:	2100      	movs	r1, #0
 800225c:	4809      	ldr	r0, [pc, #36]	@ (8002284 <MX_I2C3_Init+0x74>)
 800225e:	f003 f9f3 	bl	8005648 <HAL_I2CEx_ConfigAnalogFilter>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002268:	f000 f9b1 	bl	80025ce <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800226c:	2100      	movs	r1, #0
 800226e:	4805      	ldr	r0, [pc, #20]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002270:	f003 fa35 	bl	80056de <HAL_I2CEx_ConfigDigitalFilter>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800227a:	f000 f9a8 	bl	80025ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200003b0 	.word	0x200003b0
 8002288:	40007800 	.word	0x40007800
 800228c:	10b17db5 	.word	0x10b17db5

08002290 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b09c      	sub	sp, #112	@ 0x70
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	2244      	movs	r2, #68	@ 0x44
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00c f930 	bl	800e516 <memset>
  if(i2cHandle->Instance==I2C3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002374 <HAL_I2C_MspInit+0xe4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d155      	bne.n	800236c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ca:	f107 0318 	add.w	r3, r7, #24
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 f928 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022da:	f000 f978 	bl	80025ce <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	4a25      	ldr	r2, [pc, #148]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ea:	4b23      	ldr	r3, [pc, #140]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	4b20      	ldr	r3, [pc, #128]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800230e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002312:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002314:	2312      	movs	r3, #18
 8002316:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002320:	2302      	movs	r3, #2
 8002322:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800232e:	f002 ff19 	bl	8005164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002336:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002338:	2312      	movs	r3, #18
 800233a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002344:	2308      	movs	r3, #8
 8002346:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002348:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800234c:	4619      	mov	r1, r3
 800234e:	480b      	ldr	r0, [pc, #44]	@ (800237c <HAL_I2C_MspInit+0xec>)
 8002350:	f002 ff08 	bl	8005164 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 800235a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800235e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002364:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800236c:	bf00      	nop
 800236e:	3770      	adds	r7, #112	@ 0x70
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40007800 	.word	0x40007800
 8002378:	40021000 	.word	0x40021000
 800237c:	48000800 	.word	0x48000800

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b087      	sub	sp, #28
 8002384:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002386:	f000 ffce 	bl	8003326 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800238a:	f000 f8cf 	bl	800252c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800238e:	f7ff feb5 	bl	80020fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002392:	f7ff f991 	bl	80016b8 <MX_DMA_Init>
  MX_SPI1_Init();
 8002396:	f000 f921 	bl	80025dc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800239a:	f000 ff3f 	bl	800321c <MX_USB_PCD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800239e:	f007 fe41 	bl	800a024 <MX_FATFS_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <main+0x2c>
    Error_Handler();
 80023a8:	f000 f911 	bl	80025ce <Error_Handler>
  }
  MX_I2C3_Init();
 80023ac:	f7ff ff30 	bl	8002210 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80023b0:	f000 fc7e 	bl	8002cb0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80023b4:	f7fe fe3e 	bl	8001034 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80023b8:	f000 fcc4 	bl	8002d44 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80023bc:	f000 fb46 	bl	8002a4c <MX_TIM3_Init>
  MX_TIM4_Init();
 80023c0:	f000 fbbc 	bl	8002b3c <MX_TIM4_Init>
  MX_ADC2_Init();
 80023c4:	f7fe fee0 	bl	8001188 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 5);
 80023c8:	2205      	movs	r2, #5
 80023ca:	4945      	ldr	r1, [pc, #276]	@ (80024e0 <main+0x160>)
 80023cc:	4845      	ldr	r0, [pc, #276]	@ (80024e4 <main+0x164>)
 80023ce:	f001 fbdf 	bl	8003b90 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 80023d2:	4b45      	ldr	r3, [pc, #276]	@ (80024e8 <main+0x168>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	4619      	mov	r1, r3
 80023d8:	4844      	ldr	r0, [pc, #272]	@ (80024ec <main+0x16c>)
 80023da:	f001 fbd9 	bl	8003b90 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 80023de:	4844      	ldr	r0, [pc, #272]	@ (80024f0 <main+0x170>)
 80023e0:	f005 f89a 	bl	8007518 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ea:	4842      	ldr	r0, [pc, #264]	@ (80024f4 <main+0x174>)
 80023ec:	f003 f83c 	bl	8005468 <HAL_GPIO_WritePin>


  HAL_Delay(100);
 80023f0:	2064      	movs	r0, #100	@ 0x64
 80023f2:	f001 f809 	bl	8003408 <HAL_Delay>
  HAL_UART_Abort(&huart1);
 80023f6:	4840      	ldr	r0, [pc, #256]	@ (80024f8 <main+0x178>)
 80023f8:	f006 f93a 	bl	8008670 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 80023fc:	2240      	movs	r2, #64	@ 0x40
 80023fe:	493f      	ldr	r1, [pc, #252]	@ (80024fc <main+0x17c>)
 8002400:	483d      	ldr	r0, [pc, #244]	@ (80024f8 <main+0x178>)
 8002402:	f006 f8e9 	bl	80085d8 <HAL_UART_Receive_DMA>

  HAL_Delay(100);
 8002406:	2064      	movs	r0, #100	@ 0x64
 8002408:	f000 fffe 	bl	8003408 <HAL_Delay>
    HAL_UART_Abort(&hlpuart1);
 800240c:	483c      	ldr	r0, [pc, #240]	@ (8002500 <main+0x180>)
 800240e:	f006 f92f 	bl	8008670 <HAL_UART_Abort>
    HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 8002412:	2208      	movs	r2, #8
 8002414:	493b      	ldr	r1, [pc, #236]	@ (8002504 <main+0x184>)
 8002416:	483a      	ldr	r0, [pc, #232]	@ (8002500 <main+0x180>)
 8002418:	f006 f8de 	bl	80085d8 <HAL_UART_Receive_DMA>




  f_mount(&fs, "", 0);
 800241c:	2200      	movs	r2, #0
 800241e:	493a      	ldr	r1, [pc, #232]	@ (8002508 <main+0x188>)
 8002420:	483a      	ldr	r0, [pc, #232]	@ (800250c <main+0x18c>)
 8002422:	f009 fbaf 	bl	800bb84 <f_mount>
//  f_close(&fil);
//  /* Unmount SDCARD */
//  f_mount(NULL, "", 1);


  int indexboucle=0;
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
  int tarvosen=0;
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
  f_open(&fil, "adc.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800242e:	2213      	movs	r2, #19
 8002430:	4937      	ldr	r1, [pc, #220]	@ (8002510 <main+0x190>)
 8002432:	4838      	ldr	r0, [pc, #224]	@ (8002514 <main+0x194>)
 8002434:	f009 fbec 	bl	800bc10 <f_open>

  		   f_getfree("", &fre_clust, &pfs);
 8002438:	4a37      	ldr	r2, [pc, #220]	@ (8002518 <main+0x198>)
 800243a:	4938      	ldr	r1, [pc, #224]	@ (800251c <main+0x19c>)
 800243c:	4832      	ldr	r0, [pc, #200]	@ (8002508 <main+0x188>)
 800243e:	f009 ffbe 	bl	800c3be <f_getfree>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(indexboucle<=50){
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b32      	cmp	r3, #50	@ 0x32
 8002446:	dc23      	bgt.n	8002490 <main+0x110>





		  snprintf((uint8_t *) SD_Card_Write_Buffer,256,"adc1=%d,adc2=%d,adc3=%d,adc4=%d,adc5=%d\n\r",rawADCdata[0],rawADCdata[1],rawADCdata[2],rawADCdata[3],rawADCdata[4]);
 8002448:	4b25      	ldr	r3, [pc, #148]	@ (80024e0 <main+0x160>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	461c      	mov	r4, r3
 800244e:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <main+0x160>)
 8002450:	885b      	ldrh	r3, [r3, #2]
 8002452:	461a      	mov	r2, r3
 8002454:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <main+0x160>)
 8002456:	889b      	ldrh	r3, [r3, #4]
 8002458:	4619      	mov	r1, r3
 800245a:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <main+0x160>)
 800245c:	88db      	ldrh	r3, [r3, #6]
 800245e:	4618      	mov	r0, r3
 8002460:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <main+0x160>)
 8002462:	891b      	ldrh	r3, [r3, #8]
 8002464:	9303      	str	r3, [sp, #12]
 8002466:	9002      	str	r0, [sp, #8]
 8002468:	9101      	str	r1, [sp, #4]
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	4623      	mov	r3, r4
 800246e:	4a2c      	ldr	r2, [pc, #176]	@ (8002520 <main+0x1a0>)
 8002470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002474:	482b      	ldr	r0, [pc, #172]	@ (8002524 <main+0x1a4>)
 8002476:	f00b ffb7 	bl	800e3e8 <sniprintf>
		   f_puts((uint8_t *) SD_Card_Write_Buffer, &fil);
 800247a:	4926      	ldr	r1, [pc, #152]	@ (8002514 <main+0x194>)
 800247c:	4829      	ldr	r0, [pc, #164]	@ (8002524 <main+0x1a4>)
 800247e:	f00a f8ca 	bl	800c616 <f_puts>


		  indexboucle++;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3301      	adds	r3, #1
 8002486:	607b      	str	r3, [r7, #4]
		  HAL_Delay(100);
 8002488:	2064      	movs	r0, #100	@ 0x64
 800248a:	f000 ffbd 	bl	8003408 <HAL_Delay>
 800248e:	e018      	b.n	80024c2 <main+0x142>
	  }
	  else{


		  if(indexboucle<=51){
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b33      	cmp	r3, #51	@ 0x33
 8002494:	dc0c      	bgt.n	80024b0 <main+0x130>
			  f_close(&fil);
 8002496:	481f      	ldr	r0, [pc, #124]	@ (8002514 <main+0x194>)
 8002498:	f009 ff67 	bl	800c36a <f_close>
		  f_mount(NULL, "", 1);
 800249c:	2201      	movs	r2, #1
 800249e:	491a      	ldr	r1, [pc, #104]	@ (8002508 <main+0x188>)
 80024a0:	2000      	movs	r0, #0
 80024a2:	f009 fb6f 	bl	800bb84 <f_mount>
		  indexboucle++;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3301      	adds	r3, #1
 80024aa:	607b      	str	r3, [r7, #4]
		  tarvosen=1;
 80024ac:	2301      	movs	r3, #1
 80024ae:	603b      	str	r3, [r7, #0]

		  }

		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80024b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024b4:	480f      	ldr	r0, [pc, #60]	@ (80024f4 <main+0x174>)
 80024b6:	f002 ffef 	bl	8005498 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80024ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024be:	f000 ffa3 	bl	8003408 <HAL_Delay>



	  }

	  if(tarvosen==1){
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d1bc      	bne.n	8002442 <main+0xc2>

		  HAL_UART_Transmit(&hlpuart1,"caca",sizeof("caca"),100);
 80024c8:	2364      	movs	r3, #100	@ 0x64
 80024ca:	2205      	movs	r2, #5
 80024cc:	4916      	ldr	r1, [pc, #88]	@ (8002528 <main+0x1a8>)
 80024ce:	480c      	ldr	r0, [pc, #48]	@ (8002500 <main+0x180>)
 80024d0:	f005 fff4 	bl	80084bc <HAL_UART_Transmit>
		  HAL_Delay(1000);
 80024d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024d8:	f000 ff96 	bl	8003408 <HAL_Delay>
	  if(indexboucle<=50){
 80024dc:	e7b1      	b.n	8002442 <main+0xc2>
 80024de:	bf00      	nop
 80024e0:	20000cc4 	.word	0x20000cc4
 80024e4:	20000210 	.word	0x20000210
 80024e8:	20000ccc 	.word	0x20000ccc
 80024ec:	2000027c 	.word	0x2000027c
 80024f0:	20000da0 	.word	0x20000da0
 80024f4:	48000400 	.word	0x48000400
 80024f8:	20000e80 	.word	0x20000e80
 80024fc:	20000b74 	.word	0x20000b74
 8002500:	20000dec 	.word	0x20000dec
 8002504:	2000096c 	.word	0x2000096c
 8002508:	08010e68 	.word	0x08010e68
 800250c:	20000404 	.word	0x20000404
 8002510:	08010e6c 	.word	0x08010e6c
 8002514:	20000638 	.word	0x20000638
 8002518:	20000634 	.word	0x20000634
 800251c:	20000868 	.word	0x20000868
 8002520:	08010e74 	.word	0x08010e74
 8002524:	20000bb4 	.word	0x20000bb4
 8002528:	08010ea0 	.word	0x08010ea0

0800252c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b094      	sub	sp, #80	@ 0x50
 8002530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002532:	f107 0318 	add.w	r3, r7, #24
 8002536:	2238      	movs	r2, #56	@ 0x38
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f00b ffeb 	bl	800e516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800254e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002552:	f003 fa09 	bl	8005968 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8002556:	2323      	movs	r3, #35	@ 0x23
 8002558:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800255a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800255e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002566:	2340      	movs	r3, #64	@ 0x40
 8002568:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800256a:	2301      	movs	r3, #1
 800256c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800256e:	2302      	movs	r3, #2
 8002570:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002572:	2303      	movs	r3, #3
 8002574:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002576:	2301      	movs	r3, #1
 8002578:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800257a:	2308      	movs	r3, #8
 800257c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800257e:	2302      	movs	r3, #2
 8002580:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002582:	2302      	movs	r3, #2
 8002584:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002586:	2302      	movs	r3, #2
 8002588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800258a:	f107 0318 	add.w	r3, r7, #24
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fa9e 	bl	8005ad0 <HAL_RCC_OscConfig>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800259a:	f000 f818 	bl	80025ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800259e:	230f      	movs	r3, #15
 80025a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a2:	2303      	movs	r3, #3
 80025a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2102      	movs	r1, #2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fd9c 	bl	80060f4 <HAL_RCC_ClockConfig>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025c2:	f000 f804 	bl	80025ce <Error_Handler>
  }
}
 80025c6:	bf00      	nop
 80025c8:	3750      	adds	r7, #80	@ 0x50
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d2:	b672      	cpsid	i
}
 80025d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d6:	bf00      	nop
 80025d8:	e7fd      	b.n	80025d6 <Error_Handler+0x8>
	...

080025dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <MX_SPI1_Init+0x74>)
 80025e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <MX_SPI1_Init+0x78>)
 80025e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <MX_SPI1_Init+0x74>)
 80025e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ee:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <MX_SPI1_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <MX_SPI1_Init+0x74>)
 80025f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80025fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025fc:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <MX_SPI1_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002602:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <MX_SPI1_Init+0x74>)
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002608:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <MX_SPI1_Init+0x74>)
 800260a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800260e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <MX_SPI1_Init+0x74>)
 8002612:	2210      	movs	r2, #16
 8002614:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002616:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <MX_SPI1_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800261c:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <MX_SPI1_Init+0x74>)
 800261e:	2200      	movs	r2, #0
 8002620:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <MX_SPI1_Init+0x74>)
 8002624:	2200      	movs	r2, #0
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002628:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <MX_SPI1_Init+0x74>)
 800262a:	2207      	movs	r2, #7
 800262c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <MX_SPI1_Init+0x74>)
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <MX_SPI1_Init+0x74>)
 8002636:	2208      	movs	r2, #8
 8002638:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	@ (8002650 <MX_SPI1_Init+0x74>)
 800263c:	f004 f962 	bl	8006904 <HAL_SPI_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002646:	f7ff ffc2 	bl	80025ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000ce8 	.word	0x20000ce8
 8002654:	40013000 	.word	0x40013000

08002658 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	@ 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a17      	ldr	r2, [pc, #92]	@ (80026d4 <HAL_SPI_MspInit+0x7c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d128      	bne.n	80026cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800267a:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 800267c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267e:	4a16      	ldr	r2, [pc, #88]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 8002680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002684:	6613      	str	r3, [r2, #96]	@ 0x60
 8002686:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 8002688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	4a10      	ldr	r2, [pc, #64]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <HAL_SPI_MspInit+0x80>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026aa:	23e0      	movs	r3, #224	@ 0xe0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ba:	2305      	movs	r3, #5
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c8:	f002 fd4c 	bl	8005164 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80026cc:	bf00      	nop
 80026ce:	3728      	adds	r7, #40	@ 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40013000 	.word	0x40013000
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <HAL_MspInit+0x44>)
 80026e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002720 <HAL_MspInit+0x44>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <HAL_MspInit+0x44>)
 80026f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_MspInit+0x44>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	4a08      	ldr	r2, [pc, #32]	@ (8002720 <HAL_MspInit+0x44>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6593      	str	r3, [r2, #88]	@ 0x58
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_MspInit+0x44>)
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002712:	f003 f9cd 	bl	8005ab0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000

08002724 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002728:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <SDTimer_Handler+0x40>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <SDTimer_Handler+0x1c>
    Timer1--;
 8002732:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <SDTimer_Handler+0x40>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <SDTimer_Handler+0x40>)
 800273e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002740:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <SDTimer_Handler+0x44>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <SDTimer_Handler+0x34>
    Timer2--;
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <SDTimer_Handler+0x44>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <SDTimer_Handler+0x44>)
 8002756:	701a      	strb	r2, [r3, #0]
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200003ac 	.word	0x200003ac
 8002768:	200003ad 	.word	0x200003ad

0800276c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <NMI_Handler+0x4>

08002774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <HardFault_Handler+0x4>

0800277c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <MemManage_Handler+0x4>

08002784 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <BusFault_Handler+0x4>

0800278c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <UsageFault_Handler+0x4>

08002794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 80027c4:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <SysTick_Handler+0x30>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <SysTick_Handler+0x30>)
 80027d0:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80027d2:	4b07      	ldr	r3, [pc, #28]	@ (80027f0 <SysTick_Handler+0x30>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b09      	cmp	r3, #9
 80027da:	d904      	bls.n	80027e6 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80027dc:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <SysTick_Handler+0x30>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80027e2:	f7ff ff9f 	bl	8002724 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e6:	f000 fdf1 	bl	80033cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000d4c 	.word	0x20000d4c

080027f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80027f8:	2002      	movs	r0, #2
 80027fa:	f002 fe67 	bl	80054cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}

08002802 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002806:	2004      	movs	r0, #4
 8002808:	f002 fe60 	bl	80054cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}

08002810 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <DMA1_Channel1_IRQHandler+0x10>)
 8002816:	f002 fb4a 	bl	8004eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000f14 	.word	0x20000f14

08002824 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002828:	4802      	ldr	r0, [pc, #8]	@ (8002834 <DMA1_Channel2_IRQHandler+0x10>)
 800282a:	f002 fb40 	bl	8004eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000f74 	.word	0x20000f74

08002838 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <DMA1_Channel3_IRQHandler+0x10>)
 800283e:	f002 fb36 	bl	8004eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200002e8 	.word	0x200002e8

0800284c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <DMA1_Channel4_IRQHandler+0x10>)
 8002852:	f002 fb2c 	bl	8004eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000fd4 	.word	0x20000fd4

08002860 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <DMA1_Channel5_IRQHandler+0x10>)
 8002866:	f002 fb22 	bl	8004eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000348 	.word	0x20000348

08002874 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <USART1_IRQHandler+0x10>)
 800287a:	f006 f807 	bl	800888c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000e80 	.word	0x20000e80

08002888 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <LPUART1_IRQHandler+0x10>)
 800288e:	f005 fffd 	bl	800888c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000dec 	.word	0x20000dec

0800289c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return 1;
 80028a0:	2301      	movs	r3, #1
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_kill>:

int _kill(int pid, int sig)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028b6:	f00b fea3 	bl	800e600 <__errno>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2216      	movs	r2, #22
 80028be:	601a      	str	r2, [r3, #0]
  return -1;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_exit>:

void _exit (int status)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ffe7 	bl	80028ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80028de:	bf00      	nop
 80028e0:	e7fd      	b.n	80028de <_exit+0x12>

080028e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e00a      	b.n	800290a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028f4:	f3af 8000 	nop.w
 80028f8:	4601      	mov	r1, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	60ba      	str	r2, [r7, #8]
 8002900:	b2ca      	uxtb	r2, r1
 8002902:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3301      	adds	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	429a      	cmp	r2, r3
 8002910:	dbf0      	blt.n	80028f4 <_read+0x12>
  }

  return len;
 8002912:	687b      	ldr	r3, [r7, #4]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	e009      	b.n	8002942 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	60ba      	str	r2, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3301      	adds	r3, #1
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	dbf1      	blt.n	800292e <_write+0x12>
  }
  return len;
 800294a:	687b      	ldr	r3, [r7, #4]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <_close>:

int _close(int file)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800297c:	605a      	str	r2, [r3, #4]
  return 0;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_isatty>:

int _isatty(int file)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002994:	2301      	movs	r3, #1
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c4:	4a14      	ldr	r2, [pc, #80]	@ (8002a18 <_sbrk+0x5c>)
 80029c6:	4b15      	ldr	r3, [pc, #84]	@ (8002a1c <_sbrk+0x60>)
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d0:	4b13      	ldr	r3, [pc, #76]	@ (8002a20 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <_sbrk+0x64>)
 80029da:	4a12      	ldr	r2, [pc, #72]	@ (8002a24 <_sbrk+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d207      	bcs.n	80029fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029ec:	f00b fe08 	bl	800e600 <__errno>
 80029f0:	4603      	mov	r3, r0
 80029f2:	220c      	movs	r2, #12
 80029f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	e009      	b.n	8002a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029fc:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a02:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <_sbrk+0x64>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a05      	ldr	r2, [pc, #20]	@ (8002a20 <_sbrk+0x64>)
 8002a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20008000 	.word	0x20008000
 8002a1c:	00000400 	.word	0x00000400
 8002a20:	20000d50 	.word	0x20000d50
 8002a24:	200014a0 	.word	0x200014a0

08002a28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <SystemInit+0x20>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	4a05      	ldr	r2, [pc, #20]	@ (8002a48 <SystemInit+0x20>)
 8002a34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08e      	sub	sp, #56	@ 0x38
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
 8002a78:	611a      	str	r2, [r3, #16]
 8002a7a:	615a      	str	r2, [r3, #20]
 8002a7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002a80:	4a2d      	ldr	r2, [pc, #180]	@ (8002b38 <MX_TIM3_Init+0xec>)
 8002a82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a84:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a90:	4b28      	ldr	r3, [pc, #160]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002a92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a98:	4b26      	ldr	r3, [pc, #152]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a9e:	4b25      	ldr	r3, [pc, #148]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002aa4:	4823      	ldr	r0, [pc, #140]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002aa6:	f004 fcdf 	bl	8007468 <HAL_TIM_Base_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002ab0:	f7ff fd8d 	bl	80025ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002aba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	481c      	ldr	r0, [pc, #112]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002ac2:	f004 ff01 	bl	80078c8 <HAL_TIM_ConfigClockSource>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002acc:	f7ff fd7f 	bl	80025ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ad0:	4818      	ldr	r0, [pc, #96]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002ad2:	f004 fd83 	bl	80075dc <HAL_TIM_PWM_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002adc:	f7ff fd77 	bl	80025ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	4619      	mov	r1, r3
 8002aee:	4811      	ldr	r0, [pc, #68]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002af0:	f005 fc12 	bl	8008318 <HAL_TIMEx_MasterConfigSynchronization>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002afa:	f7ff fd68 	bl	80025ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002afe:	2360      	movs	r3, #96	@ 0x60
 8002b00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b0e:	463b      	mov	r3, r7
 8002b10:	2200      	movs	r2, #0
 8002b12:	4619      	mov	r1, r3
 8002b14:	4807      	ldr	r0, [pc, #28]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002b16:	f004 fdc3 	bl	80076a0 <HAL_TIM_PWM_ConfigChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002b20:	f7ff fd55 	bl	80025ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b24:	4803      	ldr	r0, [pc, #12]	@ (8002b34 <MX_TIM3_Init+0xe8>)
 8002b26:	f000 f88b 	bl	8002c40 <HAL_TIM_MspPostInit>

}
 8002b2a:	bf00      	nop
 8002b2c:	3738      	adds	r7, #56	@ 0x38
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000d54 	.word	0x20000d54
 8002b38:	40000400 	.word	0x40000400

08002b3c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd0 <MX_TIM4_Init+0x94>)
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <MX_TIM4_Init+0x98>)
 8002b5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000-1;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <MX_TIM4_Init+0x94>)
 8002b62:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8002b66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <MX_TIM4_Init+0x94>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002b6e:	4b18      	ldr	r3, [pc, #96]	@ (8002bd0 <MX_TIM4_Init+0x94>)
 8002b70:	2263      	movs	r2, #99	@ 0x63
 8002b72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b74:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <MX_TIM4_Init+0x94>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7a:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <MX_TIM4_Init+0x94>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b80:	4813      	ldr	r0, [pc, #76]	@ (8002bd0 <MX_TIM4_Init+0x94>)
 8002b82:	f004 fc71 	bl	8007468 <HAL_TIM_Base_Init>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b8c:	f7ff fd1f 	bl	80025ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b96:	f107 0310 	add.w	r3, r7, #16
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	480c      	ldr	r0, [pc, #48]	@ (8002bd0 <MX_TIM4_Init+0x94>)
 8002b9e:	f004 fe93 	bl	80078c8 <HAL_TIM_ConfigClockSource>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002ba8:	f7ff fd11 	bl	80025ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002bac:	2320      	movs	r3, #32
 8002bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4805      	ldr	r0, [pc, #20]	@ (8002bd0 <MX_TIM4_Init+0x94>)
 8002bba:	f005 fbad 	bl	8008318 <HAL_TIMEx_MasterConfigSynchronization>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002bc4:	f7ff fd03 	bl	80025ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bc8:	bf00      	nop
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000da0 	.word	0x20000da0
 8002bd4:	40000800 	.word	0x40000800

08002bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a13      	ldr	r2, [pc, #76]	@ (8002c34 <HAL_TIM_Base_MspInit+0x5c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d10c      	bne.n	8002c04 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bea:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <HAL_TIM_Base_MspInit+0x60>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bee:	4a12      	ldr	r2, [pc, #72]	@ (8002c38 <HAL_TIM_Base_MspInit+0x60>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_TIM_Base_MspInit+0x60>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c02:	e010      	b.n	8002c26 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0c      	ldr	r2, [pc, #48]	@ (8002c3c <HAL_TIM_Base_MspInit+0x64>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10b      	bne.n	8002c26 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_TIM_Base_MspInit+0x60>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c12:	4a09      	ldr	r2, [pc, #36]	@ (8002c38 <HAL_TIM_Base_MspInit+0x60>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c1a:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <HAL_TIM_Base_MspInit+0x60>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40000800 	.word	0x40000800

08002c40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 030c 	add.w	r3, r7, #12
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_TIM_MspPostInit+0x64>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d11b      	bne.n	8002c9a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_TIM_MspPostInit+0x68>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c66:	4a10      	ldr	r2, [pc, #64]	@ (8002ca8 <HAL_TIM_MspPostInit+0x68>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <HAL_TIM_MspPostInit+0x68>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c7a:	2340      	movs	r3, #64	@ 0x40
 8002c7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	4619      	mov	r1, r3
 8002c94:	4805      	ldr	r0, [pc, #20]	@ (8002cac <HAL_TIM_MspPostInit+0x6c>)
 8002c96:	f002 fa65 	bl	8005164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3720      	adds	r7, #32
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48000800 	.word	0x48000800

08002cb0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cb4:	4b21      	ldr	r3, [pc, #132]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002cb6:	4a22      	ldr	r2, [pc, #136]	@ (8002d40 <MX_LPUART1_UART_Init+0x90>)
 8002cb8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002cba:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cc0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b18      	ldr	r3, [pc, #96]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ce0:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cec:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002cf2:	4812      	ldr	r0, [pc, #72]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002cf4:	f005 fb92 	bl	800841c <HAL_UART_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cfe:	f7ff fc66 	bl	80025ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d02:	2100      	movs	r1, #0
 8002d04:	480d      	ldr	r0, [pc, #52]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002d06:	f007 f889 	bl	8009e1c <HAL_UARTEx_SetTxFifoThreshold>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002d10:	f7ff fc5d 	bl	80025ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d14:	2100      	movs	r1, #0
 8002d16:	4809      	ldr	r0, [pc, #36]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002d18:	f007 f8be 	bl	8009e98 <HAL_UARTEx_SetRxFifoThreshold>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002d22:	f7ff fc54 	bl	80025ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d26:	4805      	ldr	r0, [pc, #20]	@ (8002d3c <MX_LPUART1_UART_Init+0x8c>)
 8002d28:	f007 f83f 	bl	8009daa <HAL_UARTEx_DisableFifoMode>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002d32:	f7ff fc4c 	bl	80025ce <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000dec 	.word	0x20000dec
 8002d40:	40008000 	.word	0x40008000

08002d44 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d48:	4b22      	ldr	r3, [pc, #136]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d4a:	4a23      	ldr	r2, [pc, #140]	@ (8002dd8 <MX_USART1_UART_Init+0x94>)
 8002d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d56:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d62:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d68:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6e:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d74:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d7a:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d80:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d86:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d8c:	4811      	ldr	r0, [pc, #68]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002d8e:	f005 fb45 	bl	800841c <HAL_UART_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d98:	f7ff fc19 	bl	80025ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	480d      	ldr	r0, [pc, #52]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002da0:	f007 f83c 	bl	8009e1c <HAL_UARTEx_SetTxFifoThreshold>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002daa:	f7ff fc10 	bl	80025ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dae:	2100      	movs	r1, #0
 8002db0:	4808      	ldr	r0, [pc, #32]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002db2:	f007 f871 	bl	8009e98 <HAL_UARTEx_SetRxFifoThreshold>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002dbc:	f7ff fc07 	bl	80025ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002dc0:	4804      	ldr	r0, [pc, #16]	@ (8002dd4 <MX_USART1_UART_Init+0x90>)
 8002dc2:	f006 fff2 	bl	8009daa <HAL_UARTEx_DisableFifoMode>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002dcc:	f7ff fbff 	bl	80025ce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000e80 	.word	0x20000e80
 8002dd8:	40013800 	.word	0x40013800

08002ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b09e      	sub	sp, #120	@ 0x78
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002df4:	f107 0320 	add.w	r3, r7, #32
 8002df8:	2244      	movs	r2, #68	@ 0x44
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f00b fb8a 	bl	800e516 <memset>
  if(uartHandle->Instance==LPUART1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a92      	ldr	r2, [pc, #584]	@ (8003050 <HAL_UART_MspInit+0x274>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	f040 80b0 	bne.w	8002f6e <HAL_UART_MspInit+0x192>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e12:	2300      	movs	r3, #0
 8002e14:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e16:	f107 0320 	add.w	r3, r7, #32
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fb82 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e26:	f7ff fbd2 	bl	80025ce <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e2a:	4b8a      	ldr	r3, [pc, #552]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	4a89      	ldr	r2, [pc, #548]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002e36:	4b87      	ldr	r3, [pc, #540]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e42:	4b84      	ldr	r3, [pc, #528]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e46:	4a83      	ldr	r2, [pc, #524]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e4e:	4b81      	ldr	r3, [pc, #516]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	4b7e      	ldr	r3, [pc, #504]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	4a7d      	ldr	r2, [pc, #500]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e66:	4b7b      	ldr	r3, [pc, #492]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e72:	2308      	movs	r3, #8
 8002e74:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002e82:	230c      	movs	r3, #12
 8002e84:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e90:	f002 f968 	bl	8005164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e98:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eaa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4869      	ldr	r0, [pc, #420]	@ (8003058 <HAL_UART_MspInit+0x27c>)
 8002eb2:	f002 f957 	bl	8005164 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002eb6:	4b69      	ldr	r3, [pc, #420]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002eb8:	4a69      	ldr	r2, [pc, #420]	@ (8003060 <HAL_UART_MspInit+0x284>)
 8002eba:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002ebc:	4b67      	ldr	r3, [pc, #412]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002ebe:	2222      	movs	r2, #34	@ 0x22
 8002ec0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ec2:	4b66      	ldr	r3, [pc, #408]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ec8:	4b64      	ldr	r3, [pc, #400]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ece:	4b63      	ldr	r3, [pc, #396]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002ed0:	2280      	movs	r2, #128	@ 0x80
 8002ed2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ed4:	4b61      	ldr	r3, [pc, #388]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eda:	4b60      	ldr	r3, [pc, #384]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002ee0:	4b5e      	ldr	r3, [pc, #376]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002eec:	485b      	ldr	r0, [pc, #364]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002eee:	f001 fdfb 	bl	8004ae8 <HAL_DMA_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8002ef8:	f7ff fb69 	bl	80025ce <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a57      	ldr	r2, [pc, #348]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002f00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002f04:	4a55      	ldr	r2, [pc, #340]	@ (800305c <HAL_UART_MspInit+0x280>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002f0a:	4b56      	ldr	r3, [pc, #344]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f0c:	4a56      	ldr	r2, [pc, #344]	@ (8003068 <HAL_UART_MspInit+0x28c>)
 8002f0e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002f10:	4b54      	ldr	r3, [pc, #336]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f12:	2223      	movs	r2, #35	@ 0x23
 8002f14:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f16:	4b53      	ldr	r3, [pc, #332]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f18:	2210      	movs	r2, #16
 8002f1a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1c:	4b51      	ldr	r3, [pc, #324]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f22:	4b50      	ldr	r3, [pc, #320]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f24:	2280      	movs	r2, #128	@ 0x80
 8002f26:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f28:	4b4e      	ldr	r3, [pc, #312]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f2e:	4b4d      	ldr	r3, [pc, #308]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002f34:	4b4b      	ldr	r3, [pc, #300]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002f40:	4848      	ldr	r0, [pc, #288]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f42:	f001 fdd1 	bl	8004ae8 <HAL_DMA_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 8002f4c:	f7ff fb3f 	bl	80025ce <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a44      	ldr	r2, [pc, #272]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f54:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f56:	4a43      	ldr	r2, [pc, #268]	@ (8003064 <HAL_UART_MspInit+0x288>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	205b      	movs	r0, #91	@ 0x5b
 8002f62:	f001 fd8c 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002f66:	205b      	movs	r0, #91	@ 0x5b
 8002f68:	f001 fda3 	bl	8004ab2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f6c:	e06c      	b.n	8003048 <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a3e      	ldr	r2, [pc, #248]	@ (800306c <HAL_UART_MspInit+0x290>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d167      	bne.n	8003048 <HAL_UART_MspInit+0x26c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f80:	f107 0320 	add.w	r3, r7, #32
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 facd 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002f90:	f7ff fb1d 	bl	80025ce <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f94:	4b2f      	ldr	r3, [pc, #188]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f98:	4a2e      	ldr	r2, [pc, #184]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002f9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fac:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb0:	4a28      	ldr	r2, [pc, #160]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fb8:	4b26      	ldr	r3, [pc, #152]	@ (8003054 <HAL_UART_MspInit+0x278>)
 8002fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fc4:	23c0      	movs	r3, #192	@ 0xc0
 8002fc6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fd4:	2307      	movs	r3, #7
 8002fd6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fdc:	4619      	mov	r1, r3
 8002fde:	481e      	ldr	r0, [pc, #120]	@ (8003058 <HAL_UART_MspInit+0x27c>)
 8002fe0:	f002 f8c0 	bl	8005164 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8002fe4:	4b22      	ldr	r3, [pc, #136]	@ (8003070 <HAL_UART_MspInit+0x294>)
 8002fe6:	4a23      	ldr	r2, [pc, #140]	@ (8003074 <HAL_UART_MspInit+0x298>)
 8002fe8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002fea:	4b21      	ldr	r3, [pc, #132]	@ (8003070 <HAL_UART_MspInit+0x294>)
 8002fec:	2218      	movs	r2, #24
 8002fee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8003070 <HAL_UART_MspInit+0x294>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <HAL_UART_MspInit+0x294>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8003070 <HAL_UART_MspInit+0x294>)
 8002ffe:	2280      	movs	r2, #128	@ 0x80
 8003000:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003002:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <HAL_UART_MspInit+0x294>)
 8003004:	2200      	movs	r2, #0
 8003006:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <HAL_UART_MspInit+0x294>)
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800300e:	4b18      	ldr	r3, [pc, #96]	@ (8003070 <HAL_UART_MspInit+0x294>)
 8003010:	2220      	movs	r2, #32
 8003012:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003014:	4b16      	ldr	r3, [pc, #88]	@ (8003070 <HAL_UART_MspInit+0x294>)
 8003016:	2200      	movs	r2, #0
 8003018:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800301a:	4815      	ldr	r0, [pc, #84]	@ (8003070 <HAL_UART_MspInit+0x294>)
 800301c:	f001 fd64 	bl	8004ae8 <HAL_DMA_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8003026:	f7ff fad2 	bl	80025ce <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a10      	ldr	r2, [pc, #64]	@ (8003070 <HAL_UART_MspInit+0x294>)
 800302e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003032:	4a0f      	ldr	r2, [pc, #60]	@ (8003070 <HAL_UART_MspInit+0x294>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003038:	2200      	movs	r2, #0
 800303a:	2100      	movs	r1, #0
 800303c:	2025      	movs	r0, #37	@ 0x25
 800303e:	f001 fd1e 	bl	8004a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003042:	2025      	movs	r0, #37	@ 0x25
 8003044:	f001 fd35 	bl	8004ab2 <HAL_NVIC_EnableIRQ>
}
 8003048:	bf00      	nop
 800304a:	3778      	adds	r7, #120	@ 0x78
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40008000 	.word	0x40008000
 8003054:	40021000 	.word	0x40021000
 8003058:	48000400 	.word	0x48000400
 800305c:	20000f14 	.word	0x20000f14
 8003060:	40020008 	.word	0x40020008
 8003064:	20000f74 	.word	0x20000f74
 8003068:	4002001c 	.word	0x4002001c
 800306c:	40013800 	.word	0x40013800
 8003070:	20000fd4 	.word	0x20000fd4
 8003074:	40020044 	.word	0x40020044

08003078 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a57      	ldr	r2, [pc, #348]	@ (80031e4 <HAL_UART_RxCpltCallback+0x16c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d15b      	bne.n	8003142 <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 800308a:	4b57      	ldr	r3, [pc, #348]	@ (80031e8 <HAL_UART_RxCpltCallback+0x170>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a57      	ldr	r2, [pc, #348]	@ (80031ec <HAL_UART_RxCpltCallback+0x174>)
 8003090:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8003092:	4b56      	ldr	r3, [pc, #344]	@ (80031ec <HAL_UART_RxCpltCallback+0x174>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800309a:	dd22      	ble.n	80030e2 <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 800309c:	4b53      	ldr	r3, [pc, #332]	@ (80031ec <HAL_UART_RxCpltCallback+0x174>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80030a6:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 80030a8:	4b50      	ldr	r3, [pc, #320]	@ (80031ec <HAL_UART_RxCpltCallback+0x174>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b50      	ldr	r3, [pc, #320]	@ (80031f0 <HAL_UART_RxCpltCallback+0x178>)
 80030b0:	4413      	add	r3, r2
 80030b2:	89fa      	ldrh	r2, [r7, #14]
 80030b4:	494f      	ldr	r1, [pc, #316]	@ (80031f4 <HAL_UART_RxCpltCallback+0x17c>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	f00b facf 	bl	800e65a <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 80030bc:	4b4b      	ldr	r3, [pc, #300]	@ (80031ec <HAL_UART_RxCpltCallback+0x174>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 80030c2:	89fb      	ldrh	r3, [r7, #14]
 80030c4:	4a4b      	ldr	r2, [pc, #300]	@ (80031f4 <HAL_UART_RxCpltCallback+0x17c>)
 80030c6:	1899      	adds	r1, r3, r2
 80030c8:	89fb      	ldrh	r3, [r7, #14]
 80030ca:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80030ce:	461a      	mov	r2, r3
 80030d0:	4847      	ldr	r0, [pc, #284]	@ (80031f0 <HAL_UART_RxCpltCallback+0x178>)
 80030d2:	f00b fac2 	bl	800e65a <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 80030d6:	89fb      	ldrh	r3, [r7, #14]
 80030d8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80030dc:	4a42      	ldr	r2, [pc, #264]	@ (80031e8 <HAL_UART_RxCpltCallback+0x170>)
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e01d      	b.n	800311e <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 80030e2:	4b42      	ldr	r3, [pc, #264]	@ (80031ec <HAL_UART_RxCpltCallback+0x174>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_UART_RxCpltCallback+0x178>)
 80030ea:	441a      	add	r2, r3
 80030ec:	4b41      	ldr	r3, [pc, #260]	@ (80031f4 <HAL_UART_RxCpltCallback+0x17c>)
 80030ee:	4610      	mov	r0, r2
 80030f0:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80030f4:	4602      	mov	r2, r0
 80030f6:	4619      	mov	r1, r3
 80030f8:	f8d1 c000 	ldr.w	ip, [r1]
 80030fc:	684e      	ldr	r6, [r1, #4]
 80030fe:	688d      	ldr	r5, [r1, #8]
 8003100:	68c9      	ldr	r1, [r1, #12]
 8003102:	f8c2 c000 	str.w	ip, [r2]
 8003106:	6056      	str	r6, [r2, #4]
 8003108:	6095      	str	r5, [r2, #8]
 800310a:	60d1      	str	r1, [r2, #12]
 800310c:	3310      	adds	r3, #16
 800310e:	3010      	adds	r0, #16
 8003110:	42a3      	cmp	r3, r4
 8003112:	d1ef      	bne.n	80030f4 <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 8003114:	4b35      	ldr	r3, [pc, #212]	@ (80031ec <HAL_UART_RxCpltCallback+0x174>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3340      	adds	r3, #64	@ 0x40
 800311a:	4a33      	ldr	r2, [pc, #204]	@ (80031e8 <HAL_UART_RxCpltCallback+0x170>)
 800311c:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 800311e:	2240      	movs	r2, #64	@ 0x40
 8003120:	4934      	ldr	r1, [pc, #208]	@ (80031f4 <HAL_UART_RxCpltCallback+0x17c>)
 8003122:	4835      	ldr	r0, [pc, #212]	@ (80031f8 <HAL_UART_RxCpltCallback+0x180>)
 8003124:	f005 fa58 	bl	80085d8 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003128:	4b34      	ldr	r3, [pc, #208]	@ (80031fc <HAL_UART_RxCpltCallback+0x184>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b33      	ldr	r3, [pc, #204]	@ (80031fc <HAL_UART_RxCpltCallback+0x184>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0204 	bic.w	r2, r2, #4
 8003136:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 8003138:	2240      	movs	r2, #64	@ 0x40
 800313a:	492e      	ldr	r1, [pc, #184]	@ (80031f4 <HAL_UART_RxCpltCallback+0x17c>)
 800313c:	482e      	ldr	r0, [pc, #184]	@ (80031f8 <HAL_UART_RxCpltCallback+0x180>)
 800313e:	f005 fa4b 	bl	80085d8 <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a2e      	ldr	r2, [pc, #184]	@ (8003200 <HAL_UART_RxCpltCallback+0x188>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d146      	bne.n	80031da <HAL_UART_RxCpltCallback+0x162>
		TarvosRXbufferoldpos = TarvosRXbuffernewpos; //keep track of the last position in the buffer
 800314c:	4b2d      	ldr	r3, [pc, #180]	@ (8003204 <HAL_UART_RxCpltCallback+0x18c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2d      	ldr	r2, [pc, #180]	@ (8003208 <HAL_UART_RxCpltCallback+0x190>)
 8003152:	6013      	str	r3, [r2, #0]
				if(TarvosRXbufferoldpos + TarvosRxTamponSize > TarvosRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8003154:	4b2c      	ldr	r3, [pc, #176]	@ (8003208 <HAL_UART_RxCpltCallback+0x190>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2bf8      	cmp	r3, #248	@ 0xf8
 800315a:	dd22      	ble.n	80031a2 <HAL_UART_RxCpltCallback+0x12a>

					uint16_t datatocopy = TarvosRxBufferSize-TarvosRXbufferoldpos;  // find out how much space is left in the main buffer
 800315c:	4b2a      	ldr	r3, [pc, #168]	@ (8003208 <HAL_UART_RxCpltCallback+0x190>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003166:	81bb      	strh	r3, [r7, #12]
					memcpy ((uint8_t *)tarvos_RX_Buffer+TarvosRXbufferoldpos,(uint8_t *) tarvos_RX_Tampon, datatocopy);  // copy data in that remaining space
 8003168:	4b27      	ldr	r3, [pc, #156]	@ (8003208 <HAL_UART_RxCpltCallback+0x190>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	4b27      	ldr	r3, [pc, #156]	@ (800320c <HAL_UART_RxCpltCallback+0x194>)
 8003170:	4413      	add	r3, r2
 8003172:	89ba      	ldrh	r2, [r7, #12]
 8003174:	4926      	ldr	r1, [pc, #152]	@ (8003210 <HAL_UART_RxCpltCallback+0x198>)
 8003176:	4618      	mov	r0, r3
 8003178:	f00b fa6f 	bl	800e65a <memcpy>

					TarvosRXbufferoldpos = 0;  // point to the start of the buffer
 800317c:	4b22      	ldr	r3, [pc, #136]	@ (8003208 <HAL_UART_RxCpltCallback+0x190>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
					memcpy ((uint8_t *)tarvos_RX_Buffer, (uint8_t *)tarvos_RX_Tampon+datatocopy, (TarvosRxTamponSize-datatocopy));  // copy the remaining data
 8003182:	89bb      	ldrh	r3, [r7, #12]
 8003184:	4a22      	ldr	r2, [pc, #136]	@ (8003210 <HAL_UART_RxCpltCallback+0x198>)
 8003186:	1899      	adds	r1, r3, r2
 8003188:	89bb      	ldrh	r3, [r7, #12]
 800318a:	f1c3 0308 	rsb	r3, r3, #8
 800318e:	461a      	mov	r2, r3
 8003190:	481e      	ldr	r0, [pc, #120]	@ (800320c <HAL_UART_RxCpltCallback+0x194>)
 8003192:	f00b fa62 	bl	800e65a <memcpy>
					TarvosRXbuffernewpos = (TarvosRxTamponSize-datatocopy);  // update the position
 8003196:	89bb      	ldrh	r3, [r7, #12]
 8003198:	f1c3 0308 	rsb	r3, r3, #8
 800319c:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_UART_RxCpltCallback+0x18c>)
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e00e      	b.n	80031c0 <HAL_UART_RxCpltCallback+0x148>
				}
				else{
					memcpy((uint8_t *)tarvos_RX_Buffer+TarvosRXbufferoldpos,(uint8_t *) tarvos_RX_Tampon, TarvosRxTamponSize); //copy received data to the buffer
 80031a2:	4b19      	ldr	r3, [pc, #100]	@ (8003208 <HAL_UART_RxCpltCallback+0x190>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b18      	ldr	r3, [pc, #96]	@ (800320c <HAL_UART_RxCpltCallback+0x194>)
 80031aa:	4413      	add	r3, r2
 80031ac:	4a18      	ldr	r2, [pc, #96]	@ (8003210 <HAL_UART_RxCpltCallback+0x198>)
 80031ae:	6811      	ldr	r1, [r2, #0]
 80031b0:	6852      	ldr	r2, [r2, #4]
 80031b2:	6019      	str	r1, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
					TarvosRXbuffernewpos = TarvosRxTamponSize+TarvosRXbufferoldpos; //update buffer position
 80031b6:	4b14      	ldr	r3, [pc, #80]	@ (8003208 <HAL_UART_RxCpltCallback+0x190>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3308      	adds	r3, #8
 80031bc:	4a11      	ldr	r2, [pc, #68]	@ (8003204 <HAL_UART_RxCpltCallback+0x18c>)
 80031be:	6013      	str	r3, [r2, #0]

				}
				HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);//on recoit par dma à nouveau 64 caractères
 80031c0:	2208      	movs	r2, #8
 80031c2:	4913      	ldr	r1, [pc, #76]	@ (8003210 <HAL_UART_RxCpltCallback+0x198>)
 80031c4:	4813      	ldr	r0, [pc, #76]	@ (8003214 <HAL_UART_RxCpltCallback+0x19c>)
 80031c6:	f005 fa07 	bl	80085d8 <HAL_UART_Receive_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <HAL_UART_RxCpltCallback+0x1a0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <HAL_UART_RxCpltCallback+0x1a0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0204 	bic.w	r2, r2, #4
 80031d8:	601a      	str	r2, [r3, #0]
				}

}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40013800 	.word	0x40013800
 80031e8:	20000cb8 	.word	0x20000cb8
 80031ec:	20000cb4 	.word	0x20000cb4
 80031f0:	20000974 	.word	0x20000974
 80031f4:	20000b74 	.word	0x20000b74
 80031f8:	20000e80 	.word	0x20000e80
 80031fc:	20000fd4 	.word	0x20000fd4
 8003200:	40008000 	.word	0x40008000
 8003204:	20000cc0 	.word	0x20000cc0
 8003208:	20000cbc 	.word	0x20000cbc
 800320c:	2000086c 	.word	0x2000086c
 8003210:	2000096c 	.word	0x2000096c
 8003214:	20000dec 	.word	0x20000dec
 8003218:	20000f14 	.word	0x20000f14

0800321c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003220:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <MX_USB_PCD_Init+0x48>)
 8003222:	4a11      	ldr	r2, [pc, #68]	@ (8003268 <MX_USB_PCD_Init+0x4c>)
 8003224:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003226:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <MX_USB_PCD_Init+0x48>)
 8003228:	2208      	movs	r2, #8
 800322a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800322c:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <MX_USB_PCD_Init+0x48>)
 800322e:	2202      	movs	r2, #2
 8003230:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003232:	4b0c      	ldr	r3, [pc, #48]	@ (8003264 <MX_USB_PCD_Init+0x48>)
 8003234:	2202      	movs	r2, #2
 8003236:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003238:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <MX_USB_PCD_Init+0x48>)
 800323a:	2200      	movs	r2, #0
 800323c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800323e:	4b09      	ldr	r3, [pc, #36]	@ (8003264 <MX_USB_PCD_Init+0x48>)
 8003240:	2200      	movs	r2, #0
 8003242:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003244:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <MX_USB_PCD_Init+0x48>)
 8003246:	2200      	movs	r2, #0
 8003248:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800324a:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <MX_USB_PCD_Init+0x48>)
 800324c:	2200      	movs	r2, #0
 800324e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003250:	4804      	ldr	r0, [pc, #16]	@ (8003264 <MX_USB_PCD_Init+0x48>)
 8003252:	f002 fa90 	bl	8005776 <HAL_PCD_Init>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800325c:	f7ff f9b7 	bl	80025ce <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20001034 	.word	0x20001034
 8003268:	40005c00 	.word	0x40005c00

0800326c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b094      	sub	sp, #80	@ 0x50
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	2244      	movs	r2, #68	@ 0x44
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f00b f94a 	bl	800e516 <memset>
  if(pcdHandle->Instance==USB)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a11      	ldr	r2, [pc, #68]	@ (80032cc <HAL_PCD_MspInit+0x60>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d11a      	bne.n	80032c2 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800328c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003290:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003292:	2300      	movs	r3, #0
 8003294:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	4618      	mov	r0, r3
 800329c:	f003 f942 	bl	8006524 <HAL_RCCEx_PeriphCLKConfig>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80032a6:	f7ff f992 	bl	80025ce <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <HAL_PCD_MspInit+0x64>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ae:	4a08      	ldr	r2, [pc, #32]	@ (80032d0 <HAL_PCD_MspInit+0x64>)
 80032b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b6:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <HAL_PCD_MspInit+0x64>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80032c2:	bf00      	nop
 80032c4:	3750      	adds	r7, #80	@ 0x50
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40005c00 	.word	0x40005c00
 80032d0:	40021000 	.word	0x40021000

080032d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032d4:	480d      	ldr	r0, [pc, #52]	@ (800330c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80032d8:	f7ff fba6 	bl	8002a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032dc:	480c      	ldr	r0, [pc, #48]	@ (8003310 <LoopForever+0x6>)
  ldr r1, =_edata
 80032de:	490d      	ldr	r1, [pc, #52]	@ (8003314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <LoopForever+0xe>)
  movs r3, #0
 80032e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80032e4:	e002      	b.n	80032ec <LoopCopyDataInit>

080032e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ea:	3304      	adds	r3, #4

080032ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f0:	d3f9      	bcc.n	80032e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f2:	4a0a      	ldr	r2, [pc, #40]	@ (800331c <LoopForever+0x12>)
  ldr r4, =_ebss
 80032f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003320 <LoopForever+0x16>)
  movs r3, #0
 80032f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f8:	e001      	b.n	80032fe <LoopFillZerobss>

080032fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032fc:	3204      	adds	r2, #4

080032fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003300:	d3fb      	bcc.n	80032fa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003302:	f00b f983 	bl	800e60c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003306:	f7ff f83b 	bl	8002380 <main>

0800330a <LoopForever>:

LoopForever:
    b LoopForever
 800330a:	e7fe      	b.n	800330a <LoopForever>
  ldr   r0, =_estack
 800330c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003314:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003318:	080113e4 	.word	0x080113e4
  ldr r2, =_sbss
 800331c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003320:	2000149c 	.word	0x2000149c

08003324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003324:	e7fe      	b.n	8003324 <ADC1_2_IRQHandler>

08003326 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003330:	2003      	movs	r0, #3
 8003332:	f001 fb99 	bl	8004a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003336:	200f      	movs	r0, #15
 8003338:	f000 f80e 	bl	8003358 <HAL_InitTick>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	71fb      	strb	r3, [r7, #7]
 8003346:	e001      	b.n	800334c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003348:	f7ff f9c8 	bl	80026dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800334c:	79fb      	ldrb	r3, [r7, #7]

}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003364:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <HAL_InitTick+0x68>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d022      	beq.n	80033b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800336c:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <HAL_InitTick+0x6c>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <HAL_InitTick+0x68>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003378:	fbb1 f3f3 	udiv	r3, r1, r3
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	4618      	mov	r0, r3
 8003382:	f001 fba4 	bl	8004ace <HAL_SYSTICK_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10f      	bne.n	80033ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b0f      	cmp	r3, #15
 8003390:	d809      	bhi.n	80033a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003392:	2200      	movs	r2, #0
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	f04f 30ff 	mov.w	r0, #4294967295
 800339a:	f001 fb70 	bl	8004a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800339e:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <HAL_InitTick+0x70>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e007      	b.n	80033b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e004      	b.n	80033b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e001      	b.n	80033b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000014 	.word	0x20000014
 80033c4:	2000000c 	.word	0x2000000c
 80033c8:	20000010 	.word	0x20000010

080033cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d0:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <HAL_IncTick+0x1c>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <HAL_IncTick+0x20>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	4a03      	ldr	r2, [pc, #12]	@ (80033e8 <HAL_IncTick+0x1c>)
 80033dc:	6013      	str	r3, [r2, #0]
}
 80033de:	bf00      	nop
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	20001310 	.word	0x20001310
 80033ec:	20000014 	.word	0x20000014

080033f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return uwTick;
 80033f4:	4b03      	ldr	r3, [pc, #12]	@ (8003404 <HAL_GetTick+0x14>)
 80033f6:	681b      	ldr	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20001310 	.word	0x20001310

08003408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7ff ffee 	bl	80033f0 <HAL_GetTick>
 8003414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d004      	beq.n	800342c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_Delay+0x40>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4413      	add	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800342c:	bf00      	nop
 800342e:	f7ff ffdf 	bl	80033f0 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	429a      	cmp	r2, r3
 800343c:	d8f7      	bhi.n	800342e <HAL_Delay+0x26>
  {
  }
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000014 	.word	0x20000014

0800344c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	609a      	str	r2, [r3, #8]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3360      	adds	r3, #96	@ 0x60
 80034c6:	461a      	mov	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <LL_ADC_SetOffset+0x44>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	03fff000 	.word	0x03fff000

080034fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3360      	adds	r3, #96	@ 0x60
 800350a:	461a      	mov	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3360      	adds	r3, #96	@ 0x60
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	431a      	orrs	r2, r3
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800355e:	b480      	push	{r7}
 8003560:	b087      	sub	sp, #28
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3360      	adds	r3, #96	@ 0x60
 800356e:	461a      	mov	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	431a      	orrs	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3360      	adds	r3, #96	@ 0x60
 80035a4:	461a      	mov	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	615a      	str	r2, [r3, #20]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3330      	adds	r3, #48	@ 0x30
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	4413      	add	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	211f      	movs	r1, #31
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	0e9b      	lsrs	r3, r3, #26
 800364e:	f003 011f 	and.w	r1, r3, #31
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	431a      	orrs	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800366e:	b480      	push	{r7}
 8003670:	b087      	sub	sp, #28
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3314      	adds	r3, #20
 800367e:	461a      	mov	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	0e5b      	lsrs	r3, r3, #25
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	4413      	add	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	0d1b      	lsrs	r3, r3, #20
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2107      	movs	r1, #7
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	401a      	ands	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	0d1b      	lsrs	r3, r3, #20
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	431a      	orrs	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036dc:	43db      	mvns	r3, r3
 80036de:	401a      	ands	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f003 0318 	and.w	r3, r3, #24
 80036e6:	4908      	ldr	r1, [pc, #32]	@ (8003708 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036e8:	40d9      	lsrs	r1, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	400b      	ands	r3, r1
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	0007ffff 	.word	0x0007ffff

0800370c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 031f 	and.w	r3, r3, #31
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6093      	str	r3, [r2, #8]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800375c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003760:	d101      	bne.n	8003766 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003784:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003788:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037b0:	d101      	bne.n	80037b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037d8:	f043 0201 	orr.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <LL_ADC_IsEnabled+0x18>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <LL_ADC_IsEnabled+0x1a>
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003822:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003826:	f043 0204 	orr.w	r2, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d101      	bne.n	8003852 <LL_ADC_REG_IsConversionOngoing+0x18>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b08      	cmp	r3, #8
 8003872:	d101      	bne.n	8003878 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b089      	sub	sp, #36	@ 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e167      	b.n	8003b72 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd fcd1 	bl	8001258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff3f 	bl	800374c <LL_ADC_IsDeepPowerDownEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff25 	bl	8003728 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff5a 	bl	800379c <LL_ADC_IsInternalRegulatorEnabled>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d115      	bne.n	800391a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff3e 	bl	8003774 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038f8:	4ba0      	ldr	r3, [pc, #640]	@ (8003b7c <HAL_ADC_Init+0x2f4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	4aa0      	ldr	r2, [pc, #640]	@ (8003b80 <HAL_ADC_Init+0x2f8>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800390c:	e002      	b.n	8003914 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3b01      	subs	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f9      	bne.n	800390e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ff3c 	bl	800379c <LL_ADC_IsInternalRegulatorEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10d      	bne.n	8003946 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	f043 0210 	orr.w	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff ff75 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 8003950:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 8100 	bne.w	8003b60 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 80fc 	bne.w	8003b60 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003970:	f043 0202 	orr.w	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff35 	bl	80037ec <LL_ADC_IsEnabled>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d111      	bne.n	80039ac <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003988:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800398c:	f7ff ff2e 	bl	80037ec <LL_ADC_IsEnabled>
 8003990:	4604      	mov	r4, r0
 8003992:	487c      	ldr	r0, [pc, #496]	@ (8003b84 <HAL_ADC_Init+0x2fc>)
 8003994:	f7ff ff2a 	bl	80037ec <LL_ADC_IsEnabled>
 8003998:	4603      	mov	r3, r0
 800399a:	4323      	orrs	r3, r4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4619      	mov	r1, r3
 80039a6:	4878      	ldr	r0, [pc, #480]	@ (8003b88 <HAL_ADC_Init+0x300>)
 80039a8:	f7ff fd50 	bl	800344c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	7f5b      	ldrb	r3, [r3, #29]
 80039b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80039bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80039c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d106      	bne.n	80039e8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	3b01      	subs	r3, #1
 80039e0:	045b      	lsls	r3, r3, #17
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	4b60      	ldr	r3, [pc, #384]	@ (8003b8c <HAL_ADC_Init+0x304>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	69b9      	ldr	r1, [r7, #24]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff14 	bl	8003860 <LL_ADC_INJ_IsConversionOngoing>
 8003a38:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d16d      	bne.n	8003b1c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d16a      	bne.n	8003b1c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a4a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a52:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a62:	f023 0302 	bic.w	r3, r3, #2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d017      	beq.n	8003aa8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6911      	ldr	r1, [r2, #16]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003aa6:	e013      	b.n	8003ad0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ab6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003acc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d118      	bne.n	8003b0c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003af6:	4311      	orrs	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003afc:	430a      	orrs	r2, r1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	611a      	str	r2, [r3, #16]
 8003b0a:	e007      	b.n	8003b1c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d10c      	bne.n	8003b3e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	f023 010f 	bic.w	r1, r3, #15
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	1e5a      	subs	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b3c:	e007      	b.n	8003b4e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 020f 	bic.w	r2, r2, #15
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	f023 0303 	bic.w	r3, r3, #3
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b5e:	e007      	b.n	8003b70 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b64:	f043 0210 	orr.w	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b70:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3724      	adds	r7, #36	@ 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	2000000c 	.word	0x2000000c
 8003b80:	053e2d63 	.word	0x053e2d63
 8003b84:	50000100 	.word	0x50000100
 8003b88:	50000300 	.word	0x50000300
 8003b8c:	fff04007 	.word	0xfff04007

08003b90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b9c:	4851      	ldr	r0, [pc, #324]	@ (8003ce4 <HAL_ADC_Start_DMA+0x154>)
 8003b9e:	f7ff fdb5 	bl	800370c <LL_ADC_GetMultimode>
 8003ba2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fe46 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 808f 	bne.w	8003cd4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADC_Start_DMA+0x34>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e08a      	b.n	8003cda <HAL_ADC_Start_DMA+0x14a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	d002      	beq.n	8003bde <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b09      	cmp	r3, #9
 8003bdc:	d173      	bne.n	8003cc6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fc8e 	bl	8004500 <ADC_Enable>
 8003be4:	4603      	mov	r3, r0
 8003be6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d166      	bne.n	8003cbc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a38      	ldr	r2, [pc, #224]	@ (8003ce8 <HAL_ADC_Start_DMA+0x158>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d002      	beq.n	8003c12 <HAL_ADC_Start_DMA+0x82>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	e001      	b.n	8003c16 <HAL_ADC_Start_DMA+0x86>
 8003c12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d002      	beq.n	8003c24 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d006      	beq.n	8003c4a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c40:	f023 0206 	bic.w	r2, r3, #6
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	661a      	str	r2, [r3, #96]	@ 0x60
 8003c48:	e002      	b.n	8003c50 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c54:	4a25      	ldr	r2, [pc, #148]	@ (8003cec <HAL_ADC_Start_DMA+0x15c>)
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5c:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <HAL_ADC_Start_DMA+0x160>)
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c64:	4a23      	ldr	r2, [pc, #140]	@ (8003cf4 <HAL_ADC_Start_DMA+0x164>)
 8003c66:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	221c      	movs	r2, #28
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0210 	orr.w	r2, r2, #16
 8003c86:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3340      	adds	r3, #64	@ 0x40
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f000 ffc6 	bl	8004c38 <HAL_DMA_Start_IT>
 8003cac:	4603      	mov	r3, r0
 8003cae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fdac 	bl	8003812 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003cba:	e00d      	b.n	8003cd8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003cc4:	e008      	b.n	8003cd8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003cd2:	e001      	b.n	8003cd8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	50000300 	.word	0x50000300
 8003ce8:	50000100 	.word	0x50000100
 8003cec:	0800460d 	.word	0x0800460d
 8003cf0:	080046e5 	.word	0x080046e5
 8003cf4:	08004701 	.word	0x08004701

08003cf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b0b6      	sub	sp, #216	@ 0xd8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x22>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e3c8      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x7b4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fd73 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 83ad 	bne.w	80044b6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f7ff fc54 	bl	8003616 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fd61 	bl	800383a <LL_ADC_REG_IsConversionOngoing>
 8003d78:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fd6d 	bl	8003860 <LL_ADC_INJ_IsConversionOngoing>
 8003d86:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 81d9 	bne.w	8004146 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 81d4 	bne.w	8004146 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003da6:	d10f      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	4619      	mov	r1, r3
 8003db4:	f7ff fc5b 	bl	800366e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fc02 	bl	80035ca <LL_ADC_SetSamplingTimeCommonConfig>
 8003dc6:	e00e      	b.n	8003de6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6819      	ldr	r1, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f7ff fc4a 	bl	800366e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fbf2 	bl	80035ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	08db      	lsrs	r3, r3, #3
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d022      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6919      	ldr	r1, [r3, #16]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e18:	f7ff fb4c 	bl	80034b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6919      	ldr	r1, [r3, #16]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f7ff fb98 	bl	800355e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d102      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x124>
 8003e3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e42:	e000      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x126>
 8003e44:	2300      	movs	r3, #0
 8003e46:	461a      	mov	r2, r3
 8003e48:	f7ff fba4 	bl	8003594 <LL_ADC_SetOffsetSaturation>
 8003e4c:	e17b      	b.n	8004146 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fb51 	bl	80034fc <LL_ADC_GetOffsetChannel>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x15a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fb46 	bl	80034fc <LL_ADC_GetOffsetChannel>
 8003e70:	4603      	mov	r3, r0
 8003e72:	0e9b      	lsrs	r3, r3, #26
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	e01e      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x198>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fb3b 	bl	80034fc <LL_ADC_GetOffsetChannel>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	e004      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003eac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x1b0>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0e9b      	lsrs	r3, r3, #26
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	e018      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x1e2>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003eec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003ef4:	2320      	movs	r3, #32
 8003ef6:	e004      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003ef8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d106      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fb0a 	bl	8003528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2101      	movs	r1, #1
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff faee 	bl	80034fc <LL_ADC_GetOffsetChannel>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x220>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2101      	movs	r1, #1
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fae3 	bl	80034fc <LL_ADC_GetOffsetChannel>
 8003f36:	4603      	mov	r3, r0
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	f003 021f 	and.w	r2, r3, #31
 8003f3e:	e01e      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x25e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fad8 	bl	80034fc <LL_ADC_GetOffsetChannel>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003f66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003f6e:	2320      	movs	r3, #32
 8003f70:	e004      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f76:	fab3 f383 	clz	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d105      	bne.n	8003f96 <HAL_ADC_ConfigChannel+0x276>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	0e9b      	lsrs	r3, r3, #26
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	e018      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x2a8>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003fb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003fba:	2320      	movs	r3, #32
 8003fbc:	e004      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003fbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fc2:	fab3 f383 	clz	r3, r3
 8003fc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d106      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff faa7 	bl	8003528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2102      	movs	r1, #2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fa8b 	bl	80034fc <LL_ADC_GetOffsetChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x2e6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fa80 	bl	80034fc <LL_ADC_GetOffsetChannel>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	0e9b      	lsrs	r3, r3, #26
 8004000:	f003 021f 	and.w	r2, r3, #31
 8004004:	e01e      	b.n	8004044 <HAL_ADC_ConfigChannel+0x324>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2102      	movs	r1, #2
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fa75 	bl	80034fc <LL_ADC_GetOffsetChannel>
 8004012:	4603      	mov	r3, r0
 8004014:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004024:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800402c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004034:	2320      	movs	r3, #32
 8004036:	e004      	b.n	8004042 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004038:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800403c:	fab3 f383 	clz	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404c:	2b00      	cmp	r3, #0
 800404e:	d105      	bne.n	800405c <HAL_ADC_ConfigChannel+0x33c>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	0e9b      	lsrs	r3, r3, #26
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	e016      	b.n	800408a <HAL_ADC_ConfigChannel+0x36a>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800406e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004074:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e004      	b.n	800408a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004080:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800408a:	429a      	cmp	r2, r3
 800408c:	d106      	bne.n	800409c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fa46 	bl	8003528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2103      	movs	r1, #3
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fa2a 	bl	80034fc <LL_ADC_GetOffsetChannel>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x3a8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2103      	movs	r1, #3
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fa1f 	bl	80034fc <LL_ADC_GetOffsetChannel>
 80040be:	4603      	mov	r3, r0
 80040c0:	0e9b      	lsrs	r3, r3, #26
 80040c2:	f003 021f 	and.w	r2, r3, #31
 80040c6:	e017      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x3d8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2103      	movs	r1, #3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fa14 	bl	80034fc <LL_ADC_GetOffsetChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80040e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040e2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80040e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80040ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x3f0>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0e9b      	lsrs	r3, r3, #26
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	e011      	b.n	8004134 <HAL_ADC_ConfigChannel+0x414>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800411e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004120:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004128:	2320      	movs	r3, #32
 800412a:	e003      	b.n	8004134 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800412c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004134:	429a      	cmp	r2, r3
 8004136:	d106      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2200      	movs	r2, #0
 800413e:	2103      	movs	r1, #3
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff f9f1 	bl	8003528 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fb4e 	bl	80037ec <LL_ADC_IsEnabled>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 8140 	bne.w	80043d8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	461a      	mov	r2, r3
 8004166:	f7ff faad 	bl	80036c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4a8f      	ldr	r2, [pc, #572]	@ (80043ac <HAL_ADC_ConfigChannel+0x68c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f040 8131 	bne.w	80043d8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <HAL_ADC_ConfigChannel+0x47e>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	0e9b      	lsrs	r3, r3, #26
 800418c:	3301      	adds	r3, #1
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2b09      	cmp	r3, #9
 8004194:	bf94      	ite	ls
 8004196:	2301      	movls	r3, #1
 8004198:	2300      	movhi	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e019      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x4b2>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80041ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041ae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80041b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80041ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	bf94      	ite	ls
 80041cc:	2301      	movls	r3, #1
 80041ce:	2300      	movhi	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d079      	beq.n	80042ca <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d107      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x4d2>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	3301      	adds	r3, #1
 80041ea:	069b      	lsls	r3, r3, #26
 80041ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041f0:	e015      	b.n	800421e <HAL_ADC_ConfigChannel+0x4fe>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004202:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800420a:	2320      	movs	r3, #32
 800420c:	e003      	b.n	8004216 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800420e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	3301      	adds	r3, #1
 8004218:	069b      	lsls	r3, r3, #26
 800421a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_ADC_ConfigChannel+0x51e>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	0e9b      	lsrs	r3, r3, #26
 8004230:	3301      	adds	r3, #1
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2101      	movs	r1, #1
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	e017      	b.n	800426e <HAL_ADC_ConfigChannel+0x54e>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800424c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800424e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004256:	2320      	movs	r3, #32
 8004258:	e003      	b.n	8004262 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800425a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	3301      	adds	r3, #1
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	ea42 0103 	orr.w	r1, r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x574>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0e9b      	lsrs	r3, r3, #26
 8004284:	3301      	adds	r3, #1
 8004286:	f003 021f 	and.w	r2, r3, #31
 800428a:	4613      	mov	r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4413      	add	r3, r2
 8004290:	051b      	lsls	r3, r3, #20
 8004292:	e018      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x5a6>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80042a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80042b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f003 021f 	and.w	r2, r3, #31
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c6:	430b      	orrs	r3, r1
 80042c8:	e081      	b.n	80043ce <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x5c6>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	0e9b      	lsrs	r3, r3, #26
 80042dc:	3301      	adds	r3, #1
 80042de:	069b      	lsls	r3, r3, #26
 80042e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042e4:	e015      	b.n	8004312 <HAL_ADC_ConfigChannel+0x5f2>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80042fe:	2320      	movs	r3, #32
 8004300:	e003      	b.n	800430a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	3301      	adds	r3, #1
 800430c:	069b      	lsls	r3, r3, #26
 800430e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x612>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	3301      	adds	r3, #1
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2101      	movs	r1, #1
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	e017      	b.n	8004362 <HAL_ADC_ConfigChannel+0x642>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	61fb      	str	r3, [r7, #28]
  return result;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e003      	b.n	8004356 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800434e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004350:	fab3 f383 	clz	r3, r3
 8004354:	b2db      	uxtb	r3, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	ea42 0103 	orr.w	r1, r2, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10d      	bne.n	800438e <HAL_ADC_ConfigChannel+0x66e>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	0e9b      	lsrs	r3, r3, #26
 8004378:	3301      	adds	r3, #1
 800437a:	f003 021f 	and.w	r2, r3, #31
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	3b1e      	subs	r3, #30
 8004386:	051b      	lsls	r3, r3, #20
 8004388:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800438c:	e01e      	b.n	80043cc <HAL_ADC_ConfigChannel+0x6ac>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	fa93 f3a3 	rbit	r3, r3
 800439a:	613b      	str	r3, [r7, #16]
  return result;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80043a6:	2320      	movs	r3, #32
 80043a8:	e006      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x698>
 80043aa:	bf00      	nop
 80043ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	3301      	adds	r3, #1
 80043ba:	f003 021f 	and.w	r2, r3, #31
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	3b1e      	subs	r3, #30
 80043c6:	051b      	lsls	r3, r3, #20
 80043c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043d2:	4619      	mov	r1, r3
 80043d4:	f7ff f94b 	bl	800366e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b3f      	ldr	r3, [pc, #252]	@ (80044dc <HAL_ADC_ConfigChannel+0x7bc>)
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d071      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e4:	483e      	ldr	r0, [pc, #248]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80043e6:	f7ff f857 	bl	8003498 <LL_ADC_GetCommonPathInternalCh>
 80043ea:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a3c      	ldr	r2, [pc, #240]	@ (80044e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_ADC_ConfigChannel+0x6e2>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a3a      	ldr	r2, [pc, #232]	@ (80044e8 <HAL_ADC_ConfigChannel+0x7c8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d127      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d121      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004416:	d157      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800441c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004420:	4619      	mov	r1, r3
 8004422:	482f      	ldr	r0, [pc, #188]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004424:	f7ff f825 	bl	8003472 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004428:	4b30      	ldr	r3, [pc, #192]	@ (80044ec <HAL_ADC_ConfigChannel+0x7cc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	4a30      	ldr	r2, [pc, #192]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004430:	fba2 2303 	umull	r2, r3, r2, r3
 8004434:	099b      	lsrs	r3, r3, #6
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004442:	e002      	b.n	800444a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3b01      	subs	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f9      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004450:	e03a      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a27      	ldr	r2, [pc, #156]	@ (80044f4 <HAL_ADC_ConfigChannel+0x7d4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d113      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800445c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a22      	ldr	r2, [pc, #136]	@ (80044f8 <HAL_ADC_ConfigChannel+0x7d8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d02a      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800447a:	4619      	mov	r1, r3
 800447c:	4818      	ldr	r0, [pc, #96]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7c0>)
 800447e:	f7fe fff8 	bl	8003472 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004482:	e021      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <HAL_ADC_ConfigChannel+0x7dc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d11c      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800448e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d116      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a16      	ldr	r2, [pc, #88]	@ (80044f8 <HAL_ADC_ConfigChannel+0x7d8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d011      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044ac:	4619      	mov	r1, r3
 80044ae:	480c      	ldr	r0, [pc, #48]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80044b0:	f7fe ffdf 	bl	8003472 <LL_ADC_SetCommonPathInternalCh>
 80044b4:	e008      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80044d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	37d8      	adds	r7, #216	@ 0xd8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	80080000 	.word	0x80080000
 80044e0:	50000300 	.word	0x50000300
 80044e4:	c3210000 	.word	0xc3210000
 80044e8:	90c00010 	.word	0x90c00010
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	053e2d63 	.word	0x053e2d63
 80044f4:	c7520000 	.word	0xc7520000
 80044f8:	50000100 	.word	0x50000100
 80044fc:	cb840000 	.word	0xcb840000

08004500 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004508:	2300      	movs	r3, #0
 800450a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff f96b 	bl	80037ec <LL_ADC_IsEnabled>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d169      	bne.n	80045f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	4b36      	ldr	r3, [pc, #216]	@ (80045fc <ADC_Enable+0xfc>)
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452e:	f043 0210 	orr.w	r2, r3, #16
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e055      	b.n	80045f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff f93a 	bl	80037c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004550:	482b      	ldr	r0, [pc, #172]	@ (8004600 <ADC_Enable+0x100>)
 8004552:	f7fe ffa1 	bl	8003498 <LL_ADC_GetCommonPathInternalCh>
 8004556:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004558:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800455c:	2b00      	cmp	r3, #0
 800455e:	d013      	beq.n	8004588 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004560:	4b28      	ldr	r3, [pc, #160]	@ (8004604 <ADC_Enable+0x104>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	099b      	lsrs	r3, r3, #6
 8004566:	4a28      	ldr	r2, [pc, #160]	@ (8004608 <ADC_Enable+0x108>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800457a:	e002      	b.n	8004582 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	3b01      	subs	r3, #1
 8004580:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f9      	bne.n	800457c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004588:	f7fe ff32 	bl	80033f0 <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800458e:	e028      	b.n	80045e2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff f929 	bl	80037ec <LL_ADC_IsEnabled>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d104      	bne.n	80045aa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff f90d 	bl	80037c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045aa:	f7fe ff21 	bl	80033f0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d914      	bls.n	80045e2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d00d      	beq.n	80045e2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ca:	f043 0210 	orr.w	r2, r3, #16
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d6:	f043 0201 	orr.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e007      	b.n	80045f2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d1cf      	bne.n	8004590 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	8000003f 	.word	0x8000003f
 8004600:	50000300 	.word	0x50000300
 8004604:	2000000c 	.word	0x2000000c
 8004608:	053e2d63 	.word	0x053e2d63

0800460c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004622:	2b00      	cmp	r3, #0
 8004624:	d14b      	bne.n	80046be <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d021      	beq.n	8004684 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe ffd3 	bl	80035f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d032      	beq.n	80046b6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d12b      	bne.n	80046b6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004662:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d11f      	bne.n	80046b6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467a:	f043 0201 	orr.w	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004682:	e018      	b.n	80046b6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d111      	bne.n	80046b6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004696:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ae:	f043 0201 	orr.w	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7fc fed2 	bl	8001460 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046bc:	e00e      	b.n	80046dc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fb1e 	bl	8003d0c <HAL_ADC_ErrorCallback>
}
 80046d0:	e004      	b.n	80046dc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff fb00 	bl	8003cf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004712:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471e:	f043 0204 	orr.w	r2, r3, #4
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff faf0 	bl	8003d0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <LL_ADC_IsEnabled>:
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <LL_ADC_IsEnabled+0x18>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <LL_ADC_IsEnabled+0x1a>
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <LL_ADC_REG_IsConversionOngoing>:
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d101      	bne.n	8004772 <LL_ADC_REG_IsConversionOngoing+0x18>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b0a1      	sub	sp, #132	@ 0x84
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800479a:	2302      	movs	r3, #2
 800479c:	e08b      	b.n	80048b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047a6:	2300      	movs	r3, #0
 80047a8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80047aa:	2300      	movs	r3, #0
 80047ac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047b6:	d102      	bne.n	80047be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047b8:	4b41      	ldr	r3, [pc, #260]	@ (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	e001      	b.n	80047c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	f043 0220 	orr.w	r2, r3, #32
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e06a      	b.n	80048b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff ffb9 	bl	800475a <LL_ADC_REG_IsConversionOngoing>
 80047e8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff ffb3 	bl	800475a <LL_ADC_REG_IsConversionOngoing>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d14c      	bne.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80047fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d149      	bne.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004800:	4b30      	ldr	r3, [pc, #192]	@ (80048c4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004802:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d028      	beq.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800480c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800481e:	035b      	lsls	r3, r3, #13
 8004820:	430b      	orrs	r3, r1
 8004822:	431a      	orrs	r2, r3
 8004824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004826:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004828:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800482c:	f7ff ff82 	bl	8004734 <LL_ADC_IsEnabled>
 8004830:	4604      	mov	r4, r0
 8004832:	4823      	ldr	r0, [pc, #140]	@ (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004834:	f7ff ff7e 	bl	8004734 <LL_ADC_IsEnabled>
 8004838:	4603      	mov	r3, r0
 800483a:	4323      	orrs	r3, r4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d133      	bne.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004848:	f023 030f 	bic.w	r3, r3, #15
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	6811      	ldr	r1, [r2, #0]
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	6892      	ldr	r2, [r2, #8]
 8004854:	430a      	orrs	r2, r1
 8004856:	431a      	orrs	r2, r3
 8004858:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800485a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800485c:	e024      	b.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800485e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004868:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800486a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800486e:	f7ff ff61 	bl	8004734 <LL_ADC_IsEnabled>
 8004872:	4604      	mov	r4, r0
 8004874:	4812      	ldr	r0, [pc, #72]	@ (80048c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004876:	f7ff ff5d 	bl	8004734 <LL_ADC_IsEnabled>
 800487a:	4603      	mov	r3, r0
 800487c:	4323      	orrs	r3, r4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d112      	bne.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800488a:	f023 030f 	bic.w	r3, r3, #15
 800488e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004890:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004892:	e009      	b.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80048a6:	e000      	b.n	80048aa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80048b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3784      	adds	r7, #132	@ 0x84
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd90      	pop	{r4, r7, pc}
 80048be:	bf00      	nop
 80048c0:	50000100 	.word	0x50000100
 80048c4:	50000300 	.word	0x50000300

080048c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d8:	4b0c      	ldr	r3, [pc, #48]	@ (800490c <__NVIC_SetPriorityGrouping+0x44>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048e4:	4013      	ands	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048fa:	4a04      	ldr	r2, [pc, #16]	@ (800490c <__NVIC_SetPriorityGrouping+0x44>)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	60d3      	str	r3, [r2, #12]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004914:	4b04      	ldr	r3, [pc, #16]	@ (8004928 <__NVIC_GetPriorityGrouping+0x18>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 0307 	and.w	r3, r3, #7
}
 800491e:	4618      	mov	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	2b00      	cmp	r3, #0
 800493c:	db0b      	blt.n	8004956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	f003 021f 	and.w	r2, r3, #31
 8004944:	4907      	ldr	r1, [pc, #28]	@ (8004964 <__NVIC_EnableIRQ+0x38>)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	2001      	movs	r0, #1
 800494e:	fa00 f202 	lsl.w	r2, r0, r2
 8004952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	e000e100 	.word	0xe000e100

08004968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db0a      	blt.n	8004992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	490c      	ldr	r1, [pc, #48]	@ (80049b4 <__NVIC_SetPriority+0x4c>)
 8004982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004986:	0112      	lsls	r2, r2, #4
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	440b      	add	r3, r1
 800498c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004990:	e00a      	b.n	80049a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	4908      	ldr	r1, [pc, #32]	@ (80049b8 <__NVIC_SetPriority+0x50>)
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3b04      	subs	r3, #4
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	440b      	add	r3, r1
 80049a6:	761a      	strb	r2, [r3, #24]
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000e100 	.word	0xe000e100
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	@ 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f1c3 0307 	rsb	r3, r3, #7
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	bf28      	it	cs
 80049da:	2304      	movcs	r3, #4
 80049dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3304      	adds	r3, #4
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d902      	bls.n	80049ec <NVIC_EncodePriority+0x30>
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3b03      	subs	r3, #3
 80049ea:	e000      	b.n	80049ee <NVIC_EncodePriority+0x32>
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43da      	mvns	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	401a      	ands	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a04:	f04f 31ff 	mov.w	r1, #4294967295
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	43d9      	mvns	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a14:	4313      	orrs	r3, r2
         );
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3724      	adds	r7, #36	@ 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a34:	d301      	bcc.n	8004a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a36:	2301      	movs	r3, #1
 8004a38:	e00f      	b.n	8004a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a64 <SysTick_Config+0x40>)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a42:	210f      	movs	r1, #15
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	f7ff ff8e 	bl	8004968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a4c:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <SysTick_Config+0x40>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a52:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <SysTick_Config+0x40>)
 8004a54:	2207      	movs	r2, #7
 8004a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	e000e010 	.word	0xe000e010

08004a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff29 	bl	80048c8 <__NVIC_SetPriorityGrouping>
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b086      	sub	sp, #24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	4603      	mov	r3, r0
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
 8004a8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a8c:	f7ff ff40 	bl	8004910 <__NVIC_GetPriorityGrouping>
 8004a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	6978      	ldr	r0, [r7, #20]
 8004a98:	f7ff ff90 	bl	80049bc <NVIC_EncodePriority>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff ff5f 	bl	8004968 <__NVIC_SetPriority>
}
 8004aaa:	bf00      	nop
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	4603      	mov	r3, r0
 8004aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff ff33 	bl	800492c <__NVIC_EnableIRQ>
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ffa4 	bl	8004a24 <SysTick_Config>
 8004adc:	4603      	mov	r3, r0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e08d      	b.n	8004c16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b47      	ldr	r3, [pc, #284]	@ (8004c20 <HAL_DMA_Init+0x138>)
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d80f      	bhi.n	8004b26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4b45      	ldr	r3, [pc, #276]	@ (8004c24 <HAL_DMA_Init+0x13c>)
 8004b0e:	4413      	add	r3, r2
 8004b10:	4a45      	ldr	r2, [pc, #276]	@ (8004c28 <HAL_DMA_Init+0x140>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	009a      	lsls	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a42      	ldr	r2, [pc, #264]	@ (8004c2c <HAL_DMA_Init+0x144>)
 8004b22:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b24:	e00e      	b.n	8004b44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4b40      	ldr	r3, [pc, #256]	@ (8004c30 <HAL_DMA_Init+0x148>)
 8004b2e:	4413      	add	r3, r2
 8004b30:	4a3d      	ldr	r2, [pc, #244]	@ (8004c28 <HAL_DMA_Init+0x140>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	009a      	lsls	r2, r3, #2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a3c      	ldr	r2, [pc, #240]	@ (8004c34 <HAL_DMA_Init+0x14c>)
 8004b42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa82 	bl	80050a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ba4:	d102      	bne.n	8004bac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bc0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d010      	beq.n	8004bec <HAL_DMA_Init+0x104>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d80c      	bhi.n	8004bec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 faa2 	bl	800511c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	e008      	b.n	8004bfe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40020407 	.word	0x40020407
 8004c24:	bffdfff8 	.word	0xbffdfff8
 8004c28:	cccccccd 	.word	0xcccccccd
 8004c2c:	40020000 	.word	0x40020000
 8004c30:	bffdfbf8 	.word	0xbffdfbf8
 8004c34:	40020400 	.word	0x40020400

08004c38 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_DMA_Start_IT+0x20>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e066      	b.n	8004d26 <HAL_DMA_Start_IT+0xee>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d155      	bne.n	8004d18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f9c7 	bl	8005024 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 020e 	orr.w	r2, r2, #14
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e00f      	b.n	8004cd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0204 	bic.w	r2, r2, #4
 8004cbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 020a 	orr.w	r2, r2, #10
 8004cce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e005      	b.n	8004d24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
 8004d22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d005      	beq.n	8004d52 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
 8004d50:	e037      	b.n	8004dc2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 020e 	bic.w	r2, r2, #14
 8004d60:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d70:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d86:	f003 021f 	and.w	r2, r3, #31
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8e:	2101      	movs	r1, #1
 8004d90:	fa01 f202 	lsl.w	r2, r1, r2
 8004d94:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d9e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004db6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004dc0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d00d      	beq.n	8004e14 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
 8004e12:	e047      	b.n	8004ea4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 020e 	bic.w	r2, r2, #14
 8004e22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e48:	f003 021f 	and.w	r2, r3, #31
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	2101      	movs	r1, #1
 8004e52:	fa01 f202 	lsl.w	r2, r1, r2
 8004e56:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e60:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00c      	beq.n	8004e84 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e82:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	4798      	blx	r3
    }
  }
  return status;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	2204      	movs	r2, #4
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d026      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x7a>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d021      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d107      	bne.n	8004f02 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0204 	bic.w	r2, r2, #4
 8004f00:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f06:	f003 021f 	and.w	r2, r3, #31
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	2104      	movs	r1, #4
 8004f10:	fa01 f202 	lsl.w	r2, r1, r2
 8004f14:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d071      	beq.n	8005002 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f26:	e06c      	b.n	8005002 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	2202      	movs	r2, #2
 8004f32:	409a      	lsls	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d02e      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d029      	beq.n	8004f9a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 020a 	bic.w	r2, r2, #10
 8004f62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f70:	f003 021f 	and.w	r2, r3, #31
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	2102      	movs	r1, #2
 8004f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d038      	beq.n	8005002 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f98:	e033      	b.n	8005002 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d02a      	beq.n	8005004 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d025      	beq.n	8005004 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 020e 	bic.w	r2, r2, #14
 8004fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fcc:	f003 021f 	and.w	r2, r3, #31
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004fda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d004      	beq.n	8005004 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005002:	bf00      	nop
 8005004:	bf00      	nop
}
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800503a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005040:	2b00      	cmp	r3, #0
 8005042:	d004      	beq.n	800504e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800504c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f003 021f 	and.w	r2, r3, #31
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	2101      	movs	r1, #1
 800505c:	fa01 f202 	lsl.w	r2, r1, r2
 8005060:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b10      	cmp	r3, #16
 8005070:	d108      	bne.n	8005084 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005082:	e007      	b.n	8005094 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	60da      	str	r2, [r3, #12]
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b16      	ldr	r3, [pc, #88]	@ (8005108 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d802      	bhi.n	80050ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80050b4:	4b15      	ldr	r3, [pc, #84]	@ (800510c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e001      	b.n	80050be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80050bc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3b08      	subs	r3, #8
 80050ca:	4a12      	ldr	r2, [pc, #72]	@ (8005114 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d8:	089b      	lsrs	r3, r3, #2
 80050da:	009a      	lsls	r2, r3, #2
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4413      	add	r3, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80050ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	2201      	movs	r2, #1
 80050f4:	409a      	lsls	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40020407 	.word	0x40020407
 800510c:	40020800 	.word	0x40020800
 8005110:	40020820 	.word	0x40020820
 8005114:	cccccccd 	.word	0xcccccccd
 8005118:	40020880 	.word	0x40020880

0800511c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	461a      	mov	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a08      	ldr	r2, [pc, #32]	@ (8005160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800513e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3b01      	subs	r3, #1
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	2201      	movs	r2, #1
 800514a:	409a      	lsls	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	1000823f 	.word	0x1000823f
 8005160:	40020940 	.word	0x40020940

08005164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005172:	e15a      	b.n	800542a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	2101      	movs	r1, #1
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	4013      	ands	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 814c 	beq.w	8005424 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	2b01      	cmp	r3, #1
 8005196:	d005      	beq.n	80051a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d130      	bne.n	8005206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	2203      	movs	r2, #3
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4013      	ands	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051da:	2201      	movs	r2, #1
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4013      	ands	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	f003 0201 	and.w	r2, r3, #1
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b03      	cmp	r3, #3
 8005210:	d017      	beq.n	8005242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	2203      	movs	r2, #3
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43db      	mvns	r3, r3
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4013      	ands	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d123      	bne.n	8005296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	08da      	lsrs	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3208      	adds	r2, #8
 8005256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	220f      	movs	r2, #15
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4013      	ands	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	08da      	lsrs	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3208      	adds	r2, #8
 8005290:	6939      	ldr	r1, [r7, #16]
 8005292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	2203      	movs	r2, #3
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43db      	mvns	r3, r3
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4013      	ands	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 0203 	and.w	r2, r3, #3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80a6 	beq.w	8005424 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005448 <HAL_GPIO_Init+0x2e4>)
 80052da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005448 <HAL_GPIO_Init+0x2e4>)
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80052e4:	4b58      	ldr	r3, [pc, #352]	@ (8005448 <HAL_GPIO_Init+0x2e4>)
 80052e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052f0:	4a56      	ldr	r2, [pc, #344]	@ (800544c <HAL_GPIO_Init+0x2e8>)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	089b      	lsrs	r3, r3, #2
 80052f6:	3302      	adds	r3, #2
 80052f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	220f      	movs	r2, #15
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4013      	ands	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800531a:	d01f      	beq.n	800535c <HAL_GPIO_Init+0x1f8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a4c      	ldr	r2, [pc, #304]	@ (8005450 <HAL_GPIO_Init+0x2ec>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d019      	beq.n	8005358 <HAL_GPIO_Init+0x1f4>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a4b      	ldr	r2, [pc, #300]	@ (8005454 <HAL_GPIO_Init+0x2f0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <HAL_GPIO_Init+0x1f0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a4a      	ldr	r2, [pc, #296]	@ (8005458 <HAL_GPIO_Init+0x2f4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00d      	beq.n	8005350 <HAL_GPIO_Init+0x1ec>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a49      	ldr	r2, [pc, #292]	@ (800545c <HAL_GPIO_Init+0x2f8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <HAL_GPIO_Init+0x1e8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a48      	ldr	r2, [pc, #288]	@ (8005460 <HAL_GPIO_Init+0x2fc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_GPIO_Init+0x1e4>
 8005344:	2305      	movs	r3, #5
 8005346:	e00a      	b.n	800535e <HAL_GPIO_Init+0x1fa>
 8005348:	2306      	movs	r3, #6
 800534a:	e008      	b.n	800535e <HAL_GPIO_Init+0x1fa>
 800534c:	2304      	movs	r3, #4
 800534e:	e006      	b.n	800535e <HAL_GPIO_Init+0x1fa>
 8005350:	2303      	movs	r3, #3
 8005352:	e004      	b.n	800535e <HAL_GPIO_Init+0x1fa>
 8005354:	2302      	movs	r3, #2
 8005356:	e002      	b.n	800535e <HAL_GPIO_Init+0x1fa>
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_GPIO_Init+0x1fa>
 800535c:	2300      	movs	r3, #0
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	f002 0203 	and.w	r2, r2, #3
 8005364:	0092      	lsls	r2, r2, #2
 8005366:	4093      	lsls	r3, r2
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800536e:	4937      	ldr	r1, [pc, #220]	@ (800544c <HAL_GPIO_Init+0x2e8>)
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	089b      	lsrs	r3, r3, #2
 8005374:	3302      	adds	r3, #2
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800537c:	4b39      	ldr	r3, [pc, #228]	@ (8005464 <HAL_GPIO_Init+0x300>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	43db      	mvns	r3, r3
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4013      	ands	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80053a0:	4a30      	ldr	r2, [pc, #192]	@ (8005464 <HAL_GPIO_Init+0x300>)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80053a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005464 <HAL_GPIO_Init+0x300>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	43db      	mvns	r3, r3
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4013      	ands	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053ca:	4a26      	ldr	r2, [pc, #152]	@ (8005464 <HAL_GPIO_Init+0x300>)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80053d0:	4b24      	ldr	r3, [pc, #144]	@ (8005464 <HAL_GPIO_Init+0x300>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	43db      	mvns	r3, r3
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4013      	ands	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80053f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005464 <HAL_GPIO_Init+0x300>)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80053fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005464 <HAL_GPIO_Init+0x300>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	43db      	mvns	r3, r3
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4013      	ands	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800541e:	4a11      	ldr	r2, [pc, #68]	@ (8005464 <HAL_GPIO_Init+0x300>)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3301      	adds	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	f47f ae9d 	bne.w	8005174 <HAL_GPIO_Init+0x10>
  }
}
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40021000 	.word	0x40021000
 800544c:	40010000 	.word	0x40010000
 8005450:	48000400 	.word	0x48000400
 8005454:	48000800 	.word	0x48000800
 8005458:	48000c00 	.word	0x48000c00
 800545c:	48001000 	.word	0x48001000
 8005460:	48001400 	.word	0x48001400
 8005464:	40010400 	.word	0x40010400

08005468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
 8005474:	4613      	mov	r3, r2
 8005476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005478:	787b      	ldrb	r3, [r7, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800547e:	887a      	ldrh	r2, [r7, #2]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005484:	e002      	b.n	800548c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005486:	887a      	ldrh	r2, [r7, #2]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054aa:	887a      	ldrh	r2, [r7, #2]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4013      	ands	r3, r2
 80054b0:	041a      	lsls	r2, r3, #16
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	43d9      	mvns	r1, r3
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	400b      	ands	r3, r1
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	619a      	str	r2, [r3, #24]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054d6:	4b08      	ldr	r3, [pc, #32]	@ (80054f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	4013      	ands	r3, r2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054e2:	4a05      	ldr	r2, [pc, #20]	@ (80054f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f806 	bl	80054fc <HAL_GPIO_EXTI_Callback>
  }
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40010400 	.word	0x40010400

080054fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e08d      	b.n	8005640 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fc fea9 	bl	8002290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2224      	movs	r2, #36	@ 0x24
 8005542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005562:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005572:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d107      	bne.n	800558c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005588:	609a      	str	r2, [r3, #8]
 800558a:	e006      	b.n	800559a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005598:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d108      	bne.n	80055b4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	e007      	b.n	80055c4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80055d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055d6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69d9      	ldr	r1, [r3, #28]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b20      	cmp	r3, #32
 800565c:	d138      	bne.n	80056d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005668:	2302      	movs	r3, #2
 800566a:	e032      	b.n	80056d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	@ 0x24
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800569a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e000      	b.n	80056d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d139      	bne.n	8005768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056fe:	2302      	movs	r3, #2
 8005700:	e033      	b.n	800576a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2224      	movs	r2, #36	@ 0x24
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	e000      	b.n	800576a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005768:	2302      	movs	r3, #2
  }
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0c0      	b.n	800590a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fd fd65 	bl	800326c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2203      	movs	r2, #3
 80057a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f004 fbfe 	bl	8009fb0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057b4:	2300      	movs	r3, #0
 80057b6:	73fb      	strb	r3, [r7, #15]
 80057b8:	e03e      	b.n	8005838 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057ba:	7bfa      	ldrb	r2, [r7, #15]
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	440b      	add	r3, r1
 80057c8:	3311      	adds	r3, #17
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057ce:	7bfa      	ldrb	r2, [r7, #15]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	440b      	add	r3, r1
 80057dc:	3310      	adds	r3, #16
 80057de:	7bfa      	ldrb	r2, [r7, #15]
 80057e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057e2:	7bfa      	ldrb	r2, [r7, #15]
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	440b      	add	r3, r1
 80057f0:	3313      	adds	r3, #19
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057f6:	7bfa      	ldrb	r2, [r7, #15]
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	440b      	add	r3, r1
 8005804:	3320      	adds	r3, #32
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800580a:	7bfa      	ldrb	r2, [r7, #15]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	440b      	add	r3, r1
 8005818:	3324      	adds	r3, #36	@ 0x24
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	440b      	add	r3, r1
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	3301      	adds	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	791b      	ldrb	r3, [r3, #4]
 800583c:	7bfa      	ldrb	r2, [r7, #15]
 800583e:	429a      	cmp	r2, r3
 8005840:	d3bb      	bcc.n	80057ba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
 8005846:	e044      	b.n	80058d2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	440b      	add	r3, r1
 8005856:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800585a:	2200      	movs	r2, #0
 800585c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800585e:	7bfa      	ldrb	r2, [r7, #15]
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	440b      	add	r3, r1
 800586c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005870:	7bfa      	ldrb	r2, [r7, #15]
 8005872:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005874:	7bfa      	ldrb	r2, [r7, #15]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	440b      	add	r3, r1
 8005882:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800588a:	7bfa      	ldrb	r2, [r7, #15]
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	440b      	add	r3, r1
 8005898:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058a0:	7bfa      	ldrb	r2, [r7, #15]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	440b      	add	r3, r1
 80058ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058b6:	7bfa      	ldrb	r2, [r7, #15]
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	440b      	add	r3, r1
 80058c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	3301      	adds	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	791b      	ldrb	r3, [r3, #4]
 80058d6:	7bfa      	ldrb	r2, [r7, #15]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3b5      	bcc.n	8005848 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3304      	adds	r3, #4
 80058e4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80058e8:	f004 fb7d 	bl	8009fe6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7a9b      	ldrb	r3, [r3, #10]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d102      	bne.n	8005908 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f805 	bl	8005912 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005936:	b29b      	uxth	r3, r3
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800594a:	b29b      	uxth	r3, r3
 800594c:	f043 0302 	orr.w	r3, r3, #2
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
	...

08005968 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d141      	bne.n	80059fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005976:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800597e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005982:	d131      	bne.n	80059e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005984:	4b47      	ldr	r3, [pc, #284]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598a:	4a46      	ldr	r2, [pc, #280]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800598c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005990:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005994:	4b43      	ldr	r3, [pc, #268]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800599c:	4a41      	ldr	r2, [pc, #260]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800599e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059a4:	4b40      	ldr	r3, [pc, #256]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2232      	movs	r2, #50	@ 0x32
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	4a3f      	ldr	r2, [pc, #252]	@ (8005aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059b0:	fba2 2303 	umull	r2, r3, r2, r3
 80059b4:	0c9b      	lsrs	r3, r3, #18
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059ba:	e002      	b.n	80059c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3b01      	subs	r3, #1
 80059c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059c2:	4b38      	ldr	r3, [pc, #224]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ce:	d102      	bne.n	80059d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f2      	bne.n	80059bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059d6:	4b33      	ldr	r3, [pc, #204]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e2:	d158      	bne.n	8005a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e057      	b.n	8005a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059e8:	4b2e      	ldr	r3, [pc, #184]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ee:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80059f8:	e04d      	b.n	8005a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a00:	d141      	bne.n	8005a86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a02:	4b28      	ldr	r3, [pc, #160]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a0e:	d131      	bne.n	8005a74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a10:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a16:	4a23      	ldr	r2, [pc, #140]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a20:	4b20      	ldr	r3, [pc, #128]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a28:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a30:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2232      	movs	r2, #50	@ 0x32
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a40:	0c9b      	lsrs	r3, r3, #18
 8005a42:	3301      	adds	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a46:	e002      	b.n	8005a4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a4e:	4b15      	ldr	r3, [pc, #84]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5a:	d102      	bne.n	8005a62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f2      	bne.n	8005a48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a6e:	d112      	bne.n	8005a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e011      	b.n	8005a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a74:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005a84:	e007      	b.n	8005a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a86:	4b07      	ldr	r3, [pc, #28]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a8e:	4a05      	ldr	r2, [pc, #20]	@ (8005aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	40007000 	.word	0x40007000
 8005aa8:	2000000c 	.word	0x2000000c
 8005aac:	431bde83 	.word	0x431bde83

08005ab0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005ab4:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	@ (8005acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005abe:	6093      	str	r3, [r2, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40007000 	.word	0x40007000

08005ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e2fe      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d075      	beq.n	8005bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aee:	4b97      	ldr	r3, [pc, #604]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 030c 	and.w	r3, r3, #12
 8005af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005af8:	4b94      	ldr	r3, [pc, #592]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	d102      	bne.n	8005b0e <HAL_RCC_OscConfig+0x3e>
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d002      	beq.n	8005b14 <HAL_RCC_OscConfig+0x44>
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d10b      	bne.n	8005b2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b14:	4b8d      	ldr	r3, [pc, #564]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d05b      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x108>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d157      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e2d9      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b34:	d106      	bne.n	8005b44 <HAL_RCC_OscConfig+0x74>
 8005b36:	4b85      	ldr	r3, [pc, #532]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a84      	ldr	r2, [pc, #528]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	e01d      	b.n	8005b80 <HAL_RCC_OscConfig+0xb0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCC_OscConfig+0x98>
 8005b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a7e      	ldr	r2, [pc, #504]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a7b      	ldr	r2, [pc, #492]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	e00b      	b.n	8005b80 <HAL_RCC_OscConfig+0xb0>
 8005b68:	4b78      	ldr	r3, [pc, #480]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a77      	ldr	r2, [pc, #476]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	4b75      	ldr	r3, [pc, #468]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a74      	ldr	r2, [pc, #464]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d013      	beq.n	8005bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fd fc32 	bl	80033f0 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b90:	f7fd fc2e 	bl	80033f0 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b64      	cmp	r3, #100	@ 0x64
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e29e      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f0      	beq.n	8005b90 <HAL_RCC_OscConfig+0xc0>
 8005bae:	e014      	b.n	8005bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb0:	f7fd fc1e 	bl	80033f0 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb8:	f7fd fc1a 	bl	80033f0 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b64      	cmp	r3, #100	@ 0x64
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e28a      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bca:	4b60      	ldr	r3, [pc, #384]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1f0      	bne.n	8005bb8 <HAL_RCC_OscConfig+0xe8>
 8005bd6:	e000      	b.n	8005bda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d075      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005be6:	4b59      	ldr	r3, [pc, #356]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
 8005bee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bf0:	4b56      	ldr	r3, [pc, #344]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b0c      	cmp	r3, #12
 8005bfe:	d102      	bne.n	8005c06 <HAL_RCC_OscConfig+0x136>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d002      	beq.n	8005c0c <HAL_RCC_OscConfig+0x13c>
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d11f      	bne.n	8005c4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_OscConfig+0x154>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e25d      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c24:	4b49      	ldr	r3, [pc, #292]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	4946      	ldr	r1, [pc, #280]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c38:	4b45      	ldr	r3, [pc, #276]	@ (8005d50 <HAL_RCC_OscConfig+0x280>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fd fb8b 	bl	8003358 <HAL_InitTick>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d043      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e249      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d023      	beq.n	8005c9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c54:	4b3d      	ldr	r3, [pc, #244]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a3c      	ldr	r2, [pc, #240]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fd fbc6 	bl	80033f0 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c68:	f7fd fbc2 	bl	80033f0 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e232      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c7a:	4b34      	ldr	r3, [pc, #208]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0f0      	beq.n	8005c68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c86:	4b31      	ldr	r3, [pc, #196]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	061b      	lsls	r3, r3, #24
 8005c94:	492d      	ldr	r1, [pc, #180]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	604b      	str	r3, [r1, #4]
 8005c9a:	e01a      	b.n	8005cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005ca2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fd fba2 	bl	80033f0 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb0:	f7fd fb9e 	bl	80033f0 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e20e      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cc2:	4b22      	ldr	r3, [pc, #136]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x1e0>
 8005cce:	e000      	b.n	8005cd2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d041      	beq.n	8005d62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01c      	beq.n	8005d20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ce6:	4b19      	ldr	r3, [pc, #100]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cec:	4a17      	ldr	r2, [pc, #92]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005cee:	f043 0301 	orr.w	r3, r3, #1
 8005cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf6:	f7fd fb7b 	bl	80033f0 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cfe:	f7fd fb77 	bl	80033f0 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e1e7      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d10:	4b0e      	ldr	r3, [pc, #56]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0ef      	beq.n	8005cfe <HAL_RCC_OscConfig+0x22e>
 8005d1e:	e020      	b.n	8005d62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d20:	4b0a      	ldr	r3, [pc, #40]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d26:	4a09      	ldr	r2, [pc, #36]	@ (8005d4c <HAL_RCC_OscConfig+0x27c>)
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fd fb5e 	bl	80033f0 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d36:	e00d      	b.n	8005d54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d38:	f7fd fb5a 	bl	80033f0 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d906      	bls.n	8005d54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e1ca      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
 8005d4a:	bf00      	nop
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d54:	4b8c      	ldr	r3, [pc, #560]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1ea      	bne.n	8005d38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80a6 	beq.w	8005ebc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d70:	2300      	movs	r3, #0
 8005d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d74:	4b84      	ldr	r3, [pc, #528]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_OscConfig+0x2b4>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <HAL_RCC_OscConfig+0x2b6>
 8005d84:	2300      	movs	r3, #0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00d      	beq.n	8005da6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d96:	4b7c      	ldr	r3, [pc, #496]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005da2:	2301      	movs	r3, #1
 8005da4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da6:	4b79      	ldr	r3, [pc, #484]	@ (8005f8c <HAL_RCC_OscConfig+0x4bc>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d118      	bne.n	8005de4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005db2:	4b76      	ldr	r3, [pc, #472]	@ (8005f8c <HAL_RCC_OscConfig+0x4bc>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a75      	ldr	r2, [pc, #468]	@ (8005f8c <HAL_RCC_OscConfig+0x4bc>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dbe:	f7fd fb17 	bl	80033f0 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc6:	f7fd fb13 	bl	80033f0 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e183      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd8:	4b6c      	ldr	r3, [pc, #432]	@ (8005f8c <HAL_RCC_OscConfig+0x4bc>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d108      	bne.n	8005dfe <HAL_RCC_OscConfig+0x32e>
 8005dec:	4b66      	ldr	r3, [pc, #408]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df2:	4a65      	ldr	r2, [pc, #404]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dfc:	e024      	b.n	8005e48 <HAL_RCC_OscConfig+0x378>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b05      	cmp	r3, #5
 8005e04:	d110      	bne.n	8005e28 <HAL_RCC_OscConfig+0x358>
 8005e06:	4b60      	ldr	r3, [pc, #384]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e0e:	f043 0304 	orr.w	r3, r3, #4
 8005e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e16:	4b5c      	ldr	r3, [pc, #368]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e26:	e00f      	b.n	8005e48 <HAL_RCC_OscConfig+0x378>
 8005e28:	4b57      	ldr	r3, [pc, #348]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2e:	4a56      	ldr	r2, [pc, #344]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005e38:	4b53      	ldr	r3, [pc, #332]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e3e:	4a52      	ldr	r2, [pc, #328]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e40:	f023 0304 	bic.w	r3, r3, #4
 8005e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e50:	f7fd face 	bl	80033f0 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e56:	e00a      	b.n	8005e6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e58:	f7fd faca 	bl	80033f0 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e138      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e6e:	4b46      	ldr	r3, [pc, #280]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0ed      	beq.n	8005e58 <HAL_RCC_OscConfig+0x388>
 8005e7c:	e015      	b.n	8005eaa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7e:	f7fd fab7 	bl	80033f0 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e84:	e00a      	b.n	8005e9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e86:	f7fd fab3 	bl	80033f0 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e121      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1ed      	bne.n	8005e86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005eaa:	7ffb      	ldrb	r3, [r7, #31]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d105      	bne.n	8005ebc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb0:	4b35      	ldr	r3, [pc, #212]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb4:	4a34      	ldr	r2, [pc, #208]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d03c      	beq.n	8005f42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01c      	beq.n	8005f0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee0:	f7fd fa86 	bl	80033f0 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ee8:	f7fd fa82 	bl	80033f0 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e0f2      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005efa:	4b23      	ldr	r3, [pc, #140]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0ef      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x418>
 8005f08:	e01b      	b.n	8005f42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f10:	4a1d      	ldr	r2, [pc, #116]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1a:	f7fd fa69 	bl	80033f0 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f22:	f7fd fa65 	bl	80033f0 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e0d5      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f34:	4b14      	ldr	r3, [pc, #80]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1ef      	bne.n	8005f22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80c9 	beq.w	80060de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f003 030c 	and.w	r3, r3, #12
 8005f54:	2b0c      	cmp	r3, #12
 8005f56:	f000 8083 	beq.w	8006060 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d15e      	bne.n	8006020 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f62:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a08      	ldr	r2, [pc, #32]	@ (8005f88 <HAL_RCC_OscConfig+0x4b8>)
 8005f68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6e:	f7fd fa3f 	bl	80033f0 <HAL_GetTick>
 8005f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f74:	e00c      	b.n	8005f90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f76:	f7fd fa3b 	bl	80033f0 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d905      	bls.n	8005f90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e0ab      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f90:	4b55      	ldr	r3, [pc, #340]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1ec      	bne.n	8005f76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f9c:	4b52      	ldr	r3, [pc, #328]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	4b52      	ldr	r3, [pc, #328]	@ (80060ec <HAL_RCC_OscConfig+0x61c>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6a11      	ldr	r1, [r2, #32]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fac:	3a01      	subs	r2, #1
 8005fae:	0112      	lsls	r2, r2, #4
 8005fb0:	4311      	orrs	r1, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005fb6:	0212      	lsls	r2, r2, #8
 8005fb8:	4311      	orrs	r1, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005fbe:	0852      	lsrs	r2, r2, #1
 8005fc0:	3a01      	subs	r2, #1
 8005fc2:	0552      	lsls	r2, r2, #21
 8005fc4:	4311      	orrs	r1, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005fca:	0852      	lsrs	r2, r2, #1
 8005fcc:	3a01      	subs	r2, #1
 8005fce:	0652      	lsls	r2, r2, #25
 8005fd0:	4311      	orrs	r1, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005fd6:	06d2      	lsls	r2, r2, #27
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	4943      	ldr	r1, [pc, #268]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe0:	4b41      	ldr	r3, [pc, #260]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a40      	ldr	r2, [pc, #256]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8005fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fec:	4b3e      	ldr	r3, [pc, #248]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4a3d      	ldr	r2, [pc, #244]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8005ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ff6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fd f9fa 	bl	80033f0 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006000:	f7fd f9f6 	bl	80033f0 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e066      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006012:	4b35      	ldr	r3, [pc, #212]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x530>
 800601e:	e05e      	b.n	80060de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006020:	4b31      	ldr	r3, [pc, #196]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a30      	ldr	r2, [pc, #192]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8006026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800602a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fd f9e0 	bl	80033f0 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006034:	f7fd f9dc 	bl	80033f0 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e04c      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006046:	4b28      	ldr	r3, [pc, #160]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f0      	bne.n	8006034 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006052:	4b25      	ldr	r3, [pc, #148]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	4924      	ldr	r1, [pc, #144]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 8006058:	4b25      	ldr	r3, [pc, #148]	@ (80060f0 <HAL_RCC_OscConfig+0x620>)
 800605a:	4013      	ands	r3, r2
 800605c:	60cb      	str	r3, [r1, #12]
 800605e:	e03e      	b.n	80060de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e039      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800606c:	4b1e      	ldr	r3, [pc, #120]	@ (80060e8 <HAL_RCC_OscConfig+0x618>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f003 0203 	and.w	r2, r3, #3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	429a      	cmp	r2, r3
 800607e:	d12c      	bne.n	80060da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	3b01      	subs	r3, #1
 800608c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800608e:	429a      	cmp	r2, r3
 8006090:	d123      	bne.n	80060da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800609e:	429a      	cmp	r2, r3
 80060a0:	d11b      	bne.n	80060da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d113      	bne.n	80060da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	3b01      	subs	r3, #1
 80060c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d109      	bne.n	80060da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	3b01      	subs	r3, #1
 80060d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d001      	beq.n	80060de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40021000 	.word	0x40021000
 80060ec:	019f800c 	.word	0x019f800c
 80060f0:	feeefffc 	.word	0xfeeefffc

080060f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e11e      	b.n	800634a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800610c:	4b91      	ldr	r3, [pc, #580]	@ (8006354 <HAL_RCC_ClockConfig+0x260>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d910      	bls.n	800613c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800611a:	4b8e      	ldr	r3, [pc, #568]	@ (8006354 <HAL_RCC_ClockConfig+0x260>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f023 020f 	bic.w	r2, r3, #15
 8006122:	498c      	ldr	r1, [pc, #560]	@ (8006354 <HAL_RCC_ClockConfig+0x260>)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	4313      	orrs	r3, r2
 8006128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800612a:	4b8a      	ldr	r3, [pc, #552]	@ (8006354 <HAL_RCC_ClockConfig+0x260>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d001      	beq.n	800613c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e106      	b.n	800634a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d073      	beq.n	8006230 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d129      	bne.n	80061a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006150:	4b81      	ldr	r3, [pc, #516]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0f4      	b.n	800634a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006160:	f000 f99c 	bl	800649c <RCC_GetSysClockFreqFromPLLSource>
 8006164:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4a7c      	ldr	r2, [pc, #496]	@ (800635c <HAL_RCC_ClockConfig+0x268>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d93f      	bls.n	80061ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800616e:	4b7a      	ldr	r3, [pc, #488]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006182:	2b00      	cmp	r3, #0
 8006184:	d033      	beq.n	80061ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800618a:	2b00      	cmp	r3, #0
 800618c:	d12f      	bne.n	80061ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800618e:	4b72      	ldr	r3, [pc, #456]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006196:	4a70      	ldr	r2, [pc, #448]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 8006198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800619c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800619e:	2380      	movs	r3, #128	@ 0x80
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	e024      	b.n	80061ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d107      	bne.n	80061bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061ac:	4b6a      	ldr	r3, [pc, #424]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0c6      	b.n	800634a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061bc:	4b66      	ldr	r3, [pc, #408]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0be      	b.n	800634a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80061cc:	f000 f8ce 	bl	800636c <HAL_RCC_GetSysClockFreq>
 80061d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	4a61      	ldr	r2, [pc, #388]	@ (800635c <HAL_RCC_ClockConfig+0x268>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d909      	bls.n	80061ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061da:	4b5f      	ldr	r3, [pc, #380]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061e2:	4a5d      	ldr	r2, [pc, #372]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 80061e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80061ea:	2380      	movs	r3, #128	@ 0x80
 80061ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061ee:	4b5a      	ldr	r3, [pc, #360]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f023 0203 	bic.w	r2, r3, #3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4957      	ldr	r1, [pc, #348]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006200:	f7fd f8f6 	bl	80033f0 <HAL_GetTick>
 8006204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006206:	e00a      	b.n	800621e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006208:	f7fd f8f2 	bl	80033f0 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006216:	4293      	cmp	r3, r2
 8006218:	d901      	bls.n	800621e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e095      	b.n	800634a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800621e:	4b4e      	ldr	r3, [pc, #312]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 020c 	and.w	r2, r3, #12
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	429a      	cmp	r2, r3
 800622e:	d1eb      	bne.n	8006208 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d023      	beq.n	8006284 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006248:	4b43      	ldr	r3, [pc, #268]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4a42      	ldr	r2, [pc, #264]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 800624e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006252:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006260:	4b3d      	ldr	r3, [pc, #244]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006268:	4a3b      	ldr	r2, [pc, #236]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 800626a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800626e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006270:	4b39      	ldr	r3, [pc, #228]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4936      	ldr	r1, [pc, #216]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 800627e:	4313      	orrs	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
 8006282:	e008      	b.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b80      	cmp	r3, #128	@ 0x80
 8006288:	d105      	bne.n	8006296 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800628a:	4b33      	ldr	r3, [pc, #204]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	4a32      	ldr	r2, [pc, #200]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 8006290:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006294:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006296:	4b2f      	ldr	r3, [pc, #188]	@ (8006354 <HAL_RCC_ClockConfig+0x260>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d21d      	bcs.n	80062e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006354 <HAL_RCC_ClockConfig+0x260>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f023 020f 	bic.w	r2, r3, #15
 80062ac:	4929      	ldr	r1, [pc, #164]	@ (8006354 <HAL_RCC_ClockConfig+0x260>)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062b4:	f7fd f89c 	bl	80033f0 <HAL_GetTick>
 80062b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ba:	e00a      	b.n	80062d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062bc:	f7fd f898 	bl	80033f0 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e03b      	b.n	800634a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d2:	4b20      	ldr	r3, [pc, #128]	@ (8006354 <HAL_RCC_ClockConfig+0x260>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d1ed      	bne.n	80062bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4917      	ldr	r1, [pc, #92]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d009      	beq.n	800631e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800630a:	4b13      	ldr	r3, [pc, #76]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	490f      	ldr	r1, [pc, #60]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 800631a:	4313      	orrs	r3, r2
 800631c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800631e:	f000 f825 	bl	800636c <HAL_RCC_GetSysClockFreq>
 8006322:	4602      	mov	r2, r0
 8006324:	4b0c      	ldr	r3, [pc, #48]	@ (8006358 <HAL_RCC_ClockConfig+0x264>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	490c      	ldr	r1, [pc, #48]	@ (8006360 <HAL_RCC_ClockConfig+0x26c>)
 8006330:	5ccb      	ldrb	r3, [r1, r3]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	fa22 f303 	lsr.w	r3, r2, r3
 800633a:	4a0a      	ldr	r2, [pc, #40]	@ (8006364 <HAL_RCC_ClockConfig+0x270>)
 800633c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800633e:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <HAL_RCC_ClockConfig+0x274>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f7fd f808 	bl	8003358 <HAL_InitTick>
 8006348:	4603      	mov	r3, r0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40022000 	.word	0x40022000
 8006358:	40021000 	.word	0x40021000
 800635c:	04c4b400 	.word	0x04c4b400
 8006360:	08010eec 	.word	0x08010eec
 8006364:	2000000c 	.word	0x2000000c
 8006368:	20000010 	.word	0x20000010

0800636c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006372:	4b2c      	ldr	r3, [pc, #176]	@ (8006424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b04      	cmp	r3, #4
 800637c:	d102      	bne.n	8006384 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800637e:	4b2a      	ldr	r3, [pc, #168]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	e047      	b.n	8006414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006384:	4b27      	ldr	r3, [pc, #156]	@ (8006424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 030c 	and.w	r3, r3, #12
 800638c:	2b08      	cmp	r3, #8
 800638e:	d102      	bne.n	8006396 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006390:	4b25      	ldr	r3, [pc, #148]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e03e      	b.n	8006414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006396:	4b23      	ldr	r3, [pc, #140]	@ (8006424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b0c      	cmp	r3, #12
 80063a0:	d136      	bne.n	8006410 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063a2:	4b20      	ldr	r3, [pc, #128]	@ (8006424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	3301      	adds	r3, #1
 80063b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d10c      	bne.n	80063da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063c0:	4a19      	ldr	r2, [pc, #100]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xbc>)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c8:	4a16      	ldr	r2, [pc, #88]	@ (8006424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063ca:	68d2      	ldr	r2, [r2, #12]
 80063cc:	0a12      	lsrs	r2, r2, #8
 80063ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
 80063d6:	617b      	str	r3, [r7, #20]
      break;
 80063d8:	e00c      	b.n	80063f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063da:	4a13      	ldr	r2, [pc, #76]	@ (8006428 <HAL_RCC_GetSysClockFreq+0xbc>)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e2:	4a10      	ldr	r2, [pc, #64]	@ (8006424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063e4:	68d2      	ldr	r2, [r2, #12]
 80063e6:	0a12      	lsrs	r2, r2, #8
 80063e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80063ec:	fb02 f303 	mul.w	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]
      break;
 80063f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	0e5b      	lsrs	r3, r3, #25
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	3301      	adds	r3, #1
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	fbb2 f3f3 	udiv	r3, r2, r3
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	e001      	b.n	8006414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006414:	693b      	ldr	r3, [r7, #16]
}
 8006416:	4618      	mov	r0, r3
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40021000 	.word	0x40021000
 8006428:	00f42400 	.word	0x00f42400

0800642c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006430:	4b03      	ldr	r3, [pc, #12]	@ (8006440 <HAL_RCC_GetHCLKFreq+0x14>)
 8006432:	681b      	ldr	r3, [r3, #0]
}
 8006434:	4618      	mov	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	2000000c 	.word	0x2000000c

08006444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006448:	f7ff fff0 	bl	800642c <HAL_RCC_GetHCLKFreq>
 800644c:	4602      	mov	r2, r0
 800644e:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	4904      	ldr	r1, [pc, #16]	@ (800646c <HAL_RCC_GetPCLK1Freq+0x28>)
 800645a:	5ccb      	ldrb	r3, [r1, r3]
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40021000 	.word	0x40021000
 800646c:	08010efc 	.word	0x08010efc

08006470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006474:	f7ff ffda 	bl	800642c <HAL_RCC_GetHCLKFreq>
 8006478:	4602      	mov	r2, r0
 800647a:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	0adb      	lsrs	r3, r3, #11
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	4904      	ldr	r1, [pc, #16]	@ (8006498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006486:	5ccb      	ldrb	r3, [r1, r3]
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006490:	4618      	mov	r0, r3
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40021000 	.word	0x40021000
 8006498:	08010efc 	.word	0x08010efc

0800649c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064a2:	4b1e      	ldr	r3, [pc, #120]	@ (800651c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064ac:	4b1b      	ldr	r3, [pc, #108]	@ (800651c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	3301      	adds	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d10c      	bne.n	80064da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064c0:	4a17      	ldr	r2, [pc, #92]	@ (8006520 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	4a14      	ldr	r2, [pc, #80]	@ (800651c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064ca:	68d2      	ldr	r2, [r2, #12]
 80064cc:	0a12      	lsrs	r2, r2, #8
 80064ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064d2:	fb02 f303 	mul.w	r3, r2, r3
 80064d6:	617b      	str	r3, [r7, #20]
    break;
 80064d8:	e00c      	b.n	80064f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064da:	4a11      	ldr	r2, [pc, #68]	@ (8006520 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e2:	4a0e      	ldr	r2, [pc, #56]	@ (800651c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064e4:	68d2      	ldr	r2, [r2, #12]
 80064e6:	0a12      	lsrs	r2, r2, #8
 80064e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80064ec:	fb02 f303 	mul.w	r3, r2, r3
 80064f0:	617b      	str	r3, [r7, #20]
    break;
 80064f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064f4:	4b09      	ldr	r3, [pc, #36]	@ (800651c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	0e5b      	lsrs	r3, r3, #25
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	3301      	adds	r3, #1
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800650e:	687b      	ldr	r3, [r7, #4]
}
 8006510:	4618      	mov	r0, r3
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	40021000 	.word	0x40021000
 8006520:	00f42400 	.word	0x00f42400

08006524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800652c:	2300      	movs	r3, #0
 800652e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006530:	2300      	movs	r3, #0
 8006532:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8098 	beq.w	8006672 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006542:	2300      	movs	r3, #0
 8006544:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006546:	4b43      	ldr	r3, [pc, #268]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10d      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006552:	4b40      	ldr	r3, [pc, #256]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006556:	4a3f      	ldr	r2, [pc, #252]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655c:	6593      	str	r3, [r2, #88]	@ 0x58
 800655e:	4b3d      	ldr	r3, [pc, #244]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006566:	60bb      	str	r3, [r7, #8]
 8006568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800656a:	2301      	movs	r3, #1
 800656c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800656e:	4b3a      	ldr	r3, [pc, #232]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a39      	ldr	r2, [pc, #228]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006578:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800657a:	f7fc ff39 	bl	80033f0 <HAL_GetTick>
 800657e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006580:	e009      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006582:	f7fc ff35 	bl	80033f0 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d902      	bls.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	74fb      	strb	r3, [r7, #19]
        break;
 8006594:	e005      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006596:	4b30      	ldr	r3, [pc, #192]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0ef      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80065a2:	7cfb      	ldrb	r3, [r7, #19]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d159      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01e      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d019      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065c4:	4b23      	ldr	r3, [pc, #140]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065d0:	4b20      	ldr	r3, [pc, #128]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065f0:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d016      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006602:	f7fc fef5 	bl	80033f0 <HAL_GetTick>
 8006606:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006608:	e00b      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800660a:	f7fc fef1 	bl	80033f0 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006618:	4293      	cmp	r3, r2
 800661a:	d902      	bls.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	74fb      	strb	r3, [r7, #19]
            break;
 8006620:	e006      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006622:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0ec      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006630:	7cfb      	ldrb	r3, [r7, #19]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10b      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006636:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	4903      	ldr	r1, [pc, #12]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800664c:	e008      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800664e:	7cfb      	ldrb	r3, [r7, #19]
 8006650:	74bb      	strb	r3, [r7, #18]
 8006652:	e005      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006654:	40021000 	.word	0x40021000
 8006658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665c:	7cfb      	ldrb	r3, [r7, #19]
 800665e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006660:	7c7b      	ldrb	r3, [r7, #17]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d105      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006666:	4ba6      	ldr	r3, [pc, #664]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666a:	4aa5      	ldr	r2, [pc, #660]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800666c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006670:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800667e:	4ba0      	ldr	r3, [pc, #640]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006684:	f023 0203 	bic.w	r2, r3, #3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	499c      	ldr	r1, [pc, #624]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066a0:	4b97      	ldr	r3, [pc, #604]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a6:	f023 020c 	bic.w	r2, r3, #12
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	4994      	ldr	r1, [pc, #592]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	498b      	ldr	r1, [pc, #556]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066e4:	4b86      	ldr	r3, [pc, #536]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	4983      	ldr	r1, [pc, #524]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006706:	4b7e      	ldr	r3, [pc, #504]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	497a      	ldr	r1, [pc, #488]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006728:	4b75      	ldr	r3, [pc, #468]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	4972      	ldr	r1, [pc, #456]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800674a:	4b6d      	ldr	r3, [pc, #436]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006750:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	4969      	ldr	r1, [pc, #420]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800676c:	4b64      	ldr	r3, [pc, #400]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800676e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006772:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	4961      	ldr	r1, [pc, #388]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800678e:	4b5c      	ldr	r3, [pc, #368]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006794:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679c:	4958      	ldr	r1, [pc, #352]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d015      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067b0:	4b53      	ldr	r3, [pc, #332]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	4950      	ldr	r1, [pc, #320]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ce:	d105      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d015      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067e8:	4b45      	ldr	r3, [pc, #276]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f6:	4942      	ldr	r1, [pc, #264]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006806:	d105      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006808:	4b3d      	ldr	r3, [pc, #244]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4a3c      	ldr	r2, [pc, #240]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800680e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006812:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d015      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006820:	4b37      	ldr	r3, [pc, #220]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006826:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682e:	4934      	ldr	r1, [pc, #208]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800683a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800683e:	d105      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006840:	4b2f      	ldr	r3, [pc, #188]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4a2e      	ldr	r2, [pc, #184]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800684a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d015      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006858:	4b29      	ldr	r3, [pc, #164]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006866:	4926      	ldr	r1, [pc, #152]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006876:	d105      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006878:	4b21      	ldr	r3, [pc, #132]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	4a20      	ldr	r2, [pc, #128]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800687e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006882:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d015      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006890:	4b1b      	ldr	r3, [pc, #108]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006896:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689e:	4918      	ldr	r1, [pc, #96]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ae:	d105      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068b0:	4b13      	ldr	r3, [pc, #76]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	4a12      	ldr	r2, [pc, #72]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d015      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d6:	490a      	ldr	r1, [pc, #40]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068e6:	d105      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068e8:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	4a04      	ldr	r2, [pc, #16]	@ (8006900 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80068f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	40021000 	.word	0x40021000

08006904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e09d      	b.n	8006a52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d108      	bne.n	8006930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006926:	d009      	beq.n	800693c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	61da      	str	r2, [r3, #28]
 800692e:	e005      	b.n	800693c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fb fe7e 	bl	8002658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006972:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800697c:	d902      	bls.n	8006984 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	e002      	b.n	800698a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006988:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006992:	d007      	beq.n	80069a4 <HAL_SPI_Init+0xa0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800699c:	d002      	beq.n	80069a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e6:	ea42 0103 	orr.w	r1, r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	0c1b      	lsrs	r3, r3, #16
 8006a00:	f003 0204 	and.w	r2, r3, #4
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a20:	ea42 0103 	orr.w	r1, r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b088      	sub	sp, #32
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a6a:	f7fc fcc1 	bl	80033f0 <HAL_GetTick>
 8006a6e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d001      	beq.n	8006a84 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
 8006a82:	e15c      	b.n	8006d3e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_SPI_Transmit+0x36>
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e154      	b.n	8006d3e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_SPI_Transmit+0x48>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e14d      	b.n	8006d3e <HAL_SPI_Transmit+0x2e4>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2203      	movs	r2, #3
 8006aae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	88fa      	ldrh	r2, [r7, #6]
 8006ac2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	88fa      	ldrh	r2, [r7, #6]
 8006ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006af4:	d10f      	bne.n	8006b16 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b40      	cmp	r3, #64	@ 0x40
 8006b22:	d007      	beq.n	8006b34 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b3c:	d952      	bls.n	8006be4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_SPI_Transmit+0xf2>
 8006b46:	8b7b      	ldrh	r3, [r7, #26]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d145      	bne.n	8006bd8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	881a      	ldrh	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	1c9a      	adds	r2, r3, #2
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b70:	e032      	b.n	8006bd8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d112      	bne.n	8006ba6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b84:	881a      	ldrh	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b90:	1c9a      	adds	r2, r3, #2
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ba4:	e018      	b.n	8006bd8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ba6:	f7fc fc23 	bl	80033f0 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d803      	bhi.n	8006bbe <HAL_SPI_Transmit+0x164>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d102      	bne.n	8006bc4 <HAL_SPI_Transmit+0x16a>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d109      	bne.n	8006bd8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e0b2      	b.n	8006d3e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1c7      	bne.n	8006b72 <HAL_SPI_Transmit+0x118>
 8006be2:	e083      	b.n	8006cec <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_SPI_Transmit+0x198>
 8006bec:	8b7b      	ldrh	r3, [r7, #26]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d177      	bne.n	8006ce2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d912      	bls.n	8006c22 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c00:	881a      	ldrh	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	1c9a      	adds	r2, r3, #2
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	3b02      	subs	r3, #2
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c20:	e05f      	b.n	8006ce2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	330c      	adds	r3, #12
 8006c2c:	7812      	ldrb	r2, [r2, #0]
 8006c2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c48:	e04b      	b.n	8006ce2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d12b      	bne.n	8006cb0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d912      	bls.n	8006c88 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c66:	881a      	ldrh	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	1c9a      	adds	r2, r3, #2
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b02      	subs	r3, #2
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c86:	e02c      	b.n	8006ce2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006cae:	e018      	b.n	8006ce2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb0:	f7fc fb9e 	bl	80033f0 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d803      	bhi.n	8006cc8 <HAL_SPI_Transmit+0x26e>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d102      	bne.n	8006cce <HAL_SPI_Transmit+0x274>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e02d      	b.n	8006d3e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1ae      	bne.n	8006c4a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fb73 	bl	80073dc <SPI_EndRxTxTransaction>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
  }
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b08a      	sub	sp, #40	@ 0x28
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d54:	2301      	movs	r3, #1
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d58:	f7fc fb4a 	bl	80033f0 <HAL_GetTick>
 8006d5c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d64:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006d6c:	887b      	ldrh	r3, [r7, #2]
 8006d6e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d74:	7ffb      	ldrb	r3, [r7, #31]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d00c      	beq.n	8006d94 <HAL_SPI_TransmitReceive+0x4e>
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d80:	d106      	bne.n	8006d90 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <HAL_SPI_TransmitReceive+0x4a>
 8006d8a:	7ffb      	ldrb	r3, [r7, #31]
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d001      	beq.n	8006d94 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
 8006d92:	e1f3      	b.n	800717c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <HAL_SPI_TransmitReceive+0x60>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <HAL_SPI_TransmitReceive+0x60>
 8006da0:	887b      	ldrh	r3, [r7, #2]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e1e8      	b.n	800717c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_SPI_TransmitReceive+0x72>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e1e1      	b.n	800717c <HAL_SPI_TransmitReceive+0x436>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d003      	beq.n	8006dd4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2205      	movs	r2, #5
 8006dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	887a      	ldrh	r2, [r7, #2]
 8006de4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	887a      	ldrh	r2, [r7, #2]
 8006dec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	887a      	ldrh	r2, [r7, #2]
 8006dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	887a      	ldrh	r2, [r7, #2]
 8006e00:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e16:	d802      	bhi.n	8006e1e <HAL_SPI_TransmitReceive+0xd8>
 8006e18:	8abb      	ldrh	r3, [r7, #20]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d908      	bls.n	8006e30 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	e007      	b.n	8006e40 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e4a:	2b40      	cmp	r3, #64	@ 0x40
 8006e4c:	d007      	beq.n	8006e5e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e66:	f240 8083 	bls.w	8006f70 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <HAL_SPI_TransmitReceive+0x132>
 8006e72:	8afb      	ldrh	r3, [r7, #22]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d16f      	bne.n	8006f58 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	881a      	ldrh	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e88:	1c9a      	adds	r2, r3, #2
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e9c:	e05c      	b.n	8006f58 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d11b      	bne.n	8006ee4 <HAL_SPI_TransmitReceive+0x19e>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d016      	beq.n	8006ee4 <HAL_SPI_TransmitReceive+0x19e>
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d113      	bne.n	8006ee4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	881a      	ldrh	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ecc:	1c9a      	adds	r2, r3, #2
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d11c      	bne.n	8006f2c <HAL_SPI_TransmitReceive+0x1e6>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d016      	beq.n	8006f2c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f08:	b292      	uxth	r2, r2
 8006f0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f10:	1c9a      	adds	r2, r3, #2
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f2c:	f7fc fa60 	bl	80033f0 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d80d      	bhi.n	8006f58 <HAL_SPI_TransmitReceive+0x212>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d009      	beq.n	8006f58 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e111      	b.n	800717c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d19d      	bne.n	8006e9e <HAL_SPI_TransmitReceive+0x158>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d197      	bne.n	8006e9e <HAL_SPI_TransmitReceive+0x158>
 8006f6e:	e0e5      	b.n	800713c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <HAL_SPI_TransmitReceive+0x23a>
 8006f78:	8afb      	ldrh	r3, [r7, #22]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	f040 80d1 	bne.w	8007122 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d912      	bls.n	8006fb0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8e:	881a      	ldrh	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9a:	1c9a      	adds	r2, r3, #2
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b02      	subs	r3, #2
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fae:	e0b8      	b.n	8007122 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	330c      	adds	r3, #12
 8006fba:	7812      	ldrb	r2, [r2, #0]
 8006fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fd6:	e0a4      	b.n	8007122 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d134      	bne.n	8007050 <HAL_SPI_TransmitReceive+0x30a>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d02f      	beq.n	8007050 <HAL_SPI_TransmitReceive+0x30a>
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d12c      	bne.n	8007050 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d912      	bls.n	8007026 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007004:	881a      	ldrh	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	1c9a      	adds	r2, r3, #2
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b02      	subs	r3, #2
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007024:	e012      	b.n	800704c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	330c      	adds	r3, #12
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b01      	cmp	r3, #1
 800705c:	d148      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x3aa>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d042      	beq.n	80070f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b01      	cmp	r3, #1
 8007074:	d923      	bls.n	80070be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007080:	b292      	uxth	r2, r2
 8007082:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007088:	1c9a      	adds	r2, r3, #2
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007094:	b29b      	uxth	r3, r3
 8007096:	3b02      	subs	r3, #2
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d81f      	bhi.n	80070ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070ba:	605a      	str	r2, [r3, #4]
 80070bc:	e016      	b.n	80070ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f103 020c 	add.w	r2, r3, #12
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070ec:	2301      	movs	r3, #1
 80070ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070f0:	f7fc f97e 	bl	80033f0 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d803      	bhi.n	8007108 <HAL_SPI_TransmitReceive+0x3c2>
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d102      	bne.n	800710e <HAL_SPI_TransmitReceive+0x3c8>
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e02c      	b.n	800717c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	f47f af55 	bne.w	8006fd8 <HAL_SPI_TransmitReceive+0x292>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	f47f af4e 	bne.w	8006fd8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800713c:	6a3a      	ldr	r2, [r7, #32]
 800713e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f000 f94b 	bl	80073dc <SPI_EndRxTxTransaction>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e00e      	b.n	800717c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800717a:	2300      	movs	r3, #0
  }
}
 800717c:	4618      	mov	r0, r3
 800717e:	3728      	adds	r7, #40	@ 0x28
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007192:	b2db      	uxtb	r3, r3
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	4613      	mov	r3, r2
 80071ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071b0:	f7fc f91e 	bl	80033f0 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	1a9b      	subs	r3, r3, r2
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	4413      	add	r3, r2
 80071be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071c0:	f7fc f916 	bl	80033f0 <HAL_GetTick>
 80071c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071c6:	4b39      	ldr	r3, [pc, #228]	@ (80072ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	015b      	lsls	r3, r3, #5
 80071cc:	0d1b      	lsrs	r3, r3, #20
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	fb02 f303 	mul.w	r3, r2, r3
 80071d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071d6:	e054      	b.n	8007282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d050      	beq.n	8007282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071e0:	f7fc f906 	bl	80033f0 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d902      	bls.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d13d      	bne.n	8007272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800720e:	d111      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007218:	d004      	beq.n	8007224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007222:	d107      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800723c:	d10f      	bne.n	800725e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800725c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e017      	b.n	80072a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	3b01      	subs	r3, #1
 8007280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	429a      	cmp	r2, r3
 8007290:	bf0c      	ite	eq
 8007292:	2301      	moveq	r3, #1
 8007294:	2300      	movne	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	429a      	cmp	r2, r3
 800729e:	d19b      	bne.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	2000000c 	.word	0x2000000c

080072b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	@ 0x28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072c2:	f7fc f895 	bl	80033f0 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	4413      	add	r3, r2
 80072d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80072d2:	f7fc f88d 	bl	80033f0 <HAL_GetTick>
 80072d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	330c      	adds	r3, #12
 80072de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072e0:	4b3d      	ldr	r3, [pc, #244]	@ (80073d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	00da      	lsls	r2, r3, #3
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	0d1b      	lsrs	r3, r3, #20
 80072f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072f8:	e060      	b.n	80073bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007300:	d107      	bne.n	8007312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d050      	beq.n	80073bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800731a:	f7fc f869 	bl	80033f0 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007326:	429a      	cmp	r2, r3
 8007328:	d902      	bls.n	8007330 <SPI_WaitFifoStateUntilTimeout+0x80>
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d13d      	bne.n	80073ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800733e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007348:	d111      	bne.n	800736e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007352:	d004      	beq.n	800735e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800735c:	d107      	bne.n	800736e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800736c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007376:	d10f      	bne.n	8007398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e010      	b.n	80073ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4013      	ands	r3, r2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d196      	bne.n	80072fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3728      	adds	r7, #40	@ 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	2000000c 	.word	0x2000000c

080073dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff ff5b 	bl	80072b0 <SPI_WaitFifoStateUntilTimeout>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d007      	beq.n	8007410 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007404:	f043 0220 	orr.w	r2, r3, #32
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e027      	b.n	8007460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2200      	movs	r2, #0
 8007418:	2180      	movs	r1, #128	@ 0x80
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f7ff fec0 	bl	80071a0 <SPI_WaitFlagStateUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800742a:	f043 0220 	orr.w	r2, r3, #32
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e014      	b.n	8007460 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f7ff ff34 	bl	80072b0 <SPI_WaitFifoStateUntilTimeout>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007452:	f043 0220 	orr.w	r2, r3, #32
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e000      	b.n	8007460 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e049      	b.n	800750e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fb fba2 	bl	8002bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3304      	adds	r3, #4
 80074a4:	4619      	mov	r1, r3
 80074a6:	4610      	mov	r0, r2
 80074a8:	f000 fb08 	bl	8007abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b01      	cmp	r3, #1
 800752a:	d001      	beq.n	8007530 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e042      	b.n	80075b6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a21      	ldr	r2, [pc, #132]	@ (80075c4 <HAL_TIM_Base_Start+0xac>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d018      	beq.n	8007574 <HAL_TIM_Base_Start+0x5c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800754a:	d013      	beq.n	8007574 <HAL_TIM_Base_Start+0x5c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1d      	ldr	r2, [pc, #116]	@ (80075c8 <HAL_TIM_Base_Start+0xb0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00e      	beq.n	8007574 <HAL_TIM_Base_Start+0x5c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1c      	ldr	r2, [pc, #112]	@ (80075cc <HAL_TIM_Base_Start+0xb4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d009      	beq.n	8007574 <HAL_TIM_Base_Start+0x5c>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a1a      	ldr	r2, [pc, #104]	@ (80075d0 <HAL_TIM_Base_Start+0xb8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d004      	beq.n	8007574 <HAL_TIM_Base_Start+0x5c>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a19      	ldr	r2, [pc, #100]	@ (80075d4 <HAL_TIM_Base_Start+0xbc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d115      	bne.n	80075a0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	4b17      	ldr	r3, [pc, #92]	@ (80075d8 <HAL_TIM_Base_Start+0xc0>)
 800757c:	4013      	ands	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b06      	cmp	r3, #6
 8007584:	d015      	beq.n	80075b2 <HAL_TIM_Base_Start+0x9a>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800758c:	d011      	beq.n	80075b2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0201 	orr.w	r2, r2, #1
 800759c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759e:	e008      	b.n	80075b2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	e000      	b.n	80075b4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800
 80075d0:	40013400 	.word	0x40013400
 80075d4:	40014000 	.word	0x40014000
 80075d8:	00010007 	.word	0x00010007

080075dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e049      	b.n	8007682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d106      	bne.n	8007608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f841 	bl	800768a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	4619      	mov	r1, r3
 800761a:	4610      	mov	r0, r2
 800761c:	f000 fa4e 	bl	8007abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
	...

080076a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076ba:	2302      	movs	r3, #2
 80076bc:	e0ff      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b14      	cmp	r3, #20
 80076ca:	f200 80f0 	bhi.w	80078ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076ce:	a201      	add	r2, pc, #4	@ (adr r2, 80076d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	08007729 	.word	0x08007729
 80076d8:	080078af 	.word	0x080078af
 80076dc:	080078af 	.word	0x080078af
 80076e0:	080078af 	.word	0x080078af
 80076e4:	08007769 	.word	0x08007769
 80076e8:	080078af 	.word	0x080078af
 80076ec:	080078af 	.word	0x080078af
 80076f0:	080078af 	.word	0x080078af
 80076f4:	080077ab 	.word	0x080077ab
 80076f8:	080078af 	.word	0x080078af
 80076fc:	080078af 	.word	0x080078af
 8007700:	080078af 	.word	0x080078af
 8007704:	080077eb 	.word	0x080077eb
 8007708:	080078af 	.word	0x080078af
 800770c:	080078af 	.word	0x080078af
 8007710:	080078af 	.word	0x080078af
 8007714:	0800782d 	.word	0x0800782d
 8007718:	080078af 	.word	0x080078af
 800771c:	080078af 	.word	0x080078af
 8007720:	080078af 	.word	0x080078af
 8007724:	0800786d 	.word	0x0800786d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fa60 	bl	8007bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	699a      	ldr	r2, [r3, #24]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0208 	orr.w	r2, r2, #8
 8007742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0204 	bic.w	r2, r2, #4
 8007752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6999      	ldr	r1, [r3, #24]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	691a      	ldr	r2, [r3, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	619a      	str	r2, [r3, #24]
      break;
 8007766:	e0a5      	b.n	80078b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fad0 	bl	8007d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6999      	ldr	r1, [r3, #24]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	619a      	str	r2, [r3, #24]
      break;
 80077a8:	e084      	b.n	80078b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fb39 	bl	8007e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0208 	orr.w	r2, r2, #8
 80077c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0204 	bic.w	r2, r2, #4
 80077d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69d9      	ldr	r1, [r3, #28]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	61da      	str	r2, [r3, #28]
      break;
 80077e8:	e064      	b.n	80078b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fba1 	bl	8007f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69da      	ldr	r2, [r3, #28]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69d9      	ldr	r1, [r3, #28]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	021a      	lsls	r2, r3, #8
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	61da      	str	r2, [r3, #28]
      break;
 800782a:	e043      	b.n	80078b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fc0a 	bl	800804c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0208 	orr.w	r2, r2, #8
 8007846:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0204 	bic.w	r2, r2, #4
 8007856:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800786a:	e023      	b.n	80078b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fc4e 	bl	8008114 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007886:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007896:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	021a      	lsls	r2, r3, #8
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80078ac:	e002      	b.n	80078b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
      break;
 80078b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop

080078c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_TIM_ConfigClockSource+0x1c>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e0de      	b.n	8007aa2 <HAL_TIM_ConfigClockSource+0x1da>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007902:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800790e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a63      	ldr	r2, [pc, #396]	@ (8007aac <HAL_TIM_ConfigClockSource+0x1e4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	f000 80a9 	beq.w	8007a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8007924:	4a61      	ldr	r2, [pc, #388]	@ (8007aac <HAL_TIM_ConfigClockSource+0x1e4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	f200 80ae 	bhi.w	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800792c:	4a60      	ldr	r2, [pc, #384]	@ (8007ab0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	f000 80a1 	beq.w	8007a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8007934:	4a5e      	ldr	r2, [pc, #376]	@ (8007ab0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	f200 80a6 	bhi.w	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800793c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ab4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800793e:	4293      	cmp	r3, r2
 8007940:	f000 8099 	beq.w	8007a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8007944:	4a5b      	ldr	r2, [pc, #364]	@ (8007ab4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007946:	4293      	cmp	r3, r2
 8007948:	f200 809e 	bhi.w	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800794c:	4a5a      	ldr	r2, [pc, #360]	@ (8007ab8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	f000 8091 	beq.w	8007a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8007954:	4a58      	ldr	r2, [pc, #352]	@ (8007ab8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	f200 8096 	bhi.w	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800795c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007960:	f000 8089 	beq.w	8007a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8007964:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007968:	f200 808e 	bhi.w	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800796c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007970:	d03e      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x128>
 8007972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007976:	f200 8087 	bhi.w	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800797a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800797e:	f000 8086 	beq.w	8007a8e <HAL_TIM_ConfigClockSource+0x1c6>
 8007982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007986:	d87f      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 8007988:	2b70      	cmp	r3, #112	@ 0x70
 800798a:	d01a      	beq.n	80079c2 <HAL_TIM_ConfigClockSource+0xfa>
 800798c:	2b70      	cmp	r3, #112	@ 0x70
 800798e:	d87b      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 8007990:	2b60      	cmp	r3, #96	@ 0x60
 8007992:	d050      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x16e>
 8007994:	2b60      	cmp	r3, #96	@ 0x60
 8007996:	d877      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 8007998:	2b50      	cmp	r3, #80	@ 0x50
 800799a:	d03c      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x14e>
 800799c:	2b50      	cmp	r3, #80	@ 0x50
 800799e:	d873      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 80079a0:	2b40      	cmp	r3, #64	@ 0x40
 80079a2:	d058      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x18e>
 80079a4:	2b40      	cmp	r3, #64	@ 0x40
 80079a6:	d86f      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 80079a8:	2b30      	cmp	r3, #48	@ 0x30
 80079aa:	d064      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x1ae>
 80079ac:	2b30      	cmp	r3, #48	@ 0x30
 80079ae:	d86b      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	d060      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x1ae>
 80079b4:	2b20      	cmp	r3, #32
 80079b6:	d867      	bhi.n	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d05c      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x1ae>
 80079bc:	2b10      	cmp	r3, #16
 80079be:	d05a      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x1ae>
 80079c0:	e062      	b.n	8007a88 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079d2:	f000 fc81 	bl	80082d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	609a      	str	r2, [r3, #8]
      break;
 80079ee:	e04f      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a00:	f000 fc6a 	bl	80082d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a12:	609a      	str	r2, [r3, #8]
      break;
 8007a14:	e03c      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a22:	461a      	mov	r2, r3
 8007a24:	f000 fbdc 	bl	80081e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2150      	movs	r1, #80	@ 0x50
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fc35 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 8007a34:	e02c      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a42:	461a      	mov	r2, r3
 8007a44:	f000 fbfb 	bl	800823e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2160      	movs	r1, #96	@ 0x60
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fc25 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 8007a54:	e01c      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a62:	461a      	mov	r2, r3
 8007a64:	f000 fbbc 	bl	80081e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2140      	movs	r1, #64	@ 0x40
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fc15 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 8007a74:	e00c      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f000 fc0c 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 8007a86:	e003      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8c:	e000      	b.n	8007a90 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	00100070 	.word	0x00100070
 8007ab0:	00100040 	.word	0x00100040
 8007ab4:	00100030 	.word	0x00100030
 8007ab8:	00100020 	.word	0x00100020

08007abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a42      	ldr	r2, [pc, #264]	@ (8007bd8 <TIM_Base_SetConfig+0x11c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00f      	beq.n	8007af4 <TIM_Base_SetConfig+0x38>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ada:	d00b      	beq.n	8007af4 <TIM_Base_SetConfig+0x38>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a3f      	ldr	r2, [pc, #252]	@ (8007bdc <TIM_Base_SetConfig+0x120>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d007      	beq.n	8007af4 <TIM_Base_SetConfig+0x38>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8007be0 <TIM_Base_SetConfig+0x124>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_Base_SetConfig+0x38>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a3d      	ldr	r2, [pc, #244]	@ (8007be4 <TIM_Base_SetConfig+0x128>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d108      	bne.n	8007b06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a33      	ldr	r2, [pc, #204]	@ (8007bd8 <TIM_Base_SetConfig+0x11c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d01b      	beq.n	8007b46 <TIM_Base_SetConfig+0x8a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b14:	d017      	beq.n	8007b46 <TIM_Base_SetConfig+0x8a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a30      	ldr	r2, [pc, #192]	@ (8007bdc <TIM_Base_SetConfig+0x120>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <TIM_Base_SetConfig+0x8a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a2f      	ldr	r2, [pc, #188]	@ (8007be0 <TIM_Base_SetConfig+0x124>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00f      	beq.n	8007b46 <TIM_Base_SetConfig+0x8a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2e      	ldr	r2, [pc, #184]	@ (8007be4 <TIM_Base_SetConfig+0x128>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00b      	beq.n	8007b46 <TIM_Base_SetConfig+0x8a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a2d      	ldr	r2, [pc, #180]	@ (8007be8 <TIM_Base_SetConfig+0x12c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d007      	beq.n	8007b46 <TIM_Base_SetConfig+0x8a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2c      	ldr	r2, [pc, #176]	@ (8007bec <TIM_Base_SetConfig+0x130>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d003      	beq.n	8007b46 <TIM_Base_SetConfig+0x8a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a2b      	ldr	r2, [pc, #172]	@ (8007bf0 <TIM_Base_SetConfig+0x134>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d108      	bne.n	8007b58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a16      	ldr	r2, [pc, #88]	@ (8007bd8 <TIM_Base_SetConfig+0x11c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00f      	beq.n	8007ba4 <TIM_Base_SetConfig+0xe8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a17      	ldr	r2, [pc, #92]	@ (8007be4 <TIM_Base_SetConfig+0x128>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_Base_SetConfig+0xe8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a16      	ldr	r2, [pc, #88]	@ (8007be8 <TIM_Base_SetConfig+0x12c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_Base_SetConfig+0xe8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a15      	ldr	r2, [pc, #84]	@ (8007bec <TIM_Base_SetConfig+0x130>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_Base_SetConfig+0xe8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a14      	ldr	r2, [pc, #80]	@ (8007bf0 <TIM_Base_SetConfig+0x134>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d103      	bne.n	8007bac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d105      	bne.n	8007bca <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	611a      	str	r2, [r3, #16]
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40013400 	.word	0x40013400
 8007be8:	40014000 	.word	0x40014000
 8007bec:	40014400 	.word	0x40014400
 8007bf0:	40014800 	.word	0x40014800

08007bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	f023 0201 	bic.w	r2, r3, #1
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f023 0302 	bic.w	r3, r3, #2
 8007c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007d00 <TIM_OC1_SetConfig+0x10c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00f      	beq.n	8007c74 <TIM_OC1_SetConfig+0x80>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a2b      	ldr	r2, [pc, #172]	@ (8007d04 <TIM_OC1_SetConfig+0x110>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d00b      	beq.n	8007c74 <TIM_OC1_SetConfig+0x80>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d08 <TIM_OC1_SetConfig+0x114>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d007      	beq.n	8007c74 <TIM_OC1_SetConfig+0x80>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a29      	ldr	r2, [pc, #164]	@ (8007d0c <TIM_OC1_SetConfig+0x118>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d003      	beq.n	8007c74 <TIM_OC1_SetConfig+0x80>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a28      	ldr	r2, [pc, #160]	@ (8007d10 <TIM_OC1_SetConfig+0x11c>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d10c      	bne.n	8007c8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f023 0308 	bic.w	r3, r3, #8
 8007c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f023 0304 	bic.w	r3, r3, #4
 8007c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a1b      	ldr	r2, [pc, #108]	@ (8007d00 <TIM_OC1_SetConfig+0x10c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00f      	beq.n	8007cb6 <TIM_OC1_SetConfig+0xc2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a1a      	ldr	r2, [pc, #104]	@ (8007d04 <TIM_OC1_SetConfig+0x110>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00b      	beq.n	8007cb6 <TIM_OC1_SetConfig+0xc2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a19      	ldr	r2, [pc, #100]	@ (8007d08 <TIM_OC1_SetConfig+0x114>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d007      	beq.n	8007cb6 <TIM_OC1_SetConfig+0xc2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a18      	ldr	r2, [pc, #96]	@ (8007d0c <TIM_OC1_SetConfig+0x118>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d003      	beq.n	8007cb6 <TIM_OC1_SetConfig+0xc2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a17      	ldr	r2, [pc, #92]	@ (8007d10 <TIM_OC1_SetConfig+0x11c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d111      	bne.n	8007cda <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	621a      	str	r2, [r3, #32]
}
 8007cf4:	bf00      	nop
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	40012c00 	.word	0x40012c00
 8007d04:	40013400 	.word	0x40013400
 8007d08:	40014000 	.word	0x40014000
 8007d0c:	40014400 	.word	0x40014400
 8007d10:	40014800 	.word	0x40014800

08007d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	f023 0210 	bic.w	r2, r3, #16
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f023 0320 	bic.w	r3, r3, #32
 8007d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a28      	ldr	r2, [pc, #160]	@ (8007e14 <TIM_OC2_SetConfig+0x100>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d003      	beq.n	8007d80 <TIM_OC2_SetConfig+0x6c>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a27      	ldr	r2, [pc, #156]	@ (8007e18 <TIM_OC2_SetConfig+0x104>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d10d      	bne.n	8007d9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <TIM_OC2_SetConfig+0x100>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00f      	beq.n	8007dc4 <TIM_OC2_SetConfig+0xb0>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a1c      	ldr	r2, [pc, #112]	@ (8007e18 <TIM_OC2_SetConfig+0x104>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00b      	beq.n	8007dc4 <TIM_OC2_SetConfig+0xb0>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a1b      	ldr	r2, [pc, #108]	@ (8007e1c <TIM_OC2_SetConfig+0x108>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d007      	beq.n	8007dc4 <TIM_OC2_SetConfig+0xb0>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a1a      	ldr	r2, [pc, #104]	@ (8007e20 <TIM_OC2_SetConfig+0x10c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_OC2_SetConfig+0xb0>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a19      	ldr	r2, [pc, #100]	@ (8007e24 <TIM_OC2_SetConfig+0x110>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d113      	bne.n	8007dec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	40012c00 	.word	0x40012c00
 8007e18:	40013400 	.word	0x40013400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	40014800 	.word	0x40014800

08007e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a27      	ldr	r2, [pc, #156]	@ (8007f24 <TIM_OC3_SetConfig+0xfc>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d003      	beq.n	8007e92 <TIM_OC3_SetConfig+0x6a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a26      	ldr	r2, [pc, #152]	@ (8007f28 <TIM_OC3_SetConfig+0x100>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d10d      	bne.n	8007eae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f24 <TIM_OC3_SetConfig+0xfc>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00f      	beq.n	8007ed6 <TIM_OC3_SetConfig+0xae>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8007f28 <TIM_OC3_SetConfig+0x100>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d00b      	beq.n	8007ed6 <TIM_OC3_SetConfig+0xae>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8007f2c <TIM_OC3_SetConfig+0x104>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d007      	beq.n	8007ed6 <TIM_OC3_SetConfig+0xae>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a19      	ldr	r2, [pc, #100]	@ (8007f30 <TIM_OC3_SetConfig+0x108>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d003      	beq.n	8007ed6 <TIM_OC3_SetConfig+0xae>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a18      	ldr	r2, [pc, #96]	@ (8007f34 <TIM_OC3_SetConfig+0x10c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d113      	bne.n	8007efe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40013400 	.word	0x40013400
 8007f2c:	40014000 	.word	0x40014000
 8007f30:	40014400 	.word	0x40014400
 8007f34:	40014800 	.word	0x40014800

08007f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	031b      	lsls	r3, r3, #12
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a28      	ldr	r2, [pc, #160]	@ (8008038 <TIM_OC4_SetConfig+0x100>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d003      	beq.n	8007fa4 <TIM_OC4_SetConfig+0x6c>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a27      	ldr	r2, [pc, #156]	@ (800803c <TIM_OC4_SetConfig+0x104>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d10d      	bne.n	8007fc0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	031b      	lsls	r3, r3, #12
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8008038 <TIM_OC4_SetConfig+0x100>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00f      	beq.n	8007fe8 <TIM_OC4_SetConfig+0xb0>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a1c      	ldr	r2, [pc, #112]	@ (800803c <TIM_OC4_SetConfig+0x104>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00b      	beq.n	8007fe8 <TIM_OC4_SetConfig+0xb0>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8008040 <TIM_OC4_SetConfig+0x108>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d007      	beq.n	8007fe8 <TIM_OC4_SetConfig+0xb0>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a1a      	ldr	r2, [pc, #104]	@ (8008044 <TIM_OC4_SetConfig+0x10c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d003      	beq.n	8007fe8 <TIM_OC4_SetConfig+0xb0>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a19      	ldr	r2, [pc, #100]	@ (8008048 <TIM_OC4_SetConfig+0x110>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d113      	bne.n	8008010 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ff6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	019b      	lsls	r3, r3, #6
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	019b      	lsls	r3, r3, #6
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	40012c00 	.word	0x40012c00
 800803c:	40013400 	.word	0x40013400
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400
 8008048:	40014800 	.word	0x40014800

0800804c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800807a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800807e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a17      	ldr	r2, [pc, #92]	@ (8008100 <TIM_OC5_SetConfig+0xb4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00f      	beq.n	80080c6 <TIM_OC5_SetConfig+0x7a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a16      	ldr	r2, [pc, #88]	@ (8008104 <TIM_OC5_SetConfig+0xb8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d00b      	beq.n	80080c6 <TIM_OC5_SetConfig+0x7a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a15      	ldr	r2, [pc, #84]	@ (8008108 <TIM_OC5_SetConfig+0xbc>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d007      	beq.n	80080c6 <TIM_OC5_SetConfig+0x7a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a14      	ldr	r2, [pc, #80]	@ (800810c <TIM_OC5_SetConfig+0xc0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d003      	beq.n	80080c6 <TIM_OC5_SetConfig+0x7a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a13      	ldr	r2, [pc, #76]	@ (8008110 <TIM_OC5_SetConfig+0xc4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d109      	bne.n	80080da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	621a      	str	r2, [r3, #32]
}
 80080f4:	bf00      	nop
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	40012c00 	.word	0x40012c00
 8008104:	40013400 	.word	0x40013400
 8008108:	40014000 	.word	0x40014000
 800810c:	40014400 	.word	0x40014400
 8008110:	40014800 	.word	0x40014800

08008114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4313      	orrs	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800815a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	051b      	lsls	r3, r3, #20
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a18      	ldr	r2, [pc, #96]	@ (80081cc <TIM_OC6_SetConfig+0xb8>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d00f      	beq.n	8008190 <TIM_OC6_SetConfig+0x7c>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a17      	ldr	r2, [pc, #92]	@ (80081d0 <TIM_OC6_SetConfig+0xbc>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d00b      	beq.n	8008190 <TIM_OC6_SetConfig+0x7c>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a16      	ldr	r2, [pc, #88]	@ (80081d4 <TIM_OC6_SetConfig+0xc0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d007      	beq.n	8008190 <TIM_OC6_SetConfig+0x7c>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a15      	ldr	r2, [pc, #84]	@ (80081d8 <TIM_OC6_SetConfig+0xc4>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d003      	beq.n	8008190 <TIM_OC6_SetConfig+0x7c>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a14      	ldr	r2, [pc, #80]	@ (80081dc <TIM_OC6_SetConfig+0xc8>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d109      	bne.n	80081a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	029b      	lsls	r3, r3, #10
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	621a      	str	r2, [r3, #32]
}
 80081be:	bf00      	nop
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	40012c00 	.word	0x40012c00
 80081d0:	40013400 	.word	0x40013400
 80081d4:	40014000 	.word	0x40014000
 80081d8:	40014400 	.word	0x40014400
 80081dc:	40014800 	.word	0x40014800

080081e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	f023 0201 	bic.w	r2, r3, #1
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800820a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f023 030a 	bic.w	r3, r3, #10
 800821c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4313      	orrs	r3, r2
 8008224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	621a      	str	r2, [r3, #32]
}
 8008232:	bf00      	nop
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800823e:	b480      	push	{r7}
 8008240:	b087      	sub	sp, #28
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	f023 0210 	bic.w	r2, r3, #16
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	031b      	lsls	r3, r3, #12
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800827a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	4313      	orrs	r3, r2
 8008284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	621a      	str	r2, [r3, #32]
}
 8008292:	bf00      	nop
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80082b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	f043 0307 	orr.w	r3, r3, #7
 80082c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	609a      	str	r2, [r3, #8]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	021a      	lsls	r2, r3, #8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4313      	orrs	r3, r2
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	4313      	orrs	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	609a      	str	r2, [r3, #8]
}
 800830c:	bf00      	nop
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008328:	2b01      	cmp	r3, #1
 800832a:	d101      	bne.n	8008330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800832c:	2302      	movs	r3, #2
 800832e:	e065      	b.n	80083fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a2c      	ldr	r2, [pc, #176]	@ (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d004      	beq.n	8008364 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a2b      	ldr	r2, [pc, #172]	@ (800840c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d108      	bne.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800836a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800837c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008380:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a1b      	ldr	r2, [pc, #108]	@ (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d018      	beq.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a6:	d013      	beq.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a18      	ldr	r2, [pc, #96]	@ (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00e      	beq.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a17      	ldr	r2, [pc, #92]	@ (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d009      	beq.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a12      	ldr	r2, [pc, #72]	@ (800840c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d004      	beq.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a13      	ldr	r2, [pc, #76]	@ (8008418 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d10c      	bne.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	40012c00 	.word	0x40012c00
 800840c:	40013400 	.word	0x40013400
 8008410:	40000400 	.word	0x40000400
 8008414:	40000800 	.word	0x40000800
 8008418:	40014000 	.word	0x40014000

0800841c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e042      	b.n	80084b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7fa fccb 	bl	8002ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2224      	movs	r2, #36	@ 0x24
 800844a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0201 	bic.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 f848 	bl	80094fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fd79 	bl	8008f64 <UART_SetConfig>
 8008472:	4603      	mov	r3, r0
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e01b      	b.n	80084b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800848a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800849a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 f8c7 	bl	8009640 <UART_CheckIdleState>
 80084b2:	4603      	mov	r3, r0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	@ 0x28
 80084c0:	af02      	add	r7, sp, #8
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	4613      	mov	r3, r2
 80084ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d17b      	bne.n	80085ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <HAL_UART_Transmit+0x26>
 80084dc:	88fb      	ldrh	r3, [r7, #6]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e074      	b.n	80085d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2221      	movs	r2, #33	@ 0x21
 80084f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084f6:	f7fa ff7b 	bl	80033f0 <HAL_GetTick>
 80084fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	88fa      	ldrh	r2, [r7, #6]
 8008500:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	88fa      	ldrh	r2, [r7, #6]
 8008508:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008514:	d108      	bne.n	8008528 <HAL_UART_Transmit+0x6c>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d104      	bne.n	8008528 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	61bb      	str	r3, [r7, #24]
 8008526:	e003      	b.n	8008530 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800852c:	2300      	movs	r3, #0
 800852e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008530:	e030      	b.n	8008594 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2200      	movs	r2, #0
 800853a:	2180      	movs	r1, #128	@ 0x80
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f001 f929 	bl	8009794 <UART_WaitOnFlagUntilTimeout>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d005      	beq.n	8008554 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2220      	movs	r2, #32
 800854c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e03d      	b.n	80085d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10b      	bne.n	8008572 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008568:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	3302      	adds	r3, #2
 800856e:	61bb      	str	r3, [r7, #24]
 8008570:	e007      	b.n	8008582 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	3301      	adds	r3, #1
 8008580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008588:	b29b      	uxth	r3, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	b29a      	uxth	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1c8      	bne.n	8008532 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2200      	movs	r2, #0
 80085a8:	2140      	movs	r1, #64	@ 0x40
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f001 f8f2 	bl	8009794 <UART_WaitOnFlagUntilTimeout>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e006      	b.n	80085d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e000      	b.n	80085d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80085ce:	2302      	movs	r3, #2
  }
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3720      	adds	r7, #32
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08a      	sub	sp, #40	@ 0x28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d137      	bne.n	8008660 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <HAL_UART_Receive_DMA+0x24>
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e030      	b.n	8008662 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a18      	ldr	r2, [pc, #96]	@ (800866c <HAL_UART_Receive_DMA+0x94>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d01f      	beq.n	8008650 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d018      	beq.n	8008650 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	613b      	str	r3, [r7, #16]
   return(result);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008632:	627b      	str	r3, [r7, #36]	@ 0x24
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	623b      	str	r3, [r7, #32]
 800863e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	69f9      	ldr	r1, [r7, #28]
 8008642:	6a3a      	ldr	r2, [r7, #32]
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	61bb      	str	r3, [r7, #24]
   return(result);
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e6      	bne.n	800861e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	461a      	mov	r2, r3
 8008654:	68b9      	ldr	r1, [r7, #8]
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f001 f90a 	bl	8009870 <UART_Start_Receive_DMA>
 800865c:	4603      	mov	r3, r0
 800865e:	e000      	b.n	8008662 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008660:	2302      	movs	r3, #2
  }
}
 8008662:	4618      	mov	r0, r3
 8008664:	3728      	adds	r7, #40	@ 0x28
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	40008000 	.word	0x40008000

08008670 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b0a0      	sub	sp, #128	@ 0x80
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008688:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800868c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008696:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008698:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800869c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80086a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e6      	bne.n	8008678 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086bc:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 80086c0:	f023 0301 	bic.w	r3, r3, #1
 80086c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80086ce:	657a      	str	r2, [r7, #84]	@ 0x54
 80086d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80086d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80086dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e3      	bne.n	80086aa <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d118      	bne.n	800871c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	f023 0310 	bic.w	r3, r3, #16
 80086fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008708:	643b      	str	r3, [r7, #64]	@ 0x40
 800870a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800870e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e6      	bne.n	80086ea <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008726:	2b80      	cmp	r3, #128	@ 0x80
 8008728:	d137      	bne.n	800879a <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3308      	adds	r3, #8
 8008730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008732:	6a3b      	ldr	r3, [r7, #32]
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	61fb      	str	r3, [r7, #28]
   return(result);
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008740:	673b      	str	r3, [r7, #112]	@ 0x70
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800874a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800874c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e5      	bne.n	800872a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008762:	2b00      	cmp	r3, #0
 8008764:	d019      	beq.n	800879a <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800876a:	2200      	movs	r2, #0
 800876c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008772:	4618      	mov	r0, r3
 8008774:	f7fc fadb 	bl	8004d2e <HAL_DMA_Abort>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00d      	beq.n	800879a <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008782:	4618      	mov	r0, r3
 8008784:	f7fc fc42 	bl	800500c <HAL_DMA_GetError>
 8008788:	4603      	mov	r3, r0
 800878a:	2b20      	cmp	r3, #32
 800878c:	d105      	bne.n	800879a <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2210      	movs	r2, #16
 8008792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e073      	b.n	8008882 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087a4:	2b40      	cmp	r3, #64	@ 0x40
 80087a6:	d13b      	bne.n	8008820 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087c8:	61ba      	str	r2, [r7, #24]
 80087ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6979      	ldr	r1, [r7, #20]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	613b      	str	r3, [r7, #16]
   return(result);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01c      	beq.n	8008820 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ec:	2200      	movs	r2, #0
 80087ee:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fc fa99 	bl	8004d2e <HAL_DMA_Abort>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00e      	beq.n	8008820 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008808:	4618      	mov	r0, r3
 800880a:	f7fc fbff 	bl	800500c <HAL_DMA_GetError>
 800880e:	4603      	mov	r3, r0
 8008810:	2b20      	cmp	r3, #32
 8008812:	d105      	bne.n	8008820 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2210      	movs	r2, #16
 8008818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e030      	b.n	8008882 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	220f      	movs	r2, #15
 8008836:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800883c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008840:	d107      	bne.n	8008852 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	699a      	ldr	r2, [r3, #24]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0210 	orr.w	r2, r2, #16
 8008850:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	699a      	ldr	r2, [r3, #24]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f042 0208 	orr.w	r2, r2, #8
 8008860:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2220      	movs	r2, #32
 8008866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3780      	adds	r7, #128	@ 0x80
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b0ba      	sub	sp, #232	@ 0xe8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80088b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80088ba:	4013      	ands	r3, r2
 80088bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80088c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11b      	bne.n	8008900 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088cc:	f003 0320 	and.w	r3, r3, #32
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d015      	beq.n	8008900 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d105      	bne.n	80088ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 8300 	beq.w	8008ef6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
      }
      return;
 80088fe:	e2fa      	b.n	8008ef6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8123 	beq.w	8008b50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800890a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800890e:	4b8d      	ldr	r3, [pc, #564]	@ (8008b44 <HAL_UART_IRQHandler+0x2b8>)
 8008910:	4013      	ands	r3, r2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008916:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800891a:	4b8b      	ldr	r3, [pc, #556]	@ (8008b48 <HAL_UART_IRQHandler+0x2bc>)
 800891c:	4013      	ands	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 8116 	beq.w	8008b50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d011      	beq.n	8008954 <HAL_UART_IRQHandler+0xc8>
 8008930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2201      	movs	r2, #1
 8008942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800894a:	f043 0201 	orr.w	r2, r3, #1
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d011      	beq.n	8008984 <HAL_UART_IRQHandler+0xf8>
 8008960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2202      	movs	r2, #2
 8008972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800897a:	f043 0204 	orr.w	r2, r3, #4
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008988:	f003 0304 	and.w	r3, r3, #4
 800898c:	2b00      	cmp	r3, #0
 800898e:	d011      	beq.n	80089b4 <HAL_UART_IRQHandler+0x128>
 8008990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2204      	movs	r2, #4
 80089a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089aa:	f043 0202 	orr.w	r2, r3, #2
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d017      	beq.n	80089f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80089cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80089d0:	4b5c      	ldr	r3, [pc, #368]	@ (8008b44 <HAL_UART_IRQHandler+0x2b8>)
 80089d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00b      	beq.n	80089f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2208      	movs	r2, #8
 80089de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089e6:	f043 0208 	orr.w	r2, r3, #8
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d012      	beq.n	8008a22 <HAL_UART_IRQHandler+0x196>
 80089fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00c      	beq.n	8008a22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a18:	f043 0220 	orr.w	r2, r3, #32
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 8266 	beq.w	8008efa <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d013      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d105      	bne.n	8008a52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a76:	2b40      	cmp	r3, #64	@ 0x40
 8008a78:	d005      	beq.n	8008a86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d054      	beq.n	8008b30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 ffd9 	bl	8009a3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a96:	2b40      	cmp	r3, #64	@ 0x40
 8008a98:	d146      	bne.n	8008b28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1d9      	bne.n	8008a9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d017      	beq.n	8008b20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008af6:	4a15      	ldr	r2, [pc, #84]	@ (8008b4c <HAL_UART_IRQHandler+0x2c0>)
 8008af8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fc f96d 	bl	8004de0 <HAL_DMA_Abort_IT>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d019      	beq.n	8008b40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b1e:	e00f      	b.n	8008b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fa09 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b26:	e00b      	b.n	8008b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fa05 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b2e:	e007      	b.n	8008b40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fa01 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008b3e:	e1dc      	b.n	8008efa <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b40:	bf00      	nop
    return;
 8008b42:	e1da      	b.n	8008efa <HAL_UART_IRQHandler+0x66e>
 8008b44:	10000001 	.word	0x10000001
 8008b48:	04000120 	.word	0x04000120
 8008b4c:	08009cf5 	.word	0x08009cf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	f040 8170 	bne.w	8008e3a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b5e:	f003 0310 	and.w	r3, r3, #16
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 8169 	beq.w	8008e3a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8162 	beq.w	8008e3a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2210      	movs	r2, #16
 8008b7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b88:	2b40      	cmp	r3, #64	@ 0x40
 8008b8a:	f040 80d8 	bne.w	8008d3e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80af 	beq.w	8008d04 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	f080 80a7 	bcs.w	8008d04 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008bbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0320 	and.w	r3, r3, #32
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f040 8087 	bne.w	8008ce2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008c0e:	e841 2300 	strex	r3, r2, [r1]
 8008c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1da      	bne.n	8008bd4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3308      	adds	r3, #8
 8008c24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008c2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c30:	f023 0301 	bic.w	r3, r3, #1
 8008c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008c42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e1      	bne.n	8008c1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008c7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008c80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008c84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e3      	bne.n	8008c5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cb0:	f023 0310 	bic.w	r3, r3, #16
 8008cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e4      	bne.n	8008ca0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fc f826 	bl	8004d2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f925 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008d02:	e0fc      	b.n	8008efe <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	f040 80f5 	bne.w	8008efe <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0320 	and.w	r3, r3, #32
 8008d22:	2b20      	cmp	r3, #32
 8008d24:	f040 80eb 	bne.w	8008efe <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f908 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
      return;
 8008d3c:	e0df      	b.n	8008efe <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 80d1 	beq.w	8008f02 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 80cc 	beq.w	8008f02 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e4      	bne.n	8008d6a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3308      	adds	r3, #8
 8008da6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	623b      	str	r3, [r7, #32]
   return(result);
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008db6:	f023 0301 	bic.w	r3, r3, #1
 8008dba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008dc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8008dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dd0:	e841 2300 	strex	r3, r2, [r1]
 8008dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e1      	bne.n	8008da0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f023 0310 	bic.w	r3, r3, #16
 8008e04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008e12:	61fb      	str	r3, [r7, #28]
 8008e14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	69b9      	ldr	r1, [r7, #24]
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e4      	bne.n	8008df0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f88a 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e38:	e063      	b.n	8008f02 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00e      	beq.n	8008e64 <HAL_UART_IRQHandler+0x5d8>
 8008e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008e5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 ff86 	bl	8009d6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e62:	e051      	b.n	8008f08 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d014      	beq.n	8008e9a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d105      	bne.n	8008e88 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d008      	beq.n	8008e9a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d03a      	beq.n	8008f06 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	4798      	blx	r3
    }
    return;
 8008e98:	e035      	b.n	8008f06 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d009      	beq.n	8008eba <HAL_UART_IRQHandler+0x62e>
 8008ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 ff30 	bl	8009d18 <UART_EndTransmit_IT>
    return;
 8008eb8:	e026      	b.n	8008f08 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d009      	beq.n	8008eda <HAL_UART_IRQHandler+0x64e>
 8008ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 ff5f 	bl	8009d96 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ed8:	e016      	b.n	8008f08 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ede:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d010      	beq.n	8008f08 <HAL_UART_IRQHandler+0x67c>
 8008ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	da0c      	bge.n	8008f08 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 ff47 	bl	8009d82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ef4:	e008      	b.n	8008f08 <HAL_UART_IRQHandler+0x67c>
      return;
 8008ef6:	bf00      	nop
 8008ef8:	e006      	b.n	8008f08 <HAL_UART_IRQHandler+0x67c>
    return;
 8008efa:	bf00      	nop
 8008efc:	e004      	b.n	8008f08 <HAL_UART_IRQHandler+0x67c>
      return;
 8008efe:	bf00      	nop
 8008f00:	e002      	b.n	8008f08 <HAL_UART_IRQHandler+0x67c>
      return;
 8008f02:	bf00      	nop
 8008f04:	e000      	b.n	8008f08 <HAL_UART_IRQHandler+0x67c>
    return;
 8008f06:	bf00      	nop
  }
}
 8008f08:	37e8      	adds	r7, #232	@ 0xe8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop

08008f10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f68:	b08c      	sub	sp, #48	@ 0x30
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	431a      	orrs	r2, r3
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	431a      	orrs	r2, r3
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	4bab      	ldr	r3, [pc, #684]	@ (8009240 <UART_SetConfig+0x2dc>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4aa0      	ldr	r2, [pc, #640]	@ (8009244 <UART_SetConfig+0x2e0>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d004      	beq.n	8008fd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008fda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	6812      	ldr	r2, [r2, #0]
 8008fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fee:	f023 010f 	bic.w	r1, r3, #15
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a91      	ldr	r2, [pc, #580]	@ (8009248 <UART_SetConfig+0x2e4>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d125      	bne.n	8009054 <UART_SetConfig+0xf0>
 8009008:	4b90      	ldr	r3, [pc, #576]	@ (800924c <UART_SetConfig+0x2e8>)
 800900a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	2b03      	cmp	r3, #3
 8009014:	d81a      	bhi.n	800904c <UART_SetConfig+0xe8>
 8009016:	a201      	add	r2, pc, #4	@ (adr r2, 800901c <UART_SetConfig+0xb8>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	0800902d 	.word	0x0800902d
 8009020:	0800903d 	.word	0x0800903d
 8009024:	08009035 	.word	0x08009035
 8009028:	08009045 	.word	0x08009045
 800902c:	2301      	movs	r3, #1
 800902e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009032:	e0d6      	b.n	80091e2 <UART_SetConfig+0x27e>
 8009034:	2302      	movs	r3, #2
 8009036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800903a:	e0d2      	b.n	80091e2 <UART_SetConfig+0x27e>
 800903c:	2304      	movs	r3, #4
 800903e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009042:	e0ce      	b.n	80091e2 <UART_SetConfig+0x27e>
 8009044:	2308      	movs	r3, #8
 8009046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800904a:	e0ca      	b.n	80091e2 <UART_SetConfig+0x27e>
 800904c:	2310      	movs	r3, #16
 800904e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009052:	e0c6      	b.n	80091e2 <UART_SetConfig+0x27e>
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a7d      	ldr	r2, [pc, #500]	@ (8009250 <UART_SetConfig+0x2ec>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d138      	bne.n	80090d0 <UART_SetConfig+0x16c>
 800905e:	4b7b      	ldr	r3, [pc, #492]	@ (800924c <UART_SetConfig+0x2e8>)
 8009060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009064:	f003 030c 	and.w	r3, r3, #12
 8009068:	2b0c      	cmp	r3, #12
 800906a:	d82d      	bhi.n	80090c8 <UART_SetConfig+0x164>
 800906c:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <UART_SetConfig+0x110>)
 800906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009072:	bf00      	nop
 8009074:	080090a9 	.word	0x080090a9
 8009078:	080090c9 	.word	0x080090c9
 800907c:	080090c9 	.word	0x080090c9
 8009080:	080090c9 	.word	0x080090c9
 8009084:	080090b9 	.word	0x080090b9
 8009088:	080090c9 	.word	0x080090c9
 800908c:	080090c9 	.word	0x080090c9
 8009090:	080090c9 	.word	0x080090c9
 8009094:	080090b1 	.word	0x080090b1
 8009098:	080090c9 	.word	0x080090c9
 800909c:	080090c9 	.word	0x080090c9
 80090a0:	080090c9 	.word	0x080090c9
 80090a4:	080090c1 	.word	0x080090c1
 80090a8:	2300      	movs	r3, #0
 80090aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ae:	e098      	b.n	80091e2 <UART_SetConfig+0x27e>
 80090b0:	2302      	movs	r3, #2
 80090b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090b6:	e094      	b.n	80091e2 <UART_SetConfig+0x27e>
 80090b8:	2304      	movs	r3, #4
 80090ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090be:	e090      	b.n	80091e2 <UART_SetConfig+0x27e>
 80090c0:	2308      	movs	r3, #8
 80090c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090c6:	e08c      	b.n	80091e2 <UART_SetConfig+0x27e>
 80090c8:	2310      	movs	r3, #16
 80090ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ce:	e088      	b.n	80091e2 <UART_SetConfig+0x27e>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a5f      	ldr	r2, [pc, #380]	@ (8009254 <UART_SetConfig+0x2f0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d125      	bne.n	8009126 <UART_SetConfig+0x1c2>
 80090da:	4b5c      	ldr	r3, [pc, #368]	@ (800924c <UART_SetConfig+0x2e8>)
 80090dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80090e4:	2b30      	cmp	r3, #48	@ 0x30
 80090e6:	d016      	beq.n	8009116 <UART_SetConfig+0x1b2>
 80090e8:	2b30      	cmp	r3, #48	@ 0x30
 80090ea:	d818      	bhi.n	800911e <UART_SetConfig+0x1ba>
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	d00a      	beq.n	8009106 <UART_SetConfig+0x1a2>
 80090f0:	2b20      	cmp	r3, #32
 80090f2:	d814      	bhi.n	800911e <UART_SetConfig+0x1ba>
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <UART_SetConfig+0x19a>
 80090f8:	2b10      	cmp	r3, #16
 80090fa:	d008      	beq.n	800910e <UART_SetConfig+0x1aa>
 80090fc:	e00f      	b.n	800911e <UART_SetConfig+0x1ba>
 80090fe:	2300      	movs	r3, #0
 8009100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009104:	e06d      	b.n	80091e2 <UART_SetConfig+0x27e>
 8009106:	2302      	movs	r3, #2
 8009108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800910c:	e069      	b.n	80091e2 <UART_SetConfig+0x27e>
 800910e:	2304      	movs	r3, #4
 8009110:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009114:	e065      	b.n	80091e2 <UART_SetConfig+0x27e>
 8009116:	2308      	movs	r3, #8
 8009118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800911c:	e061      	b.n	80091e2 <UART_SetConfig+0x27e>
 800911e:	2310      	movs	r3, #16
 8009120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009124:	e05d      	b.n	80091e2 <UART_SetConfig+0x27e>
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a4b      	ldr	r2, [pc, #300]	@ (8009258 <UART_SetConfig+0x2f4>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d125      	bne.n	800917c <UART_SetConfig+0x218>
 8009130:	4b46      	ldr	r3, [pc, #280]	@ (800924c <UART_SetConfig+0x2e8>)
 8009132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009136:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800913a:	2bc0      	cmp	r3, #192	@ 0xc0
 800913c:	d016      	beq.n	800916c <UART_SetConfig+0x208>
 800913e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009140:	d818      	bhi.n	8009174 <UART_SetConfig+0x210>
 8009142:	2b80      	cmp	r3, #128	@ 0x80
 8009144:	d00a      	beq.n	800915c <UART_SetConfig+0x1f8>
 8009146:	2b80      	cmp	r3, #128	@ 0x80
 8009148:	d814      	bhi.n	8009174 <UART_SetConfig+0x210>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <UART_SetConfig+0x1f0>
 800914e:	2b40      	cmp	r3, #64	@ 0x40
 8009150:	d008      	beq.n	8009164 <UART_SetConfig+0x200>
 8009152:	e00f      	b.n	8009174 <UART_SetConfig+0x210>
 8009154:	2300      	movs	r3, #0
 8009156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800915a:	e042      	b.n	80091e2 <UART_SetConfig+0x27e>
 800915c:	2302      	movs	r3, #2
 800915e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009162:	e03e      	b.n	80091e2 <UART_SetConfig+0x27e>
 8009164:	2304      	movs	r3, #4
 8009166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800916a:	e03a      	b.n	80091e2 <UART_SetConfig+0x27e>
 800916c:	2308      	movs	r3, #8
 800916e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009172:	e036      	b.n	80091e2 <UART_SetConfig+0x27e>
 8009174:	2310      	movs	r3, #16
 8009176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800917a:	e032      	b.n	80091e2 <UART_SetConfig+0x27e>
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a30      	ldr	r2, [pc, #192]	@ (8009244 <UART_SetConfig+0x2e0>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d12a      	bne.n	80091dc <UART_SetConfig+0x278>
 8009186:	4b31      	ldr	r3, [pc, #196]	@ (800924c <UART_SetConfig+0x2e8>)
 8009188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800918c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009190:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009194:	d01a      	beq.n	80091cc <UART_SetConfig+0x268>
 8009196:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800919a:	d81b      	bhi.n	80091d4 <UART_SetConfig+0x270>
 800919c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091a0:	d00c      	beq.n	80091bc <UART_SetConfig+0x258>
 80091a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091a6:	d815      	bhi.n	80091d4 <UART_SetConfig+0x270>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <UART_SetConfig+0x250>
 80091ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091b0:	d008      	beq.n	80091c4 <UART_SetConfig+0x260>
 80091b2:	e00f      	b.n	80091d4 <UART_SetConfig+0x270>
 80091b4:	2300      	movs	r3, #0
 80091b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ba:	e012      	b.n	80091e2 <UART_SetConfig+0x27e>
 80091bc:	2302      	movs	r3, #2
 80091be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091c2:	e00e      	b.n	80091e2 <UART_SetConfig+0x27e>
 80091c4:	2304      	movs	r3, #4
 80091c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ca:	e00a      	b.n	80091e2 <UART_SetConfig+0x27e>
 80091cc:	2308      	movs	r3, #8
 80091ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091d2:	e006      	b.n	80091e2 <UART_SetConfig+0x27e>
 80091d4:	2310      	movs	r3, #16
 80091d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091da:	e002      	b.n	80091e2 <UART_SetConfig+0x27e>
 80091dc:	2310      	movs	r3, #16
 80091de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a17      	ldr	r2, [pc, #92]	@ (8009244 <UART_SetConfig+0x2e0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	f040 80a8 	bne.w	800933e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091f2:	2b08      	cmp	r3, #8
 80091f4:	d834      	bhi.n	8009260 <UART_SetConfig+0x2fc>
 80091f6:	a201      	add	r2, pc, #4	@ (adr r2, 80091fc <UART_SetConfig+0x298>)
 80091f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009261 	.word	0x08009261
 8009204:	08009229 	.word	0x08009229
 8009208:	08009261 	.word	0x08009261
 800920c:	0800922f 	.word	0x0800922f
 8009210:	08009261 	.word	0x08009261
 8009214:	08009261 	.word	0x08009261
 8009218:	08009261 	.word	0x08009261
 800921c:	08009237 	.word	0x08009237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009220:	f7fd f910 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 8009224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009226:	e021      	b.n	800926c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009228:	4b0c      	ldr	r3, [pc, #48]	@ (800925c <UART_SetConfig+0x2f8>)
 800922a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800922c:	e01e      	b.n	800926c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800922e:	f7fd f89d 	bl	800636c <HAL_RCC_GetSysClockFreq>
 8009232:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009234:	e01a      	b.n	800926c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800923c:	e016      	b.n	800926c <UART_SetConfig+0x308>
 800923e:	bf00      	nop
 8009240:	cfff69f3 	.word	0xcfff69f3
 8009244:	40008000 	.word	0x40008000
 8009248:	40013800 	.word	0x40013800
 800924c:	40021000 	.word	0x40021000
 8009250:	40004400 	.word	0x40004400
 8009254:	40004800 	.word	0x40004800
 8009258:	40004c00 	.word	0x40004c00
 800925c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800926a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800926c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 812a 	beq.w	80094c8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009278:	4a9e      	ldr	r2, [pc, #632]	@ (80094f4 <UART_SetConfig+0x590>)
 800927a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800927e:	461a      	mov	r2, r3
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	fbb3 f3f2 	udiv	r3, r3, r2
 8009286:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	4613      	mov	r3, r2
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	4413      	add	r3, r2
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	429a      	cmp	r2, r3
 8009296:	d305      	bcc.n	80092a4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d903      	bls.n	80092ac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80092aa:	e10d      	b.n	80094c8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	2200      	movs	r2, #0
 80092b0:	60bb      	str	r3, [r7, #8]
 80092b2:	60fa      	str	r2, [r7, #12]
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b8:	4a8e      	ldr	r2, [pc, #568]	@ (80094f4 <UART_SetConfig+0x590>)
 80092ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2200      	movs	r2, #0
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092ce:	f7f7 fd03 	bl	8000cd8 <__aeabi_uldivmod>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4610      	mov	r0, r2
 80092d8:	4619      	mov	r1, r3
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	f04f 0300 	mov.w	r3, #0
 80092e2:	020b      	lsls	r3, r1, #8
 80092e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092e8:	0202      	lsls	r2, r0, #8
 80092ea:	6979      	ldr	r1, [r7, #20]
 80092ec:	6849      	ldr	r1, [r1, #4]
 80092ee:	0849      	lsrs	r1, r1, #1
 80092f0:	2000      	movs	r0, #0
 80092f2:	460c      	mov	r4, r1
 80092f4:	4605      	mov	r5, r0
 80092f6:	eb12 0804 	adds.w	r8, r2, r4
 80092fa:	eb43 0905 	adc.w	r9, r3, r5
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	469a      	mov	sl, r3
 8009306:	4693      	mov	fp, r2
 8009308:	4652      	mov	r2, sl
 800930a:	465b      	mov	r3, fp
 800930c:	4640      	mov	r0, r8
 800930e:	4649      	mov	r1, r9
 8009310:	f7f7 fce2 	bl	8000cd8 <__aeabi_uldivmod>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4613      	mov	r3, r2
 800931a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800931c:	6a3b      	ldr	r3, [r7, #32]
 800931e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009322:	d308      	bcc.n	8009336 <UART_SetConfig+0x3d2>
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800932a:	d204      	bcs.n	8009336 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6a3a      	ldr	r2, [r7, #32]
 8009332:	60da      	str	r2, [r3, #12]
 8009334:	e0c8      	b.n	80094c8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800933c:	e0c4      	b.n	80094c8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009346:	d167      	bne.n	8009418 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009348:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800934c:	2b08      	cmp	r3, #8
 800934e:	d828      	bhi.n	80093a2 <UART_SetConfig+0x43e>
 8009350:	a201      	add	r2, pc, #4	@ (adr r2, 8009358 <UART_SetConfig+0x3f4>)
 8009352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009356:	bf00      	nop
 8009358:	0800937d 	.word	0x0800937d
 800935c:	08009385 	.word	0x08009385
 8009360:	0800938d 	.word	0x0800938d
 8009364:	080093a3 	.word	0x080093a3
 8009368:	08009393 	.word	0x08009393
 800936c:	080093a3 	.word	0x080093a3
 8009370:	080093a3 	.word	0x080093a3
 8009374:	080093a3 	.word	0x080093a3
 8009378:	0800939b 	.word	0x0800939b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800937c:	f7fd f862 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 8009380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009382:	e014      	b.n	80093ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009384:	f7fd f874 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 8009388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800938a:	e010      	b.n	80093ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800938c:	4b5a      	ldr	r3, [pc, #360]	@ (80094f8 <UART_SetConfig+0x594>)
 800938e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009390:	e00d      	b.n	80093ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009392:	f7fc ffeb 	bl	800636c <HAL_RCC_GetSysClockFreq>
 8009396:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009398:	e009      	b.n	80093ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800939a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800939e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093a0:	e005      	b.n	80093ae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80093ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 8089 	beq.w	80094c8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ba:	4a4e      	ldr	r2, [pc, #312]	@ (80094f4 <UART_SetConfig+0x590>)
 80093bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c0:	461a      	mov	r2, r3
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093c8:	005a      	lsls	r2, r3, #1
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	085b      	lsrs	r3, r3, #1
 80093d0:	441a      	add	r2, r3
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	2b0f      	cmp	r3, #15
 80093e0:	d916      	bls.n	8009410 <UART_SetConfig+0x4ac>
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093e8:	d212      	bcs.n	8009410 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f023 030f 	bic.w	r3, r3, #15
 80093f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	b29a      	uxth	r2, r3
 8009400:	8bfb      	ldrh	r3, [r7, #30]
 8009402:	4313      	orrs	r3, r2
 8009404:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	8bfa      	ldrh	r2, [r7, #30]
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	e05b      	b.n	80094c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009416:	e057      	b.n	80094c8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009418:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800941c:	2b08      	cmp	r3, #8
 800941e:	d828      	bhi.n	8009472 <UART_SetConfig+0x50e>
 8009420:	a201      	add	r2, pc, #4	@ (adr r2, 8009428 <UART_SetConfig+0x4c4>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	0800944d 	.word	0x0800944d
 800942c:	08009455 	.word	0x08009455
 8009430:	0800945d 	.word	0x0800945d
 8009434:	08009473 	.word	0x08009473
 8009438:	08009463 	.word	0x08009463
 800943c:	08009473 	.word	0x08009473
 8009440:	08009473 	.word	0x08009473
 8009444:	08009473 	.word	0x08009473
 8009448:	0800946b 	.word	0x0800946b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800944c:	f7fc fffa 	bl	8006444 <HAL_RCC_GetPCLK1Freq>
 8009450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009452:	e014      	b.n	800947e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009454:	f7fd f80c 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 8009458:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800945a:	e010      	b.n	800947e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800945c:	4b26      	ldr	r3, [pc, #152]	@ (80094f8 <UART_SetConfig+0x594>)
 800945e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009460:	e00d      	b.n	800947e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009462:	f7fc ff83 	bl	800636c <HAL_RCC_GetSysClockFreq>
 8009466:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009468:	e009      	b.n	800947e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800946a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800946e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009470:	e005      	b.n	800947e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800947c:	bf00      	nop
    }

    if (pclk != 0U)
 800947e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009480:	2b00      	cmp	r3, #0
 8009482:	d021      	beq.n	80094c8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009488:	4a1a      	ldr	r2, [pc, #104]	@ (80094f4 <UART_SetConfig+0x590>)
 800948a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800948e:	461a      	mov	r2, r3
 8009490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009492:	fbb3 f2f2 	udiv	r2, r3, r2
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	085b      	lsrs	r3, r3, #1
 800949c:	441a      	add	r2, r3
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	2b0f      	cmp	r3, #15
 80094ac:	d909      	bls.n	80094c2 <UART_SetConfig+0x55e>
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094b4:	d205      	bcs.n	80094c2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60da      	str	r2, [r3, #12]
 80094c0:	e002      	b.n	80094c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2200      	movs	r2, #0
 80094dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2200      	movs	r2, #0
 80094e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80094e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3730      	adds	r7, #48	@ 0x30
 80094ec:	46bd      	mov	sp, r7
 80094ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094f2:	bf00      	nop
 80094f4:	08010f04 	.word	0x08010f04
 80094f8:	00f42400 	.word	0x00f42400

080094fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009508:	f003 0308 	and.w	r3, r3, #8
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00a      	beq.n	8009526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00a      	beq.n	8009548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	430a      	orrs	r2, r1
 8009546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00a      	beq.n	800956a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	430a      	orrs	r2, r1
 800958a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	f003 0310 	and.w	r3, r3, #16
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00a      	beq.n	80095ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b2:	f003 0320 	and.w	r3, r3, #32
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d01a      	beq.n	8009612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095fa:	d10a      	bne.n	8009612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	605a      	str	r2, [r3, #4]
  }
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b098      	sub	sp, #96	@ 0x60
 8009644:	af02      	add	r7, sp, #8
 8009646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009650:	f7f9 fece 	bl	80033f0 <HAL_GetTick>
 8009654:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0308 	and.w	r3, r3, #8
 8009660:	2b08      	cmp	r3, #8
 8009662:	d12f      	bne.n	80096c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009664:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800966c:	2200      	movs	r2, #0
 800966e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f88e 	bl	8009794 <UART_WaitOnFlagUntilTimeout>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d022      	beq.n	80096c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	e853 3f00 	ldrex	r3, [r3]
 800968a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800968c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800968e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009692:	653b      	str	r3, [r7, #80]	@ 0x50
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	461a      	mov	r2, r3
 800969a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800969c:	647b      	str	r3, [r7, #68]	@ 0x44
 800969e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096a4:	e841 2300 	strex	r3, r2, [r1]
 80096a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e6      	bne.n	800967e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096c0:	2303      	movs	r3, #3
 80096c2:	e063      	b.n	800978c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d149      	bne.n	8009766 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096da:	2200      	movs	r2, #0
 80096dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f857 	bl	8009794 <UART_WaitOnFlagUntilTimeout>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d03c      	beq.n	8009766 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	623b      	str	r3, [r7, #32]
   return(result);
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800970a:	633b      	str	r3, [r7, #48]	@ 0x30
 800970c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e6      	bne.n	80096ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3308      	adds	r3, #8
 8009724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	e853 3f00 	ldrex	r3, [r3]
 800972c:	60fb      	str	r3, [r7, #12]
   return(result);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f023 0301 	bic.w	r3, r3, #1
 8009734:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800973e:	61fa      	str	r2, [r7, #28]
 8009740:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	69b9      	ldr	r1, [r7, #24]
 8009744:	69fa      	ldr	r2, [r7, #28]
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	617b      	str	r3, [r7, #20]
   return(result);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e5      	bne.n	800971e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2220      	movs	r2, #32
 8009756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e012      	b.n	800978c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3758      	adds	r7, #88	@ 0x58
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	4613      	mov	r3, r2
 80097a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097a4:	e04f      	b.n	8009846 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ac:	d04b      	beq.n	8009846 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ae:	f7f9 fe1f 	bl	80033f0 <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d302      	bcc.n	80097c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d101      	bne.n	80097c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e04e      	b.n	8009866 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d037      	beq.n	8009846 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b80      	cmp	r3, #128	@ 0x80
 80097da:	d034      	beq.n	8009846 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2b40      	cmp	r3, #64	@ 0x40
 80097e0:	d031      	beq.n	8009846 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	f003 0308 	and.w	r3, r3, #8
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	d110      	bne.n	8009812 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2208      	movs	r2, #8
 80097f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 f920 	bl	8009a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2208      	movs	r2, #8
 8009802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e029      	b.n	8009866 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800981c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009820:	d111      	bne.n	8009846 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800982a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 f906 	bl	8009a3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2220      	movs	r2, #32
 8009836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e00f      	b.n	8009866 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69da      	ldr	r2, [r3, #28]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	4013      	ands	r3, r2
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	429a      	cmp	r2, r3
 8009854:	bf0c      	ite	eq
 8009856:	2301      	moveq	r3, #1
 8009858:	2300      	movne	r3, #0
 800985a:	b2db      	uxtb	r3, r3
 800985c:	461a      	mov	r2, r3
 800985e:	79fb      	ldrb	r3, [r7, #7]
 8009860:	429a      	cmp	r2, r3
 8009862:	d0a0      	beq.n	80097a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b096      	sub	sp, #88	@ 0x58
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	88fa      	ldrh	r2, [r7, #6]
 8009888:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2222      	movs	r2, #34	@ 0x22
 8009898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d02d      	beq.n	8009902 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ac:	4a40      	ldr	r2, [pc, #256]	@ (80099b0 <UART_Start_Receive_DMA+0x140>)
 80098ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098b6:	4a3f      	ldr	r2, [pc, #252]	@ (80099b4 <UART_Start_Receive_DMA+0x144>)
 80098b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098c0:	4a3d      	ldr	r2, [pc, #244]	@ (80099b8 <UART_Start_Receive_DMA+0x148>)
 80098c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098ca:	2200      	movs	r2, #0
 80098cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3324      	adds	r3, #36	@ 0x24
 80098da:	4619      	mov	r1, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098e0:	461a      	mov	r2, r3
 80098e2:	88fb      	ldrh	r3, [r7, #6]
 80098e4:	f7fb f9a8 	bl	8004c38 <HAL_DMA_Start_IT>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d009      	beq.n	8009902 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2210      	movs	r2, #16
 80098f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e051      	b.n	80099a6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d018      	beq.n	800993c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009912:	e853 3f00 	ldrex	r3, [r3]
 8009916:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800991e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	461a      	mov	r2, r3
 8009926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800992a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800992e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e6      	bne.n	800990a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3308      	adds	r3, #8
 8009942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009946:	e853 3f00 	ldrex	r3, [r3]
 800994a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	653b      	str	r3, [r7, #80]	@ 0x50
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3308      	adds	r3, #8
 800995a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800995c:	637a      	str	r2, [r7, #52]	@ 0x34
 800995e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009960:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009962:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009964:	e841 2300 	strex	r3, r2, [r1]
 8009968:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800996a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1e5      	bne.n	800993c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3308      	adds	r3, #8
 8009976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	613b      	str	r3, [r7, #16]
   return(result);
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3308      	adds	r3, #8
 800998e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009990:	623a      	str	r2, [r7, #32]
 8009992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009994:	69f9      	ldr	r1, [r7, #28]
 8009996:	6a3a      	ldr	r2, [r7, #32]
 8009998:	e841 2300 	strex	r3, r2, [r1]
 800999c:	61bb      	str	r3, [r7, #24]
   return(result);
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1e5      	bne.n	8009970 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3758      	adds	r7, #88	@ 0x58
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	08009b0b 	.word	0x08009b0b
 80099b4:	08009c37 	.word	0x08009c37
 80099b8:	08009c75 	.word	0x08009c75

080099bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80099bc:	b480      	push	{r7}
 80099be:	b08f      	sub	sp, #60	@ 0x3c
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80099d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099ea:	e841 2300 	strex	r3, r2, [r1]
 80099ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1e6      	bne.n	80099c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3308      	adds	r3, #8
 80099fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3308      	adds	r3, #8
 8009a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a16:	61ba      	str	r2, [r7, #24]
 8009a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6979      	ldr	r1, [r7, #20]
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	613b      	str	r3, [r7, #16]
   return(result);
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e5      	bne.n	80099f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009a32:	bf00      	nop
 8009a34:	373c      	adds	r7, #60	@ 0x3c
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b095      	sub	sp, #84	@ 0x54
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4e:	e853 3f00 	ldrex	r3, [r3]
 8009a52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	461a      	mov	r2, r3
 8009a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a6c:	e841 2300 	strex	r3, r2, [r1]
 8009a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1e6      	bne.n	8009a46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a8e:	f023 0301 	bic.w	r3, r3, #1
 8009a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e3      	bne.n	8009a78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d118      	bne.n	8009aea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	f023 0310 	bic.w	r3, r3, #16
 8009acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ad6:	61bb      	str	r3, [r7, #24]
 8009ad8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	6979      	ldr	r1, [r7, #20]
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e6      	bne.n	8009ab8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009afe:	bf00      	nop
 8009b00:	3754      	adds	r7, #84	@ 0x54
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b09c      	sub	sp, #112	@ 0x70
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b16:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0320 	and.w	r3, r3, #32
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d171      	bne.n	8009c0a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b4e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b54:	e841 2300 	strex	r3, r2, [r1]
 8009b58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e6      	bne.n	8009b2e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6a:	e853 3f00 	ldrex	r3, [r3]
 8009b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b72:	f023 0301 	bic.w	r3, r3, #1
 8009b76:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3308      	adds	r3, #8
 8009b7e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b80:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b82:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b88:	e841 2300 	strex	r3, r2, [r1]
 8009b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e5      	bne.n	8009b60 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3308      	adds	r3, #8
 8009b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9e:	e853 3f00 	ldrex	r3, [r3]
 8009ba2:	623b      	str	r3, [r7, #32]
   return(result);
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009baa:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009bb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bbc:	e841 2300 	strex	r3, r2, [r1]
 8009bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e5      	bne.n	8009b94 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bca:	2220      	movs	r2, #32
 8009bcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d118      	bne.n	8009c0a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f023 0310 	bic.w	r3, r3, #16
 8009bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bf6:	61fb      	str	r3, [r7, #28]
 8009bf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	69b9      	ldr	r1, [r7, #24]
 8009bfc:	69fa      	ldr	r2, [r7, #28]
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	617b      	str	r3, [r7, #20]
   return(result);
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e6      	bne.n	8009bd8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d107      	bne.n	8009c28 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c22:	f7ff f993 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c26:	e002      	b.n	8009c2e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009c28:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c2a:	f7f9 fa25 	bl	8003078 <HAL_UART_RxCpltCallback>
}
 8009c2e:	bf00      	nop
 8009c30:	3770      	adds	r7, #112	@ 0x70
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d109      	bne.n	8009c66 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c58:	085b      	lsrs	r3, r3, #1
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f7ff f974 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c64:	e002      	b.n	8009c6c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff f95c 	bl	8008f24 <HAL_UART_RxHalfCpltCallback>
}
 8009c6c:	bf00      	nop
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c80:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c90:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c9c:	2b80      	cmp	r3, #128	@ 0x80
 8009c9e:	d109      	bne.n	8009cb4 <UART_DMAError+0x40>
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	2b21      	cmp	r3, #33	@ 0x21
 8009ca4:	d106      	bne.n	8009cb4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009cae:	6978      	ldr	r0, [r7, #20]
 8009cb0:	f7ff fe84 	bl	80099bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cbe:	2b40      	cmp	r3, #64	@ 0x40
 8009cc0:	d109      	bne.n	8009cd6 <UART_DMAError+0x62>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b22      	cmp	r3, #34	@ 0x22
 8009cc6:	d106      	bne.n	8009cd6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009cd0:	6978      	ldr	r0, [r7, #20]
 8009cd2:	f7ff feb4 	bl	8009a3e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cdc:	f043 0210 	orr.w	r2, r3, #16
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ce6:	6978      	ldr	r0, [r7, #20]
 8009ce8:	f7ff f926 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cec:	bf00      	nop
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f7ff f914 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d10:	bf00      	nop
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	e853 3f00 	ldrex	r3, [r3]
 8009d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	61bb      	str	r3, [r7, #24]
 8009d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d42:	6979      	ldr	r1, [r7, #20]
 8009d44:	69ba      	ldr	r2, [r7, #24]
 8009d46:	e841 2300 	strex	r3, r2, [r1]
 8009d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1e6      	bne.n	8009d20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2220      	movs	r2, #32
 8009d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff f8d5 	bl	8008f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d66:	bf00      	nop
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d9e:	bf00      	nop
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d101      	bne.n	8009dc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	e027      	b.n	8009e10 <HAL_UARTEx_DisableFifoMode+0x66>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2224      	movs	r2, #36	@ 0x24
 8009dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 0201 	bic.w	r2, r2, #1
 8009de6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009dee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2220      	movs	r2, #32
 8009e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d101      	bne.n	8009e34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e30:	2302      	movs	r3, #2
 8009e32:	e02d      	b.n	8009e90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2224      	movs	r2, #36	@ 0x24
 8009e40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0201 	bic.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f84f 	bl	8009f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e02d      	b.n	8009f0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2224      	movs	r2, #36	@ 0x24
 8009ebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f022 0201 	bic.w	r2, r2, #1
 8009ed6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f811 	bl	8009f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d108      	bne.n	8009f36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f34:	e031      	b.n	8009f9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f36:	2308      	movs	r3, #8
 8009f38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	0e5b      	lsrs	r3, r3, #25
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 0307 	and.w	r3, r3, #7
 8009f4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	0f5b      	lsrs	r3, r3, #29
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	7b3a      	ldrb	r2, [r7, #12]
 8009f62:	4911      	ldr	r1, [pc, #68]	@ (8009fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8009f64:	5c8a      	ldrb	r2, [r1, r2]
 8009f66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f6a:	7b3a      	ldrb	r2, [r7, #12]
 8009f6c:	490f      	ldr	r1, [pc, #60]	@ (8009fac <UARTEx_SetNbDataToProcess+0x98>)
 8009f6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	7b7a      	ldrb	r2, [r7, #13]
 8009f80:	4909      	ldr	r1, [pc, #36]	@ (8009fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8009f82:	5c8a      	ldrb	r2, [r1, r2]
 8009f84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f88:	7b7a      	ldrb	r2, [r7, #13]
 8009f8a:	4908      	ldr	r1, [pc, #32]	@ (8009fac <UARTEx_SetNbDataToProcess+0x98>)
 8009f8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009f9a:	bf00      	nop
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	08010f1c 	.word	0x08010f1c
 8009fac:	08010f24 	.word	0x08010f24

08009fb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009fb8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009fbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	43db      	mvns	r3, r3
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	4013      	ands	r3, r2
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	1d3b      	adds	r3, r7, #4
 8009ff0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
	...

0800a024 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800a028:	4907      	ldr	r1, [pc, #28]	@ (800a048 <MX_FATFS_Init+0x24>)
 800a02a:	4808      	ldr	r0, [pc, #32]	@ (800a04c <MX_FATFS_Init+0x28>)
 800a02c:	f002 fb64 	bl	800c6f8 <FATFS_LinkDriver>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800a036:	f04f 33ff 	mov.w	r3, #4294967295
 800a03a:	e003      	b.n	800a044 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800a03c:	4b04      	ldr	r3, [pc, #16]	@ (800a050 <MX_FATFS_Init+0x2c>)
 800a03e:	2201      	movs	r2, #1
 800a040:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800a042:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800a044:	4618      	mov	r0, r3
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20001314 	.word	0x20001314
 800a04c:	20000018 	.word	0x20000018
 800a050:	20001318 	.word	0x20001318

0800a054 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a054:	b480      	push	{r7}
 800a056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a058:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	4618      	mov	r0, r3
 800a072:	f7f7 fd25 	bl	8001ac0 <SD_disk_initialize>
 800a076:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7f7 fe01 	bl	8001c94 <SD_disk_status>
 800a092:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800a0ac:	7bf8      	ldrb	r0, [r7, #15]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	68b9      	ldr	r1, [r7, #8]
 800a0b4:	f7f7 fe04 	bl	8001cc0 <SD_disk_read>
 800a0b8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800a0d2:	7bf8      	ldrb	r0, [r7, #15]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	f7f7 fe5b 	bl	8001d94 <SD_disk_write>
 800a0de:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	603a      	str	r2, [r7, #0]
 800a0f2:	71fb      	strb	r3, [r7, #7]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800a0f8:	79b9      	ldrb	r1, [r7, #6]
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7f7 fecc 	bl	8001e9c <SD_disk_ioctl>
 800a104:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a11a:	79fb      	ldrb	r3, [r7, #7]
 800a11c:	4a08      	ldr	r2, [pc, #32]	@ (800a140 <disk_status+0x30>)
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	79fa      	ldrb	r2, [r7, #7]
 800a128:	4905      	ldr	r1, [pc, #20]	@ (800a140 <disk_status+0x30>)
 800a12a:	440a      	add	r2, r1
 800a12c:	7a12      	ldrb	r2, [r2, #8]
 800a12e:	4610      	mov	r0, r2
 800a130:	4798      	blx	r3
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a136:	7bfb      	ldrb	r3, [r7, #15]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20001344 	.word	0x20001344

0800a144 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4603      	mov	r3, r0
 800a14c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a152:	79fb      	ldrb	r3, [r7, #7]
 800a154:	4a0d      	ldr	r2, [pc, #52]	@ (800a18c <disk_initialize+0x48>)
 800a156:	5cd3      	ldrb	r3, [r2, r3]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d111      	bne.n	800a180 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a15c:	79fb      	ldrb	r3, [r7, #7]
 800a15e:	4a0b      	ldr	r2, [pc, #44]	@ (800a18c <disk_initialize+0x48>)
 800a160:	2101      	movs	r1, #1
 800a162:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a164:	79fb      	ldrb	r3, [r7, #7]
 800a166:	4a09      	ldr	r2, [pc, #36]	@ (800a18c <disk_initialize+0x48>)
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	79fa      	ldrb	r2, [r7, #7]
 800a172:	4906      	ldr	r1, [pc, #24]	@ (800a18c <disk_initialize+0x48>)
 800a174:	440a      	add	r2, r1
 800a176:	7a12      	ldrb	r2, [r2, #8]
 800a178:	4610      	mov	r0, r2
 800a17a:	4798      	blx	r3
 800a17c:	4603      	mov	r3, r0
 800a17e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20001344 	.word	0x20001344

0800a190 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
 800a196:	60b9      	str	r1, [r7, #8]
 800a198:	607a      	str	r2, [r7, #4]
 800a19a:	603b      	str	r3, [r7, #0]
 800a19c:	4603      	mov	r3, r0
 800a19e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	4a0a      	ldr	r2, [pc, #40]	@ (800a1cc <disk_read+0x3c>)
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	689c      	ldr	r4, [r3, #8]
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	4a07      	ldr	r2, [pc, #28]	@ (800a1cc <disk_read+0x3c>)
 800a1b0:	4413      	add	r3, r2
 800a1b2:	7a18      	ldrb	r0, [r3, #8]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	47a0      	blx	r4
 800a1bc:	4603      	mov	r3, r0
 800a1be:	75fb      	strb	r3, [r7, #23]
  return res;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd90      	pop	{r4, r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20001344 	.word	0x20001344

0800a1d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a1d0:	b590      	push	{r4, r7, lr}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60b9      	str	r1, [r7, #8]
 800a1d8:	607a      	str	r2, [r7, #4]
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	4a0a      	ldr	r2, [pc, #40]	@ (800a20c <disk_write+0x3c>)
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	68dc      	ldr	r4, [r3, #12]
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	4a07      	ldr	r2, [pc, #28]	@ (800a20c <disk_write+0x3c>)
 800a1f0:	4413      	add	r3, r2
 800a1f2:	7a18      	ldrb	r0, [r3, #8]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	68b9      	ldr	r1, [r7, #8]
 800a1fa:	47a0      	blx	r4
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800a200:	7dfb      	ldrb	r3, [r7, #23]
}
 800a202:	4618      	mov	r0, r3
 800a204:	371c      	adds	r7, #28
 800a206:	46bd      	mov	sp, r7
 800a208:	bd90      	pop	{r4, r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20001344 	.word	0x20001344

0800a210 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	603a      	str	r2, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
 800a21c:	460b      	mov	r3, r1
 800a21e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	4a09      	ldr	r2, [pc, #36]	@ (800a248 <disk_ioctl+0x38>)
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	79fa      	ldrb	r2, [r7, #7]
 800a22e:	4906      	ldr	r1, [pc, #24]	@ (800a248 <disk_ioctl+0x38>)
 800a230:	440a      	add	r2, r1
 800a232:	7a10      	ldrb	r0, [r2, #8]
 800a234:	79b9      	ldrb	r1, [r7, #6]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	4798      	blx	r3
 800a23a:	4603      	mov	r3, r0
 800a23c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20001344 	.word	0x20001344

0800a24c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3301      	adds	r3, #1
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a25c:	89fb      	ldrh	r3, [r7, #14]
 800a25e:	021b      	lsls	r3, r3, #8
 800a260:	b21a      	sxth	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	b21b      	sxth	r3, r3
 800a268:	4313      	orrs	r3, r2
 800a26a:	b21b      	sxth	r3, r3
 800a26c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a26e:	89fb      	ldrh	r3, [r7, #14]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3303      	adds	r3, #3
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	021b      	lsls	r3, r3, #8
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	3202      	adds	r2, #2
 800a294:	7812      	ldrb	r2, [r2, #0]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	021b      	lsls	r3, r3, #8
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	3201      	adds	r2, #1
 800a2a2:	7812      	ldrb	r2, [r2, #0]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	021b      	lsls	r3, r3, #8
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	7812      	ldrb	r2, [r2, #0]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	887a      	ldrh	r2, [r7, #2]
 800a2d6:	b2d2      	uxtb	r2, r2
 800a2d8:	701a      	strb	r2, [r3, #0]
 800a2da:	887b      	ldrh	r3, [r7, #2]
 800a2dc:	0a1b      	lsrs	r3, r3, #8
 800a2de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	607a      	str	r2, [r7, #4]
 800a2e6:	887a      	ldrh	r2, [r7, #2]
 800a2e8:	b2d2      	uxtb	r2, r2
 800a2ea:	701a      	strb	r2, [r3, #0]
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	b2d2      	uxtb	r2, r2
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	0a1b      	lsrs	r3, r3, #8
 800a312:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	607a      	str	r2, [r7, #4]
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	b2d2      	uxtb	r2, r2
 800a31e:	701a      	strb	r2, [r3, #0]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	0a1b      	lsrs	r3, r3, #8
 800a324:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	1c5a      	adds	r2, r3, #1
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	b2d2      	uxtb	r2, r2
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	0a1b      	lsrs	r3, r3, #8
 800a336:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	607a      	str	r2, [r7, #4]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	b2d2      	uxtb	r2, r2
 800a342:	701a      	strb	r2, [r3, #0]
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a350:	b480      	push	{r7}
 800a352:	b087      	sub	sp, #28
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00d      	beq.n	800a386 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	1c53      	adds	r3, r2, #1
 800a36e:	613b      	str	r3, [r7, #16]
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	1c59      	adds	r1, r3, #1
 800a374:	6179      	str	r1, [r7, #20]
 800a376:	7812      	ldrb	r2, [r2, #0]
 800a378:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	607b      	str	r3, [r7, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1f1      	bne.n	800a36a <mem_cpy+0x1a>
	}
}
 800a386:	bf00      	nop
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a392:	b480      	push	{r7}
 800a394:	b087      	sub	sp, #28
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	617a      	str	r2, [r7, #20]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	607b      	str	r3, [r7, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1f3      	bne.n	800a3a2 <mem_set+0x10>
}
 800a3ba:	bf00      	nop
 800a3bc:	bf00      	nop
 800a3be:	371c      	adds	r7, #28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a3c8:	b480      	push	{r7}
 800a3ca:	b089      	sub	sp, #36	@ 0x24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	61fb      	str	r3, [r7, #28]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	61fa      	str	r2, [r7, #28]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	1c5a      	adds	r2, r3, #1
 800a3ee:	61ba      	str	r2, [r7, #24]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	1acb      	subs	r3, r1, r3
 800a3f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	607b      	str	r3, [r7, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d002      	beq.n	800a408 <mem_cmp+0x40>
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0eb      	beq.n	800a3e0 <mem_cmp+0x18>

	return r;
 800a408:	697b      	ldr	r3, [r7, #20]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3724      	adds	r7, #36	@ 0x24
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a420:	e002      	b.n	800a428 <chk_chr+0x12>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3301      	adds	r3, #1
 800a426:	607b      	str	r3, [r7, #4]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <chk_chr+0x26>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	4293      	cmp	r3, r2
 800a43a:	d1f2      	bne.n	800a422 <chk_chr+0xc>
	return *str;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	781b      	ldrb	r3, [r3, #0]
}
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a456:	2300      	movs	r3, #0
 800a458:	60bb      	str	r3, [r7, #8]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	60fb      	str	r3, [r7, #12]
 800a45e:	e029      	b.n	800a4b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a460:	4a27      	ldr	r2, [pc, #156]	@ (800a500 <chk_lock+0xb4>)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	011b      	lsls	r3, r3, #4
 800a466:	4413      	add	r3, r2
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d01d      	beq.n	800a4aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a46e:	4a24      	ldr	r2, [pc, #144]	@ (800a500 <chk_lock+0xb4>)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	011b      	lsls	r3, r3, #4
 800a474:	4413      	add	r3, r2
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d116      	bne.n	800a4ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a480:	4a1f      	ldr	r2, [pc, #124]	@ (800a500 <chk_lock+0xb4>)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	011b      	lsls	r3, r3, #4
 800a486:	4413      	add	r3, r2
 800a488:	3304      	adds	r3, #4
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a490:	429a      	cmp	r2, r3
 800a492:	d10c      	bne.n	800a4ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a494:	4a1a      	ldr	r2, [pc, #104]	@ (800a500 <chk_lock+0xb4>)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	011b      	lsls	r3, r3, #4
 800a49a:	4413      	add	r3, r2
 800a49c:	3308      	adds	r3, #8
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d102      	bne.n	800a4ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a4a8:	e007      	b.n	800a4ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d9d2      	bls.n	800a460 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d109      	bne.n	800a4d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d102      	bne.n	800a4cc <chk_lock+0x80>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d101      	bne.n	800a4d0 <chk_lock+0x84>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e010      	b.n	800a4f2 <chk_lock+0xa6>
 800a4d0:	2312      	movs	r3, #18
 800a4d2:	e00e      	b.n	800a4f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d108      	bne.n	800a4ec <chk_lock+0xa0>
 800a4da:	4a09      	ldr	r2, [pc, #36]	@ (800a500 <chk_lock+0xb4>)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	4413      	add	r3, r2
 800a4e2:	330c      	adds	r3, #12
 800a4e4:	881b      	ldrh	r3, [r3, #0]
 800a4e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ea:	d101      	bne.n	800a4f0 <chk_lock+0xa4>
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	e000      	b.n	800a4f2 <chk_lock+0xa6>
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	20001324 	.word	0x20001324

0800a504 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a50a:	2300      	movs	r3, #0
 800a50c:	607b      	str	r3, [r7, #4]
 800a50e:	e002      	b.n	800a516 <enq_lock+0x12>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3301      	adds	r3, #1
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d806      	bhi.n	800a52a <enq_lock+0x26>
 800a51c:	4a09      	ldr	r2, [pc, #36]	@ (800a544 <enq_lock+0x40>)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	011b      	lsls	r3, r3, #4
 800a522:	4413      	add	r3, r2
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1f2      	bne.n	800a510 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	bf14      	ite	ne
 800a530:	2301      	movne	r3, #1
 800a532:	2300      	moveq	r3, #0
 800a534:	b2db      	uxtb	r3, r3
}
 800a536:	4618      	mov	r0, r3
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	20001324 	.word	0x20001324

0800a548 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a552:	2300      	movs	r3, #0
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	e01f      	b.n	800a598 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a558:	4a41      	ldr	r2, [pc, #260]	@ (800a660 <inc_lock+0x118>)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	011b      	lsls	r3, r3, #4
 800a55e:	4413      	add	r3, r2
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d113      	bne.n	800a592 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a56a:	4a3d      	ldr	r2, [pc, #244]	@ (800a660 <inc_lock+0x118>)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	4413      	add	r3, r2
 800a572:	3304      	adds	r3, #4
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d109      	bne.n	800a592 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a57e:	4a38      	ldr	r2, [pc, #224]	@ (800a660 <inc_lock+0x118>)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	4413      	add	r3, r2
 800a586:	3308      	adds	r3, #8
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a58e:	429a      	cmp	r2, r3
 800a590:	d006      	beq.n	800a5a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3301      	adds	r3, #1
 800a596:	60fb      	str	r3, [r7, #12]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d9dc      	bls.n	800a558 <inc_lock+0x10>
 800a59e:	e000      	b.n	800a5a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a5a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d132      	bne.n	800a60e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	e002      	b.n	800a5b4 <inc_lock+0x6c>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d806      	bhi.n	800a5c8 <inc_lock+0x80>
 800a5ba:	4a29      	ldr	r2, [pc, #164]	@ (800a660 <inc_lock+0x118>)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	011b      	lsls	r3, r3, #4
 800a5c0:	4413      	add	r3, r2
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1f2      	bne.n	800a5ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d101      	bne.n	800a5d2 <inc_lock+0x8a>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e040      	b.n	800a654 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	4922      	ldr	r1, [pc, #136]	@ (800a660 <inc_lock+0x118>)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	011b      	lsls	r3, r3, #4
 800a5dc:	440b      	add	r3, r1
 800a5de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689a      	ldr	r2, [r3, #8]
 800a5e4:	491e      	ldr	r1, [pc, #120]	@ (800a660 <inc_lock+0x118>)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	011b      	lsls	r3, r3, #4
 800a5ea:	440b      	add	r3, r1
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	695a      	ldr	r2, [r3, #20]
 800a5f4:	491a      	ldr	r1, [pc, #104]	@ (800a660 <inc_lock+0x118>)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	011b      	lsls	r3, r3, #4
 800a5fa:	440b      	add	r3, r1
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a600:	4a17      	ldr	r2, [pc, #92]	@ (800a660 <inc_lock+0x118>)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	4413      	add	r3, r2
 800a608:	330c      	adds	r3, #12
 800a60a:	2200      	movs	r2, #0
 800a60c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d009      	beq.n	800a628 <inc_lock+0xe0>
 800a614:	4a12      	ldr	r2, [pc, #72]	@ (800a660 <inc_lock+0x118>)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	011b      	lsls	r3, r3, #4
 800a61a:	4413      	add	r3, r2
 800a61c:	330c      	adds	r3, #12
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <inc_lock+0xe0>
 800a624:	2300      	movs	r3, #0
 800a626:	e015      	b.n	800a654 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d108      	bne.n	800a640 <inc_lock+0xf8>
 800a62e:	4a0c      	ldr	r2, [pc, #48]	@ (800a660 <inc_lock+0x118>)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	011b      	lsls	r3, r3, #4
 800a634:	4413      	add	r3, r2
 800a636:	330c      	adds	r3, #12
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	3301      	adds	r3, #1
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	e001      	b.n	800a644 <inc_lock+0xfc>
 800a640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a644:	4906      	ldr	r1, [pc, #24]	@ (800a660 <inc_lock+0x118>)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	011b      	lsls	r3, r3, #4
 800a64a:	440b      	add	r3, r1
 800a64c:	330c      	adds	r3, #12
 800a64e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3301      	adds	r3, #1
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	20001324 	.word	0x20001324

0800a664 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3b01      	subs	r3, #1
 800a670:	607b      	str	r3, [r7, #4]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d825      	bhi.n	800a6c4 <dec_lock+0x60>
		n = Files[i].ctr;
 800a678:	4a17      	ldr	r2, [pc, #92]	@ (800a6d8 <dec_lock+0x74>)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	4413      	add	r3, r2
 800a680:	330c      	adds	r3, #12
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a686:	89fb      	ldrh	r3, [r7, #14]
 800a688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a68c:	d101      	bne.n	800a692 <dec_lock+0x2e>
 800a68e:	2300      	movs	r3, #0
 800a690:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a692:	89fb      	ldrh	r3, [r7, #14]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d002      	beq.n	800a69e <dec_lock+0x3a>
 800a698:	89fb      	ldrh	r3, [r7, #14]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a69e:	4a0e      	ldr	r2, [pc, #56]	@ (800a6d8 <dec_lock+0x74>)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	011b      	lsls	r3, r3, #4
 800a6a4:	4413      	add	r3, r2
 800a6a6:	330c      	adds	r3, #12
 800a6a8:	89fa      	ldrh	r2, [r7, #14]
 800a6aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a6ac:	89fb      	ldrh	r3, [r7, #14]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d105      	bne.n	800a6be <dec_lock+0x5a>
 800a6b2:	4a09      	ldr	r2, [pc, #36]	@ (800a6d8 <dec_lock+0x74>)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	011b      	lsls	r3, r3, #4
 800a6b8:	4413      	add	r3, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	737b      	strb	r3, [r7, #13]
 800a6c2:	e001      	b.n	800a6c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a6c8:	7b7b      	ldrb	r3, [r7, #13]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	20001324 	.word	0x20001324

0800a6dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	e010      	b.n	800a70c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a6ea:	4a0d      	ldr	r2, [pc, #52]	@ (800a720 <clear_lock+0x44>)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	011b      	lsls	r3, r3, #4
 800a6f0:	4413      	add	r3, r2
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d105      	bne.n	800a706 <clear_lock+0x2a>
 800a6fa:	4a09      	ldr	r2, [pc, #36]	@ (800a720 <clear_lock+0x44>)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	011b      	lsls	r3, r3, #4
 800a700:	4413      	add	r3, r2
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3301      	adds	r3, #1
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d9eb      	bls.n	800a6ea <clear_lock+0xe>
	}
}
 800a712:	bf00      	nop
 800a714:	bf00      	nop
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	20001324 	.word	0x20001324

0800a724 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	78db      	ldrb	r3, [r3, #3]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d034      	beq.n	800a7a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	7858      	ldrb	r0, [r3, #1]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a748:	2301      	movs	r3, #1
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	f7ff fd40 	bl	800a1d0 <disk_write>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <sync_window+0x38>
			res = FR_DISK_ERR;
 800a756:	2301      	movs	r3, #1
 800a758:	73fb      	strb	r3, [r7, #15]
 800a75a:	e022      	b.n	800a7a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a1b      	ldr	r3, [r3, #32]
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	1ad2      	subs	r2, r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d217      	bcs.n	800a7a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	789b      	ldrb	r3, [r3, #2]
 800a776:	613b      	str	r3, [r7, #16]
 800a778:	e010      	b.n	800a79c <sync_window+0x78>
					wsect += fs->fsize;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	4413      	add	r3, r2
 800a782:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	7858      	ldrb	r0, [r3, #1]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a78e:	2301      	movs	r3, #1
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	f7ff fd1d 	bl	800a1d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	3b01      	subs	r3, #1
 800a79a:	613b      	str	r3, [r7, #16]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d8eb      	bhi.n	800a77a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d01b      	beq.n	800a7fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7ff ffad 	bl	800a724 <sync_window>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d113      	bne.n	800a7fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	7858      	ldrb	r0, [r3, #1]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a7de:	2301      	movs	r3, #1
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	f7ff fcd5 	bl	800a190 <disk_read>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d004      	beq.n	800a7f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff ff87 	bl	800a724 <sync_window>
 800a816:	4603      	mov	r3, r0
 800a818:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d158      	bne.n	800a8d2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2b03      	cmp	r3, #3
 800a826:	d148      	bne.n	800a8ba <sync_fs+0xb2>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	791b      	ldrb	r3, [r3, #4]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d144      	bne.n	800a8ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3330      	adds	r3, #48	@ 0x30
 800a834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a838:	2100      	movs	r1, #0
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff fda9 	bl	800a392 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3330      	adds	r3, #48	@ 0x30
 800a844:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a848:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff fd38 	bl	800a2c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3330      	adds	r3, #48	@ 0x30
 800a856:	4921      	ldr	r1, [pc, #132]	@ (800a8dc <sync_fs+0xd4>)
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fd4d 	bl	800a2f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	3330      	adds	r3, #48	@ 0x30
 800a862:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a866:	491e      	ldr	r1, [pc, #120]	@ (800a8e0 <sync_fs+0xd8>)
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff fd45 	bl	800a2f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	3330      	adds	r3, #48	@ 0x30
 800a872:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	4619      	mov	r1, r3
 800a87c:	4610      	mov	r0, r2
 800a87e:	f7ff fd3b 	bl	800a2f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3330      	adds	r3, #48	@ 0x30
 800a886:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	4619      	mov	r1, r3
 800a890:	4610      	mov	r0, r2
 800a892:	f7ff fd31 	bl	800a2f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	1c5a      	adds	r2, r3, #1
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	7858      	ldrb	r0, [r3, #1]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	f7ff fc8e 	bl	800a1d0 <disk_write>
			fs->fsi_flag = 0;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	785b      	ldrb	r3, [r3, #1]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fca4 	bl	800a210 <disk_ioctl>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <sync_fs+0xca>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	41615252 	.word	0x41615252
 800a8e0:	61417272 	.word	0x61417272

0800a8e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	3b02      	subs	r3, #2
 800a8f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	3b02      	subs	r3, #2
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d301      	bcc.n	800a904 <clust2sect+0x20>
 800a900:	2300      	movs	r3, #0
 800a902:	e008      	b.n	800a916 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	895b      	ldrh	r3, [r3, #10]
 800a908:	461a      	mov	r2, r3
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	fb03 f202 	mul.w	r2, r3, r2
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a914:	4413      	add	r3, r2
}
 800a916:	4618      	mov	r0, r3
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b086      	sub	sp, #24
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d904      	bls.n	800a942 <get_fat+0x20>
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d302      	bcc.n	800a948 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a942:	2301      	movs	r3, #1
 800a944:	617b      	str	r3, [r7, #20]
 800a946:	e08e      	b.n	800aa66 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a948:	f04f 33ff 	mov.w	r3, #4294967295
 800a94c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	2b03      	cmp	r3, #3
 800a954:	d061      	beq.n	800aa1a <get_fat+0xf8>
 800a956:	2b03      	cmp	r3, #3
 800a958:	dc7b      	bgt.n	800aa52 <get_fat+0x130>
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d002      	beq.n	800a964 <get_fat+0x42>
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d041      	beq.n	800a9e6 <get_fat+0xc4>
 800a962:	e076      	b.n	800aa52 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	085b      	lsrs	r3, r3, #1
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	4413      	add	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	6a1a      	ldr	r2, [r3, #32]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	0a5b      	lsrs	r3, r3, #9
 800a97a:	4413      	add	r3, r2
 800a97c:	4619      	mov	r1, r3
 800a97e:	6938      	ldr	r0, [r7, #16]
 800a980:	f7ff ff14 	bl	800a7ac <move_window>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d166      	bne.n	800aa58 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	1c5a      	adds	r2, r3, #1
 800a98e:	60fa      	str	r2, [r7, #12]
 800a990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	4413      	add	r3, r2
 800a998:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a99c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	6a1a      	ldr	r2, [r3, #32]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	0a5b      	lsrs	r3, r3, #9
 800a9a6:	4413      	add	r3, r2
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	6938      	ldr	r0, [r7, #16]
 800a9ac:	f7ff fefe 	bl	800a7ac <move_window>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d152      	bne.n	800aa5c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9c4:	021b      	lsls	r3, r3, #8
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <get_fat+0xba>
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	091b      	lsrs	r3, r3, #4
 800a9da:	e002      	b.n	800a9e2 <get_fat+0xc0>
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9e2:	617b      	str	r3, [r7, #20]
			break;
 800a9e4:	e03f      	b.n	800aa66 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	6a1a      	ldr	r2, [r3, #32]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	0a1b      	lsrs	r3, r3, #8
 800a9ee:	4413      	add	r3, r2
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	6938      	ldr	r0, [r7, #16]
 800a9f4:	f7ff feda 	bl	800a7ac <move_window>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d130      	bne.n	800aa60 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800aa0c:	4413      	add	r3, r2
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff fc1c 	bl	800a24c <ld_word>
 800aa14:	4603      	mov	r3, r0
 800aa16:	617b      	str	r3, [r7, #20]
			break;
 800aa18:	e025      	b.n	800aa66 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	6a1a      	ldr	r2, [r3, #32]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	09db      	lsrs	r3, r3, #7
 800aa22:	4413      	add	r3, r2
 800aa24:	4619      	mov	r1, r3
 800aa26:	6938      	ldr	r0, [r7, #16]
 800aa28:	f7ff fec0 	bl	800a7ac <move_window>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d118      	bne.n	800aa64 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800aa40:	4413      	add	r3, r2
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff fc1a 	bl	800a27c <ld_dword>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800aa4e:	617b      	str	r3, [r7, #20]
			break;
 800aa50:	e009      	b.n	800aa66 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aa52:	2301      	movs	r3, #1
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	e006      	b.n	800aa66 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa58:	bf00      	nop
 800aa5a:	e004      	b.n	800aa66 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa5c:	bf00      	nop
 800aa5e:	e002      	b.n	800aa66 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aa60:	bf00      	nop
 800aa62:	e000      	b.n	800aa66 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa64:	bf00      	nop
		}
	}

	return val;
 800aa66:	697b      	ldr	r3, [r7, #20]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3718      	adds	r7, #24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aa70:	b590      	push	{r4, r7, lr}
 800aa72:	b089      	sub	sp, #36	@ 0x24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	f240 80d9 	bls.w	800ac3a <put_fat+0x1ca>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	f080 80d3 	bcs.w	800ac3a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	f000 8096 	beq.w	800abca <put_fat+0x15a>
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	f300 80cb 	bgt.w	800ac3a <put_fat+0x1ca>
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d002      	beq.n	800aaae <put_fat+0x3e>
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d06e      	beq.n	800ab8a <put_fat+0x11a>
 800aaac:	e0c5      	b.n	800ac3a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	61bb      	str	r3, [r7, #24]
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	085b      	lsrs	r3, r3, #1
 800aab6:	69ba      	ldr	r2, [r7, #24]
 800aab8:	4413      	add	r3, r2
 800aaba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6a1a      	ldr	r2, [r3, #32]
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	0a5b      	lsrs	r3, r3, #9
 800aac4:	4413      	add	r3, r2
 800aac6:	4619      	mov	r1, r3
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff fe6f 	bl	800a7ac <move_window>
 800aace:	4603      	mov	r3, r0
 800aad0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aad2:	7ffb      	ldrb	r3, [r7, #31]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f040 80a9 	bne.w	800ac2c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	1c59      	adds	r1, r3, #1
 800aae4:	61b9      	str	r1, [r7, #24]
 800aae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaea:	4413      	add	r3, r2
 800aaec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f003 0301 	and.w	r3, r3, #1
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00d      	beq.n	800ab14 <put_fat+0xa4>
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	b25b      	sxtb	r3, r3
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	b25a      	sxtb	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	011b      	lsls	r3, r3, #4
 800ab0a:	b25b      	sxtb	r3, r3
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	b25b      	sxtb	r3, r3
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	e001      	b.n	800ab18 <put_fat+0xa8>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6a1a      	ldr	r2, [r3, #32]
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	0a5b      	lsrs	r3, r3, #9
 800ab2a:	4413      	add	r3, r2
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7ff fe3c 	bl	800a7ac <move_window>
 800ab34:	4603      	mov	r3, r0
 800ab36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab38:	7ffb      	ldrb	r3, [r7, #31]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d178      	bne.n	800ac30 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4a:	4413      	add	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d003      	beq.n	800ab60 <put_fat+0xf0>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	091b      	lsrs	r3, r3, #4
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	e00e      	b.n	800ab7e <put_fat+0x10e>
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	b25b      	sxtb	r3, r3
 800ab66:	f023 030f 	bic.w	r3, r3, #15
 800ab6a:	b25a      	sxtb	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	0a1b      	lsrs	r3, r3, #8
 800ab70:	b25b      	sxtb	r3, r3
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	b25b      	sxtb	r3, r3
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	b25b      	sxtb	r3, r3
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2201      	movs	r2, #1
 800ab86:	70da      	strb	r2, [r3, #3]
			break;
 800ab88:	e057      	b.n	800ac3a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a1a      	ldr	r2, [r3, #32]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	0a1b      	lsrs	r3, r3, #8
 800ab92:	4413      	add	r3, r2
 800ab94:	4619      	mov	r1, r3
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f7ff fe08 	bl	800a7ac <move_window>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aba0:	7ffb      	ldrb	r3, [r7, #31]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d146      	bne.n	800ac34 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800abb4:	4413      	add	r3, r2
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	b292      	uxth	r2, r2
 800abba:	4611      	mov	r1, r2
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7ff fb80 	bl	800a2c2 <st_word>
			fs->wflag = 1;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2201      	movs	r2, #1
 800abc6:	70da      	strb	r2, [r3, #3]
			break;
 800abc8:	e037      	b.n	800ac3a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6a1a      	ldr	r2, [r3, #32]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	09db      	lsrs	r3, r3, #7
 800abd2:	4413      	add	r3, r2
 800abd4:	4619      	mov	r1, r3
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7ff fde8 	bl	800a7ac <move_window>
 800abdc:	4603      	mov	r3, r0
 800abde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800abe0:	7ffb      	ldrb	r3, [r7, #31]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d128      	bne.n	800ac38 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800abfa:	4413      	add	r3, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff fb3d 	bl	800a27c <ld_dword>
 800ac02:	4603      	mov	r3, r0
 800ac04:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ac08:	4323      	orrs	r3, r4
 800ac0a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ac1a:	4413      	add	r3, r2
 800ac1c:	6879      	ldr	r1, [r7, #4]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff fb6a 	bl	800a2f8 <st_dword>
			fs->wflag = 1;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2201      	movs	r2, #1
 800ac28:	70da      	strb	r2, [r3, #3]
			break;
 800ac2a:	e006      	b.n	800ac3a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ac2c:	bf00      	nop
 800ac2e:	e004      	b.n	800ac3a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ac30:	bf00      	nop
 800ac32:	e002      	b.n	800ac3a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ac34:	bf00      	nop
 800ac36:	e000      	b.n	800ac3a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ac38:	bf00      	nop
		}
	}
	return res;
 800ac3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3724      	adds	r7, #36	@ 0x24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd90      	pop	{r4, r7, pc}

0800ac44 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b088      	sub	sp, #32
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d904      	bls.n	800ac6a <remove_chain+0x26>
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d301      	bcc.n	800ac6e <remove_chain+0x2a>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	e04b      	b.n	800ad06 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00c      	beq.n	800ac8e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ac74:	f04f 32ff 	mov.w	r2, #4294967295
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	69b8      	ldr	r0, [r7, #24]
 800ac7c:	f7ff fef8 	bl	800aa70 <put_fat>
 800ac80:	4603      	mov	r3, r0
 800ac82:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ac84:	7ffb      	ldrb	r3, [r7, #31]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <remove_chain+0x4a>
 800ac8a:	7ffb      	ldrb	r3, [r7, #31]
 800ac8c:	e03b      	b.n	800ad06 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ac8e:	68b9      	ldr	r1, [r7, #8]
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f7ff fe46 	bl	800a922 <get_fat>
 800ac96:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d031      	beq.n	800ad02 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d101      	bne.n	800aca8 <remove_chain+0x64>
 800aca4:	2302      	movs	r3, #2
 800aca6:	e02e      	b.n	800ad06 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acae:	d101      	bne.n	800acb4 <remove_chain+0x70>
 800acb0:	2301      	movs	r3, #1
 800acb2:	e028      	b.n	800ad06 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800acb4:	2200      	movs	r2, #0
 800acb6:	68b9      	ldr	r1, [r7, #8]
 800acb8:	69b8      	ldr	r0, [r7, #24]
 800acba:	f7ff fed9 	bl	800aa70 <put_fat>
 800acbe:	4603      	mov	r3, r0
 800acc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800acc2:	7ffb      	ldrb	r3, [r7, #31]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d001      	beq.n	800accc <remove_chain+0x88>
 800acc8:	7ffb      	ldrb	r3, [r7, #31]
 800acca:	e01c      	b.n	800ad06 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	691a      	ldr	r2, [r3, #16]
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	3b02      	subs	r3, #2
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d20b      	bcs.n	800acf2 <remove_chain+0xae>
			fs->free_clst++;
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	791b      	ldrb	r3, [r3, #4]
 800ace8:	f043 0301 	orr.w	r3, r3, #1
 800acec:	b2da      	uxtb	r2, r3
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d3c6      	bcc.n	800ac8e <remove_chain+0x4a>
 800ad00:	e000      	b.n	800ad04 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ad02:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b088      	sub	sp, #32
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10d      	bne.n	800ad40 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d004      	beq.n	800ad3a <create_chain+0x2c>
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	695b      	ldr	r3, [r3, #20]
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d31b      	bcc.n	800ad72 <create_chain+0x64>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	61bb      	str	r3, [r7, #24]
 800ad3e:	e018      	b.n	800ad72 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff fded 	bl	800a922 <get_fat>
 800ad48:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d801      	bhi.n	800ad54 <create_chain+0x46>
 800ad50:	2301      	movs	r3, #1
 800ad52:	e070      	b.n	800ae36 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5a:	d101      	bne.n	800ad60 <create_chain+0x52>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	e06a      	b.n	800ae36 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d201      	bcs.n	800ad6e <create_chain+0x60>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	e063      	b.n	800ae36 <create_chain+0x128>
		scl = clst;
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	69fa      	ldr	r2, [r7, #28]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d307      	bcc.n	800ad96 <create_chain+0x88>
				ncl = 2;
 800ad86:	2302      	movs	r3, #2
 800ad88:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ad8a:	69fa      	ldr	r2, [r7, #28]
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d901      	bls.n	800ad96 <create_chain+0x88>
 800ad92:	2300      	movs	r3, #0
 800ad94:	e04f      	b.n	800ae36 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ad96:	69f9      	ldr	r1, [r7, #28]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff fdc2 	bl	800a922 <get_fat>
 800ad9e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00e      	beq.n	800adc4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d003      	beq.n	800adb4 <create_chain+0xa6>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb2:	d101      	bne.n	800adb8 <create_chain+0xaa>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	e03e      	b.n	800ae36 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800adb8:	69fa      	ldr	r2, [r7, #28]
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d1da      	bne.n	800ad76 <create_chain+0x68>
 800adc0:	2300      	movs	r3, #0
 800adc2:	e038      	b.n	800ae36 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800adc4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295
 800adca:	69f9      	ldr	r1, [r7, #28]
 800adcc:	6938      	ldr	r0, [r7, #16]
 800adce:	f7ff fe4f 	bl	800aa70 <put_fat>
 800add2:	4603      	mov	r3, r0
 800add4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800add6:	7dfb      	ldrb	r3, [r7, #23]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d109      	bne.n	800adf0 <create_chain+0xe2>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d006      	beq.n	800adf0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ade2:	69fa      	ldr	r2, [r7, #28]
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6938      	ldr	r0, [r7, #16]
 800ade8:	f7ff fe42 	bl	800aa70 <put_fat>
 800adec:	4603      	mov	r3, r0
 800adee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d116      	bne.n	800ae24 <create_chain+0x116>
		fs->last_clst = ncl;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	69fa      	ldr	r2, [r7, #28]
 800adfa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	691a      	ldr	r2, [r3, #16]
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	3b02      	subs	r3, #2
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d804      	bhi.n	800ae14 <create_chain+0x106>
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	1e5a      	subs	r2, r3, #1
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	791b      	ldrb	r3, [r3, #4]
 800ae18:	f043 0301 	orr.w	r3, r3, #1
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	711a      	strb	r2, [r3, #4]
 800ae22:	e007      	b.n	800ae34 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ae24:	7dfb      	ldrb	r3, [r7, #23]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d102      	bne.n	800ae30 <create_chain+0x122>
 800ae2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2e:	e000      	b.n	800ae32 <create_chain+0x124>
 800ae30:	2301      	movs	r3, #1
 800ae32:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ae34:	69fb      	ldr	r3, [r7, #28]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3720      	adds	r7, #32
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b087      	sub	sp, #28
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae52:	3304      	adds	r3, #4
 800ae54:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	0a5b      	lsrs	r3, r3, #9
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	8952      	ldrh	r2, [r2, #10]
 800ae5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae62:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	1d1a      	adds	r2, r3, #4
 800ae68:	613a      	str	r2, [r7, #16]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <clmt_clust+0x3a>
 800ae74:	2300      	movs	r3, #0
 800ae76:	e010      	b.n	800ae9a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d307      	bcc.n	800ae90 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	617b      	str	r3, [r7, #20]
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ae8e:	e7e9      	b.n	800ae64 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ae90:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	4413      	add	r3, r2
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	371c      	adds	r7, #28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b086      	sub	sp, #24
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aebc:	d204      	bcs.n	800aec8 <dir_sdi+0x22>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	f003 031f 	and.w	r3, r3, #31
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <dir_sdi+0x26>
		return FR_INT_ERR;
 800aec8:	2302      	movs	r3, #2
 800aeca:	e063      	b.n	800af94 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <dir_sdi+0x46>
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d902      	bls.n	800aeec <dir_sdi+0x46>
		clst = fs->dirbase;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10c      	bne.n	800af0c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	095b      	lsrs	r3, r3, #5
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	8912      	ldrh	r2, [r2, #8]
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d301      	bcc.n	800af02 <dir_sdi+0x5c>
 800aefe:	2302      	movs	r3, #2
 800af00:	e048      	b.n	800af94 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	61da      	str	r2, [r3, #28]
 800af0a:	e029      	b.n	800af60 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	895b      	ldrh	r3, [r3, #10]
 800af10:	025b      	lsls	r3, r3, #9
 800af12:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af14:	e019      	b.n	800af4a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6979      	ldr	r1, [r7, #20]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7ff fd01 	bl	800a922 <get_fat>
 800af20:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af28:	d101      	bne.n	800af2e <dir_sdi+0x88>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e032      	b.n	800af94 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	2b01      	cmp	r3, #1
 800af32:	d904      	bls.n	800af3e <dir_sdi+0x98>
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d301      	bcc.n	800af42 <dir_sdi+0x9c>
 800af3e:	2302      	movs	r3, #2
 800af40:	e028      	b.n	800af94 <dir_sdi+0xee>
			ofs -= csz;
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d2e1      	bcs.n	800af16 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800af52:	6979      	ldr	r1, [r7, #20]
 800af54:	6938      	ldr	r0, [r7, #16]
 800af56:	f7ff fcc5 	bl	800a8e4 <clust2sect>
 800af5a:	4602      	mov	r2, r0
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <dir_sdi+0xcc>
 800af6e:	2302      	movs	r3, #2
 800af70:	e010      	b.n	800af94 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	69da      	ldr	r2, [r3, #28]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	0a5b      	lsrs	r3, r3, #9
 800af7a:	441a      	add	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8c:	441a      	add	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	3320      	adds	r3, #32
 800afb2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	69db      	ldr	r3, [r3, #28]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d003      	beq.n	800afc4 <dir_next+0x28>
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800afc2:	d301      	bcc.n	800afc8 <dir_next+0x2c>
 800afc4:	2304      	movs	r3, #4
 800afc6:	e0aa      	b.n	800b11e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f040 8098 	bne.w	800b104 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10b      	bne.n	800affe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	095b      	lsrs	r3, r3, #5
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	8912      	ldrh	r2, [r2, #8]
 800afee:	4293      	cmp	r3, r2
 800aff0:	f0c0 8088 	bcc.w	800b104 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	61da      	str	r2, [r3, #28]
 800affa:	2304      	movs	r3, #4
 800affc:	e08f      	b.n	800b11e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	0a5b      	lsrs	r3, r3, #9
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	8952      	ldrh	r2, [r2, #10]
 800b006:	3a01      	subs	r2, #1
 800b008:	4013      	ands	r3, r2
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d17a      	bne.n	800b104 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	4619      	mov	r1, r3
 800b016:	4610      	mov	r0, r2
 800b018:	f7ff fc83 	bl	800a922 <get_fat>
 800b01c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d801      	bhi.n	800b028 <dir_next+0x8c>
 800b024:	2302      	movs	r3, #2
 800b026:	e07a      	b.n	800b11e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b02e:	d101      	bne.n	800b034 <dir_next+0x98>
 800b030:	2301      	movs	r3, #1
 800b032:	e074      	b.n	800b11e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	695b      	ldr	r3, [r3, #20]
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d358      	bcc.n	800b0f0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d104      	bne.n	800b04e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	61da      	str	r2, [r3, #28]
 800b04a:	2304      	movs	r3, #4
 800b04c:	e067      	b.n	800b11e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	4619      	mov	r1, r3
 800b056:	4610      	mov	r0, r2
 800b058:	f7ff fe59 	bl	800ad0e <create_chain>
 800b05c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <dir_next+0xcc>
 800b064:	2307      	movs	r3, #7
 800b066:	e05a      	b.n	800b11e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d101      	bne.n	800b072 <dir_next+0xd6>
 800b06e:	2302      	movs	r3, #2
 800b070:	e055      	b.n	800b11e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b078:	d101      	bne.n	800b07e <dir_next+0xe2>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e04f      	b.n	800b11e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff fb50 	bl	800a724 <sync_window>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <dir_next+0xf2>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e047      	b.n	800b11e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	3330      	adds	r3, #48	@ 0x30
 800b092:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b096:	2100      	movs	r1, #0
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff f97a 	bl	800a392 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b09e:	2300      	movs	r3, #0
 800b0a0:	613b      	str	r3, [r7, #16]
 800b0a2:	6979      	ldr	r1, [r7, #20]
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f7ff fc1d 	bl	800a8e4 <clust2sect>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b0b0:	e012      	b.n	800b0d8 <dir_next+0x13c>
						fs->wflag = 1;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f7ff fb33 	bl	800a724 <sync_window>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <dir_next+0x12c>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e02a      	b.n	800b11e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	613b      	str	r3, [r7, #16]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	895b      	ldrh	r3, [r3, #10]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d3e6      	bcc.n	800b0b2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	1ad2      	subs	r2, r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b0f6:	6979      	ldr	r1, [r7, #20]
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f7ff fbf3 	bl	800a8e4 <clust2sect>
 800b0fe:	4602      	mov	r2, r0
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b116:	441a      	add	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b086      	sub	sp, #24
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b136:	2100      	movs	r1, #0
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff feb4 	bl	800aea6 <dir_sdi>
 800b13e:	4603      	mov	r3, r0
 800b140:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b142:	7dfb      	ldrb	r3, [r7, #23]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d12b      	bne.n	800b1a0 <dir_alloc+0x7a>
		n = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	69db      	ldr	r3, [r3, #28]
 800b150:	4619      	mov	r1, r3
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7ff fb2a 	bl	800a7ac <move_window>
 800b158:	4603      	mov	r3, r0
 800b15a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d11d      	bne.n	800b19e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2be5      	cmp	r3, #229	@ 0xe5
 800b16a:	d004      	beq.n	800b176 <dir_alloc+0x50>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d107      	bne.n	800b186 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	3301      	adds	r3, #1
 800b17a:	613b      	str	r3, [r7, #16]
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d102      	bne.n	800b18a <dir_alloc+0x64>
 800b184:	e00c      	b.n	800b1a0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b186:	2300      	movs	r3, #0
 800b188:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b18a:	2101      	movs	r1, #1
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff ff05 	bl	800af9c <dir_next>
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0d7      	beq.n	800b14c <dir_alloc+0x26>
 800b19c:	e000      	b.n	800b1a0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b19e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b1a0:	7dfb      	ldrb	r3, [r7, #23]
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	d101      	bne.n	800b1aa <dir_alloc+0x84>
 800b1a6:	2307      	movs	r3, #7
 800b1a8:	75fb      	strb	r3, [r7, #23]
	return res;
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	331a      	adds	r3, #26
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7ff f842 	bl	800a24c <ld_word>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d109      	bne.n	800b1e8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	3314      	adds	r3, #20
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff f837 	bl	800a24c <ld_word>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	041b      	lsls	r3, r3, #16
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	60f8      	str	r0, [r7, #12]
 800b1fa:	60b9      	str	r1, [r7, #8]
 800b1fc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	331a      	adds	r3, #26
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	b292      	uxth	r2, r2
 800b206:	4611      	mov	r1, r2
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff f85a 	bl	800a2c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b03      	cmp	r3, #3
 800b214:	d109      	bne.n	800b22a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	f103 0214 	add.w	r2, r3, #20
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	0c1b      	lsrs	r3, r3, #16
 800b220:	b29b      	uxth	r3, r3
 800b222:	4619      	mov	r1, r3
 800b224:	4610      	mov	r0, r2
 800b226:	f7ff f84c 	bl	800a2c2 <st_word>
	}
}
 800b22a:	bf00      	nop
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b086      	sub	sp, #24
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b240:	2100      	movs	r1, #0
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7ff fe2f 	bl	800aea6 <dir_sdi>
 800b248:	4603      	mov	r3, r0
 800b24a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <dir_find+0x24>
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	e03e      	b.n	800b2d4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	4619      	mov	r1, r3
 800b25c:	6938      	ldr	r0, [r7, #16]
 800b25e:	f7ff faa5 	bl	800a7ac <move_window>
 800b262:	4603      	mov	r3, r0
 800b264:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d12f      	bne.n	800b2cc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a1b      	ldr	r3, [r3, #32]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <dir_find+0x4e>
 800b27a:	2304      	movs	r3, #4
 800b27c:	75fb      	strb	r3, [r7, #23]
 800b27e:	e028      	b.n	800b2d2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a1b      	ldr	r3, [r3, #32]
 800b284:	330b      	adds	r3, #11
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	330b      	adds	r3, #11
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	f003 0308 	and.w	r3, r3, #8
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10a      	bne.n	800b2b8 <dir_find+0x86>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a18      	ldr	r0, [r3, #32]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3324      	adds	r3, #36	@ 0x24
 800b2aa:	220b      	movs	r2, #11
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	f7ff f88b 	bl	800a3c8 <mem_cmp>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00b      	beq.n	800b2d0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7ff fe6e 	bl	800af9c <dir_next>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b2c4:	7dfb      	ldrb	r3, [r7, #23]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0c5      	beq.n	800b256 <dir_find+0x24>
 800b2ca:	e002      	b.n	800b2d2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b2cc:	bf00      	nop
 800b2ce:	e000      	b.n	800b2d2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b2d0:	bf00      	nop

	return res;
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff ff1a 	bl	800b126 <dir_alloc>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d11c      	bne.n	800b336 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	4619      	mov	r1, r3
 800b302:	68b8      	ldr	r0, [r7, #8]
 800b304:	f7ff fa52 	bl	800a7ac <move_window>
 800b308:	4603      	mov	r3, r0
 800b30a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d111      	bne.n	800b336 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	2220      	movs	r2, #32
 800b318:	2100      	movs	r1, #0
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7ff f839 	bl	800a392 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a18      	ldr	r0, [r3, #32]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3324      	adds	r3, #36	@ 0x24
 800b328:	220b      	movs	r2, #11
 800b32a:	4619      	mov	r1, r3
 800b32c:	f7ff f810 	bl	800a350 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2201      	movs	r2, #1
 800b334:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b336:	7bfb      	ldrb	r3, [r7, #15]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3324      	adds	r3, #36	@ 0x24
 800b354:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b356:	220b      	movs	r2, #11
 800b358:	2120      	movs	r1, #32
 800b35a:	68b8      	ldr	r0, [r7, #8]
 800b35c:	f7ff f819 	bl	800a392 <mem_set>
	si = i = 0; ni = 8;
 800b360:	2300      	movs	r3, #0
 800b362:	613b      	str	r3, [r7, #16]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	61fb      	str	r3, [r7, #28]
 800b368:	2308      	movs	r3, #8
 800b36a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	1c5a      	adds	r2, r3, #1
 800b370:	61fa      	str	r2, [r7, #28]
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	4413      	add	r3, r2
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b37a:	7efb      	ldrb	r3, [r7, #27]
 800b37c:	2b20      	cmp	r3, #32
 800b37e:	d94e      	bls.n	800b41e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b380:	7efb      	ldrb	r3, [r7, #27]
 800b382:	2b2f      	cmp	r3, #47	@ 0x2f
 800b384:	d006      	beq.n	800b394 <create_name+0x54>
 800b386:	7efb      	ldrb	r3, [r7, #27]
 800b388:	2b5c      	cmp	r3, #92	@ 0x5c
 800b38a:	d110      	bne.n	800b3ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b38c:	e002      	b.n	800b394 <create_name+0x54>
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	3301      	adds	r3, #1
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	4413      	add	r3, r2
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b39e:	d0f6      	beq.n	800b38e <create_name+0x4e>
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b3aa:	d0f0      	beq.n	800b38e <create_name+0x4e>
			break;
 800b3ac:	e038      	b.n	800b420 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b3ae:	7efb      	ldrb	r3, [r7, #27]
 800b3b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3b2:	d003      	beq.n	800b3bc <create_name+0x7c>
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d30c      	bcc.n	800b3d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2b0b      	cmp	r3, #11
 800b3c0:	d002      	beq.n	800b3c8 <create_name+0x88>
 800b3c2:	7efb      	ldrb	r3, [r7, #27]
 800b3c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3c6:	d001      	beq.n	800b3cc <create_name+0x8c>
 800b3c8:	2306      	movs	r3, #6
 800b3ca:	e044      	b.n	800b456 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b3cc:	2308      	movs	r3, #8
 800b3ce:	613b      	str	r3, [r7, #16]
 800b3d0:	230b      	movs	r3, #11
 800b3d2:	617b      	str	r3, [r7, #20]
			continue;
 800b3d4:	e022      	b.n	800b41c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b3d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	da04      	bge.n	800b3e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b3de:	7efb      	ldrb	r3, [r7, #27]
 800b3e0:	3b80      	subs	r3, #128	@ 0x80
 800b3e2:	4a1f      	ldr	r2, [pc, #124]	@ (800b460 <create_name+0x120>)
 800b3e4:	5cd3      	ldrb	r3, [r2, r3]
 800b3e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b3e8:	7efb      	ldrb	r3, [r7, #27]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	481d      	ldr	r0, [pc, #116]	@ (800b464 <create_name+0x124>)
 800b3ee:	f7ff f812 	bl	800a416 <chk_chr>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d001      	beq.n	800b3fc <create_name+0xbc>
 800b3f8:	2306      	movs	r3, #6
 800b3fa:	e02c      	b.n	800b456 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b3fc:	7efb      	ldrb	r3, [r7, #27]
 800b3fe:	2b60      	cmp	r3, #96	@ 0x60
 800b400:	d905      	bls.n	800b40e <create_name+0xce>
 800b402:	7efb      	ldrb	r3, [r7, #27]
 800b404:	2b7a      	cmp	r3, #122	@ 0x7a
 800b406:	d802      	bhi.n	800b40e <create_name+0xce>
 800b408:	7efb      	ldrb	r3, [r7, #27]
 800b40a:	3b20      	subs	r3, #32
 800b40c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	1c5a      	adds	r2, r3, #1
 800b412:	613a      	str	r2, [r7, #16]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	4413      	add	r3, r2
 800b418:	7efa      	ldrb	r2, [r7, #27]
 800b41a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b41c:	e7a6      	b.n	800b36c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b41e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	441a      	add	r2, r3
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <create_name+0xf4>
 800b430:	2306      	movs	r3, #6
 800b432:	e010      	b.n	800b456 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2be5      	cmp	r3, #229	@ 0xe5
 800b43a:	d102      	bne.n	800b442 <create_name+0x102>
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2205      	movs	r2, #5
 800b440:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b442:	7efb      	ldrb	r3, [r7, #27]
 800b444:	2b20      	cmp	r3, #32
 800b446:	d801      	bhi.n	800b44c <create_name+0x10c>
 800b448:	2204      	movs	r2, #4
 800b44a:	e000      	b.n	800b44e <create_name+0x10e>
 800b44c:	2200      	movs	r2, #0
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	330b      	adds	r3, #11
 800b452:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b454:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b456:	4618      	mov	r0, r3
 800b458:	3720      	adds	r7, #32
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	08010f2c 	.word	0x08010f2c
 800b464:	08010ea8 	.word	0x08010ea8

0800b468 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b47c:	e002      	b.n	800b484 <follow_path+0x1c>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	3301      	adds	r3, #1
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	2b2f      	cmp	r3, #47	@ 0x2f
 800b48a:	d0f8      	beq.n	800b47e <follow_path+0x16>
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b5c      	cmp	r3, #92	@ 0x5c
 800b492:	d0f4      	beq.n	800b47e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	2200      	movs	r2, #0
 800b498:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b1f      	cmp	r3, #31
 800b4a0:	d80a      	bhi.n	800b4b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2280      	movs	r2, #128	@ 0x80
 800b4a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff fcfa 	bl	800aea6 <dir_sdi>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	75fb      	strb	r3, [r7, #23]
 800b4b6:	e043      	b.n	800b540 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff ff3f 	bl	800b340 <create_name>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b4c6:	7dfb      	ldrb	r3, [r7, #23]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d134      	bne.n	800b536 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7ff feb0 	bl	800b232 <dir_find>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b4dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00a      	beq.n	800b4fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b4e4:	7dfb      	ldrb	r3, [r7, #23]
 800b4e6:	2b04      	cmp	r3, #4
 800b4e8:	d127      	bne.n	800b53a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b4ea:	7afb      	ldrb	r3, [r7, #11]
 800b4ec:	f003 0304 	and.w	r3, r3, #4
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d122      	bne.n	800b53a <follow_path+0xd2>
 800b4f4:	2305      	movs	r3, #5
 800b4f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b4f8:	e01f      	b.n	800b53a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b00      	cmp	r3, #0
 800b502:	d11c      	bne.n	800b53e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	799b      	ldrb	r3, [r3, #6]
 800b508:	f003 0310 	and.w	r3, r3, #16
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d102      	bne.n	800b516 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b510:	2305      	movs	r3, #5
 800b512:	75fb      	strb	r3, [r7, #23]
 800b514:	e014      	b.n	800b540 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	695b      	ldr	r3, [r3, #20]
 800b520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b524:	4413      	add	r3, r2
 800b526:	4619      	mov	r1, r3
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f7ff fe43 	bl	800b1b4 <ld_clust>
 800b52e:	4602      	mov	r2, r0
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b534:	e7c0      	b.n	800b4b8 <follow_path+0x50>
			if (res != FR_OK) break;
 800b536:	bf00      	nop
 800b538:	e002      	b.n	800b540 <follow_path+0xd8>
				break;
 800b53a:	bf00      	nop
 800b53c:	e000      	b.n	800b540 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b53e:	bf00      	nop
			}
		}
	}

	return res;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3718      	adds	r7, #24
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b087      	sub	sp, #28
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b552:	f04f 33ff 	mov.w	r3, #4294967295
 800b556:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d031      	beq.n	800b5c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	617b      	str	r3, [r7, #20]
 800b566:	e002      	b.n	800b56e <get_ldnumber+0x24>
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	3301      	adds	r3, #1
 800b56c:	617b      	str	r3, [r7, #20]
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b20      	cmp	r3, #32
 800b574:	d903      	bls.n	800b57e <get_ldnumber+0x34>
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	2b3a      	cmp	r3, #58	@ 0x3a
 800b57c:	d1f4      	bne.n	800b568 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b3a      	cmp	r3, #58	@ 0x3a
 800b584:	d11c      	bne.n	800b5c0 <get_ldnumber+0x76>
			tp = *path;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	60fa      	str	r2, [r7, #12]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	3b30      	subs	r3, #48	@ 0x30
 800b596:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	2b09      	cmp	r3, #9
 800b59c:	d80e      	bhi.n	800b5bc <get_ldnumber+0x72>
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d10a      	bne.n	800b5bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d107      	bne.n	800b5bc <get_ldnumber+0x72>
					vol = (int)i;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	617b      	str	r3, [r7, #20]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	e002      	b.n	800b5c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b5c4:	693b      	ldr	r3, [r7, #16]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
	...

0800b5d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	70da      	strb	r2, [r3, #3]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7ff f8dc 	bl	800a7ac <move_window>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <check_fs+0x2a>
 800b5fa:	2304      	movs	r3, #4
 800b5fc:	e038      	b.n	800b670 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	3330      	adds	r3, #48	@ 0x30
 800b602:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fe20 	bl	800a24c <ld_word>
 800b60c:	4603      	mov	r3, r0
 800b60e:	461a      	mov	r2, r3
 800b610:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b614:	429a      	cmp	r2, r3
 800b616:	d001      	beq.n	800b61c <check_fs+0x48>
 800b618:	2303      	movs	r3, #3
 800b61a:	e029      	b.n	800b670 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b622:	2be9      	cmp	r3, #233	@ 0xe9
 800b624:	d009      	beq.n	800b63a <check_fs+0x66>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b62c:	2beb      	cmp	r3, #235	@ 0xeb
 800b62e:	d11e      	bne.n	800b66e <check_fs+0x9a>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b636:	2b90      	cmp	r3, #144	@ 0x90
 800b638:	d119      	bne.n	800b66e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3330      	adds	r3, #48	@ 0x30
 800b63e:	3336      	adds	r3, #54	@ 0x36
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe fe1b 	bl	800a27c <ld_dword>
 800b646:	4603      	mov	r3, r0
 800b648:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b64c:	4a0a      	ldr	r2, [pc, #40]	@ (800b678 <check_fs+0xa4>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d101      	bne.n	800b656 <check_fs+0x82>
 800b652:	2300      	movs	r3, #0
 800b654:	e00c      	b.n	800b670 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	3330      	adds	r3, #48	@ 0x30
 800b65a:	3352      	adds	r3, #82	@ 0x52
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fe0d 	bl	800a27c <ld_dword>
 800b662:	4603      	mov	r3, r0
 800b664:	4a05      	ldr	r2, [pc, #20]	@ (800b67c <check_fs+0xa8>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d101      	bne.n	800b66e <check_fs+0x9a>
 800b66a:	2300      	movs	r3, #0
 800b66c:	e000      	b.n	800b670 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b66e:	2302      	movs	r3, #2
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	00544146 	.word	0x00544146
 800b67c:	33544146 	.word	0x33544146

0800b680 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b096      	sub	sp, #88	@ 0x58
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	4613      	mov	r3, r2
 800b68c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff ff58 	bl	800b54a <get_ldnumber>
 800b69a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	da01      	bge.n	800b6a6 <find_volume+0x26>
 800b6a2:	230b      	movs	r3, #11
 800b6a4:	e22d      	b.n	800bb02 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b6a6:	4aa1      	ldr	r2, [pc, #644]	@ (800b92c <find_volume+0x2ac>)
 800b6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <find_volume+0x3a>
 800b6b6:	230c      	movs	r3, #12
 800b6b8:	e223      	b.n	800bb02 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	f023 0301 	bic.w	r3, r3, #1
 800b6c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d01a      	beq.n	800b706 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d2:	785b      	ldrb	r3, [r3, #1]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fe fd1b 	bl	800a110 <disk_status>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b6e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b6e4:	f003 0301 	and.w	r3, r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10c      	bne.n	800b706 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d007      	beq.n	800b702 <find_volume+0x82>
 800b6f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b6fe:	230a      	movs	r3, #10
 800b700:	e1ff      	b.n	800bb02 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b702:	2300      	movs	r3, #0
 800b704:	e1fd      	b.n	800bb02 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	2200      	movs	r2, #0
 800b70a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b712:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b716:	785b      	ldrb	r3, [r3, #1]
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe fd13 	bl	800a144 <disk_initialize>
 800b71e:	4603      	mov	r3, r0
 800b720:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b724:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b730:	2303      	movs	r3, #3
 800b732:	e1e6      	b.n	800bb02 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d007      	beq.n	800b74a <find_volume+0xca>
 800b73a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b73e:	f003 0304 	and.w	r3, r3, #4
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b746:	230a      	movs	r3, #10
 800b748:	e1db      	b.n	800bb02 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b74e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b750:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b752:	f7ff ff3f 	bl	800b5d4 <check_fs>
 800b756:	4603      	mov	r3, r0
 800b758:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b75c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b760:	2b02      	cmp	r3, #2
 800b762:	d149      	bne.n	800b7f8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b764:	2300      	movs	r3, #0
 800b766:	643b      	str	r3, [r7, #64]	@ 0x40
 800b768:	e01e      	b.n	800b7a8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b772:	011b      	lsls	r3, r3, #4
 800b774:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b778:	4413      	add	r3, r2
 800b77a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77e:	3304      	adds	r3, #4
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d006      	beq.n	800b794 <find_volume+0x114>
 800b786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b788:	3308      	adds	r3, #8
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fe fd76 	bl	800a27c <ld_dword>
 800b790:	4602      	mov	r2, r0
 800b792:	e000      	b.n	800b796 <find_volume+0x116>
 800b794:	2200      	movs	r2, #0
 800b796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	3358      	adds	r3, #88	@ 0x58
 800b79c:	443b      	add	r3, r7
 800b79e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b7a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d9dd      	bls.n	800b76a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b7b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <find_volume+0x13e>
 800b7b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b7be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	3358      	adds	r3, #88	@ 0x58
 800b7c4:	443b      	add	r3, r7
 800b7c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b7ca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b7cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d005      	beq.n	800b7de <find_volume+0x15e>
 800b7d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b7d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b7d6:	f7ff fefd 	bl	800b5d4 <check_fs>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	e000      	b.n	800b7e0 <find_volume+0x160>
 800b7de:	2303      	movs	r3, #3
 800b7e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b7e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d905      	bls.n	800b7f8 <find_volume+0x178>
 800b7ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	d9e2      	bls.n	800b7be <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b7f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7fc:	2b04      	cmp	r3, #4
 800b7fe:	d101      	bne.n	800b804 <find_volume+0x184>
 800b800:	2301      	movs	r3, #1
 800b802:	e17e      	b.n	800bb02 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b804:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d901      	bls.n	800b810 <find_volume+0x190>
 800b80c:	230d      	movs	r3, #13
 800b80e:	e178      	b.n	800bb02 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	3330      	adds	r3, #48	@ 0x30
 800b814:	330b      	adds	r3, #11
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe fd18 	bl	800a24c <ld_word>
 800b81c:	4603      	mov	r3, r0
 800b81e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b822:	d001      	beq.n	800b828 <find_volume+0x1a8>
 800b824:	230d      	movs	r3, #13
 800b826:	e16c      	b.n	800bb02 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82a:	3330      	adds	r3, #48	@ 0x30
 800b82c:	3316      	adds	r3, #22
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe fd0c 	bl	800a24c <ld_word>
 800b834:	4603      	mov	r3, r0
 800b836:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d106      	bne.n	800b84c <find_volume+0x1cc>
 800b83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b840:	3330      	adds	r3, #48	@ 0x30
 800b842:	3324      	adds	r3, #36	@ 0x24
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe fd19 	bl	800a27c <ld_dword>
 800b84a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b850:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b854:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85e:	789b      	ldrb	r3, [r3, #2]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d005      	beq.n	800b870 <find_volume+0x1f0>
 800b864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b866:	789b      	ldrb	r3, [r3, #2]
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d001      	beq.n	800b870 <find_volume+0x1f0>
 800b86c:	230d      	movs	r3, #13
 800b86e:	e148      	b.n	800bb02 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b872:	789b      	ldrb	r3, [r3, #2]
 800b874:	461a      	mov	r2, r3
 800b876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b878:	fb02 f303 	mul.w	r3, r2, r3
 800b87c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b884:	461a      	mov	r2, r3
 800b886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b888:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88c:	895b      	ldrh	r3, [r3, #10]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d008      	beq.n	800b8a4 <find_volume+0x224>
 800b892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b894:	895b      	ldrh	r3, [r3, #10]
 800b896:	461a      	mov	r2, r3
 800b898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89a:	895b      	ldrh	r3, [r3, #10]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	4013      	ands	r3, r2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <find_volume+0x228>
 800b8a4:	230d      	movs	r3, #13
 800b8a6:	e12c      	b.n	800bb02 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	3330      	adds	r3, #48	@ 0x30
 800b8ac:	3311      	adds	r3, #17
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fe fccc 	bl	800a24c <ld_word>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8be:	891b      	ldrh	r3, [r3, #8]
 800b8c0:	f003 030f 	and.w	r3, r3, #15
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <find_volume+0x24e>
 800b8ca:	230d      	movs	r3, #13
 800b8cc:	e119      	b.n	800bb02 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d0:	3330      	adds	r3, #48	@ 0x30
 800b8d2:	3313      	adds	r3, #19
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7fe fcb9 	bl	800a24c <ld_word>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b8de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d106      	bne.n	800b8f2 <find_volume+0x272>
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e6:	3330      	adds	r3, #48	@ 0x30
 800b8e8:	3320      	adds	r3, #32
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fcc6 	bl	800a27c <ld_dword>
 800b8f0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f4:	3330      	adds	r3, #48	@ 0x30
 800b8f6:	330e      	adds	r3, #14
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe fca7 	bl	800a24c <ld_word>
 800b8fe:	4603      	mov	r3, r0
 800b900:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b902:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <find_volume+0x28c>
 800b908:	230d      	movs	r3, #13
 800b90a:	e0fa      	b.n	800bb02 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b90c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b90e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b910:	4413      	add	r3, r2
 800b912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b914:	8912      	ldrh	r2, [r2, #8]
 800b916:	0912      	lsrs	r2, r2, #4
 800b918:	b292      	uxth	r2, r2
 800b91a:	4413      	add	r3, r2
 800b91c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b91e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b922:	429a      	cmp	r2, r3
 800b924:	d204      	bcs.n	800b930 <find_volume+0x2b0>
 800b926:	230d      	movs	r3, #13
 800b928:	e0eb      	b.n	800bb02 <find_volume+0x482>
 800b92a:	bf00      	nop
 800b92c:	2000131c 	.word	0x2000131c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b938:	8952      	ldrh	r2, [r2, #10]
 800b93a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b93e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <find_volume+0x2ca>
 800b946:	230d      	movs	r3, #13
 800b948:	e0db      	b.n	800bb02 <find_volume+0x482>
		fmt = FS_FAT32;
 800b94a:	2303      	movs	r3, #3
 800b94c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b952:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b956:	4293      	cmp	r3, r2
 800b958:	d802      	bhi.n	800b960 <find_volume+0x2e0>
 800b95a:	2302      	movs	r3, #2
 800b95c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b962:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b966:	4293      	cmp	r3, r2
 800b968:	d802      	bhi.n	800b970 <find_volume+0x2f0>
 800b96a:	2301      	movs	r3, #1
 800b96c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b972:	1c9a      	adds	r2, r3, #2
 800b974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b976:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b97c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b97e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b982:	441a      	add	r2, r3
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b988:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98c:	441a      	add	r2, r3
 800b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b990:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b992:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b996:	2b03      	cmp	r3, #3
 800b998:	d11e      	bne.n	800b9d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99c:	3330      	adds	r3, #48	@ 0x30
 800b99e:	332a      	adds	r3, #42	@ 0x2a
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fc53 	bl	800a24c <ld_word>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <find_volume+0x330>
 800b9ac:	230d      	movs	r3, #13
 800b9ae:	e0a8      	b.n	800bb02 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b2:	891b      	ldrh	r3, [r3, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <find_volume+0x33c>
 800b9b8:	230d      	movs	r3, #13
 800b9ba:	e0a2      	b.n	800bb02 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9be:	3330      	adds	r3, #48	@ 0x30
 800b9c0:	332c      	adds	r3, #44	@ 0x2c
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fc5a 	bl	800a27c <ld_dword>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9cc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9d6:	e01f      	b.n	800ba18 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9da:	891b      	ldrh	r3, [r3, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d101      	bne.n	800b9e4 <find_volume+0x364>
 800b9e0:	230d      	movs	r3, #13
 800b9e2:	e08e      	b.n	800bb02 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e6:	6a1a      	ldr	r2, [r3, #32]
 800b9e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9ea:	441a      	add	r2, r3
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ee:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b9f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d103      	bne.n	800ba00 <find_volume+0x380>
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fa:	695b      	ldr	r3, [r3, #20]
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	e00a      	b.n	800ba16 <find_volume+0x396>
 800ba00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba02:	695a      	ldr	r2, [r3, #20]
 800ba04:	4613      	mov	r3, r2
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	4413      	add	r3, r2
 800ba0a:	085a      	lsrs	r2, r3, #1
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ba16:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ba18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1a:	699a      	ldr	r2, [r3, #24]
 800ba1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba1e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ba22:	0a5b      	lsrs	r3, r3, #9
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d201      	bcs.n	800ba2c <find_volume+0x3ac>
 800ba28:	230d      	movs	r3, #13
 800ba2a:	e06a      	b.n	800bb02 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba32:	611a      	str	r2, [r3, #16]
 800ba34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba36:	691a      	ldr	r2, [r3, #16]
 800ba38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3e:	2280      	movs	r2, #128	@ 0x80
 800ba40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ba42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d149      	bne.n	800bade <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4c:	3330      	adds	r3, #48	@ 0x30
 800ba4e:	3330      	adds	r3, #48	@ 0x30
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fe fbfb 	bl	800a24c <ld_word>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d140      	bne.n	800bade <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ba5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba5e:	3301      	adds	r3, #1
 800ba60:	4619      	mov	r1, r3
 800ba62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba64:	f7fe fea2 	bl	800a7ac <move_window>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d137      	bne.n	800bade <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba70:	2200      	movs	r2, #0
 800ba72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ba74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba76:	3330      	adds	r3, #48	@ 0x30
 800ba78:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe fbe5 	bl	800a24c <ld_word>
 800ba82:	4603      	mov	r3, r0
 800ba84:	461a      	mov	r2, r3
 800ba86:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d127      	bne.n	800bade <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba90:	3330      	adds	r3, #48	@ 0x30
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fbf2 	bl	800a27c <ld_dword>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	4a1c      	ldr	r2, [pc, #112]	@ (800bb0c <find_volume+0x48c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d11e      	bne.n	800bade <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800baa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa2:	3330      	adds	r3, #48	@ 0x30
 800baa4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe fbe7 	bl	800a27c <ld_dword>
 800baae:	4603      	mov	r3, r0
 800bab0:	4a17      	ldr	r2, [pc, #92]	@ (800bb10 <find_volume+0x490>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d113      	bne.n	800bade <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab8:	3330      	adds	r3, #48	@ 0x30
 800baba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fe fbdc 	bl	800a27c <ld_dword>
 800bac4:	4602      	mov	r2, r0
 800bac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800baca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bacc:	3330      	adds	r3, #48	@ 0x30
 800bace:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fbd2 	bl	800a27c <ld_dword>
 800bad8:	4602      	mov	r2, r0
 800bada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800badc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bae4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bae6:	4b0b      	ldr	r3, [pc, #44]	@ (800bb14 <find_volume+0x494>)
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	3301      	adds	r3, #1
 800baec:	b29a      	uxth	r2, r3
 800baee:	4b09      	ldr	r3, [pc, #36]	@ (800bb14 <find_volume+0x494>)
 800baf0:	801a      	strh	r2, [r3, #0]
 800baf2:	4b08      	ldr	r3, [pc, #32]	@ (800bb14 <find_volume+0x494>)
 800baf4:	881a      	ldrh	r2, [r3, #0]
 800baf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bafa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bafc:	f7fe fdee 	bl	800a6dc <clear_lock>
#endif
	return FR_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3758      	adds	r7, #88	@ 0x58
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	41615252 	.word	0x41615252
 800bb10:	61417272 	.word	0x61417272
 800bb14:	20001320 	.word	0x20001320

0800bb18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bb22:	2309      	movs	r3, #9
 800bb24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01c      	beq.n	800bb66 <validate+0x4e>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d018      	beq.n	800bb66 <validate+0x4e>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d013      	beq.n	800bb66 <validate+0x4e>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	889a      	ldrh	r2, [r3, #4]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	88db      	ldrh	r3, [r3, #6]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d10c      	bne.n	800bb66 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	785b      	ldrb	r3, [r3, #1]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fe fadc 	bl	800a110 <disk_status>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <validate+0x4e>
			res = FR_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d102      	bne.n	800bb72 <validate+0x5a>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	e000      	b.n	800bb74 <validate+0x5c>
 800bb72:	2300      	movs	r3, #0
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	6013      	str	r3, [r2, #0]
	return res;
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bb96:	f107 0310 	add.w	r3, r7, #16
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7ff fcd5 	bl	800b54a <get_ldnumber>
 800bba0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	da01      	bge.n	800bbac <f_mount+0x28>
 800bba8:	230b      	movs	r3, #11
 800bbaa:	e02b      	b.n	800bc04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bbac:	4a17      	ldr	r2, [pc, #92]	@ (800bc0c <f_mount+0x88>)
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d005      	beq.n	800bbc8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bbbc:	69b8      	ldr	r0, [r7, #24]
 800bbbe:	f7fe fd8d 	bl	800a6dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	490d      	ldr	r1, [pc, #52]	@ (800bc0c <f_mount+0x88>)
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <f_mount+0x66>
 800bbe4:	79fb      	ldrb	r3, [r7, #7]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d001      	beq.n	800bbee <f_mount+0x6a>
 800bbea:	2300      	movs	r3, #0
 800bbec:	e00a      	b.n	800bc04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bbee:	f107 010c 	add.w	r1, r7, #12
 800bbf2:	f107 0308 	add.w	r3, r7, #8
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7ff fd41 	bl	800b680 <find_volume>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bc02:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3720      	adds	r7, #32
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	2000131c 	.word	0x2000131c

0800bc10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b098      	sub	sp, #96	@ 0x60
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <f_open+0x18>
 800bc24:	2309      	movs	r3, #9
 800bc26:	e1a9      	b.n	800bf7c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bc28:	79fb      	ldrb	r3, [r7, #7]
 800bc2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bc30:	79fa      	ldrb	r2, [r7, #7]
 800bc32:	f107 0110 	add.w	r1, r7, #16
 800bc36:	f107 0308 	add.w	r3, r7, #8
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7ff fd20 	bl	800b680 <find_volume>
 800bc40:	4603      	mov	r3, r0
 800bc42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800bc46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f040 818d 	bne.w	800bf6a <f_open+0x35a>
		dj.obj.fs = fs;
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	f107 0314 	add.w	r3, r7, #20
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff fc03 	bl	800b468 <follow_path>
 800bc62:	4603      	mov	r3, r0
 800bc64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bc68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d118      	bne.n	800bca2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bc70:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc74:	b25b      	sxtb	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	da03      	bge.n	800bc82 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bc7a:	2306      	movs	r3, #6
 800bc7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bc80:	e00f      	b.n	800bca2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc82:	79fb      	ldrb	r3, [r7, #7]
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	bf8c      	ite	hi
 800bc88:	2301      	movhi	r3, #1
 800bc8a:	2300      	movls	r3, #0
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f107 0314 	add.w	r3, r7, #20
 800bc94:	4611      	mov	r1, r2
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fe fbd8 	bl	800a44c <chk_lock>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bca2:	79fb      	ldrb	r3, [r7, #7]
 800bca4:	f003 031c 	and.w	r3, r3, #28
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d07f      	beq.n	800bdac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bcac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d017      	beq.n	800bce4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bcb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bcb8:	2b04      	cmp	r3, #4
 800bcba:	d10e      	bne.n	800bcda <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bcbc:	f7fe fc22 	bl	800a504 <enq_lock>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d006      	beq.n	800bcd4 <f_open+0xc4>
 800bcc6:	f107 0314 	add.w	r3, r7, #20
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7ff fb06 	bl	800b2dc <dir_register>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	e000      	b.n	800bcd6 <f_open+0xc6>
 800bcd4:	2312      	movs	r3, #18
 800bcd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	f043 0308 	orr.w	r3, r3, #8
 800bce0:	71fb      	strb	r3, [r7, #7]
 800bce2:	e010      	b.n	800bd06 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bce4:	7ebb      	ldrb	r3, [r7, #26]
 800bce6:	f003 0311 	and.w	r3, r3, #17
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d003      	beq.n	800bcf6 <f_open+0xe6>
					res = FR_DENIED;
 800bcee:	2307      	movs	r3, #7
 800bcf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bcf4:	e007      	b.n	800bd06 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bcf6:	79fb      	ldrb	r3, [r7, #7]
 800bcf8:	f003 0304 	and.w	r3, r3, #4
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <f_open+0xf6>
 800bd00:	2308      	movs	r3, #8
 800bd02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bd06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d168      	bne.n	800bde0 <f_open+0x1d0>
 800bd0e:	79fb      	ldrb	r3, [r7, #7]
 800bd10:	f003 0308 	and.w	r3, r3, #8
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d063      	beq.n	800bde0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800bd18:	f7fe f99c 	bl	800a054 <get_fattime>
 800bd1c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bd1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd20:	330e      	adds	r3, #14
 800bd22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fe fae7 	bl	800a2f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bd2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd2c:	3316      	adds	r3, #22
 800bd2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fe fae1 	bl	800a2f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bd36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd38:	330b      	adds	r3, #11
 800bd3a:	2220      	movs	r2, #32
 800bd3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd42:	4611      	mov	r1, r2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff fa35 	bl	800b1b4 <ld_clust>
 800bd4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bd50:	2200      	movs	r2, #0
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff fa4d 	bl	800b1f2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bd58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd5a:	331c      	adds	r3, #28
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fe faca 	bl	800a2f8 <st_dword>
					fs->wflag = 1;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	2201      	movs	r2, #1
 800bd68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bd6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d037      	beq.n	800bde0 <f_open+0x1d0>
						dw = fs->winsect;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd74:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bd76:	f107 0314 	add.w	r3, r7, #20
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe ff60 	bl	800ac44 <remove_chain>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800bd8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d126      	bne.n	800bde0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe fd08 	bl	800a7ac <move_window>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bda6:	3a01      	subs	r2, #1
 800bda8:	60da      	str	r2, [r3, #12]
 800bdaa:	e019      	b.n	800bde0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bdac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d115      	bne.n	800bde0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bdb4:	7ebb      	ldrb	r3, [r7, #26]
 800bdb6:	f003 0310 	and.w	r3, r3, #16
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800bdbe:	2304      	movs	r3, #4
 800bdc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bdc4:	e00c      	b.n	800bde0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d007      	beq.n	800bde0 <f_open+0x1d0>
 800bdd0:	7ebb      	ldrb	r3, [r7, #26]
 800bdd2:	f003 0301 	and.w	r3, r3, #1
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <f_open+0x1d0>
						res = FR_DENIED;
 800bdda:	2307      	movs	r3, #7
 800bddc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bde0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d126      	bne.n	800be36 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bde8:	79fb      	ldrb	r3, [r7, #7]
 800bdea:	f003 0308 	and.w	r3, r3, #8
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdf8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800be02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	bf8c      	ite	hi
 800be0e:	2301      	movhi	r3, #1
 800be10:	2300      	movls	r3, #0
 800be12:	b2db      	uxtb	r3, r3
 800be14:	461a      	mov	r2, r3
 800be16:	f107 0314 	add.w	r3, r7, #20
 800be1a:	4611      	mov	r1, r2
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fe fb93 	bl	800a548 <inc_lock>
 800be22:	4602      	mov	r2, r0
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <f_open+0x226>
 800be30:	2302      	movs	r3, #2
 800be32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800be36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f040 8095 	bne.w	800bf6a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be44:	4611      	mov	r1, r2
 800be46:	4618      	mov	r0, r3
 800be48:	f7ff f9b4 	bl	800b1b4 <ld_clust>
 800be4c:	4602      	mov	r2, r0
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800be52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be54:	331c      	adds	r3, #28
 800be56:	4618      	mov	r0, r3
 800be58:	f7fe fa10 	bl	800a27c <ld_dword>
 800be5c:	4602      	mov	r2, r0
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	88da      	ldrh	r2, [r3, #6]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	79fa      	ldrb	r2, [r7, #7]
 800be7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3330      	adds	r3, #48	@ 0x30
 800be92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be96:	2100      	movs	r1, #0
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fe fa7a 	bl	800a392 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800be9e:	79fb      	ldrb	r3, [r7, #7]
 800bea0:	f003 0320 	and.w	r3, r3, #32
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d060      	beq.n	800bf6a <f_open+0x35a>
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d05c      	beq.n	800bf6a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	68da      	ldr	r2, [r3, #12]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	895b      	ldrh	r3, [r3, #10]
 800bebc:	025b      	lsls	r3, r3, #9
 800bebe:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	657b      	str	r3, [r7, #84]	@ 0x54
 800becc:	e016      	b.n	800befc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe fd25 	bl	800a922 <get_fat>
 800bed8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800beda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d802      	bhi.n	800bee6 <f_open+0x2d6>
 800bee0:	2302      	movs	r3, #2
 800bee2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beec:	d102      	bne.n	800bef4 <f_open+0x2e4>
 800beee:	2301      	movs	r3, #1
 800bef0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bef4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	657b      	str	r3, [r7, #84]	@ 0x54
 800befc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d103      	bne.n	800bf0c <f_open+0x2fc>
 800bf04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bf06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d8e0      	bhi.n	800bece <f_open+0x2be>
				}
				fp->clust = clst;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bf12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d127      	bne.n	800bf6a <f_open+0x35a>
 800bf1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d022      	beq.n	800bf6a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fe fcdb 	bl	800a8e4 <clust2sect>
 800bf2e:	6478      	str	r0, [r7, #68]	@ 0x44
 800bf30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d103      	bne.n	800bf3e <f_open+0x32e>
						res = FR_INT_ERR;
 800bf36:	2302      	movs	r3, #2
 800bf38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bf3c:	e015      	b.n	800bf6a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bf3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf40:	0a5a      	lsrs	r2, r3, #9
 800bf42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf44:	441a      	add	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	7858      	ldrb	r0, [r3, #1]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	6a1a      	ldr	r2, [r3, #32]
 800bf58:	2301      	movs	r3, #1
 800bf5a:	f7fe f919 	bl	800a190 <disk_read>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <f_open+0x35a>
 800bf64:	2301      	movs	r3, #1
 800bf66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bf6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d002      	beq.n	800bf78 <f_open+0x368>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bf78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3760      	adds	r7, #96	@ 0x60
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08c      	sub	sp, #48	@ 0x30
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
 800bf90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f107 0210 	add.w	r2, r7, #16
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7ff fdb7 	bl	800bb18 <validate>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bfb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d107      	bne.n	800bfc8 <f_write+0x44>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	7d5b      	ldrb	r3, [r3, #21]
 800bfbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bfc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <f_write+0x4a>
 800bfc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfcc:	e14b      	b.n	800c266 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	7d1b      	ldrb	r3, [r3, #20]
 800bfd2:	f003 0302 	and.w	r3, r3, #2
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d101      	bne.n	800bfde <f_write+0x5a>
 800bfda:	2307      	movs	r3, #7
 800bfdc:	e143      	b.n	800c266 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	699a      	ldr	r2, [r3, #24]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	441a      	add	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	f080 812d 	bcs.w	800c24a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	43db      	mvns	r3, r3
 800bff6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bff8:	e127      	b.n	800c24a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c002:	2b00      	cmp	r3, #0
 800c004:	f040 80e3 	bne.w	800c1ce <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	0a5b      	lsrs	r3, r3, #9
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	8952      	ldrh	r2, [r2, #10]
 800c012:	3a01      	subs	r2, #1
 800c014:	4013      	ands	r3, r2
 800c016:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d143      	bne.n	800c0a6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10c      	bne.n	800c040 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d11a      	bne.n	800c068 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2100      	movs	r1, #0
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe fe69 	bl	800ad0e <create_chain>
 800c03c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c03e:	e013      	b.n	800c068 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	4619      	mov	r1, r3
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f7fe fef5 	bl	800ae3e <clmt_clust>
 800c054:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c056:	e007      	b.n	800c068 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	4619      	mov	r1, r3
 800c060:	4610      	mov	r0, r2
 800c062:	f7fe fe54 	bl	800ad0e <create_chain>
 800c066:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 80f2 	beq.w	800c254 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c072:	2b01      	cmp	r3, #1
 800c074:	d104      	bne.n	800c080 <f_write+0xfc>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2202      	movs	r2, #2
 800c07a:	755a      	strb	r2, [r3, #21]
 800c07c:	2302      	movs	r3, #2
 800c07e:	e0f2      	b.n	800c266 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c086:	d104      	bne.n	800c092 <f_write+0x10e>
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2201      	movs	r2, #1
 800c08c:	755a      	strb	r2, [r3, #21]
 800c08e:	2301      	movs	r3, #1
 800c090:	e0e9      	b.n	800c266 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c096:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d102      	bne.n	800c0a6 <f_write+0x122>
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0a4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	7d1b      	ldrb	r3, [r3, #20]
 800c0aa:	b25b      	sxtb	r3, r3
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	da18      	bge.n	800c0e2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	7858      	ldrb	r0, [r3, #1]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6a1a      	ldr	r2, [r3, #32]
 800c0be:	2301      	movs	r3, #1
 800c0c0:	f7fe f886 	bl	800a1d0 <disk_write>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d004      	beq.n	800c0d4 <f_write+0x150>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	755a      	strb	r2, [r3, #21]
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e0c8      	b.n	800c266 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	7d1b      	ldrb	r3, [r3, #20]
 800c0d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	69db      	ldr	r3, [r3, #28]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	f7fe fbfa 	bl	800a8e4 <clust2sect>
 800c0f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d104      	bne.n	800c102 <f_write+0x17e>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	755a      	strb	r2, [r3, #21]
 800c0fe:	2302      	movs	r3, #2
 800c100:	e0b1      	b.n	800c266 <f_write+0x2e2>
			sect += csect;
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	4413      	add	r3, r2
 800c108:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	0a5b      	lsrs	r3, r3, #9
 800c10e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c110:	6a3b      	ldr	r3, [r7, #32]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d03c      	beq.n	800c190 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c116:	69ba      	ldr	r2, [r7, #24]
 800c118:	6a3b      	ldr	r3, [r7, #32]
 800c11a:	4413      	add	r3, r2
 800c11c:	693a      	ldr	r2, [r7, #16]
 800c11e:	8952      	ldrh	r2, [r2, #10]
 800c120:	4293      	cmp	r3, r2
 800c122:	d905      	bls.n	800c130 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	895b      	ldrh	r3, [r3, #10]
 800c128:	461a      	mov	r2, r3
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	7858      	ldrb	r0, [r3, #1]
 800c134:	6a3b      	ldr	r3, [r7, #32]
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	69f9      	ldr	r1, [r7, #28]
 800c13a:	f7fe f849 	bl	800a1d0 <disk_write>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d004      	beq.n	800c14e <f_write+0x1ca>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2201      	movs	r2, #1
 800c148:	755a      	strb	r2, [r3, #21]
 800c14a:	2301      	movs	r3, #1
 800c14c:	e08b      	b.n	800c266 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6a1a      	ldr	r2, [r3, #32]
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	6a3a      	ldr	r2, [r7, #32]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d915      	bls.n	800c188 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6a1a      	ldr	r2, [r3, #32]
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	025b      	lsls	r3, r3, #9
 800c16c:	69fa      	ldr	r2, [r7, #28]
 800c16e:	4413      	add	r3, r2
 800c170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c174:	4619      	mov	r1, r3
 800c176:	f7fe f8eb 	bl	800a350 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	7d1b      	ldrb	r3, [r3, #20]
 800c17e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c182:	b2da      	uxtb	r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	025b      	lsls	r3, r3, #9
 800c18c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c18e:	e03f      	b.n	800c210 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6a1b      	ldr	r3, [r3, #32]
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	429a      	cmp	r2, r3
 800c198:	d016      	beq.n	800c1c8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	699a      	ldr	r2, [r3, #24]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d210      	bcs.n	800c1c8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	7858      	ldrb	r0, [r3, #1]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	f7fd ffec 	bl	800a190 <disk_read>
 800c1b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d004      	beq.n	800c1c8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	755a      	strb	r2, [r3, #21]
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e04e      	b.n	800c266 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	699b      	ldr	r3, [r3, #24]
 800c1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c1da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c1dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d901      	bls.n	800c1e8 <f_write+0x264>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f6:	4413      	add	r3, r2
 800c1f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1fa:	69f9      	ldr	r1, [r7, #28]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fe f8a7 	bl	800a350 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	7d1b      	ldrb	r3, [r3, #20]
 800c206:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c210:	69fa      	ldr	r2, [r7, #28]
 800c212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c214:	4413      	add	r3, r2
 800c216:	61fb      	str	r3, [r7, #28]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	699a      	ldr	r2, [r3, #24]
 800c21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21e:	441a      	add	r2, r3
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	619a      	str	r2, [r3, #24]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	68da      	ldr	r2, [r3, #12]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	bf38      	it	cc
 800c230:	461a      	movcc	r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	60da      	str	r2, [r3, #12]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	441a      	add	r2, r3
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	601a      	str	r2, [r3, #0]
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f47f aed4 	bne.w	800bffa <f_write+0x76>
 800c252:	e000      	b.n	800c256 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c254:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	7d1b      	ldrb	r3, [r3, #20]
 800c25a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3730      	adds	r7, #48	@ 0x30
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b086      	sub	sp, #24
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f107 0208 	add.w	r2, r7, #8
 800c27c:	4611      	mov	r1, r2
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff fc4a 	bl	800bb18 <validate>
 800c284:	4603      	mov	r3, r0
 800c286:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c288:	7dfb      	ldrb	r3, [r7, #23]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d168      	bne.n	800c360 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	7d1b      	ldrb	r3, [r3, #20]
 800c292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c296:	2b00      	cmp	r3, #0
 800c298:	d062      	beq.n	800c360 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	7d1b      	ldrb	r3, [r3, #20]
 800c29e:	b25b      	sxtb	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da15      	bge.n	800c2d0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	7858      	ldrb	r0, [r3, #1]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a1a      	ldr	r2, [r3, #32]
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	f7fd ff8c 	bl	800a1d0 <disk_write>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d001      	beq.n	800c2c2 <f_sync+0x54>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e04f      	b.n	800c362 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	7d1b      	ldrb	r3, [r3, #20]
 800c2c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2ca:	b2da      	uxtb	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c2d0:	f7fd fec0 	bl	800a054 <get_fattime>
 800c2d4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4610      	mov	r0, r2
 800c2e0:	f7fe fa64 	bl	800a7ac <move_window>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d138      	bne.n	800c360 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	330b      	adds	r3, #11
 800c2f8:	781a      	ldrb	r2, [r3, #0]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	330b      	adds	r3, #11
 800c2fe:	f042 0220 	orr.w	r2, r2, #32
 800c302:	b2d2      	uxtb	r2, r2
 800c304:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6818      	ldr	r0, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	461a      	mov	r2, r3
 800c310:	68f9      	ldr	r1, [r7, #12]
 800c312:	f7fe ff6e 	bl	800b1f2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f103 021c 	add.w	r2, r3, #28
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	4619      	mov	r1, r3
 800c322:	4610      	mov	r0, r2
 800c324:	f7fd ffe8 	bl	800a2f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3316      	adds	r3, #22
 800c32c:	6939      	ldr	r1, [r7, #16]
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fd ffe2 	bl	800a2f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	3312      	adds	r3, #18
 800c338:	2100      	movs	r1, #0
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fd ffc1 	bl	800a2c2 <st_word>
					fs->wflag = 1;
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	2201      	movs	r2, #1
 800c344:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe fa5d 	bl	800a808 <sync_fs>
 800c34e:	4603      	mov	r3, r0
 800c350:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	7d1b      	ldrb	r3, [r3, #20]
 800c356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c360:	7dfb      	ldrb	r3, [r7, #23]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b084      	sub	sp, #16
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff ff7b 	bl	800c26e <f_sync>
 800c378:	4603      	mov	r3, r0
 800c37a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d118      	bne.n	800c3b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f107 0208 	add.w	r2, r7, #8
 800c388:	4611      	mov	r1, r2
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7ff fbc4 	bl	800bb18 <validate>
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c394:	7bfb      	ldrb	r3, [r7, #15]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10c      	bne.n	800c3b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe f960 	bl	800a664 <dec_lock>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d102      	bne.n	800c3b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b092      	sub	sp, #72	@ 0x48
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	60f8      	str	r0, [r7, #12]
 800c3c6:	60b9      	str	r1, [r7, #8]
 800c3c8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c3ca:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c3ce:	f107 030c 	add.w	r3, r7, #12
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff f953 	bl	800b680 <find_volume>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800c3e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f040 8099 	bne.w	800c51c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c3ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f2:	691a      	ldr	r2, [r3, #16]
 800c3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	3b02      	subs	r3, #2
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d804      	bhi.n	800c408 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c400:	691a      	ldr	r2, [r3, #16]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	e089      	b.n	800c51c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d128      	bne.n	800c466 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c414:	2302      	movs	r3, #2
 800c416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c41c:	f107 0314 	add.w	r3, r7, #20
 800c420:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c422:	4618      	mov	r0, r3
 800c424:	f7fe fa7d 	bl	800a922 <get_fat>
 800c428:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c430:	d103      	bne.n	800c43a <f_getfree+0x7c>
 800c432:	2301      	movs	r3, #1
 800c434:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c438:	e063      	b.n	800c502 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d103      	bne.n	800c448 <f_getfree+0x8a>
 800c440:	2302      	movs	r3, #2
 800c442:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c446:	e05c      	b.n	800c502 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d102      	bne.n	800c454 <f_getfree+0x96>
 800c44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c450:	3301      	adds	r3, #1
 800c452:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800c454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c456:	3301      	adds	r3, #1
 800c458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c460:	429a      	cmp	r2, r3
 800c462:	d3db      	bcc.n	800c41c <f_getfree+0x5e>
 800c464:	e04d      	b.n	800c502 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46e:	6a1b      	ldr	r3, [r3, #32]
 800c470:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	637b      	str	r3, [r7, #52]	@ 0x34
 800c476:	2300      	movs	r3, #0
 800c478:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800c47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d113      	bne.n	800c4a8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c488:	4619      	mov	r1, r3
 800c48a:	f7fe f98f 	bl	800a7ac <move_window>
 800c48e:	4603      	mov	r3, r0
 800c490:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800c494:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d131      	bne.n	800c500 <f_getfree+0x142>
							p = fs->win;
 800c49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49e:	3330      	adds	r3, #48	@ 0x30
 800c4a0:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800c4a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4a6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d10f      	bne.n	800c4d0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c4b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4b2:	f7fd fecb 	bl	800a24c <ld_word>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <f_getfree+0x104>
 800c4bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4be:	3301      	adds	r3, #1
 800c4c0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c4:	3302      	adds	r3, #2
 800c4c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ca:	3b02      	subs	r3, #2
 800c4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4ce:	e010      	b.n	800c4f2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c4d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4d2:	f7fd fed3 	bl	800a27c <ld_dword>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d102      	bne.n	800c4e6 <f_getfree+0x128>
 800c4e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ee:	3b04      	subs	r3, #4
 800c4f0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800c4f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1bd      	bne.n	800c47a <f_getfree+0xbc>
 800c4fe:	e000      	b.n	800c502 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c500:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c506:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c50c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c510:	791a      	ldrb	r2, [r3, #4]
 800c512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c514:	f042 0201 	orr.w	r2, r2, #1
 800c518:	b2d2      	uxtb	r2, r2
 800c51a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c51c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c520:	4618      	mov	r0, r3
 800c522:	3748      	adds	r7, #72	@ 0x48
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c534:	78fb      	ldrb	r3, [r7, #3]
 800c536:	2b0a      	cmp	r3, #10
 800c538:	d103      	bne.n	800c542 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c53a:	210d      	movs	r1, #13
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff fff3 	bl	800c528 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	db25      	blt.n	800c59a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	1c5a      	adds	r2, r3, #1
 800c552:	60fa      	str	r2, [r7, #12]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	4413      	add	r3, r2
 800c558:	78fa      	ldrb	r2, [r7, #3]
 800c55a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b3c      	cmp	r3, #60	@ 0x3c
 800c560:	dd12      	ble.n	800c588 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6818      	ldr	r0, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f103 010c 	add.w	r1, r3, #12
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	f107 0308 	add.w	r3, r7, #8
 800c572:	f7ff fd07 	bl	800bf84 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d101      	bne.n	800c582 <putc_bfd+0x5a>
 800c57e:	2300      	movs	r3, #0
 800c580:	e001      	b.n	800c586 <putc_bfd+0x5e>
 800c582:	f04f 33ff 	mov.w	r3, #4294967295
 800c586:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	1c5a      	adds	r2, r3, #1
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	609a      	str	r2, [r3, #8]
 800c598:	e000      	b.n	800c59c <putc_bfd+0x74>
	if (i < 0) return;
 800c59a:	bf00      	nop
}
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b084      	sub	sp, #16
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	db16      	blt.n	800c5e0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f103 010c 	add.w	r1, r3, #12
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	f107 030c 	add.w	r3, r7, #12
 800c5c6:	f7ff fcdd 	bl	800bf84 <f_write>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d107      	bne.n	800c5e0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d102      	bne.n	800c5e0 <putc_flush+0x3e>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	e001      	b.n	800c5e4 <putc_flush+0x42>
	return EOF;
 800c5e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	605a      	str	r2, [r3, #4]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	609a      	str	r2, [r3, #8]
}
 800c60a:	bf00      	nop
 800c60c:	370c      	adds	r7, #12
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b096      	sub	sp, #88	@ 0x58
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
 800c61e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c620:	f107 030c 	add.w	r3, r7, #12
 800c624:	6839      	ldr	r1, [r7, #0]
 800c626:	4618      	mov	r0, r3
 800c628:	f7ff ffe0 	bl	800c5ec <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c62c:	e009      	b.n	800c642 <f_puts+0x2c>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	607a      	str	r2, [r7, #4]
 800c634:	781a      	ldrb	r2, [r3, #0]
 800c636:	f107 030c 	add.w	r3, r7, #12
 800c63a:	4611      	mov	r1, r2
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7ff ff73 	bl	800c528 <putc_bfd>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1f1      	bne.n	800c62e <f_puts+0x18>
	return putc_flush(&pb);
 800c64a:	f107 030c 	add.w	r3, r7, #12
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff ffa7 	bl	800c5a2 <putc_flush>
 800c654:	4603      	mov	r3, r0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3758      	adds	r7, #88	@ 0x58
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c660:	b480      	push	{r7}
 800c662:	b087      	sub	sp, #28
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	4613      	mov	r3, r2
 800c66c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c66e:	2301      	movs	r3, #1
 800c670:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c676:	4b1f      	ldr	r3, [pc, #124]	@ (800c6f4 <FATFS_LinkDriverEx+0x94>)
 800c678:	7a5b      	ldrb	r3, [r3, #9]
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d131      	bne.n	800c6e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c680:	4b1c      	ldr	r3, [pc, #112]	@ (800c6f4 <FATFS_LinkDriverEx+0x94>)
 800c682:	7a5b      	ldrb	r3, [r3, #9]
 800c684:	b2db      	uxtb	r3, r3
 800c686:	461a      	mov	r2, r3
 800c688:	4b1a      	ldr	r3, [pc, #104]	@ (800c6f4 <FATFS_LinkDriverEx+0x94>)
 800c68a:	2100      	movs	r1, #0
 800c68c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c68e:	4b19      	ldr	r3, [pc, #100]	@ (800c6f4 <FATFS_LinkDriverEx+0x94>)
 800c690:	7a5b      	ldrb	r3, [r3, #9]
 800c692:	b2db      	uxtb	r3, r3
 800c694:	4a17      	ldr	r2, [pc, #92]	@ (800c6f4 <FATFS_LinkDriverEx+0x94>)
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	4413      	add	r3, r2
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c69e:	4b15      	ldr	r3, [pc, #84]	@ (800c6f4 <FATFS_LinkDriverEx+0x94>)
 800c6a0:	7a5b      	ldrb	r3, [r3, #9]
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	4b13      	ldr	r3, [pc, #76]	@ (800c6f4 <FATFS_LinkDriverEx+0x94>)
 800c6a8:	4413      	add	r3, r2
 800c6aa:	79fa      	ldrb	r2, [r7, #7]
 800c6ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c6ae:	4b11      	ldr	r3, [pc, #68]	@ (800c6f4 <FATFS_LinkDriverEx+0x94>)
 800c6b0:	7a5b      	ldrb	r3, [r3, #9]
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	b2d1      	uxtb	r1, r2
 800c6b8:	4a0e      	ldr	r2, [pc, #56]	@ (800c6f4 <FATFS_LinkDriverEx+0x94>)
 800c6ba:	7251      	strb	r1, [r2, #9]
 800c6bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c6be:	7dbb      	ldrb	r3, [r7, #22]
 800c6c0:	3330      	adds	r3, #48	@ 0x30
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	223a      	movs	r2, #58	@ 0x3a
 800c6ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	3302      	adds	r3, #2
 800c6d4:	222f      	movs	r2, #47	@ 0x2f
 800c6d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	3303      	adds	r3, #3
 800c6dc:	2200      	movs	r2, #0
 800c6de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	371c      	adds	r7, #28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	20001344 	.word	0x20001344

0800c6f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c702:	2200      	movs	r2, #0
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7ff ffaa 	bl	800c660 <FATFS_LinkDriverEx>
 800c70c:	4603      	mov	r3, r0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
>>>>>>> e54ac6655dd7b198f115799a66c315c3d7a436dd
	...

0800c718 <malloc>:
 800c718:	4b02      	ldr	r3, [pc, #8]	@ (800c724 <malloc+0xc>)
 800c71a:	4601      	mov	r1, r0
 800c71c:	6818      	ldr	r0, [r3, #0]
 800c71e:	f000 b825 	b.w	800c76c <_malloc_r>
 800c722:	bf00      	nop
 800c724:	200001a4 	.word	0x200001a4

0800c728 <sbrk_aligned>:
 800c728:	b570      	push	{r4, r5, r6, lr}
 800c72a:	4e0f      	ldr	r6, [pc, #60]	@ (800c768 <sbrk_aligned+0x40>)
 800c72c:	460c      	mov	r4, r1
 800c72e:	6831      	ldr	r1, [r6, #0]
 800c730:	4605      	mov	r5, r0
 800c732:	b911      	cbnz	r1, 800c73a <sbrk_aligned+0x12>
 800c734:	f001 ff42 	bl	800e5bc <_sbrk_r>
 800c738:	6030      	str	r0, [r6, #0]
 800c73a:	4621      	mov	r1, r4
 800c73c:	4628      	mov	r0, r5
 800c73e:	f001 ff3d 	bl	800e5bc <_sbrk_r>
 800c742:	1c43      	adds	r3, r0, #1
 800c744:	d103      	bne.n	800c74e <sbrk_aligned+0x26>
 800c746:	f04f 34ff 	mov.w	r4, #4294967295
 800c74a:	4620      	mov	r0, r4
 800c74c:	bd70      	pop	{r4, r5, r6, pc}
 800c74e:	1cc4      	adds	r4, r0, #3
 800c750:	f024 0403 	bic.w	r4, r4, #3
 800c754:	42a0      	cmp	r0, r4
 800c756:	d0f8      	beq.n	800c74a <sbrk_aligned+0x22>
 800c758:	1a21      	subs	r1, r4, r0
 800c75a:	4628      	mov	r0, r5
 800c75c:	f001 ff2e 	bl	800e5bc <_sbrk_r>
 800c760:	3001      	adds	r0, #1
 800c762:	d1f2      	bne.n	800c74a <sbrk_aligned+0x22>
 800c764:	e7ef      	b.n	800c746 <sbrk_aligned+0x1e>
 800c766:	bf00      	nop
 800c768:	20001350 	.word	0x20001350

0800c76c <_malloc_r>:
 800c76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c770:	1ccd      	adds	r5, r1, #3
 800c772:	f025 0503 	bic.w	r5, r5, #3
 800c776:	3508      	adds	r5, #8
 800c778:	2d0c      	cmp	r5, #12
 800c77a:	bf38      	it	cc
 800c77c:	250c      	movcc	r5, #12
 800c77e:	2d00      	cmp	r5, #0
 800c780:	4606      	mov	r6, r0
 800c782:	db01      	blt.n	800c788 <_malloc_r+0x1c>
 800c784:	42a9      	cmp	r1, r5
 800c786:	d904      	bls.n	800c792 <_malloc_r+0x26>
 800c788:	230c      	movs	r3, #12
 800c78a:	6033      	str	r3, [r6, #0]
 800c78c:	2000      	movs	r0, #0
 800c78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c792:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c868 <_malloc_r+0xfc>
 800c796:	f000 f869 	bl	800c86c <__malloc_lock>
 800c79a:	f8d8 3000 	ldr.w	r3, [r8]
 800c79e:	461c      	mov	r4, r3
 800c7a0:	bb44      	cbnz	r4, 800c7f4 <_malloc_r+0x88>
 800c7a2:	4629      	mov	r1, r5
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f7ff ffbf 	bl	800c728 <sbrk_aligned>
 800c7aa:	1c43      	adds	r3, r0, #1
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	d158      	bne.n	800c862 <_malloc_r+0xf6>
 800c7b0:	f8d8 4000 	ldr.w	r4, [r8]
 800c7b4:	4627      	mov	r7, r4
 800c7b6:	2f00      	cmp	r7, #0
 800c7b8:	d143      	bne.n	800c842 <_malloc_r+0xd6>
 800c7ba:	2c00      	cmp	r4, #0
 800c7bc:	d04b      	beq.n	800c856 <_malloc_r+0xea>
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	4639      	mov	r1, r7
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	eb04 0903 	add.w	r9, r4, r3
 800c7c8:	f001 fef8 	bl	800e5bc <_sbrk_r>
 800c7cc:	4581      	cmp	r9, r0
 800c7ce:	d142      	bne.n	800c856 <_malloc_r+0xea>
 800c7d0:	6821      	ldr	r1, [r4, #0]
 800c7d2:	1a6d      	subs	r5, r5, r1
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f7ff ffa6 	bl	800c728 <sbrk_aligned>
 800c7dc:	3001      	adds	r0, #1
 800c7de:	d03a      	beq.n	800c856 <_malloc_r+0xea>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	442b      	add	r3, r5
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	f8d8 3000 	ldr.w	r3, [r8]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	bb62      	cbnz	r2, 800c848 <_malloc_r+0xdc>
 800c7ee:	f8c8 7000 	str.w	r7, [r8]
 800c7f2:	e00f      	b.n	800c814 <_malloc_r+0xa8>
 800c7f4:	6822      	ldr	r2, [r4, #0]
 800c7f6:	1b52      	subs	r2, r2, r5
 800c7f8:	d420      	bmi.n	800c83c <_malloc_r+0xd0>
 800c7fa:	2a0b      	cmp	r2, #11
 800c7fc:	d917      	bls.n	800c82e <_malloc_r+0xc2>
 800c7fe:	1961      	adds	r1, r4, r5
 800c800:	42a3      	cmp	r3, r4
 800c802:	6025      	str	r5, [r4, #0]
 800c804:	bf18      	it	ne
 800c806:	6059      	strne	r1, [r3, #4]
 800c808:	6863      	ldr	r3, [r4, #4]
 800c80a:	bf08      	it	eq
 800c80c:	f8c8 1000 	streq.w	r1, [r8]
 800c810:	5162      	str	r2, [r4, r5]
 800c812:	604b      	str	r3, [r1, #4]
 800c814:	4630      	mov	r0, r6
 800c816:	f000 f82f 	bl	800c878 <__malloc_unlock>
 800c81a:	f104 000b 	add.w	r0, r4, #11
 800c81e:	1d23      	adds	r3, r4, #4
 800c820:	f020 0007 	bic.w	r0, r0, #7
 800c824:	1ac2      	subs	r2, r0, r3
 800c826:	bf1c      	itt	ne
 800c828:	1a1b      	subne	r3, r3, r0
 800c82a:	50a3      	strne	r3, [r4, r2]
 800c82c:	e7af      	b.n	800c78e <_malloc_r+0x22>
 800c82e:	6862      	ldr	r2, [r4, #4]
 800c830:	42a3      	cmp	r3, r4
 800c832:	bf0c      	ite	eq
 800c834:	f8c8 2000 	streq.w	r2, [r8]
 800c838:	605a      	strne	r2, [r3, #4]
 800c83a:	e7eb      	b.n	800c814 <_malloc_r+0xa8>
 800c83c:	4623      	mov	r3, r4
 800c83e:	6864      	ldr	r4, [r4, #4]
 800c840:	e7ae      	b.n	800c7a0 <_malloc_r+0x34>
 800c842:	463c      	mov	r4, r7
 800c844:	687f      	ldr	r7, [r7, #4]
 800c846:	e7b6      	b.n	800c7b6 <_malloc_r+0x4a>
 800c848:	461a      	mov	r2, r3
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	42a3      	cmp	r3, r4
 800c84e:	d1fb      	bne.n	800c848 <_malloc_r+0xdc>
 800c850:	2300      	movs	r3, #0
 800c852:	6053      	str	r3, [r2, #4]
 800c854:	e7de      	b.n	800c814 <_malloc_r+0xa8>
 800c856:	230c      	movs	r3, #12
 800c858:	6033      	str	r3, [r6, #0]
 800c85a:	4630      	mov	r0, r6
 800c85c:	f000 f80c 	bl	800c878 <__malloc_unlock>
 800c860:	e794      	b.n	800c78c <_malloc_r+0x20>
 800c862:	6005      	str	r5, [r0, #0]
 800c864:	e7d6      	b.n	800c814 <_malloc_r+0xa8>
 800c866:	bf00      	nop
 800c868:	20001354 	.word	0x20001354

0800c86c <__malloc_lock>:
 800c86c:	4801      	ldr	r0, [pc, #4]	@ (800c874 <__malloc_lock+0x8>)
 800c86e:	f001 bef2 	b.w	800e656 <__retarget_lock_acquire_recursive>
 800c872:	bf00      	nop
 800c874:	20001498 	.word	0x20001498

0800c878 <__malloc_unlock>:
 800c878:	4801      	ldr	r0, [pc, #4]	@ (800c880 <__malloc_unlock+0x8>)
 800c87a:	f001 beed 	b.w	800e658 <__retarget_lock_release_recursive>
 800c87e:	bf00      	nop
 800c880:	20001498 	.word	0x20001498

0800c884 <sulp>:
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	4604      	mov	r4, r0
 800c888:	460d      	mov	r5, r1
 800c88a:	ec45 4b10 	vmov	d0, r4, r5
 800c88e:	4616      	mov	r6, r2
 800c890:	f003 fc74 	bl	801017c <__ulp>
 800c894:	ec51 0b10 	vmov	r0, r1, d0
 800c898:	b17e      	cbz	r6, 800c8ba <sulp+0x36>
 800c89a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c89e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	dd09      	ble.n	800c8ba <sulp+0x36>
 800c8a6:	051b      	lsls	r3, r3, #20
 800c8a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c8ac:	2400      	movs	r4, #0
 800c8ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c8b2:	4622      	mov	r2, r4
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	f7f3 fec7 	bl	8000648 <__aeabi_dmul>
 800c8ba:	ec41 0b10 	vmov	d0, r0, r1
 800c8be:	bd70      	pop	{r4, r5, r6, pc}

0800c8c0 <_strtod_l>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	b09f      	sub	sp, #124	@ 0x7c
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c8ce:	9005      	str	r0, [sp, #20]
 800c8d0:	f04f 0a00 	mov.w	sl, #0
 800c8d4:	f04f 0b00 	mov.w	fp, #0
 800c8d8:	460a      	mov	r2, r1
 800c8da:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8dc:	7811      	ldrb	r1, [r2, #0]
 800c8de:	292b      	cmp	r1, #43	@ 0x2b
 800c8e0:	d04a      	beq.n	800c978 <_strtod_l+0xb8>
 800c8e2:	d838      	bhi.n	800c956 <_strtod_l+0x96>
 800c8e4:	290d      	cmp	r1, #13
 800c8e6:	d832      	bhi.n	800c94e <_strtod_l+0x8e>
 800c8e8:	2908      	cmp	r1, #8
 800c8ea:	d832      	bhi.n	800c952 <_strtod_l+0x92>
 800c8ec:	2900      	cmp	r1, #0
 800c8ee:	d03b      	beq.n	800c968 <_strtod_l+0xa8>
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c8f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c8f6:	782a      	ldrb	r2, [r5, #0]
 800c8f8:	2a30      	cmp	r2, #48	@ 0x30
 800c8fa:	f040 80b3 	bne.w	800ca64 <_strtod_l+0x1a4>
 800c8fe:	786a      	ldrb	r2, [r5, #1]
 800c900:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c904:	2a58      	cmp	r2, #88	@ 0x58
 800c906:	d16e      	bne.n	800c9e6 <_strtod_l+0x126>
 800c908:	9302      	str	r3, [sp, #8]
 800c90a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	4a8e      	ldr	r2, [pc, #568]	@ (800cb4c <_strtod_l+0x28c>)
 800c914:	9805      	ldr	r0, [sp, #20]
 800c916:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c918:	a919      	add	r1, sp, #100	@ 0x64
 800c91a:	f002 fdd7 	bl	800f4cc <__gethex>
 800c91e:	f010 060f 	ands.w	r6, r0, #15
 800c922:	4604      	mov	r4, r0
 800c924:	d005      	beq.n	800c932 <_strtod_l+0x72>
 800c926:	2e06      	cmp	r6, #6
 800c928:	d128      	bne.n	800c97c <_strtod_l+0xbc>
 800c92a:	3501      	adds	r5, #1
 800c92c:	2300      	movs	r3, #0
 800c92e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c930:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c932:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c934:	2b00      	cmp	r3, #0
 800c936:	f040 858e 	bne.w	800d456 <_strtod_l+0xb96>
 800c93a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c93c:	b1cb      	cbz	r3, 800c972 <_strtod_l+0xb2>
 800c93e:	4652      	mov	r2, sl
 800c940:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c944:	ec43 2b10 	vmov	d0, r2, r3
 800c948:	b01f      	add	sp, #124	@ 0x7c
 800c94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94e:	2920      	cmp	r1, #32
 800c950:	d1ce      	bne.n	800c8f0 <_strtod_l+0x30>
 800c952:	3201      	adds	r2, #1
 800c954:	e7c1      	b.n	800c8da <_strtod_l+0x1a>
 800c956:	292d      	cmp	r1, #45	@ 0x2d
 800c958:	d1ca      	bne.n	800c8f0 <_strtod_l+0x30>
 800c95a:	2101      	movs	r1, #1
 800c95c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c95e:	1c51      	adds	r1, r2, #1
 800c960:	9119      	str	r1, [sp, #100]	@ 0x64
 800c962:	7852      	ldrb	r2, [r2, #1]
 800c964:	2a00      	cmp	r2, #0
 800c966:	d1c5      	bne.n	800c8f4 <_strtod_l+0x34>
 800c968:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c96a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f040 8570 	bne.w	800d452 <_strtod_l+0xb92>
 800c972:	4652      	mov	r2, sl
 800c974:	465b      	mov	r3, fp
 800c976:	e7e5      	b.n	800c944 <_strtod_l+0x84>
 800c978:	2100      	movs	r1, #0
 800c97a:	e7ef      	b.n	800c95c <_strtod_l+0x9c>
 800c97c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c97e:	b13a      	cbz	r2, 800c990 <_strtod_l+0xd0>
 800c980:	2135      	movs	r1, #53	@ 0x35
 800c982:	a81c      	add	r0, sp, #112	@ 0x70
 800c984:	f003 fcf4 	bl	8010370 <__copybits>
 800c988:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c98a:	9805      	ldr	r0, [sp, #20]
 800c98c:	f003 f8c2 	bl	800fb14 <_Bfree>
 800c990:	3e01      	subs	r6, #1
 800c992:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c994:	2e04      	cmp	r6, #4
 800c996:	d806      	bhi.n	800c9a6 <_strtod_l+0xe6>
 800c998:	e8df f006 	tbb	[pc, r6]
 800c99c:	201d0314 	.word	0x201d0314
 800c9a0:	14          	.byte	0x14
 800c9a1:	00          	.byte	0x00
 800c9a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c9a6:	05e1      	lsls	r1, r4, #23
 800c9a8:	bf48      	it	mi
 800c9aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c9ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9b2:	0d1b      	lsrs	r3, r3, #20
 800c9b4:	051b      	lsls	r3, r3, #20
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1bb      	bne.n	800c932 <_strtod_l+0x72>
 800c9ba:	f001 fe21 	bl	800e600 <__errno>
 800c9be:	2322      	movs	r3, #34	@ 0x22
 800c9c0:	6003      	str	r3, [r0, #0]
 800c9c2:	e7b6      	b.n	800c932 <_strtod_l+0x72>
 800c9c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c9c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c9cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c9d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c9d4:	e7e7      	b.n	800c9a6 <_strtod_l+0xe6>
 800c9d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cb54 <_strtod_l+0x294>
 800c9da:	e7e4      	b.n	800c9a6 <_strtod_l+0xe6>
 800c9dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c9e0:	f04f 3aff 	mov.w	sl, #4294967295
 800c9e4:	e7df      	b.n	800c9a6 <_strtod_l+0xe6>
 800c9e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9e8:	1c5a      	adds	r2, r3, #1
 800c9ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9ec:	785b      	ldrb	r3, [r3, #1]
 800c9ee:	2b30      	cmp	r3, #48	@ 0x30
 800c9f0:	d0f9      	beq.n	800c9e6 <_strtod_l+0x126>
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d09d      	beq.n	800c932 <_strtod_l+0x72>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9fe:	2300      	movs	r3, #0
 800ca00:	9308      	str	r3, [sp, #32]
 800ca02:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca04:	461f      	mov	r7, r3
 800ca06:	220a      	movs	r2, #10
 800ca08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ca0a:	7805      	ldrb	r5, [r0, #0]
 800ca0c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ca10:	b2d9      	uxtb	r1, r3
 800ca12:	2909      	cmp	r1, #9
 800ca14:	d928      	bls.n	800ca68 <_strtod_l+0x1a8>
 800ca16:	494e      	ldr	r1, [pc, #312]	@ (800cb50 <_strtod_l+0x290>)
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f001 fd84 	bl	800e526 <strncmp>
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d032      	beq.n	800ca88 <_strtod_l+0x1c8>
 800ca22:	2000      	movs	r0, #0
 800ca24:	462a      	mov	r2, r5
 800ca26:	4681      	mov	r9, r0
 800ca28:	463d      	mov	r5, r7
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2a65      	cmp	r2, #101	@ 0x65
 800ca2e:	d001      	beq.n	800ca34 <_strtod_l+0x174>
 800ca30:	2a45      	cmp	r2, #69	@ 0x45
 800ca32:	d114      	bne.n	800ca5e <_strtod_l+0x19e>
 800ca34:	b91d      	cbnz	r5, 800ca3e <_strtod_l+0x17e>
 800ca36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca38:	4302      	orrs	r2, r0
 800ca3a:	d095      	beq.n	800c968 <_strtod_l+0xa8>
 800ca3c:	2500      	movs	r5, #0
 800ca3e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ca40:	1c62      	adds	r2, r4, #1
 800ca42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca44:	7862      	ldrb	r2, [r4, #1]
 800ca46:	2a2b      	cmp	r2, #43	@ 0x2b
 800ca48:	d077      	beq.n	800cb3a <_strtod_l+0x27a>
 800ca4a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ca4c:	d07b      	beq.n	800cb46 <_strtod_l+0x286>
 800ca4e:	f04f 0c00 	mov.w	ip, #0
 800ca52:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ca56:	2909      	cmp	r1, #9
 800ca58:	f240 8082 	bls.w	800cb60 <_strtod_l+0x2a0>
 800ca5c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca5e:	f04f 0800 	mov.w	r8, #0
 800ca62:	e0a2      	b.n	800cbaa <_strtod_l+0x2ea>
 800ca64:	2300      	movs	r3, #0
 800ca66:	e7c7      	b.n	800c9f8 <_strtod_l+0x138>
 800ca68:	2f08      	cmp	r7, #8
 800ca6a:	bfd5      	itete	le
 800ca6c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ca6e:	9908      	ldrgt	r1, [sp, #32]
 800ca70:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca74:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ca78:	f100 0001 	add.w	r0, r0, #1
 800ca7c:	bfd4      	ite	le
 800ca7e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ca80:	9308      	strgt	r3, [sp, #32]
 800ca82:	3701      	adds	r7, #1
 800ca84:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca86:	e7bf      	b.n	800ca08 <_strtod_l+0x148>
 800ca88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca8e:	785a      	ldrb	r2, [r3, #1]
 800ca90:	b37f      	cbz	r7, 800caf2 <_strtod_l+0x232>
 800ca92:	4681      	mov	r9, r0
 800ca94:	463d      	mov	r5, r7
 800ca96:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ca9a:	2b09      	cmp	r3, #9
 800ca9c:	d912      	bls.n	800cac4 <_strtod_l+0x204>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e7c4      	b.n	800ca2c <_strtod_l+0x16c>
 800caa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caa4:	1c5a      	adds	r2, r3, #1
 800caa6:	9219      	str	r2, [sp, #100]	@ 0x64
 800caa8:	785a      	ldrb	r2, [r3, #1]
 800caaa:	3001      	adds	r0, #1
 800caac:	2a30      	cmp	r2, #48	@ 0x30
 800caae:	d0f8      	beq.n	800caa2 <_strtod_l+0x1e2>
 800cab0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cab4:	2b08      	cmp	r3, #8
 800cab6:	f200 84d3 	bhi.w	800d460 <_strtod_l+0xba0>
 800caba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cabc:	930c      	str	r3, [sp, #48]	@ 0x30
 800cabe:	4681      	mov	r9, r0
 800cac0:	2000      	movs	r0, #0
 800cac2:	4605      	mov	r5, r0
 800cac4:	3a30      	subs	r2, #48	@ 0x30
 800cac6:	f100 0301 	add.w	r3, r0, #1
 800caca:	d02a      	beq.n	800cb22 <_strtod_l+0x262>
 800cacc:	4499      	add	r9, r3
 800cace:	eb00 0c05 	add.w	ip, r0, r5
 800cad2:	462b      	mov	r3, r5
 800cad4:	210a      	movs	r1, #10
 800cad6:	4563      	cmp	r3, ip
 800cad8:	d10d      	bne.n	800caf6 <_strtod_l+0x236>
 800cada:	1c69      	adds	r1, r5, #1
 800cadc:	4401      	add	r1, r0
 800cade:	4428      	add	r0, r5
 800cae0:	2808      	cmp	r0, #8
 800cae2:	dc16      	bgt.n	800cb12 <_strtod_l+0x252>
 800cae4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cae6:	230a      	movs	r3, #10
 800cae8:	fb03 2300 	mla	r3, r3, r0, r2
 800caec:	930a      	str	r3, [sp, #40]	@ 0x28
 800caee:	2300      	movs	r3, #0
 800caf0:	e018      	b.n	800cb24 <_strtod_l+0x264>
 800caf2:	4638      	mov	r0, r7
 800caf4:	e7da      	b.n	800caac <_strtod_l+0x1ec>
 800caf6:	2b08      	cmp	r3, #8
 800caf8:	f103 0301 	add.w	r3, r3, #1
 800cafc:	dc03      	bgt.n	800cb06 <_strtod_l+0x246>
 800cafe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cb00:	434e      	muls	r6, r1
 800cb02:	960a      	str	r6, [sp, #40]	@ 0x28
 800cb04:	e7e7      	b.n	800cad6 <_strtod_l+0x216>
 800cb06:	2b10      	cmp	r3, #16
 800cb08:	bfde      	ittt	le
 800cb0a:	9e08      	ldrle	r6, [sp, #32]
 800cb0c:	434e      	mulle	r6, r1
 800cb0e:	9608      	strle	r6, [sp, #32]
 800cb10:	e7e1      	b.n	800cad6 <_strtod_l+0x216>
 800cb12:	280f      	cmp	r0, #15
 800cb14:	dceb      	bgt.n	800caee <_strtod_l+0x22e>
 800cb16:	9808      	ldr	r0, [sp, #32]
 800cb18:	230a      	movs	r3, #10
 800cb1a:	fb03 2300 	mla	r3, r3, r0, r2
 800cb1e:	9308      	str	r3, [sp, #32]
 800cb20:	e7e5      	b.n	800caee <_strtod_l+0x22e>
 800cb22:	4629      	mov	r1, r5
 800cb24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb26:	1c50      	adds	r0, r2, #1
 800cb28:	9019      	str	r0, [sp, #100]	@ 0x64
 800cb2a:	7852      	ldrb	r2, [r2, #1]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	460d      	mov	r5, r1
 800cb30:	e7b1      	b.n	800ca96 <_strtod_l+0x1d6>
 800cb32:	f04f 0900 	mov.w	r9, #0
 800cb36:	2301      	movs	r3, #1
 800cb38:	e77d      	b.n	800ca36 <_strtod_l+0x176>
 800cb3a:	f04f 0c00 	mov.w	ip, #0
 800cb3e:	1ca2      	adds	r2, r4, #2
 800cb40:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb42:	78a2      	ldrb	r2, [r4, #2]
 800cb44:	e785      	b.n	800ca52 <_strtod_l+0x192>
 800cb46:	f04f 0c01 	mov.w	ip, #1
 800cb4a:	e7f8      	b.n	800cb3e <_strtod_l+0x27e>
 800cb4c:	08010fc4 	.word	0x08010fc4
 800cb50:	08010fac 	.word	0x08010fac
 800cb54:	7ff00000 	.word	0x7ff00000
 800cb58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb5a:	1c51      	adds	r1, r2, #1
 800cb5c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb5e:	7852      	ldrb	r2, [r2, #1]
 800cb60:	2a30      	cmp	r2, #48	@ 0x30
 800cb62:	d0f9      	beq.n	800cb58 <_strtod_l+0x298>
 800cb64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cb68:	2908      	cmp	r1, #8
 800cb6a:	f63f af78 	bhi.w	800ca5e <_strtod_l+0x19e>
 800cb6e:	3a30      	subs	r2, #48	@ 0x30
 800cb70:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb74:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cb76:	f04f 080a 	mov.w	r8, #10
 800cb7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb7c:	1c56      	adds	r6, r2, #1
 800cb7e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cb80:	7852      	ldrb	r2, [r2, #1]
 800cb82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cb86:	f1be 0f09 	cmp.w	lr, #9
 800cb8a:	d939      	bls.n	800cc00 <_strtod_l+0x340>
 800cb8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb8e:	1a76      	subs	r6, r6, r1
 800cb90:	2e08      	cmp	r6, #8
 800cb92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cb96:	dc03      	bgt.n	800cba0 <_strtod_l+0x2e0>
 800cb98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb9a:	4588      	cmp	r8, r1
 800cb9c:	bfa8      	it	ge
 800cb9e:	4688      	movge	r8, r1
 800cba0:	f1bc 0f00 	cmp.w	ip, #0
 800cba4:	d001      	beq.n	800cbaa <_strtod_l+0x2ea>
 800cba6:	f1c8 0800 	rsb	r8, r8, #0
 800cbaa:	2d00      	cmp	r5, #0
 800cbac:	d14e      	bne.n	800cc4c <_strtod_l+0x38c>
 800cbae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbb0:	4308      	orrs	r0, r1
 800cbb2:	f47f aebe 	bne.w	800c932 <_strtod_l+0x72>
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f47f aed6 	bne.w	800c968 <_strtod_l+0xa8>
 800cbbc:	2a69      	cmp	r2, #105	@ 0x69
 800cbbe:	d028      	beq.n	800cc12 <_strtod_l+0x352>
 800cbc0:	dc25      	bgt.n	800cc0e <_strtod_l+0x34e>
 800cbc2:	2a49      	cmp	r2, #73	@ 0x49
 800cbc4:	d025      	beq.n	800cc12 <_strtod_l+0x352>
 800cbc6:	2a4e      	cmp	r2, #78	@ 0x4e
 800cbc8:	f47f aece 	bne.w	800c968 <_strtod_l+0xa8>
 800cbcc:	499b      	ldr	r1, [pc, #620]	@ (800ce3c <_strtod_l+0x57c>)
 800cbce:	a819      	add	r0, sp, #100	@ 0x64
 800cbd0:	f002 fe9e 	bl	800f910 <__match>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	f43f aec7 	beq.w	800c968 <_strtod_l+0xa8>
 800cbda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	2b28      	cmp	r3, #40	@ 0x28
 800cbe0:	d12e      	bne.n	800cc40 <_strtod_l+0x380>
 800cbe2:	4997      	ldr	r1, [pc, #604]	@ (800ce40 <_strtod_l+0x580>)
 800cbe4:	aa1c      	add	r2, sp, #112	@ 0x70
 800cbe6:	a819      	add	r0, sp, #100	@ 0x64
 800cbe8:	f002 fea6 	bl	800f938 <__hexnan>
 800cbec:	2805      	cmp	r0, #5
 800cbee:	d127      	bne.n	800cc40 <_strtod_l+0x380>
 800cbf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cbf2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cbf6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cbfa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cbfe:	e698      	b.n	800c932 <_strtod_l+0x72>
 800cc00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc02:	fb08 2101 	mla	r1, r8, r1, r2
 800cc06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cc0a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc0c:	e7b5      	b.n	800cb7a <_strtod_l+0x2ba>
 800cc0e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cc10:	e7da      	b.n	800cbc8 <_strtod_l+0x308>
 800cc12:	498c      	ldr	r1, [pc, #560]	@ (800ce44 <_strtod_l+0x584>)
 800cc14:	a819      	add	r0, sp, #100	@ 0x64
 800cc16:	f002 fe7b 	bl	800f910 <__match>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	f43f aea4 	beq.w	800c968 <_strtod_l+0xa8>
 800cc20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc22:	4989      	ldr	r1, [pc, #548]	@ (800ce48 <_strtod_l+0x588>)
 800cc24:	3b01      	subs	r3, #1
 800cc26:	a819      	add	r0, sp, #100	@ 0x64
 800cc28:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc2a:	f002 fe71 	bl	800f910 <__match>
 800cc2e:	b910      	cbnz	r0, 800cc36 <_strtod_l+0x376>
 800cc30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc32:	3301      	adds	r3, #1
 800cc34:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ce58 <_strtod_l+0x598>
 800cc3a:	f04f 0a00 	mov.w	sl, #0
 800cc3e:	e678      	b.n	800c932 <_strtod_l+0x72>
 800cc40:	4882      	ldr	r0, [pc, #520]	@ (800ce4c <_strtod_l+0x58c>)
 800cc42:	f001 fd19 	bl	800e678 <nan>
 800cc46:	ec5b ab10 	vmov	sl, fp, d0
 800cc4a:	e672      	b.n	800c932 <_strtod_l+0x72>
 800cc4c:	eba8 0309 	sub.w	r3, r8, r9
 800cc50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc52:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc54:	2f00      	cmp	r7, #0
 800cc56:	bf08      	it	eq
 800cc58:	462f      	moveq	r7, r5
 800cc5a:	2d10      	cmp	r5, #16
 800cc5c:	462c      	mov	r4, r5
 800cc5e:	bfa8      	it	ge
 800cc60:	2410      	movge	r4, #16
 800cc62:	f7f3 fc77 	bl	8000554 <__aeabi_ui2d>
 800cc66:	2d09      	cmp	r5, #9
 800cc68:	4682      	mov	sl, r0
 800cc6a:	468b      	mov	fp, r1
 800cc6c:	dc13      	bgt.n	800cc96 <_strtod_l+0x3d6>
 800cc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f43f ae5e 	beq.w	800c932 <_strtod_l+0x72>
 800cc76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc78:	dd78      	ble.n	800cd6c <_strtod_l+0x4ac>
 800cc7a:	2b16      	cmp	r3, #22
 800cc7c:	dc5f      	bgt.n	800cd3e <_strtod_l+0x47e>
 800cc7e:	4974      	ldr	r1, [pc, #464]	@ (800ce50 <_strtod_l+0x590>)
 800cc80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc88:	4652      	mov	r2, sl
 800cc8a:	465b      	mov	r3, fp
 800cc8c:	f7f3 fcdc 	bl	8000648 <__aeabi_dmul>
 800cc90:	4682      	mov	sl, r0
 800cc92:	468b      	mov	fp, r1
 800cc94:	e64d      	b.n	800c932 <_strtod_l+0x72>
 800cc96:	4b6e      	ldr	r3, [pc, #440]	@ (800ce50 <_strtod_l+0x590>)
 800cc98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cca0:	f7f3 fcd2 	bl	8000648 <__aeabi_dmul>
 800cca4:	4682      	mov	sl, r0
 800cca6:	9808      	ldr	r0, [sp, #32]
 800cca8:	468b      	mov	fp, r1
 800ccaa:	f7f3 fc53 	bl	8000554 <__aeabi_ui2d>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4650      	mov	r0, sl
 800ccb4:	4659      	mov	r1, fp
 800ccb6:	f7f3 fb11 	bl	80002dc <__adddf3>
 800ccba:	2d0f      	cmp	r5, #15
 800ccbc:	4682      	mov	sl, r0
 800ccbe:	468b      	mov	fp, r1
 800ccc0:	ddd5      	ble.n	800cc6e <_strtod_l+0x3ae>
 800ccc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc4:	1b2c      	subs	r4, r5, r4
 800ccc6:	441c      	add	r4, r3
 800ccc8:	2c00      	cmp	r4, #0
 800ccca:	f340 8096 	ble.w	800cdfa <_strtod_l+0x53a>
 800ccce:	f014 030f 	ands.w	r3, r4, #15
 800ccd2:	d00a      	beq.n	800ccea <_strtod_l+0x42a>
 800ccd4:	495e      	ldr	r1, [pc, #376]	@ (800ce50 <_strtod_l+0x590>)
 800ccd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ccda:	4652      	mov	r2, sl
 800ccdc:	465b      	mov	r3, fp
 800ccde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce2:	f7f3 fcb1 	bl	8000648 <__aeabi_dmul>
 800cce6:	4682      	mov	sl, r0
 800cce8:	468b      	mov	fp, r1
 800ccea:	f034 040f 	bics.w	r4, r4, #15
 800ccee:	d073      	beq.n	800cdd8 <_strtod_l+0x518>
 800ccf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ccf4:	dd48      	ble.n	800cd88 <_strtod_l+0x4c8>
 800ccf6:	2400      	movs	r4, #0
 800ccf8:	46a0      	mov	r8, r4
 800ccfa:	940a      	str	r4, [sp, #40]	@ 0x28
 800ccfc:	46a1      	mov	r9, r4
 800ccfe:	9a05      	ldr	r2, [sp, #20]
 800cd00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ce58 <_strtod_l+0x598>
 800cd04:	2322      	movs	r3, #34	@ 0x22
 800cd06:	6013      	str	r3, [r2, #0]
 800cd08:	f04f 0a00 	mov.w	sl, #0
 800cd0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f43f ae0f 	beq.w	800c932 <_strtod_l+0x72>
 800cd14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd16:	9805      	ldr	r0, [sp, #20]
 800cd18:	f002 fefc 	bl	800fb14 <_Bfree>
 800cd1c:	9805      	ldr	r0, [sp, #20]
 800cd1e:	4649      	mov	r1, r9
 800cd20:	f002 fef8 	bl	800fb14 <_Bfree>
 800cd24:	9805      	ldr	r0, [sp, #20]
 800cd26:	4641      	mov	r1, r8
 800cd28:	f002 fef4 	bl	800fb14 <_Bfree>
 800cd2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd2e:	9805      	ldr	r0, [sp, #20]
 800cd30:	f002 fef0 	bl	800fb14 <_Bfree>
 800cd34:	9805      	ldr	r0, [sp, #20]
 800cd36:	4621      	mov	r1, r4
 800cd38:	f002 feec 	bl	800fb14 <_Bfree>
 800cd3c:	e5f9      	b.n	800c932 <_strtod_l+0x72>
 800cd3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cd44:	4293      	cmp	r3, r2
 800cd46:	dbbc      	blt.n	800ccc2 <_strtod_l+0x402>
 800cd48:	4c41      	ldr	r4, [pc, #260]	@ (800ce50 <_strtod_l+0x590>)
 800cd4a:	f1c5 050f 	rsb	r5, r5, #15
 800cd4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cd52:	4652      	mov	r2, sl
 800cd54:	465b      	mov	r3, fp
 800cd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd5a:	f7f3 fc75 	bl	8000648 <__aeabi_dmul>
 800cd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd60:	1b5d      	subs	r5, r3, r5
 800cd62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cd66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cd6a:	e78f      	b.n	800cc8c <_strtod_l+0x3cc>
 800cd6c:	3316      	adds	r3, #22
 800cd6e:	dba8      	blt.n	800ccc2 <_strtod_l+0x402>
 800cd70:	4b37      	ldr	r3, [pc, #220]	@ (800ce50 <_strtod_l+0x590>)
 800cd72:	eba9 0808 	sub.w	r8, r9, r8
 800cd76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cd7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cd7e:	4650      	mov	r0, sl
 800cd80:	4659      	mov	r1, fp
 800cd82:	f7f3 fd8b 	bl	800089c <__aeabi_ddiv>
 800cd86:	e783      	b.n	800cc90 <_strtod_l+0x3d0>
 800cd88:	4b32      	ldr	r3, [pc, #200]	@ (800ce54 <_strtod_l+0x594>)
 800cd8a:	9308      	str	r3, [sp, #32]
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	1124      	asrs	r4, r4, #4
 800cd90:	4650      	mov	r0, sl
 800cd92:	4659      	mov	r1, fp
 800cd94:	461e      	mov	r6, r3
 800cd96:	2c01      	cmp	r4, #1
 800cd98:	dc21      	bgt.n	800cdde <_strtod_l+0x51e>
 800cd9a:	b10b      	cbz	r3, 800cda0 <_strtod_l+0x4e0>
 800cd9c:	4682      	mov	sl, r0
 800cd9e:	468b      	mov	fp, r1
 800cda0:	492c      	ldr	r1, [pc, #176]	@ (800ce54 <_strtod_l+0x594>)
 800cda2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cda6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cdaa:	4652      	mov	r2, sl
 800cdac:	465b      	mov	r3, fp
 800cdae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdb2:	f7f3 fc49 	bl	8000648 <__aeabi_dmul>
 800cdb6:	4b28      	ldr	r3, [pc, #160]	@ (800ce58 <_strtod_l+0x598>)
 800cdb8:	460a      	mov	r2, r1
 800cdba:	400b      	ands	r3, r1
 800cdbc:	4927      	ldr	r1, [pc, #156]	@ (800ce5c <_strtod_l+0x59c>)
 800cdbe:	428b      	cmp	r3, r1
 800cdc0:	4682      	mov	sl, r0
 800cdc2:	d898      	bhi.n	800ccf6 <_strtod_l+0x436>
 800cdc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cdc8:	428b      	cmp	r3, r1
 800cdca:	bf86      	itte	hi
 800cdcc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ce60 <_strtod_l+0x5a0>
 800cdd0:	f04f 3aff 	movhi.w	sl, #4294967295
 800cdd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cdd8:	2300      	movs	r3, #0
 800cdda:	9308      	str	r3, [sp, #32]
 800cddc:	e07a      	b.n	800ced4 <_strtod_l+0x614>
 800cdde:	07e2      	lsls	r2, r4, #31
 800cde0:	d505      	bpl.n	800cdee <_strtod_l+0x52e>
 800cde2:	9b08      	ldr	r3, [sp, #32]
 800cde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde8:	f7f3 fc2e 	bl	8000648 <__aeabi_dmul>
 800cdec:	2301      	movs	r3, #1
 800cdee:	9a08      	ldr	r2, [sp, #32]
 800cdf0:	3208      	adds	r2, #8
 800cdf2:	3601      	adds	r6, #1
 800cdf4:	1064      	asrs	r4, r4, #1
 800cdf6:	9208      	str	r2, [sp, #32]
 800cdf8:	e7cd      	b.n	800cd96 <_strtod_l+0x4d6>
 800cdfa:	d0ed      	beq.n	800cdd8 <_strtod_l+0x518>
 800cdfc:	4264      	negs	r4, r4
 800cdfe:	f014 020f 	ands.w	r2, r4, #15
 800ce02:	d00a      	beq.n	800ce1a <_strtod_l+0x55a>
 800ce04:	4b12      	ldr	r3, [pc, #72]	@ (800ce50 <_strtod_l+0x590>)
 800ce06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce0a:	4650      	mov	r0, sl
 800ce0c:	4659      	mov	r1, fp
 800ce0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce12:	f7f3 fd43 	bl	800089c <__aeabi_ddiv>
 800ce16:	4682      	mov	sl, r0
 800ce18:	468b      	mov	fp, r1
 800ce1a:	1124      	asrs	r4, r4, #4
 800ce1c:	d0dc      	beq.n	800cdd8 <_strtod_l+0x518>
 800ce1e:	2c1f      	cmp	r4, #31
 800ce20:	dd20      	ble.n	800ce64 <_strtod_l+0x5a4>
 800ce22:	2400      	movs	r4, #0
 800ce24:	46a0      	mov	r8, r4
 800ce26:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce28:	46a1      	mov	r9, r4
 800ce2a:	9a05      	ldr	r2, [sp, #20]
 800ce2c:	2322      	movs	r3, #34	@ 0x22
 800ce2e:	f04f 0a00 	mov.w	sl, #0
 800ce32:	f04f 0b00 	mov.w	fp, #0
 800ce36:	6013      	str	r3, [r2, #0]
 800ce38:	e768      	b.n	800cd0c <_strtod_l+0x44c>
 800ce3a:	bf00      	nop
 800ce3c:	0801110e 	.word	0x0801110e
 800ce40:	08010fb0 	.word	0x08010fb0
 800ce44:	08011106 	.word	0x08011106
 800ce48:	08011181 	.word	0x08011181
 800ce4c:	0801117d 	.word	0x0801117d
 800ce50:	080112f8 	.word	0x080112f8
 800ce54:	080112d0 	.word	0x080112d0
 800ce58:	7ff00000 	.word	0x7ff00000
 800ce5c:	7ca00000 	.word	0x7ca00000
 800ce60:	7fefffff 	.word	0x7fefffff
 800ce64:	f014 0310 	ands.w	r3, r4, #16
 800ce68:	bf18      	it	ne
 800ce6a:	236a      	movne	r3, #106	@ 0x6a
 800ce6c:	4ea9      	ldr	r6, [pc, #676]	@ (800d114 <_strtod_l+0x854>)
 800ce6e:	9308      	str	r3, [sp, #32]
 800ce70:	4650      	mov	r0, sl
 800ce72:	4659      	mov	r1, fp
 800ce74:	2300      	movs	r3, #0
 800ce76:	07e2      	lsls	r2, r4, #31
 800ce78:	d504      	bpl.n	800ce84 <_strtod_l+0x5c4>
 800ce7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce7e:	f7f3 fbe3 	bl	8000648 <__aeabi_dmul>
 800ce82:	2301      	movs	r3, #1
 800ce84:	1064      	asrs	r4, r4, #1
 800ce86:	f106 0608 	add.w	r6, r6, #8
 800ce8a:	d1f4      	bne.n	800ce76 <_strtod_l+0x5b6>
 800ce8c:	b10b      	cbz	r3, 800ce92 <_strtod_l+0x5d2>
 800ce8e:	4682      	mov	sl, r0
 800ce90:	468b      	mov	fp, r1
 800ce92:	9b08      	ldr	r3, [sp, #32]
 800ce94:	b1b3      	cbz	r3, 800cec4 <_strtod_l+0x604>
 800ce96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ce9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	4659      	mov	r1, fp
 800cea2:	dd0f      	ble.n	800cec4 <_strtod_l+0x604>
 800cea4:	2b1f      	cmp	r3, #31
 800cea6:	dd55      	ble.n	800cf54 <_strtod_l+0x694>
 800cea8:	2b34      	cmp	r3, #52	@ 0x34
 800ceaa:	bfde      	ittt	le
 800ceac:	f04f 33ff 	movle.w	r3, #4294967295
 800ceb0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ceb4:	4093      	lslle	r3, r2
 800ceb6:	f04f 0a00 	mov.w	sl, #0
 800ceba:	bfcc      	ite	gt
 800cebc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cec0:	ea03 0b01 	andle.w	fp, r3, r1
 800cec4:	2200      	movs	r2, #0
 800cec6:	2300      	movs	r3, #0
 800cec8:	4650      	mov	r0, sl
 800ceca:	4659      	mov	r1, fp
 800cecc:	f7f3 fe24 	bl	8000b18 <__aeabi_dcmpeq>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d1a6      	bne.n	800ce22 <_strtod_l+0x562>
 800ced4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ceda:	9805      	ldr	r0, [sp, #20]
 800cedc:	462b      	mov	r3, r5
 800cede:	463a      	mov	r2, r7
 800cee0:	f002 fe80 	bl	800fbe4 <__s2b>
 800cee4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cee6:	2800      	cmp	r0, #0
 800cee8:	f43f af05 	beq.w	800ccf6 <_strtod_l+0x436>
 800ceec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceee:	2a00      	cmp	r2, #0
 800cef0:	eba9 0308 	sub.w	r3, r9, r8
 800cef4:	bfa8      	it	ge
 800cef6:	2300      	movge	r3, #0
 800cef8:	9312      	str	r3, [sp, #72]	@ 0x48
 800cefa:	2400      	movs	r4, #0
 800cefc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cf00:	9316      	str	r3, [sp, #88]	@ 0x58
 800cf02:	46a0      	mov	r8, r4
 800cf04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf06:	9805      	ldr	r0, [sp, #20]
 800cf08:	6859      	ldr	r1, [r3, #4]
 800cf0a:	f002 fdc3 	bl	800fa94 <_Balloc>
 800cf0e:	4681      	mov	r9, r0
 800cf10:	2800      	cmp	r0, #0
 800cf12:	f43f aef4 	beq.w	800ccfe <_strtod_l+0x43e>
 800cf16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf18:	691a      	ldr	r2, [r3, #16]
 800cf1a:	3202      	adds	r2, #2
 800cf1c:	f103 010c 	add.w	r1, r3, #12
 800cf20:	0092      	lsls	r2, r2, #2
 800cf22:	300c      	adds	r0, #12
 800cf24:	f001 fb99 	bl	800e65a <memcpy>
 800cf28:	ec4b ab10 	vmov	d0, sl, fp
 800cf2c:	9805      	ldr	r0, [sp, #20]
 800cf2e:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf30:	a91b      	add	r1, sp, #108	@ 0x6c
 800cf32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cf36:	f003 f991 	bl	801025c <__d2b>
 800cf3a:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	f43f aede 	beq.w	800ccfe <_strtod_l+0x43e>
 800cf42:	9805      	ldr	r0, [sp, #20]
 800cf44:	2101      	movs	r1, #1
 800cf46:	f002 fee3 	bl	800fd10 <__i2b>
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	b948      	cbnz	r0, 800cf62 <_strtod_l+0x6a2>
 800cf4e:	f04f 0800 	mov.w	r8, #0
 800cf52:	e6d4      	b.n	800ccfe <_strtod_l+0x43e>
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295
 800cf58:	fa02 f303 	lsl.w	r3, r2, r3
 800cf5c:	ea03 0a0a 	and.w	sl, r3, sl
 800cf60:	e7b0      	b.n	800cec4 <_strtod_l+0x604>
 800cf62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cf64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cf66:	2d00      	cmp	r5, #0
 800cf68:	bfab      	itete	ge
 800cf6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cf6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cf6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cf70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cf72:	bfac      	ite	ge
 800cf74:	18ef      	addge	r7, r5, r3
 800cf76:	1b5e      	sublt	r6, r3, r5
 800cf78:	9b08      	ldr	r3, [sp, #32]
 800cf7a:	1aed      	subs	r5, r5, r3
 800cf7c:	4415      	add	r5, r2
 800cf7e:	4b66      	ldr	r3, [pc, #408]	@ (800d118 <_strtod_l+0x858>)
 800cf80:	3d01      	subs	r5, #1
 800cf82:	429d      	cmp	r5, r3
 800cf84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cf88:	da50      	bge.n	800d02c <_strtod_l+0x76c>
 800cf8a:	1b5b      	subs	r3, r3, r5
 800cf8c:	2b1f      	cmp	r3, #31
 800cf8e:	eba2 0203 	sub.w	r2, r2, r3
 800cf92:	f04f 0101 	mov.w	r1, #1
 800cf96:	dc3d      	bgt.n	800d014 <_strtod_l+0x754>
 800cf98:	fa01 f303 	lsl.w	r3, r1, r3
 800cf9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfa2:	18bd      	adds	r5, r7, r2
 800cfa4:	9b08      	ldr	r3, [sp, #32]
 800cfa6:	42af      	cmp	r7, r5
 800cfa8:	4416      	add	r6, r2
 800cfaa:	441e      	add	r6, r3
 800cfac:	463b      	mov	r3, r7
 800cfae:	bfa8      	it	ge
 800cfb0:	462b      	movge	r3, r5
 800cfb2:	42b3      	cmp	r3, r6
 800cfb4:	bfa8      	it	ge
 800cfb6:	4633      	movge	r3, r6
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	bfc2      	ittt	gt
 800cfbc:	1aed      	subgt	r5, r5, r3
 800cfbe:	1af6      	subgt	r6, r6, r3
 800cfc0:	1aff      	subgt	r7, r7, r3
 800cfc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	dd16      	ble.n	800cff6 <_strtod_l+0x736>
 800cfc8:	4641      	mov	r1, r8
 800cfca:	9805      	ldr	r0, [sp, #20]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	f002 ff5f 	bl	800fe90 <__pow5mult>
 800cfd2:	4680      	mov	r8, r0
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d0ba      	beq.n	800cf4e <_strtod_l+0x68e>
 800cfd8:	4601      	mov	r1, r0
 800cfda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cfdc:	9805      	ldr	r0, [sp, #20]
 800cfde:	f002 fead 	bl	800fd3c <__multiply>
 800cfe2:	900e      	str	r0, [sp, #56]	@ 0x38
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	f43f ae8a 	beq.w	800ccfe <_strtod_l+0x43e>
 800cfea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfec:	9805      	ldr	r0, [sp, #20]
 800cfee:	f002 fd91 	bl	800fb14 <_Bfree>
 800cff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cff4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cff6:	2d00      	cmp	r5, #0
 800cff8:	dc1d      	bgt.n	800d036 <_strtod_l+0x776>
 800cffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	dd23      	ble.n	800d048 <_strtod_l+0x788>
 800d000:	4649      	mov	r1, r9
 800d002:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d004:	9805      	ldr	r0, [sp, #20]
 800d006:	f002 ff43 	bl	800fe90 <__pow5mult>
 800d00a:	4681      	mov	r9, r0
 800d00c:	b9e0      	cbnz	r0, 800d048 <_strtod_l+0x788>
 800d00e:	f04f 0900 	mov.w	r9, #0
 800d012:	e674      	b.n	800ccfe <_strtod_l+0x43e>
 800d014:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d018:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d01c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d020:	35e2      	adds	r5, #226	@ 0xe2
 800d022:	fa01 f305 	lsl.w	r3, r1, r5
 800d026:	9310      	str	r3, [sp, #64]	@ 0x40
 800d028:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d02a:	e7ba      	b.n	800cfa2 <_strtod_l+0x6e2>
 800d02c:	2300      	movs	r3, #0
 800d02e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d030:	2301      	movs	r3, #1
 800d032:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d034:	e7b5      	b.n	800cfa2 <_strtod_l+0x6e2>
 800d036:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d038:	9805      	ldr	r0, [sp, #20]
 800d03a:	462a      	mov	r2, r5
 800d03c:	f002 ff82 	bl	800ff44 <__lshift>
 800d040:	901a      	str	r0, [sp, #104]	@ 0x68
 800d042:	2800      	cmp	r0, #0
 800d044:	d1d9      	bne.n	800cffa <_strtod_l+0x73a>
 800d046:	e65a      	b.n	800ccfe <_strtod_l+0x43e>
 800d048:	2e00      	cmp	r6, #0
 800d04a:	dd07      	ble.n	800d05c <_strtod_l+0x79c>
 800d04c:	4649      	mov	r1, r9
 800d04e:	9805      	ldr	r0, [sp, #20]
 800d050:	4632      	mov	r2, r6
 800d052:	f002 ff77 	bl	800ff44 <__lshift>
 800d056:	4681      	mov	r9, r0
 800d058:	2800      	cmp	r0, #0
 800d05a:	d0d8      	beq.n	800d00e <_strtod_l+0x74e>
 800d05c:	2f00      	cmp	r7, #0
 800d05e:	dd08      	ble.n	800d072 <_strtod_l+0x7b2>
 800d060:	4641      	mov	r1, r8
 800d062:	9805      	ldr	r0, [sp, #20]
 800d064:	463a      	mov	r2, r7
 800d066:	f002 ff6d 	bl	800ff44 <__lshift>
 800d06a:	4680      	mov	r8, r0
 800d06c:	2800      	cmp	r0, #0
 800d06e:	f43f ae46 	beq.w	800ccfe <_strtod_l+0x43e>
 800d072:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d074:	9805      	ldr	r0, [sp, #20]
 800d076:	464a      	mov	r2, r9
 800d078:	f002 ffec 	bl	8010054 <__mdiff>
 800d07c:	4604      	mov	r4, r0
 800d07e:	2800      	cmp	r0, #0
 800d080:	f43f ae3d 	beq.w	800ccfe <_strtod_l+0x43e>
 800d084:	68c3      	ldr	r3, [r0, #12]
 800d086:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d088:	2300      	movs	r3, #0
 800d08a:	60c3      	str	r3, [r0, #12]
 800d08c:	4641      	mov	r1, r8
 800d08e:	f002 ffc5 	bl	801001c <__mcmp>
 800d092:	2800      	cmp	r0, #0
 800d094:	da46      	bge.n	800d124 <_strtod_l+0x864>
 800d096:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d098:	ea53 030a 	orrs.w	r3, r3, sl
 800d09c:	d16c      	bne.n	800d178 <_strtod_l+0x8b8>
 800d09e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d168      	bne.n	800d178 <_strtod_l+0x8b8>
 800d0a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0aa:	0d1b      	lsrs	r3, r3, #20
 800d0ac:	051b      	lsls	r3, r3, #20
 800d0ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d0b2:	d961      	bls.n	800d178 <_strtod_l+0x8b8>
 800d0b4:	6963      	ldr	r3, [r4, #20]
 800d0b6:	b913      	cbnz	r3, 800d0be <_strtod_l+0x7fe>
 800d0b8:	6923      	ldr	r3, [r4, #16]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	dd5c      	ble.n	800d178 <_strtod_l+0x8b8>
 800d0be:	4621      	mov	r1, r4
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	9805      	ldr	r0, [sp, #20]
 800d0c4:	f002 ff3e 	bl	800ff44 <__lshift>
 800d0c8:	4641      	mov	r1, r8
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	f002 ffa6 	bl	801001c <__mcmp>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	dd51      	ble.n	800d178 <_strtod_l+0x8b8>
 800d0d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0d8:	9a08      	ldr	r2, [sp, #32]
 800d0da:	0d1b      	lsrs	r3, r3, #20
 800d0dc:	051b      	lsls	r3, r3, #20
 800d0de:	2a00      	cmp	r2, #0
 800d0e0:	d06b      	beq.n	800d1ba <_strtod_l+0x8fa>
 800d0e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d0e6:	d868      	bhi.n	800d1ba <_strtod_l+0x8fa>
 800d0e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d0ec:	f67f ae9d 	bls.w	800ce2a <_strtod_l+0x56a>
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d11c <_strtod_l+0x85c>)
 800d0f2:	4650      	mov	r0, sl
 800d0f4:	4659      	mov	r1, fp
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f7f3 faa6 	bl	8000648 <__aeabi_dmul>
 800d0fc:	4b08      	ldr	r3, [pc, #32]	@ (800d120 <_strtod_l+0x860>)
 800d0fe:	400b      	ands	r3, r1
 800d100:	4682      	mov	sl, r0
 800d102:	468b      	mov	fp, r1
 800d104:	2b00      	cmp	r3, #0
 800d106:	f47f ae05 	bne.w	800cd14 <_strtod_l+0x454>
 800d10a:	9a05      	ldr	r2, [sp, #20]
 800d10c:	2322      	movs	r3, #34	@ 0x22
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	e600      	b.n	800cd14 <_strtod_l+0x454>
 800d112:	bf00      	nop
 800d114:	08010fd8 	.word	0x08010fd8
 800d118:	fffffc02 	.word	0xfffffc02
 800d11c:	39500000 	.word	0x39500000
 800d120:	7ff00000 	.word	0x7ff00000
 800d124:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d128:	d165      	bne.n	800d1f6 <_strtod_l+0x936>
 800d12a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d12c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d130:	b35a      	cbz	r2, 800d18a <_strtod_l+0x8ca>
 800d132:	4a9f      	ldr	r2, [pc, #636]	@ (800d3b0 <_strtod_l+0xaf0>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d12b      	bne.n	800d190 <_strtod_l+0x8d0>
 800d138:	9b08      	ldr	r3, [sp, #32]
 800d13a:	4651      	mov	r1, sl
 800d13c:	b303      	cbz	r3, 800d180 <_strtod_l+0x8c0>
 800d13e:	4b9d      	ldr	r3, [pc, #628]	@ (800d3b4 <_strtod_l+0xaf4>)
 800d140:	465a      	mov	r2, fp
 800d142:	4013      	ands	r3, r2
 800d144:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d148:	f04f 32ff 	mov.w	r2, #4294967295
 800d14c:	d81b      	bhi.n	800d186 <_strtod_l+0x8c6>
 800d14e:	0d1b      	lsrs	r3, r3, #20
 800d150:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d154:	fa02 f303 	lsl.w	r3, r2, r3
 800d158:	4299      	cmp	r1, r3
 800d15a:	d119      	bne.n	800d190 <_strtod_l+0x8d0>
 800d15c:	4b96      	ldr	r3, [pc, #600]	@ (800d3b8 <_strtod_l+0xaf8>)
 800d15e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d160:	429a      	cmp	r2, r3
 800d162:	d102      	bne.n	800d16a <_strtod_l+0x8aa>
 800d164:	3101      	adds	r1, #1
 800d166:	f43f adca 	beq.w	800ccfe <_strtod_l+0x43e>
 800d16a:	4b92      	ldr	r3, [pc, #584]	@ (800d3b4 <_strtod_l+0xaf4>)
 800d16c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d16e:	401a      	ands	r2, r3
 800d170:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d174:	f04f 0a00 	mov.w	sl, #0
 800d178:	9b08      	ldr	r3, [sp, #32]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d1b8      	bne.n	800d0f0 <_strtod_l+0x830>
 800d17e:	e5c9      	b.n	800cd14 <_strtod_l+0x454>
 800d180:	f04f 33ff 	mov.w	r3, #4294967295
 800d184:	e7e8      	b.n	800d158 <_strtod_l+0x898>
 800d186:	4613      	mov	r3, r2
 800d188:	e7e6      	b.n	800d158 <_strtod_l+0x898>
 800d18a:	ea53 030a 	orrs.w	r3, r3, sl
 800d18e:	d0a1      	beq.n	800d0d4 <_strtod_l+0x814>
 800d190:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d192:	b1db      	cbz	r3, 800d1cc <_strtod_l+0x90c>
 800d194:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d196:	4213      	tst	r3, r2
 800d198:	d0ee      	beq.n	800d178 <_strtod_l+0x8b8>
 800d19a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d19c:	9a08      	ldr	r2, [sp, #32]
 800d19e:	4650      	mov	r0, sl
 800d1a0:	4659      	mov	r1, fp
 800d1a2:	b1bb      	cbz	r3, 800d1d4 <_strtod_l+0x914>
 800d1a4:	f7ff fb6e 	bl	800c884 <sulp>
 800d1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1ac:	ec53 2b10 	vmov	r2, r3, d0
 800d1b0:	f7f3 f894 	bl	80002dc <__adddf3>
 800d1b4:	4682      	mov	sl, r0
 800d1b6:	468b      	mov	fp, r1
 800d1b8:	e7de      	b.n	800d178 <_strtod_l+0x8b8>
 800d1ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d1be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d1c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d1c6:	f04f 3aff 	mov.w	sl, #4294967295
 800d1ca:	e7d5      	b.n	800d178 <_strtod_l+0x8b8>
 800d1cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d1ce:	ea13 0f0a 	tst.w	r3, sl
 800d1d2:	e7e1      	b.n	800d198 <_strtod_l+0x8d8>
 800d1d4:	f7ff fb56 	bl	800c884 <sulp>
 800d1d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1dc:	ec53 2b10 	vmov	r2, r3, d0
 800d1e0:	f7f3 f87a 	bl	80002d8 <__aeabi_dsub>
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4682      	mov	sl, r0
 800d1ea:	468b      	mov	fp, r1
 800d1ec:	f7f3 fc94 	bl	8000b18 <__aeabi_dcmpeq>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d0c1      	beq.n	800d178 <_strtod_l+0x8b8>
 800d1f4:	e619      	b.n	800ce2a <_strtod_l+0x56a>
 800d1f6:	4641      	mov	r1, r8
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f003 f887 	bl	801030c <__ratio>
 800d1fe:	ec57 6b10 	vmov	r6, r7, d0
 800d202:	2200      	movs	r2, #0
 800d204:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d208:	4630      	mov	r0, r6
 800d20a:	4639      	mov	r1, r7
 800d20c:	f7f3 fc98 	bl	8000b40 <__aeabi_dcmple>
 800d210:	2800      	cmp	r0, #0
 800d212:	d06f      	beq.n	800d2f4 <_strtod_l+0xa34>
 800d214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d216:	2b00      	cmp	r3, #0
 800d218:	d17a      	bne.n	800d310 <_strtod_l+0xa50>
 800d21a:	f1ba 0f00 	cmp.w	sl, #0
 800d21e:	d158      	bne.n	800d2d2 <_strtod_l+0xa12>
 800d220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d226:	2b00      	cmp	r3, #0
 800d228:	d15a      	bne.n	800d2e0 <_strtod_l+0xa20>
 800d22a:	4b64      	ldr	r3, [pc, #400]	@ (800d3bc <_strtod_l+0xafc>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	4630      	mov	r0, r6
 800d230:	4639      	mov	r1, r7
 800d232:	f7f3 fc7b 	bl	8000b2c <__aeabi_dcmplt>
 800d236:	2800      	cmp	r0, #0
 800d238:	d159      	bne.n	800d2ee <_strtod_l+0xa2e>
 800d23a:	4630      	mov	r0, r6
 800d23c:	4639      	mov	r1, r7
 800d23e:	4b60      	ldr	r3, [pc, #384]	@ (800d3c0 <_strtod_l+0xb00>)
 800d240:	2200      	movs	r2, #0
 800d242:	f7f3 fa01 	bl	8000648 <__aeabi_dmul>
 800d246:	4606      	mov	r6, r0
 800d248:	460f      	mov	r7, r1
 800d24a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d24e:	9606      	str	r6, [sp, #24]
 800d250:	9307      	str	r3, [sp, #28]
 800d252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d256:	4d57      	ldr	r5, [pc, #348]	@ (800d3b4 <_strtod_l+0xaf4>)
 800d258:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d25c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d25e:	401d      	ands	r5, r3
 800d260:	4b58      	ldr	r3, [pc, #352]	@ (800d3c4 <_strtod_l+0xb04>)
 800d262:	429d      	cmp	r5, r3
 800d264:	f040 80b2 	bne.w	800d3cc <_strtod_l+0xb0c>
 800d268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d26a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d26e:	ec4b ab10 	vmov	d0, sl, fp
 800d272:	f002 ff83 	bl	801017c <__ulp>
 800d276:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d27a:	ec51 0b10 	vmov	r0, r1, d0
 800d27e:	f7f3 f9e3 	bl	8000648 <__aeabi_dmul>
 800d282:	4652      	mov	r2, sl
 800d284:	465b      	mov	r3, fp
 800d286:	f7f3 f829 	bl	80002dc <__adddf3>
 800d28a:	460b      	mov	r3, r1
 800d28c:	4949      	ldr	r1, [pc, #292]	@ (800d3b4 <_strtod_l+0xaf4>)
 800d28e:	4a4e      	ldr	r2, [pc, #312]	@ (800d3c8 <_strtod_l+0xb08>)
 800d290:	4019      	ands	r1, r3
 800d292:	4291      	cmp	r1, r2
 800d294:	4682      	mov	sl, r0
 800d296:	d942      	bls.n	800d31e <_strtod_l+0xa5e>
 800d298:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d29a:	4b47      	ldr	r3, [pc, #284]	@ (800d3b8 <_strtod_l+0xaf8>)
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d103      	bne.n	800d2a8 <_strtod_l+0x9e8>
 800d2a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	f43f ad2b 	beq.w	800ccfe <_strtod_l+0x43e>
 800d2a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d3b8 <_strtod_l+0xaf8>
 800d2ac:	f04f 3aff 	mov.w	sl, #4294967295
 800d2b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2b2:	9805      	ldr	r0, [sp, #20]
 800d2b4:	f002 fc2e 	bl	800fb14 <_Bfree>
 800d2b8:	9805      	ldr	r0, [sp, #20]
 800d2ba:	4649      	mov	r1, r9
 800d2bc:	f002 fc2a 	bl	800fb14 <_Bfree>
 800d2c0:	9805      	ldr	r0, [sp, #20]
 800d2c2:	4641      	mov	r1, r8
 800d2c4:	f002 fc26 	bl	800fb14 <_Bfree>
 800d2c8:	9805      	ldr	r0, [sp, #20]
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	f002 fc22 	bl	800fb14 <_Bfree>
 800d2d0:	e618      	b.n	800cf04 <_strtod_l+0x644>
 800d2d2:	f1ba 0f01 	cmp.w	sl, #1
 800d2d6:	d103      	bne.n	800d2e0 <_strtod_l+0xa20>
 800d2d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f43f ada5 	beq.w	800ce2a <_strtod_l+0x56a>
 800d2e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d390 <_strtod_l+0xad0>
 800d2e4:	4f35      	ldr	r7, [pc, #212]	@ (800d3bc <_strtod_l+0xafc>)
 800d2e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d2ea:	2600      	movs	r6, #0
 800d2ec:	e7b1      	b.n	800d252 <_strtod_l+0x992>
 800d2ee:	4f34      	ldr	r7, [pc, #208]	@ (800d3c0 <_strtod_l+0xb00>)
 800d2f0:	2600      	movs	r6, #0
 800d2f2:	e7aa      	b.n	800d24a <_strtod_l+0x98a>
 800d2f4:	4b32      	ldr	r3, [pc, #200]	@ (800d3c0 <_strtod_l+0xb00>)
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	4639      	mov	r1, r7
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f7f3 f9a4 	bl	8000648 <__aeabi_dmul>
 800d300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d302:	4606      	mov	r6, r0
 800d304:	460f      	mov	r7, r1
 800d306:	2b00      	cmp	r3, #0
 800d308:	d09f      	beq.n	800d24a <_strtod_l+0x98a>
 800d30a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d30e:	e7a0      	b.n	800d252 <_strtod_l+0x992>
 800d310:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d398 <_strtod_l+0xad8>
 800d314:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d318:	ec57 6b17 	vmov	r6, r7, d7
 800d31c:	e799      	b.n	800d252 <_strtod_l+0x992>
 800d31e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d322:	9b08      	ldr	r3, [sp, #32]
 800d324:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1c1      	bne.n	800d2b0 <_strtod_l+0x9f0>
 800d32c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d330:	0d1b      	lsrs	r3, r3, #20
 800d332:	051b      	lsls	r3, r3, #20
 800d334:	429d      	cmp	r5, r3
 800d336:	d1bb      	bne.n	800d2b0 <_strtod_l+0x9f0>
 800d338:	4630      	mov	r0, r6
 800d33a:	4639      	mov	r1, r7
 800d33c:	f7f3 fce4 	bl	8000d08 <__aeabi_d2lz>
 800d340:	f7f3 f954 	bl	80005ec <__aeabi_l2d>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	4630      	mov	r0, r6
 800d34a:	4639      	mov	r1, r7
 800d34c:	f7f2 ffc4 	bl	80002d8 <__aeabi_dsub>
 800d350:	460b      	mov	r3, r1
 800d352:	4602      	mov	r2, r0
 800d354:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d358:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d35e:	ea46 060a 	orr.w	r6, r6, sl
 800d362:	431e      	orrs	r6, r3
 800d364:	d06f      	beq.n	800d446 <_strtod_l+0xb86>
 800d366:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3a0 <_strtod_l+0xae0>)
 800d368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36c:	f7f3 fbde 	bl	8000b2c <__aeabi_dcmplt>
 800d370:	2800      	cmp	r0, #0
 800d372:	f47f accf 	bne.w	800cd14 <_strtod_l+0x454>
 800d376:	a30c      	add	r3, pc, #48	@ (adr r3, 800d3a8 <_strtod_l+0xae8>)
 800d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d380:	f7f3 fbf2 	bl	8000b68 <__aeabi_dcmpgt>
 800d384:	2800      	cmp	r0, #0
 800d386:	d093      	beq.n	800d2b0 <_strtod_l+0x9f0>
 800d388:	e4c4      	b.n	800cd14 <_strtod_l+0x454>
 800d38a:	bf00      	nop
 800d38c:	f3af 8000 	nop.w
 800d390:	00000000 	.word	0x00000000
 800d394:	bff00000 	.word	0xbff00000
 800d398:	00000000 	.word	0x00000000
 800d39c:	3ff00000 	.word	0x3ff00000
 800d3a0:	94a03595 	.word	0x94a03595
 800d3a4:	3fdfffff 	.word	0x3fdfffff
 800d3a8:	35afe535 	.word	0x35afe535
 800d3ac:	3fe00000 	.word	0x3fe00000
 800d3b0:	000fffff 	.word	0x000fffff
 800d3b4:	7ff00000 	.word	0x7ff00000
 800d3b8:	7fefffff 	.word	0x7fefffff
 800d3bc:	3ff00000 	.word	0x3ff00000
 800d3c0:	3fe00000 	.word	0x3fe00000
 800d3c4:	7fe00000 	.word	0x7fe00000
 800d3c8:	7c9fffff 	.word	0x7c9fffff
 800d3cc:	9b08      	ldr	r3, [sp, #32]
 800d3ce:	b323      	cbz	r3, 800d41a <_strtod_l+0xb5a>
 800d3d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d3d4:	d821      	bhi.n	800d41a <_strtod_l+0xb5a>
 800d3d6:	a328      	add	r3, pc, #160	@ (adr r3, 800d478 <_strtod_l+0xbb8>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	4630      	mov	r0, r6
 800d3de:	4639      	mov	r1, r7
 800d3e0:	f7f3 fbae 	bl	8000b40 <__aeabi_dcmple>
 800d3e4:	b1a0      	cbz	r0, 800d410 <_strtod_l+0xb50>
 800d3e6:	4639      	mov	r1, r7
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	f7f3 fc05 	bl	8000bf8 <__aeabi_d2uiz>
 800d3ee:	2801      	cmp	r0, #1
 800d3f0:	bf38      	it	cc
 800d3f2:	2001      	movcc	r0, #1
 800d3f4:	f7f3 f8ae 	bl	8000554 <__aeabi_ui2d>
 800d3f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	460f      	mov	r7, r1
 800d3fe:	b9fb      	cbnz	r3, 800d440 <_strtod_l+0xb80>
 800d400:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d404:	9014      	str	r0, [sp, #80]	@ 0x50
 800d406:	9315      	str	r3, [sp, #84]	@ 0x54
 800d408:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d40c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d410:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d412:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d416:	1b5b      	subs	r3, r3, r5
 800d418:	9311      	str	r3, [sp, #68]	@ 0x44
 800d41a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d41e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d422:	f002 feab 	bl	801017c <__ulp>
 800d426:	4650      	mov	r0, sl
 800d428:	ec53 2b10 	vmov	r2, r3, d0
 800d42c:	4659      	mov	r1, fp
 800d42e:	f7f3 f90b 	bl	8000648 <__aeabi_dmul>
 800d432:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d436:	f7f2 ff51 	bl	80002dc <__adddf3>
 800d43a:	4682      	mov	sl, r0
 800d43c:	468b      	mov	fp, r1
 800d43e:	e770      	b.n	800d322 <_strtod_l+0xa62>
 800d440:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d444:	e7e0      	b.n	800d408 <_strtod_l+0xb48>
 800d446:	a30e      	add	r3, pc, #56	@ (adr r3, 800d480 <_strtod_l+0xbc0>)
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	f7f3 fb6e 	bl	8000b2c <__aeabi_dcmplt>
 800d450:	e798      	b.n	800d384 <_strtod_l+0xac4>
 800d452:	2300      	movs	r3, #0
 800d454:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d456:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d458:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d45a:	6013      	str	r3, [r2, #0]
 800d45c:	f7ff ba6d 	b.w	800c93a <_strtod_l+0x7a>
 800d460:	2a65      	cmp	r2, #101	@ 0x65
 800d462:	f43f ab66 	beq.w	800cb32 <_strtod_l+0x272>
 800d466:	2a45      	cmp	r2, #69	@ 0x45
 800d468:	f43f ab63 	beq.w	800cb32 <_strtod_l+0x272>
 800d46c:	2301      	movs	r3, #1
 800d46e:	f7ff bb9e 	b.w	800cbae <_strtod_l+0x2ee>
 800d472:	bf00      	nop
 800d474:	f3af 8000 	nop.w
 800d478:	ffc00000 	.word	0xffc00000
 800d47c:	41dfffff 	.word	0x41dfffff
 800d480:	94a03595 	.word	0x94a03595
 800d484:	3fcfffff 	.word	0x3fcfffff

0800d488 <_strtod_r>:
 800d488:	4b01      	ldr	r3, [pc, #4]	@ (800d490 <_strtod_r+0x8>)
 800d48a:	f7ff ba19 	b.w	800c8c0 <_strtod_l>
 800d48e:	bf00      	nop
 800d490:	20000038 	.word	0x20000038

0800d494 <_strtol_l.constprop.0>:
 800d494:	2b24      	cmp	r3, #36	@ 0x24
 800d496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d49a:	4686      	mov	lr, r0
 800d49c:	4690      	mov	r8, r2
 800d49e:	d801      	bhi.n	800d4a4 <_strtol_l.constprop.0+0x10>
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d106      	bne.n	800d4b2 <_strtol_l.constprop.0+0x1e>
 800d4a4:	f001 f8ac 	bl	800e600 <__errno>
 800d4a8:	2316      	movs	r3, #22
 800d4aa:	6003      	str	r3, [r0, #0]
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b2:	4834      	ldr	r0, [pc, #208]	@ (800d584 <_strtol_l.constprop.0+0xf0>)
 800d4b4:	460d      	mov	r5, r1
 800d4b6:	462a      	mov	r2, r5
 800d4b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4bc:	5d06      	ldrb	r6, [r0, r4]
 800d4be:	f016 0608 	ands.w	r6, r6, #8
 800d4c2:	d1f8      	bne.n	800d4b6 <_strtol_l.constprop.0+0x22>
 800d4c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d4c6:	d12d      	bne.n	800d524 <_strtol_l.constprop.0+0x90>
 800d4c8:	782c      	ldrb	r4, [r5, #0]
 800d4ca:	2601      	movs	r6, #1
 800d4cc:	1c95      	adds	r5, r2, #2
 800d4ce:	f033 0210 	bics.w	r2, r3, #16
 800d4d2:	d109      	bne.n	800d4e8 <_strtol_l.constprop.0+0x54>
 800d4d4:	2c30      	cmp	r4, #48	@ 0x30
 800d4d6:	d12a      	bne.n	800d52e <_strtol_l.constprop.0+0x9a>
 800d4d8:	782a      	ldrb	r2, [r5, #0]
 800d4da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4de:	2a58      	cmp	r2, #88	@ 0x58
 800d4e0:	d125      	bne.n	800d52e <_strtol_l.constprop.0+0x9a>
 800d4e2:	786c      	ldrb	r4, [r5, #1]
 800d4e4:	2310      	movs	r3, #16
 800d4e6:	3502      	adds	r5, #2
 800d4e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d4ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	fbbc f9f3 	udiv	r9, ip, r3
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d4fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d500:	2f09      	cmp	r7, #9
 800d502:	d81b      	bhi.n	800d53c <_strtol_l.constprop.0+0xa8>
 800d504:	463c      	mov	r4, r7
 800d506:	42a3      	cmp	r3, r4
 800d508:	dd27      	ble.n	800d55a <_strtol_l.constprop.0+0xc6>
 800d50a:	1c57      	adds	r7, r2, #1
 800d50c:	d007      	beq.n	800d51e <_strtol_l.constprop.0+0x8a>
 800d50e:	4581      	cmp	r9, r0
 800d510:	d320      	bcc.n	800d554 <_strtol_l.constprop.0+0xc0>
 800d512:	d101      	bne.n	800d518 <_strtol_l.constprop.0+0x84>
 800d514:	45a2      	cmp	sl, r4
 800d516:	db1d      	blt.n	800d554 <_strtol_l.constprop.0+0xc0>
 800d518:	fb00 4003 	mla	r0, r0, r3, r4
 800d51c:	2201      	movs	r2, #1
 800d51e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d522:	e7eb      	b.n	800d4fc <_strtol_l.constprop.0+0x68>
 800d524:	2c2b      	cmp	r4, #43	@ 0x2b
 800d526:	bf04      	itt	eq
 800d528:	782c      	ldrbeq	r4, [r5, #0]
 800d52a:	1c95      	addeq	r5, r2, #2
 800d52c:	e7cf      	b.n	800d4ce <_strtol_l.constprop.0+0x3a>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d1da      	bne.n	800d4e8 <_strtol_l.constprop.0+0x54>
 800d532:	2c30      	cmp	r4, #48	@ 0x30
 800d534:	bf0c      	ite	eq
 800d536:	2308      	moveq	r3, #8
 800d538:	230a      	movne	r3, #10
 800d53a:	e7d5      	b.n	800d4e8 <_strtol_l.constprop.0+0x54>
 800d53c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d540:	2f19      	cmp	r7, #25
 800d542:	d801      	bhi.n	800d548 <_strtol_l.constprop.0+0xb4>
 800d544:	3c37      	subs	r4, #55	@ 0x37
 800d546:	e7de      	b.n	800d506 <_strtol_l.constprop.0+0x72>
 800d548:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d54c:	2f19      	cmp	r7, #25
 800d54e:	d804      	bhi.n	800d55a <_strtol_l.constprop.0+0xc6>
 800d550:	3c57      	subs	r4, #87	@ 0x57
 800d552:	e7d8      	b.n	800d506 <_strtol_l.constprop.0+0x72>
 800d554:	f04f 32ff 	mov.w	r2, #4294967295
 800d558:	e7e1      	b.n	800d51e <_strtol_l.constprop.0+0x8a>
 800d55a:	1c53      	adds	r3, r2, #1
 800d55c:	d108      	bne.n	800d570 <_strtol_l.constprop.0+0xdc>
 800d55e:	2322      	movs	r3, #34	@ 0x22
 800d560:	f8ce 3000 	str.w	r3, [lr]
 800d564:	4660      	mov	r0, ip
 800d566:	f1b8 0f00 	cmp.w	r8, #0
 800d56a:	d0a0      	beq.n	800d4ae <_strtol_l.constprop.0+0x1a>
 800d56c:	1e69      	subs	r1, r5, #1
 800d56e:	e006      	b.n	800d57e <_strtol_l.constprop.0+0xea>
 800d570:	b106      	cbz	r6, 800d574 <_strtol_l.constprop.0+0xe0>
 800d572:	4240      	negs	r0, r0
 800d574:	f1b8 0f00 	cmp.w	r8, #0
 800d578:	d099      	beq.n	800d4ae <_strtol_l.constprop.0+0x1a>
 800d57a:	2a00      	cmp	r2, #0
 800d57c:	d1f6      	bne.n	800d56c <_strtol_l.constprop.0+0xd8>
 800d57e:	f8c8 1000 	str.w	r1, [r8]
 800d582:	e794      	b.n	800d4ae <_strtol_l.constprop.0+0x1a>
 800d584:	08011001 	.word	0x08011001

0800d588 <_strtol_r>:
 800d588:	f7ff bf84 	b.w	800d494 <_strtol_l.constprop.0>

0800d58c <__cvt>:
 800d58c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d590:	ec57 6b10 	vmov	r6, r7, d0
 800d594:	2f00      	cmp	r7, #0
 800d596:	460c      	mov	r4, r1
 800d598:	4619      	mov	r1, r3
 800d59a:	463b      	mov	r3, r7
 800d59c:	bfbb      	ittet	lt
 800d59e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d5a2:	461f      	movlt	r7, r3
 800d5a4:	2300      	movge	r3, #0
 800d5a6:	232d      	movlt	r3, #45	@ 0x2d
 800d5a8:	700b      	strb	r3, [r1, #0]
 800d5aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d5b0:	4691      	mov	r9, r2
 800d5b2:	f023 0820 	bic.w	r8, r3, #32
 800d5b6:	bfbc      	itt	lt
 800d5b8:	4632      	movlt	r2, r6
 800d5ba:	4616      	movlt	r6, r2
 800d5bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d5c0:	d005      	beq.n	800d5ce <__cvt+0x42>
 800d5c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d5c6:	d100      	bne.n	800d5ca <__cvt+0x3e>
 800d5c8:	3401      	adds	r4, #1
 800d5ca:	2102      	movs	r1, #2
 800d5cc:	e000      	b.n	800d5d0 <__cvt+0x44>
 800d5ce:	2103      	movs	r1, #3
 800d5d0:	ab03      	add	r3, sp, #12
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	ab02      	add	r3, sp, #8
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	ec47 6b10 	vmov	d0, r6, r7
 800d5dc:	4653      	mov	r3, sl
 800d5de:	4622      	mov	r2, r4
 800d5e0:	f001 f8fe 	bl	800e7e0 <_dtoa_r>
 800d5e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	d119      	bne.n	800d620 <__cvt+0x94>
 800d5ec:	f019 0f01 	tst.w	r9, #1
 800d5f0:	d00e      	beq.n	800d610 <__cvt+0x84>
 800d5f2:	eb00 0904 	add.w	r9, r0, r4
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	4639      	mov	r1, r7
 800d5fe:	f7f3 fa8b 	bl	8000b18 <__aeabi_dcmpeq>
 800d602:	b108      	cbz	r0, 800d608 <__cvt+0x7c>
 800d604:	f8cd 900c 	str.w	r9, [sp, #12]
 800d608:	2230      	movs	r2, #48	@ 0x30
 800d60a:	9b03      	ldr	r3, [sp, #12]
 800d60c:	454b      	cmp	r3, r9
 800d60e:	d31e      	bcc.n	800d64e <__cvt+0xc2>
 800d610:	9b03      	ldr	r3, [sp, #12]
 800d612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d614:	1b5b      	subs	r3, r3, r5
 800d616:	4628      	mov	r0, r5
 800d618:	6013      	str	r3, [r2, #0]
 800d61a:	b004      	add	sp, #16
 800d61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d620:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d624:	eb00 0904 	add.w	r9, r0, r4
 800d628:	d1e5      	bne.n	800d5f6 <__cvt+0x6a>
 800d62a:	7803      	ldrb	r3, [r0, #0]
 800d62c:	2b30      	cmp	r3, #48	@ 0x30
 800d62e:	d10a      	bne.n	800d646 <__cvt+0xba>
 800d630:	2200      	movs	r2, #0
 800d632:	2300      	movs	r3, #0
 800d634:	4630      	mov	r0, r6
 800d636:	4639      	mov	r1, r7
 800d638:	f7f3 fa6e 	bl	8000b18 <__aeabi_dcmpeq>
 800d63c:	b918      	cbnz	r0, 800d646 <__cvt+0xba>
 800d63e:	f1c4 0401 	rsb	r4, r4, #1
 800d642:	f8ca 4000 	str.w	r4, [sl]
 800d646:	f8da 3000 	ldr.w	r3, [sl]
 800d64a:	4499      	add	r9, r3
 800d64c:	e7d3      	b.n	800d5f6 <__cvt+0x6a>
 800d64e:	1c59      	adds	r1, r3, #1
 800d650:	9103      	str	r1, [sp, #12]
 800d652:	701a      	strb	r2, [r3, #0]
 800d654:	e7d9      	b.n	800d60a <__cvt+0x7e>

0800d656 <__exponent>:
 800d656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d658:	2900      	cmp	r1, #0
 800d65a:	bfba      	itte	lt
 800d65c:	4249      	neglt	r1, r1
 800d65e:	232d      	movlt	r3, #45	@ 0x2d
 800d660:	232b      	movge	r3, #43	@ 0x2b
 800d662:	2909      	cmp	r1, #9
 800d664:	7002      	strb	r2, [r0, #0]
 800d666:	7043      	strb	r3, [r0, #1]
 800d668:	dd29      	ble.n	800d6be <__exponent+0x68>
 800d66a:	f10d 0307 	add.w	r3, sp, #7
 800d66e:	461d      	mov	r5, r3
 800d670:	270a      	movs	r7, #10
 800d672:	461a      	mov	r2, r3
 800d674:	fbb1 f6f7 	udiv	r6, r1, r7
 800d678:	fb07 1416 	mls	r4, r7, r6, r1
 800d67c:	3430      	adds	r4, #48	@ 0x30
 800d67e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d682:	460c      	mov	r4, r1
 800d684:	2c63      	cmp	r4, #99	@ 0x63
 800d686:	f103 33ff 	add.w	r3, r3, #4294967295
 800d68a:	4631      	mov	r1, r6
 800d68c:	dcf1      	bgt.n	800d672 <__exponent+0x1c>
 800d68e:	3130      	adds	r1, #48	@ 0x30
 800d690:	1e94      	subs	r4, r2, #2
 800d692:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d696:	1c41      	adds	r1, r0, #1
 800d698:	4623      	mov	r3, r4
 800d69a:	42ab      	cmp	r3, r5
 800d69c:	d30a      	bcc.n	800d6b4 <__exponent+0x5e>
 800d69e:	f10d 0309 	add.w	r3, sp, #9
 800d6a2:	1a9b      	subs	r3, r3, r2
 800d6a4:	42ac      	cmp	r4, r5
 800d6a6:	bf88      	it	hi
 800d6a8:	2300      	movhi	r3, #0
 800d6aa:	3302      	adds	r3, #2
 800d6ac:	4403      	add	r3, r0
 800d6ae:	1a18      	subs	r0, r3, r0
 800d6b0:	b003      	add	sp, #12
 800d6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d6b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d6bc:	e7ed      	b.n	800d69a <__exponent+0x44>
 800d6be:	2330      	movs	r3, #48	@ 0x30
 800d6c0:	3130      	adds	r1, #48	@ 0x30
 800d6c2:	7083      	strb	r3, [r0, #2]
 800d6c4:	70c1      	strb	r1, [r0, #3]
 800d6c6:	1d03      	adds	r3, r0, #4
 800d6c8:	e7f1      	b.n	800d6ae <__exponent+0x58>
	...

0800d6cc <_printf_float>:
 800d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	b08d      	sub	sp, #52	@ 0x34
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d6d8:	4616      	mov	r6, r2
 800d6da:	461f      	mov	r7, r3
 800d6dc:	4605      	mov	r5, r0
 800d6de:	f000 ff35 	bl	800e54c <_localeconv_r>
 800d6e2:	6803      	ldr	r3, [r0, #0]
 800d6e4:	9304      	str	r3, [sp, #16]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7f2 fdea 	bl	80002c0 <strlen>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d6f4:	9005      	str	r0, [sp, #20]
 800d6f6:	3307      	adds	r3, #7
 800d6f8:	f023 0307 	bic.w	r3, r3, #7
 800d6fc:	f103 0208 	add.w	r2, r3, #8
 800d700:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d704:	f8d4 b000 	ldr.w	fp, [r4]
 800d708:	f8c8 2000 	str.w	r2, [r8]
 800d70c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d710:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d714:	9307      	str	r3, [sp, #28]
 800d716:	f8cd 8018 	str.w	r8, [sp, #24]
 800d71a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d71e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d722:	4b9c      	ldr	r3, [pc, #624]	@ (800d994 <_printf_float+0x2c8>)
 800d724:	f04f 32ff 	mov.w	r2, #4294967295
 800d728:	f7f3 fa28 	bl	8000b7c <__aeabi_dcmpun>
 800d72c:	bb70      	cbnz	r0, 800d78c <_printf_float+0xc0>
 800d72e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d732:	4b98      	ldr	r3, [pc, #608]	@ (800d994 <_printf_float+0x2c8>)
 800d734:	f04f 32ff 	mov.w	r2, #4294967295
 800d738:	f7f3 fa02 	bl	8000b40 <__aeabi_dcmple>
 800d73c:	bb30      	cbnz	r0, 800d78c <_printf_float+0xc0>
 800d73e:	2200      	movs	r2, #0
 800d740:	2300      	movs	r3, #0
 800d742:	4640      	mov	r0, r8
 800d744:	4649      	mov	r1, r9
 800d746:	f7f3 f9f1 	bl	8000b2c <__aeabi_dcmplt>
 800d74a:	b110      	cbz	r0, 800d752 <_printf_float+0x86>
 800d74c:	232d      	movs	r3, #45	@ 0x2d
 800d74e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d752:	4a91      	ldr	r2, [pc, #580]	@ (800d998 <_printf_float+0x2cc>)
 800d754:	4b91      	ldr	r3, [pc, #580]	@ (800d99c <_printf_float+0x2d0>)
 800d756:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d75a:	bf94      	ite	ls
 800d75c:	4690      	movls	r8, r2
 800d75e:	4698      	movhi	r8, r3
 800d760:	2303      	movs	r3, #3
 800d762:	6123      	str	r3, [r4, #16]
 800d764:	f02b 0304 	bic.w	r3, fp, #4
 800d768:	6023      	str	r3, [r4, #0]
 800d76a:	f04f 0900 	mov.w	r9, #0
 800d76e:	9700      	str	r7, [sp, #0]
 800d770:	4633      	mov	r3, r6
 800d772:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d774:	4621      	mov	r1, r4
 800d776:	4628      	mov	r0, r5
 800d778:	f000 f9d2 	bl	800db20 <_printf_common>
 800d77c:	3001      	adds	r0, #1
 800d77e:	f040 808d 	bne.w	800d89c <_printf_float+0x1d0>
 800d782:	f04f 30ff 	mov.w	r0, #4294967295
 800d786:	b00d      	add	sp, #52	@ 0x34
 800d788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78c:	4642      	mov	r2, r8
 800d78e:	464b      	mov	r3, r9
 800d790:	4640      	mov	r0, r8
 800d792:	4649      	mov	r1, r9
 800d794:	f7f3 f9f2 	bl	8000b7c <__aeabi_dcmpun>
 800d798:	b140      	cbz	r0, 800d7ac <_printf_float+0xe0>
 800d79a:	464b      	mov	r3, r9
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	bfbc      	itt	lt
 800d7a0:	232d      	movlt	r3, #45	@ 0x2d
 800d7a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d7a6:	4a7e      	ldr	r2, [pc, #504]	@ (800d9a0 <_printf_float+0x2d4>)
 800d7a8:	4b7e      	ldr	r3, [pc, #504]	@ (800d9a4 <_printf_float+0x2d8>)
 800d7aa:	e7d4      	b.n	800d756 <_printf_float+0x8a>
 800d7ac:	6863      	ldr	r3, [r4, #4]
 800d7ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d7b2:	9206      	str	r2, [sp, #24]
 800d7b4:	1c5a      	adds	r2, r3, #1
 800d7b6:	d13b      	bne.n	800d830 <_printf_float+0x164>
 800d7b8:	2306      	movs	r3, #6
 800d7ba:	6063      	str	r3, [r4, #4]
 800d7bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	6022      	str	r2, [r4, #0]
 800d7c4:	9303      	str	r3, [sp, #12]
 800d7c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d7c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d7cc:	ab09      	add	r3, sp, #36	@ 0x24
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	6861      	ldr	r1, [r4, #4]
 800d7d2:	ec49 8b10 	vmov	d0, r8, r9
 800d7d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f7ff fed6 	bl	800d58c <__cvt>
 800d7e0:	9b06      	ldr	r3, [sp, #24]
 800d7e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d7e4:	2b47      	cmp	r3, #71	@ 0x47
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	d129      	bne.n	800d83e <_printf_float+0x172>
 800d7ea:	1cc8      	adds	r0, r1, #3
 800d7ec:	db02      	blt.n	800d7f4 <_printf_float+0x128>
 800d7ee:	6863      	ldr	r3, [r4, #4]
 800d7f0:	4299      	cmp	r1, r3
 800d7f2:	dd41      	ble.n	800d878 <_printf_float+0x1ac>
 800d7f4:	f1aa 0a02 	sub.w	sl, sl, #2
 800d7f8:	fa5f fa8a 	uxtb.w	sl, sl
 800d7fc:	3901      	subs	r1, #1
 800d7fe:	4652      	mov	r2, sl
 800d800:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d804:	9109      	str	r1, [sp, #36]	@ 0x24
 800d806:	f7ff ff26 	bl	800d656 <__exponent>
 800d80a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d80c:	1813      	adds	r3, r2, r0
 800d80e:	2a01      	cmp	r2, #1
 800d810:	4681      	mov	r9, r0
 800d812:	6123      	str	r3, [r4, #16]
 800d814:	dc02      	bgt.n	800d81c <_printf_float+0x150>
 800d816:	6822      	ldr	r2, [r4, #0]
 800d818:	07d2      	lsls	r2, r2, #31
 800d81a:	d501      	bpl.n	800d820 <_printf_float+0x154>
 800d81c:	3301      	adds	r3, #1
 800d81e:	6123      	str	r3, [r4, #16]
 800d820:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0a2      	beq.n	800d76e <_printf_float+0xa2>
 800d828:	232d      	movs	r3, #45	@ 0x2d
 800d82a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d82e:	e79e      	b.n	800d76e <_printf_float+0xa2>
 800d830:	9a06      	ldr	r2, [sp, #24]
 800d832:	2a47      	cmp	r2, #71	@ 0x47
 800d834:	d1c2      	bne.n	800d7bc <_printf_float+0xf0>
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1c0      	bne.n	800d7bc <_printf_float+0xf0>
 800d83a:	2301      	movs	r3, #1
 800d83c:	e7bd      	b.n	800d7ba <_printf_float+0xee>
 800d83e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d842:	d9db      	bls.n	800d7fc <_printf_float+0x130>
 800d844:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d848:	d118      	bne.n	800d87c <_printf_float+0x1b0>
 800d84a:	2900      	cmp	r1, #0
 800d84c:	6863      	ldr	r3, [r4, #4]
 800d84e:	dd0b      	ble.n	800d868 <_printf_float+0x19c>
 800d850:	6121      	str	r1, [r4, #16]
 800d852:	b913      	cbnz	r3, 800d85a <_printf_float+0x18e>
 800d854:	6822      	ldr	r2, [r4, #0]
 800d856:	07d0      	lsls	r0, r2, #31
 800d858:	d502      	bpl.n	800d860 <_printf_float+0x194>
 800d85a:	3301      	adds	r3, #1
 800d85c:	440b      	add	r3, r1
 800d85e:	6123      	str	r3, [r4, #16]
 800d860:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d862:	f04f 0900 	mov.w	r9, #0
 800d866:	e7db      	b.n	800d820 <_printf_float+0x154>
 800d868:	b913      	cbnz	r3, 800d870 <_printf_float+0x1a4>
 800d86a:	6822      	ldr	r2, [r4, #0]
 800d86c:	07d2      	lsls	r2, r2, #31
 800d86e:	d501      	bpl.n	800d874 <_printf_float+0x1a8>
 800d870:	3302      	adds	r3, #2
 800d872:	e7f4      	b.n	800d85e <_printf_float+0x192>
 800d874:	2301      	movs	r3, #1
 800d876:	e7f2      	b.n	800d85e <_printf_float+0x192>
 800d878:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d87c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d87e:	4299      	cmp	r1, r3
 800d880:	db05      	blt.n	800d88e <_printf_float+0x1c2>
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	6121      	str	r1, [r4, #16]
 800d886:	07d8      	lsls	r0, r3, #31
 800d888:	d5ea      	bpl.n	800d860 <_printf_float+0x194>
 800d88a:	1c4b      	adds	r3, r1, #1
 800d88c:	e7e7      	b.n	800d85e <_printf_float+0x192>
 800d88e:	2900      	cmp	r1, #0
 800d890:	bfd4      	ite	le
 800d892:	f1c1 0202 	rsble	r2, r1, #2
 800d896:	2201      	movgt	r2, #1
 800d898:	4413      	add	r3, r2
 800d89a:	e7e0      	b.n	800d85e <_printf_float+0x192>
 800d89c:	6823      	ldr	r3, [r4, #0]
 800d89e:	055a      	lsls	r2, r3, #21
 800d8a0:	d407      	bmi.n	800d8b2 <_printf_float+0x1e6>
 800d8a2:	6923      	ldr	r3, [r4, #16]
 800d8a4:	4642      	mov	r2, r8
 800d8a6:	4631      	mov	r1, r6
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	47b8      	blx	r7
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d12b      	bne.n	800d908 <_printf_float+0x23c>
 800d8b0:	e767      	b.n	800d782 <_printf_float+0xb6>
 800d8b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d8b6:	f240 80dd 	bls.w	800da74 <_printf_float+0x3a8>
 800d8ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	f7f3 f929 	bl	8000b18 <__aeabi_dcmpeq>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d033      	beq.n	800d932 <_printf_float+0x266>
 800d8ca:	4a37      	ldr	r2, [pc, #220]	@ (800d9a8 <_printf_float+0x2dc>)
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	47b8      	blx	r7
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	f43f af54 	beq.w	800d782 <_printf_float+0xb6>
 800d8da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d8de:	4543      	cmp	r3, r8
 800d8e0:	db02      	blt.n	800d8e8 <_printf_float+0x21c>
 800d8e2:	6823      	ldr	r3, [r4, #0]
 800d8e4:	07d8      	lsls	r0, r3, #31
 800d8e6:	d50f      	bpl.n	800d908 <_printf_float+0x23c>
 800d8e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8ec:	4631      	mov	r1, r6
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	47b8      	blx	r7
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	f43f af45 	beq.w	800d782 <_printf_float+0xb6>
 800d8f8:	f04f 0900 	mov.w	r9, #0
 800d8fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d900:	f104 0a1a 	add.w	sl, r4, #26
 800d904:	45c8      	cmp	r8, r9
 800d906:	dc09      	bgt.n	800d91c <_printf_float+0x250>
 800d908:	6823      	ldr	r3, [r4, #0]
 800d90a:	079b      	lsls	r3, r3, #30
 800d90c:	f100 8103 	bmi.w	800db16 <_printf_float+0x44a>
 800d910:	68e0      	ldr	r0, [r4, #12]
 800d912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d914:	4298      	cmp	r0, r3
 800d916:	bfb8      	it	lt
 800d918:	4618      	movlt	r0, r3
 800d91a:	e734      	b.n	800d786 <_printf_float+0xba>
 800d91c:	2301      	movs	r3, #1
 800d91e:	4652      	mov	r2, sl
 800d920:	4631      	mov	r1, r6
 800d922:	4628      	mov	r0, r5
 800d924:	47b8      	blx	r7
 800d926:	3001      	adds	r0, #1
 800d928:	f43f af2b 	beq.w	800d782 <_printf_float+0xb6>
 800d92c:	f109 0901 	add.w	r9, r9, #1
 800d930:	e7e8      	b.n	800d904 <_printf_float+0x238>
 800d932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d934:	2b00      	cmp	r3, #0
 800d936:	dc39      	bgt.n	800d9ac <_printf_float+0x2e0>
 800d938:	4a1b      	ldr	r2, [pc, #108]	@ (800d9a8 <_printf_float+0x2dc>)
 800d93a:	2301      	movs	r3, #1
 800d93c:	4631      	mov	r1, r6
 800d93e:	4628      	mov	r0, r5
 800d940:	47b8      	blx	r7
 800d942:	3001      	adds	r0, #1
 800d944:	f43f af1d 	beq.w	800d782 <_printf_float+0xb6>
 800d948:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d94c:	ea59 0303 	orrs.w	r3, r9, r3
 800d950:	d102      	bne.n	800d958 <_printf_float+0x28c>
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	07d9      	lsls	r1, r3, #31
 800d956:	d5d7      	bpl.n	800d908 <_printf_float+0x23c>
 800d958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d95c:	4631      	mov	r1, r6
 800d95e:	4628      	mov	r0, r5
 800d960:	47b8      	blx	r7
 800d962:	3001      	adds	r0, #1
 800d964:	f43f af0d 	beq.w	800d782 <_printf_float+0xb6>
 800d968:	f04f 0a00 	mov.w	sl, #0
 800d96c:	f104 0b1a 	add.w	fp, r4, #26
 800d970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d972:	425b      	negs	r3, r3
 800d974:	4553      	cmp	r3, sl
 800d976:	dc01      	bgt.n	800d97c <_printf_float+0x2b0>
 800d978:	464b      	mov	r3, r9
 800d97a:	e793      	b.n	800d8a4 <_printf_float+0x1d8>
 800d97c:	2301      	movs	r3, #1
 800d97e:	465a      	mov	r2, fp
 800d980:	4631      	mov	r1, r6
 800d982:	4628      	mov	r0, r5
 800d984:	47b8      	blx	r7
 800d986:	3001      	adds	r0, #1
 800d988:	f43f aefb 	beq.w	800d782 <_printf_float+0xb6>
 800d98c:	f10a 0a01 	add.w	sl, sl, #1
 800d990:	e7ee      	b.n	800d970 <_printf_float+0x2a4>
 800d992:	bf00      	nop
 800d994:	7fefffff 	.word	0x7fefffff
 800d998:	08011101 	.word	0x08011101
 800d99c:	08011105 	.word	0x08011105
 800d9a0:	08011109 	.word	0x08011109
 800d9a4:	0801110d 	.word	0x0801110d
 800d9a8:	08011111 	.word	0x08011111
 800d9ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d9ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d9b2:	4553      	cmp	r3, sl
 800d9b4:	bfa8      	it	ge
 800d9b6:	4653      	movge	r3, sl
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	4699      	mov	r9, r3
 800d9bc:	dc36      	bgt.n	800da2c <_printf_float+0x360>
 800d9be:	f04f 0b00 	mov.w	fp, #0
 800d9c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9c6:	f104 021a 	add.w	r2, r4, #26
 800d9ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d9cc:	9306      	str	r3, [sp, #24]
 800d9ce:	eba3 0309 	sub.w	r3, r3, r9
 800d9d2:	455b      	cmp	r3, fp
 800d9d4:	dc31      	bgt.n	800da3a <_printf_float+0x36e>
 800d9d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9d8:	459a      	cmp	sl, r3
 800d9da:	dc3a      	bgt.n	800da52 <_printf_float+0x386>
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	07da      	lsls	r2, r3, #31
 800d9e0:	d437      	bmi.n	800da52 <_printf_float+0x386>
 800d9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9e4:	ebaa 0903 	sub.w	r9, sl, r3
 800d9e8:	9b06      	ldr	r3, [sp, #24]
 800d9ea:	ebaa 0303 	sub.w	r3, sl, r3
 800d9ee:	4599      	cmp	r9, r3
 800d9f0:	bfa8      	it	ge
 800d9f2:	4699      	movge	r9, r3
 800d9f4:	f1b9 0f00 	cmp.w	r9, #0
 800d9f8:	dc33      	bgt.n	800da62 <_printf_float+0x396>
 800d9fa:	f04f 0800 	mov.w	r8, #0
 800d9fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da02:	f104 0b1a 	add.w	fp, r4, #26
 800da06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da08:	ebaa 0303 	sub.w	r3, sl, r3
 800da0c:	eba3 0309 	sub.w	r3, r3, r9
 800da10:	4543      	cmp	r3, r8
 800da12:	f77f af79 	ble.w	800d908 <_printf_float+0x23c>
 800da16:	2301      	movs	r3, #1
 800da18:	465a      	mov	r2, fp
 800da1a:	4631      	mov	r1, r6
 800da1c:	4628      	mov	r0, r5
 800da1e:	47b8      	blx	r7
 800da20:	3001      	adds	r0, #1
 800da22:	f43f aeae 	beq.w	800d782 <_printf_float+0xb6>
 800da26:	f108 0801 	add.w	r8, r8, #1
 800da2a:	e7ec      	b.n	800da06 <_printf_float+0x33a>
 800da2c:	4642      	mov	r2, r8
 800da2e:	4631      	mov	r1, r6
 800da30:	4628      	mov	r0, r5
 800da32:	47b8      	blx	r7
 800da34:	3001      	adds	r0, #1
 800da36:	d1c2      	bne.n	800d9be <_printf_float+0x2f2>
 800da38:	e6a3      	b.n	800d782 <_printf_float+0xb6>
 800da3a:	2301      	movs	r3, #1
 800da3c:	4631      	mov	r1, r6
 800da3e:	4628      	mov	r0, r5
 800da40:	9206      	str	r2, [sp, #24]
 800da42:	47b8      	blx	r7
 800da44:	3001      	adds	r0, #1
 800da46:	f43f ae9c 	beq.w	800d782 <_printf_float+0xb6>
 800da4a:	9a06      	ldr	r2, [sp, #24]
 800da4c:	f10b 0b01 	add.w	fp, fp, #1
 800da50:	e7bb      	b.n	800d9ca <_printf_float+0x2fe>
 800da52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da56:	4631      	mov	r1, r6
 800da58:	4628      	mov	r0, r5
 800da5a:	47b8      	blx	r7
 800da5c:	3001      	adds	r0, #1
 800da5e:	d1c0      	bne.n	800d9e2 <_printf_float+0x316>
 800da60:	e68f      	b.n	800d782 <_printf_float+0xb6>
 800da62:	9a06      	ldr	r2, [sp, #24]
 800da64:	464b      	mov	r3, r9
 800da66:	4442      	add	r2, r8
 800da68:	4631      	mov	r1, r6
 800da6a:	4628      	mov	r0, r5
 800da6c:	47b8      	blx	r7
 800da6e:	3001      	adds	r0, #1
 800da70:	d1c3      	bne.n	800d9fa <_printf_float+0x32e>
 800da72:	e686      	b.n	800d782 <_printf_float+0xb6>
 800da74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800da78:	f1ba 0f01 	cmp.w	sl, #1
 800da7c:	dc01      	bgt.n	800da82 <_printf_float+0x3b6>
 800da7e:	07db      	lsls	r3, r3, #31
 800da80:	d536      	bpl.n	800daf0 <_printf_float+0x424>
 800da82:	2301      	movs	r3, #1
 800da84:	4642      	mov	r2, r8
 800da86:	4631      	mov	r1, r6
 800da88:	4628      	mov	r0, r5
 800da8a:	47b8      	blx	r7
 800da8c:	3001      	adds	r0, #1
 800da8e:	f43f ae78 	beq.w	800d782 <_printf_float+0xb6>
 800da92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da96:	4631      	mov	r1, r6
 800da98:	4628      	mov	r0, r5
 800da9a:	47b8      	blx	r7
 800da9c:	3001      	adds	r0, #1
 800da9e:	f43f ae70 	beq.w	800d782 <_printf_float+0xb6>
 800daa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800daa6:	2200      	movs	r2, #0
 800daa8:	2300      	movs	r3, #0
 800daaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800daae:	f7f3 f833 	bl	8000b18 <__aeabi_dcmpeq>
 800dab2:	b9c0      	cbnz	r0, 800dae6 <_printf_float+0x41a>
 800dab4:	4653      	mov	r3, sl
 800dab6:	f108 0201 	add.w	r2, r8, #1
 800daba:	4631      	mov	r1, r6
 800dabc:	4628      	mov	r0, r5
 800dabe:	47b8      	blx	r7
 800dac0:	3001      	adds	r0, #1
 800dac2:	d10c      	bne.n	800dade <_printf_float+0x412>
 800dac4:	e65d      	b.n	800d782 <_printf_float+0xb6>
 800dac6:	2301      	movs	r3, #1
 800dac8:	465a      	mov	r2, fp
 800daca:	4631      	mov	r1, r6
 800dacc:	4628      	mov	r0, r5
 800dace:	47b8      	blx	r7
 800dad0:	3001      	adds	r0, #1
 800dad2:	f43f ae56 	beq.w	800d782 <_printf_float+0xb6>
 800dad6:	f108 0801 	add.w	r8, r8, #1
 800dada:	45d0      	cmp	r8, sl
 800dadc:	dbf3      	blt.n	800dac6 <_printf_float+0x3fa>
 800dade:	464b      	mov	r3, r9
 800dae0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dae4:	e6df      	b.n	800d8a6 <_printf_float+0x1da>
 800dae6:	f04f 0800 	mov.w	r8, #0
 800daea:	f104 0b1a 	add.w	fp, r4, #26
 800daee:	e7f4      	b.n	800dada <_printf_float+0x40e>
 800daf0:	2301      	movs	r3, #1
 800daf2:	4642      	mov	r2, r8
 800daf4:	e7e1      	b.n	800daba <_printf_float+0x3ee>
 800daf6:	2301      	movs	r3, #1
 800daf8:	464a      	mov	r2, r9
 800dafa:	4631      	mov	r1, r6
 800dafc:	4628      	mov	r0, r5
 800dafe:	47b8      	blx	r7
 800db00:	3001      	adds	r0, #1
 800db02:	f43f ae3e 	beq.w	800d782 <_printf_float+0xb6>
 800db06:	f108 0801 	add.w	r8, r8, #1
 800db0a:	68e3      	ldr	r3, [r4, #12]
 800db0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db0e:	1a5b      	subs	r3, r3, r1
 800db10:	4543      	cmp	r3, r8
 800db12:	dcf0      	bgt.n	800daf6 <_printf_float+0x42a>
 800db14:	e6fc      	b.n	800d910 <_printf_float+0x244>
 800db16:	f04f 0800 	mov.w	r8, #0
 800db1a:	f104 0919 	add.w	r9, r4, #25
 800db1e:	e7f4      	b.n	800db0a <_printf_float+0x43e>

0800db20 <_printf_common>:
 800db20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db24:	4616      	mov	r6, r2
 800db26:	4698      	mov	r8, r3
 800db28:	688a      	ldr	r2, [r1, #8]
 800db2a:	690b      	ldr	r3, [r1, #16]
 800db2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db30:	4293      	cmp	r3, r2
 800db32:	bfb8      	it	lt
 800db34:	4613      	movlt	r3, r2
 800db36:	6033      	str	r3, [r6, #0]
 800db38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db3c:	4607      	mov	r7, r0
 800db3e:	460c      	mov	r4, r1
 800db40:	b10a      	cbz	r2, 800db46 <_printf_common+0x26>
 800db42:	3301      	adds	r3, #1
 800db44:	6033      	str	r3, [r6, #0]
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	0699      	lsls	r1, r3, #26
 800db4a:	bf42      	ittt	mi
 800db4c:	6833      	ldrmi	r3, [r6, #0]
 800db4e:	3302      	addmi	r3, #2
 800db50:	6033      	strmi	r3, [r6, #0]
 800db52:	6825      	ldr	r5, [r4, #0]
 800db54:	f015 0506 	ands.w	r5, r5, #6
 800db58:	d106      	bne.n	800db68 <_printf_common+0x48>
 800db5a:	f104 0a19 	add.w	sl, r4, #25
 800db5e:	68e3      	ldr	r3, [r4, #12]
 800db60:	6832      	ldr	r2, [r6, #0]
 800db62:	1a9b      	subs	r3, r3, r2
 800db64:	42ab      	cmp	r3, r5
 800db66:	dc26      	bgt.n	800dbb6 <_printf_common+0x96>
 800db68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db6c:	6822      	ldr	r2, [r4, #0]
 800db6e:	3b00      	subs	r3, #0
 800db70:	bf18      	it	ne
 800db72:	2301      	movne	r3, #1
 800db74:	0692      	lsls	r2, r2, #26
 800db76:	d42b      	bmi.n	800dbd0 <_printf_common+0xb0>
 800db78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db7c:	4641      	mov	r1, r8
 800db7e:	4638      	mov	r0, r7
 800db80:	47c8      	blx	r9
 800db82:	3001      	adds	r0, #1
 800db84:	d01e      	beq.n	800dbc4 <_printf_common+0xa4>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	6922      	ldr	r2, [r4, #16]
 800db8a:	f003 0306 	and.w	r3, r3, #6
 800db8e:	2b04      	cmp	r3, #4
 800db90:	bf02      	ittt	eq
 800db92:	68e5      	ldreq	r5, [r4, #12]
 800db94:	6833      	ldreq	r3, [r6, #0]
 800db96:	1aed      	subeq	r5, r5, r3
 800db98:	68a3      	ldr	r3, [r4, #8]
 800db9a:	bf0c      	ite	eq
 800db9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dba0:	2500      	movne	r5, #0
 800dba2:	4293      	cmp	r3, r2
 800dba4:	bfc4      	itt	gt
 800dba6:	1a9b      	subgt	r3, r3, r2
 800dba8:	18ed      	addgt	r5, r5, r3
 800dbaa:	2600      	movs	r6, #0
 800dbac:	341a      	adds	r4, #26
 800dbae:	42b5      	cmp	r5, r6
 800dbb0:	d11a      	bne.n	800dbe8 <_printf_common+0xc8>
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	e008      	b.n	800dbc8 <_printf_common+0xa8>
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	4652      	mov	r2, sl
 800dbba:	4641      	mov	r1, r8
 800dbbc:	4638      	mov	r0, r7
 800dbbe:	47c8      	blx	r9
 800dbc0:	3001      	adds	r0, #1
 800dbc2:	d103      	bne.n	800dbcc <_printf_common+0xac>
 800dbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbcc:	3501      	adds	r5, #1
 800dbce:	e7c6      	b.n	800db5e <_printf_common+0x3e>
 800dbd0:	18e1      	adds	r1, r4, r3
 800dbd2:	1c5a      	adds	r2, r3, #1
 800dbd4:	2030      	movs	r0, #48	@ 0x30
 800dbd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dbda:	4422      	add	r2, r4
 800dbdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dbe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dbe4:	3302      	adds	r3, #2
 800dbe6:	e7c7      	b.n	800db78 <_printf_common+0x58>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	4622      	mov	r2, r4
 800dbec:	4641      	mov	r1, r8
 800dbee:	4638      	mov	r0, r7
 800dbf0:	47c8      	blx	r9
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	d0e6      	beq.n	800dbc4 <_printf_common+0xa4>
 800dbf6:	3601      	adds	r6, #1
 800dbf8:	e7d9      	b.n	800dbae <_printf_common+0x8e>
	...

0800dbfc <_printf_i>:
 800dbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc00:	7e0f      	ldrb	r7, [r1, #24]
 800dc02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc04:	2f78      	cmp	r7, #120	@ 0x78
 800dc06:	4691      	mov	r9, r2
 800dc08:	4680      	mov	r8, r0
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	469a      	mov	sl, r3
 800dc0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc12:	d807      	bhi.n	800dc24 <_printf_i+0x28>
 800dc14:	2f62      	cmp	r7, #98	@ 0x62
 800dc16:	d80a      	bhi.n	800dc2e <_printf_i+0x32>
 800dc18:	2f00      	cmp	r7, #0
 800dc1a:	f000 80d2 	beq.w	800ddc2 <_printf_i+0x1c6>
 800dc1e:	2f58      	cmp	r7, #88	@ 0x58
 800dc20:	f000 80b9 	beq.w	800dd96 <_printf_i+0x19a>
 800dc24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc2c:	e03a      	b.n	800dca4 <_printf_i+0xa8>
 800dc2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc32:	2b15      	cmp	r3, #21
 800dc34:	d8f6      	bhi.n	800dc24 <_printf_i+0x28>
 800dc36:	a101      	add	r1, pc, #4	@ (adr r1, 800dc3c <_printf_i+0x40>)
 800dc38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc3c:	0800dc95 	.word	0x0800dc95
 800dc40:	0800dca9 	.word	0x0800dca9
 800dc44:	0800dc25 	.word	0x0800dc25
 800dc48:	0800dc25 	.word	0x0800dc25
 800dc4c:	0800dc25 	.word	0x0800dc25
 800dc50:	0800dc25 	.word	0x0800dc25
 800dc54:	0800dca9 	.word	0x0800dca9
 800dc58:	0800dc25 	.word	0x0800dc25
 800dc5c:	0800dc25 	.word	0x0800dc25
 800dc60:	0800dc25 	.word	0x0800dc25
 800dc64:	0800dc25 	.word	0x0800dc25
 800dc68:	0800dda9 	.word	0x0800dda9
 800dc6c:	0800dcd3 	.word	0x0800dcd3
 800dc70:	0800dd63 	.word	0x0800dd63
 800dc74:	0800dc25 	.word	0x0800dc25
 800dc78:	0800dc25 	.word	0x0800dc25
 800dc7c:	0800ddcb 	.word	0x0800ddcb
 800dc80:	0800dc25 	.word	0x0800dc25
 800dc84:	0800dcd3 	.word	0x0800dcd3
 800dc88:	0800dc25 	.word	0x0800dc25
 800dc8c:	0800dc25 	.word	0x0800dc25
 800dc90:	0800dd6b 	.word	0x0800dd6b
 800dc94:	6833      	ldr	r3, [r6, #0]
 800dc96:	1d1a      	adds	r2, r3, #4
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	6032      	str	r2, [r6, #0]
 800dc9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dca4:	2301      	movs	r3, #1
 800dca6:	e09d      	b.n	800dde4 <_printf_i+0x1e8>
 800dca8:	6833      	ldr	r3, [r6, #0]
 800dcaa:	6820      	ldr	r0, [r4, #0]
 800dcac:	1d19      	adds	r1, r3, #4
 800dcae:	6031      	str	r1, [r6, #0]
 800dcb0:	0606      	lsls	r6, r0, #24
 800dcb2:	d501      	bpl.n	800dcb8 <_printf_i+0xbc>
 800dcb4:	681d      	ldr	r5, [r3, #0]
 800dcb6:	e003      	b.n	800dcc0 <_printf_i+0xc4>
 800dcb8:	0645      	lsls	r5, r0, #25
 800dcba:	d5fb      	bpl.n	800dcb4 <_printf_i+0xb8>
 800dcbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dcc0:	2d00      	cmp	r5, #0
 800dcc2:	da03      	bge.n	800dccc <_printf_i+0xd0>
 800dcc4:	232d      	movs	r3, #45	@ 0x2d
 800dcc6:	426d      	negs	r5, r5
 800dcc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dccc:	4859      	ldr	r0, [pc, #356]	@ (800de34 <_printf_i+0x238>)
 800dcce:	230a      	movs	r3, #10
 800dcd0:	e011      	b.n	800dcf6 <_printf_i+0xfa>
 800dcd2:	6821      	ldr	r1, [r4, #0]
 800dcd4:	6833      	ldr	r3, [r6, #0]
 800dcd6:	0608      	lsls	r0, r1, #24
 800dcd8:	f853 5b04 	ldr.w	r5, [r3], #4
 800dcdc:	d402      	bmi.n	800dce4 <_printf_i+0xe8>
 800dcde:	0649      	lsls	r1, r1, #25
 800dce0:	bf48      	it	mi
 800dce2:	b2ad      	uxthmi	r5, r5
 800dce4:	2f6f      	cmp	r7, #111	@ 0x6f
 800dce6:	4853      	ldr	r0, [pc, #332]	@ (800de34 <_printf_i+0x238>)
 800dce8:	6033      	str	r3, [r6, #0]
 800dcea:	bf14      	ite	ne
 800dcec:	230a      	movne	r3, #10
 800dcee:	2308      	moveq	r3, #8
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dcf6:	6866      	ldr	r6, [r4, #4]
 800dcf8:	60a6      	str	r6, [r4, #8]
 800dcfa:	2e00      	cmp	r6, #0
 800dcfc:	bfa2      	ittt	ge
 800dcfe:	6821      	ldrge	r1, [r4, #0]
 800dd00:	f021 0104 	bicge.w	r1, r1, #4
 800dd04:	6021      	strge	r1, [r4, #0]
 800dd06:	b90d      	cbnz	r5, 800dd0c <_printf_i+0x110>
 800dd08:	2e00      	cmp	r6, #0
 800dd0a:	d04b      	beq.n	800dda4 <_printf_i+0x1a8>
 800dd0c:	4616      	mov	r6, r2
 800dd0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd12:	fb03 5711 	mls	r7, r3, r1, r5
 800dd16:	5dc7      	ldrb	r7, [r0, r7]
 800dd18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd1c:	462f      	mov	r7, r5
 800dd1e:	42bb      	cmp	r3, r7
 800dd20:	460d      	mov	r5, r1
 800dd22:	d9f4      	bls.n	800dd0e <_printf_i+0x112>
 800dd24:	2b08      	cmp	r3, #8
 800dd26:	d10b      	bne.n	800dd40 <_printf_i+0x144>
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	07df      	lsls	r7, r3, #31
 800dd2c:	d508      	bpl.n	800dd40 <_printf_i+0x144>
 800dd2e:	6923      	ldr	r3, [r4, #16]
 800dd30:	6861      	ldr	r1, [r4, #4]
 800dd32:	4299      	cmp	r1, r3
 800dd34:	bfde      	ittt	le
 800dd36:	2330      	movle	r3, #48	@ 0x30
 800dd38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd40:	1b92      	subs	r2, r2, r6
 800dd42:	6122      	str	r2, [r4, #16]
 800dd44:	f8cd a000 	str.w	sl, [sp]
 800dd48:	464b      	mov	r3, r9
 800dd4a:	aa03      	add	r2, sp, #12
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	4640      	mov	r0, r8
 800dd50:	f7ff fee6 	bl	800db20 <_printf_common>
 800dd54:	3001      	adds	r0, #1
 800dd56:	d14a      	bne.n	800ddee <_printf_i+0x1f2>
 800dd58:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5c:	b004      	add	sp, #16
 800dd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	f043 0320 	orr.w	r3, r3, #32
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	4833      	ldr	r0, [pc, #204]	@ (800de38 <_printf_i+0x23c>)
 800dd6c:	2778      	movs	r7, #120	@ 0x78
 800dd6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd72:	6823      	ldr	r3, [r4, #0]
 800dd74:	6831      	ldr	r1, [r6, #0]
 800dd76:	061f      	lsls	r7, r3, #24
 800dd78:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd7c:	d402      	bmi.n	800dd84 <_printf_i+0x188>
 800dd7e:	065f      	lsls	r7, r3, #25
 800dd80:	bf48      	it	mi
 800dd82:	b2ad      	uxthmi	r5, r5
 800dd84:	6031      	str	r1, [r6, #0]
 800dd86:	07d9      	lsls	r1, r3, #31
 800dd88:	bf44      	itt	mi
 800dd8a:	f043 0320 	orrmi.w	r3, r3, #32
 800dd8e:	6023      	strmi	r3, [r4, #0]
 800dd90:	b11d      	cbz	r5, 800dd9a <_printf_i+0x19e>
 800dd92:	2310      	movs	r3, #16
 800dd94:	e7ac      	b.n	800dcf0 <_printf_i+0xf4>
 800dd96:	4827      	ldr	r0, [pc, #156]	@ (800de34 <_printf_i+0x238>)
 800dd98:	e7e9      	b.n	800dd6e <_printf_i+0x172>
 800dd9a:	6823      	ldr	r3, [r4, #0]
 800dd9c:	f023 0320 	bic.w	r3, r3, #32
 800dda0:	6023      	str	r3, [r4, #0]
 800dda2:	e7f6      	b.n	800dd92 <_printf_i+0x196>
 800dda4:	4616      	mov	r6, r2
 800dda6:	e7bd      	b.n	800dd24 <_printf_i+0x128>
 800dda8:	6833      	ldr	r3, [r6, #0]
 800ddaa:	6825      	ldr	r5, [r4, #0]
 800ddac:	6961      	ldr	r1, [r4, #20]
 800ddae:	1d18      	adds	r0, r3, #4
 800ddb0:	6030      	str	r0, [r6, #0]
 800ddb2:	062e      	lsls	r6, r5, #24
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	d501      	bpl.n	800ddbc <_printf_i+0x1c0>
 800ddb8:	6019      	str	r1, [r3, #0]
 800ddba:	e002      	b.n	800ddc2 <_printf_i+0x1c6>
 800ddbc:	0668      	lsls	r0, r5, #25
 800ddbe:	d5fb      	bpl.n	800ddb8 <_printf_i+0x1bc>
 800ddc0:	8019      	strh	r1, [r3, #0]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	6123      	str	r3, [r4, #16]
 800ddc6:	4616      	mov	r6, r2
 800ddc8:	e7bc      	b.n	800dd44 <_printf_i+0x148>
 800ddca:	6833      	ldr	r3, [r6, #0]
 800ddcc:	1d1a      	adds	r2, r3, #4
 800ddce:	6032      	str	r2, [r6, #0]
 800ddd0:	681e      	ldr	r6, [r3, #0]
 800ddd2:	6862      	ldr	r2, [r4, #4]
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f7f2 fa22 	bl	8000220 <memchr>
 800dddc:	b108      	cbz	r0, 800dde2 <_printf_i+0x1e6>
 800ddde:	1b80      	subs	r0, r0, r6
 800dde0:	6060      	str	r0, [r4, #4]
 800dde2:	6863      	ldr	r3, [r4, #4]
 800dde4:	6123      	str	r3, [r4, #16]
 800dde6:	2300      	movs	r3, #0
 800dde8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddec:	e7aa      	b.n	800dd44 <_printf_i+0x148>
 800ddee:	6923      	ldr	r3, [r4, #16]
 800ddf0:	4632      	mov	r2, r6
 800ddf2:	4649      	mov	r1, r9
 800ddf4:	4640      	mov	r0, r8
 800ddf6:	47d0      	blx	sl
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	d0ad      	beq.n	800dd58 <_printf_i+0x15c>
 800ddfc:	6823      	ldr	r3, [r4, #0]
 800ddfe:	079b      	lsls	r3, r3, #30
 800de00:	d413      	bmi.n	800de2a <_printf_i+0x22e>
 800de02:	68e0      	ldr	r0, [r4, #12]
 800de04:	9b03      	ldr	r3, [sp, #12]
 800de06:	4298      	cmp	r0, r3
 800de08:	bfb8      	it	lt
 800de0a:	4618      	movlt	r0, r3
 800de0c:	e7a6      	b.n	800dd5c <_printf_i+0x160>
 800de0e:	2301      	movs	r3, #1
 800de10:	4632      	mov	r2, r6
 800de12:	4649      	mov	r1, r9
 800de14:	4640      	mov	r0, r8
 800de16:	47d0      	blx	sl
 800de18:	3001      	adds	r0, #1
 800de1a:	d09d      	beq.n	800dd58 <_printf_i+0x15c>
 800de1c:	3501      	adds	r5, #1
 800de1e:	68e3      	ldr	r3, [r4, #12]
 800de20:	9903      	ldr	r1, [sp, #12]
 800de22:	1a5b      	subs	r3, r3, r1
 800de24:	42ab      	cmp	r3, r5
 800de26:	dcf2      	bgt.n	800de0e <_printf_i+0x212>
 800de28:	e7eb      	b.n	800de02 <_printf_i+0x206>
 800de2a:	2500      	movs	r5, #0
 800de2c:	f104 0619 	add.w	r6, r4, #25
 800de30:	e7f5      	b.n	800de1e <_printf_i+0x222>
 800de32:	bf00      	nop
 800de34:	08011113 	.word	0x08011113
 800de38:	08011124 	.word	0x08011124

0800de3c <_scanf_float>:
 800de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de40:	b087      	sub	sp, #28
 800de42:	4617      	mov	r7, r2
 800de44:	9303      	str	r3, [sp, #12]
 800de46:	688b      	ldr	r3, [r1, #8]
 800de48:	1e5a      	subs	r2, r3, #1
 800de4a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800de4e:	bf81      	itttt	hi
 800de50:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800de54:	eb03 0b05 	addhi.w	fp, r3, r5
 800de58:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800de5c:	608b      	strhi	r3, [r1, #8]
 800de5e:	680b      	ldr	r3, [r1, #0]
 800de60:	460a      	mov	r2, r1
 800de62:	f04f 0500 	mov.w	r5, #0
 800de66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800de6a:	f842 3b1c 	str.w	r3, [r2], #28
 800de6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800de72:	4680      	mov	r8, r0
 800de74:	460c      	mov	r4, r1
 800de76:	bf98      	it	ls
 800de78:	f04f 0b00 	movls.w	fp, #0
 800de7c:	9201      	str	r2, [sp, #4]
 800de7e:	4616      	mov	r6, r2
 800de80:	46aa      	mov	sl, r5
 800de82:	46a9      	mov	r9, r5
 800de84:	9502      	str	r5, [sp, #8]
 800de86:	68a2      	ldr	r2, [r4, #8]
 800de88:	b152      	cbz	r2, 800dea0 <_scanf_float+0x64>
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	2b4e      	cmp	r3, #78	@ 0x4e
 800de90:	d864      	bhi.n	800df5c <_scanf_float+0x120>
 800de92:	2b40      	cmp	r3, #64	@ 0x40
 800de94:	d83c      	bhi.n	800df10 <_scanf_float+0xd4>
 800de96:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800de9a:	b2c8      	uxtb	r0, r1
 800de9c:	280e      	cmp	r0, #14
 800de9e:	d93a      	bls.n	800df16 <_scanf_float+0xda>
 800dea0:	f1b9 0f00 	cmp.w	r9, #0
 800dea4:	d003      	beq.n	800deae <_scanf_float+0x72>
 800dea6:	6823      	ldr	r3, [r4, #0]
 800dea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800deac:	6023      	str	r3, [r4, #0]
 800deae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800deb2:	f1ba 0f01 	cmp.w	sl, #1
 800deb6:	f200 8117 	bhi.w	800e0e8 <_scanf_float+0x2ac>
 800deba:	9b01      	ldr	r3, [sp, #4]
 800debc:	429e      	cmp	r6, r3
 800debe:	f200 8108 	bhi.w	800e0d2 <_scanf_float+0x296>
 800dec2:	2001      	movs	r0, #1
 800dec4:	b007      	add	sp, #28
 800dec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800dece:	2a0d      	cmp	r2, #13
 800ded0:	d8e6      	bhi.n	800dea0 <_scanf_float+0x64>
 800ded2:	a101      	add	r1, pc, #4	@ (adr r1, 800ded8 <_scanf_float+0x9c>)
 800ded4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ded8:	0800e01f 	.word	0x0800e01f
 800dedc:	0800dea1 	.word	0x0800dea1
 800dee0:	0800dea1 	.word	0x0800dea1
 800dee4:	0800dea1 	.word	0x0800dea1
 800dee8:	0800e07f 	.word	0x0800e07f
 800deec:	0800e057 	.word	0x0800e057
 800def0:	0800dea1 	.word	0x0800dea1
 800def4:	0800dea1 	.word	0x0800dea1
 800def8:	0800e02d 	.word	0x0800e02d
 800defc:	0800dea1 	.word	0x0800dea1
 800df00:	0800dea1 	.word	0x0800dea1
 800df04:	0800dea1 	.word	0x0800dea1
 800df08:	0800dea1 	.word	0x0800dea1
 800df0c:	0800dfe5 	.word	0x0800dfe5
 800df10:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800df14:	e7db      	b.n	800dece <_scanf_float+0x92>
 800df16:	290e      	cmp	r1, #14
 800df18:	d8c2      	bhi.n	800dea0 <_scanf_float+0x64>
 800df1a:	a001      	add	r0, pc, #4	@ (adr r0, 800df20 <_scanf_float+0xe4>)
 800df1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800df20:	0800dfd5 	.word	0x0800dfd5
 800df24:	0800dea1 	.word	0x0800dea1
 800df28:	0800dfd5 	.word	0x0800dfd5
 800df2c:	0800e06b 	.word	0x0800e06b
 800df30:	0800dea1 	.word	0x0800dea1
 800df34:	0800df7d 	.word	0x0800df7d
 800df38:	0800dfbb 	.word	0x0800dfbb
 800df3c:	0800dfbb 	.word	0x0800dfbb
 800df40:	0800dfbb 	.word	0x0800dfbb
 800df44:	0800dfbb 	.word	0x0800dfbb
 800df48:	0800dfbb 	.word	0x0800dfbb
 800df4c:	0800dfbb 	.word	0x0800dfbb
 800df50:	0800dfbb 	.word	0x0800dfbb
 800df54:	0800dfbb 	.word	0x0800dfbb
 800df58:	0800dfbb 	.word	0x0800dfbb
 800df5c:	2b6e      	cmp	r3, #110	@ 0x6e
 800df5e:	d809      	bhi.n	800df74 <_scanf_float+0x138>
 800df60:	2b60      	cmp	r3, #96	@ 0x60
 800df62:	d8b2      	bhi.n	800deca <_scanf_float+0x8e>
 800df64:	2b54      	cmp	r3, #84	@ 0x54
 800df66:	d07b      	beq.n	800e060 <_scanf_float+0x224>
 800df68:	2b59      	cmp	r3, #89	@ 0x59
 800df6a:	d199      	bne.n	800dea0 <_scanf_float+0x64>
 800df6c:	2d07      	cmp	r5, #7
 800df6e:	d197      	bne.n	800dea0 <_scanf_float+0x64>
 800df70:	2508      	movs	r5, #8
 800df72:	e02c      	b.n	800dfce <_scanf_float+0x192>
 800df74:	2b74      	cmp	r3, #116	@ 0x74
 800df76:	d073      	beq.n	800e060 <_scanf_float+0x224>
 800df78:	2b79      	cmp	r3, #121	@ 0x79
 800df7a:	e7f6      	b.n	800df6a <_scanf_float+0x12e>
 800df7c:	6821      	ldr	r1, [r4, #0]
 800df7e:	05c8      	lsls	r0, r1, #23
 800df80:	d51b      	bpl.n	800dfba <_scanf_float+0x17e>
 800df82:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800df86:	6021      	str	r1, [r4, #0]
 800df88:	f109 0901 	add.w	r9, r9, #1
 800df8c:	f1bb 0f00 	cmp.w	fp, #0
 800df90:	d003      	beq.n	800df9a <_scanf_float+0x15e>
 800df92:	3201      	adds	r2, #1
 800df94:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df98:	60a2      	str	r2, [r4, #8]
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	60a3      	str	r3, [r4, #8]
 800dfa0:	6923      	ldr	r3, [r4, #16]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	6123      	str	r3, [r4, #16]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	607b      	str	r3, [r7, #4]
 800dfae:	f340 8087 	ble.w	800e0c0 <_scanf_float+0x284>
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	603b      	str	r3, [r7, #0]
 800dfb8:	e765      	b.n	800de86 <_scanf_float+0x4a>
 800dfba:	eb1a 0105 	adds.w	r1, sl, r5
 800dfbe:	f47f af6f 	bne.w	800dea0 <_scanf_float+0x64>
 800dfc2:	6822      	ldr	r2, [r4, #0]
 800dfc4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800dfc8:	6022      	str	r2, [r4, #0]
 800dfca:	460d      	mov	r5, r1
 800dfcc:	468a      	mov	sl, r1
 800dfce:	f806 3b01 	strb.w	r3, [r6], #1
 800dfd2:	e7e2      	b.n	800df9a <_scanf_float+0x15e>
 800dfd4:	6822      	ldr	r2, [r4, #0]
 800dfd6:	0610      	lsls	r0, r2, #24
 800dfd8:	f57f af62 	bpl.w	800dea0 <_scanf_float+0x64>
 800dfdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dfe0:	6022      	str	r2, [r4, #0]
 800dfe2:	e7f4      	b.n	800dfce <_scanf_float+0x192>
 800dfe4:	f1ba 0f00 	cmp.w	sl, #0
 800dfe8:	d10e      	bne.n	800e008 <_scanf_float+0x1cc>
 800dfea:	f1b9 0f00 	cmp.w	r9, #0
 800dfee:	d10e      	bne.n	800e00e <_scanf_float+0x1d2>
 800dff0:	6822      	ldr	r2, [r4, #0]
 800dff2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dff6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dffa:	d108      	bne.n	800e00e <_scanf_float+0x1d2>
 800dffc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e000:	6022      	str	r2, [r4, #0]
 800e002:	f04f 0a01 	mov.w	sl, #1
 800e006:	e7e2      	b.n	800dfce <_scanf_float+0x192>
 800e008:	f1ba 0f02 	cmp.w	sl, #2
 800e00c:	d055      	beq.n	800e0ba <_scanf_float+0x27e>
 800e00e:	2d01      	cmp	r5, #1
 800e010:	d002      	beq.n	800e018 <_scanf_float+0x1dc>
 800e012:	2d04      	cmp	r5, #4
 800e014:	f47f af44 	bne.w	800dea0 <_scanf_float+0x64>
 800e018:	3501      	adds	r5, #1
 800e01a:	b2ed      	uxtb	r5, r5
 800e01c:	e7d7      	b.n	800dfce <_scanf_float+0x192>
 800e01e:	f1ba 0f01 	cmp.w	sl, #1
 800e022:	f47f af3d 	bne.w	800dea0 <_scanf_float+0x64>
 800e026:	f04f 0a02 	mov.w	sl, #2
 800e02a:	e7d0      	b.n	800dfce <_scanf_float+0x192>
 800e02c:	b97d      	cbnz	r5, 800e04e <_scanf_float+0x212>
 800e02e:	f1b9 0f00 	cmp.w	r9, #0
 800e032:	f47f af38 	bne.w	800dea6 <_scanf_float+0x6a>
 800e036:	6822      	ldr	r2, [r4, #0]
 800e038:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e03c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e040:	f040 8108 	bne.w	800e254 <_scanf_float+0x418>
 800e044:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e048:	6022      	str	r2, [r4, #0]
 800e04a:	2501      	movs	r5, #1
 800e04c:	e7bf      	b.n	800dfce <_scanf_float+0x192>
 800e04e:	2d03      	cmp	r5, #3
 800e050:	d0e2      	beq.n	800e018 <_scanf_float+0x1dc>
 800e052:	2d05      	cmp	r5, #5
 800e054:	e7de      	b.n	800e014 <_scanf_float+0x1d8>
 800e056:	2d02      	cmp	r5, #2
 800e058:	f47f af22 	bne.w	800dea0 <_scanf_float+0x64>
 800e05c:	2503      	movs	r5, #3
 800e05e:	e7b6      	b.n	800dfce <_scanf_float+0x192>
 800e060:	2d06      	cmp	r5, #6
 800e062:	f47f af1d 	bne.w	800dea0 <_scanf_float+0x64>
 800e066:	2507      	movs	r5, #7
 800e068:	e7b1      	b.n	800dfce <_scanf_float+0x192>
 800e06a:	6822      	ldr	r2, [r4, #0]
 800e06c:	0591      	lsls	r1, r2, #22
 800e06e:	f57f af17 	bpl.w	800dea0 <_scanf_float+0x64>
 800e072:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e076:	6022      	str	r2, [r4, #0]
 800e078:	f8cd 9008 	str.w	r9, [sp, #8]
 800e07c:	e7a7      	b.n	800dfce <_scanf_float+0x192>
 800e07e:	6822      	ldr	r2, [r4, #0]
 800e080:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e084:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e088:	d006      	beq.n	800e098 <_scanf_float+0x25c>
 800e08a:	0550      	lsls	r0, r2, #21
 800e08c:	f57f af08 	bpl.w	800dea0 <_scanf_float+0x64>
 800e090:	f1b9 0f00 	cmp.w	r9, #0
 800e094:	f000 80de 	beq.w	800e254 <_scanf_float+0x418>
 800e098:	0591      	lsls	r1, r2, #22
 800e09a:	bf58      	it	pl
 800e09c:	9902      	ldrpl	r1, [sp, #8]
 800e09e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e0a2:	bf58      	it	pl
 800e0a4:	eba9 0101 	subpl.w	r1, r9, r1
 800e0a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e0ac:	bf58      	it	pl
 800e0ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e0b2:	6022      	str	r2, [r4, #0]
 800e0b4:	f04f 0900 	mov.w	r9, #0
 800e0b8:	e789      	b.n	800dfce <_scanf_float+0x192>
 800e0ba:	f04f 0a03 	mov.w	sl, #3
 800e0be:	e786      	b.n	800dfce <_scanf_float+0x192>
 800e0c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e0c4:	4639      	mov	r1, r7
 800e0c6:	4640      	mov	r0, r8
 800e0c8:	4798      	blx	r3
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	f43f aedb 	beq.w	800de86 <_scanf_float+0x4a>
 800e0d0:	e6e6      	b.n	800dea0 <_scanf_float+0x64>
 800e0d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0da:	463a      	mov	r2, r7
 800e0dc:	4640      	mov	r0, r8
 800e0de:	4798      	blx	r3
 800e0e0:	6923      	ldr	r3, [r4, #16]
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	6123      	str	r3, [r4, #16]
 800e0e6:	e6e8      	b.n	800deba <_scanf_float+0x7e>
 800e0e8:	1e6b      	subs	r3, r5, #1
 800e0ea:	2b06      	cmp	r3, #6
 800e0ec:	d824      	bhi.n	800e138 <_scanf_float+0x2fc>
 800e0ee:	2d02      	cmp	r5, #2
 800e0f0:	d836      	bhi.n	800e160 <_scanf_float+0x324>
 800e0f2:	9b01      	ldr	r3, [sp, #4]
 800e0f4:	429e      	cmp	r6, r3
 800e0f6:	f67f aee4 	bls.w	800dec2 <_scanf_float+0x86>
 800e0fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e102:	463a      	mov	r2, r7
 800e104:	4640      	mov	r0, r8
 800e106:	4798      	blx	r3
 800e108:	6923      	ldr	r3, [r4, #16]
 800e10a:	3b01      	subs	r3, #1
 800e10c:	6123      	str	r3, [r4, #16]
 800e10e:	e7f0      	b.n	800e0f2 <_scanf_float+0x2b6>
 800e110:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e114:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e118:	463a      	mov	r2, r7
 800e11a:	4640      	mov	r0, r8
 800e11c:	4798      	blx	r3
 800e11e:	6923      	ldr	r3, [r4, #16]
 800e120:	3b01      	subs	r3, #1
 800e122:	6123      	str	r3, [r4, #16]
 800e124:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e128:	fa5f fa8a 	uxtb.w	sl, sl
 800e12c:	f1ba 0f02 	cmp.w	sl, #2
 800e130:	d1ee      	bne.n	800e110 <_scanf_float+0x2d4>
 800e132:	3d03      	subs	r5, #3
 800e134:	b2ed      	uxtb	r5, r5
 800e136:	1b76      	subs	r6, r6, r5
 800e138:	6823      	ldr	r3, [r4, #0]
 800e13a:	05da      	lsls	r2, r3, #23
 800e13c:	d530      	bpl.n	800e1a0 <_scanf_float+0x364>
 800e13e:	055b      	lsls	r3, r3, #21
 800e140:	d511      	bpl.n	800e166 <_scanf_float+0x32a>
 800e142:	9b01      	ldr	r3, [sp, #4]
 800e144:	429e      	cmp	r6, r3
 800e146:	f67f aebc 	bls.w	800dec2 <_scanf_float+0x86>
 800e14a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e14e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e152:	463a      	mov	r2, r7
 800e154:	4640      	mov	r0, r8
 800e156:	4798      	blx	r3
 800e158:	6923      	ldr	r3, [r4, #16]
 800e15a:	3b01      	subs	r3, #1
 800e15c:	6123      	str	r3, [r4, #16]
 800e15e:	e7f0      	b.n	800e142 <_scanf_float+0x306>
 800e160:	46aa      	mov	sl, r5
 800e162:	46b3      	mov	fp, r6
 800e164:	e7de      	b.n	800e124 <_scanf_float+0x2e8>
 800e166:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e16a:	6923      	ldr	r3, [r4, #16]
 800e16c:	2965      	cmp	r1, #101	@ 0x65
 800e16e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e172:	f106 35ff 	add.w	r5, r6, #4294967295
 800e176:	6123      	str	r3, [r4, #16]
 800e178:	d00c      	beq.n	800e194 <_scanf_float+0x358>
 800e17a:	2945      	cmp	r1, #69	@ 0x45
 800e17c:	d00a      	beq.n	800e194 <_scanf_float+0x358>
 800e17e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e182:	463a      	mov	r2, r7
 800e184:	4640      	mov	r0, r8
 800e186:	4798      	blx	r3
 800e188:	6923      	ldr	r3, [r4, #16]
 800e18a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e18e:	3b01      	subs	r3, #1
 800e190:	1eb5      	subs	r5, r6, #2
 800e192:	6123      	str	r3, [r4, #16]
 800e194:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e198:	463a      	mov	r2, r7
 800e19a:	4640      	mov	r0, r8
 800e19c:	4798      	blx	r3
 800e19e:	462e      	mov	r6, r5
 800e1a0:	6822      	ldr	r2, [r4, #0]
 800e1a2:	f012 0210 	ands.w	r2, r2, #16
 800e1a6:	d001      	beq.n	800e1ac <_scanf_float+0x370>
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	e68b      	b.n	800dec4 <_scanf_float+0x88>
 800e1ac:	7032      	strb	r2, [r6, #0]
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e1b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1b8:	d11c      	bne.n	800e1f4 <_scanf_float+0x3b8>
 800e1ba:	9b02      	ldr	r3, [sp, #8]
 800e1bc:	454b      	cmp	r3, r9
 800e1be:	eba3 0209 	sub.w	r2, r3, r9
 800e1c2:	d123      	bne.n	800e20c <_scanf_float+0x3d0>
 800e1c4:	9901      	ldr	r1, [sp, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	4640      	mov	r0, r8
 800e1ca:	f7ff f95d 	bl	800d488 <_strtod_r>
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	6821      	ldr	r1, [r4, #0]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f011 0f02 	tst.w	r1, #2
 800e1d8:	ec57 6b10 	vmov	r6, r7, d0
 800e1dc:	f103 0204 	add.w	r2, r3, #4
 800e1e0:	d01f      	beq.n	800e222 <_scanf_float+0x3e6>
 800e1e2:	9903      	ldr	r1, [sp, #12]
 800e1e4:	600a      	str	r2, [r1, #0]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	e9c3 6700 	strd	r6, r7, [r3]
 800e1ec:	68e3      	ldr	r3, [r4, #12]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	60e3      	str	r3, [r4, #12]
 800e1f2:	e7d9      	b.n	800e1a8 <_scanf_float+0x36c>
 800e1f4:	9b04      	ldr	r3, [sp, #16]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0e4      	beq.n	800e1c4 <_scanf_float+0x388>
 800e1fa:	9905      	ldr	r1, [sp, #20]
 800e1fc:	230a      	movs	r3, #10
 800e1fe:	3101      	adds	r1, #1
 800e200:	4640      	mov	r0, r8
 800e202:	f7ff f9c1 	bl	800d588 <_strtol_r>
 800e206:	9b04      	ldr	r3, [sp, #16]
 800e208:	9e05      	ldr	r6, [sp, #20]
 800e20a:	1ac2      	subs	r2, r0, r3
 800e20c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e210:	429e      	cmp	r6, r3
 800e212:	bf28      	it	cs
 800e214:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e218:	4910      	ldr	r1, [pc, #64]	@ (800e25c <_scanf_float+0x420>)
 800e21a:	4630      	mov	r0, r6
 800e21c:	f000 f918 	bl	800e450 <siprintf>
 800e220:	e7d0      	b.n	800e1c4 <_scanf_float+0x388>
 800e222:	f011 0f04 	tst.w	r1, #4
 800e226:	9903      	ldr	r1, [sp, #12]
 800e228:	600a      	str	r2, [r1, #0]
 800e22a:	d1dc      	bne.n	800e1e6 <_scanf_float+0x3aa>
 800e22c:	681d      	ldr	r5, [r3, #0]
 800e22e:	4632      	mov	r2, r6
 800e230:	463b      	mov	r3, r7
 800e232:	4630      	mov	r0, r6
 800e234:	4639      	mov	r1, r7
 800e236:	f7f2 fca1 	bl	8000b7c <__aeabi_dcmpun>
 800e23a:	b128      	cbz	r0, 800e248 <_scanf_float+0x40c>
 800e23c:	4808      	ldr	r0, [pc, #32]	@ (800e260 <_scanf_float+0x424>)
 800e23e:	f000 fa23 	bl	800e688 <nanf>
 800e242:	ed85 0a00 	vstr	s0, [r5]
 800e246:	e7d1      	b.n	800e1ec <_scanf_float+0x3b0>
 800e248:	4630      	mov	r0, r6
 800e24a:	4639      	mov	r1, r7
 800e24c:	f7f2 fcf4 	bl	8000c38 <__aeabi_d2f>
 800e250:	6028      	str	r0, [r5, #0]
 800e252:	e7cb      	b.n	800e1ec <_scanf_float+0x3b0>
 800e254:	f04f 0900 	mov.w	r9, #0
 800e258:	e629      	b.n	800deae <_scanf_float+0x72>
 800e25a:	bf00      	nop
 800e25c:	08011135 	.word	0x08011135
 800e260:	0801117d 	.word	0x0801117d

0800e264 <std>:
 800e264:	2300      	movs	r3, #0
 800e266:	b510      	push	{r4, lr}
 800e268:	4604      	mov	r4, r0
 800e26a:	e9c0 3300 	strd	r3, r3, [r0]
 800e26e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e272:	6083      	str	r3, [r0, #8]
 800e274:	8181      	strh	r1, [r0, #12]
 800e276:	6643      	str	r3, [r0, #100]	@ 0x64
 800e278:	81c2      	strh	r2, [r0, #14]
 800e27a:	6183      	str	r3, [r0, #24]
 800e27c:	4619      	mov	r1, r3
 800e27e:	2208      	movs	r2, #8
 800e280:	305c      	adds	r0, #92	@ 0x5c
 800e282:	f000 f948 	bl	800e516 <memset>
 800e286:	4b0d      	ldr	r3, [pc, #52]	@ (800e2bc <std+0x58>)
 800e288:	6263      	str	r3, [r4, #36]	@ 0x24
 800e28a:	4b0d      	ldr	r3, [pc, #52]	@ (800e2c0 <std+0x5c>)
 800e28c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e28e:	4b0d      	ldr	r3, [pc, #52]	@ (800e2c4 <std+0x60>)
 800e290:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e292:	4b0d      	ldr	r3, [pc, #52]	@ (800e2c8 <std+0x64>)
 800e294:	6323      	str	r3, [r4, #48]	@ 0x30
 800e296:	4b0d      	ldr	r3, [pc, #52]	@ (800e2cc <std+0x68>)
 800e298:	6224      	str	r4, [r4, #32]
 800e29a:	429c      	cmp	r4, r3
 800e29c:	d006      	beq.n	800e2ac <std+0x48>
 800e29e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e2a2:	4294      	cmp	r4, r2
 800e2a4:	d002      	beq.n	800e2ac <std+0x48>
 800e2a6:	33d0      	adds	r3, #208	@ 0xd0
 800e2a8:	429c      	cmp	r4, r3
 800e2aa:	d105      	bne.n	800e2b8 <std+0x54>
 800e2ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2b4:	f000 b9ce 	b.w	800e654 <__retarget_lock_init_recursive>
 800e2b8:	bd10      	pop	{r4, pc}
 800e2ba:	bf00      	nop
 800e2bc:	0800e491 	.word	0x0800e491
 800e2c0:	0800e4b3 	.word	0x0800e4b3
 800e2c4:	0800e4eb 	.word	0x0800e4eb
 800e2c8:	0800e50f 	.word	0x0800e50f
 800e2cc:	20001358 	.word	0x20001358

0800e2d0 <stdio_exit_handler>:
 800e2d0:	4a02      	ldr	r2, [pc, #8]	@ (800e2dc <stdio_exit_handler+0xc>)
 800e2d2:	4903      	ldr	r1, [pc, #12]	@ (800e2e0 <stdio_exit_handler+0x10>)
 800e2d4:	4803      	ldr	r0, [pc, #12]	@ (800e2e4 <stdio_exit_handler+0x14>)
 800e2d6:	f000 b869 	b.w	800e3ac <_fwalk_sglue>
 800e2da:	bf00      	nop
 800e2dc:	2000002c 	.word	0x2000002c
 800e2e0:	080107c9 	.word	0x080107c9
 800e2e4:	200001a8 	.word	0x200001a8

0800e2e8 <cleanup_stdio>:
 800e2e8:	6841      	ldr	r1, [r0, #4]
 800e2ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e31c <cleanup_stdio+0x34>)
 800e2ec:	4299      	cmp	r1, r3
 800e2ee:	b510      	push	{r4, lr}
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	d001      	beq.n	800e2f8 <cleanup_stdio+0x10>
 800e2f4:	f002 fa68 	bl	80107c8 <_fflush_r>
 800e2f8:	68a1      	ldr	r1, [r4, #8]
 800e2fa:	4b09      	ldr	r3, [pc, #36]	@ (800e320 <cleanup_stdio+0x38>)
 800e2fc:	4299      	cmp	r1, r3
 800e2fe:	d002      	beq.n	800e306 <cleanup_stdio+0x1e>
 800e300:	4620      	mov	r0, r4
 800e302:	f002 fa61 	bl	80107c8 <_fflush_r>
 800e306:	68e1      	ldr	r1, [r4, #12]
 800e308:	4b06      	ldr	r3, [pc, #24]	@ (800e324 <cleanup_stdio+0x3c>)
 800e30a:	4299      	cmp	r1, r3
 800e30c:	d004      	beq.n	800e318 <cleanup_stdio+0x30>
 800e30e:	4620      	mov	r0, r4
 800e310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e314:	f002 ba58 	b.w	80107c8 <_fflush_r>
 800e318:	bd10      	pop	{r4, pc}
 800e31a:	bf00      	nop
 800e31c:	20001358 	.word	0x20001358
 800e320:	200013c0 	.word	0x200013c0
 800e324:	20001428 	.word	0x20001428

0800e328 <global_stdio_init.part.0>:
 800e328:	b510      	push	{r4, lr}
 800e32a:	4b0b      	ldr	r3, [pc, #44]	@ (800e358 <global_stdio_init.part.0+0x30>)
 800e32c:	4c0b      	ldr	r4, [pc, #44]	@ (800e35c <global_stdio_init.part.0+0x34>)
 800e32e:	4a0c      	ldr	r2, [pc, #48]	@ (800e360 <global_stdio_init.part.0+0x38>)
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	4620      	mov	r0, r4
 800e334:	2200      	movs	r2, #0
 800e336:	2104      	movs	r1, #4
 800e338:	f7ff ff94 	bl	800e264 <std>
 800e33c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e340:	2201      	movs	r2, #1
 800e342:	2109      	movs	r1, #9
 800e344:	f7ff ff8e 	bl	800e264 <std>
 800e348:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e34c:	2202      	movs	r2, #2
 800e34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e352:	2112      	movs	r1, #18
 800e354:	f7ff bf86 	b.w	800e264 <std>
 800e358:	20001490 	.word	0x20001490
 800e35c:	20001358 	.word	0x20001358
 800e360:	0800e2d1 	.word	0x0800e2d1

0800e364 <__sfp_lock_acquire>:
 800e364:	4801      	ldr	r0, [pc, #4]	@ (800e36c <__sfp_lock_acquire+0x8>)
 800e366:	f000 b976 	b.w	800e656 <__retarget_lock_acquire_recursive>
 800e36a:	bf00      	nop
 800e36c:	20001499 	.word	0x20001499

0800e370 <__sfp_lock_release>:
 800e370:	4801      	ldr	r0, [pc, #4]	@ (800e378 <__sfp_lock_release+0x8>)
 800e372:	f000 b971 	b.w	800e658 <__retarget_lock_release_recursive>
 800e376:	bf00      	nop
 800e378:	20001499 	.word	0x20001499

0800e37c <__sinit>:
 800e37c:	b510      	push	{r4, lr}
 800e37e:	4604      	mov	r4, r0
 800e380:	f7ff fff0 	bl	800e364 <__sfp_lock_acquire>
 800e384:	6a23      	ldr	r3, [r4, #32]
 800e386:	b11b      	cbz	r3, 800e390 <__sinit+0x14>
 800e388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e38c:	f7ff bff0 	b.w	800e370 <__sfp_lock_release>
 800e390:	4b04      	ldr	r3, [pc, #16]	@ (800e3a4 <__sinit+0x28>)
 800e392:	6223      	str	r3, [r4, #32]
 800e394:	4b04      	ldr	r3, [pc, #16]	@ (800e3a8 <__sinit+0x2c>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d1f5      	bne.n	800e388 <__sinit+0xc>
 800e39c:	f7ff ffc4 	bl	800e328 <global_stdio_init.part.0>
 800e3a0:	e7f2      	b.n	800e388 <__sinit+0xc>
 800e3a2:	bf00      	nop
 800e3a4:	0800e2e9 	.word	0x0800e2e9
 800e3a8:	20001490 	.word	0x20001490

0800e3ac <_fwalk_sglue>:
 800e3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b0:	4607      	mov	r7, r0
 800e3b2:	4688      	mov	r8, r1
 800e3b4:	4614      	mov	r4, r2
 800e3b6:	2600      	movs	r6, #0
 800e3b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3bc:	f1b9 0901 	subs.w	r9, r9, #1
 800e3c0:	d505      	bpl.n	800e3ce <_fwalk_sglue+0x22>
 800e3c2:	6824      	ldr	r4, [r4, #0]
 800e3c4:	2c00      	cmp	r4, #0
 800e3c6:	d1f7      	bne.n	800e3b8 <_fwalk_sglue+0xc>
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ce:	89ab      	ldrh	r3, [r5, #12]
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d907      	bls.n	800e3e4 <_fwalk_sglue+0x38>
 800e3d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	d003      	beq.n	800e3e4 <_fwalk_sglue+0x38>
 800e3dc:	4629      	mov	r1, r5
 800e3de:	4638      	mov	r0, r7
 800e3e0:	47c0      	blx	r8
 800e3e2:	4306      	orrs	r6, r0
 800e3e4:	3568      	adds	r5, #104	@ 0x68
 800e3e6:	e7e9      	b.n	800e3bc <_fwalk_sglue+0x10>

0800e3e8 <sniprintf>:
 800e3e8:	b40c      	push	{r2, r3}
 800e3ea:	b530      	push	{r4, r5, lr}
 800e3ec:	4b17      	ldr	r3, [pc, #92]	@ (800e44c <sniprintf+0x64>)
 800e3ee:	1e0c      	subs	r4, r1, #0
 800e3f0:	681d      	ldr	r5, [r3, #0]
 800e3f2:	b09d      	sub	sp, #116	@ 0x74
 800e3f4:	da08      	bge.n	800e408 <sniprintf+0x20>
 800e3f6:	238b      	movs	r3, #139	@ 0x8b
 800e3f8:	602b      	str	r3, [r5, #0]
 800e3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e3fe:	b01d      	add	sp, #116	@ 0x74
 800e400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e404:	b002      	add	sp, #8
 800e406:	4770      	bx	lr
 800e408:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e40c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e410:	bf14      	ite	ne
 800e412:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e416:	4623      	moveq	r3, r4
 800e418:	9304      	str	r3, [sp, #16]
 800e41a:	9307      	str	r3, [sp, #28]
 800e41c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e420:	9002      	str	r0, [sp, #8]
 800e422:	9006      	str	r0, [sp, #24]
 800e424:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e428:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e42a:	ab21      	add	r3, sp, #132	@ 0x84
 800e42c:	a902      	add	r1, sp, #8
 800e42e:	4628      	mov	r0, r5
 800e430:	9301      	str	r3, [sp, #4]
 800e432:	f002 f849 	bl	80104c8 <_svfiprintf_r>
 800e436:	1c43      	adds	r3, r0, #1
 800e438:	bfbc      	itt	lt
 800e43a:	238b      	movlt	r3, #139	@ 0x8b
 800e43c:	602b      	strlt	r3, [r5, #0]
 800e43e:	2c00      	cmp	r4, #0
 800e440:	d0dd      	beq.n	800e3fe <sniprintf+0x16>
 800e442:	9b02      	ldr	r3, [sp, #8]
 800e444:	2200      	movs	r2, #0
 800e446:	701a      	strb	r2, [r3, #0]
 800e448:	e7d9      	b.n	800e3fe <sniprintf+0x16>
 800e44a:	bf00      	nop
 800e44c:	200001a4 	.word	0x200001a4

0800e450 <siprintf>:
 800e450:	b40e      	push	{r1, r2, r3}
 800e452:	b500      	push	{lr}
 800e454:	b09c      	sub	sp, #112	@ 0x70
 800e456:	ab1d      	add	r3, sp, #116	@ 0x74
 800e458:	9002      	str	r0, [sp, #8]
 800e45a:	9006      	str	r0, [sp, #24]
 800e45c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e460:	4809      	ldr	r0, [pc, #36]	@ (800e488 <siprintf+0x38>)
 800e462:	9107      	str	r1, [sp, #28]
 800e464:	9104      	str	r1, [sp, #16]
 800e466:	4909      	ldr	r1, [pc, #36]	@ (800e48c <siprintf+0x3c>)
 800e468:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46c:	9105      	str	r1, [sp, #20]
 800e46e:	6800      	ldr	r0, [r0, #0]
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	a902      	add	r1, sp, #8
 800e474:	f002 f828 	bl	80104c8 <_svfiprintf_r>
 800e478:	9b02      	ldr	r3, [sp, #8]
 800e47a:	2200      	movs	r2, #0
 800e47c:	701a      	strb	r2, [r3, #0]
 800e47e:	b01c      	add	sp, #112	@ 0x70
 800e480:	f85d eb04 	ldr.w	lr, [sp], #4
 800e484:	b003      	add	sp, #12
 800e486:	4770      	bx	lr
 800e488:	200001a4 	.word	0x200001a4
 800e48c:	ffff0208 	.word	0xffff0208

0800e490 <__sread>:
 800e490:	b510      	push	{r4, lr}
 800e492:	460c      	mov	r4, r1
 800e494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e498:	f000 f87e 	bl	800e598 <_read_r>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	bfab      	itete	ge
 800e4a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e4a2:	89a3      	ldrhlt	r3, [r4, #12]
 800e4a4:	181b      	addge	r3, r3, r0
 800e4a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e4aa:	bfac      	ite	ge
 800e4ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e4ae:	81a3      	strhlt	r3, [r4, #12]
 800e4b0:	bd10      	pop	{r4, pc}

0800e4b2 <__swrite>:
 800e4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b6:	461f      	mov	r7, r3
 800e4b8:	898b      	ldrh	r3, [r1, #12]
 800e4ba:	05db      	lsls	r3, r3, #23
 800e4bc:	4605      	mov	r5, r0
 800e4be:	460c      	mov	r4, r1
 800e4c0:	4616      	mov	r6, r2
 800e4c2:	d505      	bpl.n	800e4d0 <__swrite+0x1e>
 800e4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f000 f852 	bl	800e574 <_lseek_r>
 800e4d0:	89a3      	ldrh	r3, [r4, #12]
 800e4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e4da:	81a3      	strh	r3, [r4, #12]
 800e4dc:	4632      	mov	r2, r6
 800e4de:	463b      	mov	r3, r7
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e6:	f000 b879 	b.w	800e5dc <_write_r>

0800e4ea <__sseek>:
 800e4ea:	b510      	push	{r4, lr}
 800e4ec:	460c      	mov	r4, r1
 800e4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f2:	f000 f83f 	bl	800e574 <_lseek_r>
 800e4f6:	1c43      	adds	r3, r0, #1
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	bf15      	itete	ne
 800e4fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e4fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e502:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e506:	81a3      	strheq	r3, [r4, #12]
 800e508:	bf18      	it	ne
 800e50a:	81a3      	strhne	r3, [r4, #12]
 800e50c:	bd10      	pop	{r4, pc}

0800e50e <__sclose>:
 800e50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e512:	f000 b81f 	b.w	800e554 <_close_r>

0800e516 <memset>:
 800e516:	4402      	add	r2, r0
 800e518:	4603      	mov	r3, r0
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d100      	bne.n	800e520 <memset+0xa>
 800e51e:	4770      	bx	lr
 800e520:	f803 1b01 	strb.w	r1, [r3], #1
 800e524:	e7f9      	b.n	800e51a <memset+0x4>

0800e526 <strncmp>:
 800e526:	b510      	push	{r4, lr}
 800e528:	b16a      	cbz	r2, 800e546 <strncmp+0x20>
 800e52a:	3901      	subs	r1, #1
 800e52c:	1884      	adds	r4, r0, r2
 800e52e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e532:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e536:	429a      	cmp	r2, r3
 800e538:	d103      	bne.n	800e542 <strncmp+0x1c>
 800e53a:	42a0      	cmp	r0, r4
 800e53c:	d001      	beq.n	800e542 <strncmp+0x1c>
 800e53e:	2a00      	cmp	r2, #0
 800e540:	d1f5      	bne.n	800e52e <strncmp+0x8>
 800e542:	1ad0      	subs	r0, r2, r3
 800e544:	bd10      	pop	{r4, pc}
 800e546:	4610      	mov	r0, r2
 800e548:	e7fc      	b.n	800e544 <strncmp+0x1e>
	...

0800e54c <_localeconv_r>:
 800e54c:	4800      	ldr	r0, [pc, #0]	@ (800e550 <_localeconv_r+0x4>)
 800e54e:	4770      	bx	lr
 800e550:	20000128 	.word	0x20000128

0800e554 <_close_r>:
 800e554:	b538      	push	{r3, r4, r5, lr}
 800e556:	4d06      	ldr	r5, [pc, #24]	@ (800e570 <_close_r+0x1c>)
 800e558:	2300      	movs	r3, #0
 800e55a:	4604      	mov	r4, r0
 800e55c:	4608      	mov	r0, r1
 800e55e:	602b      	str	r3, [r5, #0]
 800e560:	f7f4 f9f8 	bl	8002954 <_close>
 800e564:	1c43      	adds	r3, r0, #1
 800e566:	d102      	bne.n	800e56e <_close_r+0x1a>
 800e568:	682b      	ldr	r3, [r5, #0]
 800e56a:	b103      	cbz	r3, 800e56e <_close_r+0x1a>
 800e56c:	6023      	str	r3, [r4, #0]
 800e56e:	bd38      	pop	{r3, r4, r5, pc}
 800e570:	20001494 	.word	0x20001494

0800e574 <_lseek_r>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	4d07      	ldr	r5, [pc, #28]	@ (800e594 <_lseek_r+0x20>)
 800e578:	4604      	mov	r4, r0
 800e57a:	4608      	mov	r0, r1
 800e57c:	4611      	mov	r1, r2
 800e57e:	2200      	movs	r2, #0
 800e580:	602a      	str	r2, [r5, #0]
 800e582:	461a      	mov	r2, r3
 800e584:	f7f4 fa0d 	bl	80029a2 <_lseek>
 800e588:	1c43      	adds	r3, r0, #1
 800e58a:	d102      	bne.n	800e592 <_lseek_r+0x1e>
 800e58c:	682b      	ldr	r3, [r5, #0]
 800e58e:	b103      	cbz	r3, 800e592 <_lseek_r+0x1e>
 800e590:	6023      	str	r3, [r4, #0]
 800e592:	bd38      	pop	{r3, r4, r5, pc}
 800e594:	20001494 	.word	0x20001494

0800e598 <_read_r>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	4d07      	ldr	r5, [pc, #28]	@ (800e5b8 <_read_r+0x20>)
 800e59c:	4604      	mov	r4, r0
 800e59e:	4608      	mov	r0, r1
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	602a      	str	r2, [r5, #0]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	f7f4 f99b 	bl	80028e2 <_read>
 800e5ac:	1c43      	adds	r3, r0, #1
 800e5ae:	d102      	bne.n	800e5b6 <_read_r+0x1e>
 800e5b0:	682b      	ldr	r3, [r5, #0]
 800e5b2:	b103      	cbz	r3, 800e5b6 <_read_r+0x1e>
 800e5b4:	6023      	str	r3, [r4, #0]
 800e5b6:	bd38      	pop	{r3, r4, r5, pc}
 800e5b8:	20001494 	.word	0x20001494

0800e5bc <_sbrk_r>:
 800e5bc:	b538      	push	{r3, r4, r5, lr}
 800e5be:	4d06      	ldr	r5, [pc, #24]	@ (800e5d8 <_sbrk_r+0x1c>)
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	4608      	mov	r0, r1
 800e5c6:	602b      	str	r3, [r5, #0]
 800e5c8:	f7f4 f9f8 	bl	80029bc <_sbrk>
 800e5cc:	1c43      	adds	r3, r0, #1
 800e5ce:	d102      	bne.n	800e5d6 <_sbrk_r+0x1a>
 800e5d0:	682b      	ldr	r3, [r5, #0]
 800e5d2:	b103      	cbz	r3, 800e5d6 <_sbrk_r+0x1a>
 800e5d4:	6023      	str	r3, [r4, #0]
 800e5d6:	bd38      	pop	{r3, r4, r5, pc}
 800e5d8:	20001494 	.word	0x20001494

0800e5dc <_write_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4d07      	ldr	r5, [pc, #28]	@ (800e5fc <_write_r+0x20>)
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	4608      	mov	r0, r1
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	602a      	str	r2, [r5, #0]
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	f7f4 f996 	bl	800291c <_write>
 800e5f0:	1c43      	adds	r3, r0, #1
 800e5f2:	d102      	bne.n	800e5fa <_write_r+0x1e>
 800e5f4:	682b      	ldr	r3, [r5, #0]
 800e5f6:	b103      	cbz	r3, 800e5fa <_write_r+0x1e>
 800e5f8:	6023      	str	r3, [r4, #0]
 800e5fa:	bd38      	pop	{r3, r4, r5, pc}
 800e5fc:	20001494 	.word	0x20001494

0800e600 <__errno>:
 800e600:	4b01      	ldr	r3, [pc, #4]	@ (800e608 <__errno+0x8>)
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	200001a4 	.word	0x200001a4

0800e60c <__libc_init_array>:
 800e60c:	b570      	push	{r4, r5, r6, lr}
 800e60e:	4d0d      	ldr	r5, [pc, #52]	@ (800e644 <__libc_init_array+0x38>)
 800e610:	4c0d      	ldr	r4, [pc, #52]	@ (800e648 <__libc_init_array+0x3c>)
 800e612:	1b64      	subs	r4, r4, r5
 800e614:	10a4      	asrs	r4, r4, #2
 800e616:	2600      	movs	r6, #0
 800e618:	42a6      	cmp	r6, r4
 800e61a:	d109      	bne.n	800e630 <__libc_init_array+0x24>
 800e61c:	4d0b      	ldr	r5, [pc, #44]	@ (800e64c <__libc_init_array+0x40>)
 800e61e:	4c0c      	ldr	r4, [pc, #48]	@ (800e650 <__libc_init_array+0x44>)
 800e620:	f002 fc14 	bl	8010e4c <_init>
 800e624:	1b64      	subs	r4, r4, r5
 800e626:	10a4      	asrs	r4, r4, #2
 800e628:	2600      	movs	r6, #0
 800e62a:	42a6      	cmp	r6, r4
 800e62c:	d105      	bne.n	800e63a <__libc_init_array+0x2e>
 800e62e:	bd70      	pop	{r4, r5, r6, pc}
 800e630:	f855 3b04 	ldr.w	r3, [r5], #4
 800e634:	4798      	blx	r3
 800e636:	3601      	adds	r6, #1
 800e638:	e7ee      	b.n	800e618 <__libc_init_array+0xc>
 800e63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e63e:	4798      	blx	r3
 800e640:	3601      	adds	r6, #1
 800e642:	e7f2      	b.n	800e62a <__libc_init_array+0x1e>
 800e644:	080113dc 	.word	0x080113dc
 800e648:	080113dc 	.word	0x080113dc
 800e64c:	080113dc 	.word	0x080113dc
 800e650:	080113e0 	.word	0x080113e0

0800e654 <__retarget_lock_init_recursive>:
 800e654:	4770      	bx	lr

0800e656 <__retarget_lock_acquire_recursive>:
 800e656:	4770      	bx	lr

0800e658 <__retarget_lock_release_recursive>:
 800e658:	4770      	bx	lr

0800e65a <memcpy>:
 800e65a:	440a      	add	r2, r1
 800e65c:	4291      	cmp	r1, r2
 800e65e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e662:	d100      	bne.n	800e666 <memcpy+0xc>
 800e664:	4770      	bx	lr
 800e666:	b510      	push	{r4, lr}
 800e668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e66c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e670:	4291      	cmp	r1, r2
 800e672:	d1f9      	bne.n	800e668 <memcpy+0xe>
 800e674:	bd10      	pop	{r4, pc}
	...

0800e678 <nan>:
 800e678:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e680 <nan+0x8>
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	00000000 	.word	0x00000000
 800e684:	7ff80000 	.word	0x7ff80000

0800e688 <nanf>:
 800e688:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e690 <nanf+0x8>
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	7fc00000 	.word	0x7fc00000

0800e694 <__assert_func>:
 800e694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e696:	4614      	mov	r4, r2
 800e698:	461a      	mov	r2, r3
 800e69a:	4b09      	ldr	r3, [pc, #36]	@ (800e6c0 <__assert_func+0x2c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4605      	mov	r5, r0
 800e6a0:	68d8      	ldr	r0, [r3, #12]
 800e6a2:	b954      	cbnz	r4, 800e6ba <__assert_func+0x26>
 800e6a4:	4b07      	ldr	r3, [pc, #28]	@ (800e6c4 <__assert_func+0x30>)
 800e6a6:	461c      	mov	r4, r3
 800e6a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6ac:	9100      	str	r1, [sp, #0]
 800e6ae:	462b      	mov	r3, r5
 800e6b0:	4905      	ldr	r1, [pc, #20]	@ (800e6c8 <__assert_func+0x34>)
 800e6b2:	f002 f8b1 	bl	8010818 <fiprintf>
 800e6b6:	f002 f8db 	bl	8010870 <abort>
 800e6ba:	4b04      	ldr	r3, [pc, #16]	@ (800e6cc <__assert_func+0x38>)
 800e6bc:	e7f4      	b.n	800e6a8 <__assert_func+0x14>
 800e6be:	bf00      	nop
 800e6c0:	200001a4 	.word	0x200001a4
 800e6c4:	0801117d 	.word	0x0801117d
 800e6c8:	0801114f 	.word	0x0801114f
 800e6cc:	08011142 	.word	0x08011142

0800e6d0 <quorem>:
 800e6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d4:	6903      	ldr	r3, [r0, #16]
 800e6d6:	690c      	ldr	r4, [r1, #16]
 800e6d8:	42a3      	cmp	r3, r4
 800e6da:	4607      	mov	r7, r0
 800e6dc:	db7e      	blt.n	800e7dc <quorem+0x10c>
 800e6de:	3c01      	subs	r4, #1
 800e6e0:	f101 0814 	add.w	r8, r1, #20
 800e6e4:	00a3      	lsls	r3, r4, #2
 800e6e6:	f100 0514 	add.w	r5, r0, #20
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e6f0:	9301      	str	r3, [sp, #4]
 800e6f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e6f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e702:	fbb2 f6f3 	udiv	r6, r2, r3
 800e706:	d32e      	bcc.n	800e766 <quorem+0x96>
 800e708:	f04f 0a00 	mov.w	sl, #0
 800e70c:	46c4      	mov	ip, r8
 800e70e:	46ae      	mov	lr, r5
 800e710:	46d3      	mov	fp, sl
 800e712:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e716:	b298      	uxth	r0, r3
 800e718:	fb06 a000 	mla	r0, r6, r0, sl
 800e71c:	0c02      	lsrs	r2, r0, #16
 800e71e:	0c1b      	lsrs	r3, r3, #16
 800e720:	fb06 2303 	mla	r3, r6, r3, r2
 800e724:	f8de 2000 	ldr.w	r2, [lr]
 800e728:	b280      	uxth	r0, r0
 800e72a:	b292      	uxth	r2, r2
 800e72c:	1a12      	subs	r2, r2, r0
 800e72e:	445a      	add	r2, fp
 800e730:	f8de 0000 	ldr.w	r0, [lr]
 800e734:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e738:	b29b      	uxth	r3, r3
 800e73a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e73e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e742:	b292      	uxth	r2, r2
 800e744:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e748:	45e1      	cmp	r9, ip
 800e74a:	f84e 2b04 	str.w	r2, [lr], #4
 800e74e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e752:	d2de      	bcs.n	800e712 <quorem+0x42>
 800e754:	9b00      	ldr	r3, [sp, #0]
 800e756:	58eb      	ldr	r3, [r5, r3]
 800e758:	b92b      	cbnz	r3, 800e766 <quorem+0x96>
 800e75a:	9b01      	ldr	r3, [sp, #4]
 800e75c:	3b04      	subs	r3, #4
 800e75e:	429d      	cmp	r5, r3
 800e760:	461a      	mov	r2, r3
 800e762:	d32f      	bcc.n	800e7c4 <quorem+0xf4>
 800e764:	613c      	str	r4, [r7, #16]
 800e766:	4638      	mov	r0, r7
 800e768:	f001 fc58 	bl	801001c <__mcmp>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	db25      	blt.n	800e7bc <quorem+0xec>
 800e770:	4629      	mov	r1, r5
 800e772:	2000      	movs	r0, #0
 800e774:	f858 2b04 	ldr.w	r2, [r8], #4
 800e778:	f8d1 c000 	ldr.w	ip, [r1]
 800e77c:	fa1f fe82 	uxth.w	lr, r2
 800e780:	fa1f f38c 	uxth.w	r3, ip
 800e784:	eba3 030e 	sub.w	r3, r3, lr
 800e788:	4403      	add	r3, r0
 800e78a:	0c12      	lsrs	r2, r2, #16
 800e78c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e790:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e794:	b29b      	uxth	r3, r3
 800e796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e79a:	45c1      	cmp	r9, r8
 800e79c:	f841 3b04 	str.w	r3, [r1], #4
 800e7a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e7a4:	d2e6      	bcs.n	800e774 <quorem+0xa4>
 800e7a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7ae:	b922      	cbnz	r2, 800e7ba <quorem+0xea>
 800e7b0:	3b04      	subs	r3, #4
 800e7b2:	429d      	cmp	r5, r3
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	d30b      	bcc.n	800e7d0 <quorem+0x100>
 800e7b8:	613c      	str	r4, [r7, #16]
 800e7ba:	3601      	adds	r6, #1
 800e7bc:	4630      	mov	r0, r6
 800e7be:	b003      	add	sp, #12
 800e7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c4:	6812      	ldr	r2, [r2, #0]
 800e7c6:	3b04      	subs	r3, #4
 800e7c8:	2a00      	cmp	r2, #0
 800e7ca:	d1cb      	bne.n	800e764 <quorem+0x94>
 800e7cc:	3c01      	subs	r4, #1
 800e7ce:	e7c6      	b.n	800e75e <quorem+0x8e>
 800e7d0:	6812      	ldr	r2, [r2, #0]
 800e7d2:	3b04      	subs	r3, #4
 800e7d4:	2a00      	cmp	r2, #0
 800e7d6:	d1ef      	bne.n	800e7b8 <quorem+0xe8>
 800e7d8:	3c01      	subs	r4, #1
 800e7da:	e7ea      	b.n	800e7b2 <quorem+0xe2>
 800e7dc:	2000      	movs	r0, #0
 800e7de:	e7ee      	b.n	800e7be <quorem+0xee>

0800e7e0 <_dtoa_r>:
 800e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e4:	69c7      	ldr	r7, [r0, #28]
 800e7e6:	b099      	sub	sp, #100	@ 0x64
 800e7e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e7ec:	ec55 4b10 	vmov	r4, r5, d0
 800e7f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e7f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e7f4:	4683      	mov	fp, r0
 800e7f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e7fa:	b97f      	cbnz	r7, 800e81c <_dtoa_r+0x3c>
 800e7fc:	2010      	movs	r0, #16
 800e7fe:	f7fd ff8b 	bl	800c718 <malloc>
 800e802:	4602      	mov	r2, r0
 800e804:	f8cb 001c 	str.w	r0, [fp, #28]
 800e808:	b920      	cbnz	r0, 800e814 <_dtoa_r+0x34>
 800e80a:	4ba7      	ldr	r3, [pc, #668]	@ (800eaa8 <_dtoa_r+0x2c8>)
 800e80c:	21ef      	movs	r1, #239	@ 0xef
 800e80e:	48a7      	ldr	r0, [pc, #668]	@ (800eaac <_dtoa_r+0x2cc>)
 800e810:	f7ff ff40 	bl	800e694 <__assert_func>
 800e814:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e818:	6007      	str	r7, [r0, #0]
 800e81a:	60c7      	str	r7, [r0, #12]
 800e81c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e820:	6819      	ldr	r1, [r3, #0]
 800e822:	b159      	cbz	r1, 800e83c <_dtoa_r+0x5c>
 800e824:	685a      	ldr	r2, [r3, #4]
 800e826:	604a      	str	r2, [r1, #4]
 800e828:	2301      	movs	r3, #1
 800e82a:	4093      	lsls	r3, r2
 800e82c:	608b      	str	r3, [r1, #8]
 800e82e:	4658      	mov	r0, fp
 800e830:	f001 f970 	bl	800fb14 <_Bfree>
 800e834:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]
 800e83c:	1e2b      	subs	r3, r5, #0
 800e83e:	bfb9      	ittee	lt
 800e840:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e844:	9303      	strlt	r3, [sp, #12]
 800e846:	2300      	movge	r3, #0
 800e848:	6033      	strge	r3, [r6, #0]
 800e84a:	9f03      	ldr	r7, [sp, #12]
 800e84c:	4b98      	ldr	r3, [pc, #608]	@ (800eab0 <_dtoa_r+0x2d0>)
 800e84e:	bfbc      	itt	lt
 800e850:	2201      	movlt	r2, #1
 800e852:	6032      	strlt	r2, [r6, #0]
 800e854:	43bb      	bics	r3, r7
 800e856:	d112      	bne.n	800e87e <_dtoa_r+0x9e>
 800e858:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e85a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e85e:	6013      	str	r3, [r2, #0]
 800e860:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e864:	4323      	orrs	r3, r4
 800e866:	f000 854d 	beq.w	800f304 <_dtoa_r+0xb24>
 800e86a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e86c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800eac4 <_dtoa_r+0x2e4>
 800e870:	2b00      	cmp	r3, #0
 800e872:	f000 854f 	beq.w	800f314 <_dtoa_r+0xb34>
 800e876:	f10a 0303 	add.w	r3, sl, #3
 800e87a:	f000 bd49 	b.w	800f310 <_dtoa_r+0xb30>
 800e87e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e882:	2200      	movs	r2, #0
 800e884:	ec51 0b17 	vmov	r0, r1, d7
 800e888:	2300      	movs	r3, #0
 800e88a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e88e:	f7f2 f943 	bl	8000b18 <__aeabi_dcmpeq>
 800e892:	4680      	mov	r8, r0
 800e894:	b158      	cbz	r0, 800e8ae <_dtoa_r+0xce>
 800e896:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e898:	2301      	movs	r3, #1
 800e89a:	6013      	str	r3, [r2, #0]
 800e89c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e89e:	b113      	cbz	r3, 800e8a6 <_dtoa_r+0xc6>
 800e8a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e8a2:	4b84      	ldr	r3, [pc, #528]	@ (800eab4 <_dtoa_r+0x2d4>)
 800e8a4:	6013      	str	r3, [r2, #0]
 800e8a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800eac8 <_dtoa_r+0x2e8>
 800e8aa:	f000 bd33 	b.w	800f314 <_dtoa_r+0xb34>
 800e8ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e8b2:	aa16      	add	r2, sp, #88	@ 0x58
 800e8b4:	a917      	add	r1, sp, #92	@ 0x5c
 800e8b6:	4658      	mov	r0, fp
 800e8b8:	f001 fcd0 	bl	801025c <__d2b>
 800e8bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e8c0:	4681      	mov	r9, r0
 800e8c2:	2e00      	cmp	r6, #0
 800e8c4:	d077      	beq.n	800e9b6 <_dtoa_r+0x1d6>
 800e8c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e8cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e8d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e8dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	4b74      	ldr	r3, [pc, #464]	@ (800eab8 <_dtoa_r+0x2d8>)
 800e8e6:	f7f1 fcf7 	bl	80002d8 <__aeabi_dsub>
 800e8ea:	a369      	add	r3, pc, #420	@ (adr r3, 800ea90 <_dtoa_r+0x2b0>)
 800e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f0:	f7f1 feaa 	bl	8000648 <__aeabi_dmul>
 800e8f4:	a368      	add	r3, pc, #416	@ (adr r3, 800ea98 <_dtoa_r+0x2b8>)
 800e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fa:	f7f1 fcef 	bl	80002dc <__adddf3>
 800e8fe:	4604      	mov	r4, r0
 800e900:	4630      	mov	r0, r6
 800e902:	460d      	mov	r5, r1
 800e904:	f7f1 fe36 	bl	8000574 <__aeabi_i2d>
 800e908:	a365      	add	r3, pc, #404	@ (adr r3, 800eaa0 <_dtoa_r+0x2c0>)
 800e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90e:	f7f1 fe9b 	bl	8000648 <__aeabi_dmul>
 800e912:	4602      	mov	r2, r0
 800e914:	460b      	mov	r3, r1
 800e916:	4620      	mov	r0, r4
 800e918:	4629      	mov	r1, r5
 800e91a:	f7f1 fcdf 	bl	80002dc <__adddf3>
 800e91e:	4604      	mov	r4, r0
 800e920:	460d      	mov	r5, r1
 800e922:	f7f2 f941 	bl	8000ba8 <__aeabi_d2iz>
 800e926:	2200      	movs	r2, #0
 800e928:	4607      	mov	r7, r0
 800e92a:	2300      	movs	r3, #0
 800e92c:	4620      	mov	r0, r4
 800e92e:	4629      	mov	r1, r5
 800e930:	f7f2 f8fc 	bl	8000b2c <__aeabi_dcmplt>
 800e934:	b140      	cbz	r0, 800e948 <_dtoa_r+0x168>
 800e936:	4638      	mov	r0, r7
 800e938:	f7f1 fe1c 	bl	8000574 <__aeabi_i2d>
 800e93c:	4622      	mov	r2, r4
 800e93e:	462b      	mov	r3, r5
 800e940:	f7f2 f8ea 	bl	8000b18 <__aeabi_dcmpeq>
 800e944:	b900      	cbnz	r0, 800e948 <_dtoa_r+0x168>
 800e946:	3f01      	subs	r7, #1
 800e948:	2f16      	cmp	r7, #22
 800e94a:	d851      	bhi.n	800e9f0 <_dtoa_r+0x210>
 800e94c:	4b5b      	ldr	r3, [pc, #364]	@ (800eabc <_dtoa_r+0x2dc>)
 800e94e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e95a:	f7f2 f8e7 	bl	8000b2c <__aeabi_dcmplt>
 800e95e:	2800      	cmp	r0, #0
 800e960:	d048      	beq.n	800e9f4 <_dtoa_r+0x214>
 800e962:	3f01      	subs	r7, #1
 800e964:	2300      	movs	r3, #0
 800e966:	9312      	str	r3, [sp, #72]	@ 0x48
 800e968:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e96a:	1b9b      	subs	r3, r3, r6
 800e96c:	1e5a      	subs	r2, r3, #1
 800e96e:	bf44      	itt	mi
 800e970:	f1c3 0801 	rsbmi	r8, r3, #1
 800e974:	2300      	movmi	r3, #0
 800e976:	9208      	str	r2, [sp, #32]
 800e978:	bf54      	ite	pl
 800e97a:	f04f 0800 	movpl.w	r8, #0
 800e97e:	9308      	strmi	r3, [sp, #32]
 800e980:	2f00      	cmp	r7, #0
 800e982:	db39      	blt.n	800e9f8 <_dtoa_r+0x218>
 800e984:	9b08      	ldr	r3, [sp, #32]
 800e986:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e988:	443b      	add	r3, r7
 800e98a:	9308      	str	r3, [sp, #32]
 800e98c:	2300      	movs	r3, #0
 800e98e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e992:	2b09      	cmp	r3, #9
 800e994:	d864      	bhi.n	800ea60 <_dtoa_r+0x280>
 800e996:	2b05      	cmp	r3, #5
 800e998:	bfc4      	itt	gt
 800e99a:	3b04      	subgt	r3, #4
 800e99c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a0:	f1a3 0302 	sub.w	r3, r3, #2
 800e9a4:	bfcc      	ite	gt
 800e9a6:	2400      	movgt	r4, #0
 800e9a8:	2401      	movle	r4, #1
 800e9aa:	2b03      	cmp	r3, #3
 800e9ac:	d863      	bhi.n	800ea76 <_dtoa_r+0x296>
 800e9ae:	e8df f003 	tbb	[pc, r3]
 800e9b2:	372a      	.short	0x372a
 800e9b4:	5535      	.short	0x5535
 800e9b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e9ba:	441e      	add	r6, r3
 800e9bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e9c0:	2b20      	cmp	r3, #32
 800e9c2:	bfc1      	itttt	gt
 800e9c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e9c8:	409f      	lslgt	r7, r3
 800e9ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e9ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e9d2:	bfd6      	itet	le
 800e9d4:	f1c3 0320 	rsble	r3, r3, #32
 800e9d8:	ea47 0003 	orrgt.w	r0, r7, r3
 800e9dc:	fa04 f003 	lslle.w	r0, r4, r3
 800e9e0:	f7f1 fdb8 	bl	8000554 <__aeabi_ui2d>
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e9ea:	3e01      	subs	r6, #1
 800e9ec:	9214      	str	r2, [sp, #80]	@ 0x50
 800e9ee:	e777      	b.n	800e8e0 <_dtoa_r+0x100>
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e7b8      	b.n	800e966 <_dtoa_r+0x186>
 800e9f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e9f6:	e7b7      	b.n	800e968 <_dtoa_r+0x188>
 800e9f8:	427b      	negs	r3, r7
 800e9fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	eba8 0807 	sub.w	r8, r8, r7
 800ea02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea04:	e7c4      	b.n	800e990 <_dtoa_r+0x1b0>
 800ea06:	2300      	movs	r3, #0
 800ea08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	dc35      	bgt.n	800ea7c <_dtoa_r+0x29c>
 800ea10:	2301      	movs	r3, #1
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	9307      	str	r3, [sp, #28]
 800ea16:	461a      	mov	r2, r3
 800ea18:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea1a:	e00b      	b.n	800ea34 <_dtoa_r+0x254>
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	e7f3      	b.n	800ea08 <_dtoa_r+0x228>
 800ea20:	2300      	movs	r3, #0
 800ea22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea26:	18fb      	adds	r3, r7, r3
 800ea28:	9300      	str	r3, [sp, #0]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	9307      	str	r3, [sp, #28]
 800ea30:	bfb8      	it	lt
 800ea32:	2301      	movlt	r3, #1
 800ea34:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ea38:	2100      	movs	r1, #0
 800ea3a:	2204      	movs	r2, #4
 800ea3c:	f102 0514 	add.w	r5, r2, #20
 800ea40:	429d      	cmp	r5, r3
 800ea42:	d91f      	bls.n	800ea84 <_dtoa_r+0x2a4>
 800ea44:	6041      	str	r1, [r0, #4]
 800ea46:	4658      	mov	r0, fp
 800ea48:	f001 f824 	bl	800fa94 <_Balloc>
 800ea4c:	4682      	mov	sl, r0
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d13c      	bne.n	800eacc <_dtoa_r+0x2ec>
 800ea52:	4b1b      	ldr	r3, [pc, #108]	@ (800eac0 <_dtoa_r+0x2e0>)
 800ea54:	4602      	mov	r2, r0
 800ea56:	f240 11af 	movw	r1, #431	@ 0x1af
 800ea5a:	e6d8      	b.n	800e80e <_dtoa_r+0x2e>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e7e0      	b.n	800ea22 <_dtoa_r+0x242>
 800ea60:	2401      	movs	r4, #1
 800ea62:	2300      	movs	r3, #0
 800ea64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ea68:	f04f 33ff 	mov.w	r3, #4294967295
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	9307      	str	r3, [sp, #28]
 800ea70:	2200      	movs	r2, #0
 800ea72:	2312      	movs	r3, #18
 800ea74:	e7d0      	b.n	800ea18 <_dtoa_r+0x238>
 800ea76:	2301      	movs	r3, #1
 800ea78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea7a:	e7f5      	b.n	800ea68 <_dtoa_r+0x288>
 800ea7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea7e:	9300      	str	r3, [sp, #0]
 800ea80:	9307      	str	r3, [sp, #28]
 800ea82:	e7d7      	b.n	800ea34 <_dtoa_r+0x254>
 800ea84:	3101      	adds	r1, #1
 800ea86:	0052      	lsls	r2, r2, #1
 800ea88:	e7d8      	b.n	800ea3c <_dtoa_r+0x25c>
 800ea8a:	bf00      	nop
 800ea8c:	f3af 8000 	nop.w
 800ea90:	636f4361 	.word	0x636f4361
 800ea94:	3fd287a7 	.word	0x3fd287a7
 800ea98:	8b60c8b3 	.word	0x8b60c8b3
 800ea9c:	3fc68a28 	.word	0x3fc68a28
 800eaa0:	509f79fb 	.word	0x509f79fb
 800eaa4:	3fd34413 	.word	0x3fd34413
 800eaa8:	0801118b 	.word	0x0801118b
 800eaac:	080111a2 	.word	0x080111a2
 800eab0:	7ff00000 	.word	0x7ff00000
 800eab4:	08011112 	.word	0x08011112
 800eab8:	3ff80000 	.word	0x3ff80000
 800eabc:	080112f8 	.word	0x080112f8
 800eac0:	080111fa 	.word	0x080111fa
 800eac4:	08011187 	.word	0x08011187
 800eac8:	08011111 	.word	0x08011111
 800eacc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ead0:	6018      	str	r0, [r3, #0]
 800ead2:	9b07      	ldr	r3, [sp, #28]
 800ead4:	2b0e      	cmp	r3, #14
 800ead6:	f200 80a4 	bhi.w	800ec22 <_dtoa_r+0x442>
 800eada:	2c00      	cmp	r4, #0
 800eadc:	f000 80a1 	beq.w	800ec22 <_dtoa_r+0x442>
 800eae0:	2f00      	cmp	r7, #0
 800eae2:	dd33      	ble.n	800eb4c <_dtoa_r+0x36c>
 800eae4:	4bad      	ldr	r3, [pc, #692]	@ (800ed9c <_dtoa_r+0x5bc>)
 800eae6:	f007 020f 	and.w	r2, r7, #15
 800eaea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eaee:	ed93 7b00 	vldr	d7, [r3]
 800eaf2:	05f8      	lsls	r0, r7, #23
 800eaf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800eaf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800eafc:	d516      	bpl.n	800eb2c <_dtoa_r+0x34c>
 800eafe:	4ba8      	ldr	r3, [pc, #672]	@ (800eda0 <_dtoa_r+0x5c0>)
 800eb00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb08:	f7f1 fec8 	bl	800089c <__aeabi_ddiv>
 800eb0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb10:	f004 040f 	and.w	r4, r4, #15
 800eb14:	2603      	movs	r6, #3
 800eb16:	4da2      	ldr	r5, [pc, #648]	@ (800eda0 <_dtoa_r+0x5c0>)
 800eb18:	b954      	cbnz	r4, 800eb30 <_dtoa_r+0x350>
 800eb1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb22:	f7f1 febb 	bl	800089c <__aeabi_ddiv>
 800eb26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb2a:	e028      	b.n	800eb7e <_dtoa_r+0x39e>
 800eb2c:	2602      	movs	r6, #2
 800eb2e:	e7f2      	b.n	800eb16 <_dtoa_r+0x336>
 800eb30:	07e1      	lsls	r1, r4, #31
 800eb32:	d508      	bpl.n	800eb46 <_dtoa_r+0x366>
 800eb34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb3c:	f7f1 fd84 	bl	8000648 <__aeabi_dmul>
 800eb40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb44:	3601      	adds	r6, #1
 800eb46:	1064      	asrs	r4, r4, #1
 800eb48:	3508      	adds	r5, #8
 800eb4a:	e7e5      	b.n	800eb18 <_dtoa_r+0x338>
 800eb4c:	f000 80d2 	beq.w	800ecf4 <_dtoa_r+0x514>
 800eb50:	427c      	negs	r4, r7
 800eb52:	4b92      	ldr	r3, [pc, #584]	@ (800ed9c <_dtoa_r+0x5bc>)
 800eb54:	4d92      	ldr	r5, [pc, #584]	@ (800eda0 <_dtoa_r+0x5c0>)
 800eb56:	f004 020f 	and.w	r2, r4, #15
 800eb5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb66:	f7f1 fd6f 	bl	8000648 <__aeabi_dmul>
 800eb6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb6e:	1124      	asrs	r4, r4, #4
 800eb70:	2300      	movs	r3, #0
 800eb72:	2602      	movs	r6, #2
 800eb74:	2c00      	cmp	r4, #0
 800eb76:	f040 80b2 	bne.w	800ecde <_dtoa_r+0x4fe>
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1d3      	bne.n	800eb26 <_dtoa_r+0x346>
 800eb7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eb80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f000 80b7 	beq.w	800ecf8 <_dtoa_r+0x518>
 800eb8a:	4b86      	ldr	r3, [pc, #536]	@ (800eda4 <_dtoa_r+0x5c4>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	4620      	mov	r0, r4
 800eb90:	4629      	mov	r1, r5
 800eb92:	f7f1 ffcb 	bl	8000b2c <__aeabi_dcmplt>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	f000 80ae 	beq.w	800ecf8 <_dtoa_r+0x518>
 800eb9c:	9b07      	ldr	r3, [sp, #28]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f000 80aa 	beq.w	800ecf8 <_dtoa_r+0x518>
 800eba4:	9b00      	ldr	r3, [sp, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	dd37      	ble.n	800ec1a <_dtoa_r+0x43a>
 800ebaa:	1e7b      	subs	r3, r7, #1
 800ebac:	9304      	str	r3, [sp, #16]
 800ebae:	4620      	mov	r0, r4
 800ebb0:	4b7d      	ldr	r3, [pc, #500]	@ (800eda8 <_dtoa_r+0x5c8>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	4629      	mov	r1, r5
 800ebb6:	f7f1 fd47 	bl	8000648 <__aeabi_dmul>
 800ebba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebbe:	9c00      	ldr	r4, [sp, #0]
 800ebc0:	3601      	adds	r6, #1
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f7f1 fcd6 	bl	8000574 <__aeabi_i2d>
 800ebc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebcc:	f7f1 fd3c 	bl	8000648 <__aeabi_dmul>
 800ebd0:	4b76      	ldr	r3, [pc, #472]	@ (800edac <_dtoa_r+0x5cc>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f7f1 fb82 	bl	80002dc <__adddf3>
 800ebd8:	4605      	mov	r5, r0
 800ebda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ebde:	2c00      	cmp	r4, #0
 800ebe0:	f040 808d 	bne.w	800ecfe <_dtoa_r+0x51e>
 800ebe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebe8:	4b71      	ldr	r3, [pc, #452]	@ (800edb0 <_dtoa_r+0x5d0>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	f7f1 fb74 	bl	80002d8 <__aeabi_dsub>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ebf8:	462a      	mov	r2, r5
 800ebfa:	4633      	mov	r3, r6
 800ebfc:	f7f1 ffb4 	bl	8000b68 <__aeabi_dcmpgt>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	f040 828b 	bne.w	800f11c <_dtoa_r+0x93c>
 800ec06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec0a:	462a      	mov	r2, r5
 800ec0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ec10:	f7f1 ff8c 	bl	8000b2c <__aeabi_dcmplt>
 800ec14:	2800      	cmp	r0, #0
 800ec16:	f040 8128 	bne.w	800ee6a <_dtoa_r+0x68a>
 800ec1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ec1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ec22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f2c0 815a 	blt.w	800eede <_dtoa_r+0x6fe>
 800ec2a:	2f0e      	cmp	r7, #14
 800ec2c:	f300 8157 	bgt.w	800eede <_dtoa_r+0x6fe>
 800ec30:	4b5a      	ldr	r3, [pc, #360]	@ (800ed9c <_dtoa_r+0x5bc>)
 800ec32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ec36:	ed93 7b00 	vldr	d7, [r3]
 800ec3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	ed8d 7b00 	vstr	d7, [sp]
 800ec42:	da03      	bge.n	800ec4c <_dtoa_r+0x46c>
 800ec44:	9b07      	ldr	r3, [sp, #28]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f340 8101 	ble.w	800ee4e <_dtoa_r+0x66e>
 800ec4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ec50:	4656      	mov	r6, sl
 800ec52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec56:	4620      	mov	r0, r4
 800ec58:	4629      	mov	r1, r5
 800ec5a:	f7f1 fe1f 	bl	800089c <__aeabi_ddiv>
 800ec5e:	f7f1 ffa3 	bl	8000ba8 <__aeabi_d2iz>
 800ec62:	4680      	mov	r8, r0
 800ec64:	f7f1 fc86 	bl	8000574 <__aeabi_i2d>
 800ec68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec6c:	f7f1 fcec 	bl	8000648 <__aeabi_dmul>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	4620      	mov	r0, r4
 800ec76:	4629      	mov	r1, r5
 800ec78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ec7c:	f7f1 fb2c 	bl	80002d8 <__aeabi_dsub>
 800ec80:	f806 4b01 	strb.w	r4, [r6], #1
 800ec84:	9d07      	ldr	r5, [sp, #28]
 800ec86:	eba6 040a 	sub.w	r4, r6, sl
 800ec8a:	42a5      	cmp	r5, r4
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	f040 8117 	bne.w	800eec2 <_dtoa_r+0x6e2>
 800ec94:	f7f1 fb22 	bl	80002dc <__adddf3>
 800ec98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	460d      	mov	r5, r1
 800eca0:	f7f1 ff62 	bl	8000b68 <__aeabi_dcmpgt>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	f040 80f9 	bne.w	800ee9c <_dtoa_r+0x6bc>
 800ecaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecae:	4620      	mov	r0, r4
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	f7f1 ff31 	bl	8000b18 <__aeabi_dcmpeq>
 800ecb6:	b118      	cbz	r0, 800ecc0 <_dtoa_r+0x4e0>
 800ecb8:	f018 0f01 	tst.w	r8, #1
 800ecbc:	f040 80ee 	bne.w	800ee9c <_dtoa_r+0x6bc>
 800ecc0:	4649      	mov	r1, r9
 800ecc2:	4658      	mov	r0, fp
 800ecc4:	f000 ff26 	bl	800fb14 <_Bfree>
 800ecc8:	2300      	movs	r3, #0
 800ecca:	7033      	strb	r3, [r6, #0]
 800eccc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ecce:	3701      	adds	r7, #1
 800ecd0:	601f      	str	r7, [r3, #0]
 800ecd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 831d 	beq.w	800f314 <_dtoa_r+0xb34>
 800ecda:	601e      	str	r6, [r3, #0]
 800ecdc:	e31a      	b.n	800f314 <_dtoa_r+0xb34>
 800ecde:	07e2      	lsls	r2, r4, #31
 800ece0:	d505      	bpl.n	800ecee <_dtoa_r+0x50e>
 800ece2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ece6:	f7f1 fcaf 	bl	8000648 <__aeabi_dmul>
 800ecea:	3601      	adds	r6, #1
 800ecec:	2301      	movs	r3, #1
 800ecee:	1064      	asrs	r4, r4, #1
 800ecf0:	3508      	adds	r5, #8
 800ecf2:	e73f      	b.n	800eb74 <_dtoa_r+0x394>
 800ecf4:	2602      	movs	r6, #2
 800ecf6:	e742      	b.n	800eb7e <_dtoa_r+0x39e>
 800ecf8:	9c07      	ldr	r4, [sp, #28]
 800ecfa:	9704      	str	r7, [sp, #16]
 800ecfc:	e761      	b.n	800ebc2 <_dtoa_r+0x3e2>
 800ecfe:	4b27      	ldr	r3, [pc, #156]	@ (800ed9c <_dtoa_r+0x5bc>)
 800ed00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed0a:	4454      	add	r4, sl
 800ed0c:	2900      	cmp	r1, #0
 800ed0e:	d053      	beq.n	800edb8 <_dtoa_r+0x5d8>
 800ed10:	4928      	ldr	r1, [pc, #160]	@ (800edb4 <_dtoa_r+0x5d4>)
 800ed12:	2000      	movs	r0, #0
 800ed14:	f7f1 fdc2 	bl	800089c <__aeabi_ddiv>
 800ed18:	4633      	mov	r3, r6
 800ed1a:	462a      	mov	r2, r5
 800ed1c:	f7f1 fadc 	bl	80002d8 <__aeabi_dsub>
 800ed20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ed24:	4656      	mov	r6, sl
 800ed26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed2a:	f7f1 ff3d 	bl	8000ba8 <__aeabi_d2iz>
 800ed2e:	4605      	mov	r5, r0
 800ed30:	f7f1 fc20 	bl	8000574 <__aeabi_i2d>
 800ed34:	4602      	mov	r2, r0
 800ed36:	460b      	mov	r3, r1
 800ed38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed3c:	f7f1 facc 	bl	80002d8 <__aeabi_dsub>
 800ed40:	3530      	adds	r5, #48	@ 0x30
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ed4a:	f806 5b01 	strb.w	r5, [r6], #1
 800ed4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ed52:	f7f1 feeb 	bl	8000b2c <__aeabi_dcmplt>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d171      	bne.n	800ee3e <_dtoa_r+0x65e>
 800ed5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed5e:	4911      	ldr	r1, [pc, #68]	@ (800eda4 <_dtoa_r+0x5c4>)
 800ed60:	2000      	movs	r0, #0
 800ed62:	f7f1 fab9 	bl	80002d8 <__aeabi_dsub>
 800ed66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ed6a:	f7f1 fedf 	bl	8000b2c <__aeabi_dcmplt>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	f040 8095 	bne.w	800ee9e <_dtoa_r+0x6be>
 800ed74:	42a6      	cmp	r6, r4
 800ed76:	f43f af50 	beq.w	800ec1a <_dtoa_r+0x43a>
 800ed7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ed7e:	4b0a      	ldr	r3, [pc, #40]	@ (800eda8 <_dtoa_r+0x5c8>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	f7f1 fc61 	bl	8000648 <__aeabi_dmul>
 800ed86:	4b08      	ldr	r3, [pc, #32]	@ (800eda8 <_dtoa_r+0x5c8>)
 800ed88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed92:	f7f1 fc59 	bl	8000648 <__aeabi_dmul>
 800ed96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed9a:	e7c4      	b.n	800ed26 <_dtoa_r+0x546>
 800ed9c:	080112f8 	.word	0x080112f8
 800eda0:	080112d0 	.word	0x080112d0
 800eda4:	3ff00000 	.word	0x3ff00000
 800eda8:	40240000 	.word	0x40240000
 800edac:	401c0000 	.word	0x401c0000
 800edb0:	40140000 	.word	0x40140000
 800edb4:	3fe00000 	.word	0x3fe00000
 800edb8:	4631      	mov	r1, r6
 800edba:	4628      	mov	r0, r5
 800edbc:	f7f1 fc44 	bl	8000648 <__aeabi_dmul>
 800edc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800edc4:	9415      	str	r4, [sp, #84]	@ 0x54
 800edc6:	4656      	mov	r6, sl
 800edc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edcc:	f7f1 feec 	bl	8000ba8 <__aeabi_d2iz>
 800edd0:	4605      	mov	r5, r0
 800edd2:	f7f1 fbcf 	bl	8000574 <__aeabi_i2d>
 800edd6:	4602      	mov	r2, r0
 800edd8:	460b      	mov	r3, r1
 800edda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edde:	f7f1 fa7b 	bl	80002d8 <__aeabi_dsub>
 800ede2:	3530      	adds	r5, #48	@ 0x30
 800ede4:	f806 5b01 	strb.w	r5, [r6], #1
 800ede8:	4602      	mov	r2, r0
 800edea:	460b      	mov	r3, r1
 800edec:	42a6      	cmp	r6, r4
 800edee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800edf2:	f04f 0200 	mov.w	r2, #0
 800edf6:	d124      	bne.n	800ee42 <_dtoa_r+0x662>
 800edf8:	4bac      	ldr	r3, [pc, #688]	@ (800f0ac <_dtoa_r+0x8cc>)
 800edfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800edfe:	f7f1 fa6d 	bl	80002dc <__adddf3>
 800ee02:	4602      	mov	r2, r0
 800ee04:	460b      	mov	r3, r1
 800ee06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee0a:	f7f1 fead 	bl	8000b68 <__aeabi_dcmpgt>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d145      	bne.n	800ee9e <_dtoa_r+0x6be>
 800ee12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ee16:	49a5      	ldr	r1, [pc, #660]	@ (800f0ac <_dtoa_r+0x8cc>)
 800ee18:	2000      	movs	r0, #0
 800ee1a:	f7f1 fa5d 	bl	80002d8 <__aeabi_dsub>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	460b      	mov	r3, r1
 800ee22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee26:	f7f1 fe81 	bl	8000b2c <__aeabi_dcmplt>
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	f43f aef5 	beq.w	800ec1a <_dtoa_r+0x43a>
 800ee30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ee32:	1e73      	subs	r3, r6, #1
 800ee34:	9315      	str	r3, [sp, #84]	@ 0x54
 800ee36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ee3a:	2b30      	cmp	r3, #48	@ 0x30
 800ee3c:	d0f8      	beq.n	800ee30 <_dtoa_r+0x650>
 800ee3e:	9f04      	ldr	r7, [sp, #16]
 800ee40:	e73e      	b.n	800ecc0 <_dtoa_r+0x4e0>
 800ee42:	4b9b      	ldr	r3, [pc, #620]	@ (800f0b0 <_dtoa_r+0x8d0>)
 800ee44:	f7f1 fc00 	bl	8000648 <__aeabi_dmul>
 800ee48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee4c:	e7bc      	b.n	800edc8 <_dtoa_r+0x5e8>
 800ee4e:	d10c      	bne.n	800ee6a <_dtoa_r+0x68a>
 800ee50:	4b98      	ldr	r3, [pc, #608]	@ (800f0b4 <_dtoa_r+0x8d4>)
 800ee52:	2200      	movs	r2, #0
 800ee54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee58:	f7f1 fbf6 	bl	8000648 <__aeabi_dmul>
 800ee5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee60:	f7f1 fe78 	bl	8000b54 <__aeabi_dcmpge>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	f000 8157 	beq.w	800f118 <_dtoa_r+0x938>
 800ee6a:	2400      	movs	r4, #0
 800ee6c:	4625      	mov	r5, r4
 800ee6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee70:	43db      	mvns	r3, r3
 800ee72:	9304      	str	r3, [sp, #16]
 800ee74:	4656      	mov	r6, sl
 800ee76:	2700      	movs	r7, #0
 800ee78:	4621      	mov	r1, r4
 800ee7a:	4658      	mov	r0, fp
 800ee7c:	f000 fe4a 	bl	800fb14 <_Bfree>
 800ee80:	2d00      	cmp	r5, #0
 800ee82:	d0dc      	beq.n	800ee3e <_dtoa_r+0x65e>
 800ee84:	b12f      	cbz	r7, 800ee92 <_dtoa_r+0x6b2>
 800ee86:	42af      	cmp	r7, r5
 800ee88:	d003      	beq.n	800ee92 <_dtoa_r+0x6b2>
 800ee8a:	4639      	mov	r1, r7
 800ee8c:	4658      	mov	r0, fp
 800ee8e:	f000 fe41 	bl	800fb14 <_Bfree>
 800ee92:	4629      	mov	r1, r5
 800ee94:	4658      	mov	r0, fp
 800ee96:	f000 fe3d 	bl	800fb14 <_Bfree>
 800ee9a:	e7d0      	b.n	800ee3e <_dtoa_r+0x65e>
 800ee9c:	9704      	str	r7, [sp, #16]
 800ee9e:	4633      	mov	r3, r6
 800eea0:	461e      	mov	r6, r3
 800eea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eea6:	2a39      	cmp	r2, #57	@ 0x39
 800eea8:	d107      	bne.n	800eeba <_dtoa_r+0x6da>
 800eeaa:	459a      	cmp	sl, r3
 800eeac:	d1f8      	bne.n	800eea0 <_dtoa_r+0x6c0>
 800eeae:	9a04      	ldr	r2, [sp, #16]
 800eeb0:	3201      	adds	r2, #1
 800eeb2:	9204      	str	r2, [sp, #16]
 800eeb4:	2230      	movs	r2, #48	@ 0x30
 800eeb6:	f88a 2000 	strb.w	r2, [sl]
 800eeba:	781a      	ldrb	r2, [r3, #0]
 800eebc:	3201      	adds	r2, #1
 800eebe:	701a      	strb	r2, [r3, #0]
 800eec0:	e7bd      	b.n	800ee3e <_dtoa_r+0x65e>
 800eec2:	4b7b      	ldr	r3, [pc, #492]	@ (800f0b0 <_dtoa_r+0x8d0>)
 800eec4:	2200      	movs	r2, #0
 800eec6:	f7f1 fbbf 	bl	8000648 <__aeabi_dmul>
 800eeca:	2200      	movs	r2, #0
 800eecc:	2300      	movs	r3, #0
 800eece:	4604      	mov	r4, r0
 800eed0:	460d      	mov	r5, r1
 800eed2:	f7f1 fe21 	bl	8000b18 <__aeabi_dcmpeq>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	f43f aebb 	beq.w	800ec52 <_dtoa_r+0x472>
 800eedc:	e6f0      	b.n	800ecc0 <_dtoa_r+0x4e0>
 800eede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eee0:	2a00      	cmp	r2, #0
 800eee2:	f000 80db 	beq.w	800f09c <_dtoa_r+0x8bc>
 800eee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eee8:	2a01      	cmp	r2, #1
 800eeea:	f300 80bf 	bgt.w	800f06c <_dtoa_r+0x88c>
 800eeee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800eef0:	2a00      	cmp	r2, #0
 800eef2:	f000 80b7 	beq.w	800f064 <_dtoa_r+0x884>
 800eef6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800eefa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eefc:	4646      	mov	r6, r8
 800eefe:	9a08      	ldr	r2, [sp, #32]
 800ef00:	2101      	movs	r1, #1
 800ef02:	441a      	add	r2, r3
 800ef04:	4658      	mov	r0, fp
 800ef06:	4498      	add	r8, r3
 800ef08:	9208      	str	r2, [sp, #32]
 800ef0a:	f000 ff01 	bl	800fd10 <__i2b>
 800ef0e:	4605      	mov	r5, r0
 800ef10:	b15e      	cbz	r6, 800ef2a <_dtoa_r+0x74a>
 800ef12:	9b08      	ldr	r3, [sp, #32]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	dd08      	ble.n	800ef2a <_dtoa_r+0x74a>
 800ef18:	42b3      	cmp	r3, r6
 800ef1a:	9a08      	ldr	r2, [sp, #32]
 800ef1c:	bfa8      	it	ge
 800ef1e:	4633      	movge	r3, r6
 800ef20:	eba8 0803 	sub.w	r8, r8, r3
 800ef24:	1af6      	subs	r6, r6, r3
 800ef26:	1ad3      	subs	r3, r2, r3
 800ef28:	9308      	str	r3, [sp, #32]
 800ef2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef2c:	b1f3      	cbz	r3, 800ef6c <_dtoa_r+0x78c>
 800ef2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f000 80b7 	beq.w	800f0a4 <_dtoa_r+0x8c4>
 800ef36:	b18c      	cbz	r4, 800ef5c <_dtoa_r+0x77c>
 800ef38:	4629      	mov	r1, r5
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	4658      	mov	r0, fp
 800ef3e:	f000 ffa7 	bl	800fe90 <__pow5mult>
 800ef42:	464a      	mov	r2, r9
 800ef44:	4601      	mov	r1, r0
 800ef46:	4605      	mov	r5, r0
 800ef48:	4658      	mov	r0, fp
 800ef4a:	f000 fef7 	bl	800fd3c <__multiply>
 800ef4e:	4649      	mov	r1, r9
 800ef50:	9004      	str	r0, [sp, #16]
 800ef52:	4658      	mov	r0, fp
 800ef54:	f000 fdde 	bl	800fb14 <_Bfree>
 800ef58:	9b04      	ldr	r3, [sp, #16]
 800ef5a:	4699      	mov	r9, r3
 800ef5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef5e:	1b1a      	subs	r2, r3, r4
 800ef60:	d004      	beq.n	800ef6c <_dtoa_r+0x78c>
 800ef62:	4649      	mov	r1, r9
 800ef64:	4658      	mov	r0, fp
 800ef66:	f000 ff93 	bl	800fe90 <__pow5mult>
 800ef6a:	4681      	mov	r9, r0
 800ef6c:	2101      	movs	r1, #1
 800ef6e:	4658      	mov	r0, fp
 800ef70:	f000 fece 	bl	800fd10 <__i2b>
 800ef74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef76:	4604      	mov	r4, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	f000 81cf 	beq.w	800f31c <_dtoa_r+0xb3c>
 800ef7e:	461a      	mov	r2, r3
 800ef80:	4601      	mov	r1, r0
 800ef82:	4658      	mov	r0, fp
 800ef84:	f000 ff84 	bl	800fe90 <__pow5mult>
 800ef88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	f300 8095 	bgt.w	800f0bc <_dtoa_r+0x8dc>
 800ef92:	9b02      	ldr	r3, [sp, #8]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	f040 8087 	bne.w	800f0a8 <_dtoa_r+0x8c8>
 800ef9a:	9b03      	ldr	r3, [sp, #12]
 800ef9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f040 8089 	bne.w	800f0b8 <_dtoa_r+0x8d8>
 800efa6:	9b03      	ldr	r3, [sp, #12]
 800efa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800efac:	0d1b      	lsrs	r3, r3, #20
 800efae:	051b      	lsls	r3, r3, #20
 800efb0:	b12b      	cbz	r3, 800efbe <_dtoa_r+0x7de>
 800efb2:	9b08      	ldr	r3, [sp, #32]
 800efb4:	3301      	adds	r3, #1
 800efb6:	9308      	str	r3, [sp, #32]
 800efb8:	f108 0801 	add.w	r8, r8, #1
 800efbc:	2301      	movs	r3, #1
 800efbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800efc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f000 81b0 	beq.w	800f328 <_dtoa_r+0xb48>
 800efc8:	6923      	ldr	r3, [r4, #16]
 800efca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800efce:	6918      	ldr	r0, [r3, #16]
 800efd0:	f000 fe52 	bl	800fc78 <__hi0bits>
 800efd4:	f1c0 0020 	rsb	r0, r0, #32
 800efd8:	9b08      	ldr	r3, [sp, #32]
 800efda:	4418      	add	r0, r3
 800efdc:	f010 001f 	ands.w	r0, r0, #31
 800efe0:	d077      	beq.n	800f0d2 <_dtoa_r+0x8f2>
 800efe2:	f1c0 0320 	rsb	r3, r0, #32
 800efe6:	2b04      	cmp	r3, #4
 800efe8:	dd6b      	ble.n	800f0c2 <_dtoa_r+0x8e2>
 800efea:	9b08      	ldr	r3, [sp, #32]
 800efec:	f1c0 001c 	rsb	r0, r0, #28
 800eff0:	4403      	add	r3, r0
 800eff2:	4480      	add	r8, r0
 800eff4:	4406      	add	r6, r0
 800eff6:	9308      	str	r3, [sp, #32]
 800eff8:	f1b8 0f00 	cmp.w	r8, #0
 800effc:	dd05      	ble.n	800f00a <_dtoa_r+0x82a>
 800effe:	4649      	mov	r1, r9
 800f000:	4642      	mov	r2, r8
 800f002:	4658      	mov	r0, fp
 800f004:	f000 ff9e 	bl	800ff44 <__lshift>
 800f008:	4681      	mov	r9, r0
 800f00a:	9b08      	ldr	r3, [sp, #32]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	dd05      	ble.n	800f01c <_dtoa_r+0x83c>
 800f010:	4621      	mov	r1, r4
 800f012:	461a      	mov	r2, r3
 800f014:	4658      	mov	r0, fp
 800f016:	f000 ff95 	bl	800ff44 <__lshift>
 800f01a:	4604      	mov	r4, r0
 800f01c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d059      	beq.n	800f0d6 <_dtoa_r+0x8f6>
 800f022:	4621      	mov	r1, r4
 800f024:	4648      	mov	r0, r9
 800f026:	f000 fff9 	bl	801001c <__mcmp>
 800f02a:	2800      	cmp	r0, #0
 800f02c:	da53      	bge.n	800f0d6 <_dtoa_r+0x8f6>
 800f02e:	1e7b      	subs	r3, r7, #1
 800f030:	9304      	str	r3, [sp, #16]
 800f032:	4649      	mov	r1, r9
 800f034:	2300      	movs	r3, #0
 800f036:	220a      	movs	r2, #10
 800f038:	4658      	mov	r0, fp
 800f03a:	f000 fd8d 	bl	800fb58 <__multadd>
 800f03e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f040:	4681      	mov	r9, r0
 800f042:	2b00      	cmp	r3, #0
 800f044:	f000 8172 	beq.w	800f32c <_dtoa_r+0xb4c>
 800f048:	2300      	movs	r3, #0
 800f04a:	4629      	mov	r1, r5
 800f04c:	220a      	movs	r2, #10
 800f04e:	4658      	mov	r0, fp
 800f050:	f000 fd82 	bl	800fb58 <__multadd>
 800f054:	9b00      	ldr	r3, [sp, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	4605      	mov	r5, r0
 800f05a:	dc67      	bgt.n	800f12c <_dtoa_r+0x94c>
 800f05c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f05e:	2b02      	cmp	r3, #2
 800f060:	dc41      	bgt.n	800f0e6 <_dtoa_r+0x906>
 800f062:	e063      	b.n	800f12c <_dtoa_r+0x94c>
 800f064:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f066:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f06a:	e746      	b.n	800eefa <_dtoa_r+0x71a>
 800f06c:	9b07      	ldr	r3, [sp, #28]
 800f06e:	1e5c      	subs	r4, r3, #1
 800f070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f072:	42a3      	cmp	r3, r4
 800f074:	bfbf      	itttt	lt
 800f076:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f078:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f07a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f07c:	1ae3      	sublt	r3, r4, r3
 800f07e:	bfb4      	ite	lt
 800f080:	18d2      	addlt	r2, r2, r3
 800f082:	1b1c      	subge	r4, r3, r4
 800f084:	9b07      	ldr	r3, [sp, #28]
 800f086:	bfbc      	itt	lt
 800f088:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f08a:	2400      	movlt	r4, #0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	bfb5      	itete	lt
 800f090:	eba8 0603 	sublt.w	r6, r8, r3
 800f094:	9b07      	ldrge	r3, [sp, #28]
 800f096:	2300      	movlt	r3, #0
 800f098:	4646      	movge	r6, r8
 800f09a:	e730      	b.n	800eefe <_dtoa_r+0x71e>
 800f09c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f09e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f0a0:	4646      	mov	r6, r8
 800f0a2:	e735      	b.n	800ef10 <_dtoa_r+0x730>
 800f0a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f0a6:	e75c      	b.n	800ef62 <_dtoa_r+0x782>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	e788      	b.n	800efbe <_dtoa_r+0x7de>
 800f0ac:	3fe00000 	.word	0x3fe00000
 800f0b0:	40240000 	.word	0x40240000
 800f0b4:	40140000 	.word	0x40140000
 800f0b8:	9b02      	ldr	r3, [sp, #8]
 800f0ba:	e780      	b.n	800efbe <_dtoa_r+0x7de>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0c0:	e782      	b.n	800efc8 <_dtoa_r+0x7e8>
 800f0c2:	d099      	beq.n	800eff8 <_dtoa_r+0x818>
 800f0c4:	9a08      	ldr	r2, [sp, #32]
 800f0c6:	331c      	adds	r3, #28
 800f0c8:	441a      	add	r2, r3
 800f0ca:	4498      	add	r8, r3
 800f0cc:	441e      	add	r6, r3
 800f0ce:	9208      	str	r2, [sp, #32]
 800f0d0:	e792      	b.n	800eff8 <_dtoa_r+0x818>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	e7f6      	b.n	800f0c4 <_dtoa_r+0x8e4>
 800f0d6:	9b07      	ldr	r3, [sp, #28]
 800f0d8:	9704      	str	r7, [sp, #16]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	dc20      	bgt.n	800f120 <_dtoa_r+0x940>
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	dd1e      	ble.n	800f124 <_dtoa_r+0x944>
 800f0e6:	9b00      	ldr	r3, [sp, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f47f aec0 	bne.w	800ee6e <_dtoa_r+0x68e>
 800f0ee:	4621      	mov	r1, r4
 800f0f0:	2205      	movs	r2, #5
 800f0f2:	4658      	mov	r0, fp
 800f0f4:	f000 fd30 	bl	800fb58 <__multadd>
 800f0f8:	4601      	mov	r1, r0
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	4648      	mov	r0, r9
 800f0fe:	f000 ff8d 	bl	801001c <__mcmp>
 800f102:	2800      	cmp	r0, #0
 800f104:	f77f aeb3 	ble.w	800ee6e <_dtoa_r+0x68e>
 800f108:	4656      	mov	r6, sl
 800f10a:	2331      	movs	r3, #49	@ 0x31
 800f10c:	f806 3b01 	strb.w	r3, [r6], #1
 800f110:	9b04      	ldr	r3, [sp, #16]
 800f112:	3301      	adds	r3, #1
 800f114:	9304      	str	r3, [sp, #16]
 800f116:	e6ae      	b.n	800ee76 <_dtoa_r+0x696>
 800f118:	9c07      	ldr	r4, [sp, #28]
 800f11a:	9704      	str	r7, [sp, #16]
 800f11c:	4625      	mov	r5, r4
 800f11e:	e7f3      	b.n	800f108 <_dtoa_r+0x928>
 800f120:	9b07      	ldr	r3, [sp, #28]
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f126:	2b00      	cmp	r3, #0
 800f128:	f000 8104 	beq.w	800f334 <_dtoa_r+0xb54>
 800f12c:	2e00      	cmp	r6, #0
 800f12e:	dd05      	ble.n	800f13c <_dtoa_r+0x95c>
 800f130:	4629      	mov	r1, r5
 800f132:	4632      	mov	r2, r6
 800f134:	4658      	mov	r0, fp
 800f136:	f000 ff05 	bl	800ff44 <__lshift>
 800f13a:	4605      	mov	r5, r0
 800f13c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d05a      	beq.n	800f1f8 <_dtoa_r+0xa18>
 800f142:	6869      	ldr	r1, [r5, #4]
 800f144:	4658      	mov	r0, fp
 800f146:	f000 fca5 	bl	800fa94 <_Balloc>
 800f14a:	4606      	mov	r6, r0
 800f14c:	b928      	cbnz	r0, 800f15a <_dtoa_r+0x97a>
 800f14e:	4b84      	ldr	r3, [pc, #528]	@ (800f360 <_dtoa_r+0xb80>)
 800f150:	4602      	mov	r2, r0
 800f152:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f156:	f7ff bb5a 	b.w	800e80e <_dtoa_r+0x2e>
 800f15a:	692a      	ldr	r2, [r5, #16]
 800f15c:	3202      	adds	r2, #2
 800f15e:	0092      	lsls	r2, r2, #2
 800f160:	f105 010c 	add.w	r1, r5, #12
 800f164:	300c      	adds	r0, #12
 800f166:	f7ff fa78 	bl	800e65a <memcpy>
 800f16a:	2201      	movs	r2, #1
 800f16c:	4631      	mov	r1, r6
 800f16e:	4658      	mov	r0, fp
 800f170:	f000 fee8 	bl	800ff44 <__lshift>
 800f174:	f10a 0301 	add.w	r3, sl, #1
 800f178:	9307      	str	r3, [sp, #28]
 800f17a:	9b00      	ldr	r3, [sp, #0]
 800f17c:	4453      	add	r3, sl
 800f17e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f180:	9b02      	ldr	r3, [sp, #8]
 800f182:	f003 0301 	and.w	r3, r3, #1
 800f186:	462f      	mov	r7, r5
 800f188:	930a      	str	r3, [sp, #40]	@ 0x28
 800f18a:	4605      	mov	r5, r0
 800f18c:	9b07      	ldr	r3, [sp, #28]
 800f18e:	4621      	mov	r1, r4
 800f190:	3b01      	subs	r3, #1
 800f192:	4648      	mov	r0, r9
 800f194:	9300      	str	r3, [sp, #0]
 800f196:	f7ff fa9b 	bl	800e6d0 <quorem>
 800f19a:	4639      	mov	r1, r7
 800f19c:	9002      	str	r0, [sp, #8]
 800f19e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f1a2:	4648      	mov	r0, r9
 800f1a4:	f000 ff3a 	bl	801001c <__mcmp>
 800f1a8:	462a      	mov	r2, r5
 800f1aa:	9008      	str	r0, [sp, #32]
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	4658      	mov	r0, fp
 800f1b0:	f000 ff50 	bl	8010054 <__mdiff>
 800f1b4:	68c2      	ldr	r2, [r0, #12]
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	bb02      	cbnz	r2, 800f1fc <_dtoa_r+0xa1c>
 800f1ba:	4601      	mov	r1, r0
 800f1bc:	4648      	mov	r0, r9
 800f1be:	f000 ff2d 	bl	801001c <__mcmp>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	4631      	mov	r1, r6
 800f1c6:	4658      	mov	r0, fp
 800f1c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1ca:	f000 fca3 	bl	800fb14 <_Bfree>
 800f1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1d2:	9e07      	ldr	r6, [sp, #28]
 800f1d4:	ea43 0102 	orr.w	r1, r3, r2
 800f1d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1da:	4319      	orrs	r1, r3
 800f1dc:	d110      	bne.n	800f200 <_dtoa_r+0xa20>
 800f1de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f1e2:	d029      	beq.n	800f238 <_dtoa_r+0xa58>
 800f1e4:	9b08      	ldr	r3, [sp, #32]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	dd02      	ble.n	800f1f0 <_dtoa_r+0xa10>
 800f1ea:	9b02      	ldr	r3, [sp, #8]
 800f1ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f1f0:	9b00      	ldr	r3, [sp, #0]
 800f1f2:	f883 8000 	strb.w	r8, [r3]
 800f1f6:	e63f      	b.n	800ee78 <_dtoa_r+0x698>
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	e7bb      	b.n	800f174 <_dtoa_r+0x994>
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	e7e1      	b.n	800f1c4 <_dtoa_r+0x9e4>
 800f200:	9b08      	ldr	r3, [sp, #32]
 800f202:	2b00      	cmp	r3, #0
 800f204:	db04      	blt.n	800f210 <_dtoa_r+0xa30>
 800f206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f208:	430b      	orrs	r3, r1
 800f20a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f20c:	430b      	orrs	r3, r1
 800f20e:	d120      	bne.n	800f252 <_dtoa_r+0xa72>
 800f210:	2a00      	cmp	r2, #0
 800f212:	dded      	ble.n	800f1f0 <_dtoa_r+0xa10>
 800f214:	4649      	mov	r1, r9
 800f216:	2201      	movs	r2, #1
 800f218:	4658      	mov	r0, fp
 800f21a:	f000 fe93 	bl	800ff44 <__lshift>
 800f21e:	4621      	mov	r1, r4
 800f220:	4681      	mov	r9, r0
 800f222:	f000 fefb 	bl	801001c <__mcmp>
 800f226:	2800      	cmp	r0, #0
 800f228:	dc03      	bgt.n	800f232 <_dtoa_r+0xa52>
 800f22a:	d1e1      	bne.n	800f1f0 <_dtoa_r+0xa10>
 800f22c:	f018 0f01 	tst.w	r8, #1
 800f230:	d0de      	beq.n	800f1f0 <_dtoa_r+0xa10>
 800f232:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f236:	d1d8      	bne.n	800f1ea <_dtoa_r+0xa0a>
 800f238:	9a00      	ldr	r2, [sp, #0]
 800f23a:	2339      	movs	r3, #57	@ 0x39
 800f23c:	7013      	strb	r3, [r2, #0]
 800f23e:	4633      	mov	r3, r6
 800f240:	461e      	mov	r6, r3
 800f242:	3b01      	subs	r3, #1
 800f244:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f248:	2a39      	cmp	r2, #57	@ 0x39
 800f24a:	d052      	beq.n	800f2f2 <_dtoa_r+0xb12>
 800f24c:	3201      	adds	r2, #1
 800f24e:	701a      	strb	r2, [r3, #0]
 800f250:	e612      	b.n	800ee78 <_dtoa_r+0x698>
 800f252:	2a00      	cmp	r2, #0
 800f254:	dd07      	ble.n	800f266 <_dtoa_r+0xa86>
 800f256:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f25a:	d0ed      	beq.n	800f238 <_dtoa_r+0xa58>
 800f25c:	9a00      	ldr	r2, [sp, #0]
 800f25e:	f108 0301 	add.w	r3, r8, #1
 800f262:	7013      	strb	r3, [r2, #0]
 800f264:	e608      	b.n	800ee78 <_dtoa_r+0x698>
 800f266:	9b07      	ldr	r3, [sp, #28]
 800f268:	9a07      	ldr	r2, [sp, #28]
 800f26a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f270:	4293      	cmp	r3, r2
 800f272:	d028      	beq.n	800f2c6 <_dtoa_r+0xae6>
 800f274:	4649      	mov	r1, r9
 800f276:	2300      	movs	r3, #0
 800f278:	220a      	movs	r2, #10
 800f27a:	4658      	mov	r0, fp
 800f27c:	f000 fc6c 	bl	800fb58 <__multadd>
 800f280:	42af      	cmp	r7, r5
 800f282:	4681      	mov	r9, r0
 800f284:	f04f 0300 	mov.w	r3, #0
 800f288:	f04f 020a 	mov.w	r2, #10
 800f28c:	4639      	mov	r1, r7
 800f28e:	4658      	mov	r0, fp
 800f290:	d107      	bne.n	800f2a2 <_dtoa_r+0xac2>
 800f292:	f000 fc61 	bl	800fb58 <__multadd>
 800f296:	4607      	mov	r7, r0
 800f298:	4605      	mov	r5, r0
 800f29a:	9b07      	ldr	r3, [sp, #28]
 800f29c:	3301      	adds	r3, #1
 800f29e:	9307      	str	r3, [sp, #28]
 800f2a0:	e774      	b.n	800f18c <_dtoa_r+0x9ac>
 800f2a2:	f000 fc59 	bl	800fb58 <__multadd>
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	4607      	mov	r7, r0
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	220a      	movs	r2, #10
 800f2ae:	4658      	mov	r0, fp
 800f2b0:	f000 fc52 	bl	800fb58 <__multadd>
 800f2b4:	4605      	mov	r5, r0
 800f2b6:	e7f0      	b.n	800f29a <_dtoa_r+0xaba>
 800f2b8:	9b00      	ldr	r3, [sp, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	bfcc      	ite	gt
 800f2be:	461e      	movgt	r6, r3
 800f2c0:	2601      	movle	r6, #1
 800f2c2:	4456      	add	r6, sl
 800f2c4:	2700      	movs	r7, #0
 800f2c6:	4649      	mov	r1, r9
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	4658      	mov	r0, fp
 800f2cc:	f000 fe3a 	bl	800ff44 <__lshift>
 800f2d0:	4621      	mov	r1, r4
 800f2d2:	4681      	mov	r9, r0
 800f2d4:	f000 fea2 	bl	801001c <__mcmp>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	dcb0      	bgt.n	800f23e <_dtoa_r+0xa5e>
 800f2dc:	d102      	bne.n	800f2e4 <_dtoa_r+0xb04>
 800f2de:	f018 0f01 	tst.w	r8, #1
 800f2e2:	d1ac      	bne.n	800f23e <_dtoa_r+0xa5e>
 800f2e4:	4633      	mov	r3, r6
 800f2e6:	461e      	mov	r6, r3
 800f2e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2ec:	2a30      	cmp	r2, #48	@ 0x30
 800f2ee:	d0fa      	beq.n	800f2e6 <_dtoa_r+0xb06>
 800f2f0:	e5c2      	b.n	800ee78 <_dtoa_r+0x698>
 800f2f2:	459a      	cmp	sl, r3
 800f2f4:	d1a4      	bne.n	800f240 <_dtoa_r+0xa60>
 800f2f6:	9b04      	ldr	r3, [sp, #16]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	9304      	str	r3, [sp, #16]
 800f2fc:	2331      	movs	r3, #49	@ 0x31
 800f2fe:	f88a 3000 	strb.w	r3, [sl]
 800f302:	e5b9      	b.n	800ee78 <_dtoa_r+0x698>
 800f304:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f306:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f364 <_dtoa_r+0xb84>
 800f30a:	b11b      	cbz	r3, 800f314 <_dtoa_r+0xb34>
 800f30c:	f10a 0308 	add.w	r3, sl, #8
 800f310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	4650      	mov	r0, sl
 800f316:	b019      	add	sp, #100	@ 0x64
 800f318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f31e:	2b01      	cmp	r3, #1
 800f320:	f77f ae37 	ble.w	800ef92 <_dtoa_r+0x7b2>
 800f324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f326:	930a      	str	r3, [sp, #40]	@ 0x28
 800f328:	2001      	movs	r0, #1
 800f32a:	e655      	b.n	800efd8 <_dtoa_r+0x7f8>
 800f32c:	9b00      	ldr	r3, [sp, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f77f aed6 	ble.w	800f0e0 <_dtoa_r+0x900>
 800f334:	4656      	mov	r6, sl
 800f336:	4621      	mov	r1, r4
 800f338:	4648      	mov	r0, r9
 800f33a:	f7ff f9c9 	bl	800e6d0 <quorem>
 800f33e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f342:	f806 8b01 	strb.w	r8, [r6], #1
 800f346:	9b00      	ldr	r3, [sp, #0]
 800f348:	eba6 020a 	sub.w	r2, r6, sl
 800f34c:	4293      	cmp	r3, r2
 800f34e:	ddb3      	ble.n	800f2b8 <_dtoa_r+0xad8>
 800f350:	4649      	mov	r1, r9
 800f352:	2300      	movs	r3, #0
 800f354:	220a      	movs	r2, #10
 800f356:	4658      	mov	r0, fp
 800f358:	f000 fbfe 	bl	800fb58 <__multadd>
 800f35c:	4681      	mov	r9, r0
 800f35e:	e7ea      	b.n	800f336 <_dtoa_r+0xb56>
 800f360:	080111fa 	.word	0x080111fa
 800f364:	0801117e 	.word	0x0801117e

0800f368 <_free_r>:
 800f368:	b538      	push	{r3, r4, r5, lr}
 800f36a:	4605      	mov	r5, r0
 800f36c:	2900      	cmp	r1, #0
 800f36e:	d041      	beq.n	800f3f4 <_free_r+0x8c>
 800f370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f374:	1f0c      	subs	r4, r1, #4
 800f376:	2b00      	cmp	r3, #0
 800f378:	bfb8      	it	lt
 800f37a:	18e4      	addlt	r4, r4, r3
 800f37c:	f7fd fa76 	bl	800c86c <__malloc_lock>
 800f380:	4a1d      	ldr	r2, [pc, #116]	@ (800f3f8 <_free_r+0x90>)
 800f382:	6813      	ldr	r3, [r2, #0]
 800f384:	b933      	cbnz	r3, 800f394 <_free_r+0x2c>
 800f386:	6063      	str	r3, [r4, #4]
 800f388:	6014      	str	r4, [r2, #0]
 800f38a:	4628      	mov	r0, r5
 800f38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f390:	f7fd ba72 	b.w	800c878 <__malloc_unlock>
 800f394:	42a3      	cmp	r3, r4
 800f396:	d908      	bls.n	800f3aa <_free_r+0x42>
 800f398:	6820      	ldr	r0, [r4, #0]
 800f39a:	1821      	adds	r1, r4, r0
 800f39c:	428b      	cmp	r3, r1
 800f39e:	bf01      	itttt	eq
 800f3a0:	6819      	ldreq	r1, [r3, #0]
 800f3a2:	685b      	ldreq	r3, [r3, #4]
 800f3a4:	1809      	addeq	r1, r1, r0
 800f3a6:	6021      	streq	r1, [r4, #0]
 800f3a8:	e7ed      	b.n	800f386 <_free_r+0x1e>
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	b10b      	cbz	r3, 800f3b4 <_free_r+0x4c>
 800f3b0:	42a3      	cmp	r3, r4
 800f3b2:	d9fa      	bls.n	800f3aa <_free_r+0x42>
 800f3b4:	6811      	ldr	r1, [r2, #0]
 800f3b6:	1850      	adds	r0, r2, r1
 800f3b8:	42a0      	cmp	r0, r4
 800f3ba:	d10b      	bne.n	800f3d4 <_free_r+0x6c>
 800f3bc:	6820      	ldr	r0, [r4, #0]
 800f3be:	4401      	add	r1, r0
 800f3c0:	1850      	adds	r0, r2, r1
 800f3c2:	4283      	cmp	r3, r0
 800f3c4:	6011      	str	r1, [r2, #0]
 800f3c6:	d1e0      	bne.n	800f38a <_free_r+0x22>
 800f3c8:	6818      	ldr	r0, [r3, #0]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	6053      	str	r3, [r2, #4]
 800f3ce:	4408      	add	r0, r1
 800f3d0:	6010      	str	r0, [r2, #0]
 800f3d2:	e7da      	b.n	800f38a <_free_r+0x22>
 800f3d4:	d902      	bls.n	800f3dc <_free_r+0x74>
 800f3d6:	230c      	movs	r3, #12
 800f3d8:	602b      	str	r3, [r5, #0]
 800f3da:	e7d6      	b.n	800f38a <_free_r+0x22>
 800f3dc:	6820      	ldr	r0, [r4, #0]
 800f3de:	1821      	adds	r1, r4, r0
 800f3e0:	428b      	cmp	r3, r1
 800f3e2:	bf04      	itt	eq
 800f3e4:	6819      	ldreq	r1, [r3, #0]
 800f3e6:	685b      	ldreq	r3, [r3, #4]
 800f3e8:	6063      	str	r3, [r4, #4]
 800f3ea:	bf04      	itt	eq
 800f3ec:	1809      	addeq	r1, r1, r0
 800f3ee:	6021      	streq	r1, [r4, #0]
 800f3f0:	6054      	str	r4, [r2, #4]
 800f3f2:	e7ca      	b.n	800f38a <_free_r+0x22>
 800f3f4:	bd38      	pop	{r3, r4, r5, pc}
 800f3f6:	bf00      	nop
 800f3f8:	20001354 	.word	0x20001354

0800f3fc <rshift>:
 800f3fc:	6903      	ldr	r3, [r0, #16]
 800f3fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f406:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f40a:	f100 0414 	add.w	r4, r0, #20
 800f40e:	dd45      	ble.n	800f49c <rshift+0xa0>
 800f410:	f011 011f 	ands.w	r1, r1, #31
 800f414:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f418:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f41c:	d10c      	bne.n	800f438 <rshift+0x3c>
 800f41e:	f100 0710 	add.w	r7, r0, #16
 800f422:	4629      	mov	r1, r5
 800f424:	42b1      	cmp	r1, r6
 800f426:	d334      	bcc.n	800f492 <rshift+0x96>
 800f428:	1a9b      	subs	r3, r3, r2
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	1eea      	subs	r2, r5, #3
 800f42e:	4296      	cmp	r6, r2
 800f430:	bf38      	it	cc
 800f432:	2300      	movcc	r3, #0
 800f434:	4423      	add	r3, r4
 800f436:	e015      	b.n	800f464 <rshift+0x68>
 800f438:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f43c:	f1c1 0820 	rsb	r8, r1, #32
 800f440:	40cf      	lsrs	r7, r1
 800f442:	f105 0e04 	add.w	lr, r5, #4
 800f446:	46a1      	mov	r9, r4
 800f448:	4576      	cmp	r6, lr
 800f44a:	46f4      	mov	ip, lr
 800f44c:	d815      	bhi.n	800f47a <rshift+0x7e>
 800f44e:	1a9a      	subs	r2, r3, r2
 800f450:	0092      	lsls	r2, r2, #2
 800f452:	3a04      	subs	r2, #4
 800f454:	3501      	adds	r5, #1
 800f456:	42ae      	cmp	r6, r5
 800f458:	bf38      	it	cc
 800f45a:	2200      	movcc	r2, #0
 800f45c:	18a3      	adds	r3, r4, r2
 800f45e:	50a7      	str	r7, [r4, r2]
 800f460:	b107      	cbz	r7, 800f464 <rshift+0x68>
 800f462:	3304      	adds	r3, #4
 800f464:	1b1a      	subs	r2, r3, r4
 800f466:	42a3      	cmp	r3, r4
 800f468:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f46c:	bf08      	it	eq
 800f46e:	2300      	moveq	r3, #0
 800f470:	6102      	str	r2, [r0, #16]
 800f472:	bf08      	it	eq
 800f474:	6143      	streq	r3, [r0, #20]
 800f476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f47a:	f8dc c000 	ldr.w	ip, [ip]
 800f47e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f482:	ea4c 0707 	orr.w	r7, ip, r7
 800f486:	f849 7b04 	str.w	r7, [r9], #4
 800f48a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f48e:	40cf      	lsrs	r7, r1
 800f490:	e7da      	b.n	800f448 <rshift+0x4c>
 800f492:	f851 cb04 	ldr.w	ip, [r1], #4
 800f496:	f847 cf04 	str.w	ip, [r7, #4]!
 800f49a:	e7c3      	b.n	800f424 <rshift+0x28>
 800f49c:	4623      	mov	r3, r4
 800f49e:	e7e1      	b.n	800f464 <rshift+0x68>

0800f4a0 <__hexdig_fun>:
 800f4a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f4a4:	2b09      	cmp	r3, #9
 800f4a6:	d802      	bhi.n	800f4ae <__hexdig_fun+0xe>
 800f4a8:	3820      	subs	r0, #32
 800f4aa:	b2c0      	uxtb	r0, r0
 800f4ac:	4770      	bx	lr
 800f4ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f4b2:	2b05      	cmp	r3, #5
 800f4b4:	d801      	bhi.n	800f4ba <__hexdig_fun+0x1a>
 800f4b6:	3847      	subs	r0, #71	@ 0x47
 800f4b8:	e7f7      	b.n	800f4aa <__hexdig_fun+0xa>
 800f4ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f4be:	2b05      	cmp	r3, #5
 800f4c0:	d801      	bhi.n	800f4c6 <__hexdig_fun+0x26>
 800f4c2:	3827      	subs	r0, #39	@ 0x27
 800f4c4:	e7f1      	b.n	800f4aa <__hexdig_fun+0xa>
 800f4c6:	2000      	movs	r0, #0
 800f4c8:	4770      	bx	lr
	...

0800f4cc <__gethex>:
 800f4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d0:	b085      	sub	sp, #20
 800f4d2:	468a      	mov	sl, r1
 800f4d4:	9302      	str	r3, [sp, #8]
 800f4d6:	680b      	ldr	r3, [r1, #0]
 800f4d8:	9001      	str	r0, [sp, #4]
 800f4da:	4690      	mov	r8, r2
 800f4dc:	1c9c      	adds	r4, r3, #2
 800f4de:	46a1      	mov	r9, r4
 800f4e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f4e4:	2830      	cmp	r0, #48	@ 0x30
 800f4e6:	d0fa      	beq.n	800f4de <__gethex+0x12>
 800f4e8:	eba9 0303 	sub.w	r3, r9, r3
 800f4ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800f4f0:	f7ff ffd6 	bl	800f4a0 <__hexdig_fun>
 800f4f4:	4605      	mov	r5, r0
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d168      	bne.n	800f5cc <__gethex+0x100>
 800f4fa:	49a0      	ldr	r1, [pc, #640]	@ (800f77c <__gethex+0x2b0>)
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	4648      	mov	r0, r9
 800f500:	f7ff f811 	bl	800e526 <strncmp>
 800f504:	4607      	mov	r7, r0
 800f506:	2800      	cmp	r0, #0
 800f508:	d167      	bne.n	800f5da <__gethex+0x10e>
 800f50a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f50e:	4626      	mov	r6, r4
 800f510:	f7ff ffc6 	bl	800f4a0 <__hexdig_fun>
 800f514:	2800      	cmp	r0, #0
 800f516:	d062      	beq.n	800f5de <__gethex+0x112>
 800f518:	4623      	mov	r3, r4
 800f51a:	7818      	ldrb	r0, [r3, #0]
 800f51c:	2830      	cmp	r0, #48	@ 0x30
 800f51e:	4699      	mov	r9, r3
 800f520:	f103 0301 	add.w	r3, r3, #1
 800f524:	d0f9      	beq.n	800f51a <__gethex+0x4e>
 800f526:	f7ff ffbb 	bl	800f4a0 <__hexdig_fun>
 800f52a:	fab0 f580 	clz	r5, r0
 800f52e:	096d      	lsrs	r5, r5, #5
 800f530:	f04f 0b01 	mov.w	fp, #1
 800f534:	464a      	mov	r2, r9
 800f536:	4616      	mov	r6, r2
 800f538:	3201      	adds	r2, #1
 800f53a:	7830      	ldrb	r0, [r6, #0]
 800f53c:	f7ff ffb0 	bl	800f4a0 <__hexdig_fun>
 800f540:	2800      	cmp	r0, #0
 800f542:	d1f8      	bne.n	800f536 <__gethex+0x6a>
 800f544:	498d      	ldr	r1, [pc, #564]	@ (800f77c <__gethex+0x2b0>)
 800f546:	2201      	movs	r2, #1
 800f548:	4630      	mov	r0, r6
 800f54a:	f7fe ffec 	bl	800e526 <strncmp>
 800f54e:	2800      	cmp	r0, #0
 800f550:	d13f      	bne.n	800f5d2 <__gethex+0x106>
 800f552:	b944      	cbnz	r4, 800f566 <__gethex+0x9a>
 800f554:	1c74      	adds	r4, r6, #1
 800f556:	4622      	mov	r2, r4
 800f558:	4616      	mov	r6, r2
 800f55a:	3201      	adds	r2, #1
 800f55c:	7830      	ldrb	r0, [r6, #0]
 800f55e:	f7ff ff9f 	bl	800f4a0 <__hexdig_fun>
 800f562:	2800      	cmp	r0, #0
 800f564:	d1f8      	bne.n	800f558 <__gethex+0x8c>
 800f566:	1ba4      	subs	r4, r4, r6
 800f568:	00a7      	lsls	r7, r4, #2
 800f56a:	7833      	ldrb	r3, [r6, #0]
 800f56c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f570:	2b50      	cmp	r3, #80	@ 0x50
 800f572:	d13e      	bne.n	800f5f2 <__gethex+0x126>
 800f574:	7873      	ldrb	r3, [r6, #1]
 800f576:	2b2b      	cmp	r3, #43	@ 0x2b
 800f578:	d033      	beq.n	800f5e2 <__gethex+0x116>
 800f57a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f57c:	d034      	beq.n	800f5e8 <__gethex+0x11c>
 800f57e:	1c71      	adds	r1, r6, #1
 800f580:	2400      	movs	r4, #0
 800f582:	7808      	ldrb	r0, [r1, #0]
 800f584:	f7ff ff8c 	bl	800f4a0 <__hexdig_fun>
 800f588:	1e43      	subs	r3, r0, #1
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	2b18      	cmp	r3, #24
 800f58e:	d830      	bhi.n	800f5f2 <__gethex+0x126>
 800f590:	f1a0 0210 	sub.w	r2, r0, #16
 800f594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f598:	f7ff ff82 	bl	800f4a0 <__hexdig_fun>
 800f59c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f5a0:	fa5f fc8c 	uxtb.w	ip, ip
 800f5a4:	f1bc 0f18 	cmp.w	ip, #24
 800f5a8:	f04f 030a 	mov.w	r3, #10
 800f5ac:	d91e      	bls.n	800f5ec <__gethex+0x120>
 800f5ae:	b104      	cbz	r4, 800f5b2 <__gethex+0xe6>
 800f5b0:	4252      	negs	r2, r2
 800f5b2:	4417      	add	r7, r2
 800f5b4:	f8ca 1000 	str.w	r1, [sl]
 800f5b8:	b1ed      	cbz	r5, 800f5f6 <__gethex+0x12a>
 800f5ba:	f1bb 0f00 	cmp.w	fp, #0
 800f5be:	bf0c      	ite	eq
 800f5c0:	2506      	moveq	r5, #6
 800f5c2:	2500      	movne	r5, #0
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	b005      	add	sp, #20
 800f5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5cc:	2500      	movs	r5, #0
 800f5ce:	462c      	mov	r4, r5
 800f5d0:	e7b0      	b.n	800f534 <__gethex+0x68>
 800f5d2:	2c00      	cmp	r4, #0
 800f5d4:	d1c7      	bne.n	800f566 <__gethex+0x9a>
 800f5d6:	4627      	mov	r7, r4
 800f5d8:	e7c7      	b.n	800f56a <__gethex+0x9e>
 800f5da:	464e      	mov	r6, r9
 800f5dc:	462f      	mov	r7, r5
 800f5de:	2501      	movs	r5, #1
 800f5e0:	e7c3      	b.n	800f56a <__gethex+0x9e>
 800f5e2:	2400      	movs	r4, #0
 800f5e4:	1cb1      	adds	r1, r6, #2
 800f5e6:	e7cc      	b.n	800f582 <__gethex+0xb6>
 800f5e8:	2401      	movs	r4, #1
 800f5ea:	e7fb      	b.n	800f5e4 <__gethex+0x118>
 800f5ec:	fb03 0002 	mla	r0, r3, r2, r0
 800f5f0:	e7ce      	b.n	800f590 <__gethex+0xc4>
 800f5f2:	4631      	mov	r1, r6
 800f5f4:	e7de      	b.n	800f5b4 <__gethex+0xe8>
 800f5f6:	eba6 0309 	sub.w	r3, r6, r9
 800f5fa:	3b01      	subs	r3, #1
 800f5fc:	4629      	mov	r1, r5
 800f5fe:	2b07      	cmp	r3, #7
 800f600:	dc0a      	bgt.n	800f618 <__gethex+0x14c>
 800f602:	9801      	ldr	r0, [sp, #4]
 800f604:	f000 fa46 	bl	800fa94 <_Balloc>
 800f608:	4604      	mov	r4, r0
 800f60a:	b940      	cbnz	r0, 800f61e <__gethex+0x152>
 800f60c:	4b5c      	ldr	r3, [pc, #368]	@ (800f780 <__gethex+0x2b4>)
 800f60e:	4602      	mov	r2, r0
 800f610:	21e4      	movs	r1, #228	@ 0xe4
 800f612:	485c      	ldr	r0, [pc, #368]	@ (800f784 <__gethex+0x2b8>)
 800f614:	f7ff f83e 	bl	800e694 <__assert_func>
 800f618:	3101      	adds	r1, #1
 800f61a:	105b      	asrs	r3, r3, #1
 800f61c:	e7ef      	b.n	800f5fe <__gethex+0x132>
 800f61e:	f100 0a14 	add.w	sl, r0, #20
 800f622:	2300      	movs	r3, #0
 800f624:	4655      	mov	r5, sl
 800f626:	469b      	mov	fp, r3
 800f628:	45b1      	cmp	r9, r6
 800f62a:	d337      	bcc.n	800f69c <__gethex+0x1d0>
 800f62c:	f845 bb04 	str.w	fp, [r5], #4
 800f630:	eba5 050a 	sub.w	r5, r5, sl
 800f634:	10ad      	asrs	r5, r5, #2
 800f636:	6125      	str	r5, [r4, #16]
 800f638:	4658      	mov	r0, fp
 800f63a:	f000 fb1d 	bl	800fc78 <__hi0bits>
 800f63e:	016d      	lsls	r5, r5, #5
 800f640:	f8d8 6000 	ldr.w	r6, [r8]
 800f644:	1a2d      	subs	r5, r5, r0
 800f646:	42b5      	cmp	r5, r6
 800f648:	dd54      	ble.n	800f6f4 <__gethex+0x228>
 800f64a:	1bad      	subs	r5, r5, r6
 800f64c:	4629      	mov	r1, r5
 800f64e:	4620      	mov	r0, r4
 800f650:	f000 feb1 	bl	80103b6 <__any_on>
 800f654:	4681      	mov	r9, r0
 800f656:	b178      	cbz	r0, 800f678 <__gethex+0x1ac>
 800f658:	1e6b      	subs	r3, r5, #1
 800f65a:	1159      	asrs	r1, r3, #5
 800f65c:	f003 021f 	and.w	r2, r3, #31
 800f660:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f664:	f04f 0901 	mov.w	r9, #1
 800f668:	fa09 f202 	lsl.w	r2, r9, r2
 800f66c:	420a      	tst	r2, r1
 800f66e:	d003      	beq.n	800f678 <__gethex+0x1ac>
 800f670:	454b      	cmp	r3, r9
 800f672:	dc36      	bgt.n	800f6e2 <__gethex+0x216>
 800f674:	f04f 0902 	mov.w	r9, #2
 800f678:	4629      	mov	r1, r5
 800f67a:	4620      	mov	r0, r4
 800f67c:	f7ff febe 	bl	800f3fc <rshift>
 800f680:	442f      	add	r7, r5
 800f682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f686:	42bb      	cmp	r3, r7
 800f688:	da42      	bge.n	800f710 <__gethex+0x244>
 800f68a:	9801      	ldr	r0, [sp, #4]
 800f68c:	4621      	mov	r1, r4
 800f68e:	f000 fa41 	bl	800fb14 <_Bfree>
 800f692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f694:	2300      	movs	r3, #0
 800f696:	6013      	str	r3, [r2, #0]
 800f698:	25a3      	movs	r5, #163	@ 0xa3
 800f69a:	e793      	b.n	800f5c4 <__gethex+0xf8>
 800f69c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f6a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800f6a2:	d012      	beq.n	800f6ca <__gethex+0x1fe>
 800f6a4:	2b20      	cmp	r3, #32
 800f6a6:	d104      	bne.n	800f6b2 <__gethex+0x1e6>
 800f6a8:	f845 bb04 	str.w	fp, [r5], #4
 800f6ac:	f04f 0b00 	mov.w	fp, #0
 800f6b0:	465b      	mov	r3, fp
 800f6b2:	7830      	ldrb	r0, [r6, #0]
 800f6b4:	9303      	str	r3, [sp, #12]
 800f6b6:	f7ff fef3 	bl	800f4a0 <__hexdig_fun>
 800f6ba:	9b03      	ldr	r3, [sp, #12]
 800f6bc:	f000 000f 	and.w	r0, r0, #15
 800f6c0:	4098      	lsls	r0, r3
 800f6c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f6c6:	3304      	adds	r3, #4
 800f6c8:	e7ae      	b.n	800f628 <__gethex+0x15c>
 800f6ca:	45b1      	cmp	r9, r6
 800f6cc:	d8ea      	bhi.n	800f6a4 <__gethex+0x1d8>
 800f6ce:	492b      	ldr	r1, [pc, #172]	@ (800f77c <__gethex+0x2b0>)
 800f6d0:	9303      	str	r3, [sp, #12]
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	f7fe ff26 	bl	800e526 <strncmp>
 800f6da:	9b03      	ldr	r3, [sp, #12]
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d1e1      	bne.n	800f6a4 <__gethex+0x1d8>
 800f6e0:	e7a2      	b.n	800f628 <__gethex+0x15c>
 800f6e2:	1ea9      	subs	r1, r5, #2
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f000 fe66 	bl	80103b6 <__any_on>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	d0c2      	beq.n	800f674 <__gethex+0x1a8>
 800f6ee:	f04f 0903 	mov.w	r9, #3
 800f6f2:	e7c1      	b.n	800f678 <__gethex+0x1ac>
 800f6f4:	da09      	bge.n	800f70a <__gethex+0x23e>
 800f6f6:	1b75      	subs	r5, r6, r5
 800f6f8:	4621      	mov	r1, r4
 800f6fa:	9801      	ldr	r0, [sp, #4]
 800f6fc:	462a      	mov	r2, r5
 800f6fe:	f000 fc21 	bl	800ff44 <__lshift>
 800f702:	1b7f      	subs	r7, r7, r5
 800f704:	4604      	mov	r4, r0
 800f706:	f100 0a14 	add.w	sl, r0, #20
 800f70a:	f04f 0900 	mov.w	r9, #0
 800f70e:	e7b8      	b.n	800f682 <__gethex+0x1b6>
 800f710:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f714:	42bd      	cmp	r5, r7
 800f716:	dd6f      	ble.n	800f7f8 <__gethex+0x32c>
 800f718:	1bed      	subs	r5, r5, r7
 800f71a:	42ae      	cmp	r6, r5
 800f71c:	dc34      	bgt.n	800f788 <__gethex+0x2bc>
 800f71e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f722:	2b02      	cmp	r3, #2
 800f724:	d022      	beq.n	800f76c <__gethex+0x2a0>
 800f726:	2b03      	cmp	r3, #3
 800f728:	d024      	beq.n	800f774 <__gethex+0x2a8>
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d115      	bne.n	800f75a <__gethex+0x28e>
 800f72e:	42ae      	cmp	r6, r5
 800f730:	d113      	bne.n	800f75a <__gethex+0x28e>
 800f732:	2e01      	cmp	r6, #1
 800f734:	d10b      	bne.n	800f74e <__gethex+0x282>
 800f736:	9a02      	ldr	r2, [sp, #8]
 800f738:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f73c:	6013      	str	r3, [r2, #0]
 800f73e:	2301      	movs	r3, #1
 800f740:	6123      	str	r3, [r4, #16]
 800f742:	f8ca 3000 	str.w	r3, [sl]
 800f746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f748:	2562      	movs	r5, #98	@ 0x62
 800f74a:	601c      	str	r4, [r3, #0]
 800f74c:	e73a      	b.n	800f5c4 <__gethex+0xf8>
 800f74e:	1e71      	subs	r1, r6, #1
 800f750:	4620      	mov	r0, r4
 800f752:	f000 fe30 	bl	80103b6 <__any_on>
 800f756:	2800      	cmp	r0, #0
 800f758:	d1ed      	bne.n	800f736 <__gethex+0x26a>
 800f75a:	9801      	ldr	r0, [sp, #4]
 800f75c:	4621      	mov	r1, r4
 800f75e:	f000 f9d9 	bl	800fb14 <_Bfree>
 800f762:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f764:	2300      	movs	r3, #0
 800f766:	6013      	str	r3, [r2, #0]
 800f768:	2550      	movs	r5, #80	@ 0x50
 800f76a:	e72b      	b.n	800f5c4 <__gethex+0xf8>
 800f76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1f3      	bne.n	800f75a <__gethex+0x28e>
 800f772:	e7e0      	b.n	800f736 <__gethex+0x26a>
 800f774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f776:	2b00      	cmp	r3, #0
 800f778:	d1dd      	bne.n	800f736 <__gethex+0x26a>
 800f77a:	e7ee      	b.n	800f75a <__gethex+0x28e>
 800f77c:	08010fac 	.word	0x08010fac
 800f780:	080111fa 	.word	0x080111fa
 800f784:	0801120b 	.word	0x0801120b
 800f788:	1e6f      	subs	r7, r5, #1
 800f78a:	f1b9 0f00 	cmp.w	r9, #0
 800f78e:	d130      	bne.n	800f7f2 <__gethex+0x326>
 800f790:	b127      	cbz	r7, 800f79c <__gethex+0x2d0>
 800f792:	4639      	mov	r1, r7
 800f794:	4620      	mov	r0, r4
 800f796:	f000 fe0e 	bl	80103b6 <__any_on>
 800f79a:	4681      	mov	r9, r0
 800f79c:	117a      	asrs	r2, r7, #5
 800f79e:	2301      	movs	r3, #1
 800f7a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f7a4:	f007 071f 	and.w	r7, r7, #31
 800f7a8:	40bb      	lsls	r3, r7
 800f7aa:	4213      	tst	r3, r2
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	bf18      	it	ne
 800f7b2:	f049 0902 	orrne.w	r9, r9, #2
 800f7b6:	f7ff fe21 	bl	800f3fc <rshift>
 800f7ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f7be:	1b76      	subs	r6, r6, r5
 800f7c0:	2502      	movs	r5, #2
 800f7c2:	f1b9 0f00 	cmp.w	r9, #0
 800f7c6:	d047      	beq.n	800f858 <__gethex+0x38c>
 800f7c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f7cc:	2b02      	cmp	r3, #2
 800f7ce:	d015      	beq.n	800f7fc <__gethex+0x330>
 800f7d0:	2b03      	cmp	r3, #3
 800f7d2:	d017      	beq.n	800f804 <__gethex+0x338>
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d109      	bne.n	800f7ec <__gethex+0x320>
 800f7d8:	f019 0f02 	tst.w	r9, #2
 800f7dc:	d006      	beq.n	800f7ec <__gethex+0x320>
 800f7de:	f8da 3000 	ldr.w	r3, [sl]
 800f7e2:	ea49 0903 	orr.w	r9, r9, r3
 800f7e6:	f019 0f01 	tst.w	r9, #1
 800f7ea:	d10e      	bne.n	800f80a <__gethex+0x33e>
 800f7ec:	f045 0510 	orr.w	r5, r5, #16
 800f7f0:	e032      	b.n	800f858 <__gethex+0x38c>
 800f7f2:	f04f 0901 	mov.w	r9, #1
 800f7f6:	e7d1      	b.n	800f79c <__gethex+0x2d0>
 800f7f8:	2501      	movs	r5, #1
 800f7fa:	e7e2      	b.n	800f7c2 <__gethex+0x2f6>
 800f7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7fe:	f1c3 0301 	rsb	r3, r3, #1
 800f802:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f806:	2b00      	cmp	r3, #0
 800f808:	d0f0      	beq.n	800f7ec <__gethex+0x320>
 800f80a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f80e:	f104 0314 	add.w	r3, r4, #20
 800f812:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f816:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f81a:	f04f 0c00 	mov.w	ip, #0
 800f81e:	4618      	mov	r0, r3
 800f820:	f853 2b04 	ldr.w	r2, [r3], #4
 800f824:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f828:	d01b      	beq.n	800f862 <__gethex+0x396>
 800f82a:	3201      	adds	r2, #1
 800f82c:	6002      	str	r2, [r0, #0]
 800f82e:	2d02      	cmp	r5, #2
 800f830:	f104 0314 	add.w	r3, r4, #20
 800f834:	d13c      	bne.n	800f8b0 <__gethex+0x3e4>
 800f836:	f8d8 2000 	ldr.w	r2, [r8]
 800f83a:	3a01      	subs	r2, #1
 800f83c:	42b2      	cmp	r2, r6
 800f83e:	d109      	bne.n	800f854 <__gethex+0x388>
 800f840:	1171      	asrs	r1, r6, #5
 800f842:	2201      	movs	r2, #1
 800f844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f848:	f006 061f 	and.w	r6, r6, #31
 800f84c:	fa02 f606 	lsl.w	r6, r2, r6
 800f850:	421e      	tst	r6, r3
 800f852:	d13a      	bne.n	800f8ca <__gethex+0x3fe>
 800f854:	f045 0520 	orr.w	r5, r5, #32
 800f858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f85a:	601c      	str	r4, [r3, #0]
 800f85c:	9b02      	ldr	r3, [sp, #8]
 800f85e:	601f      	str	r7, [r3, #0]
 800f860:	e6b0      	b.n	800f5c4 <__gethex+0xf8>
 800f862:	4299      	cmp	r1, r3
 800f864:	f843 cc04 	str.w	ip, [r3, #-4]
 800f868:	d8d9      	bhi.n	800f81e <__gethex+0x352>
 800f86a:	68a3      	ldr	r3, [r4, #8]
 800f86c:	459b      	cmp	fp, r3
 800f86e:	db17      	blt.n	800f8a0 <__gethex+0x3d4>
 800f870:	6861      	ldr	r1, [r4, #4]
 800f872:	9801      	ldr	r0, [sp, #4]
 800f874:	3101      	adds	r1, #1
 800f876:	f000 f90d 	bl	800fa94 <_Balloc>
 800f87a:	4681      	mov	r9, r0
 800f87c:	b918      	cbnz	r0, 800f886 <__gethex+0x3ba>
 800f87e:	4b1a      	ldr	r3, [pc, #104]	@ (800f8e8 <__gethex+0x41c>)
 800f880:	4602      	mov	r2, r0
 800f882:	2184      	movs	r1, #132	@ 0x84
 800f884:	e6c5      	b.n	800f612 <__gethex+0x146>
 800f886:	6922      	ldr	r2, [r4, #16]
 800f888:	3202      	adds	r2, #2
 800f88a:	f104 010c 	add.w	r1, r4, #12
 800f88e:	0092      	lsls	r2, r2, #2
 800f890:	300c      	adds	r0, #12
 800f892:	f7fe fee2 	bl	800e65a <memcpy>
 800f896:	4621      	mov	r1, r4
 800f898:	9801      	ldr	r0, [sp, #4]
 800f89a:	f000 f93b 	bl	800fb14 <_Bfree>
 800f89e:	464c      	mov	r4, r9
 800f8a0:	6923      	ldr	r3, [r4, #16]
 800f8a2:	1c5a      	adds	r2, r3, #1
 800f8a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8a8:	6122      	str	r2, [r4, #16]
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	615a      	str	r2, [r3, #20]
 800f8ae:	e7be      	b.n	800f82e <__gethex+0x362>
 800f8b0:	6922      	ldr	r2, [r4, #16]
 800f8b2:	455a      	cmp	r2, fp
 800f8b4:	dd0b      	ble.n	800f8ce <__gethex+0x402>
 800f8b6:	2101      	movs	r1, #1
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f7ff fd9f 	bl	800f3fc <rshift>
 800f8be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8c2:	3701      	adds	r7, #1
 800f8c4:	42bb      	cmp	r3, r7
 800f8c6:	f6ff aee0 	blt.w	800f68a <__gethex+0x1be>
 800f8ca:	2501      	movs	r5, #1
 800f8cc:	e7c2      	b.n	800f854 <__gethex+0x388>
 800f8ce:	f016 061f 	ands.w	r6, r6, #31
 800f8d2:	d0fa      	beq.n	800f8ca <__gethex+0x3fe>
 800f8d4:	4453      	add	r3, sl
 800f8d6:	f1c6 0620 	rsb	r6, r6, #32
 800f8da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f8de:	f000 f9cb 	bl	800fc78 <__hi0bits>
 800f8e2:	42b0      	cmp	r0, r6
 800f8e4:	dbe7      	blt.n	800f8b6 <__gethex+0x3ea>
 800f8e6:	e7f0      	b.n	800f8ca <__gethex+0x3fe>
 800f8e8:	080111fa 	.word	0x080111fa

0800f8ec <L_shift>:
 800f8ec:	f1c2 0208 	rsb	r2, r2, #8
 800f8f0:	0092      	lsls	r2, r2, #2
 800f8f2:	b570      	push	{r4, r5, r6, lr}
 800f8f4:	f1c2 0620 	rsb	r6, r2, #32
 800f8f8:	6843      	ldr	r3, [r0, #4]
 800f8fa:	6804      	ldr	r4, [r0, #0]
 800f8fc:	fa03 f506 	lsl.w	r5, r3, r6
 800f900:	432c      	orrs	r4, r5
 800f902:	40d3      	lsrs	r3, r2
 800f904:	6004      	str	r4, [r0, #0]
 800f906:	f840 3f04 	str.w	r3, [r0, #4]!
 800f90a:	4288      	cmp	r0, r1
 800f90c:	d3f4      	bcc.n	800f8f8 <L_shift+0xc>
 800f90e:	bd70      	pop	{r4, r5, r6, pc}

0800f910 <__match>:
 800f910:	b530      	push	{r4, r5, lr}
 800f912:	6803      	ldr	r3, [r0, #0]
 800f914:	3301      	adds	r3, #1
 800f916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f91a:	b914      	cbnz	r4, 800f922 <__match+0x12>
 800f91c:	6003      	str	r3, [r0, #0]
 800f91e:	2001      	movs	r0, #1
 800f920:	bd30      	pop	{r4, r5, pc}
 800f922:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f926:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f92a:	2d19      	cmp	r5, #25
 800f92c:	bf98      	it	ls
 800f92e:	3220      	addls	r2, #32
 800f930:	42a2      	cmp	r2, r4
 800f932:	d0f0      	beq.n	800f916 <__match+0x6>
 800f934:	2000      	movs	r0, #0
 800f936:	e7f3      	b.n	800f920 <__match+0x10>

0800f938 <__hexnan>:
 800f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93c:	680b      	ldr	r3, [r1, #0]
 800f93e:	6801      	ldr	r1, [r0, #0]
 800f940:	115e      	asrs	r6, r3, #5
 800f942:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f946:	f013 031f 	ands.w	r3, r3, #31
 800f94a:	b087      	sub	sp, #28
 800f94c:	bf18      	it	ne
 800f94e:	3604      	addne	r6, #4
 800f950:	2500      	movs	r5, #0
 800f952:	1f37      	subs	r7, r6, #4
 800f954:	4682      	mov	sl, r0
 800f956:	4690      	mov	r8, r2
 800f958:	9301      	str	r3, [sp, #4]
 800f95a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f95e:	46b9      	mov	r9, r7
 800f960:	463c      	mov	r4, r7
 800f962:	9502      	str	r5, [sp, #8]
 800f964:	46ab      	mov	fp, r5
 800f966:	784a      	ldrb	r2, [r1, #1]
 800f968:	1c4b      	adds	r3, r1, #1
 800f96a:	9303      	str	r3, [sp, #12]
 800f96c:	b342      	cbz	r2, 800f9c0 <__hexnan+0x88>
 800f96e:	4610      	mov	r0, r2
 800f970:	9105      	str	r1, [sp, #20]
 800f972:	9204      	str	r2, [sp, #16]
 800f974:	f7ff fd94 	bl	800f4a0 <__hexdig_fun>
 800f978:	2800      	cmp	r0, #0
 800f97a:	d151      	bne.n	800fa20 <__hexnan+0xe8>
 800f97c:	9a04      	ldr	r2, [sp, #16]
 800f97e:	9905      	ldr	r1, [sp, #20]
 800f980:	2a20      	cmp	r2, #32
 800f982:	d818      	bhi.n	800f9b6 <__hexnan+0x7e>
 800f984:	9b02      	ldr	r3, [sp, #8]
 800f986:	459b      	cmp	fp, r3
 800f988:	dd13      	ble.n	800f9b2 <__hexnan+0x7a>
 800f98a:	454c      	cmp	r4, r9
 800f98c:	d206      	bcs.n	800f99c <__hexnan+0x64>
 800f98e:	2d07      	cmp	r5, #7
 800f990:	dc04      	bgt.n	800f99c <__hexnan+0x64>
 800f992:	462a      	mov	r2, r5
 800f994:	4649      	mov	r1, r9
 800f996:	4620      	mov	r0, r4
 800f998:	f7ff ffa8 	bl	800f8ec <L_shift>
 800f99c:	4544      	cmp	r4, r8
 800f99e:	d952      	bls.n	800fa46 <__hexnan+0x10e>
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	f1a4 0904 	sub.w	r9, r4, #4
 800f9a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9aa:	f8cd b008 	str.w	fp, [sp, #8]
 800f9ae:	464c      	mov	r4, r9
 800f9b0:	461d      	mov	r5, r3
 800f9b2:	9903      	ldr	r1, [sp, #12]
 800f9b4:	e7d7      	b.n	800f966 <__hexnan+0x2e>
 800f9b6:	2a29      	cmp	r2, #41	@ 0x29
 800f9b8:	d157      	bne.n	800fa6a <__hexnan+0x132>
 800f9ba:	3102      	adds	r1, #2
 800f9bc:	f8ca 1000 	str.w	r1, [sl]
 800f9c0:	f1bb 0f00 	cmp.w	fp, #0
 800f9c4:	d051      	beq.n	800fa6a <__hexnan+0x132>
 800f9c6:	454c      	cmp	r4, r9
 800f9c8:	d206      	bcs.n	800f9d8 <__hexnan+0xa0>
 800f9ca:	2d07      	cmp	r5, #7
 800f9cc:	dc04      	bgt.n	800f9d8 <__hexnan+0xa0>
 800f9ce:	462a      	mov	r2, r5
 800f9d0:	4649      	mov	r1, r9
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	f7ff ff8a 	bl	800f8ec <L_shift>
 800f9d8:	4544      	cmp	r4, r8
 800f9da:	d936      	bls.n	800fa4a <__hexnan+0x112>
 800f9dc:	f1a8 0204 	sub.w	r2, r8, #4
 800f9e0:	4623      	mov	r3, r4
 800f9e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f9e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f9ea:	429f      	cmp	r7, r3
 800f9ec:	d2f9      	bcs.n	800f9e2 <__hexnan+0xaa>
 800f9ee:	1b3b      	subs	r3, r7, r4
 800f9f0:	f023 0303 	bic.w	r3, r3, #3
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	3401      	adds	r4, #1
 800f9f8:	3e03      	subs	r6, #3
 800f9fa:	42b4      	cmp	r4, r6
 800f9fc:	bf88      	it	hi
 800f9fe:	2304      	movhi	r3, #4
 800fa00:	4443      	add	r3, r8
 800fa02:	2200      	movs	r2, #0
 800fa04:	f843 2b04 	str.w	r2, [r3], #4
 800fa08:	429f      	cmp	r7, r3
 800fa0a:	d2fb      	bcs.n	800fa04 <__hexnan+0xcc>
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	b91b      	cbnz	r3, 800fa18 <__hexnan+0xe0>
 800fa10:	4547      	cmp	r7, r8
 800fa12:	d128      	bne.n	800fa66 <__hexnan+0x12e>
 800fa14:	2301      	movs	r3, #1
 800fa16:	603b      	str	r3, [r7, #0]
 800fa18:	2005      	movs	r0, #5
 800fa1a:	b007      	add	sp, #28
 800fa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa20:	3501      	adds	r5, #1
 800fa22:	2d08      	cmp	r5, #8
 800fa24:	f10b 0b01 	add.w	fp, fp, #1
 800fa28:	dd06      	ble.n	800fa38 <__hexnan+0x100>
 800fa2a:	4544      	cmp	r4, r8
 800fa2c:	d9c1      	bls.n	800f9b2 <__hexnan+0x7a>
 800fa2e:	2300      	movs	r3, #0
 800fa30:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa34:	2501      	movs	r5, #1
 800fa36:	3c04      	subs	r4, #4
 800fa38:	6822      	ldr	r2, [r4, #0]
 800fa3a:	f000 000f 	and.w	r0, r0, #15
 800fa3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fa42:	6020      	str	r0, [r4, #0]
 800fa44:	e7b5      	b.n	800f9b2 <__hexnan+0x7a>
 800fa46:	2508      	movs	r5, #8
 800fa48:	e7b3      	b.n	800f9b2 <__hexnan+0x7a>
 800fa4a:	9b01      	ldr	r3, [sp, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d0dd      	beq.n	800fa0c <__hexnan+0xd4>
 800fa50:	f1c3 0320 	rsb	r3, r3, #32
 800fa54:	f04f 32ff 	mov.w	r2, #4294967295
 800fa58:	40da      	lsrs	r2, r3
 800fa5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fa5e:	4013      	ands	r3, r2
 800fa60:	f846 3c04 	str.w	r3, [r6, #-4]
 800fa64:	e7d2      	b.n	800fa0c <__hexnan+0xd4>
 800fa66:	3f04      	subs	r7, #4
 800fa68:	e7d0      	b.n	800fa0c <__hexnan+0xd4>
 800fa6a:	2004      	movs	r0, #4
 800fa6c:	e7d5      	b.n	800fa1a <__hexnan+0xe2>

0800fa6e <__ascii_mbtowc>:
 800fa6e:	b082      	sub	sp, #8
 800fa70:	b901      	cbnz	r1, 800fa74 <__ascii_mbtowc+0x6>
 800fa72:	a901      	add	r1, sp, #4
 800fa74:	b142      	cbz	r2, 800fa88 <__ascii_mbtowc+0x1a>
 800fa76:	b14b      	cbz	r3, 800fa8c <__ascii_mbtowc+0x1e>
 800fa78:	7813      	ldrb	r3, [r2, #0]
 800fa7a:	600b      	str	r3, [r1, #0]
 800fa7c:	7812      	ldrb	r2, [r2, #0]
 800fa7e:	1e10      	subs	r0, r2, #0
 800fa80:	bf18      	it	ne
 800fa82:	2001      	movne	r0, #1
 800fa84:	b002      	add	sp, #8
 800fa86:	4770      	bx	lr
 800fa88:	4610      	mov	r0, r2
 800fa8a:	e7fb      	b.n	800fa84 <__ascii_mbtowc+0x16>
 800fa8c:	f06f 0001 	mvn.w	r0, #1
 800fa90:	e7f8      	b.n	800fa84 <__ascii_mbtowc+0x16>
	...

0800fa94 <_Balloc>:
 800fa94:	b570      	push	{r4, r5, r6, lr}
 800fa96:	69c6      	ldr	r6, [r0, #28]
 800fa98:	4604      	mov	r4, r0
 800fa9a:	460d      	mov	r5, r1
 800fa9c:	b976      	cbnz	r6, 800fabc <_Balloc+0x28>
 800fa9e:	2010      	movs	r0, #16
 800faa0:	f7fc fe3a 	bl	800c718 <malloc>
 800faa4:	4602      	mov	r2, r0
 800faa6:	61e0      	str	r0, [r4, #28]
 800faa8:	b920      	cbnz	r0, 800fab4 <_Balloc+0x20>
 800faaa:	4b18      	ldr	r3, [pc, #96]	@ (800fb0c <_Balloc+0x78>)
 800faac:	4818      	ldr	r0, [pc, #96]	@ (800fb10 <_Balloc+0x7c>)
 800faae:	216b      	movs	r1, #107	@ 0x6b
 800fab0:	f7fe fdf0 	bl	800e694 <__assert_func>
 800fab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fab8:	6006      	str	r6, [r0, #0]
 800faba:	60c6      	str	r6, [r0, #12]
 800fabc:	69e6      	ldr	r6, [r4, #28]
 800fabe:	68f3      	ldr	r3, [r6, #12]
 800fac0:	b183      	cbz	r3, 800fae4 <_Balloc+0x50>
 800fac2:	69e3      	ldr	r3, [r4, #28]
 800fac4:	68db      	ldr	r3, [r3, #12]
 800fac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800faca:	b9b8      	cbnz	r0, 800fafc <_Balloc+0x68>
 800facc:	2101      	movs	r1, #1
 800face:	fa01 f605 	lsl.w	r6, r1, r5
 800fad2:	1d72      	adds	r2, r6, #5
 800fad4:	0092      	lsls	r2, r2, #2
 800fad6:	4620      	mov	r0, r4
 800fad8:	f000 fed1 	bl	801087e <_calloc_r>
 800fadc:	b160      	cbz	r0, 800faf8 <_Balloc+0x64>
 800fade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fae2:	e00e      	b.n	800fb02 <_Balloc+0x6e>
 800fae4:	2221      	movs	r2, #33	@ 0x21
 800fae6:	2104      	movs	r1, #4
 800fae8:	4620      	mov	r0, r4
 800faea:	f000 fec8 	bl	801087e <_calloc_r>
 800faee:	69e3      	ldr	r3, [r4, #28]
 800faf0:	60f0      	str	r0, [r6, #12]
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1e4      	bne.n	800fac2 <_Balloc+0x2e>
 800faf8:	2000      	movs	r0, #0
 800fafa:	bd70      	pop	{r4, r5, r6, pc}
 800fafc:	6802      	ldr	r2, [r0, #0]
 800fafe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb02:	2300      	movs	r3, #0
 800fb04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb08:	e7f7      	b.n	800fafa <_Balloc+0x66>
 800fb0a:	bf00      	nop
 800fb0c:	0801118b 	.word	0x0801118b
 800fb10:	0801126b 	.word	0x0801126b

0800fb14 <_Bfree>:
 800fb14:	b570      	push	{r4, r5, r6, lr}
 800fb16:	69c6      	ldr	r6, [r0, #28]
 800fb18:	4605      	mov	r5, r0
 800fb1a:	460c      	mov	r4, r1
 800fb1c:	b976      	cbnz	r6, 800fb3c <_Bfree+0x28>
 800fb1e:	2010      	movs	r0, #16
 800fb20:	f7fc fdfa 	bl	800c718 <malloc>
 800fb24:	4602      	mov	r2, r0
 800fb26:	61e8      	str	r0, [r5, #28]
 800fb28:	b920      	cbnz	r0, 800fb34 <_Bfree+0x20>
 800fb2a:	4b09      	ldr	r3, [pc, #36]	@ (800fb50 <_Bfree+0x3c>)
 800fb2c:	4809      	ldr	r0, [pc, #36]	@ (800fb54 <_Bfree+0x40>)
 800fb2e:	218f      	movs	r1, #143	@ 0x8f
 800fb30:	f7fe fdb0 	bl	800e694 <__assert_func>
 800fb34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb38:	6006      	str	r6, [r0, #0]
 800fb3a:	60c6      	str	r6, [r0, #12]
 800fb3c:	b13c      	cbz	r4, 800fb4e <_Bfree+0x3a>
 800fb3e:	69eb      	ldr	r3, [r5, #28]
 800fb40:	6862      	ldr	r2, [r4, #4]
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb48:	6021      	str	r1, [r4, #0]
 800fb4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb4e:	bd70      	pop	{r4, r5, r6, pc}
 800fb50:	0801118b 	.word	0x0801118b
 800fb54:	0801126b 	.word	0x0801126b

0800fb58 <__multadd>:
 800fb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb5c:	690d      	ldr	r5, [r1, #16]
 800fb5e:	4607      	mov	r7, r0
 800fb60:	460c      	mov	r4, r1
 800fb62:	461e      	mov	r6, r3
 800fb64:	f101 0c14 	add.w	ip, r1, #20
 800fb68:	2000      	movs	r0, #0
 800fb6a:	f8dc 3000 	ldr.w	r3, [ip]
 800fb6e:	b299      	uxth	r1, r3
 800fb70:	fb02 6101 	mla	r1, r2, r1, r6
 800fb74:	0c1e      	lsrs	r6, r3, #16
 800fb76:	0c0b      	lsrs	r3, r1, #16
 800fb78:	fb02 3306 	mla	r3, r2, r6, r3
 800fb7c:	b289      	uxth	r1, r1
 800fb7e:	3001      	adds	r0, #1
 800fb80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb84:	4285      	cmp	r5, r0
 800fb86:	f84c 1b04 	str.w	r1, [ip], #4
 800fb8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fb8e:	dcec      	bgt.n	800fb6a <__multadd+0x12>
 800fb90:	b30e      	cbz	r6, 800fbd6 <__multadd+0x7e>
 800fb92:	68a3      	ldr	r3, [r4, #8]
 800fb94:	42ab      	cmp	r3, r5
 800fb96:	dc19      	bgt.n	800fbcc <__multadd+0x74>
 800fb98:	6861      	ldr	r1, [r4, #4]
 800fb9a:	4638      	mov	r0, r7
 800fb9c:	3101      	adds	r1, #1
 800fb9e:	f7ff ff79 	bl	800fa94 <_Balloc>
 800fba2:	4680      	mov	r8, r0
 800fba4:	b928      	cbnz	r0, 800fbb2 <__multadd+0x5a>
 800fba6:	4602      	mov	r2, r0
 800fba8:	4b0c      	ldr	r3, [pc, #48]	@ (800fbdc <__multadd+0x84>)
 800fbaa:	480d      	ldr	r0, [pc, #52]	@ (800fbe0 <__multadd+0x88>)
 800fbac:	21ba      	movs	r1, #186	@ 0xba
 800fbae:	f7fe fd71 	bl	800e694 <__assert_func>
 800fbb2:	6922      	ldr	r2, [r4, #16]
 800fbb4:	3202      	adds	r2, #2
 800fbb6:	f104 010c 	add.w	r1, r4, #12
 800fbba:	0092      	lsls	r2, r2, #2
 800fbbc:	300c      	adds	r0, #12
 800fbbe:	f7fe fd4c 	bl	800e65a <memcpy>
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	4638      	mov	r0, r7
 800fbc6:	f7ff ffa5 	bl	800fb14 <_Bfree>
 800fbca:	4644      	mov	r4, r8
 800fbcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fbd0:	3501      	adds	r5, #1
 800fbd2:	615e      	str	r6, [r3, #20]
 800fbd4:	6125      	str	r5, [r4, #16]
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbdc:	080111fa 	.word	0x080111fa
 800fbe0:	0801126b 	.word	0x0801126b

0800fbe4 <__s2b>:
 800fbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe8:	460c      	mov	r4, r1
 800fbea:	4615      	mov	r5, r2
 800fbec:	461f      	mov	r7, r3
 800fbee:	2209      	movs	r2, #9
 800fbf0:	3308      	adds	r3, #8
 800fbf2:	4606      	mov	r6, r0
 800fbf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	db09      	blt.n	800fc14 <__s2b+0x30>
 800fc00:	4630      	mov	r0, r6
 800fc02:	f7ff ff47 	bl	800fa94 <_Balloc>
 800fc06:	b940      	cbnz	r0, 800fc1a <__s2b+0x36>
 800fc08:	4602      	mov	r2, r0
 800fc0a:	4b19      	ldr	r3, [pc, #100]	@ (800fc70 <__s2b+0x8c>)
 800fc0c:	4819      	ldr	r0, [pc, #100]	@ (800fc74 <__s2b+0x90>)
 800fc0e:	21d3      	movs	r1, #211	@ 0xd3
 800fc10:	f7fe fd40 	bl	800e694 <__assert_func>
 800fc14:	0052      	lsls	r2, r2, #1
 800fc16:	3101      	adds	r1, #1
 800fc18:	e7f0      	b.n	800fbfc <__s2b+0x18>
 800fc1a:	9b08      	ldr	r3, [sp, #32]
 800fc1c:	6143      	str	r3, [r0, #20]
 800fc1e:	2d09      	cmp	r5, #9
 800fc20:	f04f 0301 	mov.w	r3, #1
 800fc24:	6103      	str	r3, [r0, #16]
 800fc26:	dd16      	ble.n	800fc56 <__s2b+0x72>
 800fc28:	f104 0909 	add.w	r9, r4, #9
 800fc2c:	46c8      	mov	r8, r9
 800fc2e:	442c      	add	r4, r5
 800fc30:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc34:	4601      	mov	r1, r0
 800fc36:	3b30      	subs	r3, #48	@ 0x30
 800fc38:	220a      	movs	r2, #10
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	f7ff ff8c 	bl	800fb58 <__multadd>
 800fc40:	45a0      	cmp	r8, r4
 800fc42:	d1f5      	bne.n	800fc30 <__s2b+0x4c>
 800fc44:	f1a5 0408 	sub.w	r4, r5, #8
 800fc48:	444c      	add	r4, r9
 800fc4a:	1b2d      	subs	r5, r5, r4
 800fc4c:	1963      	adds	r3, r4, r5
 800fc4e:	42bb      	cmp	r3, r7
 800fc50:	db04      	blt.n	800fc5c <__s2b+0x78>
 800fc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc56:	340a      	adds	r4, #10
 800fc58:	2509      	movs	r5, #9
 800fc5a:	e7f6      	b.n	800fc4a <__s2b+0x66>
 800fc5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc60:	4601      	mov	r1, r0
 800fc62:	3b30      	subs	r3, #48	@ 0x30
 800fc64:	220a      	movs	r2, #10
 800fc66:	4630      	mov	r0, r6
 800fc68:	f7ff ff76 	bl	800fb58 <__multadd>
 800fc6c:	e7ee      	b.n	800fc4c <__s2b+0x68>
 800fc6e:	bf00      	nop
 800fc70:	080111fa 	.word	0x080111fa
 800fc74:	0801126b 	.word	0x0801126b

0800fc78 <__hi0bits>:
 800fc78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	bf36      	itet	cc
 800fc80:	0403      	lslcc	r3, r0, #16
 800fc82:	2000      	movcs	r0, #0
 800fc84:	2010      	movcc	r0, #16
 800fc86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc8a:	bf3c      	itt	cc
 800fc8c:	021b      	lslcc	r3, r3, #8
 800fc8e:	3008      	addcc	r0, #8
 800fc90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc94:	bf3c      	itt	cc
 800fc96:	011b      	lslcc	r3, r3, #4
 800fc98:	3004      	addcc	r0, #4
 800fc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc9e:	bf3c      	itt	cc
 800fca0:	009b      	lslcc	r3, r3, #2
 800fca2:	3002      	addcc	r0, #2
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	db05      	blt.n	800fcb4 <__hi0bits+0x3c>
 800fca8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fcac:	f100 0001 	add.w	r0, r0, #1
 800fcb0:	bf08      	it	eq
 800fcb2:	2020      	moveq	r0, #32
 800fcb4:	4770      	bx	lr

0800fcb6 <__lo0bits>:
 800fcb6:	6803      	ldr	r3, [r0, #0]
 800fcb8:	4602      	mov	r2, r0
 800fcba:	f013 0007 	ands.w	r0, r3, #7
 800fcbe:	d00b      	beq.n	800fcd8 <__lo0bits+0x22>
 800fcc0:	07d9      	lsls	r1, r3, #31
 800fcc2:	d421      	bmi.n	800fd08 <__lo0bits+0x52>
 800fcc4:	0798      	lsls	r0, r3, #30
 800fcc6:	bf49      	itett	mi
 800fcc8:	085b      	lsrmi	r3, r3, #1
 800fcca:	089b      	lsrpl	r3, r3, #2
 800fccc:	2001      	movmi	r0, #1
 800fcce:	6013      	strmi	r3, [r2, #0]
 800fcd0:	bf5c      	itt	pl
 800fcd2:	6013      	strpl	r3, [r2, #0]
 800fcd4:	2002      	movpl	r0, #2
 800fcd6:	4770      	bx	lr
 800fcd8:	b299      	uxth	r1, r3
 800fcda:	b909      	cbnz	r1, 800fce0 <__lo0bits+0x2a>
 800fcdc:	0c1b      	lsrs	r3, r3, #16
 800fcde:	2010      	movs	r0, #16
 800fce0:	b2d9      	uxtb	r1, r3
 800fce2:	b909      	cbnz	r1, 800fce8 <__lo0bits+0x32>
 800fce4:	3008      	adds	r0, #8
 800fce6:	0a1b      	lsrs	r3, r3, #8
 800fce8:	0719      	lsls	r1, r3, #28
 800fcea:	bf04      	itt	eq
 800fcec:	091b      	lsreq	r3, r3, #4
 800fcee:	3004      	addeq	r0, #4
 800fcf0:	0799      	lsls	r1, r3, #30
 800fcf2:	bf04      	itt	eq
 800fcf4:	089b      	lsreq	r3, r3, #2
 800fcf6:	3002      	addeq	r0, #2
 800fcf8:	07d9      	lsls	r1, r3, #31
 800fcfa:	d403      	bmi.n	800fd04 <__lo0bits+0x4e>
 800fcfc:	085b      	lsrs	r3, r3, #1
 800fcfe:	f100 0001 	add.w	r0, r0, #1
 800fd02:	d003      	beq.n	800fd0c <__lo0bits+0x56>
 800fd04:	6013      	str	r3, [r2, #0]
 800fd06:	4770      	bx	lr
 800fd08:	2000      	movs	r0, #0
 800fd0a:	4770      	bx	lr
 800fd0c:	2020      	movs	r0, #32
 800fd0e:	4770      	bx	lr

0800fd10 <__i2b>:
 800fd10:	b510      	push	{r4, lr}
 800fd12:	460c      	mov	r4, r1
 800fd14:	2101      	movs	r1, #1
 800fd16:	f7ff febd 	bl	800fa94 <_Balloc>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	b928      	cbnz	r0, 800fd2a <__i2b+0x1a>
 800fd1e:	4b05      	ldr	r3, [pc, #20]	@ (800fd34 <__i2b+0x24>)
 800fd20:	4805      	ldr	r0, [pc, #20]	@ (800fd38 <__i2b+0x28>)
 800fd22:	f240 1145 	movw	r1, #325	@ 0x145
 800fd26:	f7fe fcb5 	bl	800e694 <__assert_func>
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	6144      	str	r4, [r0, #20]
 800fd2e:	6103      	str	r3, [r0, #16]
 800fd30:	bd10      	pop	{r4, pc}
 800fd32:	bf00      	nop
 800fd34:	080111fa 	.word	0x080111fa
 800fd38:	0801126b 	.word	0x0801126b

0800fd3c <__multiply>:
 800fd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd40:	4614      	mov	r4, r2
 800fd42:	690a      	ldr	r2, [r1, #16]
 800fd44:	6923      	ldr	r3, [r4, #16]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	bfa8      	it	ge
 800fd4a:	4623      	movge	r3, r4
 800fd4c:	460f      	mov	r7, r1
 800fd4e:	bfa4      	itt	ge
 800fd50:	460c      	movge	r4, r1
 800fd52:	461f      	movge	r7, r3
 800fd54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fd58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fd5c:	68a3      	ldr	r3, [r4, #8]
 800fd5e:	6861      	ldr	r1, [r4, #4]
 800fd60:	eb0a 0609 	add.w	r6, sl, r9
 800fd64:	42b3      	cmp	r3, r6
 800fd66:	b085      	sub	sp, #20
 800fd68:	bfb8      	it	lt
 800fd6a:	3101      	addlt	r1, #1
 800fd6c:	f7ff fe92 	bl	800fa94 <_Balloc>
 800fd70:	b930      	cbnz	r0, 800fd80 <__multiply+0x44>
 800fd72:	4602      	mov	r2, r0
 800fd74:	4b44      	ldr	r3, [pc, #272]	@ (800fe88 <__multiply+0x14c>)
 800fd76:	4845      	ldr	r0, [pc, #276]	@ (800fe8c <__multiply+0x150>)
 800fd78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fd7c:	f7fe fc8a 	bl	800e694 <__assert_func>
 800fd80:	f100 0514 	add.w	r5, r0, #20
 800fd84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fd88:	462b      	mov	r3, r5
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	4543      	cmp	r3, r8
 800fd8e:	d321      	bcc.n	800fdd4 <__multiply+0x98>
 800fd90:	f107 0114 	add.w	r1, r7, #20
 800fd94:	f104 0214 	add.w	r2, r4, #20
 800fd98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fd9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fda0:	9302      	str	r3, [sp, #8]
 800fda2:	1b13      	subs	r3, r2, r4
 800fda4:	3b15      	subs	r3, #21
 800fda6:	f023 0303 	bic.w	r3, r3, #3
 800fdaa:	3304      	adds	r3, #4
 800fdac:	f104 0715 	add.w	r7, r4, #21
 800fdb0:	42ba      	cmp	r2, r7
 800fdb2:	bf38      	it	cc
 800fdb4:	2304      	movcc	r3, #4
 800fdb6:	9301      	str	r3, [sp, #4]
 800fdb8:	9b02      	ldr	r3, [sp, #8]
 800fdba:	9103      	str	r1, [sp, #12]
 800fdbc:	428b      	cmp	r3, r1
 800fdbe:	d80c      	bhi.n	800fdda <__multiply+0x9e>
 800fdc0:	2e00      	cmp	r6, #0
 800fdc2:	dd03      	ble.n	800fdcc <__multiply+0x90>
 800fdc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d05b      	beq.n	800fe84 <__multiply+0x148>
 800fdcc:	6106      	str	r6, [r0, #16]
 800fdce:	b005      	add	sp, #20
 800fdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd4:	f843 2b04 	str.w	r2, [r3], #4
 800fdd8:	e7d8      	b.n	800fd8c <__multiply+0x50>
 800fdda:	f8b1 a000 	ldrh.w	sl, [r1]
 800fdde:	f1ba 0f00 	cmp.w	sl, #0
 800fde2:	d024      	beq.n	800fe2e <__multiply+0xf2>
 800fde4:	f104 0e14 	add.w	lr, r4, #20
 800fde8:	46a9      	mov	r9, r5
 800fdea:	f04f 0c00 	mov.w	ip, #0
 800fdee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fdf2:	f8d9 3000 	ldr.w	r3, [r9]
 800fdf6:	fa1f fb87 	uxth.w	fp, r7
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	fb0a 330b 	mla	r3, sl, fp, r3
 800fe00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fe04:	f8d9 7000 	ldr.w	r7, [r9]
 800fe08:	4463      	add	r3, ip
 800fe0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe0e:	fb0a c70b 	mla	r7, sl, fp, ip
 800fe12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fe16:	b29b      	uxth	r3, r3
 800fe18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe1c:	4572      	cmp	r2, lr
 800fe1e:	f849 3b04 	str.w	r3, [r9], #4
 800fe22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe26:	d8e2      	bhi.n	800fdee <__multiply+0xb2>
 800fe28:	9b01      	ldr	r3, [sp, #4]
 800fe2a:	f845 c003 	str.w	ip, [r5, r3]
 800fe2e:	9b03      	ldr	r3, [sp, #12]
 800fe30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe34:	3104      	adds	r1, #4
 800fe36:	f1b9 0f00 	cmp.w	r9, #0
 800fe3a:	d021      	beq.n	800fe80 <__multiply+0x144>
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	f104 0c14 	add.w	ip, r4, #20
 800fe42:	46ae      	mov	lr, r5
 800fe44:	f04f 0a00 	mov.w	sl, #0
 800fe48:	f8bc b000 	ldrh.w	fp, [ip]
 800fe4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fe50:	fb09 770b 	mla	r7, r9, fp, r7
 800fe54:	4457      	add	r7, sl
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe5c:	f84e 3b04 	str.w	r3, [lr], #4
 800fe60:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe68:	f8be 3000 	ldrh.w	r3, [lr]
 800fe6c:	fb09 330a 	mla	r3, r9, sl, r3
 800fe70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fe74:	4562      	cmp	r2, ip
 800fe76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe7a:	d8e5      	bhi.n	800fe48 <__multiply+0x10c>
 800fe7c:	9f01      	ldr	r7, [sp, #4]
 800fe7e:	51eb      	str	r3, [r5, r7]
 800fe80:	3504      	adds	r5, #4
 800fe82:	e799      	b.n	800fdb8 <__multiply+0x7c>
 800fe84:	3e01      	subs	r6, #1
 800fe86:	e79b      	b.n	800fdc0 <__multiply+0x84>
 800fe88:	080111fa 	.word	0x080111fa
 800fe8c:	0801126b 	.word	0x0801126b

0800fe90 <__pow5mult>:
 800fe90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe94:	4615      	mov	r5, r2
 800fe96:	f012 0203 	ands.w	r2, r2, #3
 800fe9a:	4607      	mov	r7, r0
 800fe9c:	460e      	mov	r6, r1
 800fe9e:	d007      	beq.n	800feb0 <__pow5mult+0x20>
 800fea0:	4c25      	ldr	r4, [pc, #148]	@ (800ff38 <__pow5mult+0xa8>)
 800fea2:	3a01      	subs	r2, #1
 800fea4:	2300      	movs	r3, #0
 800fea6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800feaa:	f7ff fe55 	bl	800fb58 <__multadd>
 800feae:	4606      	mov	r6, r0
 800feb0:	10ad      	asrs	r5, r5, #2
 800feb2:	d03d      	beq.n	800ff30 <__pow5mult+0xa0>
 800feb4:	69fc      	ldr	r4, [r7, #28]
 800feb6:	b97c      	cbnz	r4, 800fed8 <__pow5mult+0x48>
 800feb8:	2010      	movs	r0, #16
 800feba:	f7fc fc2d 	bl	800c718 <malloc>
 800febe:	4602      	mov	r2, r0
 800fec0:	61f8      	str	r0, [r7, #28]
 800fec2:	b928      	cbnz	r0, 800fed0 <__pow5mult+0x40>
 800fec4:	4b1d      	ldr	r3, [pc, #116]	@ (800ff3c <__pow5mult+0xac>)
 800fec6:	481e      	ldr	r0, [pc, #120]	@ (800ff40 <__pow5mult+0xb0>)
 800fec8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fecc:	f7fe fbe2 	bl	800e694 <__assert_func>
 800fed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fed4:	6004      	str	r4, [r0, #0]
 800fed6:	60c4      	str	r4, [r0, #12]
 800fed8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fedc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fee0:	b94c      	cbnz	r4, 800fef6 <__pow5mult+0x66>
 800fee2:	f240 2171 	movw	r1, #625	@ 0x271
 800fee6:	4638      	mov	r0, r7
 800fee8:	f7ff ff12 	bl	800fd10 <__i2b>
 800feec:	2300      	movs	r3, #0
 800feee:	f8c8 0008 	str.w	r0, [r8, #8]
 800fef2:	4604      	mov	r4, r0
 800fef4:	6003      	str	r3, [r0, #0]
 800fef6:	f04f 0900 	mov.w	r9, #0
 800fefa:	07eb      	lsls	r3, r5, #31
 800fefc:	d50a      	bpl.n	800ff14 <__pow5mult+0x84>
 800fefe:	4631      	mov	r1, r6
 800ff00:	4622      	mov	r2, r4
 800ff02:	4638      	mov	r0, r7
 800ff04:	f7ff ff1a 	bl	800fd3c <__multiply>
 800ff08:	4631      	mov	r1, r6
 800ff0a:	4680      	mov	r8, r0
 800ff0c:	4638      	mov	r0, r7
 800ff0e:	f7ff fe01 	bl	800fb14 <_Bfree>
 800ff12:	4646      	mov	r6, r8
 800ff14:	106d      	asrs	r5, r5, #1
 800ff16:	d00b      	beq.n	800ff30 <__pow5mult+0xa0>
 800ff18:	6820      	ldr	r0, [r4, #0]
 800ff1a:	b938      	cbnz	r0, 800ff2c <__pow5mult+0x9c>
 800ff1c:	4622      	mov	r2, r4
 800ff1e:	4621      	mov	r1, r4
 800ff20:	4638      	mov	r0, r7
 800ff22:	f7ff ff0b 	bl	800fd3c <__multiply>
 800ff26:	6020      	str	r0, [r4, #0]
 800ff28:	f8c0 9000 	str.w	r9, [r0]
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	e7e4      	b.n	800fefa <__pow5mult+0x6a>
 800ff30:	4630      	mov	r0, r6
 800ff32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff36:	bf00      	nop
 800ff38:	080112c4 	.word	0x080112c4
 800ff3c:	0801118b 	.word	0x0801118b
 800ff40:	0801126b 	.word	0x0801126b

0800ff44 <__lshift>:
 800ff44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff48:	460c      	mov	r4, r1
 800ff4a:	6849      	ldr	r1, [r1, #4]
 800ff4c:	6923      	ldr	r3, [r4, #16]
 800ff4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff52:	68a3      	ldr	r3, [r4, #8]
 800ff54:	4607      	mov	r7, r0
 800ff56:	4691      	mov	r9, r2
 800ff58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff5c:	f108 0601 	add.w	r6, r8, #1
 800ff60:	42b3      	cmp	r3, r6
 800ff62:	db0b      	blt.n	800ff7c <__lshift+0x38>
 800ff64:	4638      	mov	r0, r7
 800ff66:	f7ff fd95 	bl	800fa94 <_Balloc>
 800ff6a:	4605      	mov	r5, r0
 800ff6c:	b948      	cbnz	r0, 800ff82 <__lshift+0x3e>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	4b28      	ldr	r3, [pc, #160]	@ (8010014 <__lshift+0xd0>)
 800ff72:	4829      	ldr	r0, [pc, #164]	@ (8010018 <__lshift+0xd4>)
 800ff74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ff78:	f7fe fb8c 	bl	800e694 <__assert_func>
 800ff7c:	3101      	adds	r1, #1
 800ff7e:	005b      	lsls	r3, r3, #1
 800ff80:	e7ee      	b.n	800ff60 <__lshift+0x1c>
 800ff82:	2300      	movs	r3, #0
 800ff84:	f100 0114 	add.w	r1, r0, #20
 800ff88:	f100 0210 	add.w	r2, r0, #16
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	4553      	cmp	r3, sl
 800ff90:	db33      	blt.n	800fffa <__lshift+0xb6>
 800ff92:	6920      	ldr	r0, [r4, #16]
 800ff94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff98:	f104 0314 	add.w	r3, r4, #20
 800ff9c:	f019 091f 	ands.w	r9, r9, #31
 800ffa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ffa8:	d02b      	beq.n	8010002 <__lshift+0xbe>
 800ffaa:	f1c9 0e20 	rsb	lr, r9, #32
 800ffae:	468a      	mov	sl, r1
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	6818      	ldr	r0, [r3, #0]
 800ffb4:	fa00 f009 	lsl.w	r0, r0, r9
 800ffb8:	4310      	orrs	r0, r2
 800ffba:	f84a 0b04 	str.w	r0, [sl], #4
 800ffbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffc2:	459c      	cmp	ip, r3
 800ffc4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ffc8:	d8f3      	bhi.n	800ffb2 <__lshift+0x6e>
 800ffca:	ebac 0304 	sub.w	r3, ip, r4
 800ffce:	3b15      	subs	r3, #21
 800ffd0:	f023 0303 	bic.w	r3, r3, #3
 800ffd4:	3304      	adds	r3, #4
 800ffd6:	f104 0015 	add.w	r0, r4, #21
 800ffda:	4584      	cmp	ip, r0
 800ffdc:	bf38      	it	cc
 800ffde:	2304      	movcc	r3, #4
 800ffe0:	50ca      	str	r2, [r1, r3]
 800ffe2:	b10a      	cbz	r2, 800ffe8 <__lshift+0xa4>
 800ffe4:	f108 0602 	add.w	r6, r8, #2
 800ffe8:	3e01      	subs	r6, #1
 800ffea:	4638      	mov	r0, r7
 800ffec:	612e      	str	r6, [r5, #16]
 800ffee:	4621      	mov	r1, r4
 800fff0:	f7ff fd90 	bl	800fb14 <_Bfree>
 800fff4:	4628      	mov	r0, r5
 800fff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fffa:	f842 0f04 	str.w	r0, [r2, #4]!
 800fffe:	3301      	adds	r3, #1
 8010000:	e7c5      	b.n	800ff8e <__lshift+0x4a>
 8010002:	3904      	subs	r1, #4
 8010004:	f853 2b04 	ldr.w	r2, [r3], #4
 8010008:	f841 2f04 	str.w	r2, [r1, #4]!
 801000c:	459c      	cmp	ip, r3
 801000e:	d8f9      	bhi.n	8010004 <__lshift+0xc0>
 8010010:	e7ea      	b.n	800ffe8 <__lshift+0xa4>
 8010012:	bf00      	nop
 8010014:	080111fa 	.word	0x080111fa
 8010018:	0801126b 	.word	0x0801126b

0801001c <__mcmp>:
 801001c:	690a      	ldr	r2, [r1, #16]
 801001e:	4603      	mov	r3, r0
 8010020:	6900      	ldr	r0, [r0, #16]
 8010022:	1a80      	subs	r0, r0, r2
 8010024:	b530      	push	{r4, r5, lr}
 8010026:	d10e      	bne.n	8010046 <__mcmp+0x2a>
 8010028:	3314      	adds	r3, #20
 801002a:	3114      	adds	r1, #20
 801002c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010030:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010034:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010038:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801003c:	4295      	cmp	r5, r2
 801003e:	d003      	beq.n	8010048 <__mcmp+0x2c>
 8010040:	d205      	bcs.n	801004e <__mcmp+0x32>
 8010042:	f04f 30ff 	mov.w	r0, #4294967295
 8010046:	bd30      	pop	{r4, r5, pc}
 8010048:	42a3      	cmp	r3, r4
 801004a:	d3f3      	bcc.n	8010034 <__mcmp+0x18>
 801004c:	e7fb      	b.n	8010046 <__mcmp+0x2a>
 801004e:	2001      	movs	r0, #1
 8010050:	e7f9      	b.n	8010046 <__mcmp+0x2a>
	...

08010054 <__mdiff>:
 8010054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010058:	4689      	mov	r9, r1
 801005a:	4606      	mov	r6, r0
 801005c:	4611      	mov	r1, r2
 801005e:	4648      	mov	r0, r9
 8010060:	4614      	mov	r4, r2
 8010062:	f7ff ffdb 	bl	801001c <__mcmp>
 8010066:	1e05      	subs	r5, r0, #0
 8010068:	d112      	bne.n	8010090 <__mdiff+0x3c>
 801006a:	4629      	mov	r1, r5
 801006c:	4630      	mov	r0, r6
 801006e:	f7ff fd11 	bl	800fa94 <_Balloc>
 8010072:	4602      	mov	r2, r0
 8010074:	b928      	cbnz	r0, 8010082 <__mdiff+0x2e>
 8010076:	4b3f      	ldr	r3, [pc, #252]	@ (8010174 <__mdiff+0x120>)
 8010078:	f240 2137 	movw	r1, #567	@ 0x237
 801007c:	483e      	ldr	r0, [pc, #248]	@ (8010178 <__mdiff+0x124>)
 801007e:	f7fe fb09 	bl	800e694 <__assert_func>
 8010082:	2301      	movs	r3, #1
 8010084:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010088:	4610      	mov	r0, r2
 801008a:	b003      	add	sp, #12
 801008c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010090:	bfbc      	itt	lt
 8010092:	464b      	movlt	r3, r9
 8010094:	46a1      	movlt	r9, r4
 8010096:	4630      	mov	r0, r6
 8010098:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801009c:	bfba      	itte	lt
 801009e:	461c      	movlt	r4, r3
 80100a0:	2501      	movlt	r5, #1
 80100a2:	2500      	movge	r5, #0
 80100a4:	f7ff fcf6 	bl	800fa94 <_Balloc>
 80100a8:	4602      	mov	r2, r0
 80100aa:	b918      	cbnz	r0, 80100b4 <__mdiff+0x60>
 80100ac:	4b31      	ldr	r3, [pc, #196]	@ (8010174 <__mdiff+0x120>)
 80100ae:	f240 2145 	movw	r1, #581	@ 0x245
 80100b2:	e7e3      	b.n	801007c <__mdiff+0x28>
 80100b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80100b8:	6926      	ldr	r6, [r4, #16]
 80100ba:	60c5      	str	r5, [r0, #12]
 80100bc:	f109 0310 	add.w	r3, r9, #16
 80100c0:	f109 0514 	add.w	r5, r9, #20
 80100c4:	f104 0e14 	add.w	lr, r4, #20
 80100c8:	f100 0b14 	add.w	fp, r0, #20
 80100cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80100d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80100d4:	9301      	str	r3, [sp, #4]
 80100d6:	46d9      	mov	r9, fp
 80100d8:	f04f 0c00 	mov.w	ip, #0
 80100dc:	9b01      	ldr	r3, [sp, #4]
 80100de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80100e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80100e6:	9301      	str	r3, [sp, #4]
 80100e8:	fa1f f38a 	uxth.w	r3, sl
 80100ec:	4619      	mov	r1, r3
 80100ee:	b283      	uxth	r3, r0
 80100f0:	1acb      	subs	r3, r1, r3
 80100f2:	0c00      	lsrs	r0, r0, #16
 80100f4:	4463      	add	r3, ip
 80100f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80100fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80100fe:	b29b      	uxth	r3, r3
 8010100:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010104:	4576      	cmp	r6, lr
 8010106:	f849 3b04 	str.w	r3, [r9], #4
 801010a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801010e:	d8e5      	bhi.n	80100dc <__mdiff+0x88>
 8010110:	1b33      	subs	r3, r6, r4
 8010112:	3b15      	subs	r3, #21
 8010114:	f023 0303 	bic.w	r3, r3, #3
 8010118:	3415      	adds	r4, #21
 801011a:	3304      	adds	r3, #4
 801011c:	42a6      	cmp	r6, r4
 801011e:	bf38      	it	cc
 8010120:	2304      	movcc	r3, #4
 8010122:	441d      	add	r5, r3
 8010124:	445b      	add	r3, fp
 8010126:	461e      	mov	r6, r3
 8010128:	462c      	mov	r4, r5
 801012a:	4544      	cmp	r4, r8
 801012c:	d30e      	bcc.n	801014c <__mdiff+0xf8>
 801012e:	f108 0103 	add.w	r1, r8, #3
 8010132:	1b49      	subs	r1, r1, r5
 8010134:	f021 0103 	bic.w	r1, r1, #3
 8010138:	3d03      	subs	r5, #3
 801013a:	45a8      	cmp	r8, r5
 801013c:	bf38      	it	cc
 801013e:	2100      	movcc	r1, #0
 8010140:	440b      	add	r3, r1
 8010142:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010146:	b191      	cbz	r1, 801016e <__mdiff+0x11a>
 8010148:	6117      	str	r7, [r2, #16]
 801014a:	e79d      	b.n	8010088 <__mdiff+0x34>
 801014c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010150:	46e6      	mov	lr, ip
 8010152:	0c08      	lsrs	r0, r1, #16
 8010154:	fa1c fc81 	uxtah	ip, ip, r1
 8010158:	4471      	add	r1, lr
 801015a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801015e:	b289      	uxth	r1, r1
 8010160:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010164:	f846 1b04 	str.w	r1, [r6], #4
 8010168:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801016c:	e7dd      	b.n	801012a <__mdiff+0xd6>
 801016e:	3f01      	subs	r7, #1
 8010170:	e7e7      	b.n	8010142 <__mdiff+0xee>
 8010172:	bf00      	nop
 8010174:	080111fa 	.word	0x080111fa
 8010178:	0801126b 	.word	0x0801126b

0801017c <__ulp>:
 801017c:	b082      	sub	sp, #8
 801017e:	ed8d 0b00 	vstr	d0, [sp]
 8010182:	9a01      	ldr	r2, [sp, #4]
 8010184:	4b0f      	ldr	r3, [pc, #60]	@ (80101c4 <__ulp+0x48>)
 8010186:	4013      	ands	r3, r2
 8010188:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801018c:	2b00      	cmp	r3, #0
 801018e:	dc08      	bgt.n	80101a2 <__ulp+0x26>
 8010190:	425b      	negs	r3, r3
 8010192:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010196:	ea4f 5223 	mov.w	r2, r3, asr #20
 801019a:	da04      	bge.n	80101a6 <__ulp+0x2a>
 801019c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80101a0:	4113      	asrs	r3, r2
 80101a2:	2200      	movs	r2, #0
 80101a4:	e008      	b.n	80101b8 <__ulp+0x3c>
 80101a6:	f1a2 0314 	sub.w	r3, r2, #20
 80101aa:	2b1e      	cmp	r3, #30
 80101ac:	bfda      	itte	le
 80101ae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80101b2:	40da      	lsrle	r2, r3
 80101b4:	2201      	movgt	r2, #1
 80101b6:	2300      	movs	r3, #0
 80101b8:	4619      	mov	r1, r3
 80101ba:	4610      	mov	r0, r2
 80101bc:	ec41 0b10 	vmov	d0, r0, r1
 80101c0:	b002      	add	sp, #8
 80101c2:	4770      	bx	lr
 80101c4:	7ff00000 	.word	0x7ff00000

080101c8 <__b2d>:
 80101c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101cc:	6906      	ldr	r6, [r0, #16]
 80101ce:	f100 0814 	add.w	r8, r0, #20
 80101d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80101d6:	1f37      	subs	r7, r6, #4
 80101d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80101dc:	4610      	mov	r0, r2
 80101de:	f7ff fd4b 	bl	800fc78 <__hi0bits>
 80101e2:	f1c0 0320 	rsb	r3, r0, #32
 80101e6:	280a      	cmp	r0, #10
 80101e8:	600b      	str	r3, [r1, #0]
 80101ea:	491b      	ldr	r1, [pc, #108]	@ (8010258 <__b2d+0x90>)
 80101ec:	dc15      	bgt.n	801021a <__b2d+0x52>
 80101ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80101f2:	fa22 f30c 	lsr.w	r3, r2, ip
 80101f6:	45b8      	cmp	r8, r7
 80101f8:	ea43 0501 	orr.w	r5, r3, r1
 80101fc:	bf34      	ite	cc
 80101fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010202:	2300      	movcs	r3, #0
 8010204:	3015      	adds	r0, #21
 8010206:	fa02 f000 	lsl.w	r0, r2, r0
 801020a:	fa23 f30c 	lsr.w	r3, r3, ip
 801020e:	4303      	orrs	r3, r0
 8010210:	461c      	mov	r4, r3
 8010212:	ec45 4b10 	vmov	d0, r4, r5
 8010216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801021a:	45b8      	cmp	r8, r7
 801021c:	bf3a      	itte	cc
 801021e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010222:	f1a6 0708 	subcc.w	r7, r6, #8
 8010226:	2300      	movcs	r3, #0
 8010228:	380b      	subs	r0, #11
 801022a:	d012      	beq.n	8010252 <__b2d+0x8a>
 801022c:	f1c0 0120 	rsb	r1, r0, #32
 8010230:	fa23 f401 	lsr.w	r4, r3, r1
 8010234:	4082      	lsls	r2, r0
 8010236:	4322      	orrs	r2, r4
 8010238:	4547      	cmp	r7, r8
 801023a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801023e:	bf8c      	ite	hi
 8010240:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010244:	2200      	movls	r2, #0
 8010246:	4083      	lsls	r3, r0
 8010248:	40ca      	lsrs	r2, r1
 801024a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801024e:	4313      	orrs	r3, r2
 8010250:	e7de      	b.n	8010210 <__b2d+0x48>
 8010252:	ea42 0501 	orr.w	r5, r2, r1
 8010256:	e7db      	b.n	8010210 <__b2d+0x48>
 8010258:	3ff00000 	.word	0x3ff00000

0801025c <__d2b>:
 801025c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010260:	460f      	mov	r7, r1
 8010262:	2101      	movs	r1, #1
 8010264:	ec59 8b10 	vmov	r8, r9, d0
 8010268:	4616      	mov	r6, r2
 801026a:	f7ff fc13 	bl	800fa94 <_Balloc>
 801026e:	4604      	mov	r4, r0
 8010270:	b930      	cbnz	r0, 8010280 <__d2b+0x24>
 8010272:	4602      	mov	r2, r0
 8010274:	4b23      	ldr	r3, [pc, #140]	@ (8010304 <__d2b+0xa8>)
 8010276:	4824      	ldr	r0, [pc, #144]	@ (8010308 <__d2b+0xac>)
 8010278:	f240 310f 	movw	r1, #783	@ 0x30f
 801027c:	f7fe fa0a 	bl	800e694 <__assert_func>
 8010280:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010288:	b10d      	cbz	r5, 801028e <__d2b+0x32>
 801028a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801028e:	9301      	str	r3, [sp, #4]
 8010290:	f1b8 0300 	subs.w	r3, r8, #0
 8010294:	d023      	beq.n	80102de <__d2b+0x82>
 8010296:	4668      	mov	r0, sp
 8010298:	9300      	str	r3, [sp, #0]
 801029a:	f7ff fd0c 	bl	800fcb6 <__lo0bits>
 801029e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80102a2:	b1d0      	cbz	r0, 80102da <__d2b+0x7e>
 80102a4:	f1c0 0320 	rsb	r3, r0, #32
 80102a8:	fa02 f303 	lsl.w	r3, r2, r3
 80102ac:	430b      	orrs	r3, r1
 80102ae:	40c2      	lsrs	r2, r0
 80102b0:	6163      	str	r3, [r4, #20]
 80102b2:	9201      	str	r2, [sp, #4]
 80102b4:	9b01      	ldr	r3, [sp, #4]
 80102b6:	61a3      	str	r3, [r4, #24]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	bf0c      	ite	eq
 80102bc:	2201      	moveq	r2, #1
 80102be:	2202      	movne	r2, #2
 80102c0:	6122      	str	r2, [r4, #16]
 80102c2:	b1a5      	cbz	r5, 80102ee <__d2b+0x92>
 80102c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80102c8:	4405      	add	r5, r0
 80102ca:	603d      	str	r5, [r7, #0]
 80102cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80102d0:	6030      	str	r0, [r6, #0]
 80102d2:	4620      	mov	r0, r4
 80102d4:	b003      	add	sp, #12
 80102d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102da:	6161      	str	r1, [r4, #20]
 80102dc:	e7ea      	b.n	80102b4 <__d2b+0x58>
 80102de:	a801      	add	r0, sp, #4
 80102e0:	f7ff fce9 	bl	800fcb6 <__lo0bits>
 80102e4:	9b01      	ldr	r3, [sp, #4]
 80102e6:	6163      	str	r3, [r4, #20]
 80102e8:	3020      	adds	r0, #32
 80102ea:	2201      	movs	r2, #1
 80102ec:	e7e8      	b.n	80102c0 <__d2b+0x64>
 80102ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80102f6:	6038      	str	r0, [r7, #0]
 80102f8:	6918      	ldr	r0, [r3, #16]
 80102fa:	f7ff fcbd 	bl	800fc78 <__hi0bits>
 80102fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010302:	e7e5      	b.n	80102d0 <__d2b+0x74>
 8010304:	080111fa 	.word	0x080111fa
 8010308:	0801126b 	.word	0x0801126b

0801030c <__ratio>:
 801030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010310:	b085      	sub	sp, #20
 8010312:	e9cd 1000 	strd	r1, r0, [sp]
 8010316:	a902      	add	r1, sp, #8
 8010318:	f7ff ff56 	bl	80101c8 <__b2d>
 801031c:	9800      	ldr	r0, [sp, #0]
 801031e:	a903      	add	r1, sp, #12
 8010320:	ec55 4b10 	vmov	r4, r5, d0
 8010324:	f7ff ff50 	bl	80101c8 <__b2d>
 8010328:	9b01      	ldr	r3, [sp, #4]
 801032a:	6919      	ldr	r1, [r3, #16]
 801032c:	9b00      	ldr	r3, [sp, #0]
 801032e:	691b      	ldr	r3, [r3, #16]
 8010330:	1ac9      	subs	r1, r1, r3
 8010332:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010336:	1a9b      	subs	r3, r3, r2
 8010338:	ec5b ab10 	vmov	sl, fp, d0
 801033c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010340:	2b00      	cmp	r3, #0
 8010342:	bfce      	itee	gt
 8010344:	462a      	movgt	r2, r5
 8010346:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801034a:	465a      	movle	r2, fp
 801034c:	462f      	mov	r7, r5
 801034e:	46d9      	mov	r9, fp
 8010350:	bfcc      	ite	gt
 8010352:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010356:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801035a:	464b      	mov	r3, r9
 801035c:	4652      	mov	r2, sl
 801035e:	4620      	mov	r0, r4
 8010360:	4639      	mov	r1, r7
 8010362:	f7f0 fa9b 	bl	800089c <__aeabi_ddiv>
 8010366:	ec41 0b10 	vmov	d0, r0, r1
 801036a:	b005      	add	sp, #20
 801036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010370 <__copybits>:
 8010370:	3901      	subs	r1, #1
 8010372:	b570      	push	{r4, r5, r6, lr}
 8010374:	1149      	asrs	r1, r1, #5
 8010376:	6914      	ldr	r4, [r2, #16]
 8010378:	3101      	adds	r1, #1
 801037a:	f102 0314 	add.w	r3, r2, #20
 801037e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010382:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010386:	1f05      	subs	r5, r0, #4
 8010388:	42a3      	cmp	r3, r4
 801038a:	d30c      	bcc.n	80103a6 <__copybits+0x36>
 801038c:	1aa3      	subs	r3, r4, r2
 801038e:	3b11      	subs	r3, #17
 8010390:	f023 0303 	bic.w	r3, r3, #3
 8010394:	3211      	adds	r2, #17
 8010396:	42a2      	cmp	r2, r4
 8010398:	bf88      	it	hi
 801039a:	2300      	movhi	r3, #0
 801039c:	4418      	add	r0, r3
 801039e:	2300      	movs	r3, #0
 80103a0:	4288      	cmp	r0, r1
 80103a2:	d305      	bcc.n	80103b0 <__copybits+0x40>
 80103a4:	bd70      	pop	{r4, r5, r6, pc}
 80103a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80103aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80103ae:	e7eb      	b.n	8010388 <__copybits+0x18>
 80103b0:	f840 3b04 	str.w	r3, [r0], #4
 80103b4:	e7f4      	b.n	80103a0 <__copybits+0x30>

080103b6 <__any_on>:
 80103b6:	f100 0214 	add.w	r2, r0, #20
 80103ba:	6900      	ldr	r0, [r0, #16]
 80103bc:	114b      	asrs	r3, r1, #5
 80103be:	4298      	cmp	r0, r3
 80103c0:	b510      	push	{r4, lr}
 80103c2:	db11      	blt.n	80103e8 <__any_on+0x32>
 80103c4:	dd0a      	ble.n	80103dc <__any_on+0x26>
 80103c6:	f011 011f 	ands.w	r1, r1, #31
 80103ca:	d007      	beq.n	80103dc <__any_on+0x26>
 80103cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80103d0:	fa24 f001 	lsr.w	r0, r4, r1
 80103d4:	fa00 f101 	lsl.w	r1, r0, r1
 80103d8:	428c      	cmp	r4, r1
 80103da:	d10b      	bne.n	80103f4 <__any_on+0x3e>
 80103dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d803      	bhi.n	80103ec <__any_on+0x36>
 80103e4:	2000      	movs	r0, #0
 80103e6:	bd10      	pop	{r4, pc}
 80103e8:	4603      	mov	r3, r0
 80103ea:	e7f7      	b.n	80103dc <__any_on+0x26>
 80103ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80103f0:	2900      	cmp	r1, #0
 80103f2:	d0f5      	beq.n	80103e0 <__any_on+0x2a>
 80103f4:	2001      	movs	r0, #1
 80103f6:	e7f6      	b.n	80103e6 <__any_on+0x30>

080103f8 <__ascii_wctomb>:
 80103f8:	4603      	mov	r3, r0
 80103fa:	4608      	mov	r0, r1
 80103fc:	b141      	cbz	r1, 8010410 <__ascii_wctomb+0x18>
 80103fe:	2aff      	cmp	r2, #255	@ 0xff
 8010400:	d904      	bls.n	801040c <__ascii_wctomb+0x14>
 8010402:	228a      	movs	r2, #138	@ 0x8a
 8010404:	601a      	str	r2, [r3, #0]
 8010406:	f04f 30ff 	mov.w	r0, #4294967295
 801040a:	4770      	bx	lr
 801040c:	700a      	strb	r2, [r1, #0]
 801040e:	2001      	movs	r0, #1
 8010410:	4770      	bx	lr

08010412 <__ssputs_r>:
 8010412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010416:	688e      	ldr	r6, [r1, #8]
 8010418:	461f      	mov	r7, r3
 801041a:	42be      	cmp	r6, r7
 801041c:	680b      	ldr	r3, [r1, #0]
 801041e:	4682      	mov	sl, r0
 8010420:	460c      	mov	r4, r1
 8010422:	4690      	mov	r8, r2
 8010424:	d82d      	bhi.n	8010482 <__ssputs_r+0x70>
 8010426:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801042a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801042e:	d026      	beq.n	801047e <__ssputs_r+0x6c>
 8010430:	6965      	ldr	r5, [r4, #20]
 8010432:	6909      	ldr	r1, [r1, #16]
 8010434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010438:	eba3 0901 	sub.w	r9, r3, r1
 801043c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010440:	1c7b      	adds	r3, r7, #1
 8010442:	444b      	add	r3, r9
 8010444:	106d      	asrs	r5, r5, #1
 8010446:	429d      	cmp	r5, r3
 8010448:	bf38      	it	cc
 801044a:	461d      	movcc	r5, r3
 801044c:	0553      	lsls	r3, r2, #21
 801044e:	d527      	bpl.n	80104a0 <__ssputs_r+0x8e>
 8010450:	4629      	mov	r1, r5
 8010452:	f7fc f98b 	bl	800c76c <_malloc_r>
 8010456:	4606      	mov	r6, r0
 8010458:	b360      	cbz	r0, 80104b4 <__ssputs_r+0xa2>
 801045a:	6921      	ldr	r1, [r4, #16]
 801045c:	464a      	mov	r2, r9
 801045e:	f7fe f8fc 	bl	800e65a <memcpy>
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801046c:	81a3      	strh	r3, [r4, #12]
 801046e:	6126      	str	r6, [r4, #16]
 8010470:	6165      	str	r5, [r4, #20]
 8010472:	444e      	add	r6, r9
 8010474:	eba5 0509 	sub.w	r5, r5, r9
 8010478:	6026      	str	r6, [r4, #0]
 801047a:	60a5      	str	r5, [r4, #8]
 801047c:	463e      	mov	r6, r7
 801047e:	42be      	cmp	r6, r7
 8010480:	d900      	bls.n	8010484 <__ssputs_r+0x72>
 8010482:	463e      	mov	r6, r7
 8010484:	6820      	ldr	r0, [r4, #0]
 8010486:	4632      	mov	r2, r6
 8010488:	4641      	mov	r1, r8
 801048a:	f000 f9d7 	bl	801083c <memmove>
 801048e:	68a3      	ldr	r3, [r4, #8]
 8010490:	1b9b      	subs	r3, r3, r6
 8010492:	60a3      	str	r3, [r4, #8]
 8010494:	6823      	ldr	r3, [r4, #0]
 8010496:	4433      	add	r3, r6
 8010498:	6023      	str	r3, [r4, #0]
 801049a:	2000      	movs	r0, #0
 801049c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a0:	462a      	mov	r2, r5
 80104a2:	f000 fa00 	bl	80108a6 <_realloc_r>
 80104a6:	4606      	mov	r6, r0
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d1e0      	bne.n	801046e <__ssputs_r+0x5c>
 80104ac:	6921      	ldr	r1, [r4, #16]
 80104ae:	4650      	mov	r0, sl
 80104b0:	f7fe ff5a 	bl	800f368 <_free_r>
 80104b4:	230c      	movs	r3, #12
 80104b6:	f8ca 3000 	str.w	r3, [sl]
 80104ba:	89a3      	ldrh	r3, [r4, #12]
 80104bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104c0:	81a3      	strh	r3, [r4, #12]
 80104c2:	f04f 30ff 	mov.w	r0, #4294967295
 80104c6:	e7e9      	b.n	801049c <__ssputs_r+0x8a>

080104c8 <_svfiprintf_r>:
 80104c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104cc:	4698      	mov	r8, r3
 80104ce:	898b      	ldrh	r3, [r1, #12]
 80104d0:	061b      	lsls	r3, r3, #24
 80104d2:	b09d      	sub	sp, #116	@ 0x74
 80104d4:	4607      	mov	r7, r0
 80104d6:	460d      	mov	r5, r1
 80104d8:	4614      	mov	r4, r2
 80104da:	d510      	bpl.n	80104fe <_svfiprintf_r+0x36>
 80104dc:	690b      	ldr	r3, [r1, #16]
 80104de:	b973      	cbnz	r3, 80104fe <_svfiprintf_r+0x36>
 80104e0:	2140      	movs	r1, #64	@ 0x40
 80104e2:	f7fc f943 	bl	800c76c <_malloc_r>
 80104e6:	6028      	str	r0, [r5, #0]
 80104e8:	6128      	str	r0, [r5, #16]
 80104ea:	b930      	cbnz	r0, 80104fa <_svfiprintf_r+0x32>
 80104ec:	230c      	movs	r3, #12
 80104ee:	603b      	str	r3, [r7, #0]
 80104f0:	f04f 30ff 	mov.w	r0, #4294967295
 80104f4:	b01d      	add	sp, #116	@ 0x74
 80104f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104fa:	2340      	movs	r3, #64	@ 0x40
 80104fc:	616b      	str	r3, [r5, #20]
 80104fe:	2300      	movs	r3, #0
 8010500:	9309      	str	r3, [sp, #36]	@ 0x24
 8010502:	2320      	movs	r3, #32
 8010504:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010508:	f8cd 800c 	str.w	r8, [sp, #12]
 801050c:	2330      	movs	r3, #48	@ 0x30
 801050e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80106ac <_svfiprintf_r+0x1e4>
 8010512:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010516:	f04f 0901 	mov.w	r9, #1
 801051a:	4623      	mov	r3, r4
 801051c:	469a      	mov	sl, r3
 801051e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010522:	b10a      	cbz	r2, 8010528 <_svfiprintf_r+0x60>
 8010524:	2a25      	cmp	r2, #37	@ 0x25
 8010526:	d1f9      	bne.n	801051c <_svfiprintf_r+0x54>
 8010528:	ebba 0b04 	subs.w	fp, sl, r4
 801052c:	d00b      	beq.n	8010546 <_svfiprintf_r+0x7e>
 801052e:	465b      	mov	r3, fp
 8010530:	4622      	mov	r2, r4
 8010532:	4629      	mov	r1, r5
 8010534:	4638      	mov	r0, r7
 8010536:	f7ff ff6c 	bl	8010412 <__ssputs_r>
 801053a:	3001      	adds	r0, #1
 801053c:	f000 80a7 	beq.w	801068e <_svfiprintf_r+0x1c6>
 8010540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010542:	445a      	add	r2, fp
 8010544:	9209      	str	r2, [sp, #36]	@ 0x24
 8010546:	f89a 3000 	ldrb.w	r3, [sl]
 801054a:	2b00      	cmp	r3, #0
 801054c:	f000 809f 	beq.w	801068e <_svfiprintf_r+0x1c6>
 8010550:	2300      	movs	r3, #0
 8010552:	f04f 32ff 	mov.w	r2, #4294967295
 8010556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801055a:	f10a 0a01 	add.w	sl, sl, #1
 801055e:	9304      	str	r3, [sp, #16]
 8010560:	9307      	str	r3, [sp, #28]
 8010562:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010566:	931a      	str	r3, [sp, #104]	@ 0x68
 8010568:	4654      	mov	r4, sl
 801056a:	2205      	movs	r2, #5
 801056c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010570:	484e      	ldr	r0, [pc, #312]	@ (80106ac <_svfiprintf_r+0x1e4>)
 8010572:	f7ef fe55 	bl	8000220 <memchr>
 8010576:	9a04      	ldr	r2, [sp, #16]
 8010578:	b9d8      	cbnz	r0, 80105b2 <_svfiprintf_r+0xea>
 801057a:	06d0      	lsls	r0, r2, #27
 801057c:	bf44      	itt	mi
 801057e:	2320      	movmi	r3, #32
 8010580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010584:	0711      	lsls	r1, r2, #28
 8010586:	bf44      	itt	mi
 8010588:	232b      	movmi	r3, #43	@ 0x2b
 801058a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801058e:	f89a 3000 	ldrb.w	r3, [sl]
 8010592:	2b2a      	cmp	r3, #42	@ 0x2a
 8010594:	d015      	beq.n	80105c2 <_svfiprintf_r+0xfa>
 8010596:	9a07      	ldr	r2, [sp, #28]
 8010598:	4654      	mov	r4, sl
 801059a:	2000      	movs	r0, #0
 801059c:	f04f 0c0a 	mov.w	ip, #10
 80105a0:	4621      	mov	r1, r4
 80105a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105a6:	3b30      	subs	r3, #48	@ 0x30
 80105a8:	2b09      	cmp	r3, #9
 80105aa:	d94b      	bls.n	8010644 <_svfiprintf_r+0x17c>
 80105ac:	b1b0      	cbz	r0, 80105dc <_svfiprintf_r+0x114>
 80105ae:	9207      	str	r2, [sp, #28]
 80105b0:	e014      	b.n	80105dc <_svfiprintf_r+0x114>
 80105b2:	eba0 0308 	sub.w	r3, r0, r8
 80105b6:	fa09 f303 	lsl.w	r3, r9, r3
 80105ba:	4313      	orrs	r3, r2
 80105bc:	9304      	str	r3, [sp, #16]
 80105be:	46a2      	mov	sl, r4
 80105c0:	e7d2      	b.n	8010568 <_svfiprintf_r+0xa0>
 80105c2:	9b03      	ldr	r3, [sp, #12]
 80105c4:	1d19      	adds	r1, r3, #4
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	9103      	str	r1, [sp, #12]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	bfbb      	ittet	lt
 80105ce:	425b      	neglt	r3, r3
 80105d0:	f042 0202 	orrlt.w	r2, r2, #2
 80105d4:	9307      	strge	r3, [sp, #28]
 80105d6:	9307      	strlt	r3, [sp, #28]
 80105d8:	bfb8      	it	lt
 80105da:	9204      	strlt	r2, [sp, #16]
 80105dc:	7823      	ldrb	r3, [r4, #0]
 80105de:	2b2e      	cmp	r3, #46	@ 0x2e
 80105e0:	d10a      	bne.n	80105f8 <_svfiprintf_r+0x130>
 80105e2:	7863      	ldrb	r3, [r4, #1]
 80105e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80105e6:	d132      	bne.n	801064e <_svfiprintf_r+0x186>
 80105e8:	9b03      	ldr	r3, [sp, #12]
 80105ea:	1d1a      	adds	r2, r3, #4
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	9203      	str	r2, [sp, #12]
 80105f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105f4:	3402      	adds	r4, #2
 80105f6:	9305      	str	r3, [sp, #20]
 80105f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80106bc <_svfiprintf_r+0x1f4>
 80105fc:	7821      	ldrb	r1, [r4, #0]
 80105fe:	2203      	movs	r2, #3
 8010600:	4650      	mov	r0, sl
 8010602:	f7ef fe0d 	bl	8000220 <memchr>
 8010606:	b138      	cbz	r0, 8010618 <_svfiprintf_r+0x150>
 8010608:	9b04      	ldr	r3, [sp, #16]
 801060a:	eba0 000a 	sub.w	r0, r0, sl
 801060e:	2240      	movs	r2, #64	@ 0x40
 8010610:	4082      	lsls	r2, r0
 8010612:	4313      	orrs	r3, r2
 8010614:	3401      	adds	r4, #1
 8010616:	9304      	str	r3, [sp, #16]
 8010618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801061c:	4824      	ldr	r0, [pc, #144]	@ (80106b0 <_svfiprintf_r+0x1e8>)
 801061e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010622:	2206      	movs	r2, #6
 8010624:	f7ef fdfc 	bl	8000220 <memchr>
 8010628:	2800      	cmp	r0, #0
 801062a:	d036      	beq.n	801069a <_svfiprintf_r+0x1d2>
 801062c:	4b21      	ldr	r3, [pc, #132]	@ (80106b4 <_svfiprintf_r+0x1ec>)
 801062e:	bb1b      	cbnz	r3, 8010678 <_svfiprintf_r+0x1b0>
 8010630:	9b03      	ldr	r3, [sp, #12]
 8010632:	3307      	adds	r3, #7
 8010634:	f023 0307 	bic.w	r3, r3, #7
 8010638:	3308      	adds	r3, #8
 801063a:	9303      	str	r3, [sp, #12]
 801063c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801063e:	4433      	add	r3, r6
 8010640:	9309      	str	r3, [sp, #36]	@ 0x24
 8010642:	e76a      	b.n	801051a <_svfiprintf_r+0x52>
 8010644:	fb0c 3202 	mla	r2, ip, r2, r3
 8010648:	460c      	mov	r4, r1
 801064a:	2001      	movs	r0, #1
 801064c:	e7a8      	b.n	80105a0 <_svfiprintf_r+0xd8>
 801064e:	2300      	movs	r3, #0
 8010650:	3401      	adds	r4, #1
 8010652:	9305      	str	r3, [sp, #20]
 8010654:	4619      	mov	r1, r3
 8010656:	f04f 0c0a 	mov.w	ip, #10
 801065a:	4620      	mov	r0, r4
 801065c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010660:	3a30      	subs	r2, #48	@ 0x30
 8010662:	2a09      	cmp	r2, #9
 8010664:	d903      	bls.n	801066e <_svfiprintf_r+0x1a6>
 8010666:	2b00      	cmp	r3, #0
 8010668:	d0c6      	beq.n	80105f8 <_svfiprintf_r+0x130>
 801066a:	9105      	str	r1, [sp, #20]
 801066c:	e7c4      	b.n	80105f8 <_svfiprintf_r+0x130>
 801066e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010672:	4604      	mov	r4, r0
 8010674:	2301      	movs	r3, #1
 8010676:	e7f0      	b.n	801065a <_svfiprintf_r+0x192>
 8010678:	ab03      	add	r3, sp, #12
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	462a      	mov	r2, r5
 801067e:	4b0e      	ldr	r3, [pc, #56]	@ (80106b8 <_svfiprintf_r+0x1f0>)
 8010680:	a904      	add	r1, sp, #16
 8010682:	4638      	mov	r0, r7
 8010684:	f7fd f822 	bl	800d6cc <_printf_float>
 8010688:	1c42      	adds	r2, r0, #1
 801068a:	4606      	mov	r6, r0
 801068c:	d1d6      	bne.n	801063c <_svfiprintf_r+0x174>
 801068e:	89ab      	ldrh	r3, [r5, #12]
 8010690:	065b      	lsls	r3, r3, #25
 8010692:	f53f af2d 	bmi.w	80104f0 <_svfiprintf_r+0x28>
 8010696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010698:	e72c      	b.n	80104f4 <_svfiprintf_r+0x2c>
 801069a:	ab03      	add	r3, sp, #12
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	462a      	mov	r2, r5
 80106a0:	4b05      	ldr	r3, [pc, #20]	@ (80106b8 <_svfiprintf_r+0x1f0>)
 80106a2:	a904      	add	r1, sp, #16
 80106a4:	4638      	mov	r0, r7
 80106a6:	f7fd faa9 	bl	800dbfc <_printf_i>
 80106aa:	e7ed      	b.n	8010688 <_svfiprintf_r+0x1c0>
 80106ac:	080113c0 	.word	0x080113c0
 80106b0:	080113ca 	.word	0x080113ca
 80106b4:	0800d6cd 	.word	0x0800d6cd
 80106b8:	08010413 	.word	0x08010413
 80106bc:	080113c6 	.word	0x080113c6

080106c0 <__sflush_r>:
 80106c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80106c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c8:	0716      	lsls	r6, r2, #28
 80106ca:	4605      	mov	r5, r0
 80106cc:	460c      	mov	r4, r1
 80106ce:	d454      	bmi.n	801077a <__sflush_r+0xba>
 80106d0:	684b      	ldr	r3, [r1, #4]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	dc02      	bgt.n	80106dc <__sflush_r+0x1c>
 80106d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80106d8:	2b00      	cmp	r3, #0
 80106da:	dd48      	ble.n	801076e <__sflush_r+0xae>
 80106dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106de:	2e00      	cmp	r6, #0
 80106e0:	d045      	beq.n	801076e <__sflush_r+0xae>
 80106e2:	2300      	movs	r3, #0
 80106e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80106e8:	682f      	ldr	r7, [r5, #0]
 80106ea:	6a21      	ldr	r1, [r4, #32]
 80106ec:	602b      	str	r3, [r5, #0]
 80106ee:	d030      	beq.n	8010752 <__sflush_r+0x92>
 80106f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80106f2:	89a3      	ldrh	r3, [r4, #12]
 80106f4:	0759      	lsls	r1, r3, #29
 80106f6:	d505      	bpl.n	8010704 <__sflush_r+0x44>
 80106f8:	6863      	ldr	r3, [r4, #4]
 80106fa:	1ad2      	subs	r2, r2, r3
 80106fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80106fe:	b10b      	cbz	r3, 8010704 <__sflush_r+0x44>
 8010700:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010702:	1ad2      	subs	r2, r2, r3
 8010704:	2300      	movs	r3, #0
 8010706:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010708:	6a21      	ldr	r1, [r4, #32]
 801070a:	4628      	mov	r0, r5
 801070c:	47b0      	blx	r6
 801070e:	1c43      	adds	r3, r0, #1
 8010710:	89a3      	ldrh	r3, [r4, #12]
 8010712:	d106      	bne.n	8010722 <__sflush_r+0x62>
 8010714:	6829      	ldr	r1, [r5, #0]
 8010716:	291d      	cmp	r1, #29
 8010718:	d82b      	bhi.n	8010772 <__sflush_r+0xb2>
 801071a:	4a2a      	ldr	r2, [pc, #168]	@ (80107c4 <__sflush_r+0x104>)
 801071c:	410a      	asrs	r2, r1
 801071e:	07d6      	lsls	r6, r2, #31
 8010720:	d427      	bmi.n	8010772 <__sflush_r+0xb2>
 8010722:	2200      	movs	r2, #0
 8010724:	6062      	str	r2, [r4, #4]
 8010726:	04d9      	lsls	r1, r3, #19
 8010728:	6922      	ldr	r2, [r4, #16]
 801072a:	6022      	str	r2, [r4, #0]
 801072c:	d504      	bpl.n	8010738 <__sflush_r+0x78>
 801072e:	1c42      	adds	r2, r0, #1
 8010730:	d101      	bne.n	8010736 <__sflush_r+0x76>
 8010732:	682b      	ldr	r3, [r5, #0]
 8010734:	b903      	cbnz	r3, 8010738 <__sflush_r+0x78>
 8010736:	6560      	str	r0, [r4, #84]	@ 0x54
 8010738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801073a:	602f      	str	r7, [r5, #0]
 801073c:	b1b9      	cbz	r1, 801076e <__sflush_r+0xae>
 801073e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010742:	4299      	cmp	r1, r3
 8010744:	d002      	beq.n	801074c <__sflush_r+0x8c>
 8010746:	4628      	mov	r0, r5
 8010748:	f7fe fe0e 	bl	800f368 <_free_r>
 801074c:	2300      	movs	r3, #0
 801074e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010750:	e00d      	b.n	801076e <__sflush_r+0xae>
 8010752:	2301      	movs	r3, #1
 8010754:	4628      	mov	r0, r5
 8010756:	47b0      	blx	r6
 8010758:	4602      	mov	r2, r0
 801075a:	1c50      	adds	r0, r2, #1
 801075c:	d1c9      	bne.n	80106f2 <__sflush_r+0x32>
 801075e:	682b      	ldr	r3, [r5, #0]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d0c6      	beq.n	80106f2 <__sflush_r+0x32>
 8010764:	2b1d      	cmp	r3, #29
 8010766:	d001      	beq.n	801076c <__sflush_r+0xac>
 8010768:	2b16      	cmp	r3, #22
 801076a:	d11e      	bne.n	80107aa <__sflush_r+0xea>
 801076c:	602f      	str	r7, [r5, #0]
 801076e:	2000      	movs	r0, #0
 8010770:	e022      	b.n	80107b8 <__sflush_r+0xf8>
 8010772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010776:	b21b      	sxth	r3, r3
 8010778:	e01b      	b.n	80107b2 <__sflush_r+0xf2>
 801077a:	690f      	ldr	r7, [r1, #16]
 801077c:	2f00      	cmp	r7, #0
 801077e:	d0f6      	beq.n	801076e <__sflush_r+0xae>
 8010780:	0793      	lsls	r3, r2, #30
 8010782:	680e      	ldr	r6, [r1, #0]
 8010784:	bf08      	it	eq
 8010786:	694b      	ldreq	r3, [r1, #20]
 8010788:	600f      	str	r7, [r1, #0]
 801078a:	bf18      	it	ne
 801078c:	2300      	movne	r3, #0
 801078e:	eba6 0807 	sub.w	r8, r6, r7
 8010792:	608b      	str	r3, [r1, #8]
 8010794:	f1b8 0f00 	cmp.w	r8, #0
 8010798:	dde9      	ble.n	801076e <__sflush_r+0xae>
 801079a:	6a21      	ldr	r1, [r4, #32]
 801079c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801079e:	4643      	mov	r3, r8
 80107a0:	463a      	mov	r2, r7
 80107a2:	4628      	mov	r0, r5
 80107a4:	47b0      	blx	r6
 80107a6:	2800      	cmp	r0, #0
 80107a8:	dc08      	bgt.n	80107bc <__sflush_r+0xfc>
 80107aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107b2:	81a3      	strh	r3, [r4, #12]
 80107b4:	f04f 30ff 	mov.w	r0, #4294967295
 80107b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107bc:	4407      	add	r7, r0
 80107be:	eba8 0800 	sub.w	r8, r8, r0
 80107c2:	e7e7      	b.n	8010794 <__sflush_r+0xd4>
 80107c4:	dfbffffe 	.word	0xdfbffffe

080107c8 <_fflush_r>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	690b      	ldr	r3, [r1, #16]
 80107cc:	4605      	mov	r5, r0
 80107ce:	460c      	mov	r4, r1
 80107d0:	b913      	cbnz	r3, 80107d8 <_fflush_r+0x10>
 80107d2:	2500      	movs	r5, #0
 80107d4:	4628      	mov	r0, r5
 80107d6:	bd38      	pop	{r3, r4, r5, pc}
 80107d8:	b118      	cbz	r0, 80107e2 <_fflush_r+0x1a>
 80107da:	6a03      	ldr	r3, [r0, #32]
 80107dc:	b90b      	cbnz	r3, 80107e2 <_fflush_r+0x1a>
 80107de:	f7fd fdcd 	bl	800e37c <__sinit>
 80107e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d0f3      	beq.n	80107d2 <_fflush_r+0xa>
 80107ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80107ec:	07d0      	lsls	r0, r2, #31
 80107ee:	d404      	bmi.n	80107fa <_fflush_r+0x32>
 80107f0:	0599      	lsls	r1, r3, #22
 80107f2:	d402      	bmi.n	80107fa <_fflush_r+0x32>
 80107f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107f6:	f7fd ff2e 	bl	800e656 <__retarget_lock_acquire_recursive>
 80107fa:	4628      	mov	r0, r5
 80107fc:	4621      	mov	r1, r4
 80107fe:	f7ff ff5f 	bl	80106c0 <__sflush_r>
 8010802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010804:	07da      	lsls	r2, r3, #31
 8010806:	4605      	mov	r5, r0
 8010808:	d4e4      	bmi.n	80107d4 <_fflush_r+0xc>
 801080a:	89a3      	ldrh	r3, [r4, #12]
 801080c:	059b      	lsls	r3, r3, #22
 801080e:	d4e1      	bmi.n	80107d4 <_fflush_r+0xc>
 8010810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010812:	f7fd ff21 	bl	800e658 <__retarget_lock_release_recursive>
 8010816:	e7dd      	b.n	80107d4 <_fflush_r+0xc>

08010818 <fiprintf>:
 8010818:	b40e      	push	{r1, r2, r3}
 801081a:	b503      	push	{r0, r1, lr}
 801081c:	4601      	mov	r1, r0
 801081e:	ab03      	add	r3, sp, #12
 8010820:	4805      	ldr	r0, [pc, #20]	@ (8010838 <fiprintf+0x20>)
 8010822:	f853 2b04 	ldr.w	r2, [r3], #4
 8010826:	6800      	ldr	r0, [r0, #0]
 8010828:	9301      	str	r3, [sp, #4]
 801082a:	f000 f893 	bl	8010954 <_vfiprintf_r>
 801082e:	b002      	add	sp, #8
 8010830:	f85d eb04 	ldr.w	lr, [sp], #4
 8010834:	b003      	add	sp, #12
 8010836:	4770      	bx	lr
 8010838:	200001a4 	.word	0x200001a4

0801083c <memmove>:
 801083c:	4288      	cmp	r0, r1
 801083e:	b510      	push	{r4, lr}
 8010840:	eb01 0402 	add.w	r4, r1, r2
 8010844:	d902      	bls.n	801084c <memmove+0x10>
 8010846:	4284      	cmp	r4, r0
 8010848:	4623      	mov	r3, r4
 801084a:	d807      	bhi.n	801085c <memmove+0x20>
 801084c:	1e43      	subs	r3, r0, #1
 801084e:	42a1      	cmp	r1, r4
 8010850:	d008      	beq.n	8010864 <memmove+0x28>
 8010852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010856:	f803 2f01 	strb.w	r2, [r3, #1]!
 801085a:	e7f8      	b.n	801084e <memmove+0x12>
 801085c:	4402      	add	r2, r0
 801085e:	4601      	mov	r1, r0
 8010860:	428a      	cmp	r2, r1
 8010862:	d100      	bne.n	8010866 <memmove+0x2a>
 8010864:	bd10      	pop	{r4, pc}
 8010866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801086a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801086e:	e7f7      	b.n	8010860 <memmove+0x24>

08010870 <abort>:
 8010870:	b508      	push	{r3, lr}
 8010872:	2006      	movs	r0, #6
 8010874:	f000 fa42 	bl	8010cfc <raise>
 8010878:	2001      	movs	r0, #1
 801087a:	f7f2 f827 	bl	80028cc <_exit>

0801087e <_calloc_r>:
 801087e:	b570      	push	{r4, r5, r6, lr}
 8010880:	fba1 5402 	umull	r5, r4, r1, r2
 8010884:	b93c      	cbnz	r4, 8010896 <_calloc_r+0x18>
 8010886:	4629      	mov	r1, r5
 8010888:	f7fb ff70 	bl	800c76c <_malloc_r>
 801088c:	4606      	mov	r6, r0
 801088e:	b928      	cbnz	r0, 801089c <_calloc_r+0x1e>
 8010890:	2600      	movs	r6, #0
 8010892:	4630      	mov	r0, r6
 8010894:	bd70      	pop	{r4, r5, r6, pc}
 8010896:	220c      	movs	r2, #12
 8010898:	6002      	str	r2, [r0, #0]
 801089a:	e7f9      	b.n	8010890 <_calloc_r+0x12>
 801089c:	462a      	mov	r2, r5
 801089e:	4621      	mov	r1, r4
 80108a0:	f7fd fe39 	bl	800e516 <memset>
 80108a4:	e7f5      	b.n	8010892 <_calloc_r+0x14>

080108a6 <_realloc_r>:
 80108a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108aa:	4680      	mov	r8, r0
 80108ac:	4615      	mov	r5, r2
 80108ae:	460c      	mov	r4, r1
 80108b0:	b921      	cbnz	r1, 80108bc <_realloc_r+0x16>
 80108b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108b6:	4611      	mov	r1, r2
 80108b8:	f7fb bf58 	b.w	800c76c <_malloc_r>
 80108bc:	b92a      	cbnz	r2, 80108ca <_realloc_r+0x24>
 80108be:	f7fe fd53 	bl	800f368 <_free_r>
 80108c2:	2400      	movs	r4, #0
 80108c4:	4620      	mov	r0, r4
 80108c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ca:	f000 fa33 	bl	8010d34 <_malloc_usable_size_r>
 80108ce:	4285      	cmp	r5, r0
 80108d0:	4606      	mov	r6, r0
 80108d2:	d802      	bhi.n	80108da <_realloc_r+0x34>
 80108d4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80108d8:	d8f4      	bhi.n	80108c4 <_realloc_r+0x1e>
 80108da:	4629      	mov	r1, r5
 80108dc:	4640      	mov	r0, r8
 80108de:	f7fb ff45 	bl	800c76c <_malloc_r>
 80108e2:	4607      	mov	r7, r0
 80108e4:	2800      	cmp	r0, #0
 80108e6:	d0ec      	beq.n	80108c2 <_realloc_r+0x1c>
 80108e8:	42b5      	cmp	r5, r6
 80108ea:	462a      	mov	r2, r5
 80108ec:	4621      	mov	r1, r4
 80108ee:	bf28      	it	cs
 80108f0:	4632      	movcs	r2, r6
 80108f2:	f7fd feb2 	bl	800e65a <memcpy>
 80108f6:	4621      	mov	r1, r4
 80108f8:	4640      	mov	r0, r8
 80108fa:	f7fe fd35 	bl	800f368 <_free_r>
 80108fe:	463c      	mov	r4, r7
 8010900:	e7e0      	b.n	80108c4 <_realloc_r+0x1e>

08010902 <__sfputc_r>:
 8010902:	6893      	ldr	r3, [r2, #8]
 8010904:	3b01      	subs	r3, #1
 8010906:	2b00      	cmp	r3, #0
 8010908:	b410      	push	{r4}
 801090a:	6093      	str	r3, [r2, #8]
 801090c:	da08      	bge.n	8010920 <__sfputc_r+0x1e>
 801090e:	6994      	ldr	r4, [r2, #24]
 8010910:	42a3      	cmp	r3, r4
 8010912:	db01      	blt.n	8010918 <__sfputc_r+0x16>
 8010914:	290a      	cmp	r1, #10
 8010916:	d103      	bne.n	8010920 <__sfputc_r+0x1e>
 8010918:	f85d 4b04 	ldr.w	r4, [sp], #4
 801091c:	f000 b932 	b.w	8010b84 <__swbuf_r>
 8010920:	6813      	ldr	r3, [r2, #0]
 8010922:	1c58      	adds	r0, r3, #1
 8010924:	6010      	str	r0, [r2, #0]
 8010926:	7019      	strb	r1, [r3, #0]
 8010928:	4608      	mov	r0, r1
 801092a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801092e:	4770      	bx	lr

08010930 <__sfputs_r>:
 8010930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010932:	4606      	mov	r6, r0
 8010934:	460f      	mov	r7, r1
 8010936:	4614      	mov	r4, r2
 8010938:	18d5      	adds	r5, r2, r3
 801093a:	42ac      	cmp	r4, r5
 801093c:	d101      	bne.n	8010942 <__sfputs_r+0x12>
 801093e:	2000      	movs	r0, #0
 8010940:	e007      	b.n	8010952 <__sfputs_r+0x22>
 8010942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010946:	463a      	mov	r2, r7
 8010948:	4630      	mov	r0, r6
 801094a:	f7ff ffda 	bl	8010902 <__sfputc_r>
 801094e:	1c43      	adds	r3, r0, #1
 8010950:	d1f3      	bne.n	801093a <__sfputs_r+0xa>
 8010952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010954 <_vfiprintf_r>:
 8010954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010958:	460d      	mov	r5, r1
 801095a:	b09d      	sub	sp, #116	@ 0x74
 801095c:	4614      	mov	r4, r2
 801095e:	4698      	mov	r8, r3
 8010960:	4606      	mov	r6, r0
 8010962:	b118      	cbz	r0, 801096c <_vfiprintf_r+0x18>
 8010964:	6a03      	ldr	r3, [r0, #32]
 8010966:	b90b      	cbnz	r3, 801096c <_vfiprintf_r+0x18>
 8010968:	f7fd fd08 	bl	800e37c <__sinit>
 801096c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801096e:	07d9      	lsls	r1, r3, #31
 8010970:	d405      	bmi.n	801097e <_vfiprintf_r+0x2a>
 8010972:	89ab      	ldrh	r3, [r5, #12]
 8010974:	059a      	lsls	r2, r3, #22
 8010976:	d402      	bmi.n	801097e <_vfiprintf_r+0x2a>
 8010978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801097a:	f7fd fe6c 	bl	800e656 <__retarget_lock_acquire_recursive>
 801097e:	89ab      	ldrh	r3, [r5, #12]
 8010980:	071b      	lsls	r3, r3, #28
 8010982:	d501      	bpl.n	8010988 <_vfiprintf_r+0x34>
 8010984:	692b      	ldr	r3, [r5, #16]
 8010986:	b99b      	cbnz	r3, 80109b0 <_vfiprintf_r+0x5c>
 8010988:	4629      	mov	r1, r5
 801098a:	4630      	mov	r0, r6
 801098c:	f000 f938 	bl	8010c00 <__swsetup_r>
 8010990:	b170      	cbz	r0, 80109b0 <_vfiprintf_r+0x5c>
 8010992:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010994:	07dc      	lsls	r4, r3, #31
 8010996:	d504      	bpl.n	80109a2 <_vfiprintf_r+0x4e>
 8010998:	f04f 30ff 	mov.w	r0, #4294967295
 801099c:	b01d      	add	sp, #116	@ 0x74
 801099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a2:	89ab      	ldrh	r3, [r5, #12]
 80109a4:	0598      	lsls	r0, r3, #22
 80109a6:	d4f7      	bmi.n	8010998 <_vfiprintf_r+0x44>
 80109a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109aa:	f7fd fe55 	bl	800e658 <__retarget_lock_release_recursive>
 80109ae:	e7f3      	b.n	8010998 <_vfiprintf_r+0x44>
 80109b0:	2300      	movs	r3, #0
 80109b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80109b4:	2320      	movs	r3, #32
 80109b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80109be:	2330      	movs	r3, #48	@ 0x30
 80109c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b70 <_vfiprintf_r+0x21c>
 80109c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109c8:	f04f 0901 	mov.w	r9, #1
 80109cc:	4623      	mov	r3, r4
 80109ce:	469a      	mov	sl, r3
 80109d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109d4:	b10a      	cbz	r2, 80109da <_vfiprintf_r+0x86>
 80109d6:	2a25      	cmp	r2, #37	@ 0x25
 80109d8:	d1f9      	bne.n	80109ce <_vfiprintf_r+0x7a>
 80109da:	ebba 0b04 	subs.w	fp, sl, r4
 80109de:	d00b      	beq.n	80109f8 <_vfiprintf_r+0xa4>
 80109e0:	465b      	mov	r3, fp
 80109e2:	4622      	mov	r2, r4
 80109e4:	4629      	mov	r1, r5
 80109e6:	4630      	mov	r0, r6
 80109e8:	f7ff ffa2 	bl	8010930 <__sfputs_r>
 80109ec:	3001      	adds	r0, #1
 80109ee:	f000 80a7 	beq.w	8010b40 <_vfiprintf_r+0x1ec>
 80109f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109f4:	445a      	add	r2, fp
 80109f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80109f8:	f89a 3000 	ldrb.w	r3, [sl]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f000 809f 	beq.w	8010b40 <_vfiprintf_r+0x1ec>
 8010a02:	2300      	movs	r3, #0
 8010a04:	f04f 32ff 	mov.w	r2, #4294967295
 8010a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a0c:	f10a 0a01 	add.w	sl, sl, #1
 8010a10:	9304      	str	r3, [sp, #16]
 8010a12:	9307      	str	r3, [sp, #28]
 8010a14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a18:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a1a:	4654      	mov	r4, sl
 8010a1c:	2205      	movs	r2, #5
 8010a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a22:	4853      	ldr	r0, [pc, #332]	@ (8010b70 <_vfiprintf_r+0x21c>)
 8010a24:	f7ef fbfc 	bl	8000220 <memchr>
 8010a28:	9a04      	ldr	r2, [sp, #16]
 8010a2a:	b9d8      	cbnz	r0, 8010a64 <_vfiprintf_r+0x110>
 8010a2c:	06d1      	lsls	r1, r2, #27
 8010a2e:	bf44      	itt	mi
 8010a30:	2320      	movmi	r3, #32
 8010a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a36:	0713      	lsls	r3, r2, #28
 8010a38:	bf44      	itt	mi
 8010a3a:	232b      	movmi	r3, #43	@ 0x2b
 8010a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a40:	f89a 3000 	ldrb.w	r3, [sl]
 8010a44:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a46:	d015      	beq.n	8010a74 <_vfiprintf_r+0x120>
 8010a48:	9a07      	ldr	r2, [sp, #28]
 8010a4a:	4654      	mov	r4, sl
 8010a4c:	2000      	movs	r0, #0
 8010a4e:	f04f 0c0a 	mov.w	ip, #10
 8010a52:	4621      	mov	r1, r4
 8010a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a58:	3b30      	subs	r3, #48	@ 0x30
 8010a5a:	2b09      	cmp	r3, #9
 8010a5c:	d94b      	bls.n	8010af6 <_vfiprintf_r+0x1a2>
 8010a5e:	b1b0      	cbz	r0, 8010a8e <_vfiprintf_r+0x13a>
 8010a60:	9207      	str	r2, [sp, #28]
 8010a62:	e014      	b.n	8010a8e <_vfiprintf_r+0x13a>
 8010a64:	eba0 0308 	sub.w	r3, r0, r8
 8010a68:	fa09 f303 	lsl.w	r3, r9, r3
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	9304      	str	r3, [sp, #16]
 8010a70:	46a2      	mov	sl, r4
 8010a72:	e7d2      	b.n	8010a1a <_vfiprintf_r+0xc6>
 8010a74:	9b03      	ldr	r3, [sp, #12]
 8010a76:	1d19      	adds	r1, r3, #4
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	9103      	str	r1, [sp, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	bfbb      	ittet	lt
 8010a80:	425b      	neglt	r3, r3
 8010a82:	f042 0202 	orrlt.w	r2, r2, #2
 8010a86:	9307      	strge	r3, [sp, #28]
 8010a88:	9307      	strlt	r3, [sp, #28]
 8010a8a:	bfb8      	it	lt
 8010a8c:	9204      	strlt	r2, [sp, #16]
 8010a8e:	7823      	ldrb	r3, [r4, #0]
 8010a90:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a92:	d10a      	bne.n	8010aaa <_vfiprintf_r+0x156>
 8010a94:	7863      	ldrb	r3, [r4, #1]
 8010a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a98:	d132      	bne.n	8010b00 <_vfiprintf_r+0x1ac>
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	1d1a      	adds	r2, r3, #4
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	9203      	str	r2, [sp, #12]
 8010aa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010aa6:	3402      	adds	r4, #2
 8010aa8:	9305      	str	r3, [sp, #20]
 8010aaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b80 <_vfiprintf_r+0x22c>
 8010aae:	7821      	ldrb	r1, [r4, #0]
 8010ab0:	2203      	movs	r2, #3
 8010ab2:	4650      	mov	r0, sl
 8010ab4:	f7ef fbb4 	bl	8000220 <memchr>
 8010ab8:	b138      	cbz	r0, 8010aca <_vfiprintf_r+0x176>
 8010aba:	9b04      	ldr	r3, [sp, #16]
 8010abc:	eba0 000a 	sub.w	r0, r0, sl
 8010ac0:	2240      	movs	r2, #64	@ 0x40
 8010ac2:	4082      	lsls	r2, r0
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	3401      	adds	r4, #1
 8010ac8:	9304      	str	r3, [sp, #16]
 8010aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ace:	4829      	ldr	r0, [pc, #164]	@ (8010b74 <_vfiprintf_r+0x220>)
 8010ad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ad4:	2206      	movs	r2, #6
 8010ad6:	f7ef fba3 	bl	8000220 <memchr>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d03f      	beq.n	8010b5e <_vfiprintf_r+0x20a>
 8010ade:	4b26      	ldr	r3, [pc, #152]	@ (8010b78 <_vfiprintf_r+0x224>)
 8010ae0:	bb1b      	cbnz	r3, 8010b2a <_vfiprintf_r+0x1d6>
 8010ae2:	9b03      	ldr	r3, [sp, #12]
 8010ae4:	3307      	adds	r3, #7
 8010ae6:	f023 0307 	bic.w	r3, r3, #7
 8010aea:	3308      	adds	r3, #8
 8010aec:	9303      	str	r3, [sp, #12]
 8010aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010af0:	443b      	add	r3, r7
 8010af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010af4:	e76a      	b.n	80109cc <_vfiprintf_r+0x78>
 8010af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010afa:	460c      	mov	r4, r1
 8010afc:	2001      	movs	r0, #1
 8010afe:	e7a8      	b.n	8010a52 <_vfiprintf_r+0xfe>
 8010b00:	2300      	movs	r3, #0
 8010b02:	3401      	adds	r4, #1
 8010b04:	9305      	str	r3, [sp, #20]
 8010b06:	4619      	mov	r1, r3
 8010b08:	f04f 0c0a 	mov.w	ip, #10
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b12:	3a30      	subs	r2, #48	@ 0x30
 8010b14:	2a09      	cmp	r2, #9
 8010b16:	d903      	bls.n	8010b20 <_vfiprintf_r+0x1cc>
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d0c6      	beq.n	8010aaa <_vfiprintf_r+0x156>
 8010b1c:	9105      	str	r1, [sp, #20]
 8010b1e:	e7c4      	b.n	8010aaa <_vfiprintf_r+0x156>
 8010b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b24:	4604      	mov	r4, r0
 8010b26:	2301      	movs	r3, #1
 8010b28:	e7f0      	b.n	8010b0c <_vfiprintf_r+0x1b8>
 8010b2a:	ab03      	add	r3, sp, #12
 8010b2c:	9300      	str	r3, [sp, #0]
 8010b2e:	462a      	mov	r2, r5
 8010b30:	4b12      	ldr	r3, [pc, #72]	@ (8010b7c <_vfiprintf_r+0x228>)
 8010b32:	a904      	add	r1, sp, #16
 8010b34:	4630      	mov	r0, r6
 8010b36:	f7fc fdc9 	bl	800d6cc <_printf_float>
 8010b3a:	4607      	mov	r7, r0
 8010b3c:	1c78      	adds	r0, r7, #1
 8010b3e:	d1d6      	bne.n	8010aee <_vfiprintf_r+0x19a>
 8010b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b42:	07d9      	lsls	r1, r3, #31
 8010b44:	d405      	bmi.n	8010b52 <_vfiprintf_r+0x1fe>
 8010b46:	89ab      	ldrh	r3, [r5, #12]
 8010b48:	059a      	lsls	r2, r3, #22
 8010b4a:	d402      	bmi.n	8010b52 <_vfiprintf_r+0x1fe>
 8010b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b4e:	f7fd fd83 	bl	800e658 <__retarget_lock_release_recursive>
 8010b52:	89ab      	ldrh	r3, [r5, #12]
 8010b54:	065b      	lsls	r3, r3, #25
 8010b56:	f53f af1f 	bmi.w	8010998 <_vfiprintf_r+0x44>
 8010b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b5c:	e71e      	b.n	801099c <_vfiprintf_r+0x48>
 8010b5e:	ab03      	add	r3, sp, #12
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	462a      	mov	r2, r5
 8010b64:	4b05      	ldr	r3, [pc, #20]	@ (8010b7c <_vfiprintf_r+0x228>)
 8010b66:	a904      	add	r1, sp, #16
 8010b68:	4630      	mov	r0, r6
 8010b6a:	f7fd f847 	bl	800dbfc <_printf_i>
 8010b6e:	e7e4      	b.n	8010b3a <_vfiprintf_r+0x1e6>
 8010b70:	080113c0 	.word	0x080113c0
 8010b74:	080113ca 	.word	0x080113ca
 8010b78:	0800d6cd 	.word	0x0800d6cd
 8010b7c:	08010931 	.word	0x08010931
 8010b80:	080113c6 	.word	0x080113c6

08010b84 <__swbuf_r>:
 8010b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b86:	460e      	mov	r6, r1
 8010b88:	4614      	mov	r4, r2
 8010b8a:	4605      	mov	r5, r0
 8010b8c:	b118      	cbz	r0, 8010b96 <__swbuf_r+0x12>
 8010b8e:	6a03      	ldr	r3, [r0, #32]
 8010b90:	b90b      	cbnz	r3, 8010b96 <__swbuf_r+0x12>
 8010b92:	f7fd fbf3 	bl	800e37c <__sinit>
 8010b96:	69a3      	ldr	r3, [r4, #24]
 8010b98:	60a3      	str	r3, [r4, #8]
 8010b9a:	89a3      	ldrh	r3, [r4, #12]
 8010b9c:	071a      	lsls	r2, r3, #28
 8010b9e:	d501      	bpl.n	8010ba4 <__swbuf_r+0x20>
 8010ba0:	6923      	ldr	r3, [r4, #16]
 8010ba2:	b943      	cbnz	r3, 8010bb6 <__swbuf_r+0x32>
 8010ba4:	4621      	mov	r1, r4
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f000 f82a 	bl	8010c00 <__swsetup_r>
 8010bac:	b118      	cbz	r0, 8010bb6 <__swbuf_r+0x32>
 8010bae:	f04f 37ff 	mov.w	r7, #4294967295
 8010bb2:	4638      	mov	r0, r7
 8010bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb6:	6823      	ldr	r3, [r4, #0]
 8010bb8:	6922      	ldr	r2, [r4, #16]
 8010bba:	1a98      	subs	r0, r3, r2
 8010bbc:	6963      	ldr	r3, [r4, #20]
 8010bbe:	b2f6      	uxtb	r6, r6
 8010bc0:	4283      	cmp	r3, r0
 8010bc2:	4637      	mov	r7, r6
 8010bc4:	dc05      	bgt.n	8010bd2 <__swbuf_r+0x4e>
 8010bc6:	4621      	mov	r1, r4
 8010bc8:	4628      	mov	r0, r5
 8010bca:	f7ff fdfd 	bl	80107c8 <_fflush_r>
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	d1ed      	bne.n	8010bae <__swbuf_r+0x2a>
 8010bd2:	68a3      	ldr	r3, [r4, #8]
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	60a3      	str	r3, [r4, #8]
 8010bd8:	6823      	ldr	r3, [r4, #0]
 8010bda:	1c5a      	adds	r2, r3, #1
 8010bdc:	6022      	str	r2, [r4, #0]
 8010bde:	701e      	strb	r6, [r3, #0]
 8010be0:	6962      	ldr	r2, [r4, #20]
 8010be2:	1c43      	adds	r3, r0, #1
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d004      	beq.n	8010bf2 <__swbuf_r+0x6e>
 8010be8:	89a3      	ldrh	r3, [r4, #12]
 8010bea:	07db      	lsls	r3, r3, #31
 8010bec:	d5e1      	bpl.n	8010bb2 <__swbuf_r+0x2e>
 8010bee:	2e0a      	cmp	r6, #10
 8010bf0:	d1df      	bne.n	8010bb2 <__swbuf_r+0x2e>
 8010bf2:	4621      	mov	r1, r4
 8010bf4:	4628      	mov	r0, r5
 8010bf6:	f7ff fde7 	bl	80107c8 <_fflush_r>
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	d0d9      	beq.n	8010bb2 <__swbuf_r+0x2e>
 8010bfe:	e7d6      	b.n	8010bae <__swbuf_r+0x2a>

08010c00 <__swsetup_r>:
 8010c00:	b538      	push	{r3, r4, r5, lr}
 8010c02:	4b29      	ldr	r3, [pc, #164]	@ (8010ca8 <__swsetup_r+0xa8>)
 8010c04:	4605      	mov	r5, r0
 8010c06:	6818      	ldr	r0, [r3, #0]
 8010c08:	460c      	mov	r4, r1
 8010c0a:	b118      	cbz	r0, 8010c14 <__swsetup_r+0x14>
 8010c0c:	6a03      	ldr	r3, [r0, #32]
 8010c0e:	b90b      	cbnz	r3, 8010c14 <__swsetup_r+0x14>
 8010c10:	f7fd fbb4 	bl	800e37c <__sinit>
 8010c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c18:	0719      	lsls	r1, r3, #28
 8010c1a:	d422      	bmi.n	8010c62 <__swsetup_r+0x62>
 8010c1c:	06da      	lsls	r2, r3, #27
 8010c1e:	d407      	bmi.n	8010c30 <__swsetup_r+0x30>
 8010c20:	2209      	movs	r2, #9
 8010c22:	602a      	str	r2, [r5, #0]
 8010c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c28:	81a3      	strh	r3, [r4, #12]
 8010c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2e:	e033      	b.n	8010c98 <__swsetup_r+0x98>
 8010c30:	0758      	lsls	r0, r3, #29
 8010c32:	d512      	bpl.n	8010c5a <__swsetup_r+0x5a>
 8010c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c36:	b141      	cbz	r1, 8010c4a <__swsetup_r+0x4a>
 8010c38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c3c:	4299      	cmp	r1, r3
 8010c3e:	d002      	beq.n	8010c46 <__swsetup_r+0x46>
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7fe fb91 	bl	800f368 <_free_r>
 8010c46:	2300      	movs	r3, #0
 8010c48:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c4a:	89a3      	ldrh	r3, [r4, #12]
 8010c4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010c50:	81a3      	strh	r3, [r4, #12]
 8010c52:	2300      	movs	r3, #0
 8010c54:	6063      	str	r3, [r4, #4]
 8010c56:	6923      	ldr	r3, [r4, #16]
 8010c58:	6023      	str	r3, [r4, #0]
 8010c5a:	89a3      	ldrh	r3, [r4, #12]
 8010c5c:	f043 0308 	orr.w	r3, r3, #8
 8010c60:	81a3      	strh	r3, [r4, #12]
 8010c62:	6923      	ldr	r3, [r4, #16]
 8010c64:	b94b      	cbnz	r3, 8010c7a <__swsetup_r+0x7a>
 8010c66:	89a3      	ldrh	r3, [r4, #12]
 8010c68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c70:	d003      	beq.n	8010c7a <__swsetup_r+0x7a>
 8010c72:	4621      	mov	r1, r4
 8010c74:	4628      	mov	r0, r5
 8010c76:	f000 f88b 	bl	8010d90 <__smakebuf_r>
 8010c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c7e:	f013 0201 	ands.w	r2, r3, #1
 8010c82:	d00a      	beq.n	8010c9a <__swsetup_r+0x9a>
 8010c84:	2200      	movs	r2, #0
 8010c86:	60a2      	str	r2, [r4, #8]
 8010c88:	6962      	ldr	r2, [r4, #20]
 8010c8a:	4252      	negs	r2, r2
 8010c8c:	61a2      	str	r2, [r4, #24]
 8010c8e:	6922      	ldr	r2, [r4, #16]
 8010c90:	b942      	cbnz	r2, 8010ca4 <__swsetup_r+0xa4>
 8010c92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010c96:	d1c5      	bne.n	8010c24 <__swsetup_r+0x24>
 8010c98:	bd38      	pop	{r3, r4, r5, pc}
 8010c9a:	0799      	lsls	r1, r3, #30
 8010c9c:	bf58      	it	pl
 8010c9e:	6962      	ldrpl	r2, [r4, #20]
 8010ca0:	60a2      	str	r2, [r4, #8]
 8010ca2:	e7f4      	b.n	8010c8e <__swsetup_r+0x8e>
 8010ca4:	2000      	movs	r0, #0
 8010ca6:	e7f7      	b.n	8010c98 <__swsetup_r+0x98>
 8010ca8:	200001a4 	.word	0x200001a4

08010cac <_raise_r>:
 8010cac:	291f      	cmp	r1, #31
 8010cae:	b538      	push	{r3, r4, r5, lr}
 8010cb0:	4605      	mov	r5, r0
 8010cb2:	460c      	mov	r4, r1
 8010cb4:	d904      	bls.n	8010cc0 <_raise_r+0x14>
 8010cb6:	2316      	movs	r3, #22
 8010cb8:	6003      	str	r3, [r0, #0]
 8010cba:	f04f 30ff 	mov.w	r0, #4294967295
 8010cbe:	bd38      	pop	{r3, r4, r5, pc}
 8010cc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010cc2:	b112      	cbz	r2, 8010cca <_raise_r+0x1e>
 8010cc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010cc8:	b94b      	cbnz	r3, 8010cde <_raise_r+0x32>
 8010cca:	4628      	mov	r0, r5
 8010ccc:	f000 f830 	bl	8010d30 <_getpid_r>
 8010cd0:	4622      	mov	r2, r4
 8010cd2:	4601      	mov	r1, r0
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cda:	f000 b817 	b.w	8010d0c <_kill_r>
 8010cde:	2b01      	cmp	r3, #1
 8010ce0:	d00a      	beq.n	8010cf8 <_raise_r+0x4c>
 8010ce2:	1c59      	adds	r1, r3, #1
 8010ce4:	d103      	bne.n	8010cee <_raise_r+0x42>
 8010ce6:	2316      	movs	r3, #22
 8010ce8:	6003      	str	r3, [r0, #0]
 8010cea:	2001      	movs	r0, #1
 8010cec:	e7e7      	b.n	8010cbe <_raise_r+0x12>
 8010cee:	2100      	movs	r1, #0
 8010cf0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	4798      	blx	r3
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	e7e0      	b.n	8010cbe <_raise_r+0x12>

08010cfc <raise>:
 8010cfc:	4b02      	ldr	r3, [pc, #8]	@ (8010d08 <raise+0xc>)
 8010cfe:	4601      	mov	r1, r0
 8010d00:	6818      	ldr	r0, [r3, #0]
 8010d02:	f7ff bfd3 	b.w	8010cac <_raise_r>
 8010d06:	bf00      	nop
 8010d08:	200001a4 	.word	0x200001a4

08010d0c <_kill_r>:
 8010d0c:	b538      	push	{r3, r4, r5, lr}
 8010d0e:	4d07      	ldr	r5, [pc, #28]	@ (8010d2c <_kill_r+0x20>)
 8010d10:	2300      	movs	r3, #0
 8010d12:	4604      	mov	r4, r0
 8010d14:	4608      	mov	r0, r1
 8010d16:	4611      	mov	r1, r2
 8010d18:	602b      	str	r3, [r5, #0]
 8010d1a:	f7f1 fdc7 	bl	80028ac <_kill>
 8010d1e:	1c43      	adds	r3, r0, #1
 8010d20:	d102      	bne.n	8010d28 <_kill_r+0x1c>
 8010d22:	682b      	ldr	r3, [r5, #0]
 8010d24:	b103      	cbz	r3, 8010d28 <_kill_r+0x1c>
 8010d26:	6023      	str	r3, [r4, #0]
 8010d28:	bd38      	pop	{r3, r4, r5, pc}
 8010d2a:	bf00      	nop
 8010d2c:	20001494 	.word	0x20001494

08010d30 <_getpid_r>:
 8010d30:	f7f1 bdb4 	b.w	800289c <_getpid>

08010d34 <_malloc_usable_size_r>:
 8010d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d38:	1f18      	subs	r0, r3, #4
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	bfbc      	itt	lt
 8010d3e:	580b      	ldrlt	r3, [r1, r0]
 8010d40:	18c0      	addlt	r0, r0, r3
 8010d42:	4770      	bx	lr

08010d44 <__swhatbuf_r>:
 8010d44:	b570      	push	{r4, r5, r6, lr}
 8010d46:	460c      	mov	r4, r1
 8010d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d4c:	2900      	cmp	r1, #0
 8010d4e:	b096      	sub	sp, #88	@ 0x58
 8010d50:	4615      	mov	r5, r2
 8010d52:	461e      	mov	r6, r3
 8010d54:	da0d      	bge.n	8010d72 <__swhatbuf_r+0x2e>
 8010d56:	89a3      	ldrh	r3, [r4, #12]
 8010d58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010d5c:	f04f 0100 	mov.w	r1, #0
 8010d60:	bf14      	ite	ne
 8010d62:	2340      	movne	r3, #64	@ 0x40
 8010d64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010d68:	2000      	movs	r0, #0
 8010d6a:	6031      	str	r1, [r6, #0]
 8010d6c:	602b      	str	r3, [r5, #0]
 8010d6e:	b016      	add	sp, #88	@ 0x58
 8010d70:	bd70      	pop	{r4, r5, r6, pc}
 8010d72:	466a      	mov	r2, sp
 8010d74:	f000 f848 	bl	8010e08 <_fstat_r>
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	dbec      	blt.n	8010d56 <__swhatbuf_r+0x12>
 8010d7c:	9901      	ldr	r1, [sp, #4]
 8010d7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010d82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010d86:	4259      	negs	r1, r3
 8010d88:	4159      	adcs	r1, r3
 8010d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d8e:	e7eb      	b.n	8010d68 <__swhatbuf_r+0x24>

08010d90 <__smakebuf_r>:
 8010d90:	898b      	ldrh	r3, [r1, #12]
 8010d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d94:	079d      	lsls	r5, r3, #30
 8010d96:	4606      	mov	r6, r0
 8010d98:	460c      	mov	r4, r1
 8010d9a:	d507      	bpl.n	8010dac <__smakebuf_r+0x1c>
 8010d9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010da0:	6023      	str	r3, [r4, #0]
 8010da2:	6123      	str	r3, [r4, #16]
 8010da4:	2301      	movs	r3, #1
 8010da6:	6163      	str	r3, [r4, #20]
 8010da8:	b003      	add	sp, #12
 8010daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dac:	ab01      	add	r3, sp, #4
 8010dae:	466a      	mov	r2, sp
 8010db0:	f7ff ffc8 	bl	8010d44 <__swhatbuf_r>
 8010db4:	9f00      	ldr	r7, [sp, #0]
 8010db6:	4605      	mov	r5, r0
 8010db8:	4639      	mov	r1, r7
 8010dba:	4630      	mov	r0, r6
 8010dbc:	f7fb fcd6 	bl	800c76c <_malloc_r>
 8010dc0:	b948      	cbnz	r0, 8010dd6 <__smakebuf_r+0x46>
 8010dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dc6:	059a      	lsls	r2, r3, #22
 8010dc8:	d4ee      	bmi.n	8010da8 <__smakebuf_r+0x18>
 8010dca:	f023 0303 	bic.w	r3, r3, #3
 8010dce:	f043 0302 	orr.w	r3, r3, #2
 8010dd2:	81a3      	strh	r3, [r4, #12]
 8010dd4:	e7e2      	b.n	8010d9c <__smakebuf_r+0xc>
 8010dd6:	89a3      	ldrh	r3, [r4, #12]
 8010dd8:	6020      	str	r0, [r4, #0]
 8010dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dde:	81a3      	strh	r3, [r4, #12]
 8010de0:	9b01      	ldr	r3, [sp, #4]
 8010de2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010de6:	b15b      	cbz	r3, 8010e00 <__smakebuf_r+0x70>
 8010de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dec:	4630      	mov	r0, r6
 8010dee:	f000 f81d 	bl	8010e2c <_isatty_r>
 8010df2:	b128      	cbz	r0, 8010e00 <__smakebuf_r+0x70>
 8010df4:	89a3      	ldrh	r3, [r4, #12]
 8010df6:	f023 0303 	bic.w	r3, r3, #3
 8010dfa:	f043 0301 	orr.w	r3, r3, #1
 8010dfe:	81a3      	strh	r3, [r4, #12]
 8010e00:	89a3      	ldrh	r3, [r4, #12]
 8010e02:	431d      	orrs	r5, r3
 8010e04:	81a5      	strh	r5, [r4, #12]
 8010e06:	e7cf      	b.n	8010da8 <__smakebuf_r+0x18>

08010e08 <_fstat_r>:
 8010e08:	b538      	push	{r3, r4, r5, lr}
 8010e0a:	4d07      	ldr	r5, [pc, #28]	@ (8010e28 <_fstat_r+0x20>)
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	4604      	mov	r4, r0
 8010e10:	4608      	mov	r0, r1
 8010e12:	4611      	mov	r1, r2
 8010e14:	602b      	str	r3, [r5, #0]
 8010e16:	f7f1 fda9 	bl	800296c <_fstat>
 8010e1a:	1c43      	adds	r3, r0, #1
 8010e1c:	d102      	bne.n	8010e24 <_fstat_r+0x1c>
 8010e1e:	682b      	ldr	r3, [r5, #0]
 8010e20:	b103      	cbz	r3, 8010e24 <_fstat_r+0x1c>
 8010e22:	6023      	str	r3, [r4, #0]
 8010e24:	bd38      	pop	{r3, r4, r5, pc}
 8010e26:	bf00      	nop
 8010e28:	20001494 	.word	0x20001494

08010e2c <_isatty_r>:
 8010e2c:	b538      	push	{r3, r4, r5, lr}
 8010e2e:	4d06      	ldr	r5, [pc, #24]	@ (8010e48 <_isatty_r+0x1c>)
 8010e30:	2300      	movs	r3, #0
 8010e32:	4604      	mov	r4, r0
 8010e34:	4608      	mov	r0, r1
 8010e36:	602b      	str	r3, [r5, #0]
 8010e38:	f7f1 fda8 	bl	800298c <_isatty>
 8010e3c:	1c43      	adds	r3, r0, #1
 8010e3e:	d102      	bne.n	8010e46 <_isatty_r+0x1a>
 8010e40:	682b      	ldr	r3, [r5, #0]
 8010e42:	b103      	cbz	r3, 8010e46 <_isatty_r+0x1a>
 8010e44:	6023      	str	r3, [r4, #0]
 8010e46:	bd38      	pop	{r3, r4, r5, pc}
 8010e48:	20001494 	.word	0x20001494

08010e4c <_init>:
 8010e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4e:	bf00      	nop
 8010e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e52:	bc08      	pop	{r3}
 8010e54:	469e      	mov	lr, r3
 8010e56:	4770      	bx	lr

08010e58 <_fini>:
 8010e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5a:	bf00      	nop
 8010e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e5e:	bc08      	pop	{r3}
 8010e60:	469e      	mov	lr, r3
 8010e62:	4770      	bx	lr
